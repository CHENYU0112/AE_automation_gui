from collections.abc import Iterable

import pandas as pd

__all__ = [
    "to_dataframe",
    "unique_users_per_week",
    "unique_users_per_month",
    "unique_users_by",
    "monthly_usage_by",
    "monthly_tool_usage_by_bu",
    "monthly_usage_by_tool_and_feature",
]


def to_dataframe(features: Iterable[dict]) -> pd.DataFrame:
    """
    Converts response data from a feature search query into a Pandas dataframe.
    """
    df = pd.DataFrame.from_records(features)
    if "migration_id" in df.columns:
        df.drop(columns=["migration_id"], inplace=True)
    df.timestamp = pd.to_datetime(df.timestamp)
    df["date"] = df.timestamp.dt.date
    df.set_index("timestamp", inplace=True)
    return df


def unique_users_per_week(df: pd.DataFrame) -> pd.Series:
    return df.user.copy().resample("W").nunique()


def unique_users_per_month(df: pd.DataFrame) -> pd.Series:
    return df.user.copy().resample("ME").nunique()


def unique_users_by(df: pd.DataFrame, by: str) -> pd.DataFrame:
    return df.groupby(by).agg(unique_users=("user", "nunique"))


def monthly_usage_by(df: pd.DataFrame, by: str) -> pd.DataFrame:
    monthly_by_tool = df.groupby(by).resample("ME")
    monthly_usage_by_tool = monthly_by_tool.tool.count().to_frame()
    return monthly_usage_by_tool.rename(columns={by: "usage"}).reset_index()


def monthly_usage_by_tool_and_feature(df: pd.DataFrame) -> pd.DataFrame:
    monthly_by_tool_and_feature = df.groupby(["tool", "feature"]).resample("ME")

    monthly_usage_by_tool_and_feature = monthly_by_tool_and_feature.feature.count().to_frame()
    return monthly_usage_by_tool_and_feature.rename(columns={"feature": "usage"}).reset_index()


def monthly_tool_usage_by_bu(df: pd.DataFrame) -> pd.DataFrame:
    monthly_by_bu = df.groupby(["bu", "tool"]).resample("ME")

    return monthly_by_bu.tool.count().to_frame().rename(columns={"tool": "usage"}).reset_index()
