from __future__ import annotations


class AnalysisType:
    """
    Container including enums for supported Analysis Types.
    """

    TRAN = "TRAN"
    DC = "DC"
    AC = "AC"
    NOISE = "NOISE"
    TF = "TF"
    POP = "POP"


class SimulatorType:
    """
    Container including enums for supported Simulators.
    """

    Simetrix = "Simetrix"
    Simplis = "Simplis"
    Titan = "Titan"
    SystemC = "SystemC"
    AMSDesigner = "AMSDesigner"


class TitanSuffix:
    """
    Container including enums for supported Result File Endings.
    """

    Tran_Windows = ".tr.t1.csdf"
    Tran_Unix = ".tr.csdf"
    DC_Windows = ".dc.t1.csdf"
    DC_Unix = ".dc.csdf"
    AC_Windows = ".ac.t1.csdf"
    AC_Unix = ".ac.csdf"

    Tran_HDF5 = ".tr.h5"
    DC_HDF5 = ".dc.h5"
    AC_HDF5 = ".ac.h5"


class SimulationDatatype:
    """
    Container including enums for supported Simulation Data Types.
    """

    SXDAT = ".sxdat"
    HDF5 = ".hdf5"
    CSV = ".csv"
    VCD = ".vcd"


class SupportedSimulationDatatype:
    all_options = [SimulationDatatype.SXDAT, SimulationDatatype.CSV, SimulationDatatype.VCD, SimulationDatatype.HDF5]
    simetrix_options = [SimulationDatatype.SXDAT, SimulationDatatype.CSV, SimulationDatatype.VCD]
    titan_options = [SimulationDatatype.SXDAT, SimulationDatatype.CSV, SimulationDatatype.VCD, SimulationDatatype.HDF5]


class HDF5Bool:
    """
    Container for true and false strings necessary for evaluation of HDF5 attributes.
    """

    TRUE = "true"
    FALSE = "false"


class LibraryTypes:
    """
    Container for all possible library types, which could be added to or removed from a simulator environment.
    """

    MODEL = "model"
    SYMBOL = "symbol"


class SimulatorAnalysisOpts:
    """
    Container for simulator and analysis options mapping for every available combination of analysis and simulator pairs.
    Key is simulator name
    Value is SRD name
    """

    Simetrix_TRAN = {
        "tstart": "tstart",
        "tstop": "tstop",
        "tstep": "tstep",
        "tmax": "tmaxstep",
        "uic": "uic",
        "rtnstart": "rtnstart",
        "rtnstop": "rtnstop",
        "rtnstep": "rtnstep",
        "fast": "fast",
        "runname": "runname",
        "ABSTOL": "abstol",
        "FASTPOINTTOL": "fastpointtol",
        "FASTRELTOL": "fastreltol",
        "FLUXTOL": "fluxtol",
        "METHOD": "method",
        "POINTTOL": "pointtol",
        "RELTOP": "reltop",
        "TEMP": "temp",
        "TRTOL": "trtol",
        "VNTOL": "vntol",
        "minTimeStep": "mintimestep",
    }


class IFXspiceMode:
    """
    Container for possible IFXspice modes.
    """

    Local_Windows = "local_win"
    Distributed_Unix = "distrib_unix"
    Distributed_DE = "distrib_de"
    Distributed_RE = "distrib_re"


class CopyFiles:
    """
    Container for files to copy.
    """

    SIMetrix_verbose_0 = [".swpdat", ".net", ".sxdat", "_netlist.log", "_simulation.log", ".vcd", "csv", ".h5"]
    SIMetrix_verbose_1 = [
        ".swpdat",
        "change_dir.sxscr",
        "netlist.sxscr",
        "exec_sim.sxscr",
        "get_schem_opts.sxscr",
        "schem_opts.net",
        "schem_opts.out",
        "schem_opts.txt",
        "model_libraries_loaded.txt",
        "symbol_libraries_loaded.txt",
        ".net",
        ".sxdat",
        "netlist.log",
        "simulation.log",
        "_imported_models.net",
        ".out",
        ".vcd",
        "csv",
        ".h5",
    ]
    IFXspice_verbose_0 = [
        ".swpdat",
        ".net",
        ".tit",
        ".sxdat",
        "netlist.log",
        "simulation.log",
        ".tr.t1.csdf",
        ".tr.csdf",
        ".dc.t1.csdf",
        ".dc.csdf",
        ".ac.t1.csdf",
        ".ac.csdf",
        ".tr.h5",
        ".dc.h5",
        ".ac.h5",
        ".vcd",
        "csv",
        ".h5",
    ]
    IFXspice_verbose_1 = [
        ".swpdat",
        "change_dir.sxscr",
        "netlist.sxscr",
        "ifxspice.ini",
        "convert_to_sxdat.sxscr",
        ".swpdat",
        ".tr.t1.csdf",
        ".tr.csdf",
        ".dc.t1.csdf",
        ".dc.csdf",
        ".ac.t1.csdf",
        ".ac.csdf",
        ".tr.h5",
        ".dc.h5",
        ".ac.h5",
        "_imported_models.net",
        ".dir",
        ".tit.lis",
        ".files.bat",
        ".graph.sxscr",
        ".net",
        ".tit",
        ".sxdat",
        "netlist.log",
        "simulation.log",
        ".CleanSamba.bat",
        ".startSweep.bat",
        ".stm",
        ".vcd",
        "csv",
        ".h5",
    ]


class CleanupFiles:
    """
    Container for files to cleanup.
    """

    SIMetrix = [
        "get_libs.sxscr",
        ".swpdat",
        "change_dir.sxscr",
        "netlist.sxscr",
        "exec_sim.sxscr",
        "get_schem_opts.sxscr",
        "schem_opts.net",
        "schem_opts.out",
        "schem_opts.txt",
        "model_libraries_loaded.txt",
        "symbol_libraries_loaded.txt",
        "_imported_models.net",
        ".out",
        ".net",
        ".sxdat",
        "_netlist.log",
        "_simulation.log",
        ".vcd",
        "csv",
        ".h5",
    ]
    IFXspice = [
        ".swpdat",
        "change_dir.sxscr",
        "netlist.sxscr",
        "ifxspice.ini",
        "convert_to_sxdat.sxscr",
        ".tr.t1.csdf",
        ".tr.csdf",
        ".dc.t1.csdf",
        ".dc.csdf",
        ".ac.t1.csdf",
        ".ac.csdf",
        ".tr.h5",
        ".dc.h5",
        ".ac.h5",
        ".tr.h5_c",
        ".dc.h5_c",
        ".ac.h5_c",
        "_imported_models.net",
        ".dir",
        ".tit.lis",
        ".files.bat",
        ".graph.sxscr",
        ".net",
        ".tit",
        ".sxdat",
        "netlist.log",
        "simulation.log",
        ".CleanSamba.bat",
        ".startSweep.bat",
        ".stm",
        ".vcd",
        "csv",
        ".h5",
    ]
    SIMPLIS = [
        "change_dir.sxscr",
        "exec_sim.sxscr",
        "netlist.sxscr",
        "prepnetlist.sxscr",
        ".net.dbg",
        ".net.GrpName",
        ".net.init",
        ".net.lst",
        ".net.t0",
        ".net.t2",
        ".net.tc",
        ".vcd",
        "csv",
        ".h5",
    ]


class ETXAddresses:
    """
    Container for site specific ETX addresses.
    """

    SIN = [r"SIN", r"sin"]
    VIH = [r"VIH", r"vih"]
    TEST = [r"TEST", r"test"]
    options = ["vih", "sin", "test"]


class UnixConnection:
    """
    Container for unix connection type. ETX (default) or ssh
    """

    ETX = "ETX"
    SSH = "ssh"
    Connections = [ETX, SSH]


class SimOptionsBool:
    """
    Container for true and false strings necessary for evaluation of HDF5 attributes.
    """

    boolean = ["True", "False"]


class SimetrixLicenseFeatures:
    """
    Container for Simetrix license features, implemented according to official SIMetrix knowledge base:
    https://www.simetrix.co.uk/support/kb/000011.html
    SIMetrix_Classic = ['basic', 'digital', 'advanced']
    SIMetrix_Pro = SIMetrix_Classic + ['va', 'vl']
    SIMetrix_Elite = SIMetrix_Pro + ['micron', 'rtn']
    SIMetrix_SIMPLIS = SIMetrix_Classic + ['simplis_if']
    SIMetrix_SIMPLIS_Pro = SIMetrix_SIMPLIS + ['mcsp1']
    SIMetrix_SIMPLIS_Elite = SIMetrix_SIMPLIS_Pro +  ['mcsp2']

    So only the differences of the licenses can be checked to determine the license feature
    """

    # SIMetrix license dict from top to down:
    license_dict = {
        "SIMetrix_SIMPLIS_Elite": ["mcsp2"],
        "SIMetrix_SIMPLIS_Pro": ["mcsp1"],
        "SIMetrix_SIMPLIS": ["simplis_if"],
        "SIMetrix_Elite": ["micron", "rtn"],
        "SIMetrix_Pro": ["va", "vl"],
        "SIMetrix_Classic": ["basic", "advanced"],
    }


class ConvergenceOptions:
    """
    Container for Simetrix convergence options.
    """

    normal = "0"
    advanced_iteration = "2"
    extended_precision = "4"
    extended_quad_prec = "6"
    full_quad_prec = "8"

    options = [normal, advanced_iteration, extended_precision, extended_quad_prec, full_quad_prec]
