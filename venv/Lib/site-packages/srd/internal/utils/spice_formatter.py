from __future__ import annotations

import re

import numpy as np

try:
    from collections.abc import OrderedDict
except ImportError:
    from collections import OrderedDict


SCALING = (
    ("a", 1e-18),
    ("f", 1e-15),
    ("p", 1e-12),
    ("n", 1e-9),
    ("u", 1e-6),
    ("m", 1e-3),
    ("mil", 25.4e-6),
    ("k", 1e3),
    ("meg", 1e6),
    ("g", 1e9),
    ("t", 1e12),
)

SCALING_DICT = OrderedDict(SCALING)

SUFFIXES = list(SCALING_DICT.keys())
SUFFIXES.insert(SUFFIXES.index("m") + 1, "")
SUFFIXES.remove("mil")


class SpiceConversionError(Exception):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


def spiceEval(s: str):
    s = s.strip()
    SUFFIXES = "|".join(sorted(SCALING_DICT.keys())[::-1])
    m = re.match(r"(-?((\d+(\.\d*)?)|(\.\d+))([eE]-?\d+)?)\s*(" + SUFFIXES + r")?.*$", s, re.IGNORECASE)
    if m is None:
        msg = f"Can't convert string '{s}' to number."
        raise Exception(msg)
    v = float(m.groups()[0])
    p = m.groups()[6]
    if p is None:
        try:
            return float(s)
        except:
            msg = f"Cannot convert {s} to spice notation!"
            raise SpiceConversionError(msg)
    else:
        return v * SCALING_DICT.get(p.lower(), 1)


def _spiceScale(x):
    """
    Return the recommended scale factor and SI prefix string for x.

    Example::

        _spiceScale(0.0001)   # returns (1e6, 'μ')
        # This indicates that the number 0.0001 is best represented as 0.0001 * 1e6 = 100 μUnits
    """

    x = float(x)

    try:
        if np.isnan(float(x)) or np.isinf(float(x)):
            return (1, "")
    except:
        print(x, type(x))
        raise
    m = int(np.floor(np.log(np.abs(x)) / np.log(1000))) if x != 0 else 0

    if m == 0:
        pref = ""
    elif m < -6 or m > 4:
        pref = "e%d" % (m * 3)
    else:
        pref = SUFFIXES[m + 6]
    p = 0.001**m

    return (p, pref)


def spiceFormat(x, precision=9, suffix="", space=False, error=None):
    """
    Return the number x formatted in engineering notation with SI prefix.

    Example::
        siFormat(0.0001, suffix='V')  # returns "100 μV"
    """

    if space is True:
        space = " "
    if space is False:
        space = ""

    (p, pref) = _spiceScale(x)
    if not (len(pref) > 0 and pref[0] == "e"):
        pref = space + pref

    if error is None:
        fmt = "%." + str(precision) + "g%s%s"
        return fmt % (x * p, pref, suffix)
    else:
        plusminus = " +/- "
        fmt = "%." + str(precision) + "g%s%s%s"
        return fmt % (
            x * p,
            pref,
            suffix,
            plusminus,
            spiceFormat(error, precision=precision, suffix=suffix, space=space),
        )


if __name__ == "__main__":
    for unit, value in SCALING_DICT.items():
        print(unit, value)
        res = spiceEval("1" + unit)
        print(res)
        if res != value:
            msg = "{} -> {}".format("1" + unit, res)
            raise Exception(msg)

    print(spiceFormat(9.999999999999999e-06))

    print(spiceFormat(100000000000000000, 5, suffix="F", space=True))
    print(spiceFormat(10000000000000000))
    print(spiceFormat(1000000000000000))
    print(spiceFormat(100000000000000))
    print(spiceFormat(10000000000000))
    print(spiceFormat(1000000000000))
    print(spiceFormat(100000000000))
    print(spiceFormat(10000000000))
    print(spiceFormat(1000000000))
    print(spiceFormat(100000000))
    print(spiceFormat(10000000))
    print(spiceFormat(1000000))
    print(spiceFormat(100000))
    print(spiceFormat(10000))
    print(spiceFormat(1000))
    print(spiceFormat(100))
    print(spiceFormat(10))
    print(spiceFormat(1))
    print(spiceFormat(0))
    print(spiceFormat(0.1))
    print(spiceFormat(0.01))
    print(spiceFormat(0.001))
    print(spiceFormat(0.0001))
    print(spiceFormat(0.00001))
    print(spiceFormat(0.000001))
    print(spiceFormat(0.0000001))
    print(spiceFormat(0.00000001))
    print(spiceFormat(0.000000001))
    print(spiceFormat(0.0000000001))
    print(spiceFormat(0.00000000001))
    print(spiceFormat(0.000000000001))
    print(spiceFormat(0.0000000000001))
    print(spiceFormat(0.00000000000001))
    print(spiceFormat(0.000000000000001))
    print(spiceFormat(0.0000000000000001))
    print(spiceFormat(0.00000000000000001))
    print(spiceFormat(0.000000000000000001))
    print(spiceFormat(0.0000000000000000001))
    print(spiceFormat(0.00000000000000000001))
    print(spiceFormat(0.000000000000000000001))
