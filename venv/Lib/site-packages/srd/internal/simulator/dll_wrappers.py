from __future__ import annotations

from ctypes import *

__all__ = ["Strings", "VectorInfo", "VectorInfoArray", "Options", "Complex", "VectorData", "Interface"]


class Strings(Structure):
    """
    ctypes wrapper for SRD_String
    """

    _fields_ = [
        ("strings", POINTER(c_char_p)),  # Array of strings. Both array and the string data are owned by the interface
        ("numStrings", c_int),  # Number of elements in strings
    ]


DataType = c_uint
BOOL = c_ubyte
OpMode = c_uint
VectorDataOptions = c_uint
ErrorCode = c_uint


class VectorInfo(Structure):
    """
    ctypes wrapper for SRD_VectorInfo

    Holds for return information from @c getVectorInfo
    """

    global DataType, BOOL
    _fields_ = [
        # operating point value if requested
        #  This is the first point in the vector.
        # See SRD_Options::opMode
        ("scalarVal", c_double),
        #  The total number of points in the vector across all divisions
        ("totalLength", c_int),
        #  Number of divisions. Multi-step runs such as Monte Carlo create multi-div vectors
        #  in which case this value will be non-unity. See script manual for details of
        #   multi division vectors
        ("numDivisions", c_int),
        #  Index into SRD_VectorInfoArray::vectorInfo of 'reference vector'. The reference
        #    vector contains the X-values, e.g. 'Time' for a transient analysis. This is
        #    only valid when calling getVectorInfo with vecName NULL - i.e. when all vectors
        #    are returned. If vecName is specified, SRD_VectorInfoArray::vectorInfo points to
        #    only a single value and so the index has no meaning.
        #
        #   This value will be -1 if the vector has no reference. It will also be -1
        #   for vectors that do have a reference but the reference is not shared. This
        #    happens with digital data generated by the event driven digital simulator. For these
        #    the reference data may only be obtained by specifying SRDV_XY or SRDV_X in the
        #    call to GetVectorData. For analog vectors, the reference is usually the same for
        #    all vectors and so greatest efficiency is achieved by fetching it once and
        #    sharing the data subsequently.
        ("refIndex", c_int),  # -1 if no ref or unnamed
        #  The name of the vector. Can have any ASCII printable character except white space.
        ("name", c_char_p),
        #  dataType: real, complex or string
        ("dataType", DataType),
        #  The vector has a reference - e.g. x-values. (See above). Note that this can be true
        # even if refIndex above is -1 - see refIndex comments for explanation.
        ("hasRef", BOOL),
        # Vector is an alias. See general notes for an explanation
        ("isAlias", BOOL),
        #  set true is an alias evaluation failed when calculating scalarVal - see above
        ("aliasFailed", BOOL),
        #  unused - for future expansion
        ("spare1", BOOL),
        #    Physical type name. One of the following:
        #    PT_UNKNOWN
        #    PT_NONE
        #    PT_VOLT
        #    PT_AMP
        #    PT_SECOND
        #    PT_HERTZ
        #    PT_OHM
        #    PT_SIEMEN
        #    PT_FARAD
        #    PT_HENRY
        #    PT_JOULE
        #    PT_WATT
        #    PT_COULOMB
        #    PT_WEBER
        #    PT_VOLT2
        #    PT_VOLT2T
        #    PT_VOLTSQRT
        #    PT_AMP2
        #    PT_AMP2T
        #    PT_AMPSQRT
        #    PT_VOLTSPERSEC
        #    PT_CONSTANT
        #    PT_CELSIUS
        #    PT_DIGITAL
        #    PT_DEFAULT
        # Other may be added in the future
        ("physTypeName", c_char * 24),
        #  For future expansion
        ("unused", c_char * 24),
    ]


# ctypes wrapper for SRD_VectorInfoArray
class VectorInfoArray(Structure):
    """
    cypes wrapper for SRD_VectorInfoArray
    """

    _fields_ = [
        ("vectorInfo", POINTER(VectorInfo)),  # Array of SRD_VectorInfo objects. Owned by interface */
        ("numElems", c_int),  # Number of elements in vectorInfo */
    ]


# ctypes wrapper for SRD_Options
# Used to control @c getVectorData and @c getVectorInfo
class Options(Structure):
    """
    ctypes wrapper for SRD_Options
    """

    global OpMode, VectorDataOptions, BOOL

    _fields_ = [
        #   GetVectorInfo function can optionally return a single scalar value for the
        # requested vector or vectors. The single value is the first element of the vector
        # and is typically used for operating point values for transient analyses.
        # This defines that operation. See SRD_OpMode description
        ("opMode", OpMode),
        # What data to return from getVectorData function. See SRD_VectorDataOptions
        # for details
        ("dataOptions", VectorDataOptions),
        ("divisionIndex", c_int),  # getVectorData function. For multi-div vectors. >=0
        ("offset", c_int),  # getVectorData function. Element index of start value. >=0/
        # Set this when calling getVectorData if the data is to be used for incremental plotting
        # This is a 'hint' value. It doesn't change the data that is returned but instructs SIMetrix
        # to store the data internally in a manner that is more efficient for incremental plots */
        ("incremental", BOOL),
        ("unused", c_char * 31),  #  For future expansion
    ]


# ctypes wrapper for SRD_Complex (aaargh... why not standard complex???)
class Complex(Structure):
    """
    ctypes wrapper for SRD_Complex
    """

    _fields_ = [("real", c_double), ("imag", c_double)]


# ctypes wrapper for SRD_VectorData
# Used to return trace data from call to getVectorData
class VectorData(Structure):
    """
    ctypes wrapper for SRD_VectorData
    """

    global DataType, ErrorCode

    #
    # Union for pointers  to different possible result types
    #

    class d_union(Union):
        _fields_ = [
            ("realData", POINTER(c_double)),
            ("complexData", POINTER(Complex)),
            ("stringData", POINTER(c_char_p)),
        ]

    _fields_ = [
        #   Data arrays. Note that these can be very large. 100MBytes is not uncommon
        #   and blocks in excess of 1GByte are possible albeit rare. Large objects
        #   (currently > 64K) are pointers to shared blocks (returned by MapViewOfFile in
        #   Windows and shmat in Linux) and these are allocated and loaded by the
        #       SIMetrix process directly. Because of the potential size of these blocks,
        #   the calling application should avoid making deep copies if this is possible.
        ("d", d_union),
        #  Reference data - i.e. X-values. Only set if requested by dataOptions set to
        #   SRDV_X or SRDV_XY
        ("refData", POINTER(c_double)),
        # Number of elements in array
        ("numElems", c_int),
        #  Real, complex or string */
        ("dataType", DataType),
        # For future expansion
        ("unused", c_char * 32),
    ]


class Interface(Structure):
    """
    Structure holding function pointers for SRD interface functions

    Interface function pointers - we haul the actual values as void * and then
    use those to setup foreign functions via function prototypes.  The DLL itself
    only exports the srd_InitialiseInterface entry-point used to initialize as instance
    of this structure.  Presumably done this way to maximise portability ...
    """

    global ErrorCode

    # SRD_ErrorCode  (*openInterface)(int ident, void **handle) ;
    openInterfacePrototype = CFUNCTYPE(ErrorCode, c_int, POINTER(c_void_p))

    # SRD_ErrorCode  (*closeInterface)(void *handle) ;
    closeInterfacePrototype = CFUNCTYPE(ErrorCode, c_void_p)

    # SRD_ErrorCode  (*getGroupNames)(void *handle, SRD_Strings **strings)
    getGroupNamesPrototype = CFUNCTYPE(ErrorCode, c_void_p, POINTER(POINTER(Strings)))

    # SRD_ErrorCode  (*getVectorInfo)(void *handle, const char *groupName,
    #                                 const char *vecName, const SRD_Options *options,
    #                                 SRD_VectorInfoArray **vectorInfo) ;

    getVectorInfoPrototype = CFUNCTYPE(
        ErrorCode, c_void_p, c_char_p, c_char_p, POINTER(Options), POINTER(POINTER(VectorInfoArray))
    )

    getVectorDataPrototype = CFUNCTYPE(
        ErrorCode, c_void_p, c_char_p, c_char_p, POINTER(Options), POINTER(POINTER(VectorData))
    )

    destroyDataPrototype = CFUNCTYPE(ErrorCode, c_void_p, c_void_p)

    _fields_ = [
        #  openInterface
        #
        # This function must always be called first before any other action. It creates a
        # handle that is required for calling all other functions. You may have multiple
        # interfaces open at any time.
        #
        # Some functions need to allocate memory for the returned results. This memory is
        # associated with the handle value and will be destroyed when closeInterface is
        # called on that handle.
        # SRD_ErrorCode  (*openInterface)(int ident, void **handle) ;
        ("openInterface", c_void_p),
        # closeInterface
        #
        # Close the interface and releases any memory allocated by it.
        #
        # closeInterface must ultimately be called for each call to openInterface.
        # Failure to do so will result in a memory leak.
        # SRD_ErrorCode  (*closeInterface)(void *handle) ;
        ("closeInterface", c_void_p),
        # getGroupNames
        # Returns an array of strings providing a the data group names currently
        # available.
        # SRD_ErrorCode  (*getGroupNames)(void *handle, SRD_Strings **strings)
        ("getGroupNames", c_void_p),
        # getVectorInfo
        # Returns information about a vector or all the vectors in a group.
        # Usually this function would be called with vecName NULL in which case all vectors in
        # groupName will be returned. This is the only way of finding the vector names available.
        # 'options' may be used to specify the 'operating point' option. When enabled, a single
        # scalar value for the vector is returned in addition to the remaining information. This
        # is the first point of the data and in a transient run is usually the "operating point"
        # value commonly used to annotate schematics with bias point data.
        # SRD_ErrorCode  (*getVectorInfo)(void *handle, const char *groupName,
        #                                 const char *vecName, const SRD_Options *options,
        #                                 SRD_VectorInfoArray **vectorInfo) ;
        ("getVectorInfo", c_void_p),
        #  getVectorData
        # Returns the vector's data. See SRD_VectorData and SRD_Options for a full explanation.
        # SRD_ErrorCode  (*getVectorData)(void *handle, const char *groupName,
        #                                 const char *vecName, const SRD_Options *options,
        #                                 SRD_VectorData **data) ;
        ("getVectorData", c_void_p),
        #  destroyData
        # Destroys the data objects created by getVectorData (SRD_VectorData),
        # getVectorInfo (SRD_VectorInfoArray) or getGroupNames (SRD_Strings).
        # Pass one of SRD_VectorData, SRD_VectorInfoArray or SRD_Strings pointers to the
        # destroyData function. The function will determine the type of object passed then
        # delete it and any data associated with it.
        # Note that this only destroys data stored in the interface and does not
        # communicate with SIMetrix.
        # closeInterface will also destroy all data not explicitly destroyed by
        # destroyData.
        # SRD_ErrorCode  (*destroyData)(void *handle, void *data) ;
        ("destroyData", c_void_p),
        ("unused", c_char * 40),
    ]
