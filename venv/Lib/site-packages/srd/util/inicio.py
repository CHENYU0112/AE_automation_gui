from __future__ import annotations

import os
import tarfile
from pathlib import Path

import zstandard

PACMAN_PKG_ROOT = os.environ.get(
    "INICIO_PACMAN_PKG_ROOT",
    r"\\inicio.vih.infineon.com\inrepo\InicioReleases\Inicio2\pacman_repos\inicio\x86_64",
)
PACMAN_PKG_ROOT = PACMAN_PKG_ROOT.rstrip("\\")

PACMAN_PKG_ROOT_STAGING = os.environ.get(
    "INICIO_PACMAN_PKG_ROOT_STAGING",
    r"\\inicio.vih.infineon.com\inrepo\InicioReleases\Inicio2\pacman_repos\inicio_staging\x86_64",
)
PACMAN_PKG_ROOT_STAGING = PACMAN_PKG_ROOT_STAGING.rstrip("\\")


def _extract_pacman_pkg(source: Path, dest: Path | None = None, exist_ok: bool = True) -> Path:
    if dest is None:
        if source.root == "\\":
            msg = "Destination path must be provided for network paths"
            raise ValueError(msg)
        dest = source.with_suffix("").with_suffix("")
    if dest.exists():
        if exist_ok:
            return dest
        else:
            msg = f"Destination path {dest} already exists"
            raise FileExistsError(msg)
    dest.parent.mkdir(parents=True, exist_ok=True)

    with source.open("rb") as compressed_file:
        dctx = zstandard.ZstdDecompressor()
        with dctx.stream_reader(compressed_file) as reader, tarfile.open(fileobj=reader, mode="r|") as tar:
            tar.extractall(dest)
    return dest


def get_pacman_pkg_root(dest: Path) -> Path:
    """
    Get the root directory of the simetrix installation inside a Pacman package
    """
    try:
        return next(dest.glob("opt/*/*"))
    except StopIteration:
        msg = f"Could not find package root directory in {dest}"
        raise FileNotFoundError(msg)


def download_pacman_pkg(dest: Path, package_name: str, exist_ok: bool = True) -> Path:
    check_win_long_paths_enabled()
    prod_url = Path(rf"{PACMAN_PKG_ROOT}\{package_name}")
    staging_url = Path(rf"{PACMAN_PKG_ROOT_STAGING}\{package_name}")
    if prod_url.exists():
        url = prod_url
    elif staging_url.exists():
        url = staging_url
    else:
        msg = f"Package {package_name} not found in {PACMAN_PKG_ROOT} or {PACMAN_PKG_ROOT_STAGING}"
        raise FileNotFoundError(msg)
    local_pacman_pkg_root = _extract_pacman_pkg(url, dest, exist_ok)
    return get_pacman_pkg_root(local_pacman_pkg_root)


def check_win_long_paths_enabled():
    import winreg

    key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"SYSTEM\CurrentControlSet\Control\FileSystem")
    longpathsenabled = bool(winreg.QueryValueEx(key, "LongPathsEnabled")[0])

    if not longpathsenabled:
        msg = (
            "Your system still has the 260 character path length limit enabled! "
            "To prevent issues with long paths, please enable long paths in the registry. "
            "To enable this feature, execute following code in an elevated (admin permission) Powershell prompt"
            "and try again:\n\n"
            'New-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\FileSystem" '
            '-Name "LongPathsEnabled" -Value 1 -PropertyType DWORD -Force'
        )
        raise OSError(msg)


if __name__ == "__main__":
    check_win_long_paths_enabled()
