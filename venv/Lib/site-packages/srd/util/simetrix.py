from __future__ import annotations

import contextlib
import os
import subprocess as sp
from pathlib import Path

import srd
from srd.util.ifxspice import find_ifxspice_and_update_env
from srd.util.inicio import download_pacman_pkg, get_pacman_pkg_root

LATEST_SIMETRIX = os.environ.get("LATEST_SIMETRIX_PACMAN_PKG_NAME", "inicio_simetrix_9.1.0.15.0-3-1-x86_64.pkg.tar.zst")
SIMETRIX_VENV_TOOL_PATH = Path(srd.__file__).parent / "_pacman" / "simetrix"


def ensure_simetrix_tool_in_venv() -> Path:
    return download_pacman_pkg(SIMETRIX_VENV_TOOL_PATH, LATEST_SIMETRIX)


def find_simetrix_and_update_env() -> Path:
    # ENV var might be pre-set by the user or Inicio
    simetrix_install_path = os.environ.get("SIMETRIX_INSTALL_PATH")
    if simetrix_install_path is None or not Path(simetrix_install_path).exists():
        if not SIMETRIX_VENV_TOOL_PATH.exists():
            msg = (
                "Simetrix not found. Please set the SIMETRIX_INSTALL_PATH environment "
                "variable or download the tool using the cli command `srd install simetrix`."
            )
            raise OSError(msg)
        simetrix_install_path = str(get_pacman_pkg_root(SIMETRIX_VENV_TOOL_PATH))

    os.environ["SIMETRIX_INSTALL_PATH"] = simetrix_install_path

    path_additions = [
        Path(simetrix_install_path) / "bin",
        Path(simetrix_install_path) / "bin64",
    ]
    for item in path_additions:
        item = str(item)
        if item not in os.environ["PATH"]:
            os.environ["PATH"] += ";" + item

    return Path(simetrix_install_path)


def start_simetrix():
    with contextlib.suppress(OSError):
        find_ifxspice_and_update_env()
    find_simetrix_and_update_env()
    sp.Popen(["simetrix.exe"], start_new_session=True)


if __name__ == "__main__":
    ensure_simetrix_tool_in_venv()
    print(find_simetrix_and_update_env())
    start_simetrix()
