from __future__ import annotations

import logging
import sys
import textwrap


class WrappedFixedIndentingLog(logging.Formatter):
    def __init__(self, fmt=None, datefmt=None, style="%", width=70, indent=4):
        logging.Formatter.__init__(
            self,
            fmt=fmt,
            datefmt=datefmt,
            style=style,
        )
        self.wrapper = textwrap.TextWrapper(width=width, subsequent_indent=" " * indent, replace_whitespace=False)

    def format(self, record):
        lev = record.levelno
        if lev == logging.ERROR or "Traceback" in record.msg or "\n" in record.msg:
            return logging.Formatter.format(self, record)

        return self.wrapper.fill(logging.Formatter.format(self, record))


class Const:
    LIBRARY_LOGGER = "WaveWatson_Logger"
    PYVERIFY_TESTLOGGER = "PyVerify_TestLogger"
    FORMATTER_INFO = WrappedFixedIndentingLog(
        "%(levelname)-7s|%(asctime)s.%(msecs)03d|  %(message)s",
        "%H:%M:%S",
        indent=23,
        width=200,
    )


logger = logging.getLogger(Const.LIBRARY_LOGGER)


def enable_library_logger_stdout(loglevel: int = logging.WARNING):
    """
    Enables library logging to stdout and also adds its streamhandler to py.warnings which will capture deprecation
    warnings and such.

    :param loglevel: Determines the loglevel threshold.
    """
    warnlogger = logging.getLogger("py.warnings")
    logging.captureWarnings(True)
    sh = logging.StreamHandler(sys.stdout)
    sh.set_name("liblog_SH")
    sh.setLevel(loglevel)
    sh.setFormatter(Const.FORMATTER_INFO)
    logger.addHandler(sh)
    warnlogger.addHandler(sh)
