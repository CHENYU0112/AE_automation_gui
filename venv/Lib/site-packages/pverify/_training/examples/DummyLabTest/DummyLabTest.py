"""
This module-level docstring will be added as test documentation
"""

from __future__ import annotations

import sys
from pathlib import Path

sys.path.insert(0, str(Path(__file__).parents[4]))
from contrib import instrument_setup_default

from pverify import *


class DummyLabTest(PyVerifyLabTest):
    """
    This class docstring will be added as test documentation as well
    """

    @DoE.Init()
    def init(self):
        # self.Attributes.ExecutionMode = Enums.ExecutionMode.PostProcOnly
        # self.RunOptions.PostProcOnlyReloadPath = r"C:\temp\somedata.hdf5"

        self.StorageOptions.ConfigureDLH5Handler(True)

        self.load_instrument_setup(instrument_setup_default)

        self.Parameters.Add(
            "ch1_factor",
            "",
            "The factor the waveform of scope ch1 is multiplied with.",
            [10],
        )
        self.Parameters.Add(
            "ch2_factor",
            "",
            "The factor the waveform of scope ch2 is multiplied with.",
            [5],
        )

        self.Variations.Add_ListSweep("ch1_factor", [1.5, 2])
        self.Variations.Add_ListSweep("ch2_factor", [0.5, 0.75])

        self.Outputs.Add("ch1_wf", "V(s)", "Waveform of scope ch1")
        self.Outputs.Add("ch2_wf", "V(s)", "Waveform of scope ch2")
        self.Outputs.Add("ch1_wf_mult", "V(s)", "Waveform of scope ch1 multiplied by ch1_factor")
        self.Outputs.Add("ch2_wf_mult", "V(s)", "Waveform of scope ch2 multiplied by ch1_factor")

        self.Limits.Add("ch1_wf", LowLimit=0)

    @DoE.Startup()
    def startup(self):
        """Contains the code that is executed once before VariationLoop."""

        self.scope = self.RealInstruments.Scope.driver
        self.scope.ScopeSetup(
            TimePerRecord=1, RecordLength=10000
        )  # Has no effect because our scope is simulated and returns a random waveform!

        self.ch1 = self.scope.GetChannel(1)
        self.ch1.ProbeSetup(Coupling="DC", Bandwidth=20e6, Vrange=10, Offset=5)

        self.ch2 = self.scope.GetChannel(2)
        self.ch2.ProbeSetup("DC", 20e6, 10, 5)

    @DoE.Iteration()
    def iteration(self):
        """Contains the code that is executed during the variation loop.
        The method is called as many times as parameter combinations are available"""

        self.scope.Arm()

        self.rc.add("ch1_wf", self.ch1.GetProbeWaveform(Timeout=5))
        self.rc.add("ch2_wf", self.ch2.GetProbeWaveform(Timeout=5))

    @DoE.IterationPostprocessing()
    def data_analysis(self):
        """This method is always called after the VariationLoop function and in total as often as VariationLoop."""
        self.rc.add("ch1_wf_mult", self.rc["ch1_wf"] * self.Current_variation["ch1_factor"])
        self.rc.add("ch2_wf_mult", self.rc["ch2_wf"] * self.Current_variation["ch2_factor"])

    @DoE.Teardown()
    def teardown(self):
        """Contains the code that is executed once after VariationLoopPostprocessing."""
        print("I'm done!")

    @DoE.Error()
    def on_error(self):
        """Contains the code which shall be additionally executed if any error occures."""
        self.teardown()


if __name__ == "__main__":
    test = DummyLabTest()
    test.RunTest()
