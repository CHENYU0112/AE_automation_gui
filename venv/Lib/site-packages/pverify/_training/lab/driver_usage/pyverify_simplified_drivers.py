"""

This script shows the usage of simplified PyVerify drivers to communicate with instruments
Simplified driver have only very few high level methods, which fit most of the application scenarios

"""

from __future__ import annotations

from pverify.drivers.Scope.lcscope import IIviScope

#   1.  Import the Simplified Drivers from Pyverify
#       Import the instrument IVI-COM driver you want to use within the simplfied driver
from pverify.drivers.SimplifiedLabInstruments import SimpleScope

#   2.  Instantiate the driver and open the connection
inst = SimpleScope(IIviScope())
inst.Initialize(ResourceName="GPIB0::1::INSTR", Reset=True, IdQuery=True, OptionString="")


#   3.  Common configuration of the scope acquisition
inst.ScopeSetup(TimePerRecord=1.0, RecordLength=10000)
inst.Trigger_Edge(Level=5, Slope="rise", Position=50, Coupling="DC", ChannelIndex=1)


#   4.  Get subchannel objects
ch1 = inst.GetChannel(1)
ch2 = inst.GetChannel(2)


#   5.  Configure channels
ch1.ProbeSetup(
    Coupling="DC",
    Bandwidth=20e6,
    Vrange=20,
    Offset=0,
    Position=0,
    Probe_Attn=10,
    Probe_Type="voltage",
)
ch1.Enable(True)
ch2.ProbeSetup(
    Coupling="DC",
    Bandwidth=20e3,
    Vrange=10,
    Offset=5,
    Position=0,
    Probe_Attn=10,
    Probe_Type="current",
)
ch2.Enable(True)


#   6.  Arm the scope acquisition
inst.Arm(Continuous=False)


#   7.  Retrieve channel waveforms
wf1 = ch1.GetProbeWaveform(
    Timeout=5, ForceTriggerOnTimeout=True
)  # Will wait for 5s on trigger, if it does not trigger within 5s force the trigger
wf2 = ch2.GetProbeWaveform()
wf1.plot()


#   8.  Close connection
inst.Close()
