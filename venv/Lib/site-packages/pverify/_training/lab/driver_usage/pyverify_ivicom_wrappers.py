"""

This script shows the usage of IVI-COM drivers within PyVerify to communicate with instruments

"""

#   1.  Import the Python IVI-COM driver wrapper of an instrument
#       The module to import has always the same name as the IVI class (starting with IIvi...)
from __future__ import annotations

from pverify.drivers.Scope.lcscope import IIviScope

#   2.  Instantiate the driver and open the connection
inst = IIviScope()
inst.Initialize(ResourceName="GPIB0::1::INSTR", Reset=True, IdQuery=True, OptionString="")


#   3.  Just call driver functions
inst.Acquisition.ConfigureRecord(TimePerRecord=1, MinNumPts=10000, AcquisitionStartTime=0.5)
ch1_name = inst.Channels.Name(Index=1)
ch2_name = inst.Channels.Name(Index=2)
ch1 = inst.Channels.Item(ch1_name)
ch2 = inst.Channels.Item(ch2_name)


#   4.  Or set/get attributes
# Some attributes must be applied on a channel (RepCapIdentifier)
ch1.Configure(
    Range=20,
    Offset=0,
    Coupling=inst.Enums.IviScopeVerticalCouplingEnum.IviScopeVerticalCouplingDC,
    ProbeAttenuation=10,
    Enabled=True,
)
ch1.InputFrequencyMax = 20e6
print(ch1.InputImpedance)

# Others not
inst.Acquisition.TimePerRecord = 1.0
inst.Trigger.Level = 0
inst.Trigger.Source = ch1_name
inst.Trigger.Edge.Slope = inst.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopePositive


#   5.  Query for instrument errors
errcode, errmsg = inst.Utility.ErrorQuery()
print("Code: %d, Msg: %s" % (errcode, errmsg))


#   7.  Close connection
inst.Close()
