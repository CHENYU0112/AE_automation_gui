"""

This script shows the basic usage of PyVISA to communicate with instruments

"""

#   1. Import pyvisa and the resource classes (for code completion)
from __future__ import annotations

import pyvisa
from pyvisa import constants

#   2. Instantiate a VISA resource manager
rm = pyvisa.ResourceManager()


#   3. Open an instrument connection by using its resource descriptor (can be found in the NI MAX)
usb_inst = rm.open_resource(resource_name="USB::0x1234::125::A22-5::INSTR")
""":type : resources.USBInstrument"""  # Only for type hinting, because open_resource instantiates the
# corresponding class depending on the resource string, so you have
# to tell the code completion which instrument class it will be

gpib_inst = rm.open_resource(resource_name="GPIB0::1::INSTR")
""":type : resources.GPIBInstrument"""

serial_inst = rm.open_resource(resource_name="ASRL1::INSTR")
""":type : resources.SerialInstrument"""

tcpip_inst = rm.open_resource(resource_name="TCPIP0::1.2.3.4::999::SOCKET")
""":type : resources.TCPIPInstrument"""


#   4. Set common communication attributes
usb_inst.read_termination = (
    usb_inst.LF
)  # Most instruments use a linefeed (\n) as a termination character for read + write
usb_inst.write_termination = "\n"
usb_inst.timeout = 2000  # Set the communication timeout


#   5.  Set resource type specific attributes if needed
# Attenion: Which attributes can be used depends on the resource type:
#   Serial devices: constants.VI_ATTR_ASRL_*
#   USB    devices: constants.VI_ATTR_[USB|ASRL]_*
#   GPIB   devices: constants.VI_ATTR_GPIB_*
#   TCPIP  devices: constants.VI_ATTR_TCPIP_*
#   ...
usb_inst.set_visa_attribute(constants.VI_ATTR_ASRL_BAUD, 19200)


#   6.  Communicate with the instrument
usb_inst.write("*IDN?")
print(usb_inst.read())

print(usb_inst.query("*IDN?"))


#   7.  Close the resource
usb_inst.close()

"""
More tutorials at: https://pyvisa.readthedocs.io/en/latest/
"""
