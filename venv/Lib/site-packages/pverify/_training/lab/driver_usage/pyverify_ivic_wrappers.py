"""

This script shows the usage of IVI-C drivers within PyVerify to communicate with instruments

"""

#   1.  Import the Python IVI-C driver wrapper of an instrument
#       The module to import has always the same name as the containing package
from __future__ import annotations

from pverify.drivers.Scope.lcscope import (
    lcscope,
    lcscope_const,  # Contains constants
)

#   2.  Instantiate the driver and open the connection
inst = lcscope()
inst.Initialize(ResourceName="GPIB0::1::INSTR", Reset=True, IdQuery=True, OptionString="")


#   3.  Just call driver functions
inst.AutoSetup()
inst.ConfigureAcquisitionRecord(TimePerRecord=1, MinNumPts=10000, AcquisitionStartTime=0.5)
ch1 = inst.GetChannelName(Index=1, NameBufferSize=10)
ch2 = inst.GetChannelName(Index=2, NameBufferSize=10)


#   4.  Or set/get attributes
# Some attributes must be applied on a channel (RepCapIdentifier)
inst.SetAttributeViBoolean(
    RepCapIdentifier=ch1,
    AttributeID=lcscope_const.IVISCOPE_ATTR_CHANNEL_ENABLED,
    AttributeValue=True,
)
# Others not
inst.SetAttributeViInt32(
    RepCapIdentifier="",
    AttributeID=lcscope_const.IVISCOPE_ATTR_HORZ_MIN_NUM_PTS,
    AttributeValue=10000,
)
inst.SetAttributeViReal64(
    RepCapIdentifier="",
    AttributeID=lcscope_const.LCSCOPE_ATTR_HORZ_SAMPLE_RATE,
    AttributeValue=10000,
)
# To determine if an attribute is channel based or not refer to the IVI driver
# manual or they usually have "CHANNEL" in the attribute name

# IVI Driver manuals can be found here: C:\Program Files\IVI Foundation\IVI\Drivers


#   5.  Query for instrument errors
errcode, errmsg = inst.error_query()
print("Code: %d, Msg: %s" % (errcode, errmsg))


#   6.  Some drivers also support direct IO functions
inst.WriteString("*IDN?")
print(inst.ReadString(MaxTimeMilliseconds=2000, retValBufferSize=256))


#   7.  Close connection
inst.Close()
