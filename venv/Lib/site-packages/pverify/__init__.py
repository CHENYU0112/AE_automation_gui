from __future__ import annotations

import os
import sys
from time import sleep  # Import for backward-compatibility

from .version import __version__

if sys.executable.lower().endswith("pythonw.exe"):
    # Needed when executing any GUI entrypoints because writing to stdout/err in GUI apps leads to hard crashes, which
    # is easily triggered when pyverify test-cases use print statements. Also when GUI user code integrates PyVerify
    # this should fix these problems for them.
    try:
        sys.stdout = open(os.devnull, "w")  # noqa: SIM115
        sys.stderr = open(os.devnull, "w")  # noqa: SIM115
    except Exception:
        pass

import numpy as np  # Import for backward-compatibility

from .core import PyVerifyBaseTest, PyVerifyLabTest
from .core.env import IS_WIN
from .core.hooks import DoE, include_hooks
from .core.hooks.hook_decorator import HookDecorator
from .core.internals.Enums import Enums
from .core.internals.logging_util import get_test_logger
from .core.io.hdf5_handler import H5_TestResult, H5_VariationResult
from .core.io.hdfstore.pv_hdfstore import PV_HDFStore
from .core.util import telemetry as _telemetry
from .postproc.waveform import Waveform

TestBaseClass = PyVerifyLabTest  # Alias for backward-compatibility


def run_waveformviewer():
    from reviz.app import start_reviz

    start_reviz()


reviz = run_waveformviewer

_telemetry.track_feature(_telemetry.FEATURES.pyverify_import)
