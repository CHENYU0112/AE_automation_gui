from __future__ import annotations

from contrib import instrument_setup

from pverify import *


class CommonBaseClass(PyVerifyLabTest):
    def __init__(self):
        # Overwrite the constructor of PyVerifyBaseTest for the test to write its results to C:\Temp\PyVerify\<TestCaseName>
        PyVerifyBaseTest.__init__(self, result_dir="C:/temp/PyVerify/{testcasename}")

    def Initialization(self):
        self.RunOptions.SuppressGUI = False
        self.RunOptions.SkipPostProcessing = False

        self.Attributes.ValidExecutionModes = [
            Enums.ExecutionMode.Lab,  # Remove entries that do not apply
            Enums.ExecutionMode.Sim,
            Enums.ExecutionMode.Sim_Reload,
            Enums.ExecutionMode.PostProcOnly,
        ]

        self.Attributes.ExecutionMode = Enums.ExecutionMode.Lab

        self.load_instrument_setup(instrument_setup)

    def PostLoop(self):
        """
        If the child tests are not overwriting this method, this method here is called automatically
        """
        # Do some common error handling

    def OnError(self):
        """
        If the child tests are not overwriting this method, the base classes PostLoop will be called
        """
        self.PostLoop()
