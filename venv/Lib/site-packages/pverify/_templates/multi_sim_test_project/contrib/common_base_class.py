from __future__ import annotations

from os.path import abspath, dirname, join

from pverify import *
from pverify.core.sim import *

from .mappings import *


class CommonBaseClass(PyVerifySimTest):
    def __init__(self):
        # Overwrite the constructor of PyVerifyBaseTest for the test to write its results to C:\Temp\PyVerify\<TestCaseName>
        PyVerifyBaseTest.__init__(self, result_dir="C:/temp/PyVerify/{testcasename}")

    def Initialization(self):
        self.RunOptions.SuppressGUI = False
        self.RunOptions.SkipPostProcessing = False

        self.Attributes.ValidExecutionModes = [
            Enums.ExecutionMode.Lab,  # Remove entries that do not apply
            Enums.ExecutionMode.Sim,
            Enums.ExecutionMode.Sim_Reload,
            Enums.ExecutionMode.PostProcOnly,
        ]

        self.Attributes.ExecutionMode = Enums.ExecutionMode.Sim  # Change execution mode here

        # (Over-)write self attributes/settings of simulation
        self.SimOptions.SchematicDir = abspath(join(dirname(__file__), "../schematics"))
        self.SimOptions.WorkingDir = abspath(join(dirname(__file__), "../sim_workspace"))
        self.SimOptions.ReloadPath = self.SimOptions.WorkingDir
        self.SimOptions.Simulator = Enums.Simulator.Simetrix  # Change simulator here
        self.SimOptions.ProcessingMode = Enums.ProcessingMode.Local

    def PostLoop(self):
        """
        If the child tests are not overwriting this method, this method here is called automatically
        """
        # Do some common error handling

    def OnError(self):
        """
        If the child tests are not overwriting this method, the base classes PostLoop will be called
        """
        self.PostLoop()
