from __future__ import annotations

import pyvisa as visa
from pyvisa.resources.serial import MessageBasedResource

from pverify.core.lab.driver_identity import IdentityBasic


class DRIVERNAME:  # Replace by desired name
    __version__ = "1.0.0"

    class DRIVERNAMEError(Exception):
        pass  # Raise this exception if any error happens

    def __init__(self):
        self._rm: visa.ResourceManager | None = None
        self._inst: MessageBasedResource | None = None
        self._sim = False
        self.__Initialized = False
        self.__Identity = IdentityBasic(fct_idn=self.__idn, fct_drv_rev=self.__drv_rev, fct_fw_rev=self.__fw_rev)

    def __idn(self) -> str:
        """
        Returns an identification string of the instrument
        """

        if self.Initialized:
            if self._sim:
                return "Vendor,ProductName,Serialnumber,FWVersion"
            return self._inst.query("*IDN?")
        else:
            return ""

    def __drv_rev(self) -> str:
        """
        Returns the driver version
        """

        return self.__version__  # Return driver revision.
        # For self developed drivers this might be __version__

    def __fw_rev(self) -> str:
        """
        Returns the FW revision of the instrument
        """

        if self.Initialized:
            vendor, model, serial, fwrev = self.Identity.Identifier.split(",")
            return fwrev  # Return FW revision if instrument supports it.
            # For SCPI instruments this is probably returned with *IDN?
        else:
            return ""

    @property
    def Initialized(self) -> bool:
        """
        Shows if the instrument connection has been established
        """

        return self.__Initialized

    @property
    def Identity(self):
        """
        A pointer to the Identity interface
        """

        return self.__Identity

    def Initialize(self, ResourceName: str, IdQuery: int = 1, Reset: int = 1, OptionString: str = ""):
        """
        Opens the I/O session to the instrument. Driver methods and properties
        that access the instrument are only accessible after Initialize is
        called. Initialize optionally performs a Reset and queries the
        instrument to validate the instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies
            the address of the instrument, such as a VISA resource descriptor
            string.
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :param Reset: Specifies whether to reset the instrument.
        :param OptionString: Provides additional functionality for the initialization process.
        """

        pyvisa_backend = "@ivi"  # pyvisa default backend, supports: NI-VISA, Keysight VISA, R&S VISA, tekVISA etc.
        optionString_tokens = OptionString.replace(" ", "").lower().split(",")
        if "simulate=true" in optionString_tokens:
            self._sim = True
            pyvisa_backend = "@sim"
            ResourceName = "ASRL1::INSTR"

        self._rm = visa.ResourceManager(pyvisa_backend)
        self._inst: MessageBasedResource = self._rm.open_resource(  # type: ignore
            resource_name=ResourceName,
            resource_pyclass=MessageBasedResource,
        )

        # Example for setting options for serial communication
        # self._inst.set_visa_attribute(attr.AttrVI_ATTR_ASRL_BAUD.attribute_id, 921600)
        # self._inst.set_visa_attribute(attr.AttrVI_ATTR_ASRL_DATA_BITS.attribute_id, 8)
        # self._inst.set_visa_attribute(attr.AttrVI_ATTR_ASRL_STOP_BITS.attribute_id, const.VI_ASRL_STOP_ONE)
        # self._inst.set_visa_attribute(attr.AttrVI_ATTR_ASRL_PARITY.attribute_id, const.Parity.none)
        # self._inst.set_visa_attribute(attr.AttrVI_ATTR_ASRL_FLOW_CNTRL.attribute_id, const.VI_ASRL_FLOW_NONE)
        # self._inst.write_termination = "\r\n"
        # self._inst.read_termination = "\r\n"

        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and
        properties that access the instrument are not accessible after Close
        is called.
        """

        if self.Initialized:
            self._inst.close()
            self.__Initialized = False

    def check_error(self):
        """
        Checks if the communication or instrument has an error status.

        :raises DRIVERNAME.DRIVERNAMEError
        """

        # Many instruments provide an interface to check if an error in the communication happened or if the sent
        # configuration is invalid. This function might be called at the end of each function, to check if the
        # function worked ccrrectly

    def a_dummy_function(self, some_parameter: str):
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.DRIVERNAMEError(msg)

        # Do something here, e.g.
        # self._inst.write(":COMM:HEAD OFF")
        # ret = float(self._inst.query(':CHAN1:BWID?' % self._Channel))

        # Check if an error happened
        self.check_error()


if __name__ == "__main__":
    t = DRIVERNAME()
    t.Initialize("GPIB0::1::INSTR", 1, 1, "")
    print(t.Identity.Identifier)
    t.Close()
