from __future__ import annotations

import json
from functools import singledispatch

import numpy as np

from pverify.core.internals.sweep_manager import Sweep, SweepSet


class CustomJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        for type_, handler in encode.registry.items():
            if isinstance(obj, type_) and type_ is not object:
                return handler(obj)
        if hasattr(obj, "_to_serializeable"):
            return obj._to_serializeable()
        if hasattr(obj, "for_json"):
            return obj.for_json()
        return super().default(obj)


@singledispatch
def encode(obj, **kwargs):
    return json.dumps(obj, cls=CustomJSONEncoder, **kwargs)


@encode.register(np.str_)
@encode.register(np.bytes_)
@encode.register(np.bool_)
@encode.register(np.number)
def encode_numpy_scalars(obj):
    return obj.item()


@encode.register(np.ndarray)
def encode_numpy_arrays(obj):
    return obj.tolist()


@encode.register(Sweep)
@encode.register(SweepSet)
def encode_dict(obj):
    return obj.__dict__
