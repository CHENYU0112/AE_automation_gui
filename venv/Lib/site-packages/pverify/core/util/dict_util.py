from __future__ import annotations

from collections import OrderedDict
from collections.abc import Mapping, MutableMapping
from copy import deepcopy


class CaseInsensitiveDict(MutableMapping):
    """
    A case-insensitive ``dict``-like object.
    Implements all methods and operations of1
    ``collections.MutableMapping`` as well as dict's ``copy``. Also
    provides ``lower_items``.
    All keys are expected to be strings. The structure remembers the
    case of the last key to be set, and ``iter(instance)``,
    ``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``
    will contain case-sensitive keys. However, querying and contains
    testing is case insensitive:
        cid = CaseInsensitiveDict()
        cid['Accept'] = 'application/json'
        cid['aCCEPT'] == 'application/json'  # True
        list(cid) == ['Accept']  # True
    For example, ``headers['content-encoding']`` will return the
    value of a ``'Content-Encoding'`` response header, regardless
    of how the header name was originally stored.
    If the constructor, ``.update``, or equality comparison
    operations are given keys that have equal ``.lower()``s, the
    behavior is undefined.
    """

    def __init__(self, data=None, **kwargs):
        self._store = {}
        if data is None:
            data = {}
        self.update(data, **kwargs)

    def __setitem__(self, key, value):
        # Use the lowercased key for lookups, but store the actual
        # key alongside the value.
        self._store[key.lower()] = (key, value)

    def __getitem__(self, key):
        return self._store[key.lower()][1]

    def __delitem__(self, key):
        del self._store[key.lower()]

    def __iter__(self):
        return (casedkey for casedkey, mappedvalue in self._store.values())

    def __len__(self):
        return len(self._store)

    def lower_items(self):
        """Like iteritems(), but with all lowercase keys."""
        return ((lowerkey, keyval[1]) for (lowerkey, keyval) in self._store.items())

    def __eq__(self, other):
        if isinstance(other, Mapping):
            other = CaseInsensitiveDict(other)
        else:
            return NotImplemented
        # Compare insensitively
        return dict(self.lower_items()) == dict(other.lower_items())

    # Copy is required
    def copy(self):
        return CaseInsensitiveDict(self._store.values())

    def __repr__(self):
        return f"{self.__class__.__name__}({dict(self.items())!r})"


def pretty_print_dict(d, indent="", width=-1, spacing=" "):
    """
    Pretty-prints a dictionary

    :param d: Dictionary to pretty print
    :param indent: The indent of each line
    :param width: The number of dictionary items per line
    :param spacing: The spacing between items within each line
    """
    if isinstance(d, OrderedDict):
        cls = OrderedDict
    elif isinstance(d, dict):
        cls = dict
    else:
        raise TypeError
    if width < 1:
        width = len(d)

    new = cls((k, f'"{v}"') if isinstance(v, str) else (k, f"{v}") for k, v in d.items())
    tmp = _chunks([f"{k}: {v}" for k, v in new.items()], width)

    return indent + ("\n" + indent).join([("," + spacing).join(i) for i in tmp])


def _chunks(lis, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(lis), n):
        yield lis[i : i + n]


def _immutable(self, *args, **kwargs):
    r"""
    Function for not implemented method since the object is immutable
    """

    msg = f"'{self.__class__.__name__}' object is read-only"
    raise AttributeError(msg)


class frozendict(dict):
    r"""
    A simple immutable dictionary.

    The API is the same as `dict`, without methods that can change the
    immutability. In addition, it supports __hash__().
    """

    __slots__ = ("_hash",)

    @classmethod
    def fromkeys(cls, *args, **kwargs):
        r"""
        Identical to dict.fromkeys().
        """

        return cls(dict.fromkeys(*args, **kwargs))

    def __new__(cls, *args, **kwargs):
        r"""
        Almost identical to dict.__new__().
        """

        has_kwargs = bool(kwargs)
        continue_creation = True

        # check if there's only an argument and it's of the same class
        if len(args) == 1 and not has_kwargs:
            it = args[0]

            # no isinstance, to avoid subclassing problems
            if it.__class__ == frozendict and cls == frozendict:
                self = it
                continue_creation = False

        if continue_creation:
            self = dict.__new__(cls, *args, **kwargs)

            dict.__init__(self, *args, **kwargs)

            # empty singleton - start

            if self.__class__ == frozendict and not len(self):
                try:
                    self = cls.empty
                    continue_creation = False
                except AttributeError:
                    cls.empty = self

            # empty singleton - end

            if continue_creation:
                object.__setattr__(self, "_hash", None)

        return self

    def __init__(self, *args, **kwargs):
        pass

    def __hash__(self, *args, **kwargs):
        r"""
        Calculates the hash if all values are hashable, otherwise raises a
        TypeError.
        """

        if self._hash is not None:
            _hash = self._hash
        else:
            try:
                fs = frozenset(self.items())
            except TypeError:
                _hash = -1
            else:
                _hash = hash(fs)

            object.__setattr__(self, "_hash", _hash)

        if _hash == -1:
            msg = "Not all values are hashable."
            raise TypeError(msg)

        return _hash

    def __repr__(self, *args, **kwargs):
        r"""
        Identical to dict.__repr__().
        """

        body = super().__repr__(*args, **kwargs)

        return f"frozendict({body})"

    def copy(self):
        r"""
        Return the object itself, as it's an immutable.
        """

        return self

    def __copy__(self, *args, **kwargs):
        r"""
        See copy().
        """

        return self.copy()

    def __deepcopy__(self, *args, **kwargs):
        r"""
        As for tuples, if hashable, see copy(); otherwise, it returns a
        deepcopy.
        """

        try:
            hash(self)
        except TypeError:
            tmp = deepcopy(dict(self))

            return self.__class__(tmp)

        return self.__copy__(*args, **kwargs)

    def __reduce__(self, *args, **kwargs):
        r"""
        Support for `pickle`.
        """

        return (self.__class__, (dict(self),))

    def __setitem__(self, key, val, *args, **kwargs):
        msg = f"'{self.__class__.__name__}' object doesn't support item assignment"
        raise TypeError(msg)

    def __delitem__(self, key, *args, **kwargs):
        msg = f"'{self.__class__.__name__}' object doesn't support item deletion"
        raise TypeError(msg)


frozendict.clear = _immutable
frozendict.pop = _immutable
frozendict.popitem = _immutable
frozendict.setdefault = _immutable
frozendict.update = _immutable
frozendict.__delattr__ = _immutable
frozendict.__setattr__ = _immutable


if __name__ == "__main__":
    f = frozendict({"a": 1, "b": 2})
