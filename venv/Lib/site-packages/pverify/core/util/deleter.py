from __future__ import annotations

import errno
import os
import shutil
import stat
from os.path import *
from time import sleep

from .decorators import retry


@retry((OSError, PermissionError), tries=5, delay=0.1, backoff=1.5)
def delete(files):
    def rmtreeErrHandler(func, path, exc):
        excvalue = exc[1]
        if func in (os.rmdir, os.remove) and excvalue.errno == errno.EACCES:
            # change the file to be readable,writable,executable: 0777
            os.chmod(path, stat.S_IRWXU | stat.S_IRWXG | stat.S_IRWXO)
            # retry
        try:
            func(path)
        except Exception:
            for _i in range(5):
                sleep(0.2)
                try:
                    func(path)
                    break
                except Exception:
                    pass
        finally:
            if exists(path):
                msg = f"'{path}' could not be fully removed!"
                raise Exception(msg)

    if isinstance(files, (list, tuple, set)):
        pass
    else:
        files = [files]

    for f in files:
        if exists(f):
            if isfile(f):
                os.remove(f)
            elif isdir(f):
                shutil.rmtree(path=f, onerror=rmtreeErrHandler)
            elif f.endswith("."):
                os.system(rf"del \\?\{f}")
