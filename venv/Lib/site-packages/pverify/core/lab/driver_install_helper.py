from __future__ import annotations

import os
import subprocess as sp
from pathlib import Path

try:
    import fast_shutil as shutil
except Exception:
    import shutil


def _exec_installer(target):
    target = Path(target)
    paths_to_try = [
        os.environ.get("INICIO_DRIVER_REPO", r"\\inicio\inrepo\InicioReleases\sources\labdrivers"),
        r"\\inicio.vih.infineon.com\inrepo\InicioReleases\sources\labdrivers",
        r"\\inicio.blr.infineon.com\inrepo\InicioReleases\sources\labdrivers",
        r"\\inicio.els.infineon.com\inrepo\InicioReleases\sources\labdrivers",
    ]
    local_cache = Path("C:/temp/pyverify_downloads")
    local_cache.mkdir(parents=True, exist_ok=True)
    for basepath_ in paths_to_try:
        basepath = Path(basepath_)
        if basepath.exists():
            target = basepath / target
            dst = local_cache / target.name
            if not dst.exists():
                print(f"Caching {target} to {dst}...")
                shutil.copy(target, dst)
                print("Caching done!")
            else:
                print(f"Using cached installer {dst}!")

            print(f"Executing installer {dst}...")
            if dst.suffix == ".msi":
                status = sp.call(["msiexec", "/i", str(dst.resolve())], shell=True)
            elif dst.suffix == ".exe":
                status = sp.call(["call", str(dst.resolve())], shell=True)
            else:
                break
            print(f"Installer terminated with status code {status}!")
            break
    else:
        msg = f"Ran out of available paths! No path inside {paths_to_try} can be accessed!"
        raise LookupError(msg)


def execute_driver_installer(drvcls, filename32, filename64):
    driver_name = filename64
    _exec_installer(Path("drivers") / drvcls / driver_name)
