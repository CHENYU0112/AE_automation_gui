from __future__ import annotations

from abc import ABC, abstractmethod
from typing import Callable

from .ivi.headers.ivi import (
    IVI_ATTR_FIRMWARE_REVISION,
    IVI_ATTR_INSTRUMENT_MANUFACTURER,
    IVI_ATTR_INSTRUMENT_MODEL,
    IVI_ATTR_SPECIFIC_DRIVER_REVISION,
)

__all__ = [
    "IdentityABC",
    "IdentityBasic",
    "Identity_IviC",
    "Identity_SCPI",
    "Identity_SimpleInstr",
]


class IdentityABC(ABC):
    @property
    @abstractmethod
    def Identity(self):
        raise NotImplementedError


class IdentityBasic:
    def __init__(
        self,
        fct_idn: Callable[[], str],
        fct_drv_rev: Callable[[], str],
        fct_fw_rev: Callable[[], str],
    ):
        self._fct_idn = fct_idn
        self._fct_drv_rev = fct_drv_rev
        self._fct_fw_rev = fct_fw_rev

    @property
    def Identifier(self) -> str:
        return self._fct_idn()

    @property
    def Revision(self) -> str:
        return self._fct_drv_rev()

    @property
    def InstrumentFirmwareRevision(self) -> str:
        return self._fct_fw_rev()


class Identity_IviC(IdentityBasic):
    def __init__(
        self,
        parent,
        fct_idn: Callable[[], str] | None = None,
        fct_drv_rev: Callable[[], str] | None = None,
        fct_fw_rev: Callable[[], str] | None = None,
    ):
        _fct_idn = fct_idn if callable(fct_idn) else self._fct_idn
        _fct_drv_rev = fct_drv_rev if callable(fct_drv_rev) else self._fct_drv_rev
        _fct_fw_rev = fct_fw_rev if callable(fct_fw_rev) else self._fct_fw_rev

        self.__parent = parent

        if hasattr(self.__parent, "GetAttributeViString"):
            self.__GetAttributeViString = self.__parent.GetAttributeViString
        elif hasattr(self.__parent, "_dllwrap") and hasattr(self.__parent, "_vi"):

            def GetAttributeViString(channelName, attribute, bufSize):
                return self.__parent._dllwrap.GetAttributeViString(self.__parent._vi, channelName, attribute, bufSize)

            self.__GetAttributeViString = GetAttributeViString
        else:
            msg = "Cannot find a GetAttributeViString method!"
            raise Exception(msg)

        super().__init__(_fct_idn, _fct_drv_rev, _fct_fw_rev)

    def _fct_idn(self):
        manu = self.__GetAttributeViString(None, IVI_ATTR_INSTRUMENT_MANUFACTURER, 100)
        model = self.__GetAttributeViString(None, IVI_ATTR_INSTRUMENT_MODEL, 100)
        fw = self.__GetAttributeViString(None, IVI_ATTR_FIRMWARE_REVISION, 100)
        return f"{manu}, {model}, {fw}"

    def _fct_drv_rev(self):
        return self.__GetAttributeViString(None, IVI_ATTR_SPECIFIC_DRIVER_REVISION, 100)

    def _fct_fw_rev(self):
        return self.__GetAttributeViString(None, IVI_ATTR_FIRMWARE_REVISION, 100)


class Identity_SCPI(IdentityBasic):
    def __init__(
        self,
        parent,
        rsrc_attr_name,
        fct_idn: Callable[[], str] | None = None,
        fct_drv_rev: Callable[[], str] | None = None,
        fct_fw_rev: Callable[[], str] | None = None,
    ):
        _fct_idn = fct_idn if callable(fct_idn) else self._fct_idn
        _fct_drv_rev = fct_drv_rev if callable(fct_drv_rev) else self._fct_drv_rev
        _fct_fw_rev = fct_fw_rev if callable(fct_fw_rev) else self._fct_fw_rev

        self.__parent = parent
        self.__rsrc_attr_name = rsrc_attr_name

        super().__init__(_fct_idn, _fct_drv_rev, _fct_fw_rev)

    def _visaresource(self):
        """
        :rtype: pyvisa.resources.messagebased.MessageBasedResource
        """
        rsrc = getattr(self.__parent, self.__rsrc_attr_name, None)
        if rsrc is None:
            msg = (
                f"Expected attribute '{self.__rsrc_attr_name}' to be a PyVISA resource, but it is None. "
                f"Maybe the driver is not initialized yet!"
            )
            raise Exception(msg)
        if not (hasattr(rsrc, "write") and hasattr(rsrc, "query") and hasattr(rsrc, "read")):
            msg = (
                f"Attribute '{self.__rsrc_attr_name}' does not have the required methods (write, query, read)! "
                f"Is it really a PyVISA resouce?"
            )
            raise Exception(msg)
        return rsrc

    def _fct_idn(self):
        rsrc = self._visaresource()
        if rsrc is None:
            return ""
        return rsrc.query("*IDN?").strip()

    def _fct_drv_rev(self):
        if self._visaresource is None:
            return ""
        return "not available"

    def _fct_fw_rev(self):
        rsrc = self._visaresource()
        if rsrc is None:
            return ""
        try:
            manu, model, serial, rev = rsrc.query("*IDN?").strip().split(",")
            return rev.strip()
        except Exception:
            return rsrc.query("*IDN?").strip()


class Identity_SimpleInstr(IdentityBasic):
    def __init__(
        self,
        parent,
        fct_idn: Callable[[], str] | None = None,
        fct_drv_rev: Callable[[], str] | None = None,
        fct_fw_rev: Callable[[], str] | None = None,
    ):
        _fct_idn = fct_idn if callable(fct_idn) else self._fct_idn
        _fct_drv_rev = fct_drv_rev if callable(fct_drv_rev) else self._fct_drv_rev
        _fct_fw_rev = fct_fw_rev if callable(fct_fw_rev) else self._fct_fw_rev

        self.__parent = parent
        if not getattr(self.__parent, "_IsSimpleInstrument", False):
            msg = "Argument 'parent' is not a Simple Instrument"
            raise Exception(msg)

        super().__init__(_fct_idn, _fct_drv_rev, _fct_fw_rev)

    def _fct_idn(self):
        return self.__parent._lowlevel_driver.Identity.Identifier

    def _fct_drv_rev(self):
        return self.__parent._lowlevel_driver.Identity.Revision

    def _fct_fw_rev(self):
        return self.__parent._lowlevel_driver.Identity.InstrumentFirmwareRevision
