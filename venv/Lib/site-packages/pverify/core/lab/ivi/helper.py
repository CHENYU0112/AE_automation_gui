from __future__ import annotations

import ctypes
import os
import platform
import sys
from pathlib import Path

from .enums.error_codes import ERRORS_CODES, WARNING_CODES
from .enums.messages import ERROR_WARNING_MESSAGES

PY3 = sys.version_info > (3,)

__all__ = [
    "decode",
    "load_dll",
    "InstrumentError",
    "InstrumentWarning",
    "int2twoscomplement",
]


# winmode argument added, that per default does not search DLL directories added via PATH in Pythen versions >= 3.8
def WinDLL(name, **kwargs):
    kwargs["winmode"] = 0x8  # LOAD_WITH_ALTERED_SEARCH_PATH
    return ctypes.WinDLL(name, **kwargs)


class MissingIVICDependenciesError(Exception):
    def __init__(self):
        super().__init__(
            r"""
    The driver could not be loaded. This can be caused by missing dependencies not being installed on the system.

    Make sure NI-VISA and and IVI Compliance Package are installed and the PC was restarted after their installation.

    For further information visit: https://confluencewikiprod.intra.infineon.com/pages/viewpage.action?pageId=99031711
    """
        )


class MissingIVICOMDependenciesError(Exception):
    def __init__(self):
        super().__init__(
            r"""
    The driver could not be loaded.
    Either the IVI-COM driver was not installed or there are dependencies not being installed on the system.

    Make sure NI-VISA and and IVI Compliance Package are installed and the PC was restarted after their installation.
    For further information visit: https://confluencewikiprod.intra.infineon.com/pages/viewpage.action?pageId=99031711

    Also check if the IVI driver has been installed by executing the
    driver installer "install.py" in the drivers source code directory
    "pverify/drivers/<instrument class>/<driver name>/install.py".

    Depending on your installation method the root directory may be somewhere else:

        - Inicio 1.x: C:/Inicio/<version>/lib/python/pyverify/pverify
        - Inicio 2.x: C:/Inicio2/msys2/opt/inicio/inicio_pyverify_x.x.x.x/src/pverify
        - PIP: <venv_root>/Lib/site-packages/pverify

    Make sure NI-VISA and and IVI Compliance Package are installed and the PC was restarted after their installation.

    For further information visit: https://confluencewikiprod.intra.infineon.com/pages/viewpage.action?pageId=99031711
    """
        )


def decode(value) -> str:
    if hasattr(value, "value"):
        value = value.value

    if isinstance(value, str):
        return value
    if isinstance(value, bytes):
        try:
            return value.decode("utf-8", "strict")
        except UnicodeDecodeError:
            try:
                return value.decode("latin-1", "strict")
            except UnicodeDecodeError:
                return value.decode("utf-8", "replace")
    msg = f"Cannot decode {value} to string!"
    raise ValueError(msg)


def int2twoscomplement(value, as_string=True, bits=32):
    newval = (abs(value) ^ 2**bits - 1) + 1 & 2**bits - 1 if value < 0 else value
    if as_string:
        return f"0x{newval:X}"
    return newval


def load_dll(dllname32, dllname64=None, wrapperfile=None):
    if wrapperfile is not None:
        dlldir = os.path.dirname(wrapperfile)
        if dllname32 is not None:
            dllname32 = os.path.join(dlldir, dllname32)
        if dllname64 is not None:
            dllname64 = os.path.join(dlldir, dllname64)

    try:
        if "PROGRAMFILES(X86)" in os.environ:  # Windows 64-bit
            if platform.architecture()[0] == "64bit" and dllname64 is not None:
                return WinDLL(dllname64)
            if platform.architecture()[0] == "32bit" and dllname32 is not None:
                return WinDLL(dllname32)
            msg = "You must use a 32 resp. 64-bit DLL when using python 32 resp. 64-bit version!"
            raise Exception(msg)
        return WinDLL(dllname32)
    except FileNotFoundError as e:
        try:
            # fallback nonsensical for drivers that don't do dll lookup via PATH
            if wrapperfile:
                raise e
            try:
                absolute_dll_path = Path(os.environ["IVIROOTDIR64"]) / "Bin" / dllname64
                return WinDLL(str(absolute_dll_path))
            except Exception as e:
                msg = "Fallback to dll lookup via PATH failed as well. Something is seriously off."
                raise Exception(msg) from e
        except FileNotFoundError:
            if wrapperfile is not None:  # We have an IVI-C driver
                raise MissingIVICDependenciesError from None
            raise MissingIVICOMDependenciesError from None


class InstrumentError(Exception):
    def __init__(self, status, description=None):
        self.status = int(status)
        self.status_hex = str(int2twoscomplement(self.status))
        if description is None:
            description = "{} - {}".format(
                ERRORS_CODES.get(int(self.status_hex, 16), "<Unknwon error>"),
                ERROR_WARNING_MESSAGES.get(int(self.status_hex, 16), "<No description>"),
            )
        self.description = decode(description)
        msg = f"Instrument error {self.status}({self.status_hex}) occurred: {self.description}"
        super().__init__(msg)


class InstrumentWarning(Warning):
    def __init__(self, status, description="<No description>"):
        self.status = int(status)
        self.status_hex = str(int2twoscomplement(self.status))
        if description is None:
            description = "{} - {}".format(
                WARNING_CODES.get(int(self.status_hex, 16), "<Unknwon error>"),
                ERROR_WARNING_MESSAGES.get(int(self.status_hex, 16), "<No description>"),
            )
        self.description = decode(description)
        msg = f"Instrument warning {self.status}({self.status_hex}) occurred: {self.description}"
        super().__init__(msg)
