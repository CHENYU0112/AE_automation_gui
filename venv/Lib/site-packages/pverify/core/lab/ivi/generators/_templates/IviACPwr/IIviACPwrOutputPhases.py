from __future__ import annotations


class IIviACPwrOutputPhases:
    def __init__(self):
        from .IIviACPwrExternalSync import IIviACPwrExternalSync

        self.ExternalSync = IIviACPwrExternalSync()

    @property
    def NumPhases(self):
        raise NotImplementedError

    @property
    def NumFrequencyRanges(self):
        raise NotImplementedError

    @property
    def FrequencyRange(self):
        raise NotImplementedError

    @FrequencyRange.setter
    def FrequencyRange(self, value):
        """
        Configures the frequency range of the power source to support the specified
        maximum frequency.
        """
        raise NotImplementedError

    @property
    def Frequency(self):
        raise NotImplementedError

    @Frequency.setter
    def Frequency(self, value):
        """
        The frequency of all output phases.
        """
        raise NotImplementedError

    @property
    def Count(self):
        raise NotImplementedError

    @property
    def FrequencyRampBusy(self):
        raise NotImplementedError

    def QueryFrequencyRangeCapabilities(self, Range):
        """
        Returns the minimum and maximum frequency supported by the specified range.

        :param Range: The range to query. The Range parameter must be from 1 to the value of the
            Number of Frequency Ranges property.
        :type Range: int
        """
        raise NotImplementedError

    def InitiateMeasurement(self, Group):
        """
        This method initiates a measurement of all measurement types for all phases of
        the specified group(s).

        :param Group: The group(s) you want to measure. You can specify any combination of values
            defined by IviACPwrMeasurementGroupEnum by ORing the values together. This
            method effectively initiates simultaneous measurements of all requested groups
            on the same output cycle.
        :type Group: IviACPwrMeasurementGroupEnum
        """
        raise NotImplementedError

    def RampFrequency(self, StartFrequency, EndFrequency, Duration):
        """
        Starts a linear ramp of the output frequency from a starting to ending frequency
        value for a specified duration.

        :param StartFrequency: The frequency ramp starting value in Hz.
        :type StartFrequency: float
        :param EndFrequency: The frequency ramp ending value in Hz.
        :type EndFrequency: float
        :param Duration: The ramp duration in seconds.
        :type Duration: float
        """
        raise NotImplementedError

    def AbortFrequencyRamp(self):
        """
        Aborts a frequency ramp.
        """
        raise NotImplementedError

    def Item(self, Name):
        """
        An interface reference pointer to the IIviACPwrOutput interface which is
        selected by the output name.

        :param Name: The name of an output phase. It may be either a name returned by the Name
            property or a name mapped to a particular repeated capability in the session in
            the configuration store.
        :type Name: str

        :return: An interface reference pointer to the IIviACPwrOutput interface which is
            selected by the output name.
        :rtype: IIviACPwrOutputPhase
        """
        raise NotImplementedError

    def Name(self, Index):
        """
        The output name for a given index.

        :param Index: One based index into the collection of output phases.
        :type Index: int

        :return: The output name for a given index.
        :rtype: int
        """
        raise NotImplementedError
