from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper

from .{drivername} import *


class IIviCounter(IVICOMDriverWrapper):
    def __init__(self):
        super(IIviCounter, self).__init__()

        self.dllwrap = {drivername}()
        self.__Initialized = False

        from . import IIviCounterEnums
        self.Enums = IIviCounterEnums

        from .IIviDriverOperation import IIviDriverOperation
        self.DriverOperation = IIviDriverOperation(self)

        from .IIviDriverIdentity import IIviDriverIdentity
        self.Identity = IIviDriverIdentity(self)

        from .IIviDriverUtility import IIviDriverUtility
        self.Utility = IIviDriverUtility(self)

        from .IIviCounterChannels import IIviCounterChannels
        self.Channels = IIviCounterChannels(self)

        from .IIviCounterFrequency import IIviCounterFrequency
        self.Frequency = IIviCounterFrequency(self)

        from .IIviCounterPeriod import IIviCounterPeriod
        self.Period = IIviCounterPeriod(self)

        from .IIviCounterPulseWidth import IIviCounterPulseWidth
        self.PulseWidth = IIviCounterPulseWidth(self)

        from .IIviCounterDutyCycle import IIviCounterDutyCycle
        self.DutyCycle = IIviCounterDutyCycle(self)

        from .IIviCounterEdgeTime import IIviCounterEdgeTime
        self.EdgeTime = IIviCounterEdgeTime(self)

        from .IIviCounterFrequencyRatio import IIviCounterFrequencyRatio
        self.FrequencyRatio = IIviCounterFrequencyRatio(self)

        from .IIviCounterTimeInterval import IIviCounterTimeInterval
        self.TimeInterval = IIviCounterTimeInterval(self)

        from .IIviCounterPhase import IIviCounterPhase
        self.Phase = IIviCounterPhase(self)

        from .IIviCounterTotalizeContinuous import IIviCounterTotalizeContinuous
        self.TotalizeContinuous = IIviCounterTotalizeContinuous(self)

        from .IIviCounterTotalizeGated import IIviCounterTotalizeGated
        self.TotalizeGated = IIviCounterTotalizeGated(self)

        from .IIviCounterTotalizeTimed import IIviCounterTotalizeTimed
        self.TotalizeTimed = IIviCounterTotalizeTimed(self)

        from .IIviCounterArm import IIviCounterArm
        self.Arm = IIviCounterArm(self)

        from .IIviCounterMeasurement import IIviCounterMeasurement
        self.Measurement = IIviCounterMeasurement(self)

        from .IIviCounterVoltage import IIviCounterVoltage
        self.Voltage = IIviCounterVoltage(self)

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def drivername(self):
        return "{drivername}"

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameteris "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck,or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        :type OptionString: str
        """
        self.dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True
        self.IDN = "%s, %s, n.a., %s" % (self.Identity.Vendor, self.Identity.InstrumentModel, self.Identity.InstrumentFirmwareRevision)

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self.dllwrap.close()
        self.__Initialized = False
