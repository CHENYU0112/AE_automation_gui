from .{drivername} import *


class IIviFgenTrigger:
    def __init__(self, root):
        self.root = root
        """:type : pverify.drivers.{group}.{drivername}.I{iviclass}.I{iviclass}"""

    @property
    def InternalRate(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 310)

    @InternalRate.setter
    def InternalRate(self, value):
        """
        The rate at which the function generator's internal trigger source produces a
        trigger, in triggers per second.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 310, value)

    def SendSoftwareTrigger(self):
        """
        Sends a software trigger, which will cause the function generator to generate
        output.
        """
        self.root.dllwrap.SendSoftwareTrigger()

    def get_BurstCount(self, ChannelName):
        """
        Retrieves a channel's burst count.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The number of waveform cycles that the function generator produces after it
            receives a trigger.
        :rtype: int
        """
        return self.root.dllwrap.GetAttributeViInt32(ChannelName, IVI_CLASS_PUBLIC_ATTR_BASE + 350)

    def set_BurstCount(self, ChannelName, pVal):
        """
        Sets a channel's burst count.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The number of waveform cycles that the function generator produces after it
            receives a trigger.
        :type pVal: int
        """
        self.root.dllwrap.SetAttributeViInt32(ChannelName, IVI_CLASS_PUBLIC_ATTR_BASE + 350, pVal)

    def get_Source(self, ChannelName):
        """
        Retrieves a channel's trigger source.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The trigger source. After the function generator receives a trigger from this
            source, it produces a signal.
        :rtype: int
        """
        return self.root.dllwrap.GetAttributeViInt32(ChannelName, IVI_CLASS_PUBLIC_ATTR_BASE + 302)

    def set_Source(self, ChannelName, pVal):
        """
        Sets a channel's trigger source.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The trigger source. After the function generator receives a trigger from this
            source, it produces a signal.
        :type pVal: IviFgenTriggerSourceEnum
        """
        self.root.dllwrap.SetAttributeViInt32(ChannelName, IVI_CLASS_PUBLIC_ATTR_BASE + 302, pVal)
