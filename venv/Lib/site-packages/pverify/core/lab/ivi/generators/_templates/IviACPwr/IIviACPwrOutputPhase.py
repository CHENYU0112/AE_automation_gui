from __future__ import annotations

from . import IIviACPwrCurrentProtection, IIviACPwrDCGeneration, IIviACPwrImpedance, IIviACPwrVoltageProtection


class IIviACPwrOutputPhase:
    def __init__(self):
        self.Impedance = IIviACPwrImpedance.IIviACPwrImpedance()
        self.CurrentProtection = IIviACPwrCurrentProtection.IIviACPwrCurrentProtection()
        self.VoltageProtection = IIviACPwrVoltageProtection.IIviACPwrVoltageProtection()
        self.DCGeneration = IIviACPwrDCGeneration.IIviACPwrDCGeneration()

    @property
    def CurrentLimit(self):
        raise NotImplementedError

    @CurrentLimit.setter
    def CurrentLimit(self, value):
        """
        Specifies the output current limit value.
        """
        raise NotImplementedError

    @property
    def Enabled(self):
        raise NotImplementedError

    @Enabled.setter
    def Enabled(self, value):
        """
        Enables/disables the output contactor/relay on the power source output.
        """
        raise NotImplementedError

    @property
    def NumVoltageRanges(self):
        raise NotImplementedError

    @property
    def VoltageLevel(self):
        raise NotImplementedError

    @VoltageLevel.setter
    def VoltageLevel(self, value):
        """
        Specifies the output Line to Neutral AC voltage level of the power source when
        operating in constant voltage mode.
        """
        raise NotImplementedError

    @property
    def Waveform(self):
        raise NotImplementedError

    @Waveform.setter
    def Waveform(self, value):
        """
        Specifies the waveform name used to generate output voltage.
        """
        raise NotImplementedError

    @property
    def PhaseAngle(self):
        raise NotImplementedError

    @PhaseAngle.setter
    def PhaseAngle(self, value):
        """
        Specifies the Phase Angle of the output phase in relation to Phase A.
        """
        raise NotImplementedError

    @property
    def VoltageRange(self):
        raise NotImplementedError

    @VoltageRange.setter
    def VoltageRange(self, value):
        """
        Configures the AC voltage range of the power source to support the specified
        maximum RMS voltage.
        """
        raise NotImplementedError

    @property
    def VoltageRampBusy(self):
        raise NotImplementedError

    @property
    def CurrentRampBusy(self):
        raise NotImplementedError

    def QueryVoltageRangeCapabilities(self, Range, WaveformName):
        """
        Returns the minimum and maximum RMS voltage supported by the specified range and
        waveform.

        :param Range: The range to query. The Range parameter must be from 1 to the value of the
            Number of Voltage Ranges property.
        :type Range: int
        :param WaveformName: The name of the waveform to query the range.
        :type WaveformName: str
        """
        raise NotImplementedError

    def RampCurrent(self, StartCurrent, EndCurrent, Duration):
        """
        Starts a linear ramp of the output current from a starting to ending current
        value for a specified duration.

        :param StartCurrent: The current ramp starting value in Amps.
        :type StartCurrent: float
        :param EndCurrent: The current ramp ending value in Amps.
        :type EndCurrent: float
        :param Duration: The ramp duration in seconds.
        :type Duration: float
        """
        raise NotImplementedError

    def FetchMeasurementArray(self, MeasurementType):
        """
        Returns an array of measured values of a previous call to the Initiate
        Measurement method.

        :param MeasurementType: The type of measurement to fetch.
        :type MeasurementType: IviACPwrMeasurementTypeArrayEnum
        """
        raise NotImplementedError

    def RampVoltage(self, StartVoltage, EndVoltage, Duration):
        """
        Starts a linear ramp of the output voltage from a starting to ending voltage
        value for a specified duration.

        :param StartVoltage: The voltage ramp starting value in Volts RMS.
        :type StartVoltage: float
        :param EndVoltage: The voltage ramp ending value in Volts RMS.
        :type EndVoltage: float
        :param Duration: The ramp duration in seconds.
        :type Duration: float
        """
        raise NotImplementedError

    def AbortVoltageRamp(self):
        """
        Aborts a voltage ramp.
        """
        raise NotImplementedError

    def FetchMeasurement(self, MeasurementType):
        """
        Returns the value measured by a previous call to the Initiate Measurement
        method.

        :param MeasurementType: The type of measurement to fetch.
        :type MeasurementType: IviACPwrMeasurementTypeEnum
        """
        raise NotImplementedError

    def AbortCurrentRamp(self):
        """
        Aborts a current ramp.
        """
        raise NotImplementedError
