/******************************************************************************
 *
 * Copyright Keysight Technologies 2006-2016
 *
 *****************************************************************************/

#ifndef __AGNA_HEADER
#define __AGNA_HEADER

#include <ivivisatype.h>

#if defined(__cplusplus) || defined(__cplusplus__)
extern "C" {
#endif

/****************************************************************************
 *---------------------------- Attribute Defines ---------------------------*
 ****************************************************************************/
#ifndef IVI_ATTR_BASE
#define IVI_ATTR_BASE                 1000000
#endif

#ifndef IVI_INHERENT_ATTR_BASE
#define IVI_INHERENT_ATTR_BASE        (IVI_ATTR_BASE +  50000)   /* base for inherent capability attributes */
#endif

#ifndef IVI_CLASS_ATTR_BASE
#define IVI_CLASS_ATTR_BASE           (IVI_ATTR_BASE + 250000)   /* base for IVI-defined class attributes */
#endif

#ifndef IVI_LXISYNC_ATTR_BASE
#define IVI_LXISYNC_ATTR_BASE         (IVI_ATTR_BASE + 950000)   /* base for IviLxiSync attributes */
#endif

#ifndef IVI_SPECIFIC_ATTR_BASE
#define IVI_SPECIFIC_ATTR_BASE        (IVI_ATTR_BASE + 150000)   /* base for attributes of specific drivers */
#endif


/*===== IVI Inherent Instrument Attributes ==============================*/

/*- Driver Identification */

#define AGNA_ATTR_SPECIFIC_DRIVER_DESCRIPTION               (IVI_INHERENT_ATTR_BASE + 514L)  /* ViString, read-only */
#define AGNA_ATTR_SPECIFIC_DRIVER_PREFIX                    (IVI_INHERENT_ATTR_BASE + 302L)  /* ViString, read-only */
#define AGNA_ATTR_SPECIFIC_DRIVER_VENDOR                    (IVI_INHERENT_ATTR_BASE + 513L)  /* ViString, read-only */
#define AGNA_ATTR_SPECIFIC_DRIVER_REVISION                  (IVI_INHERENT_ATTR_BASE + 551L)  /* ViString, read-only */
#define AGNA_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION  (IVI_INHERENT_ATTR_BASE + 515L)  /* ViInt32, read-only */
#define AGNA_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION  (IVI_INHERENT_ATTR_BASE + 516L)  /* ViInt32, read-only */

/*- User Options */

#define AGNA_ATTR_RANGE_CHECK                               (IVI_INHERENT_ATTR_BASE + 2L)  /* ViBoolean, read-write */
#define AGNA_ATTR_QUERY_INSTRUMENT_STATUS                   (IVI_INHERENT_ATTR_BASE + 3L)  /* ViBoolean, read-write */
#define AGNA_ATTR_CACHE                                     (IVI_INHERENT_ATTR_BASE + 4L)  /* ViBoolean, read-write */
#define AGNA_ATTR_SIMULATE                                  (IVI_INHERENT_ATTR_BASE + 5L)  /* ViBoolean, read-write */
#define AGNA_ATTR_RECORD_COERCIONS                          (IVI_INHERENT_ATTR_BASE + 6L)  /* ViBoolean, read-write */
#define AGNA_ATTR_INTERCHANGE_CHECK                         (IVI_INHERENT_ATTR_BASE + 21L)  /* ViBoolean, read-write */

/*- Advanced Session Information */

#define AGNA_ATTR_LOGICAL_NAME                              (IVI_INHERENT_ATTR_BASE + 305L)  /* ViString, read-only */
#define AGNA_ATTR_IO_RESOURCE_DESCRIPTOR                    (IVI_INHERENT_ATTR_BASE + 304L)  /* ViString, read-only */
#define AGNA_ATTR_DRIVER_SETUP                              (IVI_INHERENT_ATTR_BASE + 7L)  /* ViString, read-only */

/*- Driver Capabilities */

#define AGNA_ATTR_GROUP_CAPABILITIES                        (IVI_INHERENT_ATTR_BASE + 401L)  /* ViString, read-only */
#define AGNA_ATTR_SUPPORTED_INSTRUMENT_MODELS               (IVI_INHERENT_ATTR_BASE + 327L)  /* ViString, read-only */

/*- Instrument Identification */

#define AGNA_ATTR_INSTRUMENT_FIRMWARE_REVISION              (IVI_INHERENT_ATTR_BASE + 510L)  /* ViString, read-only */
#define AGNA_ATTR_INSTRUMENT_MANUFACTURER                   (IVI_INHERENT_ATTR_BASE + 511L)  /* ViString, read-only */
#define AGNA_ATTR_INSTRUMENT_MODEL                          (IVI_INHERENT_ATTR_BASE + 512L)  /* ViString, read-only */


/*===== Instrument-Specific Attributes =====================================*/

/*- System */

#define AGNA_ATTR_SYSTEM_IO_TIMEOUT                         (IVI_SPECIFIC_ATTR_BASE + 106L)  /* ViInt32, read-write */

/*- Channel */

#define AGNA_ATTR_CHANNEL_AVERAGING                         (IVI_SPECIFIC_ATTR_BASE + 1L)  /* ViBoolean, read-write */
#define AGNA_ATTR_CHANNEL_AVERAGING_FACTOR                  (IVI_SPECIFIC_ATTR_BASE + 2L)  /* ViInt32, read-write */
#define AGNA_ATTR_CHANNEL_CORRECTION                        (IVI_SPECIFIC_ATTR_BASE + 3L)  /* ViBoolean, read-write */
#define AGNA_ATTR_CHANNEL_CW_FREQUENCY                      (IVI_SPECIFIC_ATTR_BASE + 4L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_IF_BANDWIDTH                      (IVI_SPECIFIC_ATTR_BASE + 5L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_NUMBER                            (IVI_SPECIFIC_ATTR_BASE + 6L)  /* ViInt32, read-only */
#define AGNA_ATTR_CHANNEL_POINTS                            (IVI_SPECIFIC_ATTR_BASE + 7L)  /* ViInt32, read-write */
#define AGNA_ATTR_CHANNEL_PORT_EXTENSION_STATUS             (IVI_SPECIFIC_ATTR_BASE + 8L)  /* ViBoolean, read-write */
#define AGNA_ATTR_CHANNEL_SWEEP_MODE                        (IVI_SPECIFIC_ATTR_BASE + 9L)  /* ViInt32, read-write */
#define AGNA_ATTR_CHANNEL_SWEEP_TIME                        (IVI_SPECIFIC_ATTR_BASE + 10L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_SWEEP_TIME_AUTO                   (IVI_SPECIFIC_ATTR_BASE + 11L)  /* ViBoolean, read-write */
#define AGNA_ATTR_CHANNEL_SWEEP_TYPE                        (IVI_SPECIFIC_ATTR_BASE + 12L)  /* ViInt32, read-write */
#define AGNA_ATTR_CHANNEL_TRIGGER_MODE                      (IVI_SPECIFIC_ATTR_BASE + 13L)  /* ViInt32, read-write */
#define AGNA_ATTR_CHANNEL_COUNT                             (IVI_SPECIFIC_ATTR_BASE + 103L)  /* ViInt32, read-only */

/*- Measurement */

#define AGNA_ATTR_CHANNEL_MEASUREMENT_FORMAT                (IVI_SPECIFIC_ATTR_BASE + 14L)  /* ViInt32, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_SMOOTHING             (IVI_SPECIFIC_ATTR_BASE + 15L)  /* ViBoolean, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_SMOOTHING_APERTURE    (IVI_SPECIFIC_ATTR_BASE + 16L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_TRACE_MATH            (IVI_SPECIFIC_ATTR_BASE + 17L)  /* ViInt32, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_COUNT                 (IVI_SPECIFIC_ATTR_BASE + 105L)  /* ViInt32, read-only */

/*- Limit */

#define AGNA_ATTR_CHANNEL_MEASUREMENT_LIMIT_ENABLE          (IVI_SPECIFIC_ATTR_BASE + 18L)  /* ViBoolean, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_LIMIT_IS_PASSING      (IVI_SPECIFIC_ATTR_BASE + 19L)  /* ViBoolean, read-only */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_LIMIT_NUMBER          (IVI_SPECIFIC_ATTR_BASE + 20L)  /* ViInt32, read-write */

/*- Marker */

#define AGNA_ATTR_CHANNEL_MEASUREMENT_MARKER_BANDWIDTH_THRESHOLD  (IVI_SPECIFIC_ATTR_BASE + 21L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_MARKER_ENABLED              (IVI_SPECIFIC_ATTR_BASE + 22L)  /* ViBoolean, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_MARKER_MARKER_TRACK_ENABLED (IVI_SPECIFIC_ATTR_BASE + 23L)  /* ViBoolean, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_MARKER_PEAK_EXCURSION       (IVI_SPECIFIC_ATTR_BASE + 24L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_MARKER_STIMULUS             (IVI_SPECIFIC_ATTR_BASE + 25L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_MARKER_TARGET_VALUE         (IVI_SPECIFIC_ATTR_BASE + 26L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_MARKER_COUNT                (IVI_SPECIFIC_ATTR_BASE + 104L)  /* ViInt32, read-only */

/*- Trace */

#define AGNA_ATTR_CHANNEL_MEASUREMENT_TRACE_REFERENCE_POSITION (IVI_SPECIFIC_ATTR_BASE + 27L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_TRACE_REFERENCE_VALUE    (IVI_SPECIFIC_ATTR_BASE + 28L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_MEASUREMENT_TRACE_Y_SCALE            (IVI_SPECIFIC_ATTR_BASE + 29L)  /* ViReal64, read-write */

/*- Segment */

#define AGNA_ATTR_CHANNEL_SEGMENT_NUMBER                    (IVI_SPECIFIC_ATTR_BASE + 30L)  /* ViInt32, read-write */

/*- SourcePower */

#define AGNA_ATTR_CHANNEL_SOURCEPOWER_COUPLING              (IVI_SPECIFIC_ATTR_BASE + 31L)  /* ViBoolean, read-write */

/*- StimulusRange */

#define AGNA_ATTR_CHANNEL_STIMULUSRANGE_CENTER              (IVI_SPECIFIC_ATTR_BASE + 32L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_STIMULUSRANGE_SPAN                (IVI_SPECIFIC_ATTR_BASE + 33L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_STIMULUSRANGE_START               (IVI_SPECIFIC_ATTR_BASE + 34L)  /* ViReal64, read-write */
#define AGNA_ATTR_CHANNEL_STIMULUSRANGE_STOP                (IVI_SPECIFIC_ATTR_BASE + 35L)  /* ViReal64, read-write */

/*- Display */

#define AGNA_ATTR_DISPLAY_ENABLED                           (IVI_SPECIFIC_ATTR_BASE + 36L)  /* ViBoolean, read-write */

/*- Status */

#define AGNA_ATTR_STATUS_SERIAL_POLL                        (IVI_SPECIFIC_ATTR_BASE + 37L)  /* ViInt32, read-only */

/*- System */

#define AGNA_ATTR_SYSTEM_SERIAL_NUMBER                      (IVI_SPECIFIC_ATTR_BASE + 39L)  /* ViString, read-only */
#define AGNA_ATTR_SYSTEM_TIME_OUT_MILLISECONDS              (IVI_SPECIFIC_ATTR_BASE + 40L)  /* ViInt32, read-write */
#define AGNA_ATTR_SYSTEM_TRACE_ENABLED                      (IVI_SPECIFIC_ATTR_BASE + 41L)  /* ViBoolean, read-write */

/*- Trigger */

#define AGNA_ATTR_TRIGGER_SOURCE                            (IVI_SPECIFIC_ATTR_BASE + 42L)  /* ViInt32, read-write */


/****************************************************************************
 *------------------------ Attribute Value Defines -------------------------*
 ****************************************************************************/

/*- Defined values for
	attribute AGNA_ATTR_CHANNEL_MEASUREMENT_FORMAT */

#define AGNA_VAL_AGILENT_NA_MEASUREMENT_LOG_MAG             0
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_LIN_MAG             1
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_PHASE               2
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_GROUP_DELAY         3
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_SWR                 4
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_REAL                5
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_IMAG                6
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_POLAR               7
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_SMITH               8
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_S_LINEAR            9
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_S_LOGARITHMIC       10
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_S_COMPLEX           11
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_S_ADMITTANCE        12
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_P_LINEAR            13
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_P_LOGARITHMIC       14
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_U_PHASE             15
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_P_PHASE             16

/*- Defined values for
	parameter LimitTypeVal in function AgNA_ChannelMeasurementLimitAdd */

#define AGNA_VAL_AGILENT_NA_LIMIT_TYPE_OFF                  0
#define AGNA_VAL_AGILENT_NA_LIMIT_TYPE_MAXIMUM              1
#define AGNA_VAL_AGILENT_NA_LIMIT_TYPE_MINIMUM              2

/*- Defined values for
	parameter Val in function AgNA_ChannelMeasurementMarkerSearch */

#define AGNA_VAL_AGILENT_NA_MARKER_SEARCH_TYPE_TARGET       0
#define AGNA_VAL_AGILENT_NA_MARKER_SEARCH_TYPE_TARGET_LEFT  1
#define AGNA_VAL_AGILENT_NA_MARKER_SEARCH_TYPE_TARGET_RIGHT 2
#define AGNA_VAL_AGILENT_NA_MARKER_SEARCH_TYPE_MAX          3
#define AGNA_VAL_AGILENT_NA_MARKER_SEARCH_TYPE_MIN          4
#define AGNA_VAL_AGILENT_NA_MARKER_SEARCH_TYPE_PEAK         5
#define AGNA_VAL_AGILENT_NA_MARKER_SEARCH_TYPE_PEAK_LEFT    6
#define AGNA_VAL_AGILENT_NA_MARKER_SEARCH_TYPE_PEAK_RIGHT   7

/*- Defined values for
	parameter Val in function AgNA_ChannelMeasurementMarkerSetValueFromMarker */

#define AGNA_VAL_AGILENT_NA_MARKER_VALUE_START              0
#define AGNA_VAL_AGILENT_NA_MARKER_VALUE_STOP               1
#define AGNA_VAL_AGILENT_NA_MARKER_VALUE_CENTER             2
#define AGNA_VAL_AGILENT_NA_MARKER_VALUE_CW                 3
#define AGNA_VAL_AGILENT_NA_MARKER_VALUE_REFERENCE_LEVEL    4
#define AGNA_VAL_AGILENT_NA_MARKER_VALUE_ELECTRICAL_DELAY   5

/*- Defined values for
	parameter Type in function AgNA_ChannelMeasurementQueryStatistics */

#define AGNA_VAL_AGILENT_NA_MEASUREMENT_STATISTIC_TYPE_MEAN               0
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_STATISTIC_TYPE_STANDARD_DEVIATION 1
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_STATISTIC_TYPE_PEAK_TO_PEAK       2

/*- Defined values for
	attribute AGNA_ATTR_CHANNEL_MEASUREMENT_TRACE_MATH */

#define AGNA_VAL_AGILENT_NA_MEASUREMENT_TRACE_MATH_NONE       0
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_TRACE_MATH_DIVIDED    1
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_TRACE_MATH_MULTIPLIED 2
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_TRACE_MATH_SUBTRACTED 3
#define AGNA_VAL_AGILENT_NA_MEASUREMENT_TRACE_MATH_ADDED      4

/*- Defined values for
	attribute AGNA_ATTR_CHANNEL_SWEEP_MODE */

#define AGNA_VAL_AGILENT_NA_SWEEP_MODE_SWEPT                0
#define AGNA_VAL_AGILENT_NA_SWEEP_MODE_STEPPED              1
#define AGNA_VAL_AGILENT_NA_SWEEP_MODE_FAST_STEPPED         2
#define AGNA_VAL_AGILENT_NA_SWEEP_MODE_FAST_SWEPT           3

/*- Defined values for
	attribute AGNA_ATTR_CHANNEL_SWEEP_TYPE */

#define AGNA_VAL_AGILENT_NA_SWEEP_TYPE_LIN_FREQUENCY        0
#define AGNA_VAL_AGILENT_NA_SWEEP_TYPE_LOG_FREQUENCY        1
#define AGNA_VAL_AGILENT_NA_SWEEP_TYPE_SEGMENT              2
#define AGNA_VAL_AGILENT_NA_SWEEP_TYPE_POWER                3
#define AGNA_VAL_AGILENT_NA_SWEEP_TYPE_CW_TIME              4

/*- Defined values for
	attribute AGNA_ATTR_CHANNEL_TRIGGER_MODE */

#define AGNA_VAL_TRIGGER_MODE_HOLD                          1
#define AGNA_VAL_TRIGGER_MODE_CONTINUOUS                    0

/*- Defined values for
	parameter Val in function AgNA_StatusConfigureServiceRequest */

#define AGNA_VAL_AGILENT_NASRQ_REASON_STB_ERRO_QUE          1
#define AGNA_VAL_AGILENT_NASRQ_REASON_ESR_OPC               2
#define AGNA_VAL_AGILENT_NASRQ_REASON_ESR_EXECUTION_ERROR   4
#define AGNA_VAL_AGILENT_NASRQ_REASON_ESR_COMMAND_ERROR     8
#define AGNA_VAL_AGILENT_NASRQ_REASON_QUES_LIMIT_FAIL       16

/*- Defined values for
	parameter Register in function AgNA_StatusGetRegister
	parameter Register in function AgNA_StatusSetRegister */

#define AGNA_VAL_AGILENT_NA_STATUS_REGISTER_STATUS_BYTE     0
#define AGNA_VAL_AGILENT_NA_STATUS_REGISTER_STANDARD_EVENT  1
#define AGNA_VAL_AGILENT_NA_STATUS_REGISTER_OPERATION       2
#define AGNA_VAL_AGILENT_NA_STATUS_REGISTER_QUESTIONABLE    3
#define AGNA_VAL_AGILENT_NA_STATUS_REGISTER_QUES_LIMIT      4

/*- Defined values for
	parameter SubRegister in function AgNA_StatusGetRegister
	parameter SubRegister in function AgNA_StatusSetRegister */

#define AGNA_VAL_AGILENT_NA_STATUS_SUB_REGISTER_CONDITION           0
#define AGNA_VAL_AGILENT_NA_STATUS_SUB_REGISTER_NEGATIVE_TRANSITION 1
#define AGNA_VAL_AGILENT_NA_STATUS_SUB_REGISTER_POSITIVE_TRANSITION 2
#define AGNA_VAL_AGILENT_NA_STATUS_SUB_REGISTER_EVENT               3
#define AGNA_VAL_AGILENT_NA_STATUS_SUB_REGISTER_ENABLE              4

/*- Defined values for
	attribute AGNA_ATTR_TRIGGER_SOURCE */

#define AGNA_VAL_AGILENT_NA_TRIGGER_SOURCE_INTERNAL         0
#define AGNA_VAL_AGILENT_NA_TRIGGER_SOURCE_EXTERNAL         1
#define AGNA_VAL_AGILENT_NA_TRIGGER_SOURCE_BUS              2
#define AGNA_VAL_AGILENT_NA_TRIGGER_SOURCE_MANUAL           3


/****************************************************************************
 *---------------- Instrument Driver Function Declarations -----------------*
 ****************************************************************************/

/*- AgilentNA */

ViStatus _VI_FUNC AgNA_init(ViRsrc ResourceName, ViBoolean IdQuery, ViBoolean Reset, ViSession* Vi);
ViStatus _VI_FUNC AgNA_close(ViSession Vi);
ViStatus _VI_FUNC AgNA_InitWithOptions(ViRsrc ResourceName, ViBoolean IdQuery, ViBoolean Reset, ViConstString OptionsString, ViSession* Vi);

/*- Utility */

ViStatus _VI_FUNC AgNA_revision_query(ViSession Vi, ViChar DriverRev[], ViChar InstrRev[]);
ViStatus _VI_FUNC AgNA_error_message(ViSession Vi, ViStatus ErrorCode, ViChar ErrorMessage[]);
ViStatus _VI_FUNC AgNA_GetError(ViSession Vi, ViStatus* ErrorCode, ViInt32 ErrorDescriptionBufferSize, ViChar ErrorDescription[]);
ViStatus _VI_FUNC AgNA_ClearError(ViSession Vi);
ViStatus _VI_FUNC AgNA_GetNextCoercionRecord(ViSession Vi, ViInt32 CoercionRecordBufferSize, ViChar CoercionRecord[]);
ViStatus _VI_FUNC AgNA_InvalidateAllAttributes(ViSession Vi);
ViStatus _VI_FUNC AgNA_Disable(ViSession Vi);
ViStatus _VI_FUNC AgNA_error_query(ViSession Vi, ViInt32* ErrorCode, ViChar ErrorMessage[]);
ViStatus _VI_FUNC AgNA_LockSession(ViSession Vi, ViBoolean* CallerHasLock);
ViStatus _VI_FUNC AgNA_reset(ViSession Vi);
ViStatus _VI_FUNC AgNA_ResetWithDefaults(ViSession Vi);
ViStatus _VI_FUNC AgNA_self_test(ViSession Vi, ViInt16* TestResult, ViChar TestMessage[]);
ViStatus _VI_FUNC AgNA_UnlockSession(ViSession Vi, ViBoolean* CallerHasLock);

/*- Attribute Accessors */

ViStatus _VI_FUNC AgNA_GetAttributeViInt32(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt32* AttributeValue);
ViStatus _VI_FUNC AgNA_GetAttributeViReal64(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViReal64* AttributeValue);
ViStatus _VI_FUNC AgNA_GetAttributeViBoolean(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViBoolean* AttributeValue);
ViStatus _VI_FUNC AgNA_GetAttributeViSession(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViSession* AttributeValue);
ViStatus _VI_FUNC AgNA_GetAttributeViString(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt32 AttributeValueBufferSize, ViChar AttributeValue[]);
ViStatus _VI_FUNC AgNA_SetAttributeViInt32(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt32 AttributeValue);
ViStatus _VI_FUNC AgNA_SetAttributeViReal64(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViReal64 AttributeValue);
ViStatus _VI_FUNC AgNA_SetAttributeViBoolean(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViBoolean AttributeValue);
ViStatus _VI_FUNC AgNA_SetAttributeViSession(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViSession AttributeValue);
ViStatus _VI_FUNC AgNA_SetAttributeViString(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViConstString AttributeValue);

/*- Channels */

ViStatus _VI_FUNC AgNA_ChannelsAbort(ViSession Vi);

/*- System */

ViStatus _VI_FUNC AgNA_SystemReadString(ViSession Vi, ViInt32 ValBufferSize, ViChar Val[]);
ViStatus _VI_FUNC AgNA_viWrite(ViSession Vi, ViInt64 Count, ViByte Buffer[], ViInt64* ReturnCount);
ViStatus _VI_FUNC AgNA_SystemWriteString(ViSession Vi, ViConstString Data);
ViStatus _VI_FUNC AgNA_viRead(ViSession Vi, ViInt64 BufferSize, ViByte Buffer[], ViInt64* ReturnCount);

/*- Channel */

ViStatus _VI_FUNC AgNA_ChannelTriggerSweep(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 TimeoutVal);
ViStatus _VI_FUNC AgNA_ChannelSetCorrectionArrays(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 ValBufferSize, ViByte Val[], ViInt32* ValActualSize);
ViStatus _VI_FUNC AgNA_ChannelGetCorrectionArrays(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 RetValBufferSize, ViByte RetVal[], ViInt32* RetValActualSize);
ViStatus _VI_FUNC AgNA_ChannelClearAverage(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgNA_ChannelAsynchronousTriggerSweep(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgNA_ChannelGetPortExtension(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 PortNumVal, ViReal64* RetVal);
ViStatus _VI_FUNC AgNA_ChannelSetPortExtension(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 PortNumVal, ViReal64 Val);
ViStatus _VI_FUNC AgNA_GetChannelName(ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- Measurement */

ViStatus _VI_FUNC AgNA_ChannelMeasurementSetSParameter(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 NewReceiverPortVal, ViInt32 NewSourcePortVal);
ViStatus _VI_FUNC AgNA_ChannelMeasurementQueryStatistics(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 Type, ViReal64* RetVal);
ViStatus _VI_FUNC AgNA_ChannelMeasurementGetSParameter(ViSession Vi, ViConstString RepCapIdentifier, ViInt32* pReceiverPortVal, ViInt32* pSourcePortVal);
ViStatus _VI_FUNC AgNA_ChannelMeasurementFetchX(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 RetValBufferSize, ViReal64 RetVal[], ViInt32* RetValActualSize);
ViStatus _VI_FUNC AgNA_ChannelMeasurementFetchMemoryFormatted(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 RetValBufferSize, ViReal64 RetVal[], ViInt32* RetValActualSize);
ViStatus _VI_FUNC AgNA_ChannelMeasurementFetchMemoryComplex(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 pRealResponseValBufferSize, ViReal64 pRealResponseVal[], ViInt32* pRealResponseValActualSize, ViInt32 pImagResponseValBufferSize, ViReal64 pImagResponseVal[], ViInt32* pImagResponseValActualSize);
ViStatus _VI_FUNC AgNA_ChannelMeasurementFetchFormatted(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 RetValBufferSize, ViReal64 RetVal[], ViInt32* RetValActualSize);
ViStatus _VI_FUNC AgNA_ChannelMeasurementFetchComplex(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 pRealResponseValBufferSize, ViReal64 pRealResponseVal[], ViInt32* pRealResponseValActualSize, ViInt32 pImagResponseValBufferSize, ViReal64 pImagResponseVal[], ViInt32* pImagResponseValActualSize);
ViStatus _VI_FUNC AgNA_ChannelMeasurementDelete(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgNA_ChannelMeasurementDataToMemory(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgNA_ChannelMeasurementCreate(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 ReceiverPortVal, ViInt32 SourcePortVal);
ViStatus _VI_FUNC AgNA_GetChannelMeasurementName(ViSession Vi, ViConstString Channel, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- Limit */

ViStatus _VI_FUNC AgNA_ChannelMeasurementLimitDeleteAll(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgNA_ChannelMeasurementLimitDelete(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgNA_ChannelMeasurementLimitAdd(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 LimitTypeVal, ViReal64 BeginXVal, ViReal64 EndXVal, ViReal64 BeginYVal, ViReal64 EndYVal);

/*- Marker */

ViStatus _VI_FUNC AgNA_ChannelMeasurementMarkerSetValueFromMarker(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 Val);
ViStatus _VI_FUNC AgNA_ChannelMeasurementMarkerSearch(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 Val);
ViStatus _VI_FUNC AgNA_ChannelMeasurementMarkerQueryValue(ViSession Vi, ViConstString RepCapIdentifier, ViReal64* pRealVal, ViReal64* pImagVal);
ViStatus _VI_FUNC AgNA_ChannelMeasurementMarkerQueryBandwidth(ViSession Vi, ViConstString RepCapIdentifier, ViReal64* pBandWidthVal, ViReal64* pCenterFreqVal, ViReal64* pQVal, ViReal64* pLossVal);
ViStatus _VI_FUNC AgNA_ChannelMeasurementMarkerActivate(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgNA_GetChannelMeasurementMarkerName(ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- Trace */

ViStatus _VI_FUNC AgNA_ChannelMeasurementTraceAutoScale(ViSession Vi, ViConstString RepCapIdentifier);

/*- Segment */

ViStatus _VI_FUNC AgNA_ChannelSegmentDeleteAll(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgNA_ChannelSegmentDelete(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgNA_ChannelSegmentAddStartStop(ViSession Vi, ViConstString RepCapIdentifier, ViReal64 StartVal, ViReal64 StopVal, ViInt32 NumberOfPointsVal, ViReal64 IFBandwidthVal, ViReal64 PowerVal, ViReal64 TimeVal);
ViStatus _VI_FUNC AgNA_ChannelSegmentAddCenterSpan(ViSession Vi, ViConstString RepCapIdentifier, ViReal64 CenterVal, ViReal64 SpanVal, ViInt32 NumberOfPointVal, ViReal64 IFBandwidthVal, ViReal64 PowerVal, ViReal64 TimeVal);

/*- SourcePower */

ViStatus _VI_FUNC AgNA_ChannelSourcePowerSetCalibrationArray(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 PortVal, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize);
ViStatus _VI_FUNC AgNA_ChannelSourcePowerGetCalibrationArray(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 PortVal, ViInt32 RetValBufferSize, ViReal64 RetVal[], ViInt32* RetValActualSize);
ViStatus _VI_FUNC AgNA_ChannelSourcePowerGetAttenuation(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 PortVal, ViReal64* RetVal);
ViStatus _VI_FUNC AgNA_ChannelSourcePowerSetAttenuation(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 PortVal, ViReal64 Val);
ViStatus _VI_FUNC AgNA_ChannelSourcePowerGetAttenuationAuto(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 PortVal, ViBoolean* RetVal);
ViStatus _VI_FUNC AgNA_ChannelSourcePowerSetAttenuationAuto(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 PortVal, ViBoolean Val);
ViStatus _VI_FUNC AgNA_ChannelSourcePowerGetCorrectionOn(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 PortVal, ViBoolean* RetVal);
ViStatus _VI_FUNC AgNA_ChannelSourcePowerSetCorrectionOn(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 PortVal, ViBoolean Val);
ViStatus _VI_FUNC AgNA_ChannelSourcePowerGetLevel(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 PortVal, ViReal64* RetVal);
ViStatus _VI_FUNC AgNA_ChannelSourcePowerSetLevel(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 PortVal, ViReal64 Val);

/*- StimulusRange */

ViStatus _VI_FUNC AgNA_ChannelStimulusRangeConfigureStartStop(ViSession Vi, ViConstString RepCapIdentifier, ViReal64 StartVal, ViReal64 StopVal);
ViStatus _VI_FUNC AgNA_ChannelStimulusRangeConfigureCenterSpan(ViSession Vi, ViConstString RepCapIdentifier, ViReal64 CenterVal, ViReal64 SpanVal);

/*- Status */

ViStatus _VI_FUNC AgNA_StatusPreset(ViSession Vi);
ViStatus _VI_FUNC AgNA_StatusConfigureServiceRequest(ViSession Vi, ViInt32 Val);
ViStatus _VI_FUNC AgNA_StatusClear(ViSession Vi);
ViStatus _VI_FUNC AgNA_StatusGetRegister(ViSession Vi, ViInt32 Register, ViInt32 SubRegister, ViInt32* RetVal);
ViStatus _VI_FUNC AgNA_StatusSetRegister(ViSession Vi, ViInt32 Register, ViInt32 SubRegister, ViInt32 Val);

/*- System */

ViStatus _VI_FUNC AgNA_SystemWaitForOperationComplete(ViSession Vi, ViInt32 MaxTimeMilliseconds);
ViStatus _VI_FUNC AgNA_SystemSaveState(ViSession Vi, ViConstString Identifier);
ViStatus _VI_FUNC AgNA_SystemRecallState(ViSession Vi, ViConstString Identifier);
ViStatus _VI_FUNC AgNA_SystemEnableLocalControls(ViSession Vi);
ViStatus _VI_FUNC AgNA_SystemDisableLocalControls(ViSession Vi);
ViStatus _VI_FUNC AgNA_SystemRead(ViSession Vi, ViInt32 Size, ViChar Value[], ViInt32* ActualSize);
ViStatus _VI_FUNC AgNA_SystemWrite(ViSession Vi, ViConstString CommandString);


/****************************************************************************
 *----------------- Instrument Error And Completion Codes ------------------*
 ****************************************************************************/
#ifndef _IVIC_ERROR_BASE_DEFINES_
#define _IVIC_ERROR_BASE_DEFINES_

#define IVIC_WARN_BASE                           (0x3FFA0000L)
#define IVIC_CROSS_CLASS_WARN_BASE               (IVIC_WARN_BASE + 0x1000)
#define IVIC_CLASS_WARN_BASE                     (IVIC_WARN_BASE + 0x2000)
#define IVIC_SPECIFIC_WARN_BASE                  (IVIC_WARN_BASE + 0x4000)

#define IVIC_ERROR_BASE                          (0xBFFA0000L)
#define IVIC_CROSS_CLASS_ERROR_BASE              (IVIC_ERROR_BASE + 0x1000)
#define IVIC_CLASS_ERROR_BASE                    (IVIC_ERROR_BASE + 0x2000)
#define IVIC_SPECIFIC_ERROR_BASE                 (IVIC_ERROR_BASE + 0x4000)
#define IVIC_LXISYNC_ERROR_BASE                  (IVIC_ERROR_BASE + 0x2000)

#endif


#define AGNA_ERROR_CANNOT_RECOVER                           (IVIC_ERROR_BASE + 0x0000)
#define AGNA_ERROR_INSTRUMENT_STATUS                        (IVIC_ERROR_BASE + 0x0001)
#define AGNA_ERROR_CANNOT_OPEN_FILE                         (IVIC_ERROR_BASE + 0x0002)
#define AGNA_ERROR_READING_FILE                             (IVIC_ERROR_BASE + 0x0003)
#define AGNA_ERROR_WRITING_FILE                             (IVIC_ERROR_BASE + 0x0004)
#define AGNA_ERROR_INVALID_PATHNAME                         (IVIC_ERROR_BASE + 0x000B)
#define AGNA_ERROR_INVALID_VALUE                            (IVIC_ERROR_BASE + 0x0010)
#define AGNA_ERROR_FUNCTION_NOT_SUPPORTED                   (IVIC_ERROR_BASE + 0x0011)
#define AGNA_ERROR_ATTRIBUTE_NOT_SUPPORTED                  (IVIC_ERROR_BASE + 0x0012)
#define AGNA_ERROR_VALUE_NOT_SUPPORTED                      (IVIC_ERROR_BASE + 0x0013)
#define AGNA_ERROR_NOT_INITIALIZED                          (IVIC_ERROR_BASE + 0x001D)
#define AGNA_ERROR_UNKNOWN_CHANNEL_NAME                     (IVIC_ERROR_BASE + 0x0020)
#define AGNA_ERROR_TOO_MANY_OPEN_FILES                      (IVIC_ERROR_BASE + 0x0023)
#define AGNA_ERROR_CHANNEL_NAME_REQUIRED                    (IVIC_ERROR_BASE + 0x0044)
#define AGNA_ERROR_MISSING_OPTION_NAME                      (IVIC_ERROR_BASE + 0x0049)
#define AGNA_ERROR_MISSING_OPTION_VALUE                     (IVIC_ERROR_BASE + 0x004A)
#define AGNA_ERROR_BAD_OPTION_NAME                          (IVIC_ERROR_BASE + 0x004B)
#define AGNA_ERROR_BAD_OPTION_VALUE                         (IVIC_ERROR_BASE + 0x004C)
#define AGNA_ERROR_OUT_OF_MEMORY                            (IVIC_ERROR_BASE + 0x0056)
#define AGNA_ERROR_OPERATION_PENDING                        (IVIC_ERROR_BASE + 0x0057)
#define AGNA_ERROR_NULL_POINTER                             (IVIC_ERROR_BASE + 0x0058)
#define AGNA_ERROR_UNEXPECTED_RESPONSE                      (IVIC_ERROR_BASE + 0x0059)
#define AGNA_ERROR_FILE_NOT_FOUND                           (IVIC_ERROR_BASE + 0x005B)
#define AGNA_ERROR_INVALID_FILE_FORMAT                      (IVIC_ERROR_BASE + 0x005C)
#define AGNA_ERROR_STATUS_NOT_AVAILABLE                     (IVIC_ERROR_BASE + 0x005D)
#define AGNA_ERROR_ID_QUERY_FAILED                          (IVIC_ERROR_BASE + 0x005E)
#define AGNA_ERROR_RESET_FAILED                             (IVIC_ERROR_BASE + 0x005F)
#define AGNA_ERROR_RESOURCE_UNKNOWN                         (IVIC_ERROR_BASE + 0x0060)
#define AGNA_ERROR_ALREADY_INITIALIZED                      (IVIC_ERROR_BASE + 0x0061)
#define AGNA_ERROR_CANNOT_CHANGE_SIMULATION_STATE           (IVIC_ERROR_BASE + 0x0062)
#define AGNA_ERROR_INVALID_NUMBER_OF_LEVELS_IN_SELECTOR     (IVIC_ERROR_BASE + 0x0063)
#define AGNA_ERROR_INVALID_RANGE_IN_SELECTOR                (IVIC_ERROR_BASE + 0x0064)
#define AGNA_ERROR_UNKOWN_NAME_IN_SELECTOR                  (IVIC_ERROR_BASE + 0x0065)
#define AGNA_ERROR_BADLY_FORMED_SELECTOR                    (IVIC_ERROR_BASE + 0x0066)
#define AGNA_ERROR_UNKNOWN_PHYSICAL_IDENTIFIER              (IVIC_ERROR_BASE + 0x0067)
#define AGNA_ERROR_INVALID_ATTRIBUTE                        (IVIC_ERROR_BASE + 0x000C)
#define AGNA_ERROR_TYPES_DO_NOT_MATCH                       (IVIC_ERROR_BASE + 0x0015)
#define AGNA_ERROR_IVI_ATTR_NOT_WRITABLE                    (IVIC_ERROR_BASE + 0x000D)
#define AGNA_ERROR_IVI_ATTR_NOT_READABLE                    (IVIC_ERROR_BASE + 0x000E)
#define AGNA_ERROR_INVALID_SESSION_HANDLE                   (IVIC_ERROR_BASE + 0x1190)



#define AGNA_SUCCESS                                        0
#define AGNA_WARN_NSUP_ID_QUERY                             (IVIC_WARN_BASE + 0x0065)
#define AGNA_WARN_NSUP_RESET                                (IVIC_WARN_BASE + 0x0066)
#define AGNA_WARN_NSUP_SELF_TEST                            (IVIC_WARN_BASE + 0x0067)
#define AGNA_WARN_NSUP_ERROR_QUERY                          (IVIC_WARN_BASE + 0x0068)
#define AGNA_WARN_NSUP_REV_QUERY                            (IVIC_WARN_BASE + 0x0069)



#define AGNA_ERROR_PERSONALITY_NOT_ACTIVE                   (IVIC_SPECIFIC_ERROR_BASE + 0x0211)
#define AGNA_ERROR_PERSONALITY_NOT_INSTALLED                (IVIC_SPECIFIC_ERROR_BASE + 0x0212)
#define AGNA_ERROR_PERSONALITY_NOT_LICENSED                 (IVIC_SPECIFIC_ERROR_BASE + 0x0213)
#define AGNA_ERROR_IO_GENERAL                               (IVIC_SPECIFIC_ERROR_BASE + 0x0214)
#define AGNA_ERROR_IO_TIMEOUT                               (IVIC_SPECIFIC_ERROR_BASE + 0x0215)
#define AGNA_ERROR_MODEL_NOT_SUPPORTED                      (IVIC_SPECIFIC_ERROR_BASE + 0x0216)
#define AGNA_ERROR_WRAPPED_DRIVER_ERROR                     (IVIC_SPECIFIC_ERROR_BASE + 0x0218)
#define AGNA_ERROR_MAX_TIME_EXCEEDED                        (IVIC_SPECIFIC_ERROR_BASE + 0x0217)
#define AGNA_ERROR_ANY_STRING                               (IVIC_SPECIFIC_ERROR_BASE + 0x0219)




/****************************************************************************
 *---------------------------- End Include File ----------------------------*
 ****************************************************************************/
#if defined(__cplusplus) || defined(__cplusplus__)
}
#endif
#endif // __AGNA_HEADER
