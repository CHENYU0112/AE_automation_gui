from .{drivername} import *


class IIviDmmAdvanced:
    def __init__(self, root):
        self.root = root
        """:type : pverify.drivers.{group}.{drivername}.I{iviclass}.I{iviclass}"""

    @property
    def ActualRange(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 2)

    @property
    def ApertureTime(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 321)

    @ApertureTime.setter
    def ApertureTime(self, value):
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 321, value)

    @property
    def ApertureTimeUnits(self):
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 322)

    @ApertureTimeUnits.setter
    def ApertureTimeUnits(self, value):
        self.root.dllwrap.SetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 322, value)

    @property
    def AutoZero(self):
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 332)

    @AutoZero.setter
    def AutoZero(self, value):
        """
        The auto-zero mode. When the auto-zero mode is enabled, the DMM internally
        disconnects the input signal and takes a Zero Reading. The DMM then subtracts
        the Zero Reading from the measurement.
        """
        self.root.dllwrap.SetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 332, value)

    @property
    def PowerlineFrequency(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 333)

    @PowerlineFrequency.setter
    def PowerlineFrequency(self, value):
        """
        The power line frequency in Hertz.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 333, value)
