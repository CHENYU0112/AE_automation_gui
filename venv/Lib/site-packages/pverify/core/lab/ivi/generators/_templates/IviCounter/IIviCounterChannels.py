from .IIviCounterChannel import IIviCounterChannel
from .{drivername} import *


class IIviCounterChannels:
    def __init__(self, root):
        self.root = root
        """:type : pverify.drivers.{group}.{drivername}.I{iviclass}.I{iviclass}"""
        self.__channels = None
        """:type : dict[str,IIviCounterChannel]"""

    @property
    def Count(self):
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_ENGINE_PUBLIC_ATTR_BASE + 203)

    def Item(self, OutputName):
        """
        Gets a pointer to a channel object.

        :param OutputName: The name of a channel. It may be either a name returned by get_Name or a name
            mapped to a particular repeated capability in the session in the configuration
            store.
        :type OutputName: str

        :return: A pointer to a class-compliant IIviCounterChannel interface.
        :rtype: IIviCounterChannel
        """
        if self.__channels is None:
            self.__channels = dict()
            for i in range(self.Count):
                name = self.Name(i + 1)
                self.__channels.update({{name: IIviCounterChannel(self.root, name)}})
        return self.__channels[OutputName]

    def Name(self, Index):
        """
        Gets the name of a channel.

        :param Index: One based index into the collection of channels.
        :type Index: int

        :return: The string associated by the driver to the value of Index without ever referring
            to the configuration store.
        :rtype: str
        """
        return self.root.dllwrap.GetChannelName(Index, 256)
