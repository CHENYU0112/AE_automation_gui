/******************************************************************************
 *
 * Copyright Keysight Technologies 2013-2020.
 *
 *****************************************************************************/

#ifndef __AGAPS_HEADER
#define __AGAPS_HEADER

#include <ivivisatype.h>

#if defined(__cplusplus) || defined(__cplusplus__)
extern "C" {
#endif

/****************************************************************************
 *---------------------------- Attribute Defines ---------------------------*
 ****************************************************************************/
#ifndef IVI_ATTR_BASE
#define IVI_ATTR_BASE                 1000000
#endif

#ifndef IVI_INHERENT_ATTR_BASE
#define IVI_INHERENT_ATTR_BASE        (IVI_ATTR_BASE +  50000)   /* base for inherent capability attributes */
#endif

#ifndef IVI_CLASS_ATTR_BASE
#define IVI_CLASS_ATTR_BASE           (IVI_ATTR_BASE + 250000)   /* base for IVI-defined class attributes */
#endif

#ifndef IVI_LXISYNC_ATTR_BASE
#define IVI_LXISYNC_ATTR_BASE         (IVI_ATTR_BASE + 950000)   /* base for IviLxiSync attributes */
#endif

#ifndef IVI_SPECIFIC_ATTR_BASE
#define IVI_SPECIFIC_ATTR_BASE        (IVI_ATTR_BASE + 150000)   /* base for attributes of specific drivers */
#endif


/*===== IVI Inherent Instrument Attributes ==============================*/

/*- Driver Identification */

#define AGAPS_ATTR_SPECIFIC_DRIVER_DESCRIPTION              (IVI_INHERENT_ATTR_BASE + 514L)  /* ViString, read-only */
#define AGAPS_ATTR_SPECIFIC_DRIVER_PREFIX                   (IVI_INHERENT_ATTR_BASE + 302L)  /* ViString, read-only */
#define AGAPS_ATTR_SPECIFIC_DRIVER_VENDOR                   (IVI_INHERENT_ATTR_BASE + 513L)  /* ViString, read-only */
#define AGAPS_ATTR_SPECIFIC_DRIVER_REVISION                 (IVI_INHERENT_ATTR_BASE + 551L)  /* ViString, read-only */
#define AGAPS_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION (IVI_INHERENT_ATTR_BASE + 515L)  /* ViInt32, read-only */
#define AGAPS_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION (IVI_INHERENT_ATTR_BASE + 516L)  /* ViInt32, read-only */

/*- User Options */

#define AGAPS_ATTR_RANGE_CHECK                              (IVI_INHERENT_ATTR_BASE + 2L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_QUERY_INSTRUMENT_STATUS                  (IVI_INHERENT_ATTR_BASE + 3L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_CACHE                                    (IVI_INHERENT_ATTR_BASE + 4L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_SIMULATE                                 (IVI_INHERENT_ATTR_BASE + 5L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_RECORD_COERCIONS                         (IVI_INHERENT_ATTR_BASE + 6L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_INTERCHANGE_CHECK                        (IVI_INHERENT_ATTR_BASE + 21L)  /* ViBoolean, read-write */

/*- Advanced Session Information */

#define AGAPS_ATTR_LOGICAL_NAME                             (IVI_INHERENT_ATTR_BASE + 305L)  /* ViString, read-only */
#define AGAPS_ATTR_IO_RESOURCE_DESCRIPTOR                   (IVI_INHERENT_ATTR_BASE + 304L)  /* ViString, read-only */
#define AGAPS_ATTR_DRIVER_SETUP                             (IVI_INHERENT_ATTR_BASE + 7L)  /* ViString, read-only */

/*- Driver Capabilities */

#define AGAPS_ATTR_GROUP_CAPABILITIES                       (IVI_INHERENT_ATTR_BASE + 401L)  /* ViString, read-only */
#define AGAPS_ATTR_SUPPORTED_INSTRUMENT_MODELS              (IVI_INHERENT_ATTR_BASE + 327L)  /* ViString, read-only */

/*- Instrument Identification */

#define AGAPS_ATTR_INSTRUMENT_FIRMWARE_REVISION             (IVI_INHERENT_ATTR_BASE + 510L)  /* ViString, read-only */
#define AGAPS_ATTR_INSTRUMENT_MANUFACTURER                  (IVI_INHERENT_ATTR_BASE + 511L)  /* ViString, read-only */
#define AGAPS_ATTR_INSTRUMENT_MODEL                         (IVI_INHERENT_ATTR_BASE + 512L)  /* ViString, read-only */


/*===== Instrument-Specific Attributes =====================================*/

/*- System */

#define AGAPS_ATTR_SYSTEM_DATE                              (IVI_SPECIFIC_ATTR_BASE + 1L)  /* ViString, read-write */
#define AGAPS_ATTR_SYSTEM_SERIAL_NUMBER                     (IVI_SPECIFIC_ATTR_BASE + 3L)  /* ViString, read-only */
#define AGAPS_ATTR_SYSTEM_TIME                              (IVI_SPECIFIC_ATTR_BASE + 4L)  /* ViString, read-write */
#define AGAPS_ATTR_SYSTEM_TIMEOUT_MILLISECONDS              (IVI_SPECIFIC_ATTR_BASE + 5L)  /* ViInt32, read-write */
#define AGAPS_ATTR_SYSTEM_TRACE_ENABLED                     (IVI_SPECIFIC_ATTR_BASE + 6L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_SYSTEM_POWER_ON_STATE                    (IVI_SPECIFIC_ATTR_BASE + 91L)  /* ViInt32, read-write */
#define AGAPS_ATTR_SYSTEM_IO_TIMEOUT                        (IVI_SPECIFIC_ATTR_BASE + 124L)  /* ViInt32, read-write */

/*- SafetyDisconnectSystem */

#define AGAPS_ATTR_SAFETY_DISCONNECT_SYSTEM_CONNECTION_MODE              (IVI_SPECIFIC_ATTR_BASE + 129L)  /* ViInt32, read-write */
#define AGAPS_ATTR_SAFETY_DISCONNECT_SYSTEM_EXTERNAL_OUTPUT_SIGNAL_STATE (IVI_SPECIFIC_ATTR_BASE + 130L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_SAFETY_DISCONNECT_SYSTEM_ENABLED                      (IVI_SPECIFIC_ATTR_BASE + 131L)  /* ViBoolean, read-write */

/*- Status */

#define AGAPS_ATTR_STATUS_SERIAL_POLL                       (IVI_SPECIFIC_ATTR_BASE + 7L)  /* ViInt32, read-only */

/*- Output */

#define AGAPS_ATTR_OUTPUT_REGULATION_MODE                   (IVI_SPECIFIC_ATTR_BASE + 13L)  /* ViInt32, read-write */
#define AGAPS_ATTR_OUTPUT_POWER_LIMIT                       (IVI_SPECIFIC_ATTR_BASE + 50L)  /* ViReal64, read-only */

/*- Relay */

#define AGAPS_ATTR_OUTPUT_RELAY_LOCK_ENABLED                (IVI_SPECIFIC_ATTR_BASE + 51L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_OUTPUT_RELAY_POLARITY                    (IVI_SPECIFIC_ATTR_BASE + 52L)  /* ViInt32, read-write */
#define AGAPS_ATTR_OUTPUT_RELAY_POLARITY_ENABLED            (IVI_SPECIFIC_ATTR_BASE + 53L)  /* ViBoolean, read-write */

/*- Voltage */

#define AGAPS_ATTR_OUTPUT_VOLTAGE_BANDWIDTH                 (IVI_SPECIFIC_ATTR_BASE + 54L)  /* ViInt32, read-write */
#define AGAPS_ATTR_OUTPUT_VOLTAGE_POSITIVE_LIMIT            (IVI_SPECIFIC_ATTR_BASE + 29L)  /* ViReal64, read-write */
#define AGAPS_ATTR_OUTPUT_VOLTAGE_LEVEL                     (IVI_SPECIFIC_ATTR_BASE + 12L)  /* ViReal64, read-write */
#define AGAPS_ATTR_OUTPUT_VOLTAGE_MAX_POSITIVE_LIMIT        (IVI_SPECIFIC_ATTR_BASE + 107L)  /* ViReal64, read-only */
#define AGAPS_ATTR_OUTPUT_VOLTAGE_SLEW_RATE                 (IVI_SPECIFIC_ATTR_BASE + 121L)  /* ViReal64, read-write */
#define AGAPS_ATTR_OUTPUT_VOLTAGE_MAX_SLEW_RATE_ENABLED     (IVI_SPECIFIC_ATTR_BASE + 123L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_OUTPUT_VOLTAGE_RESISTANCE_LEVEL          (IVI_SPECIFIC_ATTR_BASE + 132L)  /* ViReal64, read-write */
#define AGAPS_ATTR_OUTPUT_VOLTAGE_RESISTANCE_ENABLED        (IVI_SPECIFIC_ATTR_BASE + 133L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_BANDWIDTH_LEVEL                          (IVI_SPECIFIC_ATTR_BASE + 159L)  /* ViReal64, read-write */
#define AGAPS_ATTR_BANDWIDTH_RANGE2                         (IVI_SPECIFIC_ATTR_BASE + 160L)  /* ViInt32, read-write */
#define AGAPS_ATTR_LOW_LIMIT                                (IVI_SPECIFIC_ATTR_BASE + 161L)  /* ViReal64, read-write */
#define AGAPS_ATTR_LOW_LIMIT_ENABLED                        (IVI_SPECIFIC_ATTR_BASE + 162L)  /* ViBoolean, read-write */

/*- Current */

#define AGAPS_ATTR_OUTPUT_CURRENT_POSITIVE_LIMIT            (IVI_SPECIFIC_ATTR_BASE + 10L)  /* ViReal64, read-write */
#define AGAPS_ATTR_OUTPUT_CURRENT_LEVEL                     (IVI_SPECIFIC_ATTR_BASE + 23L)  /* ViReal64, read-write */
#define AGAPS_ATTR_OUTPUT_CURRENT_NEGATIVE_LIMIT            (IVI_SPECIFIC_ATTR_BASE + 30L)  /* ViReal64, read-write */
#define AGAPS_ATTR_OUTPUT_CURRENT_SHARING_ENABLED           (IVI_SPECIFIC_ATTR_BASE + 47L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_OUTPUT_CURRENT_MIN_NEGATIVE_LIMIT        (IVI_SPECIFIC_ATTR_BASE + 105L)  /* ViReal64, read-only */
#define AGAPS_ATTR_OUTPUT_CURRENT_MAX_POSITIVE_LIMIT        (IVI_SPECIFIC_ATTR_BASE + 106L)  /* ViReal64, read-only */
#define AGAPS_ATTR_OUTPUT_CURRENT_SLEW_RATE                 (IVI_SPECIFIC_ATTR_BASE + 120L)  /* ViReal64, read-write */
#define AGAPS_ATTR_OUTPUT_CURRENT_MAX_SLEW_RATE_ENABLED     (IVI_SPECIFIC_ATTR_BASE + 122L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_BANDWIDTH_LEVEL2                         (IVI_SPECIFIC_ATTR_BASE + 163L)  /* ViReal64, read-write */

/*- Sequence */

#define AGAPS_ATTR_OUTPUT_SEQUENCE_DELAY_OFFSET             (IVI_SPECIFIC_ATTR_BASE + 33L)  /* ViReal64, read-write */
#define AGAPS_ATTR_OUTPUT_SEQUENCE_MAX_DELAY_OFFSET         (IVI_SPECIFIC_ATTR_BASE + 38L)  /* ViReal64, read-only */
#define AGAPS_ATTR_OUTPUT_SEQUENCE_ENABLED                  (IVI_SPECIFIC_ATTR_BASE + 32L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_OUTPUT_SEQUENCE_OFF_DELAY                (IVI_SPECIFIC_ATTR_BASE + 37L)  /* ViReal64, read-write */
#define AGAPS_ATTR_OUTPUT_SEQUENCE_OFF_SOURCE               (IVI_SPECIFIC_ATTR_BASE + 36L)  /* ViInt32, read-write */
#define AGAPS_ATTR_OUTPUT_SEQUENCE_ON_DELAY                 (IVI_SPECIFIC_ATTR_BASE + 35L)  /* ViReal64, read-write */
#define AGAPS_ATTR_OUTPUT_SEQUENCE_ON_SOURCE                (IVI_SPECIFIC_ATTR_BASE + 34L)  /* ViInt32, read-write */

/*- Resistance */

#define AGAPS_ATTR_OUTPUT_RESISTANCE_ENABLED                (IVI_SPECIFIC_ATTR_BASE + 72L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_OUTPUT_RESISTANCE_LEVEL                  (IVI_SPECIFIC_ATTR_BASE + 71L)  /* ViReal64, read-write */

/*- SAS */

#define AGAPS_ATTR_SCALE_FACTOR_CURRENT                     (IVI_SPECIFIC_ATTR_BASE + 144L)  /* ViReal64, read-write */
#define AGAPS_ATTR_SCALE_FACTOR_VOLTAGE                     (IVI_SPECIFIC_ATTR_BASE + 146L)  /* ViReal64, read-write */
#define AGAPS_ATTR_MODE                                     (IVI_SPECIFIC_ATTR_BASE + 151L)  /* ViInt32, read-write */
#define AGAPS_ATTR_BANDWIDTH_RANGE                          (IVI_SPECIFIC_ATTR_BASE + 152L)  /* ViInt32, read-write */

/*- Curve */

#define AGAPS_ATTR_SHAPE                                    (IVI_SPECIFIC_ATTR_BASE + 142L)  /* ViInt32, read-write */

/*- Current */

#define AGAPS_ATTR_IMP                                      (IVI_SPECIFIC_ATTR_BASE + 134L)  /* ViReal64, read-write */
#define AGAPS_ATTR_ISC                                      (IVI_SPECIFIC_ATTR_BASE + 136L)  /* ViReal64, read-write */

/*- Voltage */

#define AGAPS_ATTR_MAX_POWER2                               (IVI_SPECIFIC_ATTR_BASE + 138L)  /* ViReal64, read-write */
#define AGAPS_ATTR_VOC                                      (IVI_SPECIFIC_ATTR_BASE + 140L)  /* ViReal64, read-write */

/*- Table */

#define AGAPS_ATTR_SELECT                                   (IVI_SPECIFIC_ATTR_BASE + 164L)  /* ViInt32, read-write */

/*- Measurement */

#define AGAPS_ATTR_MEASUREMENT_WINDOW                       (IVI_SPECIFIC_ATTR_BASE + 22L)  /* ViInt32, read-write */
#define AGAPS_ATTR_MEASUREMENT_CURRENT_RANGE                (IVI_SPECIFIC_ATTR_BASE + 62L)  /* ViReal64, read-write */
#define AGAPS_ATTR_MEASUREMENT_AUTO_CURRENT_RANGE_ENABLED   (IVI_SPECIFIC_ATTR_BASE + 118L)  /* ViBoolean, read-write */

/*- Sweep */

#define AGAPS_ATTR_MEASUREMENT_SWEEP_INTERVAL               (IVI_SPECIFIC_ATTR_BASE + 65L)  /* ViReal64, read-write */
#define AGAPS_ATTR_MEASUREMENT_SWEEP_POINTS                 (IVI_SPECIFIC_ATTR_BASE + 66L)  /* ViInt32, read-write */
#define AGAPS_ATTR_MEASUREMENT_SWEEP_OFFSET_POINTS          (IVI_SPECIFIC_ATTR_BASE + 67L)  /* ViInt32, read-write */
#define AGAPS_ATTR_MEASUREMENT_SWEEP_NPLC                   (IVI_SPECIFIC_ATTR_BASE + 119L)  /* ViReal64, read-write */

/*- Protection */

#define AGAPS_ATTR_PROTECTION_SENSE_FAULT_ENABLED           (IVI_SPECIFIC_ATTR_BASE + 26L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_PROTECTION_WATCH_DOG_ENABLED             (IVI_SPECIFIC_ATTR_BASE + 39L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_PROTECTION_WATCH_DOG_DELAY               (IVI_SPECIFIC_ATTR_BASE + 40L)  /* ViInt32, read-write */
#define AGAPS_ATTR_PROTECTION_INHIBIT_MODE                  (IVI_SPECIFIC_ATTR_BASE + 88L)  /* ViInt32, read-write */

/*- OverCurrent */

#define AGAPS_ATTR_PROTECTION_CURRENT_DELAY                 (IVI_SPECIFIC_ATTR_BASE + 87L)  /* ViReal64, read-write */
#define AGAPS_ATTR_PROTECTION_CURRENT_LIMIT_BEHAVIOR        (IVI_SPECIFIC_ATTR_BASE + 86L)  /* ViInt32, read-write */
#define AGAPS_ATTR_PROTECTION_CURRENT_START_EVENT           (IVI_SPECIFIC_ATTR_BASE + 28L)  /* ViInt32, read-write */

/*- OverVoltage */

#define AGAPS_ATTR_PROTECTION_VOLTAGE_LIMIT                 (IVI_SPECIFIC_ATTR_BASE + 90L)  /* ViReal64, read-write */

/*- LowVoltage */

#define AGAPS_ATTR_LEVEL                                    (IVI_SPECIFIC_ATTR_BASE + 153L)  /* ViReal64, read-write */
#define AGAPS_ATTR_DELAY                                    (IVI_SPECIFIC_ATTR_BASE + 154L)  /* ViReal64, read-write */
#define AGAPS_ATTR_LVP_ENABLED                              (IVI_SPECIFIC_ATTR_BASE + 155L)  /* ViBoolean, read-write */

/*- Transient */

#define AGAPS_ATTR_TRANSIENT_CURRENT_MODE                   (IVI_SPECIFIC_ATTR_BASE + 94L)  /* ViInt32, read-write */
#define AGAPS_ATTR_TRANSIENT_VOLTAGE_MODE                   (IVI_SPECIFIC_ATTR_BASE + 96L)  /* ViInt32, read-write */

/*- ArbWaveForm */

#define AGAPS_ATTR_TRANSIENT_ARB_WAVEFORM_DWELL                (IVI_SPECIFIC_ATTR_BASE + 84L)  /* ViReal64, read-write */
#define AGAPS_ATTR_TRANSIENT_ARB_WAVEFORM_TYPE                 (IVI_SPECIFIC_ATTR_BASE + 85L)  /* ViInt32, read-only */
#define AGAPS_ATTR_TRANSIENT_ARB_WAVEFORM_POINTS_COUNT         (IVI_SPECIFIC_ATTR_BASE + 111L)  /* ViReal64, read-only */
#define AGAPS_ATTR_TRANSIENT_ARB_WAVEFORM_TERMINATION_BEHAVIOR (IVI_SPECIFIC_ATTR_BASE + 113L)  /* ViInt32, read-write */

/*- List */

#define AGAPS_ATTR_TRANSIENT_LIST_PACE_MODE                 (IVI_SPECIFIC_ATTR_BASE + 42L)  /* ViInt32, read-write */
#define AGAPS_ATTR_TRANSIENT_LIST_TERMINATION_BEHAVIOR      (IVI_SPECIFIC_ATTR_BASE + 116L)  /* ViInt32, read-write */

/*- Step */

#define AGAPS_ATTR_TRANSIENT_STEP_CURRENT_LEVEL             (IVI_SPECIFIC_ATTR_BASE + 93L)  /* ViReal64, read-write */
#define AGAPS_ATTR_TRANSIENT_STEP_VOLTAGE_LEVEL             (IVI_SPECIFIC_ATTR_BASE + 95L)  /* ViReal64, read-write */
#define AGAPS_ATTR_TRANSIENT_STEP_TRIGGER_OUTPUT_ENABLED    (IVI_SPECIFIC_ATTR_BASE + 114L)  /* ViBoolean, read-write */

/*- Measurement */

#define AGAPS_ATTR_TRIGGER_MEASUREMENT_CURRENT_LEVEL        (IVI_SPECIFIC_ATTR_BASE + 97L)  /* ViReal64, read-write */
#define AGAPS_ATTR_TRIGGER_MEASUREMENT_CURRENT_SLOPE        (IVI_SPECIFIC_ATTR_BASE + 98L)  /* ViInt32, read-write */
#define AGAPS_ATTR_TRIGGER_MEASUREMENT_VOLTAGE_LEVEL        (IVI_SPECIFIC_ATTR_BASE + 100L)  /* ViReal64, read-write */
#define AGAPS_ATTR_TRIGGER_MEASUREMENT_VOLTAGE_SLOPE        (IVI_SPECIFIC_ATTR_BASE + 101L)  /* ViInt32, read-write */
#define AGAPS_ATTR_TRIGGER_MEASUREMENT_SOURCE               (IVI_SPECIFIC_ATTR_BASE + 108L)  /* ViInt32, read-write */

/*- Transient */

#define AGAPS_ATTR_TRIGGER_TRANSIENT_CONTINUOUS_ENABLED     (IVI_SPECIFIC_ATTR_BASE + 102L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_TRIGGER_TRANSIENT_SOURCE                 (IVI_SPECIFIC_ATTR_BASE + 110L)  /* ViInt32, read-write */
#define AGAPS_ATTR_TRIGGER_TRANSIENT_ARB_WAVEFORM_SOURCE    (IVI_SPECIFIC_ATTR_BASE + 117L)  /* ViInt32, read-write */

/*- DigitalPort */

#define AGAPS_ATTR_DIGITAL_PORT_OUTPUT_BUS_TRIGGER_ENABLED  (IVI_SPECIFIC_ATTR_BASE + 73L)  /* ViBoolean, read-write */

/*- MasterSlave */

#define AGAPS_ATTR_MASTER_SLAVE_FUNCTION                    (IVI_SPECIFIC_ATTR_BASE + 125L)  /* ViInt32, read-write */

/*- Connect */

#define AGAPS_ATTR_MASTER_SLAVE_CONNECT_ENABLED             (IVI_SPECIFIC_ATTR_BASE + 126L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_MASTER_SLAVE_CONNECT_DELAY               (IVI_SPECIFIC_ATTR_BASE + 127L)  /* ViReal64, read-write */
#define AGAPS_ATTR_MASTER_SLAVE_CONNECT_MODE                (IVI_SPECIFIC_ATTR_BASE + 128L)  /* ViInt32, read-write */

/*- Display */

#define AGAPS_ATTR_METER_VIEW                               (IVI_SPECIFIC_ATTR_BASE + 156L)  /* ViInt32, read-write */
#define AGAPS_ATTR_ENABLED                                  (IVI_SPECIFIC_ATTR_BASE + 157L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_SAVER_ENABLED                            (IVI_SPECIFIC_ATTR_BASE + 158L)  /* ViBoolean, read-write */

/*- Output */

#define AGAPS_ATTR_CURRENT_LIMIT                            (IVI_CLASS_ATTR_BASE + 5L)  /* ViReal64, read-write */
#define AGAPS_ATTR_CURRENT_LIMIT_BEHAVIOR                   (IVI_CLASS_ATTR_BASE + 4L)  /* ViInt32, read-write */
#define AGAPS_ATTR_OUTPUT_ENABLED                           (IVI_CLASS_ATTR_BASE + 6L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_OVP_ENABLED                              (IVI_CLASS_ATTR_BASE + 2L)  /* ViBoolean, read-write */
#define AGAPS_ATTR_OVP_LIMIT                                (IVI_CLASS_ATTR_BASE + 3L)  /* ViReal64, read-write */
#define AGAPS_ATTR_VOLTAGE_LEVEL                            (IVI_CLASS_ATTR_BASE + 1L)  /* ViReal64, read-write */
#define AGAPS_ATTR_CHANNEL_COUNT                            (IVI_INHERENT_ATTR_BASE + 203L)  /* ViInt32, read-only */

/*- Trigger */

#define AGAPS_ATTR_TRIGGERED_CURRENT_LIMIT                  (IVI_CLASS_ATTR_BASE + 102L)  /* ViReal64, read-write */
#define AGAPS_ATTR_TRIGGERED_VOLTAGE_LEVEL                  (IVI_CLASS_ATTR_BASE + 103L)  /* ViReal64, read-write */
#define AGAPS_ATTR_TRIGGER_SOURCE                           (IVI_CLASS_ATTR_BASE + 101L)  /* ViInt32, read-write */


/****************************************************************************
 *------------------------ Attribute Value Defines -------------------------*
 ****************************************************************************/

/*- Defined values for
	parameter Register in function AgAPS_StatusGetRegister
	parameter Register in function AgAPS_StatusSetRegister */

#define AGAPS_VAL_STATUS_REGISTER_STATUS_BYTE               0
#define AGAPS_VAL_STATUS_REGISTER_STANDARD_EVENT            1
#define AGAPS_VAL_STATUS_REGISTER_OPERATION                 2
#define AGAPS_VAL_STATUS_REGISTER_QUESTIONABLE              3
#define AGAPS_VAL_STATUS_REGISTER_QUESTIONABLE2             4

/*- Defined values for
	parameter SubRegister in function AgAPS_StatusGetRegister
	parameter SubRegister in function AgAPS_StatusSetRegister */

#define AGAPS_VAL_STATUS_SUB_REGISTER_CONDITION             0
#define AGAPS_VAL_STATUS_SUB_REGISTER_NEGATIVE_TRANSITION   1
#define AGAPS_VAL_STATUS_SUB_REGISTER_POSITIVE_TRANSITION   2
#define AGAPS_VAL_STATUS_SUB_REGISTER_EVENT                 3
#define AGAPS_VAL_STATUS_SUB_REGISTER_ENABLE                4

/*- Defined values for
	parameter Reason in function AgAPS_StatusConfigureServiceRequest */

#define AGAPS_VAL_SRQ_REASON_STB_MAV                        1
#define AGAPS_VAL_SRQ_REASON_STB_ERROR_QUEUE                2
#define AGAPS_VAL_SRQ_REASON_ESR_OPC                        4
#define AGAPS_VAL_SRQ_REASON_ESR_QUERY_ERROR                8
#define AGAPS_VAL_SRQ_REASON_ESR_DEVICE_ERROR               16
#define AGAPS_VAL_SRQ_REASON_ESR_EXECUTION_ERROR            32
#define AGAPS_VAL_SRQ_REASON_ESR_COMMAND_ERROR              64

/*- Defined values for
	attribute AGAPS_ATTR_CURRENT_LIMIT_BEHAVIOR
	parameter Behavior in function AgAPS_ConfigureCurrentLimit */

#define AGAPS_VAL_CURRENT_REGULATE                          0
#define AGAPS_VAL_CURRENT_TRIP                              1

/*- Defined values for
	parameter RangeType in function AgAPS_ConfigureOutputRange */

#define AGAPS_VAL_RANGE_CURRENT                             0
#define AGAPS_VAL_RANGE_VOLTAGE                             1

/*- Defined values for
	parameter MeasurementType in function AgAPS_Measure */

#define AGAPS_VAL_MEASURE_CURRENT                           0
#define AGAPS_VAL_MEASURE_VOLTAGE                           1

/*- Defined values for
	parameter OutputState in function AgAPS_QueryOutputState */

#define AGAPS_VAL_OUTPUT_CONSTANT_VOLTAGE                   0
#define AGAPS_VAL_OUTPUT_CONSTANT_CURRENT                   1
#define AGAPS_VAL_OUTPUT_OVER_VOLTAGE                       2
#define AGAPS_VAL_OUTPUT_OVER_CURRENT                       3
#define AGAPS_VAL_OUTPUT_UNREGULATED                        4

/*- Defined values for
	attribute AGAPS_ATTR_TRIGGER_SOURCE
	parameter Source in function AgAPS_ConfigureTriggerSource */

#define AGAPS_VAL_TRIG_IMMEDIATE                            0
#define AGAPS_VAL_TRIG_EXTERNAL                             1
#define AGAPS_VAL_SOFTWARE_TRIG                             2
#define AGAPS_VAL_TRIG_TTL0                                 3
#define AGAPS_VAL_TRIG_TTL1                                 4
#define AGAPS_VAL_TRIG_TTL2                                 5
#define AGAPS_VAL_TRIG_TTL3                                 6
#define AGAPS_VAL_TRIG_TTL4                                 7
#define AGAPS_VAL_TRIG_TTL5                                 8
#define AGAPS_VAL_TRIG_TTL6                                 9
#define AGAPS_VAL_TRIG_TTL7                                 10
#define AGAPS_VAL_TRIG_ECL0                                 11
#define AGAPS_VAL_TRIG_ECL1                                 12
#define AGAPS_VAL_TRIG_PXI_STAR                             13
#define AGAPS_VAL_TRIG_RTSI_0                               14
#define AGAPS_VAL_TRIG_RTSI_1                               15
#define AGAPS_VAL_TRIG_RTSI_2                               16
#define AGAPS_VAL_TRIG_RTSI_3                               17
#define AGAPS_VAL_TRIG_RTSI_4                               18
#define AGAPS_VAL_TRIG_RTSI_5                               19
#define AGAPS_VAL_TRIG_RTSI_6                               20

/*- Defined values for
	attribute AGAPS_ATTR_PROTECTION_CURRENT_LIMIT_BEHAVIOR
	parameter LimitBehavior in function AgAPS_ProtectionCurrentConfigure */

#define AGAPS_VAL_PROTECTION_CURRENT_LIMIT_REGULATE         0
#define AGAPS_VAL_PROTECTION_CURRENT_LIMIT_TRIP             1

/*- Defined values for
	parameter OutputState in function AgAPS_OutputQueryState */

#define AGAPS_VAL_OUTPUT_STATE_CONSTANT_VOLTAGE             0
#define AGAPS_VAL_OUTPUT_STATE_CONSTANT_CURRENT             1
#define AGAPS_VAL_OUTPUT_STATE_OVER_VOLTAGE                 2
#define AGAPS_VAL_OUTPUT_STATE_OVER_CURRENT                 3
#define AGAPS_VAL_OUTPUT_STATE_UNREGULATED                  4
#define AGAPS_VAL_OUTPUT_STATE_POWER_FAIL                   5
#define AGAPS_VAL_OUTPUT_STATE_POSITIVE_POWER_LIMIT         6
#define AGAPS_VAL_OUTPUT_STATE_NEGATIVE_POWER_LIMIT         7
#define AGAPS_VAL_OUTPUT_STATE_OVER_TEMPERATURE             8
#define AGAPS_VAL_OUTPUT_STATE_INHIBIT                      9
#define AGAPS_VAL_OUTPUT_STATE_OFF                          10
#define AGAPS_VAL_OUTPUT_STATE_POSITIVE_COMPLIANCE_LIMIT    11
#define AGAPS_VAL_OUTPUT_STATE_NEGATIVE_COMPLIANCE_LIMIT    12
#define AGAPS_VAL_OUTPUT_STATE_NEGATIVE_OVER_VOLTAGE        13
#define AGAPS_VAL_OUTPUT_STATE_DYNAMIC_PROT_FAULT           14
#define AGAPS_VAL_OUTPUT_STATE_SENSE_LEAD_FAULT             15
#define AGAPS_VAL_OUTPUT_STATE_WATCH_DOG_PROTECT            16
#define AGAPS_VAL_OUTPUT_STATE_USER_DEFINED_PROTECT         17
#define AGAPS_VAL_OUTPUT_STATE_POSITIVE_PEAK_CURRENT        18
#define AGAPS_VAL_OUTPUT_STATE_NEGATIVE_PEAK_CURRENT        19
#define AGAPS_VAL_OUTPUT_STATE_CURRENT_SHARING_FAULT        20
#define AGAPS_VAL_OUTPUT_STATE_MASTER_SLAVE_PROTECTION      21
#define AGAPS_VAL_OUTPUT_STATE_SAFETY_DISCONNECT_PROTECTION 22
#define AGAPS_VAL_OUTPUT_STATE_UNDER_VOLTAGE_PROTECTION     23
#define AGAPS_VAL_OUTPUT_STATE_OVER_POWER_FAULT             24
#define AGAPS_VAL_OUTPUT_STATE_INTERNAL_OVER_CURRENT_FAULT  25
#define AGAPS_VAL_OUTPUT_STATE_INTERNAL_OVER_VOLTAGE_FAULT  26
#define AGAPS_VAL_OUTPUT_STATE_DUT_OVER_VOLTAGE_FAULT       27

/*- Defined values for
	attribute AGAPS_ATTR_MEASUREMENT_WINDOW */

#define AGAPS_VAL_WINDOW_TYPE_RECTANGULAR                   0
#define AGAPS_VAL_WINDOW_TYPE_HANNING                       1

/*- Defined values for
	parameter Function in function AgAPS_ConfigurePin */

#define AGAPS_VAL_PIN_FUNCTION_DIGITAL_IO                   0
#define AGAPS_VAL_PIN_FUNCTION_DIGITAL_INPUT                1
#define AGAPS_VAL_PIN_FUNCTION_TRIGGER_OUTPUT               2
#define AGAPS_VAL_PIN_FUNCTION_TRIGGER_INPUT                3
#define AGAPS_VAL_PIN_FUNCTION_FAULT                        4
#define AGAPS_VAL_PIN_FUNCTION_INHIBIT_INPUT                5
#define AGAPS_VAL_PIN_FUNCTION_ON_COUPLE                    6
#define AGAPS_VAL_PIN_FUNCTION_OFF_COUPLE                   7
#define AGAPS_VAL_PIN_FUNCTION_EXPRESSION1                  8
#define AGAPS_VAL_PIN_FUNCTION_EXPRESSION2                  9
#define AGAPS_VAL_PIN_FUNCTION_EXPRESSION3                  10
#define AGAPS_VAL_PIN_FUNCTION_EXPRESSION4                  11
#define AGAPS_VAL_PIN_FUNCTION_EXPRESSION5                  12
#define AGAPS_VAL_PIN_FUNCTION_EXPRESSION6                  13
#define AGAPS_VAL_PIN_FUNCTION_EXPRESSION7                  14
#define AGAPS_VAL_PIN_FUNCTION_EXPRESSION8                  15

/*- Defined values for
	parameter Polarity in function AgAPS_ConfigurePin */

#define AGAPS_VAL_PIN_POLARITY_POSITIVE                     0
#define AGAPS_VAL_PIN_POLARITY_NEGATIVE                     1

/*- Defined values for
	attribute AGAPS_ATTR_SYSTEM_POWER_ON_STATE */

#define AGAPS_VAL_POWER_ON_STATE_RESET                      0
#define AGAPS_VAL_POWER_ON_STATE_RECALL0                    1

/*- Defined values for
	attribute AGAPS_ATTR_OUTPUT_SEQUENCE_OFF_SOURCE
	attribute AGAPS_ATTR_OUTPUT_SEQUENCE_ON_SOURCE
	parameter Expression in function AgAPS_StatusUserDefineSource
	parameter Expression in function AgAPS_StatusUserQuerySource
	parameter OnSource in function AgAPS_OutputSequenceConfigure
	parameter OffSource in function AgAPS_OutputSequenceConfigure
	parameter ExpressionNum in function AgAPS_SignalDefine
	parameter ExpressionNum in function AgAPS_SignalQuery */

#define AGAPS_VAL_SIGNAL_EXPRESSION_NONE                    0
#define AGAPS_VAL_SIGNAL_EXPRESSION1                        1
#define AGAPS_VAL_SIGNAL_EXPRESSION2                        2
#define AGAPS_VAL_SIGNAL_EXPRESSION3                        3
#define AGAPS_VAL_SIGNAL_EXPRESSION4                        4
#define AGAPS_VAL_SIGNAL_EXPRESSION5                        5
#define AGAPS_VAL_SIGNAL_EXPRESSION6                        6
#define AGAPS_VAL_SIGNAL_EXPRESSION7                        7
#define AGAPS_VAL_SIGNAL_EXPRESSION8                        8

/*- Defined values for
	attribute AGAPS_ATTR_TRANSIENT_LIST_PACE_MODE */

#define AGAPS_VAL_LIST_PACE_AUTO                            0
#define AGAPS_VAL_LIST_PACE_ONCE                            1

/*- Defined values for
	attribute AGAPS_ATTR_PROTECTION_CURRENT_START_EVENT
	parameter StartEvent in function AgAPS_ProtectionCurrentConfigure */

#define AGAPS_VAL_CURRENT_PROTECTION_START_EVENT_SETTINGS_CHANGE    0
#define AGAPS_VAL_CURRENT_PROTECTION_START_EVENT_CURRENT_TRANSITION 1

/*- Defined values for
	parameter Type in function AgAPS_TransientListDefineDataPoints */

#define AGAPS_VAL_LIST_POINT_TYPE_CURRENT                   0
#define AGAPS_VAL_LIST_POINT_TYPE_VOLTAGE                   1
#define AGAPS_VAL_LIST_POINT_TYPE_DWELL                     2

/*- Defined values for
	parameter Type in function AgAPS_TransientListDefineTriggerOutput */

#define AGAPS_VAL_TRIGGER_POINT_TYPE_START_OF_STEP          1
#define AGAPS_VAL_TRIGGER_POINT_TYPE_END_OF_STEP            0

/*- Defined values for
	attribute AGAPS_ATTR_OUTPUT_REGULATION_MODE */

#define AGAPS_VAL_REGULATION_MODE_CURRENT_SOURCE            0
#define AGAPS_VAL_REGULATION_MODE_VOLTAGE_SOURCE            1

/*- Defined values for
	attribute AGAPS_ATTR_TRANSIENT_CURRENT_MODE
	attribute AGAPS_ATTR_TRANSIENT_VOLTAGE_MODE */

#define AGAPS_VAL_TRANSIENT_MODE_FIXED                      0
#define AGAPS_VAL_TRANSIENT_MODE_STEP                       1
#define AGAPS_VAL_TRANSIENT_MODE_LIST                       2
#define AGAPS_VAL_TRANSIENT_MODE_ARBITRARY_WAVEFORM         3

/*- Defined values for
	attribute AGAPS_ATTR_PROTECTION_INHIBIT_MODE */

#define AGAPS_VAL_INHIBIT_MODE_OFF                          0
#define AGAPS_VAL_INHIBIT_MODE_LATCHING                     1
#define AGAPS_VAL_INHIBIT_MODE_LIVE                         2

/*- Defined values for
	parameter ComparatorNum in function AgAPS_SignalThresholdConfigure
	parameter ComparatorNum in function AgAPS_SignalThresholdQuery */

#define AGAPS_VAL_THRESHOLD_COMPARATOR1                     1
#define AGAPS_VAL_THRESHOLD_COMPARATOR2                     2
#define AGAPS_VAL_THRESHOLD_COMPARATOR3                     3
#define AGAPS_VAL_THRESHOLD_COMPARATOR4                     4

/*- Defined values for
	attribute AGAPS_ATTR_OUTPUT_RELAY_POLARITY */

#define AGAPS_VAL_OUTPUT_RELAY_POLARITY_NORMAL              0
#define AGAPS_VAL_OUTPUT_RELAY_POLARITY_REVERSE             1

/*- Defined values for
	parameter Function in function AgAPS_SignalThresholdConfigure
	parameter Function in function AgAPS_SignalThresholdQuery */

#define AGAPS_VAL_THRESHOLD_FUNCTION_CURRENT                1
#define AGAPS_VAL_THRESHOLD_FUNCTION_VOLTAGE                2
#define AGAPS_VAL_THRESHOLD_FUNCTION_POWER                  3
#define AGAPS_VAL_THRESHOLD_FUNCTION_AMP_HOUR               4
#define AGAPS_VAL_THRESHOLD_FUNCTION_WATT_HOUR              5

/*- Defined values for
	parameter Operation in function AgAPS_SignalThresholdConfigure
	parameter Operation in function AgAPS_SignalThresholdQuery */

#define AGAPS_VAL_THRESHOLD_OPERATION_GREATER_THAN          1
#define AGAPS_VAL_THRESHOLD_OPERATION_LESS_THAN             2

/*- Defined values for
	attribute AGAPS_ATTR_TRANSIENT_ARB_WAVEFORM_TYPE
	parameter ArbType in function AgAPS_TransientArbWaveformCreate */

#define AGAPS_VAL_ARB_WAVEFORM_TYPE_CURRENT                 0
#define AGAPS_VAL_ARB_WAVEFORM_TYPE_VOLTAGE                 1

/*- Defined values for
	attribute AGAPS_ATTR_TRIGGER_MEASUREMENT_CURRENT_SLOPE
	attribute AGAPS_ATTR_TRIGGER_MEASUREMENT_VOLTAGE_SLOPE */

#define AGAPS_VAL_TRIGGER_SLOPE_POSITIVE                    0
#define AGAPS_VAL_TRIGGER_SLOPE_NEGATIVE                    1

/*- Defined values for
	parameter Reason in function AgAPS_StatusConfigureOperationServiceRequest */

#define AGAPS_VAL_STATUS_SRQ_REASON_OPERATION_CONSTANT_VOLTAGE                1
#define AGAPS_VAL_STATUS_SRQ_REASON_OPERATION_CONSTANT_CURRENT                2
#define AGAPS_VAL_STATUS_SRQ_REASON_OPERATION_OFF                             4
#define AGAPS_VAL_STATUS_SRQ_REASON_OPERATION_WAITING_FOR_MEASUREMENT_TRIGGER 8
#define AGAPS_VAL_STATUS_SRQ_REASON_OPERATION_WAITING_FOR_TRANSIENT_TRIGGER   16
#define AGAPS_VAL_STATUS_SRQ_REASON_OPERATION_MEASUREMENT_ACTIVE              32
#define AGAPS_VAL_STATUS_SRQ_REASON_OPERATION_TRANSIENT_ACTIVE                64
#define AGAPS_VAL_STATUS_SRQ_REASON_OPERATION_USER1                           128
#define AGAPS_VAL_STATUS_SRQ_REASON_OPERATION_USER2                           256

/*- Defined values for
	parameter Reason in function AgAPS_StatusConfigureQuestionableServiceRequest */

#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_OVER_CURRENT                 1
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_OVER_VOLTAGE                 2
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_NEGATIVE_OVER_VOLTAGE        4
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_OVER_TEMPERATURE             8
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_POWER_FAIL                   16
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_POSITIVE_OVER_POWER_LIMIT    32
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_NEGATIVE_OVER_POWER_LIMIT    64
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_POSITIVE_LIMIT               128
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_NEGATIVE_LIMIT               256
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_INHIBIT                      512
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_UNREGULATED                  1024
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_WATCH_DOG_PROTECTION         2048
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_EXCESSIVE_DYNAMIC_PROTECTION 4096
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_USER_PROTECTION              8192
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_SENSE_FAULT                  16384
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_CURRENT_SHARING_FAULT        32768
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_POSITIVE_PEAK_CURRENT        65536
#define AGAPS_VAL_STATUS_SRQ_REASON_QUESTIONABLE_NEGATIVE_PEAK_CURRENT        131072
#define AGAPS_VAL_STATUSSRQ_REASON_QUESTIONABLE_MASTER_SLAVE_PROTECTION       262144
#define AGAPS_VAL_STATUSSRQ_REASON_QUESTIONABLE_SAFETY_DISCONNECT_PROTECTION  524288
#define AGAPS_VAL_STATUSSRQ_REASON_QUESTIONABLE_UNDER_VOLTAGE_PROTECTION      1048576
#define AGAPS_VAL_STATUSSRQ_REASON_QUESTIONABLE_OVER_POWER_FAULT              2097152
#define AGAPS_VAL_STATUSSRQ_REASON_QUESTIONABLE_INTERNAL_OVER_CURRENT_FAULT   4194304
#define AGAPS_VAL_STATUSSRQ_REASON_QUESTIONABLE_INTERNAL_OVER_VOLTAGE_FAULT   8388608
#define AGAPS_VAL_STATUSSRQ_REASON_QUESTIONABLE_DUT_OVER_VOLTAGE_FAULT        16777216

/*- Defined values for
	parameter Bit in function AgAPS_StatusUserDefineSource
	parameter Bit in function AgAPS_StatusUserQuerySource */

#define AGAPS_VAL_USER_DEFINED_STATUS_BIT_USER1             0
#define AGAPS_VAL_USER_DEFINED_STATUS_BIT_USER2             1

/*- Defined values for
	attribute AGAPS_ATTR_TRANSIENT_ARB_WAVEFORM_TERMINATION_BEHAVIOR
	attribute AGAPS_ATTR_TRANSIENT_LIST_TERMINATION_BEHAVIOR */

#define AGAPS_VAL_WAVE_FORM_TERMINATION_BEHAVIOR_START_VALUE 0
#define AGAPS_VAL_WAVE_FORM_TERMINATION_BEHAVIOR_LAST_STEP   1

/*- Defined values for
	attribute AGAPS_ATTR_OUTPUT_VOLTAGE_BANDWIDTH */

#define AGAPS_VAL_VOLTAGE_BANDWIDTH_LOW                     0
#define AGAPS_VAL_VOLTAGE_BANDWIDTH_HIGH1                   1

/*- Defined values for
	parameter MeasurementType in function AgAPS_MeasurementFetchIndexedArray
	parameter MeasurementType in function AgAPS_MeasurementMeasureArray
	parameter MeasurementType in function AgAPS_MeasurementFetchArray */

#define AGAPS_VAL_MEASUREMENT_ARRAY_TYPE_CURRENT            0
#define AGAPS_VAL_MEASUREMENT_ARRAY_TYPE_VOLTAGE            1
#define AGAPS_VAL_MEASUREMENT_ARRAY_TYPE_POWER              2

/*- Defined values for
	parameter MeasurementType in function AgAPS_MeasurementFetchIndexed */

#define AGAPS_VAL_INDEXED_FETCH_TYPE_CURRENT                0
#define AGAPS_VAL_INDEXED_FETCH_TYPE_VOLTAGE                1

/*- Defined values for
	attribute AGAPS_ATTR_TRIGGER_TRANSIENT_SOURCE
	attribute AGAPS_ATTR_TRIGGER_TRANSIENT_ARB_WAVEFORM_SOURCE */

#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_IMMEDIATE        0
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_BUS              1
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_EXTERNAL         2
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_PIN1             3
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_PIN2             4
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_PIN3             5
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_PIN4             6
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_PIN5             7
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_PIN6             8
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_PIN7             9
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_EXPRESSION1      10
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_EXPRESSION2      11
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_EXPRESSION3      12
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_EXPRESSION4      13
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_EXPRESSION5      14
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_EXPRESSION6      15
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_EXPRESSION7      16
#define AGAPS_VAL_TRANSIENT_TRIGGER_SOURCE_EXPRESSION8      17

/*- Defined values for
	attribute AGAPS_ATTR_TRIGGER_MEASUREMENT_SOURCE */

#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_BUS               1
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_EXTERNAL          2
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_PIN1              3
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_PIN2              4
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_PIN3              5
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_PIN4              6
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_PIN5              7
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_PIN6              8
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_PIN7              9
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_EXPRESSION1       10
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_EXPRESSION2       11
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_EXPRESSION3       12
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_EXPRESSION4       13
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_EXPRESSION5       14
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_EXPRESSION6       15
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_EXPRESSION7       16
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_EXPRESSION8       17
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_CURRENT_LEVEL     18
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_VOLTAGE_LEVEL     19
#define AGAPS_VAL_MEASUREMENT_TRIGGER_SOURCE_TRANSIENT_TRIGGER 20

/*- Defined values for
	parameter ListType in function AgAPS_TransientListQueryListLength */

#define AGAPS_VAL_LIST_POINTS_QUERY_TYPE_CURRENT_ARRAY               0
#define AGAPS_VAL_LIST_POINTS_QUERY_TYPE_VOLTAGE_ARRAY               1
#define AGAPS_VAL_LIST_POINTS_QUERY_TYPE_DWELL_ARRAY                 2
#define AGAPS_VAL_LIST_POINTS_QUERY_TYPE_START_OF_STEP_TRIGGER_ARRAY 3
#define AGAPS_VAL_LIST_POINTS_QUERY_TYPE_END_OF_STEP_TRIGGER_ARRAY   4

/*- Defined values for
	parameter Pin in function AgAPS_ConfigurePin */

#define AGAPS_VAL_DIGITAL_PIN1                              1
#define AGAPS_VAL_DIGITAL_PIN2                              2
#define AGAPS_VAL_DIGITAL_PIN3                              3
#define AGAPS_VAL_DIGITAL_PIN4                              4
#define AGAPS_VAL_DIGITAL_PIN5                              5
#define AGAPS_VAL_DIGITAL_PIN6                              6
#define AGAPS_VAL_DIGITAL_PIN7                              7

/*- Defined values for
	parameter MeasurementType in function AgAPS_MeasurementMeasure */

#define AGAPS_VAL_MEASUREMENT_TYPE_CURRENT                  0
#define AGAPS_VAL_MEASUREMENT_TYPE_VOLTAGE                  1
#define AGAPS_VAL_MEASUREMENT_TYPE_POWER                    2
#define AGAPS_VAL_MEASUREMENT_TYPE_CURRENT_ACDC             3
#define AGAPS_VAL_MEASUREMENT_TYPE_VOLTAGE_ACDC             4
#define AGAPS_VAL_MEASUREMENT_TYPE_CURRENT_HIGH             5
#define AGAPS_VAL_MEASUREMENT_TYPE_VOLTAGE_HIGH             6
#define AGAPS_VAL_MEASUREMENT_TYPE_CURRENT_LOW              7
#define AGAPS_VAL_MEASUREMENT_TYPE_VOLTAGE_LOW              8
#define AGAPS_VAL_MEASUREMENT_TYPE_CURRENT_MIN              9
#define AGAPS_VAL_MEASUREMENT_TYPE_VOLTAGE_MIN              10
#define AGAPS_VAL_MEASUREMENT_TYPE_CURRENT_MAX              11
#define AGAPS_VAL_MEASUREMENT_TYPE_VOLTAGE_MAX              12

/*- Defined values for
	parameter MeasurementType in function AgAPS_MeasurementFetch */

#define AGAPS_VAL_FETCH_TYPE_CURRENT                        0
#define AGAPS_VAL_FETCH_TYPE_VOLTAGE                        1
#define AGAPS_VAL_FETCH_TYPE_POWER                          2
#define AGAPS_VAL_FETCH_TYPE_CURRENT_ACDC                   3
#define AGAPS_VAL_FETCH_TYPE_VOLTAGE_ACDC                   4
#define AGAPS_VAL_FETCH_TYPE_CURRENT_HIGH                   5
#define AGAPS_VAL_FETCH_TYPE_VOLTAGE_HIGH                   6
#define AGAPS_VAL_FETCH_TYPE_CURRENT_LOW                    7
#define AGAPS_VAL_FETCH_TYPE_VOLTAGE_LOW                    8
#define AGAPS_VAL_FETCH_TYPE_CURRENT_MIN                    9
#define AGAPS_VAL_FETCH_TYPE_VOLTAGE_MIN                    10
#define AGAPS_VAL_FETCH_TYPE_CURRENT_MAX                    11
#define AGAPS_VAL_FETCH_TYPE_VOLTAGE_MAX                    12
#define AGAPS_VAL_FETCH_TYPE_AMP_HOUR                       13
#define AGAPS_VAL_FETCH_TYPE_WATT_HOUR                      14
#define AGAPS_VAL_FETCH_TYPE_AMP_HOUR_WITH_OVERRANGE        15
#define AGAPS_VAL_FETCH_TYPE_WATT_HOUR_WITH_OVERRANGE       16
#define AGAPS_VAL_FETCH_TYPE_AMBIENT_TEMPERATURE            17

/*- Defined values for
	attribute AGAPS_ATTR_MASTER_SLAVE_FUNCTION */

#define AGAPS_VAL_MASTER_SLAVE_FUNCTION_MASTER              0
#define AGAPS_VAL_MASTER_SLAVE_FUNCTION_SLAVE               1
#define AGAPS_VAL_MASTER_SLAVE_FUNCTION_NONE                2

/*- Defined values for
	attribute AGAPS_ATTR_MASTER_SLAVE_CONNECT_MODE */

#define AGAPS_VAL_MASTER_SLAVE_CONNECT_MODE_AUTO            0
#define AGAPS_VAL_MASTER_SLAVE_CONNECT_MODE_MANUAL          1

/*- Defined values for
	attribute AGAPS_ATTR_SAFETY_DISCONNECT_SYSTEM_CONNECTION_MODE */

#define AGAPS_VAL_SYSTEMSDS_CONNECTION_MODE_AUTO            0
#define AGAPS_VAL_SYSTEMSDS_CONNECTION_MODE_MANUAL          1

/*- Defined values for
	attribute AGAPS_ATTR_SHAPE
	parameter Shape in function AgAPS_Configure */

#define AGAPS_VAL_SAS_CURVE_SHAPE_SPACE                     0
#define AGAPS_VAL_SAS_CURVE_SHAPE_TERRESTRIAL               1

/*- Defined values for
	attribute AGAPS_ATTR_MODE */

#define AGAPS_VAL_SAS_MODE_FIXED                            0
#define AGAPS_VAL_SAS_MODE_CURVE                            1
#define AGAPS_VAL_SAS_MODE_TABLE                            2

/*- Defined values for
	attribute AGAPS_ATTR_BANDWIDTH_RANGE */

#define AGAPS_VAL_SAS_BANDWIDTH_RANGE0                      0
#define AGAPS_VAL_SAS_BANDWIDTH_RANGE1                      1

/*- Defined values for
	attribute AGAPS_ATTR_METER_VIEW */

#define AGAPS_VAL_DISPLAY_METER_VIEW_METER_VI               0
#define AGAPS_VAL_DISPLAY_METER_VIEW_METER_VP               1
#define AGAPS_VAL_DISPLAY_METER_VIEW_METER_VIP              2

/*- Defined values for
	attribute AGAPS_ATTR_BANDWIDTH_RANGE2 */

#define AGAPS_VAL_VOLTAGE_BANDWIDTH_RANGE0                  0
#define AGAPS_VAL_VOLTAGE_BANDWIDTH_RANGE1                  1
#define AGAPS_VAL_VOLTAGE_BANDWIDTH_RANGE2                  2

/*- Defined values for
	parameter Type in function AgAPS_QueryActiveMaxPowerPoint */

#define AGAPS_VAL_MAX_POWER_POINT_CURRENT                   0
#define AGAPS_VAL_MAX_POWER_POINT_VOLTAGE                   1
#define AGAPS_VAL_MAX_POWER_POINT_POWER                     2


/****************************************************************************
 *---------------- Instrument Driver Function Declarations -----------------*
 ****************************************************************************/

/*- AgAPS */

ViStatus _VI_FUNC AgAPS_init(ViRsrc ResourceName, ViBoolean IdQuery, ViBoolean Reset, ViSession* Vi);
ViStatus _VI_FUNC AgAPS_close(ViSession Vi);
ViStatus _VI_FUNC AgAPS_InitWithOptions(ViRsrc ResourceName, ViBoolean IdQuery, ViBoolean Reset, ViConstString OptionsString, ViSession* Vi);
ViStatus _VI_FUNC AgAPS_GetChannelName(ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- Utility */

ViStatus _VI_FUNC AgAPS_revision_query(ViSession Vi, ViChar DriverRev[], ViChar InstrRev[]);
ViStatus _VI_FUNC AgAPS_error_message(ViSession Vi, ViStatus ErrorCode, ViChar ErrorMessage[]);
ViStatus _VI_FUNC AgAPS_GetError(ViSession Vi, ViStatus* ErrorCode, ViInt32 ErrorDescriptionBufferSize, ViChar ErrorDescription[]);
ViStatus _VI_FUNC AgAPS_ClearError(ViSession Vi);
ViStatus _VI_FUNC AgAPS_ClearInterchangeWarnings(ViSession Vi);
ViStatus _VI_FUNC AgAPS_GetNextCoercionRecord(ViSession Vi, ViInt32 CoercionRecordBufferSize, ViChar CoercionRecord[]);
ViStatus _VI_FUNC AgAPS_GetNextInterchangeWarning(ViSession Vi, ViInt32 InterchangeWarningBufferSize, ViChar InterchangeWarning[]);
ViStatus _VI_FUNC AgAPS_InvalidateAllAttributes(ViSession Vi);
ViStatus _VI_FUNC AgAPS_ResetInterchangeCheck(ViSession Vi);
ViStatus _VI_FUNC AgAPS_Disable(ViSession Vi);
ViStatus _VI_FUNC AgAPS_error_query(ViSession Vi, ViInt32* ErrorCode, ViChar ErrorMessage[]);
ViStatus _VI_FUNC AgAPS_LockSession(ViSession Vi, ViBoolean* CallerHasLock);
ViStatus _VI_FUNC AgAPS_reset(ViSession Vi);
ViStatus _VI_FUNC AgAPS_ResetWithDefaults(ViSession Vi);
ViStatus _VI_FUNC AgAPS_self_test(ViSession Vi, ViInt16* TestResult, ViChar TestMessage[]);
ViStatus _VI_FUNC AgAPS_UnlockSession(ViSession Vi, ViBoolean* CallerHasLock);

/*- Attribute Accessors */

ViStatus _VI_FUNC AgAPS_GetAttributeViInt32(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt32* AttributeValue);
ViStatus _VI_FUNC AgAPS_GetAttributeViReal64(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViReal64* AttributeValue);
ViStatus _VI_FUNC AgAPS_GetAttributeViBoolean(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViBoolean* AttributeValue);
ViStatus _VI_FUNC AgAPS_GetAttributeViSession(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViSession* AttributeValue);
ViStatus _VI_FUNC AgAPS_GetAttributeViString(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt32 AttributeValueBufferSize, ViChar AttributeValue[]);
ViStatus _VI_FUNC AgAPS_SetAttributeViInt32(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt32 AttributeValue);
ViStatus _VI_FUNC AgAPS_SetAttributeViReal64(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViReal64 AttributeValue);
ViStatus _VI_FUNC AgAPS_SetAttributeViBoolean(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViBoolean AttributeValue);
ViStatus _VI_FUNC AgAPS_SetAttributeViSession(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViSession AttributeValue);
ViStatus _VI_FUNC AgAPS_SetAttributeViString(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViConstString AttributeValue);

/*- System */

ViStatus _VI_FUNC AgAPS_SystemClearIO(ViSession Vi);
ViStatus _VI_FUNC AgAPS_SystemDisableLocalControls(ViSession Vi);
ViStatus _VI_FUNC AgAPS_SystemEnableLocalControls(ViSession Vi);
ViStatus _VI_FUNC AgAPS_SystemReadString(ViSession Vi, ViInt32 ValBufferSize, ViChar Val[]);
ViStatus _VI_FUNC AgAPS_SystemRecallState(ViSession Vi, ViInt32 Identifier);
ViStatus _VI_FUNC AgAPS_SystemSaveState(ViSession Vi, ViInt32 Identifier);
ViStatus _VI_FUNC AgAPS_SystemWaitForOperationComplete(ViSession Vi, ViInt32 MaxTimeMilliseconds);
ViStatus _VI_FUNC AgAPS_SystemWriteString(ViSession Vi, ViInt32 DataBufferSize, ViConstString Data);
ViStatus _VI_FUNC AgAPS_viRead(ViSession Vi, ViInt64 BufferSize, ViByte Buffer[], ViInt64* ReturnCount);
ViStatus _VI_FUNC AgAPS_viWrite(ViSession Vi, ViInt64 Count, ViByte Buffer[], ViInt64* ReturnCount);
ViStatus _VI_FUNC AgAPS_SystemExportInstrumentState(ViSession Vi, ViInt32 ValBufferSize, ViByte Val[], ViInt32* ValActualSize);
ViStatus _VI_FUNC AgAPS_SystemImportInstrumentState(ViSession Vi, ViInt32 StateBufferSize, ViByte State[]);

/*- SafetyDisconnectSystem */

ViStatus _VI_FUNC AgAPS_SafetyDisconnectSystemConnect(ViSession Vi);
ViStatus _VI_FUNC AgAPS_SafetyDisconnectSystemQueryInputState(ViSession Vi, ViInt32* Val);
ViStatus _VI_FUNC AgAPS_SafetyDisconnectSystemQueryProtectionStatus(ViSession Vi, ViInt32* Val);

/*- Status */

ViStatus _VI_FUNC AgAPS_StatusPreset(ViSession Vi);
ViStatus _VI_FUNC AgAPS_StatusConfigureServiceRequest(ViSession Vi, ViInt32 Reason);
ViStatus _VI_FUNC AgAPS_StatusClear(ViSession Vi);
ViStatus _VI_FUNC AgAPS_StatusGetRegister(ViSession Vi, ViInt32 Register, ViInt32 SubRegister, ViInt32* RetVal);
ViStatus _VI_FUNC AgAPS_StatusSetRegister(ViSession Vi, ViInt32 Register, ViInt32 SubRegister, ViInt32 Val);
ViStatus _VI_FUNC AgAPS_StatusConfigureOperationServiceRequest(ViSession Vi, ViInt32 Reason);
ViStatus _VI_FUNC AgAPS_StatusConfigureQuestionableServiceRequest(ViSession Vi, ViInt32 Reason);

/*- User */

ViStatus _VI_FUNC AgAPS_StatusUserDefineSource(ViSession Vi, ViInt32 Bit, ViInt32 Expression);
ViStatus _VI_FUNC AgAPS_StatusUserQuerySource(ViSession Vi, ViInt32 Bit, ViInt32* Expression);

/*- Output */

ViStatus _VI_FUNC AgAPS_OutputQueryState(ViSession Vi, ViInt32 OutputState, ViBoolean* InState);

/*- Sequence */

ViStatus _VI_FUNC AgAPS_OutputSequenceConfigure(ViSession Vi, ViBoolean Enabled, ViReal64 DelayOffset, ViInt32 OnSource, ViReal64 OnDelay, ViInt32 OffSource, ViReal64 OffDelay);

/*- SAS */

ViStatus _VI_FUNC AgAPS_QueryActiveMaxPowerPoint(ViSession Vi, ViInt32 Type, ViReal64* Val);
ViStatus _VI_FUNC AgAPS_QueryMaxScaleFactorCurrent(ViSession Vi, ViReal64* Val);
ViStatus _VI_FUNC AgAPS_QueryMaxScaleFactorVoltage(ViSession Vi, ViReal64* Val);

/*- Curve */

ViStatus _VI_FUNC AgAPS_Configure(ViSession Vi, ViReal64 IMP, ViReal64 ISC, ViReal64 VMP, ViReal64 VOC, ViInt32 Shape);

/*- Current */

ViStatus _VI_FUNC AgAPS_QueryMaxISC(ViSession Vi, ViReal64* Val);
ViStatus _VI_FUNC AgAPS_QueryMaxIMP(ViSession Vi, ViReal64* Val);

/*- Voltage */

ViStatus _VI_FUNC AgAPS_QueryMaxVMP(ViSession Vi, ViReal64* Val);
ViStatus _VI_FUNC AgAPS_QueryMaxVOC(ViSession Vi, ViReal64* Val);

/*- Table */

ViStatus _VI_FUNC AgAPS_Activate(ViSession Vi, ViInt32 Table);
ViStatus _VI_FUNC AgAPS_Update(ViSession Vi, ViInt32 Table);

/*- Current */

ViStatus _VI_FUNC AgAPS_QueryTableLength(ViSession Vi, ViInt32 TableNumber, ViInt32* Val);
ViStatus _VI_FUNC AgAPS_QueryTablePoints2(ViSession Vi, ViInt32 TableNumber, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize);
ViStatus _VI_FUNC AgAPS_DefineTablePoints(ViSession Vi, ViInt32 TableNumber, ViInt32 CurrentBufferSize, ViReal64 Current[]);

/*- Voltage */

ViStatus _VI_FUNC AgAPS_TablePoints3(ViSession Vi, ViInt32 TableNumber, ViInt32 VoltageBufferSize, ViReal64 Voltage[]);
ViStatus _VI_FUNC AgAPS_QueryTableLength3(ViSession Vi, ViInt32 TableNumber, ViInt32* Val);
ViStatus _VI_FUNC AgAPS_QueryTablePoints(ViSession Vi, ViInt32 TableNumber, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize);

/*- Measurement */

ViStatus _VI_FUNC AgAPS_MeasurementFetchIndexed(ViSession Vi, ViInt32 MeasurementType, ViInt32 StartIndex, ViInt32 NumOfPoints, ViInt32 MaxTimeMilliseconds, ViReal64* Val);
ViStatus _VI_FUNC AgAPS_MeasurementFetchIndexedArray(ViSession Vi, ViInt32 MeasurementType, ViInt32 StartIndex, ViInt32 NumOfPoints, ViInt32 MaxTimeMilliseconds, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize);
ViStatus _VI_FUNC AgAPS_MeasurementMeasureArray(ViSession Vi, ViInt32 MeasurementType, ViInt32 MaxTimeMilliseconds, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize);
ViStatus _VI_FUNC AgAPS_MeasurementFetchArray(ViSession Vi, ViInt32 MeasurementType, ViInt32 MaxTimeMilliseconds, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize);
ViStatus _VI_FUNC AgAPS_MeasurementResetAmpHour(ViSession Vi);
ViStatus _VI_FUNC AgAPS_MeasurementResetWattHour(ViSession Vi);
ViStatus _VI_FUNC AgAPS_MeasurementMeasure(ViSession Vi, ViInt32 MeasurementType, ViInt32 MaxTimeMilliseconds, ViReal64* Val);
ViStatus _VI_FUNC AgAPS_MeasurementFetch(ViSession Vi, ViInt32 MeasurementType, ViInt32 MaxTimeMilliseconds, ViReal64* Val);

/*- Sweep */

ViStatus _VI_FUNC AgAPS_MeasurementSweepConfigure(ViSession Vi, ViReal64 Interval, ViInt32 Points, ViInt32 OffsetPoints);

/*- Protection */

ViStatus _VI_FUNC AgAPS_ProtectionReset(ViSession Vi);

/*- OverCurrent */

ViStatus _VI_FUNC AgAPS_ProtectionCurrentConfigure(ViSession Vi, ViInt32 LimitBehavior, ViInt32 StartEvent, ViReal64 Delay);

/*- ArbWaveForm */

ViStatus _VI_FUNC AgAPS_TransientArbWaveformCreate(ViSession Vi, ViInt32 ArbType, ViInt32 PointsBufferSize, ViReal64 Points[], ViReal64 Dwell);
ViStatus _VI_FUNC AgAPS_TransientArbDefineRepeatCount(ViSession Vi, ViBoolean ContinuousEnabled, ViInt32 Count);
ViStatus _VI_FUNC AgAPS_TransientArbQueryRepeatCount(ViSession Vi, ViReal64* Val);

/*- List */

ViStatus _VI_FUNC AgAPS_TransientListDefineDataPoints(ViSession Vi, ViInt32 Type, ViInt32 PointsBufferSize, ViReal64 Points[]);
ViStatus _VI_FUNC AgAPS_TransientListDefineTriggerOutput(ViSession Vi, ViInt32 Type, ViInt32 PointsBufferSize, ViBoolean Points[]);
ViStatus _VI_FUNC AgAPS_TransientListQueryListLength(ViSession Vi, ViInt32 ListType, ViInt32* Val);
ViStatus _VI_FUNC AgAPS_TransientListDefineRepeatCount(ViSession Vi, ViBoolean ContinuousEnabled, ViInt32 Count);
ViStatus _VI_FUNC AgAPS_TransientListQueryRepeatCount(ViSession Vi, ViReal64* Val);

/*- Measurement */

ViStatus _VI_FUNC AgAPS_TriggerMeasurementAbort(ViSession Vi);
ViStatus _VI_FUNC AgAPS_TriggerMeasurementImmediate(ViSession Vi);
ViStatus _VI_FUNC AgAPS_TriggerMeasurementInitiate(ViSession Vi);

/*- Transient */

ViStatus _VI_FUNC AgAPS_TriggerTransientAbort(ViSession Vi);
ViStatus _VI_FUNC AgAPS_TriggerTransientImmediate(ViSession Vi);
ViStatus _VI_FUNC AgAPS_TriggerTransientInitiate(ViSession Vi);

/*- DigitalPort */

ViStatus _VI_FUNC AgAPS_DigitalPortWriteData(ViSession Vi, ViInt32 Data);
ViStatus _VI_FUNC AgAPS_DigitalPortReadData(ViSession Vi, ViInt32* Val);
ViStatus _VI_FUNC AgAPS_ConfigurePin(ViSession Vi, ViInt32 Pin, ViInt32 Function, ViInt32 Polarity);

/*- Signal */

ViStatus _VI_FUNC AgAPS_SignalDefine(ViSession Vi, ViInt32 ExpressionNum, ViInt32 ExpressionStringBufferSize, ViConstString ExpressionString);
ViStatus _VI_FUNC AgAPS_SignalQuery(ViSession Vi, ViInt32 ExpressionNum, ViInt32 ExpressionStringBufferSize, ViChar ExpressionString[]);

/*- Threshold */

ViStatus _VI_FUNC AgAPS_SignalThresholdConfigure(ViSession Vi, ViInt32 ComparatorNum, ViInt32 Function, ViInt32 Operation, ViReal64 Level);
ViStatus _VI_FUNC AgAPS_SignalThresholdQuery(ViSession Vi, ViInt32 ComparatorNum, ViInt32* Function, ViInt32* Operation, ViReal64* Level);

/*- MasterSlave */

ViStatus _VI_FUNC AgAPS_MasterSlaveDiscoverSlaveUnits(ViSession Vi);
ViStatus _VI_FUNC AgAPS_MasterSlaveResetSlaveConfiguration(ViSession Vi);
ViStatus _VI_FUNC AgAPS_MasterSlaveSetSlaveBusAddress(ViSession Vi, ViInt32 BusAddress);

/*- Configuration */

ViStatus _VI_FUNC AgAPS_ConfigureOutputEnabled(ViSession Vi, ViConstString ChannelName, ViBoolean Enabled);
ViStatus _VI_FUNC AgAPS_ConfigureVoltageLevel(ViSession Vi, ViConstString ChannelName, ViReal64 Level);
ViStatus _VI_FUNC AgAPS_ConfigureCurrentLimit(ViSession Vi, ViConstString ChannelName, ViInt32 Behavior, ViReal64 Limit);
ViStatus _VI_FUNC AgAPS_ConfigureOVP(ViSession Vi, ViConstString ChannelName, ViBoolean Enabled, ViReal64 Limit);
ViStatus _VI_FUNC AgAPS_ConfigureOutputRange(ViSession Vi, ViConstString ChannelName, ViInt32 RangeType, ViReal64 Range);
ViStatus _VI_FUNC AgAPS_QueryMaxCurrentLimit(ViSession Vi, ViConstString ChannelName, ViReal64 VoltageLevel, ViReal64* MaxCurrentLimit);
ViStatus _VI_FUNC AgAPS_QueryMaxVoltageLevel(ViSession Vi, ViConstString ChannelName, ViReal64 CurrentLimit, ViReal64* MaxVoltageLevel);

/*- Action */

ViStatus _VI_FUNC AgAPS_Measure(ViSession Vi, ViConstString ChannelName, ViInt32 MeasurementType, ViReal64* Measurement);
ViStatus _VI_FUNC AgAPS_QueryOutputState(ViSession Vi, ViConstString ChannelName, ViInt32 OutputState, ViBoolean* InState);
ViStatus _VI_FUNC AgAPS_ResetOutputProtection(ViSession Vi, ViConstString ChannelName);
ViStatus _VI_FUNC AgAPS_Abort(ViSession Vi);
ViStatus _VI_FUNC AgAPS_Initiate(ViSession Vi);
ViStatus _VI_FUNC AgAPS_SendSoftwareTrigger(ViSession Vi);

/*- Triggering */

ViStatus _VI_FUNC AgAPS_ConfigureTriggeredCurrentLimit(ViSession Vi, ViConstString ChannelName, ViReal64 Limit);
ViStatus _VI_FUNC AgAPS_ConfigureTriggeredVoltageLevel(ViSession Vi, ViConstString ChannelName, ViReal64 Level);
ViStatus _VI_FUNC AgAPS_ConfigureTriggerSource(ViSession Vi, ViConstString ChannelName, ViInt32 Source);


/****************************************************************************
 *----------------- Instrument Error And Completion Codes ------------------*
 ****************************************************************************/
#ifndef _IVIC_ERROR_BASE_DEFINES_
#define _IVIC_ERROR_BASE_DEFINES_

#define IVIC_WARN_BASE                           (0x3FFA0000L)
#define IVIC_CROSS_CLASS_WARN_BASE               (IVIC_WARN_BASE + 0x1000)
#define IVIC_CLASS_WARN_BASE                     (IVIC_WARN_BASE + 0x2000)
#define IVIC_SPECIFIC_WARN_BASE                  (IVIC_WARN_BASE + 0x4000)

#define IVIC_ERROR_BASE                          (0xBFFA0000L)
#define IVIC_CROSS_CLASS_ERROR_BASE              (IVIC_ERROR_BASE + 0x1000)
#define IVIC_CLASS_ERROR_BASE                    (IVIC_ERROR_BASE + 0x2000)
#define IVIC_SPECIFIC_ERROR_BASE                 (IVIC_ERROR_BASE + 0x4000)
#define IVIC_LXISYNC_ERROR_BASE                  (IVIC_ERROR_BASE + 0x2000)

#endif


#define AGAPS_ERROR_CANNOT_RECOVER                          (IVIC_ERROR_BASE + 0x0000)
#define AGAPS_ERROR_INSTRUMENT_STATUS                       (IVIC_ERROR_BASE + 0x0001)
#define AGAPS_ERROR_CANNOT_OPEN_FILE                        (IVIC_ERROR_BASE + 0x0002)
#define AGAPS_ERROR_READING_FILE                            (IVIC_ERROR_BASE + 0x0003)
#define AGAPS_ERROR_WRITING_FILE                            (IVIC_ERROR_BASE + 0x0004)
#define AGAPS_ERROR_INVALID_PATHNAME                        (IVIC_ERROR_BASE + 0x000B)
#define AGAPS_ERROR_INVALID_VALUE                           (IVIC_ERROR_BASE + 0x0010)
#define AGAPS_ERROR_FUNCTION_NOT_SUPPORTED                  (IVIC_ERROR_BASE + 0x0011)
#define AGAPS_ERROR_ATTRIBUTE_NOT_SUPPORTED                 (IVIC_ERROR_BASE + 0x0012)
#define AGAPS_ERROR_VALUE_NOT_SUPPORTED                     (IVIC_ERROR_BASE + 0x0013)
#define AGAPS_ERROR_NOT_INITIALIZED                         (IVIC_ERROR_BASE + 0x001D)
#define AGAPS_ERROR_UNKNOWN_CHANNEL_NAME                    (IVIC_ERROR_BASE + 0x0020)
#define AGAPS_ERROR_TOO_MANY_OPEN_FILES                     (IVIC_ERROR_BASE + 0x0023)
#define AGAPS_ERROR_CHANNEL_NAME_REQUIRED                   (IVIC_ERROR_BASE + 0x0044)
#define AGAPS_ERROR_MISSING_OPTION_NAME                     (IVIC_ERROR_BASE + 0x0049)
#define AGAPS_ERROR_MISSING_OPTION_VALUE                    (IVIC_ERROR_BASE + 0x004A)
#define AGAPS_ERROR_BAD_OPTION_NAME                         (IVIC_ERROR_BASE + 0x004B)
#define AGAPS_ERROR_BAD_OPTION_VALUE                        (IVIC_ERROR_BASE + 0x004C)
#define AGAPS_ERROR_OUT_OF_MEMORY                           (IVIC_ERROR_BASE + 0x0056)
#define AGAPS_ERROR_OPERATION_PENDING                       (IVIC_ERROR_BASE + 0x0057)
#define AGAPS_ERROR_NULL_POINTER                            (IVIC_ERROR_BASE + 0x0058)
#define AGAPS_ERROR_UNEXPECTED_RESPONSE                     (IVIC_ERROR_BASE + 0x0059)
#define AGAPS_ERROR_FILE_NOT_FOUND                          (IVIC_ERROR_BASE + 0x005B)
#define AGAPS_ERROR_INVALID_FILE_FORMAT                     (IVIC_ERROR_BASE + 0x005C)
#define AGAPS_ERROR_STATUS_NOT_AVAILABLE                    (IVIC_ERROR_BASE + 0x005D)
#define AGAPS_ERROR_ID_QUERY_FAILED                         (IVIC_ERROR_BASE + 0x005E)
#define AGAPS_ERROR_RESET_FAILED                            (IVIC_ERROR_BASE + 0x005F)
#define AGAPS_ERROR_RESOURCE_UNKNOWN                        (IVIC_ERROR_BASE + 0x0060)
#define AGAPS_ERROR_ALREADY_INITIALIZED                     (IVIC_ERROR_BASE + 0x0061)
#define AGAPS_ERROR_CANNOT_CHANGE_SIMULATION_STATE          (IVIC_ERROR_BASE + 0x0062)
#define AGAPS_ERROR_INVALID_NUMBER_OF_LEVELS_IN_SELECTOR    (IVIC_ERROR_BASE + 0x0063)
#define AGAPS_ERROR_INVALID_RANGE_IN_SELECTOR               (IVIC_ERROR_BASE + 0x0064)
#define AGAPS_ERROR_UNKOWN_NAME_IN_SELECTOR                 (IVIC_ERROR_BASE + 0x0065)
#define AGAPS_ERROR_BADLY_FORMED_SELECTOR                   (IVIC_ERROR_BASE + 0x0066)
#define AGAPS_ERROR_UNKNOWN_PHYSICAL_IDENTIFIER             (IVIC_ERROR_BASE + 0x0067)
#define AGAPS_ERROR_INVALID_ATTRIBUTE                       (IVIC_ERROR_BASE + 0x000C)
#define AGAPS_ERROR_TYPES_DO_NOT_MATCH                      (IVIC_ERROR_BASE + 0x0015)
#define AGAPS_ERROR_IVI_ATTR_NOT_WRITABLE                   (IVIC_ERROR_BASE + 0x000D)
#define AGAPS_ERROR_IVI_ATTR_NOT_READABLE                   (IVIC_ERROR_BASE + 0x000E)
#define AGAPS_ERROR_INVALID_SESSION_HANDLE                  (IVIC_ERROR_BASE + 0x1190)



#define AGAPS_SUCCESS                                       0
#define AGAPS_WARN_NSUP_ID_QUERY                            (IVIC_WARN_BASE + 0x0065)
#define AGAPS_WARN_NSUP_RESET                               (IVIC_WARN_BASE + 0x0066)
#define AGAPS_WARN_NSUP_SELF_TEST                           (IVIC_WARN_BASE + 0x0067)
#define AGAPS_WARN_NSUP_ERROR_QUERY                         (IVIC_WARN_BASE + 0x0068)
#define AGAPS_WARN_NSUP_REV_QUERY                           (IVIC_WARN_BASE + 0x0069)



#define AGAPS_ERROR_IO_GENERAL                              (IVIC_SPECIFIC_ERROR_BASE + 0x0214)
#define AGAPS_ERROR_IO_TIMEOUT                              (IVIC_SPECIFIC_ERROR_BASE + 0x0215)
#define AGAPS_ERROR_MODEL_NOT_SUPPORTED                     (IVIC_SPECIFIC_ERROR_BASE + 0x0216)
#define AGAPS_ERROR_PERSONALITY_NOT_ACTIVE                  (IVIC_SPECIFIC_ERROR_BASE + 0x0211)
#define AGAPS_ERROR_PERSONALITY_NOT_LICENSED                (IVIC_SPECIFIC_ERROR_BASE + 0x0213)
#define AGAPS_ERROR_PERSONALITY_NOT_INSTALLED               (IVIC_SPECIFIC_ERROR_BASE + 0x0212)
#define AGAPS_ERROR_TRIGGER_NOT_SOFTWARE                    (IVIC_CROSS_CLASS_ERROR_BASE + 0x0001)




/****************************************************************************
 *---------------------------- End Include File ----------------------------*
 ****************************************************************************/
#if defined(__cplusplus) || defined(__cplusplus__)
}
#endif
#endif // __AGAPS_HEADER
