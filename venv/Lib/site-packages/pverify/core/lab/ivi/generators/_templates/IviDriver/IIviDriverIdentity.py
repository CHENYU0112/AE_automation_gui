from .{drivername} import *


class IIviDriverIdentity:
    def __init__(self, root):
        self.root = root
        """:type : pverify.drivers.{group}.{drivername}.I{iviclass}.I{iviclass}"""

    @property
    def Description(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_ENGINE_PUBLIC_ATTR_BASE + 514, 1024)

    @property
    def Revision(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_ENGINE_PUBLIC_ATTR_BASE + 551, 1024)

    @property
    def Vendor(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_ENGINE_PUBLIC_ATTR_BASE + 513, 1024)

    @property
    def InstrumentManufacturer(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_ENGINE_PUBLIC_ATTR_BASE + 511, 1024)

    @property
    def InstrumentModel(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_ENGINE_PUBLIC_ATTR_BASE + 512, 1024)

    @property
    def InstrumentFirmwareRevision(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_ENGINE_PUBLIC_ATTR_BASE + 510, 1024)

    @property
    def Identifier(self):
        return "%s, %s, n.a., %s" % (self.Vendor, self.InstrumentModel, self.InstrumentFirmwareRevision)

    @property
    def SupportedInstrumentModels(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_ENGINE_PUBLIC_ATTR_BASE + 327, 1024)

    @property
    def SpecificationMajorVersion(self):
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_ENGINE_PUBLIC_ATTR_BASE + 515)

    @property
    def SpecificationMinorVersion(self):
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_ENGINE_PUBLIC_ATTR_BASE + 516)

    @property
    def GroupCapabilities(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_ENGINE_PUBLIC_ATTR_BASE + 401, 1024)
