from .{drivername} import *


class IIviCounterChannel:
    def __init__(self, root, channel=""):
        self.root = root
        """:type : pverify.drivers.{group}.{drivername}.I{iviclass}.I{iviclass}"""
        self.channel = str(channel)

    @property
    def Impedance(self):
        return self.root.dllwrap.GetAttributeViReal64(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 4)

    @Impedance.setter
    def Impedance(self, value):
        """
        Specifies the input impedance of the channel in Ohms.
        """
        self.root.dllwrap.SetAttributeViReal64(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 4, value)

    @property
    def Coupling(self):
        return self.root.dllwrap.GetAttributeViInt32(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 5)

    @Coupling.setter
    def Coupling(self, value):
        """
        Specifies the electrical coupling method used on the input channel.
        """
        self.root.dllwrap.SetAttributeViInt32(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 5, value)

    @property
    def Attenuation(self):
        return self.root.dllwrap.GetAttributeViReal64(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 6)

    @Attenuation.setter
    def Attenuation(self, value):
        """
        Specifies the scale factor by which the channel attenuates the input. Increasing
        this value decreases the sensitivity. For instance, setting this value to 10
        attenuates the input by a factor of 10.
        """
        self.root.dllwrap.SetAttributeViReal64(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 6, value)

    @property
    def Level(self):
        return self.root.dllwrap.GetAttributeViReal64(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 7)

    @Level.setter
    def Level(self, value):
        """
        Specifies the voltage level the input signal must pass through to produce a
        count.
        """
        self.root.dllwrap.SetAttributeViReal64(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 7, value)

    @property
    def Hysteresis(self):
        return self.root.dllwrap.GetAttributeViReal64(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 8)

    @Hysteresis.setter
    def Hysteresis(self, value):
        """
        Specifies the Hysteresis value in volts.
        """
        self.root.dllwrap.SetAttributeViReal64(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 8, value)

    @property
    def FilterEnabled(self):
        return self.root.dllwrap.GetAttributeViBoolean(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 10)

    @FilterEnabled.setter
    def FilterEnabled(self, value):
        """
        Specifies if the filter on the selected channel is enabled.
        """
        self.root.dllwrap.SetAttributeViBoolean(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 10, value)

    @property
    def Slope(self):
        return self.root.dllwrap.GetAttributeViInt32(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 9)

    @Slope.setter
    def Slope(self, value):
        """
        Specifies whether a rising (positive) or a falling (negative) edge triggers the
        counter.
        """
        self.root.dllwrap.SetAttributeViInt32(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 9, value)

    @property
    def MinimumFrequency(self):
        return self.root.dllwrap.GetAttributeViReal64(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 501)

    @MinimumFrequency.setter
    def MinimumFrequency(self, value):
        """
        Specifies the low cutoff frequency for the filter in hertz.
        """
        self.root.dllwrap.SetAttributeViReal64(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 501, value)

    @property
    def MaximumFrequency(self):
        return self.root.dllwrap.GetAttributeViReal64(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 502)

    @MaximumFrequency.setter
    def MaximumFrequency(self, value):
        """
        Specifies the high cutoff frequency for the filter in hertz.
        """
        self.root.dllwrap.SetAttributeViReal64(self.channel, IVI_CLASS_PUBLIC_ATTR_BASE + 502, value)

    def ConfigureFilter(self, MinimumFrequency, MaximumFrequency):
        """
        Sets the bandpass filter minimum and maximum frequencies for a channel.

        :param MinimumFrequency: Specifies the minimum filter frequency.
        :type MinimumFrequency: float
        :param MaximumFrequency: Specifies the maximum filter frequency.
        :type MaximumFrequency: float
        """
        self.root.dllwrap.ConfigureFilter(self.channel, MinimumFrequency, MaximumFrequency)

    def ConfigureLevel(self, TriggerLevel, Hysteresis):
        """
        Configures the Level and Hysteresis attributes for a channel.

        :param TriggerLevel: Specifies the Trigger Level you want the Counter to use for the channel.
        :type TriggerLevel: float
        :param Hysteresis: Specifies the Hysteresis you want the Counter to use for the channel.
        :type Hysteresis: float
        """
        self.root.dllwrap.ConfigureChannelLevel(self.channel, TriggerLevel, Hysteresis)

    def Configure(self, Impedance, Coupling, Attenuation):
        """
        Configures the Impedance, Coupling, and Attenuation attributes of the counter
        channel.

        :param Impedance: Specifies the impedance you want the Counter to use to couple the input signal
            for the channel.
        :type Impedance: float
        :param Coupling: Specifies how you want the Counter to couple the input signal for the channel.
        :type Coupling: IviCounterCouplingEnum
        :param Attenuation: Specifies the attenuation you want the Counter to use for the channel.
        :type Attenuation: float
        """
        self.root.dllwrap.ConfigureChannel(self.channel, Impedance, Coupling, Attenuation)
