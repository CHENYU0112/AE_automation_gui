# flake8: noqa
from os.path import *

from pverify.core.lab.ivi.generators.header2driver import funcs_wth_array_arg
from pverify.core.lab.ivi.generators.header2driver.header2driver import Header2Driver
from pverify.core.util.string_util import pretty_print_traceback


def hpath(filename):
    return abspath(join(dirname(__file__), "../generators/hfiles", filename))


buildspec = (
    # ("SMU", "ke2450", "ke2450.dll", "ke2450_64.dll", hpath("ke2450.h"), "ke2450", funcs_wth_array_arg.smu),  # SMU
    # ("SMU", "ke24xx", "Ke24xx.dll", "Ke24xx_64.dll", hpath("Ke24xx.h"), "Ke24xx", funcs_wth_array_arg.smu),  # SMU
    # ("TemperatureChamber", "TP04310", "TP04310_32.dll", "TP04310_64.dll", hpath("TP04310.h"), "TP04310", funcs_wth_array_arg.common),  # Temp
    # ("DCPwr", "chr62000", "chr62000_32.dll", "chr62000_64.dll", hpath("chr62000.h"), "chr62000", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "Ag34401", "ag34401.dll", "ag34401_64.dll", hpath("ag34401.h"), "Ag34401", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "chr62000", "chr62000_32.dll", "chr62000_64.dll", hpath("chr62000.h"), "chr62000", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "hpe363xa", "hpe363xa_32.dll", "hpe363xa_64.dll", hpath("hpe363xa.h"), "hpe363xa", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "hpe364xa", "hpe364xa_32.dll", "hpe364xa_64.dll", hpath("hpe364xa.h"), "hpe364xa", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "hp662xa", "hp662xa_32.dll", "hp662xa_64.dll", hpath("hp662xa.h"), "hp662xa", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "AgE36xx", "AgE36xx.dll", "AgE36xx_64.dll", hpath("AgE36xx.h"), "AgE36xx", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "tti_plp", "PLP_32.dll", "PLP_64.dll", hpath("PLP.h"), "PLP", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "tti_tqlp", "TQLP_32.dll", "TQLP_64.dll", hpath("TQLP.h"), "TQLP", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "AgN67xx", "AgN67xx.dll", "AgN67xx_64.dll", hpath("AgN67xx.h"), "AgN67xx", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "KE2230", "KE2230_32.dll", "KE2230_64.dll", hpath("KE2230.h"), "KE2230", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "ag603xa", "ag603xa_32.dll", "ag603xa_64.dll", hpath("ag603xa.h"), "ag603xa", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "AgAPS", "AgAPS_32.dll", "AgAPS_64.dll", hpath("AgAPS.h"), "AgAPS", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "AgN57xx", "AgN57xx.dll", "AgN57xx_64.dll", hpath("AgN57xx.h"), "AgN57xx", funcs_wth_array_arg.dc),  # DC
    # ("DCPwr", "XanM9B", "XanM9B.dll", "XanM9B_64.dll", hpath("XanM9B.h"), "XanM9B", funcs_wth_array_arg.dc),  # DC
    # ("Counter", "ag5313xni", "ag5313xni_32.dll", "ag5313xni_64.dll", hpath("ag5313xni.h"), "ag5313xni", funcs_wth_array_arg.common),  # Counter
    # ("Dmm", "ke2000", "ke2000_32.dll", "ke2000_64.dll", hpath("ke2000.h"), "ke2000", funcs_wth_array_arg.dmm),  # Dmm
    # ("Dmm", "ke2100", "Ke2100.dll", "Ke2100_64.dll", hpath("Ke2100.h"), "Ke2100", funcs_wth_array_arg.dmm),  # Dmm
    # ("Dmm", "fl884x", "fl884x_32.dll", "fl884x_64.dll", hpath("fl884x.h"), "fl884x", funcs_wth_array_arg.dmm),  # Dmm
    # ("Dmm", "ag3446x", "Ag3446x.dll", "Ag3446x_64.dll", hpath("ag3446x.h"), "Ag3446x", funcs_wth_array_arg.dmm),  # Dmm
    # ("Dmm", "Ag34410", "Ag34410.dll", "Ag34410_64.dll", hpath("Ag34410.h"), "Ag34410", funcs_wth_array_arg.dmm),  # Dmm
    # ("Dmm", "Ag34405", "Ag34405.dll", "Ag34405_64.dll", hpath("Ag34405.h"), "Ag34405", funcs_wth_array_arg.dmm),  # Dmm
    # ("Dmm", "Ag34970", "Ag34970.dll", "Ag34970_64.dll", hpath("Ag34970.h"), "Ag34970", funcs_wth_array_arg.dmm),  # Dmm
    # ("Dmm", "hp3458a", "hp3458a.dll", "hp3458a_64.dll", hpath("hp3458a.h"), "hp3458a", funcs_wth_array_arg.dmm),  # Dmm
    # ("Fgen", "tkafg31k", "tkafg31k_32.dll", "tkafg31k_64.dll", hpath("tkafg31k.h"), "tkafg31k", funcs_wth_array_arg.fgen),  # Dmm
    # ("Dmm", "kedmm7510", "kedmm7510.dll", "kedmm7510_64.dll", hpath("kedmm7510.h"), "kedmm7510", funcs_wth_array_arg.dmm),  # Dmm
    # ("Fgen", "hp33120a", "hp33120a_32.dll", "hp33120a_64.dll", hpath("hp33120a.h"), "hp33120a", funcs_wth_array_arg.fgen),  # Fgen
    # ("Fgen", "Ag3352x", "Ag3352x.dll", "Ag3352x_64.dll", hpath("Ag3352x.h"), "Ag3352x", funcs_wth_array_arg.fgen),  # Fgen
    # ("Fgen", "tkafg3k", "tkafg3k_32.dll", "tkafg3k_64.dll", hpath("tkafg3k.h"), "tkafg3k", funcs_wth_array_arg.fgen),  # Fgen
    # ("Fgen", "ww257x", "ww257x_32.dll", "ww257x_64.dll", hpath("ww257x.h"), "ww257x", funcs_wth_array_arg.fgen),  # Fgen
    # ("Fgen", "AgM8190", "AgM8190.dll", "AgM8190_64.dll", hpath("AgM8190.h"), "AgM8190", funcs_wth_array_arg.fgen),  # Fgen
    # ("Fgen", "IviFgen", "TekFgen.dll", "TekFgen.dll", hpath("IviFgen.h"), "IviFgen", funcs_wth_array_arg.fgen), # Fgen
    # ("Scope", "lcscope", "lcscope.dll", "lcscope_64.dll", hpath("lcscope.h"), "lcscope", funcs_wth_array_arg.scope),  # Scope
    # ("Scope", "tkdpo4k", "tkdpo4k_32.dll", "tkdpo4k_64.dll", hpath("tkdpo4k.h"), "tkdpo4k", funcs_wth_array_arg.scope),  # Scope
    # ("Scope", "agx2k3k", "agx2k3k_32.dll", "agx2k3k_64.dll", hpath("agx2k3k.h"), "agx2k3k", funcs_wth_array_arg.scope),  # Scope
    # ("Scope", "tkmso5x", "tkmso5x_32.dll", "tkmso5x_64.dll", hpath("tkmso5x.h"), "tkmso5x", funcs_wth_array_arg.scope),  # Scope
    # ("Scope", "tktds1k2k", "tktds1k2k_32.dll", "tktds1k2k_64.dll", hpath("tktds1k2k.h"), "tktds1k2k", funcs_wth_array_arg.scope),  # Scope
    # ("Scope", "AgInfiniiVision", "AgInfiniiVision.dll", "AgInfiniiVision_64.dll", hpath("AgInfiniiVision.h"), "AgInfiniiVision", funcs_wth_array_arg.scope),  # Scope
    # ("Scope", "AgInfiniium", "AgInfiniium.dll", "AgInfiniium_64.dll", hpath("AgInfiniium.h"), "AgInfiniium", funcs_wth_array_arg.scope),  # Scope
    # ("Scope", "ag6000", "ag6000_32.dll", "ag6000_64.dll", hpath("ag6000.h"), "ag6000", funcs_wth_array_arg.scope),  # Scope
    # ("Scope", "TekScope", "TekScope.dll", "TekScope_64.dll", hpath("TekScope.h"), "TekScope", funcs_wth_array_arg.scope),  # Scope
    # ("Scope", "Tkdpo2k3k4k", "Tkdpo2k3k4k.dll", "Tkdpo2k3k4k_64.dll", hpath("Tkdpo2k3k4k.h"), "Tkdpo2k3k4k", funcs_wth_array_arg.scope),  # Scope
    # ("Scope", "tkdpo7k", "tkdpo7k_32.dll", "tkdpo7k_64.dll", hpath("tkdpo7k.h"), "tkdpo7k", funcs_wth_array_arg.scope),  # Scope
    # ("PowerMeter", "age441x", r"age441x_32.dll", r"age441x_64.dll", hpath("age441x.h"), "age441x", funcs_wth_array_arg.pwrmeter),  # Power Meter
    # (
    #     "PowerMeter",
    #     "chr662xx",
    #     r"chr66200_32.dll",
    #     r"chr66200_64.dll",
    #     hpath("chr66200.h"),
    #     "chr66200",
    #     funcs_wth_array_arg.pwrmeter,
    # ),  # Power Meter
    # ("PowerMeter", "KtRFPowerMeter", r"KtRFPowerMeter.dll", r"KtRFPowerMeter_64.dll", hpath("KtRFPowerMeter.h"), "KtRFPowerMeter", funcs_wth_array_arg.pwrmeter),  # Power Meter
    # ("ProgrammableLoad", "chr63600", r"chr63600_32.dll", r"chr63600_64.dll", hpath("chr63600.h"), "chr63600", funcs_wth_array_arg.common),  # Programmable Load
    (
        "ProgrammableLoad",
        "chr632xxa",
        r"chr63200A_32.dll",
        r"chr63200A_64.dll",
        hpath("chr63200A.h"),
        "chr63200A",
        funcs_wth_array_arg.common,
    ),  # Programmable Load
    # ("RohdeSchwarz", "rssmiq", r"rssmiq_32.dll", r"rssmiq_64.dll", hpath("rssmiq.h"), "rssmiq", funcs_wth_array_arg.rssmiq),  # Vector Signal Generator
    # ("RohdeSchwarz", "rsspecan", r"rsspecan_32.dll", r"rsspecan_64.dll", hpath("rsspecan/rsspecan.h"), "rsspecan", funcs_wth_array_arg.specan),  #
    # ("RohdeSchwarz", "rssmf", r"rssmf_32.dll", r"rssmf_64.dll", hpath("rssmf/rssmf.h"), "rssmf"),  #
    # ("RohdeSchwarz", "rsscope", r"rsscope_32.dll", r"rsscope_64.dll", hpath("rsscope/rsscope.h"), "rsscope", None, [r"rsscope"]),  #
    # ("RohdeSchwarz", "rsnrpz", r"rsnrpz_32.dll", r"rsnrpz_64.dll", hpath("rsnrpz.h"), "rsnrpz"),  #
    # ("NI", "ni_hsdio", r"niHSDIO.dll", r"niHSDIO_64.dll", hpath("niHSDIO.h"), "niHSDIO"),  #
    # ("TempScanner", "Fluke1586", r"fl1586_32.dll", r"fl1586_64.dll", hpath("fl1586.h"), "fl1586", funcs_wth_array_arg.tempscan),  # TempScanner
    # ("SpecAn", "AgXSAn", r"AgXSAn.dll", r"AgXSAn_64.dll", hpath("AgXSAn.h"), "AgXSAn"),  # SpecAn
    # ("RfSigGen", "AgRfSigGen", r"AgRfSigGen.dll", r"AgRfSigGen_64.dll", hpath("AgRfSigGen.h"), "AgRfSigGen"),  # RFSigGen
    # ("NetworkAnalyzers", "AgNA", r"AgNA.dll", r"AgNA_64.dll", hpath("AgNA.h"), "AgNA"),  # RFSigGen
)


if __name__ == "__main__":
    try:
        for args in buildspec:
            Header2Driver(*args).run()
            pass
    except Exception as e:
        print(pretty_print_traceback())
