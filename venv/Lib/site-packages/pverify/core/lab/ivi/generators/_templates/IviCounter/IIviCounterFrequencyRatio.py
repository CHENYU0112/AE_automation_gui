from .{drivername} import *


class IIviCounterFrequencyRatio:
    def __init__(self, root):
        self.root = root
        """:type : pverify.drivers.{group}.{drivername}.I{iviclass}.I{iviclass}"""

    @property
    def NumeratorChannel(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 34, 1024)

    @NumeratorChannel.setter
    def NumeratorChannel(self, value):
        """
        Specifies the input channel the frequency ratio is measured on.
        """
        self.root.dllwrap.SetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 34, value)

    @property
    def DenominatorChannel(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 35, 1024)

    @DenominatorChannel.setter
    def DenominatorChannel(self, value):
        """
        Specifies the input denominator channel the frequency ratio is measured on.
        """
        self.root.dllwrap.SetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 35, value)

    @property
    def NumeratorFrequencyEstimate(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 36)

    @NumeratorFrequencyEstimate.setter
    def NumeratorFrequencyEstimate(self, value):
        """
        Specifies the estimated numerator frequency, in hertz, for the frequency ratio
        function.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 36, value)

    @property
    def Estimate(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 37)

    @Estimate.setter
    def Estimate(self, value):
        """
        Specifies the estimated frequency ratio for the frequency ratio function.
        Frequency Ratio Estimate is unitless value.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 37, value)

    @property
    def Resolution(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 38)

    @Resolution.setter
    def Resolution(self, value):
        """
        Specifies the estimated frequency ratio for the frequency ratio function.
        Frequency Ratio Estimate is unitless value.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 38, value)

    def Configure(self, NumeratorChannel, DenominatorChannel, NumeratorFrequencyEstimate, Estimate, Resolution):
        """
        Configures the estimated frequencies, and resolution attributes and specifies
        the numerator and denominator channels for a frequency ratio measurement.

        :param NumeratorChannel: Specifies the numerator channel the frequency ratio will be measured on.
        :type NumeratorChannel: str
        :param DenominatorChannel: Specifies the denominator channel the frequency ratio will be measured on.
        :type DenominatorChannel: str
        :param NumeratorFrequencyEstimate: Specifies the estimated frequency for the numerator of the frequency ratio.
        :type NumeratorFrequencyEstimate: float
        :param Estimate: Specifies the estimated frequency ratio measurement.
        :type Estimate: float
        :param Resolution: Specifies the resolution of the frequency ratio measurement. It is the
            quantization size, i.e. the smallest delta value that can be detected.
        :type Resolution: float
        """
        self.root.dllwrap.ConfigureFrequencyRatio(,
                                                  NumeratorChannel,
                                                  DenominatorChannel,
                                                  NumeratorFrequencyEstimate,
                                                  Estimate,
                                                  Resolution)
