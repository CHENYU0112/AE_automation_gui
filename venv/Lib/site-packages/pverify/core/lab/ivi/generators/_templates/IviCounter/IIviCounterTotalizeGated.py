from .{drivername} import *


class IIviCounterTotalizeGated:
    def __init__(self, root):
        self.root = root
        """:type : pverify.drivers.{group}.{drivername}.I{iviclass}.I{iviclass}"""

    @property
    def Channel(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 48, 1024)

    @Channel.setter
    def Channel(self, value):
        """
        Specifies the input channel for the gated totalize function.
        """
        self.root.dllwrap.SetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 48, value)

    @property
    def GateSource(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 49, 1024)

    @GateSource.setter
    def GateSource(self, value):
        """
        Specifies the gate source for the gated totalize function.
        """
        self.root.dllwrap.SetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 49, value)

    @property
    def GateSlope(self):
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 50)

    @GateSlope.setter
    def GateSlope(self, value):
        """
        Specifies the gate slope that enables the gated totalize function.
        """
        self.root.dllwrap.SetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 50, value)

    def Configure(self, Channel, GateSource, GateSlope):
        """
        Specifies the channel to use for the gate source and configures the gate slope
        attribute for a gated totalize measurement.

        :param Channel: Specifies the channel that will be counted.
        :type Channel: str
        :param GateSource: Specifies the channel that will gate the counted channel.
        :type GateSource: str
        :param GateSlope: Specifies the gate slope you want to configure.
        :type GateSlope: IviCounterSlopeEnum
        """
        self.root.dllwrap.ConfigureGatedTotalize(Channel, GateSource, GateSlope)
