/******************************************************************************
 *
 * Copyright Keysight Technologies 2003-2017
 *
 *****************************************************************************/

#ifndef __AGN67XX_HEADER
#define __AGN67XX_HEADER

#include <ivivisatype.h>

#if defined(__cplusplus) || defined(__cplusplus__)
extern "C" {
#endif

/****************************************************************************
 *---------------------------- Attribute Defines ---------------------------*
 ****************************************************************************/
#ifndef IVI_ATTR_BASE
#define IVI_ATTR_BASE                 1000000
#endif

#ifndef IVI_INHERENT_ATTR_BASE
#define IVI_INHERENT_ATTR_BASE        (IVI_ATTR_BASE +  50000)   /* base for inherent capability attributes */
#endif

#ifndef IVI_CLASS_ATTR_BASE
#define IVI_CLASS_ATTR_BASE           (IVI_ATTR_BASE + 250000)   /* base for IVI-defined class attributes */
#endif

#ifndef IVI_LXISYNC_ATTR_BASE
#define IVI_LXISYNC_ATTR_BASE         (IVI_ATTR_BASE + 950000)   /* base for IviLxiSync attributes */
#endif

#ifndef IVI_SPECIFIC_ATTR_BASE
#define IVI_SPECIFIC_ATTR_BASE        (IVI_ATTR_BASE + 150000)   /* base for attributes of specific drivers */
#endif


/*===== IVI Inherent Instrument Attributes ==============================*/

/*- Driver Identification */

#define AGN67XX_ATTR_SPECIFIC_DRIVER_DESCRIPTION              (IVI_INHERENT_ATTR_BASE + 514L)  /* ViString, read-only */
#define AGN67XX_ATTR_SPECIFIC_DRIVER_PREFIX                   (IVI_INHERENT_ATTR_BASE + 302L)  /* ViString, read-only */
#define AGN67XX_ATTR_SPECIFIC_DRIVER_VENDOR                   (IVI_INHERENT_ATTR_BASE + 513L)  /* ViString, read-only */
#define AGN67XX_ATTR_SPECIFIC_DRIVER_REVISION                 (IVI_INHERENT_ATTR_BASE + 551L)  /* ViString, read-only */
#define AGN67XX_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION (IVI_INHERENT_ATTR_BASE + 515L)  /* ViInt32, read-only */
#define AGN67XX_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION (IVI_INHERENT_ATTR_BASE + 516L)  /* ViInt32, read-only */

/*- User Options */

#define AGN67XX_ATTR_RANGE_CHECK                            (IVI_INHERENT_ATTR_BASE + 2L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_QUERY_INSTRUMENT_STATUS                (IVI_INHERENT_ATTR_BASE + 3L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_CACHE                                  (IVI_INHERENT_ATTR_BASE + 4L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_SIMULATE                               (IVI_INHERENT_ATTR_BASE + 5L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_RECORD_COERCIONS                       (IVI_INHERENT_ATTR_BASE + 6L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_INTERCHANGE_CHECK                      (IVI_INHERENT_ATTR_BASE + 21L)  /* ViBoolean, read-write */

/*- Advanced Session Information */

#define AGN67XX_ATTR_LOGICAL_NAME                           (IVI_INHERENT_ATTR_BASE + 305L)  /* ViString, read-only */
#define AGN67XX_ATTR_IO_RESOURCE_DESCRIPTOR                 (IVI_INHERENT_ATTR_BASE + 304L)  /* ViString, read-only */
#define AGN67XX_ATTR_DRIVER_SETUP                           (IVI_INHERENT_ATTR_BASE + 7L)  /* ViString, read-only */

/*- Driver Capabilities */

#define AGN67XX_ATTR_GROUP_CAPABILITIES                     (IVI_INHERENT_ATTR_BASE + 401L)  /* ViString, read-only */
#define AGN67XX_ATTR_SUPPORTED_INSTRUMENT_MODELS            (IVI_INHERENT_ATTR_BASE + 327L)  /* ViString, read-only */

/*- Instrument Identification */

#define AGN67XX_ATTR_INSTRUMENT_FIRMWARE_REVISION           (IVI_INHERENT_ATTR_BASE + 510L)  /* ViString, read-only */
#define AGN67XX_ATTR_INSTRUMENT_MANUFACTURER                (IVI_INHERENT_ATTR_BASE + 511L)  /* ViString, read-only */
#define AGN67XX_ATTR_INSTRUMENT_MODEL                       (IVI_INHERENT_ATTR_BASE + 512L)  /* ViString, read-only */


/*===== Instrument-Specific Attributes =====================================*/

/*- Output */

#define AGN67XX_ATTR_CURRENT_LIMIT                          (IVI_CLASS_ATTR_BASE + 5L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_CURRENT_LIMIT_BEHAVIOR                 (IVI_CLASS_ATTR_BASE + 4L)  /* ViInt32, read-write */
#define AGN67XX_ATTR_OUTPUT_ENABLED                         (IVI_CLASS_ATTR_BASE + 6L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_OVP_ENABLED                            (IVI_CLASS_ATTR_BASE + 2L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_OVP_LIMIT                              (IVI_CLASS_ATTR_BASE + 3L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_VOLTAGE_LEVEL                          (IVI_CLASS_ATTR_BASE + 1L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_CHANNEL_COUNT                          (IVI_INHERENT_ATTR_BASE + 203L)  /* ViInt32, read-only */

/*- Trigger */

#define AGN67XX_ATTR_TRIGGERED_CURRENT_LIMIT                (IVI_CLASS_ATTR_BASE + 102L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_TRIGGERED_VOLTAGE_LEVEL                (IVI_CLASS_ATTR_BASE + 103L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_TRIGGER_SOURCE                         (IVI_CLASS_ATTR_BASE + 101L)  /* ViInt32, read-write */

/*- DCPwrOutput */

#define AGN67XX_ATTR_DCPWROUTPUT_COUNT                      (IVI_SPECIFIC_ATTR_BASE + 349L)  /* ViInt32, read-only */

/*- DLog */

#define AGN67XX_ATTR_DLOG_COUNT                             (IVI_SPECIFIC_ATTR_BASE + 350L)  /* ViInt32, read-only */

/*- Measurement */

#define AGN67XX_ATTR_MEASUREMENT_COUNT                      (IVI_SPECIFIC_ATTR_BASE + 351L)  /* ViInt32, read-only */

/*- Output */

#define AGN67XX_ATTR_OUTPUT_COUNT                           (IVI_SPECIFIC_ATTR_BASE + 352L)  /* ViInt32, read-only */

/*- Protection */

#define AGN67XX_ATTR_PROTECTION_COUNT                       (IVI_SPECIFIC_ATTR_BASE + 353L)  /* ViInt32, read-only */

/*- Status */

#define AGN67XX_ATTR_STATUS_COUNT                           (IVI_SPECIFIC_ATTR_BASE + 354L)  /* ViInt32, read-only */

/*- System */

#define AGN67XX_ATTR_SYSTEM_COUNT                           (IVI_SPECIFIC_ATTR_BASE + 355L)  /* ViInt32, read-only */

/*- Transient */

#define AGN67XX_ATTR_TRANSIENT_COUNT                        (IVI_SPECIFIC_ATTR_BASE + 356L)  /* ViInt32, read-only */

/*- Item */

#define AGN67XX_ATTR_MEASUREMENTS_ITEM_TRIG_SOURCE          (IVI_SPECIFIC_ATTR_BASE + 1L)  /* ViInt32, read-write */
#define AGN67XX_ATTR_MEASUREMENTS_ITEM_CURRENT_COMPENSATE   (IVI_SPECIFIC_ATTR_BASE + 45L)  /* ViBoolean, write-only */

/*- Item2 */

#define AGN67XX_ATTR_MEASUREMENTS3_ITEM2_VOLTAGE_SENSE_SOURCE (IVI_SPECIFIC_ATTR_BASE + 72L)  /* ViInt32, read-write */

/*- Outputs */

#define AGN67XX_ATTR_OUTPUTS_COUPLE_ENABLED                 (IVI_SPECIFIC_ATTR_BASE + 47L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_OUTPUTS_COUPLE_CHANNELS                (IVI_SPECIFIC_ATTR_BASE + 48L)  /* ViString, read-write */
#define AGN67XX_ATTR_OUTPUTS_COUPLE_DELAY_OFFSET            (IVI_SPECIFIC_ATTR_BASE + 49L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_OUTPUTS_COUPLE_DELAY_OFFSET_MODE       (IVI_SPECIFIC_ATTR_BASE + 50L)  /* ViInt32, read-write */
#define AGN67XX_ATTR_OUTPUTS_ENABLE_ALL                     (IVI_SPECIFIC_ATTR_BASE + 57L)  /* ViBoolean, write-only */

/*- Item */

#define AGN67XX_ATTR_OUTPUT_ENABLE                          (IVI_SPECIFIC_ATTR_BASE + 41L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_OUTPUT_POWER_LIMIT                     (IVI_SPECIFIC_ATTR_BASE + 42L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_OUTPUT_RELAY_POLARITY                  (IVI_SPECIFIC_ATTR_BASE + 43L)  /* ViInt32, read-write */
#define AGN67XX_ATTR_OUTPUT_VOLTAGE_SLEW_RATE               (IVI_SPECIFIC_ATTR_BASE + 44L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_OUTPUTS_ITEM_FOUR_WIRE_SENSE           (IVI_SPECIFIC_ATTR_BASE + 46L)  /* ViInt32, read-write */

/*- Item2 */

#define AGN67XX_ATTR_OUTPUTS5_ITEM2_RESISTANCE_LEVEL            (IVI_SPECIFIC_ATTR_BASE + 73L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_OUTPUTS5_ITEM2_RESISTANCE_ENABLED          (IVI_SPECIFIC_ATTR_BASE + 74L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_OUTPUTS5_ITEM2_SOURCE_REGULATION_MODE      (IVI_SPECIFIC_ATTR_BASE + 75L)  /* ViInt32, read-write */
#define AGN67XX_ATTR_OUTPUTS5_ITEM2_POSITIVE_COMPLIANCE_VOLTAGE (IVI_SPECIFIC_ATTR_BASE + 76L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_OUTPUTS5_ITEM2_NEGATIVE_COMPLIANCE_VOLTAGE (IVI_SPECIFIC_ATTR_BASE + 77L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_OUTPUTS5_ITEM2_VOLTAGE_SOURCE_BANDWIDTH    (IVI_SPECIFIC_ATTR_BASE + 78L)  /* ViInt32, read-write */
#define AGN67XX_ATTR_OUTPUTS5_ITEM2_POSITIVE_COMPLIANCE_CURRENT (IVI_SPECIFIC_ATTR_BASE + 79L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_OUTPUTS5_ITEM2_NEGATIVE_COMPLIANCE_CURRENT (IVI_SPECIFIC_ATTR_BASE + 80L)  /* ViReal64, read-write */

/*- Protections */

#define AGN67XX_ATTR_PROTECTIONS_COUPLE_FAULTS              (IVI_SPECIFIC_ATTR_BASE + 26L)  /* ViBoolean, read-write */

/*- item */

#define AGN67XX_ATTR_PROTECTION_CURRENT_LIMIT_BEHAVIOR       (IVI_SPECIFIC_ATTR_BASE + 5L)  /* ViInt32, read-write */
#define AGN67XX_ATTR_PROTECTION_OCP_DELAY                    (IVI_SPECIFIC_ATTR_BASE + 6L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_PROTECTION_OVP_ENABLED                  (IVI_SPECIFIC_ATTR_BASE + 7L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_PROTECTION_OVP_LIMIT                    (IVI_SPECIFIC_ATTR_BASE + 8L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_PROTECTION_QUERY_OVP_LIMIT_MAX          (IVI_SPECIFIC_ATTR_BASE + 9L)  /* ViReal64, read-only */
#define AGN67XX_ATTR_PROTECTIONS_ITEM_CURRENT_LIMIT_BEHAVIOR (IVI_SPECIFIC_ATTR_BASE + 27L)  /* ViInt32, read-write */
#define AGN67XX_ATTR_PROTECTIONS_ITEM_OCP_DELAY              (IVI_SPECIFIC_ATTR_BASE + 28L)  /* ViReal64, read-write */
#define AGN67XX_ATTR_PROTECTIONS_ITEM_OVP_LIMIT              (IVI_SPECIFIC_ATTR_BASE + 29L)  /* ViReal64, read-write */

/*- Item */

#define AGN67XX_ATTR_PROTECTIONS_ITEM_QUERY_OVP_LIMIT_MAX   (IVI_SPECIFIC_ATTR_BASE + 30L)  /* ViReal64, read-only */

/*- Statuses */

#define AGN67XX_ATTR_STATUSES_SERIAL_POLL                   (IVI_SPECIFIC_ATTR_BASE + 31L)  /* ViInt32, read-only */

/*- Systems */

#define AGN67XX_ATTR_SYSTEMS_ASYNC_EVENTS_ENABLED           (IVI_SPECIFIC_ATTR_BASE + 58L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_SYSTEMS_DIGITAL_PORT                   (IVI_SPECIFIC_ATTR_BASE + 59L)  /* ViInt32, read-write */
#define AGN67XX_ATTR_SYSTEMS_MODEL                          (IVI_SPECIFIC_ATTR_BASE + 60L)  /* ViInt32, read-write */
#define AGN67XX_ATTR_SYSTEMS_PARALLEL_GROUPS                (IVI_SPECIFIC_ATTR_BASE + 61L)  /* ViString, read-write */
#define AGN67XX_ATTR_SYSTEMS_POWER_ON_STATE                 (IVI_SPECIFIC_ATTR_BASE + 62L)  /* ViInt32, read-write */
#define AGN67XX_ATTR_SYSTEMS_SERIAL_NUMBER                  (IVI_SPECIFIC_ATTR_BASE + 63L)  /* ViString, read-only */
#define AGN67XX_ATTR_SYSTEMS_TIMEOUT_MILLISECONDS           (IVI_SPECIFIC_ATTR_BASE + 64L)  /* ViInt32, write-only */
#define AGN67XX_ATTR_SYSTEMS_TRACE_ENABLED                  (IVI_SPECIFIC_ATTR_BASE + 65L)  /* ViBoolean, read-write */

/*- Item */

#define AGN67XX_ATTR_SYSTEM_MODULE_NAME                     (IVI_SPECIFIC_ATTR_BASE + 17L)  /* ViString, read-only */
#define AGN67XX_ATTR_SYSTEM_MODULE_OPTION                   (IVI_SPECIFIC_ATTR_BASE + 18L)  /* ViString, read-only */
#define AGN67XX_ATTR_SYSTEM_MODULE_SERIAL_NUMBER            (IVI_SPECIFIC_ATTR_BASE + 19L)  /* ViString, read-only */
#define AGN67XX_ATTR_SYSTEM_SIMULATE_MODULE_NAME            (IVI_SPECIFIC_ATTR_BASE + 20L)  /* ViInt32, write-only */

/*- Item */

#define AGN67XX_ATTR_TRANSIENTS_ITEM_STEP_TRIG_OUT          (IVI_SPECIFIC_ATTR_BASE + 21L)  /* ViBoolean, read-write */
#define AGN67XX_ATTR_TRANSIENTS_ITEM_TRIG_SOURCE            (IVI_SPECIFIC_ATTR_BASE + 22L)  /* ViInt32, read-write */

/*- System */

#define AGN67XX_ATTR_SYSTEM_IO_TIMEOUT                      (IVI_SPECIFIC_ATTR_BASE + 357L)  /* ViInt32, read-write */


/****************************************************************************
 *------------------------ Attribute Value Defines -------------------------*
 ****************************************************************************/

/*- Defined values for
	attribute AGN67XX_ATTR_CURRENT_LIMIT_BEHAVIOR
	parameter Behavior in function AgN67xx_ConfigureCurrentLimit */

#define AGN67XX_VAL_CURRENT_REGULATE                        0
#define AGN67XX_VAL_CURRENT_TRIP                            1

/*- Defined values for
	parameter RangeType in function AgN67xx_ConfigureOutputRange */

#define AGN67XX_VAL_RANGE_CURRENT                           0
#define AGN67XX_VAL_RANGE_VOLTAGE                           1

/*- Defined values for
	parameter MeasurementType in function AgN67xx_Measure */

#define AGN67XX_VAL_MEASURE_CURRENT                         0
#define AGN67XX_VAL_MEASURE_VOLTAGE                         1

/*- Defined values for
	parameter OutputState in function AgN67xx_QueryOutputState */

#define AGN67XX_VAL_OUTPUT_CONSTANT_VOLTAGE                 0
#define AGN67XX_VAL_OUTPUT_CONSTANT_CURRENT                 1
#define AGN67XX_VAL_OUTPUT_OVER_VOLTAGE                     2
#define AGN67XX_VAL_OUTPUT_OVER_CURRENT                     3
#define AGN67XX_VAL_OUTPUT_UNREGULATED                      4

/*- Defined values for
	attribute AGN67XX_ATTR_TRIGGER_SOURCE
	parameter Source in function AgN67xx_ConfigureTriggerSource */

#define AGN67XX_VAL_TRIG_IMMEDIATE                          0
#define AGN67XX_VAL_TRIG_EXTERNAL                           1
#define AGN67XX_VAL_SOFTWARE_TRIG                           2
#define AGN67XX_VAL_TRIG_TTL0                               3
#define AGN67XX_VAL_TRIG_TTL1                               4
#define AGN67XX_VAL_TRIG_TTL2                               5
#define AGN67XX_VAL_TRIG_TTL3                               6
#define AGN67XX_VAL_TRIG_TTL4                               7
#define AGN67XX_VAL_TRIG_TTL5                               8
#define AGN67XX_VAL_TRIG_TTL6                               9
#define AGN67XX_VAL_TRIG_TTL7                               10
#define AGN67XX_VAL_TRIG_ECL0                               11
#define AGN67XX_VAL_TRIG_ECL1                               12
#define AGN67XX_VAL_TRIG_PXI_STAR                           13
#define AGN67XX_VAL_TRIG_RTSI_0                             14
#define AGN67XX_VAL_TRIG_RTSI_1                             15
#define AGN67XX_VAL_TRIG_RTSI_2                             16
#define AGN67XX_VAL_TRIG_RTSI_3                             17
#define AGN67XX_VAL_TRIG_RTSI_4                             18
#define AGN67XX_VAL_TRIG_RTSI_5                             19
#define AGN67XX_VAL_TRIG_RTSI_6                             20

/*- Defined values for
	parameter MeasurementType in function AgN67xx_MeasurementsItemMeasureArray
	parameter MeasurementType in function AgN67xx_MeasurementsItemMeasure
	parameter TriggerType in function AgN67xx_MeasurementsItemConfigure
	parameter MeasurementType in function AgN67xx_MeasurementsItemGetMeasurementRange
	parameter MeasurementType in function AgN67xx_MeasurementsItemSetMeasurementRange
	parameter MeasurementType in function AgN67xx_Measurements3Item2GetMeasurementRangeAuto
	parameter MeasurementType in function AgN67xx_Measurements3Item2SetMeasurementRangeAuto
	parameter MeasurementType in function AgN67xx_Dlogs2Item2SetDlogsMeasurementRange
	parameter MeasurementType in function AgN67xx_Dlogs2Item2GetDlogsMeasurementRangeAuto
	parameter MeasurementType in function AgN67xx_Dlogs2Item2SetDlogsMeasurementRangeAuto
	parameter MeasurementType in function AgN67xx_Dlogs2Item2GetDlogsMeasurementRange */

#define AGN67XX_VAL_MEASUREMENT_CURRENT                     0
#define AGN67XX_VAL_MEASUREMENT_CURRENT_HIGH                2
#define AGN67XX_VAL_MEASUREMENT_CURRENT_LOW                 3
#define AGN67XX_VAL_MEASUREMENT_VOLTAGE                     1
#define AGN67XX_VAL_MEASUREMENT_VOLTAGE_HIGH                4
#define AGN67XX_VAL_MEASUREMENT_VOLTAGE_LOW                 5

/*- Defined values for
	parameter FetchType in function AgN67xx_MeasurementsItemFetchArray
	parameter FetchType in function AgN67xx_MeasurementsItemFetch */

#define AGN67XX_VAL_FETCH_CURRENT                           0
#define AGN67XX_VAL_FETCH_VOLTAGE                           1
#define AGN67XX_VAL_FETCH_TYPE_CURRENT_ACDC                 2
#define AGN67XX_VAL_FETCH_VOLTAGE_ACDC                      3
#define AGN67XX_VAL_FETCH_CURRENT_HIGH                      4
#define AGN67XX_VAL_FETCH_VOLTAGE_HIGH                      5
#define AGN67XX_VAL_FETCH_CURRENT_LOW                       6
#define AGN67XX_VAL_FETCH_VOLTAGE_LOW                       7

/*- Defined values for
	parameter WindowType in function AgN67xx_MeasurementsItemFetch */

#define AGN67XX_VAL_WINDOW_TYPE_HANN                        0
#define AGN67XX_VAL_WINDOW_TYPE_RECTANGULAR                 1
#define AGN67XX_VAL_WINDOW_TYPE_NONE                        2

/*- Defined values for
	attribute AGN67XX_ATTR_MEASUREMENTS_ITEM_TRIG_SOURCE
	attribute AGN67XX_ATTR_TRANSIENTS_ITEM_TRIG_SOURCE */

#define AGN67XX_VAL_TRIGGER_SOURCE_BUS                      0
#define AGN67XX_VAL_TRIGGER_SOURCE_PIN1                     1
#define AGN67XX_VAL_TRIGGER_SOURCE_PIN2                     2
#define AGN67XX_VAL_TRIGGER_SOURCE_PIN3                     3
#define AGN67XX_VAL_TRIGGER_SOURCE_PIN4                     4
#define AGN67XX_VAL_TRIGGER_SOURCE_PIN5                     5
#define AGN67XX_VAL_TRIGGER_SOURCE_PIN6                     6
#define AGN67XX_VAL_TRIGGER_SOURCE_PIN7                     7
#define AGN67XX_VAL_TRIGGER_SOURCE_TRAN1                    8
#define AGN67XX_VAL_TRIGGER_SOURCE_TRAN2                    9
#define AGN67XX_VAL_TRIGGER_SOURCE_TRAN3                    10
#define AGN67XX_VAL_TRIGGER_SOURCE_TRAN4                    11
#define AGN67XX_VAL_TRIGGER_SOURCE_IMMEDIATE                12

/*- Defined values for
	attribute AGN67XX_ATTR_PROTECTION_CURRENT_LIMIT_BEHAVIOR
	attribute AGN67XX_ATTR_PROTECTIONS_ITEM_CURRENT_LIMIT_BEHAVIOR
	parameter Behavior in function AgN67xx_Outputs3ItemConfigureCurrentLimit */

#define AGN67XX_VAL_CURRENT_LIMIT_REGULATE                  0
#define AGN67XX_VAL_CURRENT_LIMIT_TRIP                      1

/*- Defined values for
	parameter OutputState in function AgN67xx_Outputs3ItemQueryState */

#define AGN67XX_VAL_OUTPUT_CONSTANT_VOLTAGE                 0
#define AGN67XX_VAL_OUTPUT_CONSTANT_CURRENT                 1
#define AGN67XX_VAL_OUTPUT_OVER_VOLTAGE                     2
#define AGN67XX_VAL_OUTPUT_OVER_CURRENT                     3
#define AGN67XX_VAL_OUTPUT_UNREGULATED                      4
#define AGN67XX_VAL_OUTPUT_POWER_FAIL                       5
#define AGN67XX_VAL_OUTPUT_POS_POWER_LIMIT                  6
#define AGN67XX_VAL_OUTPUT_NEG_POWER_LIMIT                  7
#define AGN67XX_VAL_OUTPUT_OVER_TEMPERATURE                 8
#define AGN67XX_VAL_OUTPUT_INHIBIT                          9
#define AGN67XX_VAL_OUTPUT_COUPLED_PROTECTION               10
#define AGN67XX_VAL_OUTPUT_OFF                              11
#define AGN67XX_VAL_OUTPUT_POS_COMPLIANCE_LIMIT             12
#define AGN67XX_VAL_OUTPUT_NEG_COMPLIANCE_LIMIT             13
#define AGN67XX_VAL_OUTPUT_NEG_OVER_VOLTAGE                 14
#define AGN67XX_VAL_OUTPUT_OSCILLATION                      15

/*- Defined values for
	parameter Register in function AgN67xx_StatusesItemQueryRegister
	parameter Register in function AgN67xx_StatusesItemConfigureRegister
	parameter Register in function AgN67xx_StatusesItemGetRegister
	parameter Register in function AgN67xx_StatusesItemSetRegister */

#define AGN67XX_VAL_STATUS_REGISTER_STATUS_BYTE             0
#define AGN67XX_VAL_STATUS_REGISTER_STANDARD_EVENT          1
#define AGN67XX_VAL_STATUS_REGISTER_OPERATION               2
#define AGN67XX_VAL_STATUS_REGISTER_QUESTIONABLE            3

/*- Defined values for
	parameter SubRegister in function AgN67xx_StatusesItemQueryRegister
	parameter SubRegister in function AgN67xx_StatusesItemConfigureRegister
	parameter SubRegister in function AgN67xx_StatusesItemGetRegister
	parameter SubRegister in function AgN67xx_StatusesItemSetRegister */

#define AGN67XX_VAL_STATUS_SUB_REGISTER_CONDITION           0
#define AGN67XX_VAL_STATUS_SUB_REGISTER_NEGATIVE_TRANSITION 1
#define AGN67XX_VAL_STATUS_SUB_REGISTER_POSITIVE_TRANSITION 2
#define AGN67XX_VAL_STATUS_SUB_REGISTER_EVENT               3
#define AGN67XX_VAL_STATUS_SUB_REGISTER_ENABLE              4

/*- Defined values for
	parameter Pin in function AgN67xx_SystemsConfigureIOPort
	parameter Pin in function AgN67xx_SystemsQueryIOPort */

#define AGN67XX_VAL_DIGITAL_PIN1                            0
#define AGN67XX_VAL_DIGITAL_PIN2                            2
#define AGN67XX_VAL_DIGITAL_PIN3                            3
#define AGN67XX_VAL_DIGITAL_PIN4                            4
#define AGN67XX_VAL_DIGITAL_PIN5                            5
#define AGN67XX_VAL_DIGITAL_PIN6                            6
#define AGN67XX_VAL_DIGITAL_PIN7                            7

/*- Defined values for
	parameter Function in function AgN67xx_SystemsConfigureIOPort
	parameter pFunction in function AgN67xx_SystemsQueryIOPort */

#define AGN67XX_VAL_PIN_FUNCTION_DIO                        0
#define AGN67XX_VAL_PIN_FUNCTION_DINP                       1
#define AGN67XX_VAL_PIN_FUNCTION_TOUT                       2
#define AGN67XX_VAL_PIN_FUNCTION_TINP                       3
#define AGN67XX_VAL_PIN_FUNCTION_FAUL                       4
#define AGN67XX_VAL_PIN_FUNCTION_INH                        5
#define AGN67XX_VAL_PIN_FUNCTION_ON_COUPLE                  6
#define AGN67XX_VAL_PIN_FUNCTION_OFF_COUPLE                 7

/*- Defined values for
	parameter Polarity in function AgN67xx_SystemsConfigureIOPort
	parameter pPolarity in function AgN67xx_SystemsQueryIOPort */

#define AGN67XX_VAL_PIN_POLARITY_POSITIVE                   0
#define AGN67XX_VAL_PIN_POLARITY_NEGATIVE                   1

/*- Defined values for
	attribute AGN67XX_ATTR_SYSTEM_SIMULATE_MODULE_NAME */

#define AGN67XX_VAL_MODULE_N6762A                           0
#define AGN67XX_VAL_MODULE_N6752A                           1

/*- Defined values for
	attribute AGN67XX_ATTR_SYSTEMS_MODEL */

#define AGN67XX_VAL_MODEL_N6700A                            0
#define AGN67XX_VAL_MODEL_N6700B                            1
#define AGN67XX_VAL_UN_SUPPORTED_MODEL                      2
#define AGN67XX_VAL_NO_MODEL                                3
#define AGN67XX_VAL_MODEL_N6701A                            4
#define AGN67XX_VAL_MODEL_N6702A                            5
#define AGN67XX_VAL_MODEL_N6705A                            6
#define AGN67XX_VAL_MODEL_N6705B                            7
#define AGN67XX_VAL_MODELN6700C                             8
#define AGN67XX_VAL_MODELN6702C                             9
#define AGN67XX_VAL_MODELN6705C                             10
#define AGN67XX_VAL_MODELN6701C                             11

/*- Defined values for
	attribute AGN67XX_ATTR_SYSTEMS_POWER_ON_STATE */

#define AGN67XX_VAL_POWER_ON_STATE_RST                      0
#define AGN67XX_VAL_POWER_ON_STATE_RCL0                     1

/*- Defined values for
	parameter Pace in function AgN67xx_TransientsItemListConfigure
	parameter Pace in function AgN67xx_Transients2Item2ListConfigure */

#define AGN67XX_VAL_LIST_PACE_AUTO                          0
#define AGN67XX_VAL_LIST_PACE_ONCE                          1

/*- Defined values for
	parameter ListType in function AgN67xx_TransientsItemGetListLength */

#define AGN67XX_VAL_LIST_TYPES_DWELL_TIME                   0
#define AGN67XX_VAL_LIST_TYPES_CURRENT                      1
#define AGN67XX_VAL_LIST_TYPES_VOLTAGE                      2
#define AGN67XX_VAL_LIST_TYPES_BOS                          3
#define AGN67XX_VAL_LIST_TYPES_EOS                          4

/*- Defined values for
	parameter TriggerLevelType in function AgN67xx_TransientsItemGetStepTrigLevel
	parameter TriggerLevelType in function AgN67xx_TransientsItemSetStepTrigLevel */

#define AGN67XX_VAL_TRIGGER_LEVEL_CURRENT                   0
#define AGN67XX_VAL_TRIGGER_LEVEL_VOLTAGE                   1

/*- Defined values for
	parameter Reason in function AgN67xx_StatusesConfigureServiceRequest
	parameter Reason in function AgN67xx_Statuses3Item2ConfigureServiceRequest */

#define AGN67XX_VAL_SRQ_REASON_STB_MAV                      1
#define AGN67XX_VAL_SRQ_REASON_STB_ERROR_QUE                2
#define AGN67XX_VAL_SRQ_REASON_ESR_OPC                      4
#define AGN67XX_VAL_SRQ_REASON_ESR_QUERY_ERROR              8
#define AGN67XX_VAL_SRQ_REASON_ESR_DEVICE_ERROR             16
#define AGN67XX_VAL_SRQ_REASON_ESR_EXECUTION_ERROR          32
#define AGN67XX_VAL_SRQ_REASON_ESR_COMMAND_ERROR            64
#define AGN67XX_VAL_SRQ_REASON_QUES_OV                      128
#define AGN67XX_VAL_SRQ_REASON_QUES_OC                      256
#define AGN67XX_VAL_SRQ_REASON_QUES_POS_POWER_LIMIT         512
#define AGN67XX_VAL_SRQ_REASON_QUES_NEG_POWER_LIMIT         1024
#define AGN67XX_VAL_SRQ_REASON_QUES_OT                      2048
#define AGN67XX_VAL_SRQ_REASON_QUES_INHIBIT                 4096
#define AGN67XX_VAL_SRQ_REASON_QUES_UNR                     8192
#define AGN67XX_VAL_SRQ_REASON_QUES_COUPLED_PROTECTION      16384
#define AGN67XX_VAL_SRQ_REASON_QUES_POS_COMP_LIMIT          32768
#define AGN67XX_VAL_SRQ_REASON_NEG_COMP_LIMIT               65536
#define AGN67XX_VAL_SRQ_REASON_QUES_OSC_DETECT              131072
#define AGN67XX_VAL_SRQ_REASON_QUES_POWER_FAULT             262144
#define AGN67XX_VAL_SRQ_REASON_QUES_NEG_OV                  524288
#define AGN67XX_VAL_SRQ_REASON_OPER_CV                      1048576
#define AGN67XX_VAL_SRQ_REASON_OPER_CC                      2097152
#define AGN67XX_VAL_SRQ_REASON_OPER_OFF                     4194304
#define AGN67XX_VAL_SRQ_REASON_OPER_WTG_MEAS_TRIGGER        8388608
#define AGN67XX_VAL_SRQ_REASON_OPER_WTG_TRANS_TRIGGER       16777216
#define AGN67XX_VAL_SRQ_REASON_OPER_MEAS_ACTIVE             33554432
#define AGN67XX_VAL_SRQ_REASON_OPER_TRANS_ACTIVE            67108864
#define AGN67XX_VAL_SRQ_REASON_NONE                         134217728

/*- Defined values for
	attribute AGN67XX_ATTR_OUTPUT_RELAY_POLARITY */

#define AGN67XX_VAL_RELAY_POLARITY_NORMAL                   0
#define AGN67XX_VAL_RELAY_POLARITY_REVERSED                 1

/*- Defined values for
	parameter Slope in function AgN67xx_DLogsItemConfigureDlogTriggerCurrent
	parameter Slope in function AgN67xx_DLogsItemConfigureDlogTriggerVoltage */

#define AGN67XX_VAL_DLOG_TRIGGER_SLOPE_POSITIVE             0
#define AGN67XX_VAL_DLOG_TRIGGER_SLOPE_NEGATIVE             1

/*- Defined values for
	parameter Source in function AgN67xx_AgilentN67xxDLogsConfigureDlogsTriggerSource */

#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_BUS                 0
#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_IMMEDIATE           1
#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_EXTERNAL            2
#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_VOLTAGE1            3
#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_VOLTAGE2            4
#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_VOLTAGE3            5
#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_VOLTAGE4            6
#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_CURRENT1            7
#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_CURRENT2            8
#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_CURRENT3            9
#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_CURRENT4            10
#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_ARB_RUN_STOP_KEY    11
#define AGN67XX_VAL_DLOG_TRIGGER_SOURCE_OUTPUT_ON_OFF_KEY   12

/*- Defined values for
	attribute AGN67XX_ATTR_OUTPUTS_ITEM_FOUR_WIRE_SENSE */

#define AGN67XX_VAL_OUTPUT_FOUR_WIRE_SENSE_INTERNAL         0
#define AGN67XX_VAL_OUTPUT_FOUR_WIRE_SENSE_EXTERNAL         1

/*- Defined values for
	attribute AGN67XX_ATTR_OUTPUTS_COUPLE_DELAY_OFFSET_MODE */

#define AGN67XX_VAL_COUPLE_DELAY_OFFSET_MODE_AUTO           0
#define AGN67XX_VAL_COUPLE_DELAY_OFFSET_MODE_MANUAL         1

/*- Defined values for
	attribute AGN67XX_ATTR_OUTPUTS5_ITEM2_SOURCE_REGULATION_MODE */

#define AGN67XX_VAL_SOURCE_FUNCTION_VOLTAGE                 0
#define AGN67XX_VAL_SOURCE_FUNCTION_CURRENT                 1

/*- Defined values for
	attribute AGN67XX_ATTR_MEASUREMENTS3_ITEM2_VOLTAGE_SENSE_SOURCE */

#define AGN67XX_VAL_VOLTAGE_SENSE_SOURCE_MAIN               0
#define AGN67XX_VAL_VOLTAGE_SENSE_SOURCE_AUX                1

/*- Defined values for
	attribute AGN67XX_ATTR_OUTPUTS5_ITEM2_VOLTAGE_SOURCE_BANDWIDTH */

#define AGN67XX_VAL_SOURCE_VOLTAGE_BANDWIDTH_DEFAULT        0
#define AGN67XX_VAL_SOURCE_VOLTAGE_BANDWIDTH_FAST1          1
#define AGN67XX_VAL_SOURCE_VOLTAGE_BANDWIDTH_FAST2          2
#define AGN67XX_VAL_SOURCE_VOLTAGE_BANDWIDTH_FAST3          3

/*- Defined values for
	parameter TransientSelect in function AgN67xx_Transients2Item2ListConfigure */

#define AGN67XX_VAL_LIST_TRANSIENT_NONE                     0
#define AGN67XX_VAL_LIST_TRANSIENT_ALL                      1
#define AGN67XX_VAL_LIST_TRANSIENT_VOLTAGE                  2
#define AGN67XX_VAL_LIST_TRANSIENT_CURRENT                  3


/****************************************************************************
 *---------------- Instrument Driver Function Declarations -----------------*
 ****************************************************************************/

/*- AgilentN67xx */

ViStatus _VI_FUNC AgN67xx_init(ViRsrc ResourceName, ViBoolean IdQuery, ViBoolean Reset, ViSession* Vi);
ViStatus _VI_FUNC AgN67xx_close(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_InitWithOptions(ViRsrc ResourceName, ViBoolean IdQuery, ViBoolean Reset, ViConstString OptionsString, ViSession* Vi);
ViStatus _VI_FUNC AgN67xx_GetChannelName(ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- Utility */

ViStatus _VI_FUNC AgN67xx_revision_query(ViSession Vi, ViChar DriverRev[], ViChar InstrRev[]);
ViStatus _VI_FUNC AgN67xx_error_message(ViSession Vi, ViStatus ErrorCode, ViChar ErrorMessage[]);
ViStatus _VI_FUNC AgN67xx_GetError(ViSession Vi, ViStatus* ErrorCode, ViInt32 ErrorDescriptionBufferSize, ViChar ErrorDescription[]);
ViStatus _VI_FUNC AgN67xx_ClearError(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_ClearInterchangeWarnings(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_GetNextCoercionRecord(ViSession Vi, ViInt32 CoercionRecordBufferSize, ViChar CoercionRecord[]);
ViStatus _VI_FUNC AgN67xx_GetNextInterchangeWarning(ViSession Vi, ViInt32 InterchangeWarningBufferSize, ViChar InterchangeWarning[]);
ViStatus _VI_FUNC AgN67xx_InvalidateAllAttributes(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_ResetInterchangeCheck(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_Disable(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_error_query(ViSession Vi, ViInt32* ErrorCode, ViChar ErrorMessage[]);
ViStatus _VI_FUNC AgN67xx_LockSession(ViSession Vi, ViBoolean* CallerHasLock);
ViStatus _VI_FUNC AgN67xx_reset(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_ResetWithDefaults(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_self_test(ViSession Vi, ViInt16* TestResult, ViChar TestMessage[]);
ViStatus _VI_FUNC AgN67xx_UnlockSession(ViSession Vi, ViBoolean* CallerHasLock);

/*- Attribute Accessors */

ViStatus _VI_FUNC AgN67xx_GetAttributeViInt32(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt32* AttributeValue);
ViStatus _VI_FUNC AgN67xx_GetAttributeViInt64(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt64* AttributeValue);
ViStatus _VI_FUNC AgN67xx_GetAttributeViReal64(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViReal64* AttributeValue);
ViStatus _VI_FUNC AgN67xx_GetAttributeViBoolean(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViBoolean* AttributeValue);
ViStatus _VI_FUNC AgN67xx_GetAttributeViSession(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViSession* AttributeValue);
ViStatus _VI_FUNC AgN67xx_GetAttributeViString(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt32 AttributeValueBufferSize, ViChar AttributeValue[]);
ViStatus _VI_FUNC AgN67xx_SetAttributeViInt32(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt32 AttributeValue);
ViStatus _VI_FUNC AgN67xx_SetAttributeViInt64(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt64 AttributeValue);
ViStatus _VI_FUNC AgN67xx_SetAttributeViReal64(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViReal64 AttributeValue);
ViStatus _VI_FUNC AgN67xx_SetAttributeViBoolean(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViBoolean AttributeValue);
ViStatus _VI_FUNC AgN67xx_SetAttributeViSession(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViSession AttributeValue);
ViStatus _VI_FUNC AgN67xx_SetAttributeViString(ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViConstString AttributeValue);

/*- Configuration */

ViStatus _VI_FUNC AgN67xx_ConfigureOutputEnabled(ViSession Vi, ViConstString ChannelName, ViBoolean Enabled);
ViStatus _VI_FUNC AgN67xx_ConfigureVoltageLevel(ViSession Vi, ViConstString ChannelName, ViReal64 Level);
ViStatus _VI_FUNC AgN67xx_ConfigureCurrentLimit(ViSession Vi, ViConstString ChannelName, ViInt32 Behavior, ViReal64 Limit);
ViStatus _VI_FUNC AgN67xx_ConfigureOVP(ViSession Vi, ViConstString ChannelName, ViBoolean Enabled, ViReal64 Limit);
ViStatus _VI_FUNC AgN67xx_ConfigureOutputRange(ViSession Vi, ViConstString ChannelName, ViInt32 RangeType, ViReal64 Range);
ViStatus _VI_FUNC AgN67xx_QueryMaxCurrentLimit(ViSession Vi, ViConstString ChannelName, ViReal64 VoltageLevel, ViReal64* MaxCurrentLimit);
ViStatus _VI_FUNC AgN67xx_QueryMaxVoltageLevel(ViSession Vi, ViConstString ChannelName, ViReal64 CurrentLimit, ViReal64* MaxVoltageLevel);

/*- Triggering */

ViStatus _VI_FUNC AgN67xx_ConfigureTriggeredCurrentLimit(ViSession Vi, ViConstString ChannelName, ViReal64 Limit);
ViStatus _VI_FUNC AgN67xx_ConfigureTriggeredVoltageLevel(ViSession Vi, ViConstString ChannelName, ViReal64 Level);
ViStatus _VI_FUNC AgN67xx_ConfigureTriggerSource(ViSession Vi, ViConstString ChannelName, ViInt32 Source);

/*- Action */

ViStatus _VI_FUNC AgN67xx_Measure(ViSession Vi, ViConstString ChannelName, ViInt32 MeasurementType, ViReal64* Measurement);
ViStatus _VI_FUNC AgN67xx_QueryOutputState(ViSession Vi, ViConstString ChannelName, ViInt32 OutputState, ViBoolean* InState);
ViStatus _VI_FUNC AgN67xx_ResetOutputProtection(ViSession Vi, ViConstString ChannelName);
ViStatus _VI_FUNC AgN67xx_Abort(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_Initiate(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_SendSoftwareTrigger(ViSession Vi);

/*- DCPwrOutput */

ViStatus _VI_FUNC AgN67xx_GetDCPwrOutputName(ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- DLog */

ViStatus _VI_FUNC AgN67xx_GetDLogName(ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- Measurement */

ViStatus _VI_FUNC AgN67xx_GetMeasurementName(ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- Output */

ViStatus _VI_FUNC AgN67xx_GetOutputName(ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- Protection */

ViStatus _VI_FUNC AgN67xx_GetProtectionName(ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- Status */

ViStatus _VI_FUNC AgN67xx_GetStatusName(ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- System */

ViStatus _VI_FUNC AgN67xx_GetSystemName(ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- Transient */

ViStatus _VI_FUNC AgN67xx_GetTransientName(ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[]);

/*- Measurements */

ViStatus _VI_FUNC AgN67xx_MeasurementsSendSoftwareTrigger(ViSession Vi);

/*- Item */

ViStatus _VI_FUNC AgN67xx_MeasurementsItemTrigInitiate(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgN67xx_MeasurementsItemTrigImmediate(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgN67xx_MeasurementsItemTrigAbort(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgN67xx_MeasurementsItemMeasureArray(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 MeasurementType, ViInt32 RetValBufferSize, ViReal64 RetVal[], ViInt32* RetValActualSize);
ViStatus _VI_FUNC AgN67xx_MeasurementsItemMeasure(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 MeasurementType, ViReal64* RetVal);
ViStatus _VI_FUNC AgN67xx_MeasurementsItemFetchArray(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 FetchType, ViInt32 RetValBufferSize, ViReal64 RetVal[], ViInt32* RetValActualSize);
ViStatus _VI_FUNC AgN67xx_MeasurementsItemFetch(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 FetchType, ViInt32 WindowType, ViReal64* RetVal);
ViStatus _VI_FUNC AgN67xx_MeasurementsItemConfigure(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 TriggerType, ViInt32 TriggerOffsetPoints, ViInt32 Points, ViReal64 SampleInterval);
ViStatus _VI_FUNC AgN67xx_MeasurementsItemGetMeasurementRange(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 MeasurementType, ViReal64* RetVal);
ViStatus _VI_FUNC AgN67xx_MeasurementsItemSetMeasurementRange(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 MeasurementType, ViReal64 Val);

/*- Item2 */

ViStatus _VI_FUNC AgN67xx_Measurements3Item2GetMeasurementRangeAuto(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 MeasurementType, ViBoolean* RetVal);
ViStatus _VI_FUNC AgN67xx_Measurements3Item2SetMeasurementRangeAuto(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 MeasurementType, ViBoolean Val);

/*- Outputs */

ViStatus _VI_FUNC AgN67xx_Outputs2GetCoupleMaxDelayOffset(ViSession Vi, ViReal64* RetVal);
ViStatus _VI_FUNC AgN67xx_OutputsConfigureOffSequence(ViSession Vi, ViReal64 Channel1Fall, ViReal64 Channel2Fall, ViReal64 Channel3Fall, ViReal64 Channel4Fall);
ViStatus _VI_FUNC AgN67xx_OutputsConfigureOnSequence(ViSession Vi, ViReal64 Channel1Rise, ViReal64 Channel2Rise, ViReal64 Channel3Rise, ViReal64 Channel4Rise);

/*- Item */

ViStatus _VI_FUNC AgN67xx_Outputs3ItemVoltageLevel(ViSession Vi, ViConstString RepCapIdentifier, ViReal64 Range, ViReal64 Val);
ViStatus _VI_FUNC AgN67xx_Outputs3ItemQueryVoltageLevelMax(ViSession Vi, ViConstString RepCapIdentifier, ViReal64* RetVal);
ViStatus _VI_FUNC AgN67xx_Outputs3ItemQueryState(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 OutputState, ViBoolean* RetVal);
ViStatus _VI_FUNC AgN67xx_Outputs3ItemQueryPowerLimitMax(ViSession Vi, ViConstString RepCapIdentifier, ViReal64* RetVal);
ViStatus _VI_FUNC AgN67xx_Outputs3ItemQueryCurrentLimitMax(ViSession Vi, ViConstString RepCapIdentifier, ViReal64* RetVal);
ViStatus _VI_FUNC AgN67xx_Outputs3ItemCurrentLimit(ViSession Vi, ViConstString RepCapIdentifier, ViReal64 Range, ViReal64 Val);
ViStatus _VI_FUNC AgN67xx_Outputs3ItemConfigureCurrentLimit(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 Behavior, ViReal64 Limit);

/*- item */

ViStatus _VI_FUNC AgN67xx_ProtectionsItemConfigureOVP(ViSession Vi, ViConstString RepCapIdentifier, ViReal64 Limit);
ViStatus _VI_FUNC AgN67xx_ProtectionsItemResetOutputProtection(ViSession Vi, ViConstString RepCapIdentifier);

/*- Statuses */

ViStatus _VI_FUNC AgN67xx_StatusesPreset(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_StatusesConfigureServiceRequest(ViSession Vi, ViInt32 Reason);
ViStatus _VI_FUNC AgN67xx_StatusesClear(ViSession Vi);

/*- Item */

ViStatus _VI_FUNC AgN67xx_StatusesItemQueryRegister(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 Register, ViInt32 SubRegister, ViInt32* RetVal);
ViStatus _VI_FUNC AgN67xx_StatusesItemConfigureRegister(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 Register, ViInt32 SubRegister, ViInt32 Val);
ViStatus _VI_FUNC AgN67xx_StatusesItemGetRegister(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 Register, ViInt32 SubRegister, ViInt32* RetVal);
ViStatus _VI_FUNC AgN67xx_StatusesItemSetRegister(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 Register, ViInt32 SubRegister, ViInt32 Val);

/*- Item2 */

ViStatus _VI_FUNC AgN67xx_Statuses3Item2ConfigureServiceRequest(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 Reason);

/*- Systems */

ViStatus _VI_FUNC AgN67xx_SystemsConfigureIOPort(ViSession Vi, ViInt32 Pin, ViInt32 Function, ViInt32 Polarity);
ViStatus _VI_FUNC AgN67xx_SystemsDeleteAllParallelGroups(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_SystemsDeleteParallelGroup(ViSession Vi, ViInt32 Val);
ViStatus _VI_FUNC AgN67xx_SystemsDisableLocalControls(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_SystemsEnableLocalControls(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_SystemsQueryIOPort(ViSession Vi, ViInt32 Pin, ViInt32* pFunction, ViInt32* pPolarity);
ViStatus _VI_FUNC AgN67xx_SystemsRecallState(ViSession Vi, ViConstString Val);
ViStatus _VI_FUNC AgN67xx_SystemsSaveState(ViSession Vi, ViConstString Val);
ViStatus _VI_FUNC AgN67xx_SystemsWaitForOperationComplete(ViSession Vi, ViInt32 MaxTimeMilliseconds);
ViStatus _VI_FUNC AgN67xx_SystemsGetDate(ViSession Vi, ViInt32* Year, ViInt32* Month, ViInt32* Day);
ViStatus _VI_FUNC AgN67xx_SystemsGetTime(ViSession Vi, ViInt32* Hour, ViInt32* Minute, ViInt32* Second);
ViStatus _VI_FUNC AgN67xx_SystemsSetDate(ViSession Vi, ViInt32 Year, ViInt32 Month, ViInt32 Day);
ViStatus _VI_FUNC AgN67xx_SystemsSetTime(ViSession Vi, ViInt32 Hour, ViInt32 Minute, ViInt32 Second);
ViStatus _VI_FUNC AgN67xx_SystemRead(ViSession Vi, ViInt32 Size, ViChar Value[], ViInt32* ActualSize);
ViStatus _VI_FUNC AgN67xx_SystemWrite(ViSession Vi, ViConstString CommandString);

/*- Transients */

ViStatus _VI_FUNC AgN67xx_TransientsSendSoftwareTrigger(ViSession Vi);

/*- Item */

ViStatus _VI_FUNC AgN67xx_TransientsItemTrigInitiate(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgN67xx_TransientsItemTrigImmediate(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgN67xx_TransientsItemTrigAbort(ViSession Vi, ViConstString RepCapIdentifier);
ViStatus _VI_FUNC AgN67xx_TransientsItemListTrigOutPoints(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 BOSBufferSize, ViBoolean BOS[], ViInt32* BOSActualSize, ViInt32 EOSBufferSize, ViBoolean EOS[], ViInt32* EOSActualSize);
ViStatus _VI_FUNC AgN67xx_TransientsItemListPoints(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 voltListBufferSize, ViReal64 voltList[], ViInt32* voltListActualSize, ViInt32 currListBufferSize, ViReal64 currList[], ViInt32* currListActualSize, ViInt32 dwellListBufferSize, ViReal64 dwellList[], ViInt32* dwellListActualSize);
ViStatus _VI_FUNC AgN67xx_TransientsItemListConfigure(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 Pace, ViBoolean ListTermination, ViInt32 Repeat, ViBoolean InfiniteRepeat);
ViStatus _VI_FUNC AgN67xx_TransientsItemGetListLength(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 ListType, ViInt32* RetVal);
ViStatus _VI_FUNC AgN67xx_TransientsItemGetStepTrigLevel(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 TriggerLevelType, ViReal64* RetVal);
ViStatus _VI_FUNC AgN67xx_TransientsItemSetStepTrigLevel(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 TriggerLevelType, ViReal64 Val);

/*- Item2 */

ViStatus _VI_FUNC AgN67xx_Transients2Item2ListConfigure(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 Pace, ViBoolean ListTermination, ViInt32 Repeat, ViBoolean InfiniteRepeat, ViInt32 TransientSelect);

/*- Dlogs */

ViStatus _VI_FUNC AgN67xx_AgilentN67xxDLogsConfigureDlogsTriggerSource(ViSession Vi, ViInt32 Source);
ViStatus _VI_FUNC AgN67xx_AgilentN67xxDLogsTrigger(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_AgilentN67xxDLogsConfigureDlogsTime(ViSession Vi, ViInt32 Time, ViReal64 TimeInterval);
ViStatus _VI_FUNC AgN67xx_AgilentN67xxDLogsConfigureDlogsTriggerOffset(ViSession Vi, ViInt32 OffsetPcnt);
ViStatus _VI_FUNC AgN67xx_AgilentN67xxDLogsConfigureDlogsFunctionMinMax(ViSession Vi, ViBoolean EnableMinMaxLogging);
ViStatus _VI_FUNC AgN67xx_DlogsAbortDlog(ViSession Vi);
ViStatus _VI_FUNC AgN67xx_DlogsInitiate(ViSession Vi, ViConstString Filename);

/*- Item */

ViStatus _VI_FUNC AgN67xx_DLogsItemConfigureDlogFunction(ViSession Vi, ViConstString RepCapIdentifier, ViBoolean EnableCurrentLogging, ViBoolean EnableVoltageLogging);
ViStatus _VI_FUNC AgN67xx_DLogsItemConfigureDlogTriggerCurrent(ViSession Vi, ViConstString RepCapIdentifier, ViReal64 Level, ViInt32 Slope);
ViStatus _VI_FUNC AgN67xx_DLogsItemConfigureDlogTriggerVoltage(ViSession Vi, ViConstString RepCapIdentifier, ViReal64 Level, ViInt32 Slope);

/*- Item2 */

ViStatus _VI_FUNC AgN67xx_Dlogs2Item2SetDlogsMeasurementRange(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 MeasurementType, ViReal64 Val);
ViStatus _VI_FUNC AgN67xx_Dlogs2Item2GetDlogsMeasurementRangeAuto(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 MeasurementType, ViBoolean* RetVal);
ViStatus _VI_FUNC AgN67xx_Dlogs2Item2SetDlogsMeasurementRangeAuto(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 MeasurementType, ViBoolean Val);
ViStatus _VI_FUNC AgN67xx_Dlogs2Item2GetDlogsMeasurementRange(ViSession Vi, ViConstString RepCapIdentifier, ViInt32 MeasurementType, ViReal64* RetVal);

/*- Files */

ViStatus _VI_FUNC AgN67xx_Delete(ViSession Vi, ViConstString Filename);
ViStatus _VI_FUNC AgN67xx_ExportDlog(ViSession Vi, ViConstString Filename);
ViStatus _VI_FUNC AgN67xx_ReadFirst(ViSession Vi, ViConstString Filename, ViInt32 BufferBufferSize, ViByte Buffer[], ViInt32* BufferActualSize, ViInt32 BufferSize, ViInt32* RetVal);
ViStatus _VI_FUNC AgN67xx_ReadNext(ViSession Vi, ViInt32 BufferBufferSize, ViByte Buffer[], ViInt32* BufferActualSize, ViInt32 BufferSize, ViInt32* RetVal);
ViStatus _VI_FUNC AgN67xx_GetSize(ViSession Vi, ViConstString Filename, ViInt32* RetVal);

/*- System */

ViStatus _VI_FUNC AgN67xx_viWrite(ViSession Vi, ViInt64 Count, ViByte Buffer[], ViInt64* ReturnCount);
ViStatus _VI_FUNC AgN67xx_viRead(ViSession Vi, ViInt64 BufferSize, ViByte Buffer[], ViInt64* ReturnCount);
ViStatus _VI_FUNC AgN67xx_SystemReadString(ViSession Vi, ViInt32 ValBufferSize, ViChar Val[]);
ViStatus _VI_FUNC AgN67xx_SystemWriteString(ViSession Vi, ViConstString Data);


/****************************************************************************
 *----------------- Instrument Error And Completion Codes ------------------*
 ****************************************************************************/
#ifndef _IVIC_ERROR_BASE_DEFINES_
#define _IVIC_ERROR_BASE_DEFINES_

#define IVIC_WARN_BASE                           (0x3FFA0000L)
#define IVIC_CROSS_CLASS_WARN_BASE               (IVIC_WARN_BASE + 0x1000)
#define IVIC_CLASS_WARN_BASE                     (IVIC_WARN_BASE + 0x2000)
#define IVIC_SPECIFIC_WARN_BASE                  (IVIC_WARN_BASE + 0x4000)

#define IVIC_ERROR_BASE                          (0xBFFA0000L)
#define IVIC_CROSS_CLASS_ERROR_BASE              (IVIC_ERROR_BASE + 0x1000)
#define IVIC_CLASS_ERROR_BASE                    (IVIC_ERROR_BASE + 0x2000)
#define IVIC_SPECIFIC_ERROR_BASE                 (IVIC_ERROR_BASE + 0x4000)
#define IVIC_LXISYNC_ERROR_BASE                  (IVIC_ERROR_BASE + 0x2000)

#endif


#define AGN67XX_ERROR_CANNOT_RECOVER                        (IVIC_ERROR_BASE + 0x0000)
#define AGN67XX_ERROR_INSTRUMENT_STATUS                     (IVIC_ERROR_BASE + 0x0001)
#define AGN67XX_ERROR_CANNOT_OPEN_FILE                      (IVIC_ERROR_BASE + 0x0002)
#define AGN67XX_ERROR_READING_FILE                          (IVIC_ERROR_BASE + 0x0003)
#define AGN67XX_ERROR_WRITING_FILE                          (IVIC_ERROR_BASE + 0x0004)
#define AGN67XX_ERROR_INVALID_PATHNAME                      (IVIC_ERROR_BASE + 0x000B)
#define AGN67XX_ERROR_INVALID_VALUE                         (IVIC_ERROR_BASE + 0x0010)
#define AGN67XX_ERROR_FUNCTION_NOT_SUPPORTED                (IVIC_ERROR_BASE + 0x0011)
#define AGN67XX_ERROR_ATTRIBUTE_NOT_SUPPORTED               (IVIC_ERROR_BASE + 0x0012)
#define AGN67XX_ERROR_VALUE_NOT_SUPPORTED                   (IVIC_ERROR_BASE + 0x0013)
#define AGN67XX_ERROR_NOT_INITIALIZED                       (IVIC_ERROR_BASE + 0x001D)
#define AGN67XX_ERROR_UNKNOWN_CHANNEL_NAME                  (IVIC_ERROR_BASE + 0x0020)
#define AGN67XX_ERROR_TOO_MANY_OPEN_FILES                   (IVIC_ERROR_BASE + 0x0023)
#define AGN67XX_ERROR_CHANNEL_NAME_REQUIRED                 (IVIC_ERROR_BASE + 0x0044)
#define AGN67XX_ERROR_MISSING_OPTION_NAME                   (IVIC_ERROR_BASE + 0x0049)
#define AGN67XX_ERROR_MISSING_OPTION_VALUE                  (IVIC_ERROR_BASE + 0x004A)
#define AGN67XX_ERROR_BAD_OPTION_NAME                       (IVIC_ERROR_BASE + 0x004B)
#define AGN67XX_ERROR_BAD_OPTION_VALUE                      (IVIC_ERROR_BASE + 0x004C)
#define AGN67XX_ERROR_OUT_OF_MEMORY                         (IVIC_ERROR_BASE + 0x0056)
#define AGN67XX_ERROR_OPERATION_PENDING                     (IVIC_ERROR_BASE + 0x0057)
#define AGN67XX_ERROR_NULL_POINTER                          (IVIC_ERROR_BASE + 0x0058)
#define AGN67XX_ERROR_UNEXPECTED_RESPONSE                   (IVIC_ERROR_BASE + 0x0059)
#define AGN67XX_ERROR_FILE_NOT_FOUND                        (IVIC_ERROR_BASE + 0x005B)
#define AGN67XX_ERROR_INVALID_FILE_FORMAT                   (IVIC_ERROR_BASE + 0x005C)
#define AGN67XX_ERROR_STATUS_NOT_AVAILABLE                  (IVIC_ERROR_BASE + 0x005D)
#define AGN67XX_ERROR_ID_QUERY_FAILED                       (IVIC_ERROR_BASE + 0x005E)
#define AGN67XX_ERROR_RESET_FAILED                          (IVIC_ERROR_BASE + 0x005F)
#define AGN67XX_ERROR_RESOURCE_UNKNOWN                      (IVIC_ERROR_BASE + 0x0060)
#define AGN67XX_ERROR_ALREADY_INITIALIZED                   (IVIC_ERROR_BASE + 0x0061)
#define AGN67XX_ERROR_CANNOT_CHANGE_SIMULATION_STATE        (IVIC_ERROR_BASE + 0x0062)
#define AGN67XX_ERROR_INVALID_NUMBER_OF_LEVELS_IN_SELECTOR  (IVIC_ERROR_BASE + 0x0063)
#define AGN67XX_ERROR_INVALID_RANGE_IN_SELECTOR             (IVIC_ERROR_BASE + 0x0064)
#define AGN67XX_ERROR_UNKOWN_NAME_IN_SELECTOR               (IVIC_ERROR_BASE + 0x0065)
#define AGN67XX_ERROR_BADLY_FORMED_SELECTOR                 (IVIC_ERROR_BASE + 0x0066)
#define AGN67XX_ERROR_UNKNOWN_PHYSICAL_IDENTIFIER           (IVIC_ERROR_BASE + 0x0067)
#define AGN67XX_ERROR_INVALID_ATTRIBUTE                     (IVIC_ERROR_BASE + 0x000C)
#define AGN67XX_ERROR_TYPES_DO_NOT_MATCH                    (IVIC_ERROR_BASE + 0x0015)
#define AGN67XX_ERROR_IVI_ATTR_NOT_WRITABLE                 (IVIC_ERROR_BASE + 0x000D)
#define AGN67XX_ERROR_IVI_ATTR_NOT_READABLE                 (IVIC_ERROR_BASE + 0x000E)
#define AGN67XX_ERROR_INVALID_SESSION_HANDLE                (IVIC_ERROR_BASE + 0x1190)



#define AGN67XX_SUCCESS                                     0
#define AGN67XX_WARN_NSUP_ID_QUERY                          (IVIC_WARN_BASE + 0x0065)
#define AGN67XX_WARN_NSUP_RESET                             (IVIC_WARN_BASE + 0x0066)
#define AGN67XX_WARN_NSUP_SELF_TEST                         (IVIC_WARN_BASE + 0x0067)
#define AGN67XX_WARN_NSUP_ERROR_QUERY                       (IVIC_WARN_BASE + 0x0068)
#define AGN67XX_WARN_NSUP_REV_QUERY                         (IVIC_WARN_BASE + 0x0069)



#define AGN67XX_ERROR_TRIGGER_NOT_SOFTWARE                  (IVIC_CROSS_CLASS_ERROR_BASE + 0x0001)
#define AGN67XX_ERROR_PERSONALITY_NOT_ACTIVE                (IVIC_SPECIFIC_ERROR_BASE + 0x0211)
#define AGN67XX_ERROR_PERSONALITY_NOT_INSTALLED             (IVIC_SPECIFIC_ERROR_BASE + 0x0212)
#define AGN67XX_ERROR_PERSONALITY_NOT_LICENSED              (IVIC_SPECIFIC_ERROR_BASE + 0x0213)
#define AGN67XX_ERROR_IO_GENERAL                            (IVIC_SPECIFIC_ERROR_BASE + 0x0214)
#define AGN67XX_ERROR_IO_TIMEOUT                            (IVIC_SPECIFIC_ERROR_BASE + 0x0215)
#define AGN67XX_ERROR_MODEL_NOT_SUPPORTED                   (IVIC_SPECIFIC_ERROR_BASE + 0x0216)
#define AGN67XX_ERROR_WRAPPED_DRIVER_ERROR                  (IVIC_SPECIFIC_ERROR_BASE + 0x0218)
#define AGN67XX_ERROR_METHOD_NOT_SUPPORTED                  (IVIC_SPECIFIC_ERROR_BASE + 0x0001)
#define AGN67XX_ERROR_NUMERIC_STRINGS_ONLY                  (IVIC_SPECIFIC_ERROR_BASE + 0x0002)
#define AGN67XX_ERROR_MAX_TIME_EXCEEDED                     (IVIC_SPECIFIC_ERROR_BASE + 0x0003)
#define AGN67XX_ERROR_SIMULATION_MODE_ONLY                  (IVIC_SPECIFIC_ERROR_BASE + 0x0004)
#define AGN67XX_ERROR_NO_SIMULATE_SUPPORT                   (IVIC_SPECIFIC_ERROR_BASE + 0x0005)
#define AGN67XX_ERROR_NOT_SUPPORTED                         (IVIC_SPECIFIC_ERROR_BASE + 0x0006)




/****************************************************************************
 *---------------------------- End Include File ----------------------------*
 ****************************************************************************/
#if defined(__cplusplus) || defined(__cplusplus__)
}
#endif
#endif // __AGN67XX_HEADER
