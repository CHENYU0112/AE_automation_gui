from __future__ import annotations


class IIviACPwrImpedance:
    def __init__(self):
        pass

    @property
    def Inductive(self):
        raise NotImplementedError

    @Inductive.setter
    def Inductive(self, value):
        """
        The inductive output impedance. This value affects the power source output when
        the output impedance Enabled property is set to True.
        """
        raise NotImplementedError

    @property
    def Enabled(self):
        raise NotImplementedError

    @Enabled.setter
    def Enabled(self, value):
        """
        When set to True, this property allows the output impedance resistive and output
        impedance inductive property values to affect the power source output.
        """
        raise NotImplementedError

    @property
    def Resistive(self):
        raise NotImplementedError

    @Resistive.setter
    def Resistive(self, value):
        """
        The resistive output impedance. This value affects the power source output when
        the output impedance Enabled property is set to True.
        """
        raise NotImplementedError

    def Configure(self, Enabled, ResistiveValue, InductiveValue):
        """
        Configures the output impedance Enabled, Resistive and Inductive properties.

        :param Enabled: Sets the output impedance Enabled property.
        :type Enabled: bool
        :param ResistiveValue: Sets the output impedance Resistive property.
        :type ResistiveValue: float
        :param InductiveValue: Sets the output impedance Inductive property.
        :type InductiveValue: float
        """
        raise NotImplementedError

    def QueryCapabilities(self):
        """
        Returns the minimum and maximum resistive and inductive impedance values
        supported by the power source for the present output configuration.

        """
        raise NotImplementedError
