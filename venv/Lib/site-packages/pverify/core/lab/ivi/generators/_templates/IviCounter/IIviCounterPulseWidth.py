from .{drivername} import *


class IIviCounterPulseWidth:
    def __init__(self, root):
        self.root = root
        """:type : pverify.drivers.{group}.{drivername}.I{iviclass}.I{iviclass}"""

    @property
    def Channel(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 18, 1024)

    @Channel.setter
    def Channel(self, value):
        """
        Specifies the input channel the pulse width is measured on.
        """
        self.root.dllwrap.SetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 18, value)

    @property
    def Estimate(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 19)

    @Estimate.setter
    def Estimate(self, value):
        """
        Specifies the estimated pulse width, in seconds, for the pulse width function.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 19, value)

    @property
    def Resolution(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 20)

    @Resolution.setter
    def Resolution(self, value):
        """
        Specifies the resolution of the measurement, in seconds, for the pulse width
        function.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 20, value)

    def Configure(self, Channel, Estimate, Resolution):
        """
        Configures the estimate and resolution attributes for a pulse width measurement.

        :param Channel: Specifies the channel the pulse width will be measured on.
        :type Channel: str
        :param Estimate: Specifies the estimated pulse width.
        :type Estimate: float
        :param Resolution: Specifies the resolution of the pulse width measurement. It is the quantization
            size, i.e. the smallest delta value that can be detected.
        :type Resolution: float
        """
        self.root.dllwrap.ConfigurePulseWidth(Channel, Estimate, Resolution)
