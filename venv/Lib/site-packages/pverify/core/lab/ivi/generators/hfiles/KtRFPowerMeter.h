/******************************************************************************
 *
 * Copyright Keysight Technologies 2014 - 2015
 *
 *****************************************************************************/

#ifndef __KTRFPOWERMETER_HEADER
#define __KTRFPOWERMETER_HEADER

#include <ivivisatype.h>

#if defined(__cplusplus) || defined(__cplusplus__)
extern "C" {
#endif

/****************************************************************************
 *---------------------------- Attribute Defines ---------------------------*
 ****************************************************************************/
#ifndef IVI_ATTR_BASE
#define IVI_ATTR_BASE                 1000000
#endif

#ifndef IVI_INHERENT_ATTR_BASE
#define IVI_INHERENT_ATTR_BASE        (IVI_ATTR_BASE +  50000)   /* base for inherent capability attributes */
#endif

#ifndef IVI_CLASS_ATTR_BASE
#define IVI_CLASS_ATTR_BASE           (IVI_ATTR_BASE + 250000)   /* base for IVI-defined class attributes */
#endif

#ifndef IVI_LXISYNC_ATTR_BASE
#define IVI_LXISYNC_ATTR_BASE         (IVI_ATTR_BASE + 950000)   /* base for IviLxiSync attributes */
#endif

#ifndef IVI_SPECIFIC_ATTR_BASE
#define IVI_SPECIFIC_ATTR_BASE        (IVI_ATTR_BASE + 150000)   /* base for attributes of specific drivers */
#endif


/*===== IVI Inherent Instrument Attributes ==============================*/

/*- Driver Identification */

#define KTRFPOWERMETER_ATTR_SPECIFIC_DRIVER_DESCRIPTION              (IVI_INHERENT_ATTR_BASE + 514L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_SPECIFIC_DRIVER_PREFIX                   (IVI_INHERENT_ATTR_BASE + 302L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_SPECIFIC_DRIVER_VENDOR                   (IVI_INHERENT_ATTR_BASE + 513L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_SPECIFIC_DRIVER_REVISION                 (IVI_INHERENT_ATTR_BASE + 551L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION (IVI_INHERENT_ATTR_BASE + 515L)  /* ViInt32, read-only */
#define KTRFPOWERMETER_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION (IVI_INHERENT_ATTR_BASE + 516L)  /* ViInt32, read-only */

/*- User Options */

#define KTRFPOWERMETER_ATTR_RANGE_CHECK                     (IVI_INHERENT_ATTR_BASE + 2L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_QUERY_INSTRUMENT_STATUS         (IVI_INHERENT_ATTR_BASE + 3L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CACHE                           (IVI_INHERENT_ATTR_BASE + 4L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_SIMULATE                        (IVI_INHERENT_ATTR_BASE + 5L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_RECORD_COERCIONS                (IVI_INHERENT_ATTR_BASE + 6L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_INTERCHANGE_CHECK               (IVI_INHERENT_ATTR_BASE + 21L)  /* ViBoolean, read-write */

/*- Advanced Session Information */

#define KTRFPOWERMETER_ATTR_LOGICAL_NAME                    (IVI_INHERENT_ATTR_BASE + 305L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_IO_RESOURCE_DESCRIPTOR          (IVI_INHERENT_ATTR_BASE + 304L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_DRIVER_SETUP                    (IVI_INHERENT_ATTR_BASE + 7L)  /* ViString, read-only */

/*- Driver Capabilities */

#define KTRFPOWERMETER_ATTR_GROUP_CAPABILITIES              (IVI_INHERENT_ATTR_BASE + 401L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_SUPPORTED_INSTRUMENT_MODELS     (IVI_INHERENT_ATTR_BASE + 327L)  /* ViString, read-only */

/*- Instrument Identification */

#define KTRFPOWERMETER_ATTR_INSTRUMENT_FIRMWARE_REVISION    (IVI_INHERENT_ATTR_BASE + 510L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_INSTRUMENT_MANUFACTURER         (IVI_INHERENT_ATTR_BASE + 511L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_INSTRUMENT_MODEL                (IVI_INHERENT_ATTR_BASE + 512L)  /* ViString, read-only */


/*===== Instrument-Specific Attributes =====================================*/

/*- System */

#define KTRFPOWERMETER_ATTR_SYSTEM_TRACE_ENABLED            (IVI_SPECIFIC_ATTR_BASE + 3L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_SYSTEM_SERIAL_NUMBER            (IVI_SPECIFIC_ATTR_BASE + 4L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_SYSTEM_SOCKET_NUMBER            (IVI_SPECIFIC_ATTR_BASE + 187L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_SYSTEM_VERSION                  (IVI_SPECIFIC_ATTR_BASE + 188L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_CALIBRATOR_ENABLED              (IVI_SPECIFIC_ATTR_BASE + 189L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_SYSTEM_IO_TIMEOUT               (IVI_SPECIFIC_ATTR_BASE + 283L)  /* ViInt32, read-write */

/*- Channel */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_AUTO_RANGE_ENABLED      (IVI_SPECIFIC_ATTR_BASE + 5L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_AUTO_ZERO_ENABLED       (IVI_SPECIFIC_ATTR_BASE + 6L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_EXPECTED_FREQUENCY      (IVI_SPECIFIC_ATTR_BASE + 24L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_BRIDGE_RESISTANCE       (IVI_SPECIFIC_ATTR_BASE + 91L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_HOLD_STATE              (IVI_SPECIFIC_ATTR_BASE + 90L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_LOWER_RANGE             (IVI_SPECIFIC_ATTR_BASE + 25L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_REFERENCE_CAL_FACTOR    (IVI_SPECIFIC_ATTR_BASE + 27L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_RESISTANCE_TYPE         (IVI_SPECIFIC_ATTR_BASE + 92L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_RESISTANCE_VALUE        (IVI_SPECIFIC_ATTR_BASE + 93L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_BUFFER_SIZE             (IVI_SPECIFIC_ATTR_BASE + 89L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_SENSOR_RANGE            (IVI_SPECIFIC_ATTR_BASE + 88L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_SENSOR_MODE             (IVI_SPECIFIC_ATTR_BASE + 28L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_UPPER_RANGE             (IVI_SPECIFIC_ATTR_BASE + 30L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_MEASUREMENT_RATE        (IVI_SPECIFIC_ATTR_BASE + 26L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_VIDEO_BANDWIDTH         (IVI_SPECIFIC_ATTR_BASE + 31L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_VIDEO_BANDWIDTH_ENABLED (IVI_SPECIFIC_ATTR_BASE + 32L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_ZERO_TYPE               (IVI_SPECIFIC_ATTR_BASE + 288L)  /* ViInt32, read-write */

/*- TimeGate */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TIMEGATES_COUNT                (IVI_SPECIFIC_ATTR_BASE + 8L)  /* ViInt32, read-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TIMEGATES_ITEM_START           (IVI_SPECIFIC_ATTR_BASE + 33L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TIMEGATES_ITEM_LENGTH          (IVI_SPECIFIC_ATTR_BASE + 34L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TIMEGATES_ITEM_GET_GATING_TYPE (IVI_SPECIFIC_ATTR_BASE + 159L)  /* ViInt32, read-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TIMEGATES_ITEM_SET_GATING_TYPE (IVI_SPECIFIC_ATTR_BASE + 160L)  /* ViInt32, write-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TIMEGATES_ITEM_LENGTH_MAX      (IVI_SPECIFIC_ATTR_BASE + 161L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TIMEGATES_ITEM_LENGTH_MIN      (IVI_SPECIFIC_ATTR_BASE + 162L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TIMEGATES_ITEM_START_MAX       (IVI_SPECIFIC_ATTR_BASE + 163L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TIMEGATES_ITEM_START_MIN       (IVI_SPECIFIC_ATTR_BASE + 164L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_APERTURE                                     (IVI_SPECIFIC_ATTR_BASE + 212L)  /* ViReal64, read-write */

/*- Averaging */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_AVERAGING_COUNT                   (IVI_SPECIFIC_ATTR_BASE + 10L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_AVERAGING_ENABLED                 (IVI_SPECIFIC_ATTR_BASE + 11L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_AVERAGING_MODE                    (IVI_SPECIFIC_ATTR_BASE + 12L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_AVERAGING_VIDEO_AVERAGING_COUNT   (IVI_SPECIFIC_ATTR_BASE + 13L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_AVERAGING_VIDEO_AVERAGING_ENABLED (IVI_SPECIFIC_ATTR_BASE + 14L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_AVERAGING_STEP_DETECTION          (IVI_SPECIFIC_ATTR_BASE + 94L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_AVERAGING_VOLTAGE_COUNT           (IVI_SPECIFIC_ATTR_BASE + 95L)  /* ViInt32, read-write */

/*- Trace */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRACE_ENABLED                  (IVI_SPECIFIC_ATTR_BASE + 35L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRACE_LENGTH                   (IVI_SPECIFIC_ATTR_BASE + 36L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRACE_LOWER                    (IVI_SPECIFIC_ATTR_BASE + 37L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRACE_START                    (IVI_SPECIFIC_ATTR_BASE + 41L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRACE_UNIT                     (IVI_SPECIFIC_ATTR_BASE + 46L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRACE_UPPER                    (IVI_SPECIFIC_ATTR_BASE + 47L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRACE_PULSE_DURATION_REFERENCE (IVI_SPECIFIC_ATTR_BASE + 165L)  /* ViReal64, read-write */

/*- Trigger */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRIGGER_AUTO_DELAY_ENABLED  (IVI_SPECIFIC_ATTR_BASE + 48L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRIGGER_CONTINUOUS_ENABLED  (IVI_SPECIFIC_ATTR_BASE + 49L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRIGGER_SOURCE              (IVI_SPECIFIC_ATTR_BASE + 50L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRIGGER_INIT_CONTINUOUS_ALL (IVI_SPECIFIC_ATTR_BASE + 166L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRIGGER_CYCLE               (IVI_SPECIFIC_ATTR_BASE + 167L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRIGGER_INPUT_IMPEDANCE     (IVI_SPECIFIC_ATTR_BASE + 168L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRIGGER_COUNT               (IVI_SPECIFIC_ATTR_BASE + 169L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_QUALIFIER_TIME                            (IVI_SPECIFIC_ATTR_BASE + 287L)  /* ViReal64, read-write */

/*- Corrections */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_CAL_FACTOR_TABLE         (IVI_SPECIFIC_ATTR_BASE + 15L)  /* ViString, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_CAL_FACTOR_TABLE_ENABLED (IVI_SPECIFIC_ATTR_BASE + 16L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_CALIBRATION_FACTOR       (IVI_SPECIFIC_ATTR_BASE + 17L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_OFFSET                   (IVI_SPECIFIC_ATTR_BASE + 22L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_OFFSET_ENABLED           (IVI_SPECIFIC_ATTR_BASE + 23L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_STATE_ENABLED                                     (IVI_SPECIFIC_ATTR_BASE + 211L)  /* ViBoolean, read-write */

/*- DutyCycle */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_DUTY_CYCLE_STATE_ENABLED (IVI_SPECIFIC_ATTR_BASE + 19L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_DUTY_CYCLE               (IVI_SPECIFIC_ATTR_BASE + 18L)  /* ViReal64, read-write */

/*- Frequency */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_FREQUENCY_OFFSET_UNIT          (IVI_SPECIFIC_ATTR_BASE + 96L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_FREQUENCY_OFFSET_TABLE_ENABLED (IVI_SPECIFIC_ATTR_BASE + 21L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_FREQUENCY_OFFSET_TABLE         (IVI_SPECIFIC_ATTR_BASE + 20L)  /* ViString, read-write */

/*- Gamma */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_GAMMA_OFFSET_TABLE_ENABLED (IVI_SPECIFIC_ATTR_BASE + 204L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_GAMMA_MAGNITUDE            (IVI_SPECIFIC_ATTR_BASE + 228L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_GAMMA_OFFSET_TABLE         (IVI_SPECIFIC_ATTR_BASE + 203L)  /* ViString, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_GAMMA_ENABLED              (IVI_SPECIFIC_ATTR_BASE + 227L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_GAMMA_PHASE                (IVI_SPECIFIC_ATTR_BASE + 229L)  /* ViReal64, read-write */

/*- SParameter */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_SPARAMETER_OFFSET_TABLE_ENABLED (IVI_SPECIFIC_ATTR_BASE + 206L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_SPARAMETER_OFFSET_TABLE         (IVI_SPECIFIC_ATTR_BASE + 205L)  /* ViString, read-write */

/*- CCDF */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_MAX                          (IVI_SPECIFIC_ATTR_BASE + 141L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_AVG_POWER                    (IVI_SPECIFIC_ATTR_BASE + 144L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_CHANNEL_PEAK_POWER           (IVI_SPECIFIC_ATTR_BASE + 145L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_CONTINUOUS                   (IVI_SPECIFIC_ATTR_BASE + 146L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_CUMULATIVE_COUNT             (IVI_SPECIFIC_ATTR_BASE + 147L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_GAUSSIAN_TRACE_STATE         (IVI_SPECIFIC_ATTR_BASE + 148L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_PEAK_POWER                   (IVI_SPECIFIC_ATTR_BASE + 149L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_REFERENCE_TRACE_STATE        (IVI_SPECIFIC_ATTR_BASE + 150L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_REF_TRACE_AVG_POWER          (IVI_SPECIFIC_ATTR_BASE + 151L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_REF_TRACE_CHANNEL_PEAK_POWER (IVI_SPECIFIC_ATTR_BASE + 152L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_REF_TRACE_PEAK_POWER         (IVI_SPECIFIC_ATTR_BASE + 153L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_TRACE_ENABLED                (IVI_SPECIFIC_ATTR_BASE + 154L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_TIME_GATE_CYCLE              (IVI_SPECIFIC_ATTR_BASE + 155L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_TIME_GATE_ENABLED            (IVI_SPECIFIC_ATTR_BASE + 156L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_TIME_GATE_LENGTH             (IVI_SPECIFIC_ATTR_BASE + 157L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_STATISTICS_CCDF_TIME_GATE_START              (IVI_SPECIFIC_ATTR_BASE + 158L)  /* ViReal64, read-write */

/*- Temperature */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TEMPERATURE       (IVI_SPECIFIC_ATTR_BASE + 29L)  /* ViReal64, read-only */

/*- External */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TEMPERATURE_EXTERNAL_RAW_TEMPERATURE (IVI_SPECIFIC_ATTR_BASE + 86L)  /* ViInt32, read-only */

/*- Internal */

#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TEMPERATURE_INTERNAL_RAW_TEMPERATURE (IVI_SPECIFIC_ATTR_BASE + 87L)  /* ViInt32, read-only */
#define KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TEMPERATURE_INTERNAL_TEMPERATURE     (IVI_SPECIFIC_ATTR_BASE + 85L)  /* ViReal64, read-only */

/*- Measurement */

#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_COUNT               (IVI_SPECIFIC_ATTR_BASE + 7L)  /* ViInt32, read-only */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_FEED1_CHANNEL       (IVI_SPECIFIC_ATTR_BASE + 67L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_FEED1_GATE          (IVI_SPECIFIC_ATTR_BASE + 68L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_FEED1_TYPE          (IVI_SPECIFIC_ATTR_BASE + 69L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_FEED2_CHANNEL       (IVI_SPECIFIC_ATTR_BASE + 70L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_FEED2_GATE          (IVI_SPECIFIC_ATTR_BASE + 71L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_FEED2_TYPE          (IVI_SPECIFIC_ATTR_BASE + 72L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIMIT_AUTO_CLEAR    (IVI_SPECIFIC_ATTR_BASE + 73L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIMIT_ENABLED       (IVI_SPECIFIC_ATTR_BASE + 74L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIMIT_FAILS         (IVI_SPECIFIC_ATTR_BASE + 75L)  /* ViInt32, read-only */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIMIT_LOWER         (IVI_SPECIFIC_ATTR_BASE + 76L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIMIT_UPPER         (IVI_SPECIFIC_ATTR_BASE + 77L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_OFFSET              (IVI_SPECIFIC_ATTR_BASE + 78L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_OFFSET_ENABLED      (IVI_SPECIFIC_ATTR_BASE + 79L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_OPERATION           (IVI_SPECIFIC_ATTR_BASE + 80L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_RATIO_UNITS         (IVI_SPECIFIC_ATTR_BASE + 81L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_RELATIVE_ENABLED    (IVI_SPECIFIC_ATTR_BASE + 82L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_RESOLUTION          (IVI_SPECIFIC_ATTR_BASE + 83L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_UNITS               (IVI_SPECIFIC_ATTR_BASE + 84L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_EXPRESSION_CATALOG  (IVI_SPECIFIC_ATTR_BASE + 177L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIMIT_FAIL          (IVI_SPECIFIC_ATTR_BASE + 178L)  /* ViBoolean, read-only */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_QUERY_CONFIGUARTION (IVI_SPECIFIC_ATTR_BASE + 179L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_AUTO_SCALING_ENABLE (IVI_SPECIFIC_ATTR_BASE + 180L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_TILT_UNIT           (IVI_SPECIFIC_ATTR_BASE + 282L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_BYTE_ORDER                            (IVI_SPECIFIC_ATTR_BASE + 284L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_DATA_FORMAT         (IVI_SPECIFIC_ATTR_BASE + 285L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_SPEED               (IVI_SPECIFIC_ATTR_BASE + 286L)  /* ViInt32, read-write */

/*- ListMode */

#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIST_MODE_STATE_ENABLED   (IVI_SPECIFIC_ATTR_BASE + 217L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIST_MODE_POINTS          (IVI_SPECIFIC_ATTR_BASE + 218L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIST_MODE_START_FREQUENCY (IVI_SPECIFIC_ATTR_BASE + 219L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIST_MODE_STOP_FREQUENCY  (IVI_SPECIFIC_ATTR_BASE + 220L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIST_MODE_SLOT_COUNT      (IVI_SPECIFIC_ATTR_BASE + 221L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIST_MODE_OFFSET          (IVI_SPECIFIC_ATTR_BASE + 222L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIST_MODE_INTERVAL        (IVI_SPECIFIC_ATTR_BASE + 223L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIST_MODE_SLOT_DURATION   (IVI_SPECIFIC_ATTR_BASE + 224L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIST_MODE_START_TIME_SLOT (IVI_SPECIFIC_ATTR_BASE + 225L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIST_MODE_END_TIME_SLOT   (IVI_SPECIFIC_ATTR_BASE + 226L)  /* ViReal64, read-write */

/*- Display */

#define KTRFPOWERMETER_ATTR_DISPLAY_ENABLED                 (IVI_SPECIFIC_ATTR_BASE + 54L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_DISPLAY_FORMAT                  (IVI_SPECIFIC_ATTR_BASE + 55L)  /* ViInt32, read-write */

/*- Window */

#define KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_WINDOW_COUNT         (IVI_SPECIFIC_ATTR_BASE + 9L)  /* ViInt32, read-only */
#define KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_METER_LOWER          (IVI_SPECIFIC_ATTR_BASE + 52L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_METER_UPPER          (IVI_SPECIFIC_ATTR_BASE + 53L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_FORMAT               (IVI_SPECIFIC_ATTR_BASE + 56L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_SELECTED_MEASUREMENT (IVI_SPECIFIC_ATTR_BASE + 57L)  /* ViInt32, write-only */
#define KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_ANALOG_LOWER         (IVI_SPECIFIC_ATTR_BASE + 170L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_ANALOG_LOWER_MAX     (IVI_SPECIFIC_ATTR_BASE + 171L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_ANALOG_LOWER_MIN     (IVI_SPECIFIC_ATTR_BASE + 172L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_ANALOG_UPPER         (IVI_SPECIFIC_ATTR_BASE + 173L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_ANALOG_UPPER_MAX     (IVI_SPECIFIC_ATTR_BASE + 174L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_ANALOG_UPPER_MIN     (IVI_SPECIFIC_ATTR_BASE + 175L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_SELECTED_MEASUREMENT_STATUS         (IVI_SPECIFIC_ATTR_BASE + 289L)  /* ViBoolean, read-only */

/*- FrequencyOffsetTable */

#define KTRFPOWERMETER_ATTR_FREQUENCY_OFFSET_TABLE_CURRENT_OFFSET (IVI_SPECIFIC_ATTR_BASE + 176L)  /* ViReal64, read-only */

/*- SensorCalibrationTable */

#define KTRFPOWERMETER_ATTR_SENSOR_CALIBRATION_SELECTED_TABLE (IVI_SPECIFIC_ATTR_BASE + 59L)  /* ViString, read-write */

/*- Trigger */

#define KTRFPOWERMETER_ATTR_TRIGGER_AUTO_LEVEL_ENABLED      (IVI_SPECIFIC_ATTR_BASE + 60L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_TRIGGER_DELAY                   (IVI_SPECIFIC_ATTR_BASE + 61L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_TRIGGER_HOLD_OFF                (IVI_SPECIFIC_ATTR_BASE + 62L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_TRIGGER_LEVEL                   (IVI_SPECIFIC_ATTR_BASE + 63L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_TRIGGER_OUTPUT_ENABLED          (IVI_SPECIFIC_ATTR_BASE + 64L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_TRIGGER_HYSTERESIS              (IVI_SPECIFIC_ATTR_BASE + 65L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_TRIGGER_SLOPE                   (IVI_SPECIFIC_ATTR_BASE + 66L)  /* ViInt32, read-write */

/*- Memory */

#define KTRFPOWERMETER_ATTR_MEMORY_CAL_CATALOG                (IVI_SPECIFIC_ATTR_BASE + 181L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_MEMORY_CAL_CATALOG_ALL            (IVI_SPECIFIC_ATTR_BASE + 182L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_MEMORY_FREQ_POINT                 (IVI_SPECIFIC_ATTR_BASE + 183L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_MEMORY_SAVE_RECALL_REGISTER_STATE (IVI_SPECIFIC_ATTR_BASE + 185L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_MEMORY_SAVE_RECAL_REGISTER_NAMES  (IVI_SPECIFIC_ATTR_BASE + 186L)  /* ViString, read-only */

/*- Service */

#define KTRFPOWERMETER_ATTR_SERVICE_FREQ_MAX                     (IVI_SPECIFIC_ATTR_BASE + 242L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_SERVICE_FREQ_MIN                     (IVI_SPECIFIC_ATTR_BASE + 243L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_SERVICE_LYCRA_PATH                   (IVI_SPECIFIC_ATTR_BASE + 246L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_REF_CAL_ENABLED                      (IVI_SPECIFIC_ATTR_BASE + 269L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_UN_CORRECTED_RAW_MEASUREMENT (IVI_SPECIFIC_ATTR_BASE + 279L)  /* ViInt32, read-only */
#define KTRFPOWERMETER_ATTR_SERVICE_VGA_OUTPUT_STATE             (IVI_SPECIFIC_ATTR_BASE + 281L)  /* ViBoolean, read-write */

/*- BIST */

#define KTRFPOWERMETER_ATTR_SERVICE_BIST_TIME_BASE_ENABLED               (IVI_SPECIFIC_ATTR_BASE + 278L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_BIST_TESTVRF_ENABLED                 (IVI_SPECIFIC_ATTR_BASE + 272L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_BIST_TESTVCOM_ENABLED                (IVI_SPECIFIC_ATTR_BASE + 271L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_BIST_TESTV0_ENABLED                  (IVI_SPECIFIC_ATTR_BASE + 270L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_BIST_PEAK_ZERO_TEST_WROST_CASE_ERROR (IVI_SPECIFIC_ATTR_BASE + 277L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_SERVICE_BIST_CW_ZERO_TEST_WROST_CASE_ERROR   (IVI_SPECIFIC_ATTR_BASE + 276L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_SERVICE_BIST_VIDEO_OUTPUT_ENABLED            (IVI_SPECIFIC_ATTR_BASE + 274L)  /* ViBoolean, read-write */

/*- Chopper */

#define KTRFPOWERMETER_ATTR_SERVICE_CHOPPER_STOP            (IVI_SPECIFIC_ATTR_BASE + 236L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_CHOPPER_START           (IVI_SPECIFIC_ATTR_BASE + 237L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_CHOPPER_FREQUENCY       (IVI_SPECIFIC_ATTR_BASE + 240L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_CHOPPER_N_LEVEL         (IVI_SPECIFIC_ATTR_BASE + 238L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_CHOPPER_P_LEVEL         (IVI_SPECIFIC_ATTR_BASE + 239L)  /* ViBoolean, read-write */

/*- Power */

#define KTRFPOWERMETER_ATTR_SERVICE_POWER_MAX_AVG             (IVI_SPECIFIC_ATTR_BASE + 247L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_SERVICE_POWER_MAX_PEAK            (IVI_SPECIFIC_ATTR_BASE + 248L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_SERVICE_POWER_MAX_USABLE          (IVI_SPECIFIC_ATTR_BASE + 249L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_SERVICE_POWER_MIN_USABLE          (IVI_SPECIFIC_ATTR_BASE + 250L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_SERVICE_POWER_ZERO_OFFSET_ENABLED (IVI_SPECIFIC_ATTR_BASE + 268L)  /* ViBoolean, read-write */

/*- System */

#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_VERSION           (IVI_SPECIFIC_ATTR_BASE + 257L)  /* ViString, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_TRACKING_NO       (IVI_SPECIFIC_ATTR_BASE + 258L)  /* ViString, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_PROCESSOR_VERSION (IVI_SPECIFIC_ATTR_BASE + 253L)  /* ViString, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_OPTION_NO         (IVI_SPECIFIC_ATTR_BASE + 251L)  /* ViString, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_OS                (IVI_SPECIFIC_ATTR_BASE + 252L)  /* ViString, read-only */
#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_START_STATE       (IVI_SPECIFIC_ATTR_BASE + 280L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_SERIAL_NO         (IVI_SPECIFIC_ATTR_BASE + 256L)  /* ViString, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_SENSOR_TYPE       (IVI_SPECIFIC_ATTR_BASE + 255L)  /* ViString, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_SENSITIVITY       (IVI_SPECIFIC_ATTR_BASE + 254L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_RAM_MODE          (IVI_SPECIFIC_ATTR_BASE + 273L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_CALIBRATION_TYPE  (IVI_SPECIFIC_ATTR_BASE + 275L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_CAL_PLACE         (IVI_SPECIFIC_ATTR_BASE + 235L)  /* ViString, read-write */
#define KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_CAL_DATE          (IVI_SPECIFIC_ATTR_BASE + 234L)  /* ViString, read-only */

/*- Battery */

#define KTRFPOWERMETER_ATTR_BATTERY_BACK_LIGHT_MODE         (IVI_SPECIFIC_ATTR_BASE + 196L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_BATTERY_BRIGHTNESS              (IVI_SPECIFIC_ATTR_BASE + 197L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_BATTERY_CAPACITY                (IVI_SPECIFIC_ATTR_BASE + 198L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_BATTERY_CHARGE                  (IVI_SPECIFIC_ATTR_BASE + 199L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_BATTERY_TEMPERATURE             (IVI_SPECIFIC_ATTR_BASE + 200L)  /* ViReal64, read-only */
#define KTRFPOWERMETER_ATTR_BATTERY_TIME                    (IVI_SPECIFIC_ATTR_BASE + 201L)  /* ViReal64, read-only */

/*- Duty Cycle */

#define KTRFPOWERMETER_ATTR_DUTY_CYCLE_CORRECTION_ENABLED   (IVI_CLASS_ATTR_BASE + 401L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_DUTY_CYCLE_CORRECTION           (IVI_CLASS_ATTR_BASE + 402L)  /* ViReal64, read-write */

/*- Basic Operation */

#define KTRFPOWERMETER_ATTR_AVERAGING_AUTO_ENABLED          (IVI_CLASS_ATTR_BASE + 3L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_CORRECTION_FREQUENCY            (IVI_CLASS_ATTR_BASE + 4L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_OFFSET                          (IVI_CLASS_ATTR_BASE + 5L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_UNITS                           (IVI_CLASS_ATTR_BASE + 1L)  /* ViInt32, read-write */
#define KTRFPOWERMETER_ATTR_CHANNEL_COUNT                   (IVI_INHERENT_ATTR_BASE + 203L)  /* ViInt32, read-only */
#define KTRFPOWERMETER_ATTR_RANGE_AUTO_ENABLED              (IVI_CLASS_ATTR_BASE + 2L)  /* ViBoolean, read-write */

/*- Channel Acquisition */

#define KTRFPOWERMETER_ATTR_CHANNEL_ENABLED                 (IVI_CLASS_ATTR_BASE + 51L)  /* ViBoolean, read-write */

/*- Averaging Count */

#define KTRFPOWERMETER_ATTR_AVERAGING_COUNT                 (IVI_CLASS_ATTR_BASE + 301L)  /* ViInt32, read-write */

/*- Trigger */

#define KTRFPOWERMETER_ATTR_TRIGGER_SOURCE                  (IVI_CLASS_ATTR_BASE + 201L)  /* ViInt32, read-write */

/*- Internal Trigger */

#define KTRFPOWERMETER_ATTR_INTERNAL_TRIGGER_EVENT_SOURCE   (IVI_CLASS_ATTR_BASE + 251L)  /* ViString, read-write */
#define KTRFPOWERMETER_ATTR_INTERNAL_TRIGGER_LEVEL          (IVI_CLASS_ATTR_BASE + 252L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_INTERNAL_TRIGGER_SLOPE          (IVI_CLASS_ATTR_BASE + 253L)  /* ViInt32, read-write */

/*- Manual Range */

#define KTRFPOWERMETER_ATTR_RANGE_LOWER                     (IVI_CLASS_ATTR_BASE + 101L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_RANGE_UPPER                     (IVI_CLASS_ATTR_BASE + 102L)  /* ViReal64, read-write */

/*- Reference Oscillator */

#define KTRFPOWERMETER_ATTR_REF_OSCILLATOR_ENABLED          (IVI_CLASS_ATTR_BASE + 501L)  /* ViBoolean, read-write */
#define KTRFPOWERMETER_ATTR_REF_OSCILLATOR_FREQUENCY        (IVI_CLASS_ATTR_BASE + 502L)  /* ViReal64, read-write */
#define KTRFPOWERMETER_ATTR_REF_OSCILLATOR_LEVEL            (IVI_CLASS_ATTR_BASE + 503L)  /* ViReal64, read-write */


/****************************************************************************
 *------------------------ Attribute Value Defines -------------------------*
 ****************************************************************************/

/*- Defined values for
	parameter Register in function KtRFPowerMeter_StatusGetRegister
	parameter Register in function KtRFPowerMeter_StatusSetRegister */

#define KTRFPOWERMETER_VAL_STATUS_REGISTER_STANDARD_EVENT                                       11
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_STANDARD_EVENT_ENABLE                                12
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_STATUS_BYTE                                          13
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_SERVICE_REQUEST_ENABLE                               10
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_CONDITION                                  0
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_EVENT                                      2
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_NEGATIVE_TRANSITION                        3
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_POSITIVE_TRANSITION                        4
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_CONDITION                               5
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_EVENT                                   7
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_NEGATIVE_TRANSITION                     8
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_POSITIVE_TRANSITION                     9
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_ENABLE                                  6
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_ENABLE                                     1
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_CALIBRATION_SUMMARY_CONDITION           14
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_CALIBRATION_SUMMARY_ENABLE              15
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_CALIBRATION_SUMMARY_NEGATIVE_TRANSITION 16
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_CALIBRATION_SUMMARY_POSITIVE_TRANSITION 17
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_CALIBRATION_SUMMARY_EVENT               18
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_POWER_SUMMARY_CONDITION                 19
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_POWER_SUMMARY_ENABLE                    20
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_POWER_SUMMARY_NEGATIVE_TRANSITION       21
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_POWER_SUMMARY_POSITIVE_TRANSITION       22
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_POWER_SUMMARY_EVENT                     23
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_POWER_CHANNEL_CONDITION                 24
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_POWER_CHANNEL_ENABLE                    25
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_POWER_CHANNEL_NEGATIVE_TRANSITION       26
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_POWER_CHANNEL_POSITIVE_TRANSITION       27
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_QUESTIONABLE_POWER_CHANNEL_EVENT                     28
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATIONUL_FAIL_SUMMARY_CONDITION                   29
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATIONUL_FAIL_SUMMARY_ENABLE                      30
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATIONUL_FAIL_SUMMARY_NEGATIVE_TRANSITION         31
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATIONUL_FAIL_SUMMARY_POSITIVE_TRANSITION         32
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATIONUL_FAIL_SUMMARY_EVENT                       33
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_TRIGGER_SUMMARY_CONDITION                  34
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_TRIGGER_SUMMARY_ENABLE                     35
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_TRIGGER_SUMMARY_NEGATIVE_TRANSITION        36
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_TRIGGER_SUMMARY_POSITIVE_TRANSITION        37
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_TRIGGER_SUMMARY_EVENT                      38
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_SENSE_SUMMARY_CONDITION                    39
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_SENSE_SUMMARY_ENABLE                       40
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_SENSE_SUMMARY_NEGATIVE_TRANSITION          41
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_SENSE_SUMMARY_POSITIVE_TRANSITION          42
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_SENSE_SUMMARY_EVENT                        43
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_MEASURING_SUMMARY_CONDITION                44
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_MEASURING_SUMMARY_ENABLE                   45
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_MEASURING_SUMMARY_NEGATIVE_TRANSITION      46
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_MEASURING_SUMMARY_POSITIVE_TRANSITION      47
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_MEASURING_SUMMARY_EVENT                    48
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATIONLL_FAIL_SUMMARY_CONDITION                   49
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATIONLL_FAIL_SUMMARY_ENABLE                      50
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATIONLL_FAIL_SUMMARY_NEGATIVE_TRANSITION         51
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATIONLL_FAIL_SUMMARY_POSITIVE_TRANSITION         52
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATIONLL_FAIL_SUMMARY_EVENT                       53
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_CALIBRATING_SUMMARY_CONDITION              54
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_CALIBRATING_SUMMARY_ENABLE                 55
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_CALIBRATING_SUMMARY_EVENT                  56
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_CALIBRATING_SUMMARY_NEGATIVE_TRANSITION    57
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_OPERATION_CALIBRATING_SUMMARY_POSITIVE_TRANSITION    58
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_DEVICE_CONDITION                                     59
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_DEVICE_ENABLE                                        60
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_DEVICE_EVENT                                         61
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_DEVICE_NEGATIVE_TRANSITION                           62
#define KTRFPOWERMETER_VAL_STATUS_REGISTER_DEVICE_POSITIVE_TRANSITION                           63

/*- Defined values for
	parameter Val in function KtRFPowerMeter_ChannelIsCalibrationComplete */

#define KTRFPOWERMETER_VAL_CALIBRATION_STATUS_IN_PROGRESS   0
#define KTRFPOWERMETER_VAL_CALIBRATION_STATUS_COMPLETE      1
#define KTRFPOWERMETER_VAL_CALIBRATION_STATUS_UN_KNOWN      2

/*- Defined values for
	parameter Val in function KtRFPowerMeter_ChannelIsZeroComplete */

#define KTRFPOWERMETER_VAL_ZERO_STATUS_IN_PROGRESS          0
#define KTRFPOWERMETER_VAL_ZERO_STATUS_COMPLETE             1
#define KTRFPOWERMETER_VAL_ZERO_STATUS_UN_KNOWN             2

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_AVERAGING_MODE
	parameter Mode in function KtRFPowerMeter_ChanneslItemAveragingConfigure */

#define KTRFPOWERMETER_VAL_AVERAGING_MODE_AUTO              0
#define KTRFPOWERMETER_VAL_AVERAGING_MODE_MANUAL            1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_VIDEO_BANDWIDTH
	parameter VideoBandwidth in function KtRFPowerMeter_ChanneslItemConfigureVideoBandwidth */

#define KTRFPOWERMETER_VAL_CHANNEL_VIDEO_BANDWIDTH_OFF      0
#define KTRFPOWERMETER_VAL_CHANNEL_VIDEO_BANDWIDTH_LOW      1
#define KTRFPOWERMETER_VAL_CHANNEL_VIDEO_BANDWIDTH_MEDIUM   2
#define KTRFPOWERMETER_VAL_CHANNEL_VIDEO_BANDWIDTH_HIGH     3

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_MEASUREMENT_RATE
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_SPEED */

#define KTRFPOWERMETER_VAL_MEASUREMENT_RATE_NORMAL          0
#define KTRFPOWERMETER_VAL_MEASUREMENT_RATE_DOUBLE          1
#define KTRFPOWERMETER_VAL_MEASUREMENT_RATE_FAST            2

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_SENSOR_MODE */

#define KTRFPOWERMETER_VAL_SENSOR_MODE_AVERAGE              0
#define KTRFPOWERMETER_VAL_SENSOR_MODE_NORMAL               1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRACE_UNIT
	parameter Unit in function KtRFPowerMeter_ChanneslItemTraceConfigure */

#define KTRFPOWERMETER_VAL_TRACE_UNITDBM                    0
#define KTRFPOWERMETER_VAL_TRACE_UNIT_WATT                  1

/*- Defined values for
	parameter Resolution in function KtRFPowerMeter_ChanneslItemTraceGetTrace */

#define KTRFPOWERMETER_VAL_TRACE_RESOLUTION_HIGH            0
#define KTRFPOWERMETER_VAL_TRACE_RESOLUTION_MEDIUM          1
#define KTRFPOWERMETER_VAL_TRACE_RESOLUTION_LOW             2

/*- Defined values for
	parameter Pulse in function KtRFPowerMeter_GetFrequency
	parameter Pulse in function KtRFPowerMeter_GetPeriod
	parameter Pulse in function KtRFPowerMeter_GetSeparation
	parameter Pulse in function KtRFPowerMeter_GetDuration
	parameter Pulse in function KtRFPowerMeter_GetDutyCycle */

#define KTRFPOWERMETER_VAL_R_CHANNEL_PULSE1                 0
#define KTRFPOWERMETER_VAL_R_CHANNEL_PULSE2                 1
#define KTRFPOWERMETER_VAL_R_CHANNEL_PULSE3                 2
#define KTRFPOWERMETER_VAL_R_CHANNEL_PULSE4                 3
#define KTRFPOWERMETER_VAL_R_CHANNEL_PULSE5                 4
#define KTRFPOWERMETER_VAL_R_CHANNEL_PULSE6                 5
#define KTRFPOWERMETER_VAL_R_CHANNEL_PULSE7                 6
#define KTRFPOWERMETER_VAL_R_CHANNEL_PULSE8                 7
#define KTRFPOWERMETER_VAL_R_CHANNEL_PULSE9                 8
#define KTRFPOWERMETER_VAL_R_CHANNEL_PULSE10                9
#define KTRFPOWERMETER_VAL_CHANNEL_PULSE11                  10
#define KTRFPOWERMETER_VAL_CHANNEL_PULSE12                  11
#define KTRFPOWERMETER_VAL_CHANNEL_PULSE13                  12
#define KTRFPOWERMETER_VAL_CHANNEL_PULSE14                  13
#define KTRFPOWERMETER_VAL_CHANNEL_PULSE15                  14
#define KTRFPOWERMETER_VAL_CHANNEL_PULSE16                  15
#define KTRFPOWERMETER_VAL_CHANNEL_PULSE17                  16
#define KTRFPOWERMETER_VAL_CHANNEL_PULSE18                  17
#define KTRFPOWERMETER_VAL_CHANNEL_PULSE19                  18
#define KTRFPOWERMETER_VAL_CHANNEL_PULSE20                  19

/*- Defined values for
	parameter Transition in function KtRFPowerMeter_GetTransitionNegativeDuration
	parameter Transition in function KtRFPowerMeter_GetTransitionNegativeOccurrence
	parameter Transition in function KtRFPowerMeter_GetTransitionPositiveDuration
	parameter Transition in function KtRFPowerMeter_GetTransitionPositiveOccurrence */

#define KTRFPOWERMETER_VAL_CHANNEL_TRANSITION1              0
#define KTRFPOWERMETER_VAL_CHANNEL_TRANSITION2              1
#define KTRFPOWERMETER_VAL_CHANNEL_TRANSITION3              2
#define KTRFPOWERMETER_VAL_CHANNEL_TRANSITION4              3
#define KTRFPOWERMETER_VAL_CHANNEL_TRANSITION5              4
#define KTRFPOWERMETER_VAL_CHANNEL_TRANSITION6              5
#define KTRFPOWERMETER_VAL_CHANNEL_TRANSITION7              6
#define KTRFPOWERMETER_VAL_CHANNEL_TRANSITION8              7
#define KTRFPOWERMETER_VAL_CHANNEL_TRANSITION9              8
#define KTRFPOWERMETER_VAL_CHANNEL_TRANSITION10             9

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRIGGER_SOURCE
	parameter Source in function KtRFPowerMeter_ChanneslItemTriggerConfigure */

#define KTRFPOWERMETER_VAL_TRIGGER_SOURCEBUS                0
#define KTRFPOWERMETER_VAL_TRIGGER_SOURCE_EXTERNAL          1
#define KTRFPOWERMETER_VAL_TRIGGER_SOURCE_HOLD              2
#define KTRFPOWERMETER_VAL_TRIGGER_SOURCE_IMMEDIATE         3
#define KTRFPOWERMETER_VAL_TRIGGER_SOURCE_CHANNELA          4
#define KTRFPOWERMETER_VAL_TRIGGER_SOURCE_CHANNELB          5
#define KTRFPOWERMETER_VAL_TRIGGER_SOURCE_INTERNAL          6

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_FORMAT
	parameter Format in function KtRFPowerMeter_DisplayWindowConfigure */

#define KTRFPOWERMETER_VAL_WINDOW_FORMAT_DIGITAL            0
#define KTRFPOWERMETER_VAL_WINDOW_FORMAT_ANALOG             1
#define KTRFPOWERMETER_VAL_WINDOW_FORMAT_DUAL_NUMERIC       2
#define KTRFPOWERMETER_VAL_WINDOW_FORMAT_TRACE              3
#define KTRFPOWERMETER_VAL_WINDOW_FORMAT_SINGLE_NUMERIC     4
#define KTRFPOWERMETER_VAL_WINDOW_FORMATCTRA_CE             5
#define KTRFPOWERMETER_VAL_WINDOW_FORMATCTA_BLE             6

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_DISPLAY_FORMAT
	parameter Format in function KtRFPowerMeter_DisplayConfigure */

#define KTRFPOWERMETER_VAL_DISPLAY_FORMAT_WINDOWED          0
#define KTRFPOWERMETER_VAL_DISPLAY_FORMAT_EXPANDED          1
#define KTRFPOWERMETER_VAL_DISPLAY_FORMAT_FULL_SCREEN       2

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_DISPLAY_WINDOW_SELECTED_MEASUREMENT
	parameter SelectedMeasurement in function KtRFPowerMeter_DisplayWindowConfigure
	parameter SelectedMeasurement in function KtRFPowerMeter_DisplayWindowConfigureMeter */

#define KTRFPOWERMETER_VAL_WINDOW_MEASUREMENT_UPPER         0
#define KTRFPOWERMETER_VAL_WINDOW_MEASUREMENT_LOWER         1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_TRIGGER_SLOPE
	parameter Slope in function KtRFPowerMeter_TriggerConfigure */

#define KTRFPOWERMETER_VAL_TRIGGER_SLOPE_POSITIVE           0
#define KTRFPOWERMETER_VAL_TRIGGER_SLOPE_NEGATIVE           1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_UNITS */

#define KTRFPOWERMETER_VAL_MEASUREMENT_UNITSD_BM            0
#define KTRFPOWERMETER_VAL_MEASUREMENT_UNITS_WATT           1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_RATIO_UNITS */

#define KTRFPOWERMETER_VAL_RATIO_UNITSDB                    0
#define KTRFPOWERMETER_VAL_RATIO_UNITS_PERCENT              1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_OPERATION
	parameter Operation in function KtRFPowerMeter_MeasurementsItemConfigure
	parameter Operation in function KtRFPowerMeter_MeasurementsItemConfigureTimeGated */

#define KTRFPOWERMETER_VAL_MEASUREMENT_OPERATION_RATIO          0
#define KTRFPOWERMETER_VAL_MEASUREMENT_OPERATION_DIFFERENCE     1
#define KTRFPOWERMETER_VAL_MEASUREMENT_OPERATION_NO_COMBINATION 2

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_LIMIT_AUTO_CLEAR
	parameter AutoClear in function KtRFPowerMeter_MeasurementsItemConfigureLimits */

#define KTRFPOWERMETER_VAL_MEASUREMENT_LIMIT_AUTO_CLEAR_OFF  0
#define KTRFPOWERMETER_VAL_MEASUREMENT_LIMIT_AUTO_CLEAR_ON   1
#define KTRFPOWERMETER_VAL_MEASUREMENT_LIMIT_AUTO_CLEAR_ONCE 2

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_FEED1_TYPE
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_FEED2_TYPE
	parameter Feed1Type in function KtRFPowerMeter_MeasurementsItemConfigure
	parameter Feed2Type in function KtRFPowerMeter_MeasurementsItemConfigure
	parameter Feed1Type in function KtRFPowerMeter_MeasurementsItemConfigureTimeGated
	parameter Feed2Type in function KtRFPowerMeter_MeasurementsItemConfigureTimeGated */

#define KTRFPOWERMETER_VAL_MEASUREMENT_TYPE_PEAK            0
#define KTRFPOWERMETER_VAL_MEASUREMENT_TYPE_AVERAGE         1
#define KTRFPOWERMETER_VAL_MEASUREMENT_TYPE_PEAK_TO_AVERAGE 2
#define KTRFPOWERMETER_VAL_MEASUREMENT_TYPE_MINIMUM         3

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_FEED1_GATE
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_FEED2_GATE
	parameter Feed1Gate in function KtRFPowerMeter_MeasurementsItemConfigureTimeGated
	parameter Feed2Gate in function KtRFPowerMeter_MeasurementsItemConfigureTimeGated */

#define KTRFPOWERMETER_VAL_MEASUREMENT_GATE_NONE            0
#define KTRFPOWERMETER_VAL_MEASUREMENT_GATE1                1
#define KTRFPOWERMETER_VAL_MEASUREMENT_GATE2                2
#define KTRFPOWERMETER_VAL_MEASUREMENT_GATE3                3
#define KTRFPOWERMETER_VAL_MEASUREMENT_GATE4                4

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_FEED1_CHANNEL
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_FEED2_CHANNEL
	parameter Feed1Channel in function KtRFPowerMeter_MeasurementsItemConfigure
	parameter Feed2Channel in function KtRFPowerMeter_MeasurementsItemConfigure
	parameter Feed1Channel in function KtRFPowerMeter_MeasurementsItemConfigureTimeGated
	parameter Feed2Channel in function KtRFPowerMeter_MeasurementsItemConfigureTimeGated */

#define KTRFPOWERMETER_VAL_MEASUREMENT_CHANNELA             0
#define KTRFPOWERMETER_VAL_MEASUREMENT_CHANNELB             1
#define KTRFPOWERMETER_VAL_MEASUREMENT_CHANNELC             2
#define KTRFPOWERMETER_VAL_MEASUREMENT_CHANNELD             3
#define KTRFPOWERMETER_VAL_MEASUREMENT_CHANNEL_NONE         4

/*- Defined values for
	parameter AnalogOutput in function KtRFPowerMeter_MeasurementsItemConfigureAnalogOutput
	parameter AnalogOutput in function KtRFPowerMeter_MeasurementsItemEnableAnalogOutput */

#define KTRFPOWERMETER_VAL_MEASUREMENT_ANALOG_OUTPUT1       0
#define KTRFPOWERMETER_VAL_MEASUREMENT_ANALOG_OUTPUT2       1

/*- Defined values for
	parameter Output in function KtRFPowerMeter_MeasurementsItemConfigureTTLOutput
	parameter Output in function KtRFPowerMeter_MeasurementsItemEnableTTLOutput */

#define KTRFPOWERMETER_VAL_MEASUREMENTTTL_OUTPUT1           0
#define KTRFPOWERMETER_VAL_MEASUREMENTTTL_OUTPUT2           1

/*- Defined values for
	parameter Limit in function KtRFPowerMeter_MeasurementsItemConfigureTTLOutput */

#define KTRFPOWERMETER_VAL_MEASUREMENTTTL_OUTPUT_LIMIT_UPPER 0
#define KTRFPOWERMETER_VAL_MEASUREMENTTTL_OUTPUT_LIMIT_LOWER 1
#define KTRFPOWERMETER_VAL_MEASUREMENTTTL_OUTPUT_LIMIT_BOTH  2

/*- Defined values for
	parameter Sense in function KtRFPowerMeter_MeasurementsItemConfigureTTLOutput */

#define KTRFPOWERMETER_VAL_MEASUREMENTTTL_OUTPUT_SENSE_HIGH 0
#define KTRFPOWERMETER_VAL_MEASUREMENTTTL_OUTPUT_SENSE_LOW  1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_SENSOR_RANGE */

#define KTRFPOWERMETER_VAL_SENSOR_RANGE1                    0
#define KTRFPOWERMETER_VAL_SENSOR_RANGE2                    1
#define KTRFPOWERMETER_VAL_SENSOR_RANGE3                    2
#define KTRFPOWERMETER_VAL_SENSOR_RANGE4                    3
#define KTRFPOWERMETER_VAL_SENSOR_RANGE5                    4
#define KTRFPOWERMETER_VAL_SENSOR_RANGE6                    5
#define KTRFPOWERMETER_VAL_SENSOR_RANGE7                    6
#define KTRFPOWERMETER_VAL_SENSOR_RANGE8                    7

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_HOLD_STATE */

#define KTRFPOWERMETER_VAL_HOLD_STATE_OFF                   0
#define KTRFPOWERMETER_VAL_HOLD_STATE_MINIMUM               1
#define KTRFPOWERMETER_VAL_HOLD_STATE_MAXIMUM               2

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_BRIDGE_RESISTANCE */

#define KTRFPOWERMETER_VAL_BRIDGE_RESISTANCER100            0
#define KTRFPOWERMETER_VAL_BRIDGE_RESISTANCER200            1
#define KTRFPOWERMETER_VAL_BRIDGE_RESISTANCER300            2
#define KTRFPOWERMETER_VAL_BRIDGE_RESISTANCER400            3

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_RESISTANCE_TYPE */

#define KTRFPOWERMETER_VAL_CHANNEL_RESISTANCE_TYPE_USER_DEFINED               0
#define KTRFPOWERMETER_VAL_CHANNEL_RESISTANCE_TYPE_MEASURED_BRIDGE_RESISTANCE 1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_AVERAGING_VOLTAGE_COUNT */

#define KTRFPOWERMETER_VAL_AVERAGE_VOLTAGE_COUNT4           0
#define KTRFPOWERMETER_VAL_AVERAGE_VOLTAGE_COUNT8           1
#define KTRFPOWERMETER_VAL_AVERAGE_VOLTAGE_COUNT16          2
#define KTRFPOWERMETER_VAL_AVERAGE_VOLTAGE_COUNT32          3

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_CORRECTION_FREQUENCY_OFFSET_UNIT */

#define KTRFPOWERMETER_VAL_MEASUREMENT_RATIO_UNITSDB        0
#define KTRFPOWERMETER_VAL_MEASUREMENT_RATIO_UNITS_PERCENT  1

/*- Defined values for
	parameter FrequencyMode in function KtRFPowerMeter_SetStartvalue
	parameter FrequencyMode in function KtRFPowerMeter_GetStartValue
	parameter FrequencyMode in function KtRFPowerMeter_SetStopValue
	parameter FrequencyMode in function KtRFPowerMeter_GetStopvalue
	parameter FrequencyMode in function KtRFPowerMeter_SetStepSize
	parameter FrequencyMode in function KtRFPowerMeter_GetStepSize */

#define KTRFPOWERMETER_VAL_FREQUENCY_MODECW                 0
#define KTRFPOWERMETER_VAL_FREQUENCY_MODE_FIXED             1

/*- Defined values for */

#define KTRFPOWERMETER_VAL_AVERAGE_ZERO_TYPE_INTERNAL       0
#define KTRFPOWERMETER_VAL_AVERAGE_ZERO_TYPE_EXTERNAL       1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_SERVICE_CHOPPER_FREQUENCY */

#define KTRFPOWERMETER_VAL_SERVICE_CHOPPER_FREQUENCY440     0
#define KTRFPOWERMETER_VAL_SERVICE_CHOPPER_FREQUENCY500     1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_SERVICE_LYCRA_PATH */

#define KTRFPOWERMETER_VAL_SERVICE_LYCRA_PATH_LOW           0
#define KTRFPOWERMETER_VAL_SERVICE_LYCRA_PATH_HIGH          1
#define KTRFPOWERMETER_VAL_SERVICE_LYCRA_PATH_ON            2
#define KTRFPOWERMETER_VAL_SERVICE_LYCRA_PATH_OFF           3

/*- Defined values for */

#define KTRFPOWERMETER_VAL_CHANNEL_SERVICE_REF_CAL_OUTPUT_ADJUST_SCALE_COARSE 0
#define KTRFPOWERMETER_VAL_CHANNEL_SERVICE_REF_CAL_OUTPUT_ADJUST_SCALE_FINE   1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_RAM_MODE */

#define KTRFPOWERMETER_VAL_CHANNELRAM_MODE_OFF              0
#define KTRFPOWERMETER_VAL_CHANNELRAM_MODE_MINIMUM          1
#define KTRFPOWERMETER_VAL_CHANNELRAM_MODE_FULL             2

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_SERVICE_SYSTEM_CALIBRATION_TYPE */

#define KTRFPOWERMETER_VAL_CHANNEL_CALIBRATION_TYPE_INTERNAL 0
#define KTRFPOWERMETER_VAL_CHANNEL_CALIBRATION_TYPE_EXTERNAL 1

/*- Defined values for
	parameter MarkerRef in function KtRFPowerMeter_ChanneslItemStatisticsCCDFGetMarkerData
	parameter MarkerRef in function KtRFPowerMeter_ChanneslItemStatisticsCCDFGetGaussianMarker
	parameter MarkerRef in function KtRFPowerMeter_ChanneslItemStatisticsCCDFSetMarkerX
	parameter MarkerRef in function KtRFPowerMeter_ChanneslItemStatisticsCCDFSetMarkerY
	parameter MarkerRef in function KtRFPowerMeter_ChanneslItemStatisticsCCDFSetReferenceMarker
	parameter MarkerRef in function KtRFPowerMeter_ChanneslItemStatisticsCCDFSetTraceMarker */

#define KTRFPOWERMETER_VAL_MARKER_REFERENCE1                0
#define KTRFPOWERMETER_VAL_MARKER_REFERENCE2                1

/*- Defined values for
	parameter MarkerReference in function KtRFPowerMeter_ChanneslItemTimeGatesItemGetAutoGatingMarker
	parameter MarkerReference in function KtRFPowerMeter_ChanneslItemTimeGatesItemSetAutoGatingMarker */

#define KTRFPOWERMETER_VAL_AUTO_GATIN_MARKER_REFERENCE1     0
#define KTRFPOWERMETER_VAL_AUTO_GATIN_MARKER_REFERENCE2     1

/*- Defined values for */

#define KTRFPOWERMETER_VAL_GATE1                            0
#define KTRFPOWERMETER_VAL_GATE2                            1
#define KTRFPOWERMETER_VAL_GATE3                            2
#define KTRFPOWERMETER_VAL_GATE4                            3

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TIMEGATES_ITEM_GET_GATING_TYPE
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TIMEGATES_ITEM_SET_GATING_TYPE */

#define KTRFPOWERMETER_VAL_GATE_TYPE_OFF                    0
#define KTRFPOWERMETER_VAL_GATE_TYPE_ON                     1
#define KTRFPOWERMETER_VAL_GATE_TYPE_ONCE                   2

/*- Defined values for
	parameter KtRFPowermeterTraceScaleEnum in function KtRFPowerMeter_SetScale
	parameter KtRFPowermeterTraceScaleEnum in function KtRFPowerMeter_GetScale */

#define KTRFPOWERMETER_VAL_TRACE_SCALEX                     0
#define KTRFPOWERMETER_VAL_TRACE_SCALEY                     1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRIGGER_INIT_CONTINUOUS_ALL */

#define KTRFPOWERMETER_VAL_TRIGGER_CONTINUOUSON             0
#define KTRFPOWERMETER_VAL_TRIGGER_CONTINUOUSOFF            1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_TRIGGER_INPUT_IMPEDANCE */

#define KTRFPOWERMETER_VAL_CHANNEL_INPUT_IMPEDANCE_HIGH     0
#define KTRFPOWERMETER_VAL_CHANNEL_INPUT_IMPEDANCE_LOW      1

/*- Defined values for
	parameter Device in function KtRFPowerMeter_MemoryClearTableContents
	parameter Device in function KtRFPowerMeter_GetSaveRecallRegisterList
	parameter Device in function KtRFPowerMeter_GetSaveRecallRegisterAvailable */

#define KTRFPOWERMETER_VAL_MEMORY_TYPE_METER                0
#define KTRFPOWERMETER_VAL_MEMORY_TYPEUSB1                  1
#define KTRFPOWERMETER_VAL_MEMORY_TYPEUSB2                  2

/*- Defined values for
	parameter VoltType in function KtRFPowerMeter_MeasurementsItemFetchVoltage */

#define KTRFPOWERMETER_VAL_MEASUREMENT_VOLTAGEV0            0
#define KTRFPOWERMETER_VAL_MEASUREMENT_VOLTAGEV1            1
#define KTRFPOWERMETER_VAL_MEASUREMENT_VOLTAGEVCMP0         2
#define KTRFPOWERMETER_VAL_MEASUREMENT_VOLTAGEVCMP1         3
#define KTRFPOWERMETER_VAL_MEASUREMENT_VOLTAGEVRF0          4
#define KTRFPOWERMETER_VAL_MEASUREMENT_VOLTAGEVRF1          5
#define KTRFPOWERMETER_VAL_MEASUREMENT_VOLTAGEPV1           6

/*- Defined values for
	parameter CatalogType in function KtRFPowerMeter_MemoryGetFreeMemory */

#define KTRFPOWERMETER_VAL_MEMORY_ALL                       0
#define KTRFPOWERMETER_VAL_MEMORY_STATE                     1
#define KTRFPOWERMETER_VAL_MEMORY_TABLE                     2

/*- Defined values for */

#define KTRFPOWERMETER_VAL_SYSTEM_PRESET_BURST              0
#define KTRFPOWERMETER_VAL_SYSTEM_PRESET_DEFAULT            1
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETGSM900              2
#define KTRFPOWERMETER_VAL_SYSTEM_PRESET_EDGE               3
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETNADC                4
#define KTRFPOWERMETER_VAL_SYSTEM_PRESET_BLUE_TOOTH         5
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETCDMA                6
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETWCDMA               7
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETCDMA2000            8
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETIDEN                9
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETMCPA                10
#define KTRFPOWERMETER_VAL_SYSTEM_PRESET_RADAR              11
#define KTRFPOWERMETER_VAL_SYSTEM_PRESET_DOT11A             12
#define KTRFPOWERMETER_VAL_SYSTEM_PRESET_DOT11B             13
#define KTRFPOWERMETER_VAL_SYSTEM_PRESET_1XEV0DO            14
#define KTRFPOWERMETER_VAL_SYSTEM_PRESET_1XEV0DV            15
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETTDSCDMA             16
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETDVB                 17
#define KTRFPOWERMETER_VAL_SYSTEM_PRESET_HIPER_LAN2         18
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETWIMAX               19
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETHSDPA               20
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETDME                 21
#define KTRFPOWERMETER_VAL_SYSTEM_PRESETDMEPRT              22

/*- Defined values for */

#define KTRFPOWERMETER_VAL_ZERO_TEMPERATURE2                0
#define KTRFPOWERMETER_VAL_ZERO_TEMPERATURE6                1
#define KTRFPOWERMETER_VAL_ZERO_TEMPERATURE9                2
#define KTRFPOWERMETER_VAL_ZERO_TEMPERATURE10               3
#define KTRFPOWERMETER_VAL_ZERO_TEMPERATURE11               4
#define KTRFPOWERMETER_VAL_ZERO_TEMPERATURE12               5

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_BATTERY_BACK_LIGHT_MODE */

#define KTRFPOWERMETER_VAL_BACK_LIGHT_MODE_ON2              0
#define KTRFPOWERMETER_VAL_BACK_LIGHT_MODE_OFF2             1
#define KTRFPOWERMETER_VAL_BACK_LIGHT_MODE_TIMED2           2

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_AUTO_ZERO_ENABLED */

#define KTRFPOWERMETER_VAL_CHANNEL_ZERO_AUTO_OFF2           0
#define KTRFPOWERMETER_VAL_CHANNEL_ZERO_AUTO_ON2            1
#define KTRFPOWERMETER_VAL_CHANNEL_ZERO_AUTO_ONCE2          2

/*- Defined values for
	parameter ApertureLevel in function KtRFPowerMeter_SetAperture */

#define KTRFPOWERMETER_VAL_TIME_GATE_APERTURE_TYPE_MIN      0
#define KTRFPOWERMETER_VAL_TIME_GATE_APERTURE_TYPE_MAX      1
#define KTRFPOWERMETER_VAL_TIME_GATE_APERTURE_TYPE_DEFAULT  2

/*- Defined values for
	parameter Mode in function KtRFPowerMeter_SetMeasurementType
	parameter Mode in function KtRFPowerMeter_GetMeasurementType */

#define KTRFPOWERMETER_VAL_MEASUREMENT_MODE_BUFFER          0
#define KTRFPOWERMETER_VAL_MEASUREMENT_MODE_LIST            1

/*- Defined values for
	parameter SParameter in function KtRFPowerMeter_ChanneslItemCorrectionSparameterGetMagnitudePhasePairs
	parameter SParameter in function KtRFPowerMeter_MemoryGetSParameterTypeMagnitudePhasePairsCount
	parameter SParameter in function KtRFPowerMeter_MemoryGetSParameterTypeMagnitudePhasePairs
	parameter SParameter in function KtRFPowerMeter_MemorySetSParameterTypeMagnitudePhasePairs */

#define KTRFPOWERMETER_VAL_S_PARAMETER_TYPES11              0
#define KTRFPOWERMETER_VAL_S_PARAMETER_TYPES12              1
#define KTRFPOWERMETER_VAL_S_PARAMETER_TYPES21              2
#define KTRFPOWERMETER_VAL_S_PARAMETER_TYPES22              3

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_TILT_UNIT */

#define KTRFPOWERMETER_VAL_MEASUREMENT_TILT_UNITPCT         0
#define KTRFPOWERMETER_VAL_MEASUREMENT_TILT_UNITDB          1

/*- Defined values for
	parameter Status in function KtRFPowerMeter_IsCalibrationComplete */

#define KTRFPOWERMETER_VAL_CALIBRATION_IN_PROGRESS          0
#define KTRFPOWERMETER_VAL_CALIBRATION_COMPLETE             1
#define KTRFPOWERMETER_VAL_CALIBRATION_STATUS_UNKNOWN       -1

/*- Defined values for
	parameter Status in function KtRFPowerMeter_IsZeroComplete */

#define KTRFPOWERMETER_VAL_ZERO_IN_PROGRESS                 0
#define KTRFPOWERMETER_VAL_ZERO_COMPLETE                    1
#define KTRFPOWERMETER_VAL_ZERO_STATUS_UNKNOWN              -1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_UNITS
	parameter Units in function KtRFPowerMeter_ConfigureUnits */

#define KTRFPOWERMETER_VAL_DBM                              1
#define KTRFPOWERMETER_VAL_DBMV                             2
#define KTRFPOWERMETER_VAL_DBUV                             3
#define KTRFPOWERMETER_VAL_WATTS                            4

/*- Defined values for
	parameter Operator in function KtRFPowerMeter_ConfigureMeasurement */

#define KTRFPOWERMETER_VAL_NONE                             0
#define KTRFPOWERMETER_VAL_DIFFERENCE                       1
#define KTRFPOWERMETER_VAL_SUM                              2
#define KTRFPOWERMETER_VAL_QUOTIENT                         3

/*- Defined values for
	parameter Status in function KtRFPowerMeter_IsMeasurementComplete */

#define KTRFPOWERMETER_VAL_MEAS_IN_PROGRESS                 0
#define KTRFPOWERMETER_VAL_MEAS_COMPLETE                    1
#define KTRFPOWERMETER_VAL_MEAS_STATUS_UNKNOWN              -1

/*- Defined values for
	parameter RangeType in function KtRFPowerMeter_QueryResultRangeType */

#define KTRFPOWERMETER_VAL_IN_RANGE                         0
#define KTRFPOWERMETER_VAL_OVER_RANGE                       1
#define KTRFPOWERMETER_VAL_UNDER_RANGE                      -1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_TRIGGER_SOURCE
	parameter TriggerSource in function KtRFPowerMeter_ConfigureTriggerSource */

#define KTRFPOWERMETER_VAL_IMMEDIATE                        1
#define KTRFPOWERMETER_VAL_EXTERNAL                         2
#define KTRFPOWERMETER_VAL_INTERNAL                         3
#define KTRFPOWERMETER_VAL_SOFTWARE_TRIG                    4
#define KTRFPOWERMETER_VAL_TTL0                             100
#define KTRFPOWERMETER_VAL_TTL1                             101
#define KTRFPOWERMETER_VAL_TTL2                             102
#define KTRFPOWERMETER_VAL_TTL3                             103
#define KTRFPOWERMETER_VAL_TTL4                             104
#define KTRFPOWERMETER_VAL_TTL5                             105
#define KTRFPOWERMETER_VAL_TTL6                             106
#define KTRFPOWERMETER_VAL_TTL7                             107
#define KTRFPOWERMETER_VAL_ECL0                             200
#define KTRFPOWERMETER_VAL_ECL1                             201
#define KTRFPOWERMETER_VAL_PXI_STAR                         300
#define KTRFPOWERMETER_VAL_RTSI_0                           400
#define KTRFPOWERMETER_VAL_RTSI_1                           401
#define KTRFPOWERMETER_VAL_RTSI_2                           402
#define KTRFPOWERMETER_VAL_RTSI_3                           403
#define KTRFPOWERMETER_VAL_RTSI_4                           404
#define KTRFPOWERMETER_VAL_RTSI_5                           405
#define KTRFPOWERMETER_VAL_RTSI_6                           406

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_INTERNAL_TRIGGER_SLOPE
	parameter Slope in function KtRFPowerMeter_ConfigureInternalTrigger */

#define KTRFPOWERMETER_VAL_NEGATIVE                         0
#define KTRFPOWERMETER_VAL_POSITIVE                         1

/*- Defined values for */

#define KTRFPOWERMETER_VAL_MAX_TIME_IMMEDIATE               0
#define KTRFPOWERMETER_VAL_MAX_TIME_INFINITE                -1

/*- Defined values for
	parameter Mode in function KtRFPowerMeter_GetTestVoltage
	parameter Mode in function KtRFPowerMeter_InitiateVoltageTest
	parameter Mode in function KtRFPowerMeter_GetVoltageTestUpperLimit
	parameter Mode in function KtRFPowerMeter_GetVoltageTestLowerLimit */

#define KTRFPOWERMETER_VAL_SERVICE_BIST_VOLTAGE_MODEACOM        0
#define KTRFPOWERMETER_VAL_SERVICE_BIST_VOLTAGE_MODE_THERMISTER 1
#define KTRFPOWERMETER_VAL_SERVICE_BIST_VOLTAGE_MODE_OFFSN      2
#define KTRFPOWERMETER_VAL_SERVICE_BIST_VOLTAGE_MODE_OFFSP      3

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_BYTE_ORDER */

#define KTRFPOWERMETER_VAL_MEASUREMENT_BYTE_ORDER_NORMAL    0
#define KTRFPOWERMETER_VAL_MEASUREMENT_BYTE_ORDER_SWAPPED   1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_MEASUREMENTS_ITEM_DATA_FORMAT */

#define KTRFPOWERMETER_VAL_MEASUREMENT_DATA_FORMAT_REAL     0
#define KTRFPOWERMETER_VAL_MEASUREMENT_DATA_FORMAT_ASCII    1

/*- Defined values for
	attribute KTRFPOWERMETER_ATTR_CHANNELS_ITEM_ZERO_TYPE */

#define KTRFPOWERMETER_VAL_CHANNEL_ZERO_TYPE_CALIBRATION_INTERNAL 0
#define KTRFPOWERMETER_VAL_CHANNEL_ZERO_TYPE_CALIBRATION_EXTERNAL 1


/****************************************************************************
 *---------------- Instrument Driver Function Declarations -----------------*
 ****************************************************************************/

/*- KtRFPowerMeter */

ViStatus _VI_FUNC KtRFPowerMeter_init ( ViRsrc ResourceName, ViBoolean IdQuery, ViBoolean Reset, ViSession* Vi );
ViStatus _VI_FUNC KtRFPowerMeter_close ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_InitWithOptions ( ViRsrc ResourceName, ViBoolean IdQuery, ViBoolean Reset, ViConstString OptionsString, ViSession* Vi );

/*- Utility */

ViStatus _VI_FUNC KtRFPowerMeter_revision_query ( ViSession Vi, ViChar DriverRev[], ViChar InstrRev[] );
ViStatus _VI_FUNC KtRFPowerMeter_error_message ( ViSession Vi, ViStatus ErrorCode, ViChar ErrorMessage[] );
ViStatus _VI_FUNC KtRFPowerMeter_GetError ( ViSession Vi, ViStatus* ErrorCode, ViInt32 ErrorDescriptionBufferSize, ViChar ErrorDescription[] );
ViStatus _VI_FUNC KtRFPowerMeter_ClearError ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_ClearInterchangeWarnings ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_GetNextCoercionRecord ( ViSession Vi, ViInt32 CoercionRecordBufferSize, ViChar CoercionRecord[] );
ViStatus _VI_FUNC KtRFPowerMeter_GetNextInterchangeWarning ( ViSession Vi, ViInt32 InterchangeWarningBufferSize, ViChar InterchangeWarning[] );
ViStatus _VI_FUNC KtRFPowerMeter_InvalidateAllAttributes ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_ResetInterchangeCheck ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_Disable ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_error_query ( ViSession Vi, ViInt32* ErrorCode, ViChar ErrorMessage[] );
ViStatus _VI_FUNC KtRFPowerMeter_LockSession ( ViSession Vi, ViBoolean* CallerHasLock );
ViStatus _VI_FUNC KtRFPowerMeter_reset ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_ResetWithDefaults ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_self_test ( ViSession Vi, ViInt16* TestResult, ViChar TestMessage[] );
ViStatus _VI_FUNC KtRFPowerMeter_UnlockSession ( ViSession Vi, ViBoolean* CallerHasLock );

/*- Attribute Accessors */

ViStatus _VI_FUNC KtRFPowerMeter_GetAttributeViInt32 ( ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt32* AttributeValue );
ViStatus _VI_FUNC KtRFPowerMeter_GetAttributeViReal64 ( ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViReal64* AttributeValue );
ViStatus _VI_FUNC KtRFPowerMeter_GetAttributeViBoolean ( ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViBoolean* AttributeValue );
ViStatus _VI_FUNC KtRFPowerMeter_GetAttributeViSession ( ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViSession* AttributeValue );
ViStatus _VI_FUNC KtRFPowerMeter_GetAttributeViString ( ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt32 AttributeValueBufferSize, ViChar AttributeValue[] );
ViStatus _VI_FUNC KtRFPowerMeter_SetAttributeViInt32 ( ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViInt32 AttributeValue );
ViStatus _VI_FUNC KtRFPowerMeter_SetAttributeViReal64 ( ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViReal64 AttributeValue );
ViStatus _VI_FUNC KtRFPowerMeter_SetAttributeViBoolean ( ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViBoolean AttributeValue );
ViStatus _VI_FUNC KtRFPowerMeter_SetAttributeViSession ( ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViSession AttributeValue );
ViStatus _VI_FUNC KtRFPowerMeter_SetAttributeViString ( ViSession Vi, ViConstString RepCapIdentifier, ViAttr AttributeID, ViConstString AttributeValue );

/*- System */

ViStatus _VI_FUNC KtRFPowerMeter_SystemWaitForOperationComplete ( ViSession Vi, ViInt32 MaxTimeMilliseconds );
ViStatus _VI_FUNC KtRFPowerMeter_SystemWait ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_SystemClearIO ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_SystemRecallState ( ViSession Vi, ViInt32 Identifier );
ViStatus _VI_FUNC KtRFPowerMeter_SystemSaveState ( ViSession Vi, ViReal64 Identifier );
ViStatus _VI_FUNC KtRFPowerMeter_SystemPreset ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_viWrite ( ViSession Vi, ViInt64 Count, ViChar Buffer[], ViInt64* ReturnCount );
ViStatus _VI_FUNC KtRFPowerMeter_viRead ( ViSession Vi, ViInt64 BufferSize, ViChar Buffer[], ViInt64* ReturnCount );
ViStatus _VI_FUNC KtRFPowerMeter_SystemWriteString ( ViSession Vi, ViConstString Data );
ViStatus _VI_FUNC KtRFPowerMeter_SystemReadString ( ViSession Vi, ViInt32 ValBufferSize, ViChar Val[] );

/*- Status */

ViStatus _VI_FUNC KtRFPowerMeter_StatusClear ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_StatusGetRegister ( ViSession Vi, ViInt32 Register, ViInt16* Val );
ViStatus _VI_FUNC KtRFPowerMeter_StatusPreset ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_StatusSerialPoll ( ViSession Vi, ViChar* Val );
ViStatus _VI_FUNC KtRFPowerMeter_StatusSetRegister ( ViSession Vi, ViInt32 Register, ViInt16 Value );

/*- Channel */

ViStatus _VI_FUNC KtRFPowerMeter_ChannelIsCalibrationComplete ( ViSession Vi, ViInt32* Val );
ViStatus _VI_FUNC KtRFPowerMeter_ChannelIsZeroComplete ( ViSession Vi, ViInt32* Val );
ViStatus _VI_FUNC KtRFPowerMeter_ChannelsZero ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_ChannelQueryZeroNormal ( ViSession Vi, ViConstString Channel, ViBoolean* Val );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemConfigureVideoBandwidth ( ViSession Vi, ViConstString Channel, ViBoolean VideoBandwidthEnabled, ViInt32 VideoBandwidth );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemCalibrate ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemConfigureRange ( ViSession Vi, ViConstString Channel, ViBoolean AutoRange, ViReal64 UpperPower );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemCalibrateAll ( ViSession Vi, ViConstString Channel );

/*- TimeGate */

ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTimeGatesItemGetTimeGateName ( ViSession Vi, ViConstString Channel, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[] );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTimeGatesItemConfigure ( ViSession Vi, ViConstString TimeGate, ViReal64 Start, ViReal64 Length );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTimeGatesItemGetAutoGatingMarker ( ViSession Vi, ViConstString TimeGate, ViInt32 MarkerReference, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTimeGatesItemSetAutoGatingMarker ( ViSession Vi, ViConstString TimeGate, ViInt32 MarkerReference, ViReal64 RVal );
ViStatus _VI_FUNC KtRFPowerMeter_SetAperture ( ViSession Vi, ViConstString TimeGate, ViInt32 ApertureLevel );

/*- Averaging */

ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemAveragingConfigure ( ViSession Vi, ViConstString Channel, ViBoolean Enabled, ViInt32 Mode );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemAveragingConfigureVideoAveraging ( ViSession Vi, ViConstString Channel, ViBoolean Enabled, ViInt32 Count );
ViStatus _VI_FUNC KtRFPowerMeter_ChannelZero ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_ZeroNormal ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemAveragingReset ( ViSession Vi, ViConstString Channel );

/*- Trace */

ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTraceConfigure ( ViSession Vi, ViConstString Channel, ViBoolean Enabled, ViReal64 Start, ViReal64 Length, ViInt32 Unit );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTraceGetTrace ( ViSession Vi, ViConstString Channel, ViInt32 Resolution, ViInt32 ValBufferSize, ViReal32 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTraceGetInstances ( ViSession Vi, ViConstString Channel, ViReal64 RefLevel, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTraceGetTransitionReferences ( ViSession Vi, ViConstString Channel, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTraceSetTransitionReferences ( ViSession Vi, ViConstString Channel, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTraceSetTransitionReferencesDefault ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTraceAutoScale ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTracePulseDurationReferenceDefault ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_GetFrequency ( ViSession Vi, ViConstString Channel, ViInt32 Pulse, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_GetPeriod ( ViSession Vi, ViConstString Channel, ViInt32 Pulse, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_GetSeparation ( ViSession Vi, ViConstString Channel, ViInt32 Pulse, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_GetDuration ( ViSession Vi, ViConstString Channel, ViInt32 Pulse, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_GetDutyCycle ( ViSession Vi, ViConstString Channel, ViInt32 Pulse, ViInt16* Val );
ViStatus _VI_FUNC KtRFPowerMeter_SetScale ( ViSession Vi, ViConstString Channel, ViInt32 KtRFPowermeterTraceScaleEnum, ViReal64 Value );
ViStatus _VI_FUNC KtRFPowerMeter_GetScale ( ViSession Vi, ViConstString Channel, ViInt32 KtRFPowermeterTraceScaleEnum, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_GetTransitionNegativeDuration ( ViSession Vi, ViConstString Channel, ViInt32 Transition, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_GetTransitionNegativeOccurrence ( ViSession Vi, ViConstString Channel, ViInt32 Transition, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_GetTransitionPositiveDuration ( ViSession Vi, ViConstString Channel, ViInt32 Transition, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_GetTransitionPositiveOccurrence ( ViSession Vi, ViConstString Channel, ViInt32 Transition, ViReal64* Val );

/*- Trigger */

ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTriggerConfigure ( ViSession Vi, ViConstString Channel, ViInt32 Source, ViBoolean AutoDelayEnabled, ViBoolean ContinuousEnabled );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTriggerInitiate ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTriggerAbort ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTriggerInitiateAll ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTriggerImmediate ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTriggerWaitForTrigger ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_GetReferencePowerLevel ( ViSession Vi, ViConstString Channel, ViReal64 ReferenceLevel, ViReal64* Val );

/*- Corrections */

ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemCorrectionConfigureCalFactorTable ( ViSession Vi, ViConstString Channel, ViBoolean Enabled, ViConstString TableName );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemCorrectionConfigureOffset ( ViSession Vi, ViConstString Channel, ViBoolean Enabled, ViReal64 Offset );

/*- DutyCycle */

ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemCorrectionDutyCycleConfigure ( ViSession Vi, ViConstString Channel, ViBoolean Enabled, ViReal64 Value );

/*- Frequency */

ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemCorrectionFrequencyConfigureFreqDepOffsetTable ( ViSession Vi, ViConstString Channel, ViBoolean Enabled, ViInt32 TableNameBufferSize, ViConstString TableName );

/*- Gamma */

ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemCorrectionGammaGetMagnitudePhasePairs ( ViSession Vi, ViConstString Channel, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );

/*- SParameter */

ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemCorrectionSparameterGetMagnitudePhasePairs ( ViSession Vi, ViConstString Channel, ViInt32 SParameter, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );

/*- Frequency */

ViStatus _VI_FUNC KtRFPowerMeter_SetStartvalue ( ViSession Vi, ViConstString Channel, ViInt32 FrequencyMode, ViReal64 Value );
ViStatus _VI_FUNC KtRFPowerMeter_GetStartValue ( ViSession Vi, ViConstString Channel, ViInt32 FrequencyMode, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_SetStopValue ( ViSession Vi, ViConstString Channel, ViInt32 FrequencyMode, ViReal64 Value );
ViStatus _VI_FUNC KtRFPowerMeter_GetStopvalue ( ViSession Vi, ViConstString Channel, ViInt32 FrequencyMode, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_SetStepSize ( ViSession Vi, ViConstString Channel, ViInt32 FrequencyMode, ViReal64 Value );
ViStatus _VI_FUNC KtRFPowerMeter_GetStepSize ( ViSession Vi, ViConstString Channel, ViInt32 FrequencyMode, ViReal64* Val );

/*- CCDF */

ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFGetData ( ViSession Vi, ViConstString Channel, ViInt32 ValBufferSize, ViReal32 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFGetTable ( ViSession Vi, ViConstString Channel, ViInt32 ValBufferSize, ViReal32 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFGetDeltaMarker ( ViSession Vi, ViConstString Channel, ViReal64* Power, ViReal64* Prob );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFGetMarkerData ( ViSession Vi, ViConstString Channel, ViInt32 MarkerRef, ViReal64* Power, ViReal64* Prob );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFGetReferenceTraceData ( ViSession Vi, ViConstString Channel, ViInt32 ValBufferSize, ViReal32 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFReferenceTraceEnabled ( ViSession Vi, ViConstString Channel, ViBoolean* Val );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFSaveReferenceTrace ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFGetGaussianMarker ( ViSession Vi, ViConstString Channel, ViInt32 MarkerRef );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFSetMarkerX ( ViSession Vi, ViConstString Channel, ViReal64 Power, ViInt32 MarkerRef );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFSetMarkerY ( ViSession Vi, ViConstString Channel, ViReal64 Power, ViInt32 MarkerRef );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFSetReferenceMarker ( ViSession Vi, ViConstString Channel, ViInt32 MarkerRef );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFSetTraceMarker ( ViSession Vi, ViConstString Channel, ViInt32 MarkerRef );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemStatisticsCCDFConfigureTimeGate ( ViSession Vi, ViConstString Channel, ViBoolean Enabled, ViReal64 Start, ViReal64 Length );
ViStatus _VI_FUNC KtRFPowerMeter_GetValue ( ViSession Vi, ViConstString Channel, ViReal64 Probability, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_GetProbability ( ViSession Vi, ViConstString Channel, ViReal64 Power, ViReal64* Val );

/*- External */

ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTemperatureExternalSetRiseCoefficient ( ViSession Vi, ViConstString Channel, ViReal64 Coef1, ViReal64 Coef2, ViReal64 Coef3, ViReal64 Coef4 );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTemperatureExternalSetFallCoefficient ( ViSession Vi, ViConstString Channel, ViReal64 Coef1, ViReal64 Coef2, ViReal64 Coef3, ViReal64 Coef4 );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTemperatureExternalGetRiseCoefficient ( ViSession Vi, ViConstString Channel, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTemperatureExternalGetFallCoefficient ( ViSession Vi, ViConstString Channel, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );

/*- Internal */

ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTemperatureInternalSetCoefficient ( ViSession Vi, ViConstString Channel, ViReal64 Coef1, ViReal64 Coef2 );
ViStatus _VI_FUNC KtRFPowerMeter_ChanneslItemTemperatureInternalGetCoefficient ( ViSession Vi, ViConstString Channel, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );

/*- Measurement */

ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemGetMeasurementName ( ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[] );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemConfigure ( ViSession Vi, ViConstString Measurement, ViInt32 Feed1Type, ViInt32 Feed2Type, ViInt32 Feed1Channel, ViInt32 Feed2Channel, ViInt32 Operation );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemAbort ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemInitiate ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementIsOperationComplete ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemClearLimitFails ( ViSession Vi, ViConstString Measurement );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemConfigureAnalogOutput ( ViSession Vi, ViConstString Measurement, ViInt32 AnalogOutput, ViReal64 UpperValue, ViReal64 LowerValue );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemConfigureLimits ( ViSession Vi, ViConstString Measurement, ViReal64 Upper, ViReal64 Lower, ViBoolean Enabled, ViInt32 AutoClear );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemConfigureOffset ( ViSession Vi, ViConstString Measurement, ViBoolean Enabled, ViReal64 Value );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemConfigureRelative ( ViSession Vi, ViConstString Measurement, ViBoolean Enabled, ViBoolean SetValue );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemConfigureTimeGated ( ViSession Vi, ViConstString Measurement, ViInt32 Feed1Gate, ViInt32 Feed2Gate, ViInt32 Feed1Type, ViInt32 Feed2Type, ViInt32 Feed1Channel, ViInt32 Feed2Channel, ViInt32 Operation );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemConfigureTTLOutput ( ViSession Vi, ViConstString Measurement, ViInt32 Output, ViInt32 Limit, ViInt32 Sense );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemEnableAnalogOutput ( ViSession Vi, ViConstString Measurement, ViInt32 AnalogOutput, ViBoolean Enabled );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemEnableTTLOutput ( ViSession Vi, ViConstString Measurement, ViBoolean Enabled, ViInt32 Output );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemFetch ( ViSession Vi, ViConstString Measurement, ViInt32 MaxTime, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemMeasure ( ViSession Vi, ViConstString Measurement, ViInt32 MaxTime, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemRead ( ViSession Vi, ViConstString Measurement, ViInt32 MaxTime, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemConfigureScalarPower ( ViSession Vi, ViConstString Measurement, ViInt32 MaxTime, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemFetchVoltage ( ViSession Vi, ViConstString Measurement, ViInt32 VoltType, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemFetchBuffer ( ViSession Vi, ViConstString Measurement, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_MeasurementsItemReadBuffer ( ViSession Vi, ViConstString Measurement, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ClearPeakHoldValue ( ViSession Vi, ViConstString Measurement );
ViStatus _VI_FUNC KtRFPowerMeter_GetTilt ( ViSession Vi, ViConstString Measurement, ViReal64 Index, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_SetMeasurementType ( ViSession Vi, ViConstString Measurement, ViInt32 Mode, ViReal64 Value );
ViStatus _VI_FUNC KtRFPowerMeter_GetMeasurementType ( ViSession Vi, ViConstString Measurement, ViInt32 Mode, ViReal64* Val );

/*- Display */

ViStatus _VI_FUNC KtRFPowerMeter_DisplayConfigure ( ViSession Vi, ViBoolean Enabled, ViInt32 Format );

/*- Window */

ViStatus _VI_FUNC KtRFPowerMeter_DisplayWindowGetWindowName ( ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[] );
ViStatus _VI_FUNC KtRFPowerMeter_DisplayWindowConfigure ( ViSession Vi, ViConstString Window, ViInt32 Format, ViInt32 SelectedMeasurement );
ViStatus _VI_FUNC KtRFPowerMeter_DisplayWindowConfigureMeter ( ViSession Vi, ViConstString Window, ViReal64 MeterUpper, ViReal64 MeterLower, ViInt32 SelectedMeasurement );

/*- FrequencyOffsetTable */

ViStatus _VI_FUNC KtRFPowerMeter_FrequencyOffsetTableConfigure ( ViSession Vi, ViInt32 FrequenciesBufferSize, ViReal64 Frequencies[], ViInt32* FrequenciesActualSize, ViInt32 OffsetsBufferSize, ViReal64 Offsets[], ViInt32* OffsetsActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_FrequencyOffsetTableGetFrequencies ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_FrequencyOffsetTableGetOffsets ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_FrequencyOffsetTableRename ( ViSession Vi, ViConstString OldName, ViConstString NewName );
ViStatus _VI_FUNC KtRFPowerMeter_FrequencyOffsetTableSetFrequencies ( ViSession Vi, ViInt32 ValueBufferSize, ViReal64 Value[] );
ViStatus _VI_FUNC KtRFPowerMeter_FrequencyOffsetTableSetOffsets ( ViSession Vi, ViInt32 ValueBufferSize, ViReal64 Value[], ViInt32* ValueActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_FrequencyOffsetTableGetGain ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_FrequencyOffsetTableSetGain ( ViSession Vi, ViInt32 ValueBufferSize, ViReal64 Value[], ViInt32* ValueActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_GetFreqPoints ( ViSession Vi, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_GetGainPoints ( ViSession Vi, ViInt32* Val );
ViStatus _VI_FUNC KtRFPowerMeter_SelectTable ( ViSession Vi, ViConstString Name );
ViStatus _VI_FUNC KtRFPowerMeter_GetSelectedTable ( ViSession Vi, ViInt32 ValBufferSize, ViChar Val[] );

/*- SensorCalibrationTable */

ViStatus _VI_FUNC KtRFPowerMeter_SensorCalibrationTableConfigure ( ViSession Vi, ViInt32 FrequenciesBufferSize, ViReal64 Frequencies[], ViInt32* FrequenciesActualSize, ViInt32 GainsBufferSize, ViReal64 Gains[], ViInt32* GainsActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_SensorCalibrationTableGetFrequencies ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_SensorCalibrationTableGetOffsets ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_SensorCalibrationTableRename ( ViSession Vi, ViConstString OldName, ViConstString NewName );
ViStatus _VI_FUNC KtRFPowerMeter_SensorCalibrationTableSetFrequencies ( ViSession Vi, ViInt32 ValueBufferSize, ViReal64 Value[], ViInt32* ValueActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_SensorCalibrationTableSetOffsets ( ViSession Vi, ViInt32 ValueBufferSize, ViReal64 Value[] );

/*- Trigger */

ViStatus _VI_FUNC KtRFPowerMeter_TriggerConfigure ( ViSession Vi, ViBoolean AutoLevelEnabled, ViReal64 Delay, ViReal64 HoldOff, ViReal64 Hysteresis, ViReal64 Level, ViBoolean OutputEnabled, ViInt32 Slope );

/*- Memory */

ViStatus _VI_FUNC KtRFPowerMeter_MemoryAssignName ( ViSession Vi, ViConstString RegisterName, ViInt16 RegisterNo );
ViStatus _VI_FUNC KtRFPowerMeter_MemoryGetFreeMemory ( ViSession Vi, ViInt32 CatalogType, ViInt32 ValBufferSize, ViInt32 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_MemoryGetRegisterNumber ( ViSession Vi, ViConstString RegisterName, ViInt16* Val );
ViStatus _VI_FUNC KtRFPowerMeter_MemoryClearContents ( ViSession Vi, ViConstString RegisterName );
ViStatus _VI_FUNC KtRFPowerMeter_MemoryClearTableContents ( ViSession Vi, ViInt32 Device );
ViStatus _VI_FUNC KtRFPowerMeter_MemoryGetGammaTableMagnitudePhasePairsCount ( ViSession Vi, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_MemoryGetSParameterTypeMagnitudePhasePairsCount ( ViSession Vi, ViInt32 SParameter, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_MemoryGetSParameterTypeMagnitudePhasePairs ( ViSession Vi, ViInt32 SParameter, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_MemoryGetGammaTableMagnitudePhasePairs ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_MemorySetGammaTableMagnitudePhasePairs ( ViSession Vi, ViInt32 ValueBufferSize, ViReal64 Value[] );
ViStatus _VI_FUNC KtRFPowerMeter_MemorySetSParameterTypeMagnitudePhasePairs ( ViSession Vi, ViInt32 SParameter, ViInt32 ValueBufferSize, ViReal64 Value[] );
ViStatus _VI_FUNC KtRFPowerMeter_GetSaveRecallRegisterList ( ViSession Vi, ViInt32 Device, ViInt32 ValBufferSize, ViChar Val[] );
ViStatus _VI_FUNC KtRFPowerMeter_GetSaveRecallRegisterAvailable ( ViSession Vi, ViInt32 Device, ViReal64* Val );

/*- Service */

ViStatus _VI_FUNC KtRFPowerMeter_ServiceGetAverageZero ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceGetZeroOffset ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceSetZero ( ViSession Vi );

/*- BIST */

ViStatus _VI_FUNC KtRFPowerMeter_ServiceBISTGetLinearityTestError ( ViSession Vi, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceBISTLinearityTest ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_GetTestVoltage ( ViSession Vi, ViInt32 Mode, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_InitiateVoltageTest ( ViSession Vi, ViInt32 Mode, ViInt32 ValBufferSize, ViChar Val[] );
ViStatus _VI_FUNC KtRFPowerMeter_GetVoltageTestUpperLimit ( ViSession Vi, ViInt32 Mode, ViReal64* Val );
ViStatus _VI_FUNC KtRFPowerMeter_GetVoltageTestLowerLimit ( ViSession Vi, ViInt32 Mode, ViReal64* Val );

/*- Firmware */

ViStatus _VI_FUNC KtRFPowerMeter_ServiceFirmwareEraseMemory ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceFirmwareClearMemory ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceFirmwareClearError ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceFirmwareGetError ( ViSession Vi, ViInt32 ValBufferSize, ViChar Val[] );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceFirmwareFlashUpdate ( ViSession Vi );

/*- ADC */

ViStatus _VI_FUNC KtRFPowerMeter_ServiceADCGetStdDev ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceADCGetADCData1 ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceADCGetADCData ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceADCGetUncorrectedAvg ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceADCGetRawZeroAvgOffset ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceADCGetAverageAll ( ViSession Vi, ViInt32 ValBufferSize, ViReal64 Val[], ViInt32* ValActualSize );
ViStatus _VI_FUNC KtRFPowerMeter_ServiceADCStartADC ( ViSession Vi );

/*- Configuration */

ViStatus _VI_FUNC KtRFPowerMeter_ConfigureAveragingAutoEnabled ( ViSession Vi, ViConstString Channel, ViBoolean AveragingAutoEnabled );
ViStatus _VI_FUNC KtRFPowerMeter_ConfigureCorrectionFrequency ( ViSession Vi, ViConstString Channel, ViReal64 CorrectionFrequency );
ViStatus _VI_FUNC KtRFPowerMeter_ConfigureOffset ( ViSession Vi, ViConstString Channel, ViReal64 Offset );
ViStatus _VI_FUNC KtRFPowerMeter_ConfigureRangeAutoEnabled ( ViSession Vi, ViConstString Channel, ViBoolean RangeAutoEnabled );
ViStatus _VI_FUNC KtRFPowerMeter_ConfigureUnits ( ViSession Vi, ViInt32 Units );
ViStatus _VI_FUNC KtRFPowerMeter_ConfigureMeasurement ( ViSession Vi, ViInt32 Operator, ViConstString Operand1, ViConstString Operand2 );

/*- Channel */

ViStatus _VI_FUNC KtRFPowerMeter_GetChannelName ( ViSession Vi, ViInt32 Index, ViInt32 NameBufferSize, ViChar Name[] );

/*- Channel Acquisition */

ViStatus _VI_FUNC KtRFPowerMeter_ConfigureChannelEnabled ( ViSession Vi, ViConstString Channel, ViBoolean ChannelEnabled );

/*- Trigger */

ViStatus _VI_FUNC KtRFPowerMeter_ConfigureTriggerSource ( ViSession Vi, ViInt32 TriggerSource );

/*- Internal Trigger */

ViStatus _VI_FUNC KtRFPowerMeter_ConfigureInternalTriggerLevel ( ViSession Vi, ViReal64 TriggerLevel );
ViStatus _VI_FUNC KtRFPowerMeter_ConfigureInternalTrigger ( ViSession Vi, ViConstString EventSource, ViInt32 Slope );

/*- Averaging */

ViStatus _VI_FUNC KtRFPowerMeter_ConfigureAveragingCount ( ViSession Vi, ViConstString Channel, ViInt32 Count );

/*- Reference Oscillator */

ViStatus _VI_FUNC KtRFPowerMeter_ConfigureRefOscillatorEnabled ( ViSession Vi, ViBoolean RefOscillatorEnabled );
ViStatus _VI_FUNC KtRFPowerMeter_ConfigureRefOscillator ( ViSession Vi, ViReal64 Frequency, ViReal64 Level );

/*- Range */

ViStatus _VI_FUNC KtRFPowerMeter_ConfigureRange ( ViSession Vi, ViConstString Channel, ViReal64 RangeLower, ViReal64 RangeUpper );

/*- Calibration */

ViStatus _VI_FUNC KtRFPowerMeter_Calibrate ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_IsCalibrationComplete ( ViSession Vi, ViInt32* Status );

/*- Zeroing */

ViStatus _VI_FUNC KtRFPowerMeter_Zero ( ViSession Vi, ViConstString Channel );
ViStatus _VI_FUNC KtRFPowerMeter_IsZeroComplete ( ViSession Vi, ViInt32* Status );
ViStatus _VI_FUNC KtRFPowerMeter_ZeroAllChannels ( ViSession Vi );

/*- Duty Cycle */

ViStatus _VI_FUNC KtRFPowerMeter_ConfigureDutyCycleCorrection ( ViSession Vi, ViConstString Channel, ViBoolean CorrectionEnabled, ViReal64 Correction );

/*- Measurement */

ViStatus _VI_FUNC KtRFPowerMeter_Read ( ViSession Vi, ViInt32 MaxTimeMilliseconds, ViReal64* Result );
ViStatus _VI_FUNC KtRFPowerMeter_ReadChannel ( ViSession Vi, ViConstString Channel, ViInt32 MaxTimeMilliseconds, ViReal64* Result );

/*- Low-Level Measurement */

ViStatus _VI_FUNC KtRFPowerMeter_Abort ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_Fetch ( ViSession Vi, ViReal64* Result );
ViStatus _VI_FUNC KtRFPowerMeter_FetchChannel ( ViSession Vi, ViConstString Channel, ViReal64* Result );
ViStatus _VI_FUNC KtRFPowerMeter_Initiate ( ViSession Vi );
ViStatus _VI_FUNC KtRFPowerMeter_IsMeasurementComplete ( ViSession Vi, ViInt32* Status );
ViStatus _VI_FUNC KtRFPowerMeter_QueryResultRangeType ( ViSession Vi, ViReal64 MeasurementValue, ViInt32* RangeType );
ViStatus _VI_FUNC KtRFPowerMeter_SendSoftwareTrigger ( ViSession Vi );


/****************************************************************************
 *----------------- Instrument Error And Completion Codes ------------------*
 ****************************************************************************/
#ifndef _IVIC_ERROR_BASE_DEFINES_
#define _IVIC_ERROR_BASE_DEFINES_

#define IVIC_WARN_BASE                           (0x3FFA0000L)
#define IVIC_CROSS_CLASS_WARN_BASE               (IVIC_WARN_BASE + 0x1000)
#define IVIC_CLASS_WARN_BASE                     (IVIC_WARN_BASE + 0x2000)
#define IVIC_SPECIFIC_WARN_BASE                  (IVIC_WARN_BASE + 0x4000)

#define IVIC_ERROR_BASE                          (0xBFFA0000L)
#define IVIC_CROSS_CLASS_ERROR_BASE              (IVIC_ERROR_BASE + 0x1000)
#define IVIC_CLASS_ERROR_BASE                    (IVIC_ERROR_BASE + 0x2000)
#define IVIC_SPECIFIC_ERROR_BASE                 (IVIC_ERROR_BASE + 0x4000)
#define IVIC_LXISYNC_ERROR_BASE                  (IVIC_ERROR_BASE + 0x2000)

#endif


#define KTRFPOWERMETER_ERROR_CANNOT_RECOVER                       (IVIC_ERROR_BASE + 0x0000)
#define KTRFPOWERMETER_ERROR_INSTRUMENT_STATUS                    (IVIC_ERROR_BASE + 0x0001)
#define KTRFPOWERMETER_ERROR_CANNOT_OPEN_FILE                     (IVIC_ERROR_BASE + 0x0002)
#define KTRFPOWERMETER_ERROR_READING_FILE                         (IVIC_ERROR_BASE + 0x0003)
#define KTRFPOWERMETER_ERROR_WRITING_FILE                         (IVIC_ERROR_BASE + 0x0004)
#define KTRFPOWERMETER_ERROR_INVALID_PATHNAME                     (IVIC_ERROR_BASE + 0x000B)
#define KTRFPOWERMETER_ERROR_INVALID_VALUE                        (IVIC_ERROR_BASE + 0x0010)
#define KTRFPOWERMETER_ERROR_FUNCTION_NOT_SUPPORTED               (IVIC_ERROR_BASE + 0x0011)
#define KTRFPOWERMETER_ERROR_ATTRIBUTE_NOT_SUPPORTED              (IVIC_ERROR_BASE + 0x0012)
#define KTRFPOWERMETER_ERROR_VALUE_NOT_SUPPORTED                  (IVIC_ERROR_BASE + 0x0013)
#define KTRFPOWERMETER_ERROR_NOT_INITIALIZED                      (IVIC_ERROR_BASE + 0x001D)
#define KTRFPOWERMETER_ERROR_UNKNOWN_CHANNEL_NAME                 (IVIC_ERROR_BASE + 0x0020)
#define KTRFPOWERMETER_ERROR_TOO_MANY_OPEN_FILES                  (IVIC_ERROR_BASE + 0x0023)
#define KTRFPOWERMETER_ERROR_CHANNEL_NAME_REQUIRED                (IVIC_ERROR_BASE + 0x0044)
#define KTRFPOWERMETER_ERROR_MISSING_OPTION_NAME                  (IVIC_ERROR_BASE + 0x0049)
#define KTRFPOWERMETER_ERROR_MISSING_OPTION_VALUE                 (IVIC_ERROR_BASE + 0x004A)
#define KTRFPOWERMETER_ERROR_BAD_OPTION_NAME                      (IVIC_ERROR_BASE + 0x004B)
#define KTRFPOWERMETER_ERROR_BAD_OPTION_VALUE                     (IVIC_ERROR_BASE + 0x004C)
#define KTRFPOWERMETER_ERROR_OUT_OF_MEMORY                        (IVIC_ERROR_BASE + 0x0056)
#define KTRFPOWERMETER_ERROR_OPERATION_PENDING                    (IVIC_ERROR_BASE + 0x0057)
#define KTRFPOWERMETER_ERROR_NULL_POINTER                         (IVIC_ERROR_BASE + 0x0058)
#define KTRFPOWERMETER_ERROR_UNEXPECTED_RESPONSE                  (IVIC_ERROR_BASE + 0x0059)
#define KTRFPOWERMETER_ERROR_FILE_NOT_FOUND                       (IVIC_ERROR_BASE + 0x005B)
#define KTRFPOWERMETER_ERROR_INVALID_FILE_FORMAT                  (IVIC_ERROR_BASE + 0x005C)
#define KTRFPOWERMETER_ERROR_STATUS_NOT_AVAILABLE                 (IVIC_ERROR_BASE + 0x005D)
#define KTRFPOWERMETER_ERROR_ID_QUERY_FAILED                      (IVIC_ERROR_BASE + 0x005E)
#define KTRFPOWERMETER_ERROR_RESET_FAILED                         (IVIC_ERROR_BASE + 0x005F)
#define KTRFPOWERMETER_ERROR_RESOURCE_UNKNOWN                     (IVIC_ERROR_BASE + 0x0060)
#define KTRFPOWERMETER_ERROR_ALREADY_INITIALIZED                  (IVIC_ERROR_BASE + 0x0061)
#define KTRFPOWERMETER_ERROR_CANNOT_CHANGE_SIMULATION_STATE       (IVIC_ERROR_BASE + 0x0062)
#define KTRFPOWERMETER_ERROR_INVALID_NUMBER_OF_LEVELS_IN_SELECTOR (IVIC_ERROR_BASE + 0x0063)
#define KTRFPOWERMETER_ERROR_INVALID_RANGE_IN_SELECTOR            (IVIC_ERROR_BASE + 0x0064)
#define KTRFPOWERMETER_ERROR_UNKOWN_NAME_IN_SELECTOR              (IVIC_ERROR_BASE + 0x0065)
#define KTRFPOWERMETER_ERROR_BADLY_FORMED_SELECTOR                (IVIC_ERROR_BASE + 0x0066)
#define KTRFPOWERMETER_ERROR_UNKNOWN_PHYSICAL_IDENTIFIER          (IVIC_ERROR_BASE + 0x0067)
#define KTRFPOWERMETER_ERROR_INVALID_ATTRIBUTE                    (IVIC_ERROR_BASE + 0x000C)
#define KTRFPOWERMETER_ERROR_TYPES_DO_NOT_MATCH                   (IVIC_ERROR_BASE + 0x0015)
#define KTRFPOWERMETER_ERROR_IVI_ATTR_NOT_WRITABLE                (IVIC_ERROR_BASE + 0x000D)
#define KTRFPOWERMETER_ERROR_IVI_ATTR_NOT_READABLE                (IVIC_ERROR_BASE + 0x000E)
#define KTRFPOWERMETER_ERROR_INVALID_SESSION_HANDLE               (IVIC_ERROR_BASE + 0x1190)



#define KTRFPOWERMETER_SUCCESS                              0
#define KTRFPOWERMETER_WARN_NSUP_ID_QUERY                   (IVIC_WARN_BASE + 0x0065)
#define KTRFPOWERMETER_WARN_NSUP_RESET                      (IVIC_WARN_BASE + 0x0066)
#define KTRFPOWERMETER_WARN_NSUP_SELF_TEST                  (IVIC_WARN_BASE + 0x0067)
#define KTRFPOWERMETER_WARN_NSUP_ERROR_QUERY                (IVIC_WARN_BASE + 0x0068)
#define KTRFPOWERMETER_WARN_NSUP_REV_QUERY                  (IVIC_WARN_BASE + 0x0069)



#define KTRFPOWERMETER_ERROR_IO_GENERAL                     (IVIC_SPECIFIC_ERROR_BASE + 0x0214)
#define KTRFPOWERMETER_ERROR_IO_TIMEOUT                     (IVIC_SPECIFIC_ERROR_BASE + 0x0215)
#define KTRFPOWERMETER_ERROR_MODEL_NOT_SUPPORTED            (IVIC_SPECIFIC_ERROR_BASE + 0x0216)
#define KTRFPOWERMETER_ERROR_CHANNEL_NOT_SUPPORTED          (IVIC_SPECIFIC_ERROR_BASE + 0x0001)
#define KTRFPOWERMETER_ERROR_INVALID_MEASUREMENT            (IVIC_SPECIFIC_ERROR_BASE + 0x0002)
#define KTRFPOWERMETER_ERROR_LOCAL_CONTROLS_ERROR           (IVIC_SPECIFIC_ERROR_BASE + 0x0003)
#define KTRFPOWERMETER_ERROR_SENSOR_NOT_VALID               (IVIC_SPECIFIC_ERROR_BASE + 0x0004)
#define KTRFPOWERMETER_ERROR_NOT_SUPPORTED                  (IVIC_SPECIFIC_ERROR_BASE + 0x0005)
#define KTRFPOWERMETER_ERROR_RETURN_ERROR                   (IVIC_SPECIFIC_ERROR_BASE + 0x0006)
#define KTRFPOWERMETER_ERROR_CHANNEL_NOT_ENABLED            (IVIC_CLASS_ERROR_BASE + 0x0001)
#define KTRFPOWERMETER_ERROR_MAX_TIME_EXCEEDED              (IVIC_CLASS_ERROR_BASE + 0x0020)
#define KTRFPOWERMETER_ERROR_TRIGGER_NOT_SOFTWARE           (IVIC_CLASS_ERROR_BASE + 0x0001)
#define KTRFPOWERMETER_ERROR_SETTINGS_CONFLICT              (IVIC_SPECIFIC_ERROR_BASE + 0x0007)



#define KTRFPOWERMETER_WARN_UNDER_RANGE                     (IVIC_CLASS_WARN_BASE + 0x0001)
#define KTRFPOWERMETER_WARN_OVER_RANGE                      (IVIC_CLASS_WARN_BASE + 0x0002)


/****************************************************************************
 *---------------------------- End Include File ----------------------------*
 ****************************************************************************/
#if defined(__cplusplus) || defined(__cplusplus__)
}
#endif
#endif // __KTRFPOWERMETER_HEADER
