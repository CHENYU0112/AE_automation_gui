from __future__ import annotations

TEMPLATE_CLASS = '''from typing import Any, List, Tuple
from .{drivername}_dllwrap import *
from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper


class {drivername}(IVICDriverWrapper):
    def __init__(self):
        super({drivername}, self).__init__()
        self._dllwrap = {drivername}_dllwrap()
        self._vi: int = None
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self) -> bool:
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self) -> str:
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName: str, IdQuery: bool, Reset: bool, OptionString: str = ""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :param Reset: Specifies whether to reset the instrument.
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

{methods}
'''

TEMPLATE_CLASS_METHOD = """    def {fname}({fargs_no_vi}){rtype}:
        return self._dllwrap.{fname}({fargs})

"""


TEMPLATE_WRAPPERCLASS = '''from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper
from ctypes import byref
from .{drivername}_const import *
from . import {drivername}_const as const


class {drivername}_dllwrap(IVICDriverWrapper):
    BUFSIZE = 1024

    def __init__(self):
        super({drivername}_dllwrap, self).__init__()
        self._dll = load_dll("{dllpath32}", "{dllpath64}")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "{drivername}"

    @property
    def const(self):
        return const'''

TEMPLATE_METHOD = """

    def {fname}(self, {fargs}):
        {pointer_preprocessing}
        _status = self.dll.{prefix}{fname}({callargs})
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        {pointer_postprocessing}
        return {returns}"""


TEMPLATE_TEST = """from pverify.drivers.{group}.{drivername}.{drivername} import *

drv = {drivername}()
drv.Initialize("GPIB0::1::INSTR", True, False, OptionString="simulate=true")
print(drv.GetAttributeViString(None, IVI_ATTR_INSTRUMENT_MANUFACTURER, 1024))
print(drv.Identity.Revision)
print(drv.Identity.InstrumentFirmwareRevision)
print(drv.Identity.Identifier)
drv.Close()
"""
