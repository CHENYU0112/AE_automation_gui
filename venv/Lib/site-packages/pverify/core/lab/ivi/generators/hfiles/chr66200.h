/****************************************************************************
 *                       Chroma Digital Power Meter 66200 Series
 *---------------------------------------------------------------------------
 *   Copyright (c) National Instruments 1998.  All Rights Reserved.
 *---------------------------------------------------------------------------
 *
 * Title:    chr66200.h
 * Purpose:  Chroma Digital Power Meter 66200 Series
 *           instrument driver declarations.
 *
 ****************************************************************************/

#ifndef __CHR66200_HEADER
#define __CHR66200_HEADER

#include <ivi.h>

#if defined(__cplusplus) || defined(__cplusplus__)
extern "C" {
#endif

/****************************************************************************
 *----------------- Instrument Driver Revision Information -----------------*
 ****************************************************************************/
#define CHR66200_MAJOR_VERSION                1     /* Instrument driver major version   */
#define CHR66200_MINOR_VERSION                0     /* Instrument driver minor version   */

#define CHR66200_CLASS_SPEC_MAJOR_VERSION     2     /* Class specification major version */
#define CHR66200_CLASS_SPEC_MINOR_VERSION     0     /* Class specification minor version */

#define CHR66200_SUPPORTED_INSTRUMENT_MODELS  "66201,66202"
#define CHR66200_DRIVER_VENDOR                "Chroma ATE INC."
#define CHR66200_DRIVER_DESCRIPTION           "Digital Power Meter 66200 Series Instrument Driver"

/****************************************************************************
 *------------------------------ Useful Macros -----------------------------*
 ****************************************************************************/

/****************************************************************************
 *---------------------------- Attribute Defines ---------------------------*
 ****************************************************************************/

    /*- IVI Inherent Instrument Attributes ---------------------------------*/

        /* User Options */
#define CHR66200_ATTR_RANGE_CHECK                   IVI_ATTR_RANGE_CHECK                    /* ViBoolean */
#define CHR66200_ATTR_QUERY_INSTR_STATUS            IVI_ATTR_QUERY_INSTR_STATUS             /* ViBoolean */
#define CHR66200_ATTR_CACHE                         IVI_ATTR_CACHE                          /* ViBoolean */
#define CHR66200_ATTR_SIMULATE                      IVI_ATTR_SIMULATE                       /* ViBoolean */
#define CHR66200_ATTR_RECORD_COERCIONS              IVI_ATTR_RECORD_COERCIONS               /* ViBoolean */

        /* Instrument Capabilities */
#define CHR66200_ATTR_NUM_CHANNELS                  IVI_ATTR_NUM_CHANNELS                   /* ViInt32,  read-only  */

        /* Driver Information  */
#define CHR66200_ATTR_SPECIFIC_DRIVER_PREFIX        IVI_ATTR_SPECIFIC_DRIVER_PREFIX         /* ViString, read-only  */
#define CHR66200_ATTR_SUPPORTED_INSTRUMENT_MODELS   IVI_ATTR_SUPPORTED_INSTRUMENT_MODELS    /* ViString, read-only  */
#define CHR66200_ATTR_GROUP_CAPABILITIES            IVI_ATTR_GROUP_CAPABILITIES             /* ViString, read-only  */
#define CHR66200_ATTR_INSTRUMENT_MANUFACTURER       IVI_ATTR_INSTRUMENT_MANUFACTURER        /* ViString, read-only  */
#define CHR66200_ATTR_INSTRUMENT_MODEL              IVI_ATTR_INSTRUMENT_MODEL               /* ViString, read-only  */
#define CHR66200_ATTR_INSTRUMENT_FIRMWARE_REVISION  IVI_ATTR_INSTRUMENT_FIRMWARE_REVISION              /* ViString, read-only  */
#define CHR66200_ATTR_SPECIFIC_DRIVER_MAJOR_VERSION IVI_ATTR_SPECIFIC_DRIVER_MAJOR_VERSION  /* ViInt32,  read-only  */
#define CHR66200_ATTR_SPECIFIC_DRIVER_MINOR_VERSION IVI_ATTR_SPECIFIC_DRIVER_MINOR_VERSION  /* ViInt32,  read-only  */
#define CHR66200_ATTR_SPECIFIC_DRIVER_REVISION      IVI_ATTR_SPECIFIC_DRIVER_REVISION       /* ViString, read-only  */
#define CHR66200_ATTR_SPECIFIC_DRIVER_VENDOR        IVI_ATTR_SPECIFIC_DRIVER_VENDOR         /* ViString, read-only  */
#define CHR66200_ATTR_SPECIFIC_DRIVER_DESCRIPTION   IVI_ATTR_SPECIFIC_DRIVER_DESCRIPTION    /* ViString, read-only  */
#define CHR66200_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION IVI_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MAJOR_VERSION /* ViInt32, read-only */
#define CHR66200_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION IVI_ATTR_SPECIFIC_DRIVER_CLASS_SPEC_MINOR_VERSION /* ViInt32, read-only */

        /* Error Info */
#define CHR66200_ATTR_PRIMARY_ERROR                 IVI_ATTR_PRIMARY_ERROR                  /* ViInt32   */
#define CHR66200_ATTR_SECONDARY_ERROR               IVI_ATTR_SECONDARY_ERROR                /* ViInt32   */
#define CHR66200_ATTR_ERROR_ELABORATION             IVI_ATTR_ERROR_ELABORATION              /* ViString  */

        /* Advanced Session Information */
#define CHR66200_ATTR_LOGICAL_NAME                  IVI_ATTR_LOGICAL_NAME                   /* ViString, read-only  */
#define CHR66200_ATTR_RESOURCE_DESCRIPTOR           IVI_ATTR_RESOURCE_DESCRIPTOR            /* ViString, read-only  */
#define CHR66200_ATTR_IO_SESSION_TYPE               IVI_ATTR_IO_SESSION_TYPE                /* ViString, read-only  */
#define CHR66200_ATTR_IO_SESSION                    IVI_ATTR_IO_SESSION                     /* ViSession, read-only */


    /*- Instrument-Specific Attributes -------------------------------------*/

#define CHR66200_ATTR_ID_QUERY_RESPONSE      (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 1L)     /* ViString (Read Only) */
#define CHR66200_ATTR_CURR_SHUNT            (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 2L)
#define CHR66200_ATTR_CURR_RANGE            (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 3L)
#define CHR66200_ATTR_INRUSH_LEVEL          (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 4L)
#define CHR66200_ATTR_INRUSH_TIME           (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 5L)
#define CHR66200_ATTR_INRUSH_DELAY          (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 6L)
#define CHR66200_ATTR_VOLT_RANGE            (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 7L)
#define CHR66200_ATTR_AVERAGE               (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 8L)
#define CHR66200_ATTR_POWER_INTEGRATE       (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 9L)
#define CHR66200_ATTR_FILTER                (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 10L)
#define CHR66200_ATTR_ENERGY_TIME           (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 11L)
#define CHR66200_ATTR_THD_MODE              (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 12L)
#define CHR66200_ATTR_THD_ORDER             (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 13L)
#define CHR66200_ATTR_COMPARATOR            (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 14L)
#define CHR66200_ATTR_COMPARATOR_TIME       (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 15L)
#define CHR66200_ATTR_STATUS_ESE            (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 16L)
#define CHR66200_ATTR_STATUS_SRE            (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 17L)
#define CHR66200_ATTR_STATUS_OPERATION_ENABLE (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 18L)
#define CHR66200_ATTR_STATUS_QUESTIONABLE_ENABLE (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 19L)
#define CHR66200_ATTR_STATUS_QUESTIONABLE_NTR (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 20L)
#define CHR66200_ATTR_STATUS_QUESTIONABLE_PTR (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 21L)
#define CHR66200_ATTR_ENERGY_MODE           (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 22L)
#define CHR66200_ATTR_TRIGGER_MODE          (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 23L)
#define CHR66200_ATTR_MEAS_MODE             (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 24L)
#define CHR66200_ATTR_WINDOW                (IVI_SPECIFIC_PUBLIC_ATTR_BASE + 25L)

/****************************************************************************
 *------------------------ Attribute Value Defines -------------------------*
 ****************************************************************************/

        /* Instrument specific attribute value definitions */

/****************************************************************************
 *---------------- Instrument Driver Function Declarations -----------------*
 ****************************************************************************/
     /*- Interchangeability Checking Functions ------------------------------*/
ViStatus _VI_FUNC chr66200_GetNextInterchangeWarning (ViSession vi,
                                                      ViInt32 bufferSize,
                                                      ViChar warnString[]);
ViStatus _VI_FUNC chr66200_ResetInterchangeCheck (ViSession vi);
ViStatus _VI_FUNC chr66200_ClearInterchangeWarnings (ViSession vi);

    /*- Init and Close Functions -------------------------------------------*/
ViStatus _VI_FUNC  chr66200_init (ViRsrc resourceName, ViBoolean IDQuery,
                                  ViBoolean resetDevice, ViSession *vi);
ViStatus _VI_FUNC  chr66200_InitWithOptions (ViRsrc resourceName, ViBoolean IDQuery,
                                             ViBoolean resetDevice, ViString optionString,
                                             ViSession *newVi);
ViStatus _VI_FUNC  chr66200_close (ViSession vi);

    /*- Coercion Info Functions --------------------------------------------*/
ViStatus _VI_FUNC  chr66200_GetNextCoercionRecord (ViSession vi,
                                                   ViInt32 bufferSize,
                                                   ViChar record[]);

    /*- Locking Functions --------------------------------------------------*/
ViStatus _VI_FUNC  chr66200_LockSession (ViSession vi, ViBoolean *callerHasLock);
ViStatus _VI_FUNC  chr66200_UnlockSession (ViSession vi, ViBoolean *callerHasLock);

    /*- Error Functions ----------------------------------------------------*/
ViStatus _VI_FUNC  chr66200_error_query (ViSession vi, ViInt32 *errorCode,
                                         ViChar errorMessage[]);

ViStatus _VI_FUNC  chr66200_ResetWithDefaults (ViSession vi);

ViStatus _VI_FUNC  chr66200_InvalidateAllAttributes (ViSession vi);

ViStatus _VI_FUNC  chr66200_Disable (ViSession vi);

/*ViStatus _VI_FUNC  chr66200_GetErrorInfo (ViSession vi, ViStatus *primaryError,
                                          ViStatus *secondaryError,
                                          ViChar errorElaboration[256]);*/
ViStatus _VI_FUNC  chr66200_ClearError (ViSession vi);
/*ViStatus _VI_FUNC  chr66200_ClearErrorInfo (ViSession vi);*/

ViStatus _VI_FUNC  chr66200_GetError (ViSession vi, ViStatus *errorCode,
                       			     ViInt32 bufferSize, ViChar description[]);

ViStatus _VI_FUNC  chr66200_error_message (ViSession vi, ViStatus errorCode,
                                           ViChar errorMessage[256]);

ViStatus _VI_FUNC chr66200_MeasureVoltage (ViSession vi,
                                           ViBoolean measureFetch, ViInt32 type,
                                           ViReal64 *readValue);

ViStatus _VI_FUNC chr66200_MeasureCurrent (ViSession vi,
                                           ViBoolean measureFetch, ViInt32 type,
                                           ViReal64 *readValue);

ViStatus _VI_FUNC chr66200_MeasurePower (ViSession vi,
                                         ViBoolean measureFetch, ViInt32 type,
                                         ViReal64 *readValue);

ViStatus _VI_FUNC chr66200_MeasureFreq (ViSession vi,
                                        ViBoolean measureFetch,
                                        ViReal64 *readValue);

ViStatus _VI_FUNC chr66200_SetCurrentShunt (ViSession vi,
                                            ViInt32 shuntRange);

ViStatus _VI_FUNC chr66200_SetCurrentRange (ViSession vi,
                                            ViInt32 currentRange);

ViStatus _VI_FUNC chr66200_SetInrush (ViSession vi, ViInt32 level,
                                      ViInt32 time, ViInt32 delay);

ViStatus _VI_FUNC chr66200_SetVoltageRange (ViSession vi,
                                            ViInt32 voltageRange);

ViStatus _VI_FUNC chr66200_SetPowerIntegrate (ViSession vi,
                                              ViInt32 powerIntegrate);

ViStatus _VI_FUNC chr66200_SetFilter (ViSession vi,
                                      ViBoolean filter);

ViStatus _VI_FUNC chr66200_SetMeasMode (ViSession vi,
                                        ViBoolean measureMode, ViReal64 windowTime,
                                        ViInt32 average);

ViStatus _VI_FUNC chr66200_SetEnergy (ViSession vi, ViBoolean Mode,
                                          ViInt32 Time);

ViStatus _VI_FUNC chr66200_SetTHD (ViSession vi, ViBoolean THDMode,
                                   ViInt32 order);

ViStatus _VI_FUNC chr66200_ClearProtection (ViSession vi);

ViStatus _VI_FUNC chr66200_AutoCalib (ViSession vi);

ViStatus _VI_FUNC chr66200_SetTrigger (ViSession vi,
                                       ViBoolean trigger);

ViStatus _VI_FUNC chr66200_SetTriggerMode (ViSession vi,
                                           ViInt32 mode);

ViStatus _VI_FUNC chr66200_QueryTriggerState (ViSession vi,
                                              ViChar state[]);

ViStatus _VI_FUNC chr66200_WaveCap (ViSession vi);

ViStatus _VI_FUNC chr66200_GetWave (ViSession vi,
                                    ViBoolean waveform, float returnedData[],
                                    ViInt32 *returnedCount);

ViStatus _VI_FUNC chr66200_SetComparator (ViSession vi,
                                          ViBoolean comparator,
                                          ViInt32 comparatorTime);

ViStatus _VI_FUNC chr66200_QueryComparatorResult (ViSession vi,
                                                  ViChar result[]);

ViStatus _VI_FUNC chr66200_QueryComparatorFailItem (ViSession vi,
                                                    ViChar failItem[]);

ViStatus _VI_FUNC chr66200_SetComparatorItem (ViSession vi,
                                              ViInt32 comparatorItemFlag);

ViStatus _VI_FUNC chr66200_QueryComparatorItem (ViSession vi,
                                                ViChar comparatorItem[]);

ViStatus _VI_FUNC chr66200_SetCompLimVolt (ViSession vi,
                                           ViReal64 vLOW, ViReal64 vHIGH,
                                           ViReal64 VPK_P_LOW, ViReal64 VPK_P_HIGH,
                                           ViReal64 VPK_M_LOW, ViReal64 VPK_M_HIGH,
                                           ViReal64 v_THDLOW, ViReal64 v_THDHIGH);

ViStatus _VI_FUNC chr66200_SetCompLimPower (ViSession vi,
                                            ViReal64 wLOW, ViReal64 wHIGH,
                                            ViReal64 PFLOW, ViReal64 PFHIGH,
                                            ViReal64 VALOW, ViReal64 VAHIGH,
                                            ViReal64 VARLOW, ViReal64 VARHIGH,
                                            ViInt32 ENERGYLOW,
                                            ViInt32 ENERGYHIGH);

ViStatus _VI_FUNC chr66200_SetCompLimFreq (ViSession vi,
                                           ViInt32 FREQUENCYLOW,
                                           ViInt32 FREQUENCYHIGH);

ViStatus _VI_FUNC chr66200_SetCompLimCurr (ViSession vi,
                                           ViReal64 iLOW, ViReal64 iHIGH,
                                           ViReal64 IPK_P_LOW, ViReal64 IPK_P_HIGH,
                                           ViReal64 IPK_M_LOW, ViReal64 IPK_M_HIGH,
                                           ViReal64 ISLOW, ViReal64 ISHIGH,
                                           ViReal64 CFLOW, ViReal64 CFHIGH,
                                           ViReal64 i_THDLOW, ViReal64 i_THDHIGH);

ViStatus _VI_FUNC chr66200_SetCLS (ViSession vi);

ViStatus _VI_FUNC chr66200_SetESE (ViSession vi,
                                   ViInt32 enableRegister);

ViStatus _VI_FUNC chr66200_MeasureVoltHarm (ViSession vi,
                                            ViBoolean measureFetch,
                                            ViBoolean type,
                                            ViChar returnedData[]);

ViStatus _VI_FUNC chr66200_MeasureCurrHarm (ViSession vi,
                                            ViBoolean measureFetch,
                                            ViBoolean type,
                                            ViChar returnedData[]);

ViStatus _VI_FUNC chr66200_QueryESR (ViSession vi,
                                     ViInt32 *statusRegister);

ViStatus _VI_FUNC chr66200_SetSRE (ViSession vi,
                                   ViInt32 enableRegister);

ViStatus _VI_FUNC chr66200_QuerySTB (ViSession vi,
                                     ViInt32 *statusByte);

ViStatus _VI_FUNC chr66200_QueryTST (ViSession vi,
                                     ViInt32 *self_test_result);

ViStatus _VI_FUNC chr66200_Save (ViSession vi);

ViStatus _VI_FUNC chr66200_QueryOperStatusRegister (ViSession vi,
                                                    ViInt32 *operationStatusRegister);

ViStatus _VI_FUNC chr66200_SetOperStatusEnableReg (ViSession vi,
                                                   ViInt32 operatonStatusEnableRegister);

ViStatus _VI_FUNC chr66200_QueryQuestEventReg (ViSession vi,
                                               ViInt32 *questionableEventRegister);

ViStatus _VI_FUNC chr66200_QueryQuestCondReg (ViSession vi,
                                              ViInt32 *questionableConditionRegister);

ViStatus _VI_FUNC chr66200_SetQuestEnableReg (ViSession vi,
                                              ViInt32 questionableEnableRegister);

ViStatus _VI_FUNC chr66200_SetQuestNTRReg (ViSession vi,
                                           ViInt32 questionableNTRRegister);

ViStatus _VI_FUNC chr66200_SetQuestPTRReg (ViSession vi,
                                           ViInt32 questionablePTRRegister);

ViStatus _VI_FUNC chr66200_PresetStatus (ViSession vi);

ViStatus _VI_FUNC chr66200_MeasureAll (ViSession vi,
                                       ViBoolean measureFetch,
                                       ViChar returnedData[]);


    /*- Utility Functions --------------------------------------------------*/
ViStatus _VI_FUNC  chr66200_reset (ViSession vi);
ViStatus _VI_FUNC  chr66200_self_test (ViSession vi, ViInt16 *selfTestResult,
                                       ViChar selfTestMessage[]);
ViStatus _VI_FUNC  chr66200_revision_query (ViSession vi,
                                            ViChar instrumentDriverRevision[],
                                            ViChar firmwareRevision[]);
ViStatus _VI_FUNC  chr66200_WriteInstrData (ViSession vi, ViConstString writeBuffer);
ViStatus _VI_FUNC  chr66200_ReadInstrData  (ViSession vi, ViInt32 numBytes,
                                            ViChar rdBuf[], ViInt32 *bytesRead);

    /*- Set, Get, and Check Attribute Functions ----------------------------*/
ViStatus _VI_FUNC  chr66200_GetAttributeViInt32 (ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32 *value);
ViStatus _VI_FUNC  chr66200_GetAttributeViReal64 (ViSession vi, ViConstString channelName, ViAttr attribute, ViReal64 *value);
ViStatus _VI_FUNC  chr66200_GetAttributeViString (ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32 bufSize, ViChar value[]);
ViStatus _VI_FUNC  chr66200_GetAttributeViSession (ViSession vi, ViConstString channelName, ViAttr attribute, ViSession *value);
ViStatus _VI_FUNC  chr66200_GetAttributeViBoolean (ViSession vi, ViConstString channelName, ViAttr attribute, ViBoolean *value);



ViStatus _VI_FUNC  chr66200_SetAttributeViInt32 (ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32 value);
ViStatus _VI_FUNC  chr66200_SetAttributeViReal64 (ViSession vi, ViConstString channelName, ViAttr attribute, ViReal64 value);
ViStatus _VI_FUNC  chr66200_SetAttributeViString (ViSession vi, ViConstString channelName, ViAttr attribute, ViConstString value);
ViStatus _VI_FUNC  chr66200_SetAttributeViSession (ViSession vi, ViConstString channelName, ViAttr attribute, ViSession value);
ViStatus _VI_FUNC  chr66200_SetAttributeViBoolean (ViSession vi, ViConstString channelName, ViAttr attribute, ViBoolean value);

ViStatus _VI_FUNC  chr66200_CheckAttributeViInt32 (ViSession vi, ViConstString channelName, ViAttr attribute, ViInt32 value);
ViStatus _VI_FUNC  chr66200_CheckAttributeViReal64 (ViSession vi, ViConstString channelName, ViAttr attribute, ViReal64 value);
ViStatus _VI_FUNC  chr66200_CheckAttributeViString (ViSession vi, ViConstString channelName, ViAttr attribute, ViConstString value);
ViStatus _VI_FUNC  chr66200_CheckAttributeViSession (ViSession vi, ViConstString channelName, ViAttr attribute, ViSession value);
ViStatus _VI_FUNC  chr66200_CheckAttributeViBoolean (ViSession vi, ViConstString channelName, ViAttr attribute, ViBoolean value);

    /*********************************************************
        Functions reserved for class driver use only.
        End-users should not call these functions.
     *********************************************************/
ViStatus _VI_FUNC  chr66200_IviInit (ViRsrc resourceName, ViBoolean IDQuery,
                                     ViBoolean reset, ViSession vi);
ViStatus _VI_FUNC  chr66200_IviClose (ViSession vi);

/****************************************************************************
 *------------------------ Error And Completion Codes ----------------------*
 ****************************************************************************/
#define CHR66200_ERROR_CMD_NOT_SUPPORT				(IVI_SPECIFIC_ERROR_BASE + 1)
#define CHR66200_ERROR_EXECUTION					(IVI_SPECIFIC_ERROR_BASE + 2)
#define CHR66200_ERROR_THD							(IVI_SPECIFIC_ERROR_BASE + 3)
#define CHR66200_ERROR_IS							(IVI_SPECIFIC_ERROR_BASE + 4)
#define CHR66200_ERROR_ENERGY						(IVI_SPECIFIC_ERROR_BASE + 5)
#define CHR66200_ERROR_CALIB_FAIL					(IVI_SPECIFIC_ERROR_BASE + 6)
#define CHR66200_ERROR_STATE_GONG					(IVI_SPECIFIC_ERROR_BASE + 7)
#define CHR66200_ERROR_STATE_IS						(IVI_SPECIFIC_ERROR_BASE + 8)
#define CHR66200_ERROR_STATE_ENERGY					(IVI_SPECIFIC_ERROR_BASE + 9)
#define CHR66200_ERROR_TRIG_ON						(IVI_SPECIFIC_ERROR_BASE + 10)
#define CHR66200_ERROR_TRIG_OFF						(IVI_SPECIFIC_ERROR_BASE + 11)
#define CHR66200_ERROR_COMP_STATE					(IVI_SPECIFIC_ERROR_BASE + 12)
#define CHR66200_ERROR_WAVCAP_FAIL					(IVI_SPECIFIC_ERROR_BASE + 13)
#define CHR66200_ERROR_WAVEFORM_READ				(IVI_SPECIFIC_ERROR_BASE + 14)

/****************************************************************************
 *---------------------------- End Include File ----------------------------*
 ****************************************************************************/

#define CHR66200_VAL_MEAS_VRMS                                      0
#define CHR66200_VAL_MEAS_VTHD                                      3

#define CHR66200_VAL_MEAS_VPEAK_PLUS                                1
#define CHR66200_VAL_MEAS_VPEAK_MINUS                               2

#define CHR66200_VAL_MEAS_IRMS                                      0
#define CHR66200_VAL_MEAS_IPEAK_PLUS                                1
#define CHR66200_VAL_MEAS_IPEAK_MINUS                               2
#define CHR66200_VAL_MEAS_INRUSH                                    3
#define CHR66200_VAL_MEAS_CREST                                     4
#define CHR66200_VAL_MEAS_ITHD                                      5

#define CHR66200_VAL_MEAS_PWR_REAL                                  0
#define CHR66200_VAL_MEAS_PWR_APP                                   1
#define CHR66200_VAL_MEAS_PWR_REAC                                  2
#define CHR66200_VAL_MEAS_PWR_FACTOR                                3
#define CHR66200_VAL_MEAS_PWR_ENERGY                                4

#define CHR66200_VAL_SHUNT_LOW                                      0
#define CHR66200_VAL_SHUNT_HIGH                                     1
#define CHR66200_VAL_SHUNT_AUTO                                     2

#define CHR66200_VAL_CURR_RANGE_A001                                0
#define CHR66200_VAL_CURR_RANGE_A01                                 1
#define CHR66200_VAL_CURR_RANGE_A04                                 2
#define CHR66200_VAL_CURR_RANGE_A2L                                 3
#define CHR66200_VAL_CURR_RANGE_A02                                 4
#define CHR66200_VAL_CURR_RANGE_A2H                                 5
#define CHR66200_VAL_CURR_RANGE_A8                                  6
#define CHR66200_VAL_CURR_RANGE_A20                                 7
#define CHR66200_VAL_CURR_RANGE_AUTO                                8

#define CHR66200_VAL_VOLT_RANGE_V150                                0
#define CHR66200_VAL_VOLT_RANGE_V300                                1
#define CHR66200_VAL_VOLT_RANGE_V500                                2
#define CHR66200_VAL_VOLT_RANGE_AUTO                                3

#define CHR66200_VAL_TRIGGER_NONE                                   0
#define CHR66200_VAL_TRIGGER_GONG                                   1
#define CHR66200_VAL_TRIGGER_INRUSH                                 2
#define CHR66200_VAL_TRIGGER_ENERGY                                 3





#if defined(__cplusplus) || defined(__cplusplus__)
}
#endif
#endif /* __CHR66200_HEADER */
