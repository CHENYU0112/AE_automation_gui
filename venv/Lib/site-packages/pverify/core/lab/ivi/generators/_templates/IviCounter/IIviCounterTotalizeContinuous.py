from .{drivername} import *


class IIviCounterTotalizeContinuous:
    def __init__(self, root):
        self.root = root
        """:type : pverify.drivers.{group}.{drivername}.I{iviclass}.I{iviclass}"""

    @property
    def Channel(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 47, 1024)

    @Channel.setter
    def Channel(self, value):
        """
        Specifies the input channel for the continuous totalize function.
        """
        self.root.dllwrap.SetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 47, value)

    def Stop(self):
        """
        Stops the accumulation of counts for a continuous totalize measurement.
        """
        self.root.dllwrap.StopContinuousTotalize()

    def Start(self):
        """
        Clears the count and starts the counter for a continuous totalize measurement.
        """
        self.root.dllwrap.StartContinuousTotalize()

    def Configure(self, Channel):
        """
        Configures the counter for a continuous totalize measurement.

        :param Channel: Specifies the input channel.
        :type Channel: str
        """
        self.root.dllwrap.ConfigureContinuousTotalize(Channel)

    def FetchCount(self):
        """
        Retrieves the current count while the counter is continuously totalizing.

        :return: The current count.
        :rtype: int
        """
        return self.root.dllwrap.FetchContinuousTotalizeCount()
