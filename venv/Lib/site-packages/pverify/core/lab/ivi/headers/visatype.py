# Generated by h2py from C:\Program Files\IVI Foundation\VISA\Win64\Include\visatype.h
from __future__ import annotations

import ctypes

VI_ERROR = -2147483647 - 1
VI_SUCCESS = 0
VI_NULL = 0
VI_FALSE = 0
VI_TRUE = 1

ViUInt8 = ctypes.c_uint8
ViUInt16 = ctypes.c_uint16
ViUInt32 = ctypes.c_uint32
ViUInt64 = ctypes.c_uint64
ViInt8 = ctypes.c_int8
ViInt16 = ctypes.c_int16
ViInt32 = ctypes.c_int32
ViInt64 = ctypes.c_int64
ViReal32 = ctypes.c_float
ViReal64 = ctypes.c_double

ViBoolean = ctypes.c_ushort
ViByte = ViUInt8
ViAddr = ctypes.c_void_p
ViStatus = ViInt32
ViObject = ViUInt32
ViSession = ViObject
ViPSession = ViObject
ViAttr = ViUInt32
void = ctypes.c_void_p


def ViChar(char):
    if isinstance(char, str) and len(char) == 1:
        return ctypes.c_char(str(char).encode("ASCII"))

    msg = "char argument has to be a one-character string!"
    raise Exception(msg)


def ViString(string=""):
    if isinstance(string, str) and len(string) > 0:
        return ctypes.c_char_p(str(string).encode("ASCII"))
    return ctypes.c_char_p()


def ViConstString(string=""):
    if string is None:
        string = ""
    return ctypes.create_string_buffer(str(string).encode("ASCII"))


ViBuf = ViString
ViRsrc = ViString


def ARRAY_ViReal32(length):
    return (ViReal32 * length)()


ARRAY_float = ARRAY_ViReal32


def ARRAY_ViReal64(length):
    return (ViReal64 * length)()


ARRAY_double = ARRAY_ViReal64


def ARRAY_ViInt8(length):
    return (ViInt8 * length)()


def ARRAY_ViInt16(length):
    return (ViInt16 * length)()


def ARRAY_ViInt32(length):
    return (ViInt32 * length)()


def ARRAY_ViUInt8(length):
    return (ViUInt8 * length)()


def ARRAY_ViUInt16(length):
    return (ViUInt16 * length)()


def ARRAY_ViUInt32(length):
    return (ViUInt32 * length)()


def ARRAY_ViUInt64(length):
    return (ViUInt64 * length)()


def ARRAY_ViInt64(length):
    return (ViInt64 * length)()


def ARRAY_ViBoolean(length):
    return (ViBoolean * length)()


def ARRAY_ViChar(length):
    return ctypes.create_string_buffer(int(length))


def ARRAY_ViByte(length):
    return ctypes.create_string_buffer(int(length))
