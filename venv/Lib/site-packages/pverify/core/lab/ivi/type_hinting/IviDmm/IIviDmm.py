from __future__ import annotations

from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper, IVICOMDriverWrapper
from pverify.core.lab.ivi.type_hinting.IviDmm import IIviDmmEnums


class IIviDmm(IVICOMDriverWrapper):
    def __init__(self):
        from .IIviDriverOperation import IIviDriverOperation

        self.DriverOperation = IIviDriverOperation()

        from .IIviDriverIdentity import IIviDriverIdentity

        self.Identity = IIviDriverIdentity()

        from .IIviDriverUtility import IIviDriverUtility

        self.Utility = IIviDriverUtility()

        from .IIviDmmAC import IIviDmmAC

        self.AC = IIviDmmAC()

        from .IIviDmmAdvanced import IIviDmmAdvanced

        self.Advanced = IIviDmmAdvanced()

        from .IIviDmmFrequency import IIviDmmFrequency

        self.Frequency = IIviDmmFrequency()

        from .IIviDmmMeasurement import IIviDmmMeasurement

        self.Measurement = IIviDmmMeasurement()

        from .IIviDmmTemperature import IIviDmmTemperature

        self.Temperature = IIviDmmTemperature()

        from .IIviDmmTrigger import IIviDmmTrigger

        self.Trigger = IIviDmmTrigger()

        self.Enums = IIviDmmEnums

        self.dllwrap: IVICDriverWrapper = None

    @property
    def drivername(self):
        raise NotImplementedError

    @property
    def Initialized(self):
        raise NotImplementedError

    @property
    def Function(self):
        raise NotImplementedError

    @Function.setter
    def Function(self, value):
        """
        The measurement function. This property determines the units for Range and
        Resolution and the values returned by the Read, Read Multiple Point, Fetch, and
        Fetch Multiple Point methods.
        """
        raise NotImplementedError

    @property
    def Range(self):
        raise NotImplementedError

    @Range.setter
    def Range(self, value):
        """
        The measurement range, coerced by the driver to the appropriate range for the
        instrument. Positive values set the absolute value of the maximum measurement
        expected. Negative values set Auto Range mode. Units are determined by Function.
        """
        raise NotImplementedError

    @property
    def Resolution(self):
        raise NotImplementedError

    @Resolution.setter
    def Resolution(self, value):
        """
        The measurement resolution in absolute units. Units are determined by Function.
        """
        raise NotImplementedError

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        :type OptionString: str
        """
        raise NotImplementedError

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        raise NotImplementedError

    def Configure(self, Function, Range, Resolution):
        """
        Configures the Function, Range, and Resolution properties. If the value of the
        Range parameter is Auto Range On, then the Resolution parameter is ignored.

        :param Function: Determines the units for the Range and Resolution Absolute parameters, and the
            measurement values that are returned by the Read, Read Multiple Point, Fetch,
            and Fetch Multiple Point methods.
        :type Function: IviDmmFunctionEnum
        :param Range: The measurement range. Positive values represent the absolute value of the
            maximum measurement expected. The driver coerces this value to the appropriate
            range for the instrument. Negative values represent the Auto Range mode.
        :type Range: float
        :param Resolution: The measurement resolution in absolute units.
        :type Resolution: float
        """
        raise NotImplementedError
