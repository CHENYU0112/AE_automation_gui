from __future__ import annotations


class IIviCounterFrequency:
    def __init__(self):
        pass

    @property
    def Channel(self):
        raise NotImplementedError

    @Channel.setter
    def Channel(self, value):
        """
        Specifies the input channel the frequency is measured on.
        """
        raise NotImplementedError

    @property
    def Estimate(self):
        raise NotImplementedError

    @Estimate.setter
    def Estimate(self, value):
        """
        Specifies the estimated frequency, in hertz, for the frequency function.
        """
        raise NotImplementedError

    @property
    def Resolution(self):
        raise NotImplementedError

    @Resolution.setter
    def Resolution(self, value):
        """
        Specifies the resolution of the measurement, in hertz, for the frequency
        function.
        """
        raise NotImplementedError

    @property
    def ApertureTime(self):
        raise NotImplementedError

    @ApertureTime.setter
    def ApertureTime(self, value):
        """
        Specifies the aperture time in seconds for the frequency with aperture time
        function.
        """
        raise NotImplementedError

    @property
    def EstimateAuto(self):
        raise NotImplementedError

    @EstimateAuto.setter
    def EstimateAuto(self, value):
        """
        Specifies if the Counter Frequency Estimate Auto is enabled.
        """
        raise NotImplementedError

    @property
    def ResolutionAuto(self):
        raise NotImplementedError

    @ResolutionAuto.setter
    def ResolutionAuto(self, value):
        """
        Specifies if the Counter Frequency Resolution Auto is enabled.
        """
        raise NotImplementedError

    def ConfigureWithAperture(self, Channel, ApertureTime):
        """
        Configures a frequency measurement based on the specified aperture time.

        :param Channel: Specifies the channel the frequency will be measured on.
        :type Channel: str
        :param ApertureTime: Specifies the aperture time of the frequency measurement.
        :type ApertureTime: float
        """
        raise NotImplementedError

    def ConfigureManual(self, Channel, Estimate, Resolution):
        """
        Provides manual frequency configuration. Configures the Estimate and Resolution
        attributes for a frequency measurement for a particular channel.

        :param Channel: Specifies the channel the frequency will be measured on.
        :type Channel: str
        :param Estimate: Specifies the estimated frequency.
        :type Estimate: float
        :param Resolution: Specifies the resolution of the frequency measurement. It is the quantization
            size, i.e. the smallest delta value that can be detected.
        :type Resolution: float
        """
        raise NotImplementedError

    def Configure(self, Channel):
        """
        Provides auto frequency configuration. Configures the instrument to determine
        the best estimate and resolution for the selected channel.

        :param Channel: Specifies the channel the frequency will be measured on.
        :type Channel: str
        """
        raise NotImplementedError
