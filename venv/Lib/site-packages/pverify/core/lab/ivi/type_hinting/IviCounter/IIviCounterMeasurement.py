from __future__ import annotations


class IIviCounterMeasurement:
    def __init__(self):
        pass

    def Read(self, MaxTimeMilliseconds):
        """
        Initiates and fetches a measurement based on the current configuration.

        :param MaxTimeMilliseconds: Pass the maximum length of time in which to allow the read waveform measurement
            operation to complete. If the operation does not complete within this time
            interval, the function returns the Maximum Time Exceeded error. When this
            occurs, you can call IviCounter_Abort to cancel the read waveform operation and
            return the Counter to the Idle state.
        :type MaxTimeMilliseconds: int

        :return: The measured valued.
        :rtype: float
        """
        raise NotImplementedError

    def Fetch(self):
        """
        Retrieves the result from a previously initiated measurement.

        :return: The measured value.
        :rtype: float
        """
        raise NotImplementedError

    def Abort(self):
        """
        Aborts a previously initiated measurement.
        """
        raise NotImplementedError

    def Initiate(self):
        """
        Initiates a measurement based on the current configuration.
        """
        raise NotImplementedError

    def IsMeasurementComplete(self):
        """
        Returns whether a measurement is in progress, complete, or if the status is
        unknown.

        """
        raise NotImplementedError
