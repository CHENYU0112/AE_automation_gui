from __future__ import annotations


class IIviDmmMultiPoint:
    def __init__(self):
        pass

    @property
    def MeasurementComplete(self):
        raise NotImplementedError

    @MeasurementComplete.setter
    def MeasurementComplete(self, value):
        """
        The destination of the measurement-complete signal generated after each
        measurement.
        """
        raise NotImplementedError

    @property
    def Count(self):
        raise NotImplementedError

    @Count.setter
    def Count(self, value):
        """
        The number of triggers the DMM accepts before it returns to the idle state.
        """
        raise NotImplementedError

    @property
    def SampleCount(self):
        raise NotImplementedError

    @SampleCount.setter
    def SampleCount(self, value):
        """
        The number of measurements the DMM takes each time it receives a trigger.
        """
        raise NotImplementedError

    @property
    def SampleInterval(self):
        raise NotImplementedError

    @SampleInterval.setter
    def SampleInterval(self, value):
        """
        The interval between samples in seconds. Applies only when Sample Count is
        greater than 1 and Sample Trigger is Interval.
        """
        raise NotImplementedError

    @property
    def SampleTrigger(self):
        raise NotImplementedError

    @SampleTrigger.setter
    def SampleTrigger(self, value):
        """
        The sample trigger source. If the value of the Sample Count is greater than 1,
        the DMM enters the Wait-For-Sample-Trigger state after taking a single
        measurement. When a sample trigger occurs, the DMM takes the next measurement.
        """
        raise NotImplementedError

    def Configure(self, TriggerCount, SampleCount, SampleTrigger, SampleInterval):
        """
        Configures multipoint trigger Count, SampleCount, SampleTrigger and
        SampleInterval properties.

        :param TriggerCount: The number of triggers the DMM accepts before it returns to the idle state.
        :type TriggerCount: int
        :param SampleCount: The number of measurements the DMM takes each time it receives a trigger.
        :type SampleCount: int
        :param SampleTrigger: The sample trigger source. If the value of the Sample Count is greater than 1,
            the DMM enters the Wait-For-Sample-Trigger state after taking a single
            measurement. When the event specified by this parameter occurs, the DMM exits
            the Wait-For-Sample-Trigger state and takes the next measurement.
        :type SampleTrigger: IviDmmSampleTriggerEnum
        :param SampleInterval: The interval between samples in seconds.
        :type SampleInterval: float
        """
        raise NotImplementedError
