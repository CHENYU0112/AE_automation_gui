from __future__ import annotations


class IIviScopeAcquisition:
    def __init__(self):
        pass

    @property
    def NumberOfAverages(self):
        raise NotImplementedError

    @NumberOfAverages.setter
    def NumberOfAverages(self, value):
        """
        The number of waveforms the oscilloscope acquires and averages before returning
        to the idle state.
        """
        raise NotImplementedError

    @property
    def NumberOfEnvelopes(self):
        raise NotImplementedError

    @NumberOfEnvelopes.setter
    def NumberOfEnvelopes(self, value):
        """
        The number of waveforms the oscilloscope acquires and analyzes to create the
        minimum and maximum waveforms, before returning to the idle state. Applies only
        when acquisition Type is Envelope
        """
        raise NotImplementedError

    @property
    def Interpolation(self):
        raise NotImplementedError

    @Interpolation.setter
    def Interpolation(self, value):
        """
        The interpolation method the oscilloscope uses when it cannot sample a voltage
        for every point in the waveform record.
        """
        raise NotImplementedError

    @property
    def RecordLength(self):
        raise NotImplementedError

    @RecordLength.setter
    def RecordLength(self, value):
        """
        The actual number of points the oscilloscope acquires for each channel. It is
        equal to or greater than the minimum number of points specified with the
        Horizontal Minimun Number of Points property.
        """
        raise NotImplementedError

    @property
    def SampleMode(self):
        raise NotImplementedError

    @SampleMode.setter
    def SampleMode(self, value):
        """
        The sample mode the oscilloscope is currently using.
        """
        raise NotImplementedError

    @property
    def SampleRate(self):
        raise NotImplementedError

    @SampleRate.setter
    def SampleRate(self, value):
        """
        The effective digitizing rate using the current configuration. The units are
        samples per second.
        """
        raise NotImplementedError

    @property
    def Type(self):
        raise NotImplementedError

    @Type.setter
    def Type(self, value):
        """
        How the oscilloscope acquires data and fills the waveform record. When set to
        Envelope or Peak Detect, the oscilloscope acquires minimum and maximum
        waveforms.
        """
        raise NotImplementedError

    @property
    def NumberOfPointsMin(self):
        raise NotImplementedError

    @NumberOfPointsMin.setter
    def NumberOfPointsMin(self, value):
        """
        The minimum number of points which can be in a waveform record for each channel.
        It configures the record length that the oscilloscope uses for waveform
        acquisition. The Record Length property returns the actual record length.
        """
        raise NotImplementedError

    @property
    def StartTime(self):
        raise NotImplementedError

    @StartTime.setter
    def StartTime(self, value):
        """
        The length of time from the trigger event to the first point in the waveform
        record. The units are seconds. If positive, the first point in the waveform
        occurs after the trigger. If negative, the first point in the waveform occurs
        before the trigger.
        """
        raise NotImplementedError

    @property
    def TimePerRecord(self):
        raise NotImplementedError

    @TimePerRecord.setter
    def TimePerRecord(self, value):
        """
        The time in seconds that corresponds to the record length.
        """
        raise NotImplementedError

    def ConfigureRecord(self, TimePerRecord, MinNumPts, AcquisitionStartTime):
        """
        Configures the most commonly used properties of the oscilloscope's acquisition
        subsystem: time per record, minimum record length, and the acquisition start
        time.

        :param TimePerRecord: Specifies the time per record. This value sets the Horizontal Time Per Record
            property.
        :type TimePerRecord: float
        :param MinNumPts: Specifies the minimum number of points the end-user allows in the waveform
            recorded. This value sets the Horizontal Minimum Number of Points property.
        :type MinNumPts: int
        :param AcquisitionStartTime: Specifies the position of the first point in the waveform record relative to the
            trigger event. This value sets the Acquisition Start Time property.
        :type AcquisitionStartTime: float
        """
        raise NotImplementedError
