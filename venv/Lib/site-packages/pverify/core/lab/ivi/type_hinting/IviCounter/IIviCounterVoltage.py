from __future__ import annotations


class IIviCounterVoltage:
    def __init__(self):
        pass

    @property
    def Channel(self):
        raise NotImplementedError

    @Channel.setter
    def Channel(self, value):
        """
        Specifies the input channel the voltage is measured on.
        """
        raise NotImplementedError

    @property
    def Estimate(self):
        raise NotImplementedError

    @Estimate.setter
    def Estimate(self, value):
        """
        Specifies the estimated voltage, in volts, for the voltage function.
        """
        raise NotImplementedError

    @property
    def Resolution(self):
        raise NotImplementedError

    @Resolution.setter
    def Resolution(self, value):
        """
        Specifies the resolution of the measurement, in volts, for the voltage function.
        """
        raise NotImplementedError

    def Configure(self, Channel, Function, Estimate, Resolution):
        """
        Configures the voltage function, the estimate, and the resolution attributes for
        a voltage measurement.

        :param Channel: Specifies the channel the voltage will be measured on.
        :type Channel: str
        :param Function: Specifies the voltage function. Valid functions: DC Voltage, Maximum Voltage,
            Minimum Voltage, RMS Voltage, and Peak-to-Peak Voltage.
        :type Function: IviCounterMeasurementFunctionEnum
        :param Estimate: Specifies the estimated voltage.
        :type Estimate: float
        :param Resolution: Specifies the resolution of the voltage measurement. It is the quantization
            size, i.e. the smallest delta value that can be detected.
        :type Resolution: float
        """
        raise NotImplementedError
