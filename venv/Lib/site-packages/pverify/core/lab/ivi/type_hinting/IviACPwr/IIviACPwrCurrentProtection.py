from __future__ import annotations


class IIviACPwrCurrentProtection:
    def __init__(self):
        pass

    @property
    def Delay(self):
        raise NotImplementedError

    @Delay.setter
    def Delay(self, value):
        """
        Specifies the time the output current must exceed the current protection
        threshold until current protection trips.
        """
        raise NotImplementedError

    @property
    def Enabled(self):
        raise NotImplementedError

    @Enabled.setter
    def Enabled(self, value):
        """
        When set to True, current protection trips when the output current exceeds the
        current protection threshold for the time specified by the current protection
        delay. When set to False, current protection is disabled.
        """
        raise NotImplementedError

    @property
    def Threshold(self):
        raise NotImplementedError

    @Threshold.setter
    def Threshold(self, value):
        """
        Specifies the output current threshold that trips current protection.
        """
        raise NotImplementedError

    @property
    def Tripped(self):
        raise NotImplementedError

    def Configure(self, Enabled, Threshold, Delay):
        """
        Configures the Current Protection Enabled, Current Protection Delay and Current
        Protection Threshold properties.

        :param Enabled: Sets the Current Protection Enabled property.
        :type Enabled: bool
        :param Threshold: Sets the Current Protection Threshold property.
        :type Threshold: float
        :param Delay: Sets the Current Protection Delay property.
        :type Delay: float
        """
        raise NotImplementedError

    def Reset(self):
        """
        Resets the current protection state of the power source after current protection
        has tripped.
        """
        raise NotImplementedError
