from __future__ import annotations


class IIviCounterTotalizeContinuous:
    def __init__(self):
        pass

    @property
    def Channel(self):
        raise NotImplementedError

    @Channel.setter
    def Channel(self, value):
        """
        Specifies the input channel for the continuous totalize function.
        """
        raise NotImplementedError

    def Stop(self):
        """
        Stops the accumulation of counts for a continuous totalize measurement.
        """
        raise NotImplementedError

    def Start(self):
        """
        Clears the count and starts the counter for a continuous totalize measurement.
        """
        raise NotImplementedError

    def Configure(self, Channel):
        """
        Configures the counter for a continuous totalize measurement.

        :param Channel: Specifies the input channel.
        :type Channel: str
        """
        raise NotImplementedError

    def FetchCount(self):
        """
        Retrieves the current count while the counter is continuously totalizing.

        :return: The current count.
        :rtype: int
        """
        raise NotImplementedError
