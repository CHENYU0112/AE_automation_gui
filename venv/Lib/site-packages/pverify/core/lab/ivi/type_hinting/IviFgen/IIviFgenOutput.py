from __future__ import annotations


class IIviFgenOutput:
    def __init__(self):
        pass

    @property
    def OutputMode(self):
        raise NotImplementedError

    @OutputMode.setter
    def OutputMode(self, value):
        """
        The mode that determines how the function generator produces waveforms. This
        attribute determines which extension group's functions and attributes are used
        to configure the waveform the function generator produces.
        """
        raise NotImplementedError

    @property
    def ReferenceClockSource(self):
        raise NotImplementedError

    @ReferenceClockSource.setter
    def ReferenceClockSource(self, value):
        """
        The source of the reference clock. The function generator derives frequencies
        and sample rates that it uses to generate waveforms from the reference clock.
        """
        raise NotImplementedError

    @property
    def Count(self):
        raise NotImplementedError

    def get_Enabled(self, ChannelName):
        """
        Provides an indication whether the signal the function generator produces
        appears at the output connector.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: True if the signal the function generator produces appears at the output
            connector.
        :rtype: bool
        """
        raise NotImplementedError

    def set_Enabled(self, ChannelName, pVal):
        """
        Sets whether the signal the function generator produces appears at the output
        connector.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: If true, the signal the function generator produces appears at the output
            connector.
        :type pVal: bool
        """
        raise NotImplementedError

    def get_Impedance(self, ChannelName):
        """
        Retrieves a channel's impedance.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The impedance of the output channel. The units are Ohms.
        :rtype: float
        """
        raise NotImplementedError

    def set_Impedance(self, ChannelName, pVal):
        """
        Sets channel's impedance.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The impedance of the output channel. The units are Ohms.
        :type pVal: float
        """
        raise NotImplementedError

    def get_OperationMode(self, ChannelName):
        """
        Retrieves a channel's operation mode.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The mode that determines how the function generator produces output on a
            channel.
        :rtype: int
        """
        raise NotImplementedError

    def set_OperationMode(self, ChannelName, pVal):
        """
        Sets a channel's operation mode.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The mode that determines how the function generator produces output on a
            channel.
        :type pVal: IviFgenOperationModeEnum
        """
        raise NotImplementedError

    def Name(self, Index):
        """
        Retrieves the name of a channel.

        :param Index: The one-based index into the collection of channel names.
        :type Index: int

        :return: The name of the output channel specified.
        :rtype: str
        """
        raise NotImplementedError
