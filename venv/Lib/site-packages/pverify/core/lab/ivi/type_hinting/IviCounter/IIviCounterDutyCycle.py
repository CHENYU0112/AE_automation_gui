from __future__ import annotations


class IIviCounterDutyCycle:
    def __init__(self):
        pass

    @property
    def Channel(self):
        raise NotImplementedError

    @Channel.setter
    def Channel(self, value):
        """
        Specifies the input channel the duty cycle is measured on.
        """
        raise NotImplementedError

    @property
    def FrequencyEstimate(self):
        raise NotImplementedError

    @FrequencyEstimate.setter
    def FrequencyEstimate(self, value):
        """
        Specifies the estimated frequency, in hertz, for the duty cycle function.
        """
        raise NotImplementedError

    @property
    def Resolution(self):
        raise NotImplementedError

    @Resolution.setter
    def Resolution(self, value):
        """
        Specifies the resolution for the duty cycle function. Duty Cycle Resolution is a
        unitless value.
        """
        raise NotImplementedError

    def Configure(self, Channel, FrequencyEstimate, Resolution):
        """
        Configures the frequency estimate and resolution attributes for a duty cycle
        measurement.

        :param Channel: Specifies the channel the duty cycle will be measured on.
        :type Channel: str
        :param FrequencyEstimate: Specifies the estimated frequency.
        :type FrequencyEstimate: float
        :param Resolution: Specifies the resolution of the duty cycle measurement. It is the quantization
            size, i.e. the smallest delta value that can be detected.
        :type Resolution: float
        """
        raise NotImplementedError
