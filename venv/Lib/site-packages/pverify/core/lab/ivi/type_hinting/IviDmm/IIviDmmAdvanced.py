from __future__ import annotations


class IIviDmmAdvanced:
    def __init__(self):
        pass

    @property
    def ActualRange(self):
        raise NotImplementedError

    @ActualRange.setter
    def ActualRange(self, value):
        """
        The actual range that the DMM is currently using, even if it is auto-ranging.
        """
        raise NotImplementedError

    @property
    def ApertureTime(self):
        raise NotImplementedError

    @ApertureTime.setter
    def ApertureTime(self, value):
        """
        The measurement aperture time (also known as integration time) based on the
        present configuration. Units are specified by the property ApertureTimeUnits.
        """
        raise NotImplementedError

    @property
    def ApertureTimeUnits(self):
        raise NotImplementedError

    @ApertureTimeUnits.setter
    def ApertureTimeUnits(self, value):
        """
        The units for the ApertureTime property.
        """
        raise NotImplementedError

    @property
    def AutoZero(self):
        raise NotImplementedError

    @AutoZero.setter
    def AutoZero(self, value):
        """
        The auto-zero mode. When the auto-zero mode is enabled, the DMM internally
        disconnects the input signal and takes a Zero Reading. The DMM then subtracts
        the Zero Reading from the measurement.
        """
        raise NotImplementedError

    @property
    def PowerlineFrequency(self):
        raise NotImplementedError

    @PowerlineFrequency.setter
    def PowerlineFrequency(self, value):
        """
        The power line frequency in Hertz.
        """
        raise NotImplementedError
