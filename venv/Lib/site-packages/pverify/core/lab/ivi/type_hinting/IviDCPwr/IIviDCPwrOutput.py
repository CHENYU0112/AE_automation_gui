from __future__ import annotations


class IIviDCPwrOutput:
    def __init__(self):
        pass

    @property
    def Enabled(self):
        raise NotImplementedError

    @Enabled.setter
    def Enabled(self, value):
        """
        property Enabled specifies whether the signal the power supply produces appears
        at the output connector.
        """
        raise NotImplementedError

    @property
    def TriggerSource(self):
        raise NotImplementedError

    @TriggerSource.setter
    def TriggerSource(self, value):
        """
        property Source specifies the trigger source.
        """
        raise NotImplementedError

    @property
    def TriggeredCurrentLimit(self):
        raise NotImplementedError

    @TriggeredCurrentLimit.setter
    def TriggeredCurrentLimit(self, value):
        """
        property Triggered Current Limit specifies the value to which the power supply
        sets the current limit after a trigger event occurs.
        """
        raise NotImplementedError

    @property
    def TriggeredVoltageLevel(self):
        raise NotImplementedError

    @TriggeredVoltageLevel.setter
    def TriggeredVoltageLevel(self, value):
        """
        property Triggerd Voltage Level specifies the value to which the power supply
        sets the voltage level after a trigger event occurs.
        """
        raise NotImplementedError

    @property
    def VoltageLevel(self):
        raise NotImplementedError

    @VoltageLevel.setter
    def VoltageLevel(self, value):
        """
        property Voltage Level specifies the voltage level the DC power supply attempts
        to generate. The units are Volts.
        """
        raise NotImplementedError

    @property
    def CurrentLimit(self):
        raise NotImplementedError

    @CurrentLimit.setter
    def CurrentLimit(self, value):
        """
        propety Current Limit specifies the output current limit. The units are Amps.
        """
        raise NotImplementedError

    @property
    def CurrentLimitBehavior(self):
        raise NotImplementedError

    @CurrentLimitBehavior.setter
    def CurrentLimitBehavior(self, value):
        """
        property Current Limit Behavior specifies the behavior of the power supply when
        the output current is equal to or greater than the value of the Current Limit
        property.
        """
        raise NotImplementedError

    @property
    def OVPLimit(self):
        raise NotImplementedError

    @OVPLimit.setter
    def OVPLimit(self, value):
        """
        property OVP Limit specifies the voltage the power supply allows. The units are
        Volts.
        """
        raise NotImplementedError

    @property
    def OVPEnabled(self):
        raise NotImplementedError

    @OVPEnabled.setter
    def OVPEnabled(self, value):
        """
        property OVP Enabled specifies whether the power supply provides over-voltage
        protection. If this property is set to True, the power supply disables the
        output when the output voltage is greater than or equal to the OVP Limit.
        """
        raise NotImplementedError

    def ConfigureCurrentLimit(self, Behavior, Limit):
        """
        method Configure Current Limit specifies the output current limit value and the
        behavior of the power supply when the output current is greater than or equal to
        that value.

        :param Behavior: Specifies the behavior of the power supply when the output current is greater
            than or equal to the value of the Limit parameter. The driver uses this value to
            set the Current Limit Behavior attribute. See the attribute description for more
            details.
        :type Behavior: IviDCPwrCurrentLimitBehaviorEnum
        :param Limit: Specifies the power supply's output current limit. The driver uses this value to
            set the Current Limit attribute.
        :type Limit: float
        """
        raise NotImplementedError

    def ConfigureRange(self, RangeType, Range):
        """
        method Configure Range specifies the output's range, either current or voltage.

        :param RangeType: The kind of range to be configured, either Current or Voltage.
        :type RangeType: IviDCPwrRangeTypeEnum
        :param Range: The range in which the power supply operates. This value is coerced to the
            closest value the instrument supports that is greater than or equal to the value
            specified.
        :type Range: float
        """
        raise NotImplementedError

    def ConfigureOVP(self, Enabled, Limit):
        """
        method Configure OVP specifies the over-voltage limit and the behavior of the
        power supply when the output voltage is greater than or equal to the limit.

        :param Enabled: Specifies the behavior of the power supply when the ouptut voltage is greater
            than or equal to the value of the Limit parameter. This value sets the OVP
            Enabled property.
        :type Enabled: bool
        :param Limit: Specifies the power supply's over-voltage protection limit. This value sets the
            OVP Limit property
        :type Limit: float
        """
        raise NotImplementedError

    def Measure(self, MeasurementType):
        """
        method Measure takes a measurement on the output signal and returns the measured
        value.

        :param MeasurementType: The type of measurement to take, either Current or Volatge
        :type MeasurementType: IviDCPwrMeasurementTypeEnum

        :return: The measured value.
        :rtype: float
        """
        raise NotImplementedError

    def QueryCurrentLimitMax(self, VoltageLevel):
        """
        method Query Current Limit Max returns the maximum programmable current limit
        that the power supply accepts for a particular voltage level on an output.

        :param VoltageLevel: The voltage level for which to determine the maximum programmable current limit.
        :type VoltageLevel: float

        :return: Returns the maximum programmable current limit for the specified voltage level.
        :rtype: float
        """
        raise NotImplementedError

    def QueryState(self, OutputState):
        """
        method Query State returns whether the power supply is in a particular output
        state.

        :param OutputState: The output state for which to query. Allowed values are those defined in the
            IviDCPwrOutputStateEnum enumeration.
        :type OutputState: IviDCPwrOutputStateEnum

        :return: Returns True if the power supply is currently in the state specified with the
            OutputState parameter, and False if it is not.
        :rtype: int
        """
        raise NotImplementedError

    def QueryVoltageLevelMax(self, CurrentLimit):
        """
        method Query Voltage Level Max returns the maximum programmable voltage level
        that the power supply accepts for a particular current limit on an output.

        :param CurrentLimit: The current limit for which to determine the maximum programmable voltage level.
        :type CurrentLimit: float

        :return: Returns the maximum programmable voltage level for the specified current limit.
        :rtype: float
        """
        raise NotImplementedError

    def ResetOutputProtection(self):
        """
        method Reset Output Protection resets the power supply's output protection after
        an over-voltage or over-current condition occurs.
        """
        raise NotImplementedError
