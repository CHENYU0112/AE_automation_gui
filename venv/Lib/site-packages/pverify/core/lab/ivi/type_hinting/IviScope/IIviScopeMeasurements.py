from __future__ import annotations


class IIviScopeMeasurements:
    def __init__(self):
        pass

    @property
    def Count(self):
        raise NotImplementedError

    def Initiate(self):
        """
        Initiates a waveform acquisition. The oscilloscope leaves the Idle state and
        waits for a trigger. The oscilloscope acquires a waveform for each enabled
        channel.
        """
        raise NotImplementedError

    def Abort(self):
        """
        Aborts an acquisition and returns the oscilloscope to the Idle state.
        """
        raise NotImplementedError

    def AutoSetup(self):
        """
        Automatically configures all the oscilloscopes settings based on the input
        signals.
        """
        raise NotImplementedError

    def Status(self):
        """
        Returns whether an acquisition is in progress, complete, or if the status is
        unknown.

        :return: Acquisition Status. May be one of the values define by
            IviScopeAcquisitionStatusEnum.
        :rtype: int
        """
        raise NotImplementedError

    def IsWaveformElementInvalid(self, Element):
        """
        Returns False if an element in a waveform array returned by the driver contains
        a valid voltage. Returns True if an element in a waveform array returned by the
        driver contains a value indicating that the oscilloscope could not sample a
        voltage.

        :param Element: Pass one of the values from the waveform array returned by the read and fetch
            waveform methods.
        :type Element: float

        :return: Returns whether true when the elementValue is a valid voltage or false for a
            value indicating that the oscilloscope could not sample a voltage.
        :rtype: bool
        """
        raise NotImplementedError

    def Item(self, Name):
        """
        Gets a pointer to a measurement object.

        :param Name: The name of a channel. It may be either a name returned by get_Name or a name
            mapped to a particular repeated capability in the session in the configuration
            store.
        :type Name: str

        :return: A pointer to a class-compliant IIviPwrMeterChannel interface.
        :rtype: IIviScopeMeasurement
        """
        raise NotImplementedError

    def Name(self, Index):
        """
        Gets the name of a measurement.

        :param Index: One based index into the collection of measurements.
        :type Index: int

        :return: The string associated by the driver to the value of Index without ever referring
            to the configuration store.
        :rtype: str
        """
        raise NotImplementedError
