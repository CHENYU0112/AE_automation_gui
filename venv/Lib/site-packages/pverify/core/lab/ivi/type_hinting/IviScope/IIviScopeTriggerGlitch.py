from __future__ import annotations


class IIviScopeTriggerGlitch:
    def __init__(self):
        pass

    @property
    def condition(self):
        raise NotImplementedError

    @condition.setter
    def condition(self, value):
        """
        The glitch condition detemermines whether the oscilloscope triggers on a a pulse
        with a width less than or greater than the glitch width value.
        """
        raise NotImplementedError

    @property
    def polarity(self):
        raise NotImplementedError

    @polarity.setter
    def polarity(self, value):
        """
        The polarity of the glitch that triggers the oscilloscope.
        """
        raise NotImplementedError

    @property
    def Width(self):
        raise NotImplementedError

    @Width.setter
    def Width(self, value):
        """
        The glitch width. The units are seconds.
        """
        raise NotImplementedError

    def Configure(self, Source, Level, Width, polarity, condition):
        """
        Configure the glitch trigger Source, Level, Width, Polarity, and Condition. A
        glitch trigger occurs when the edge of a pulse that matches the Width and
        Polarity crosses the specified Level (in Volts).

        :param Source: Specifies the trigger source. This value sets the Trigger Source property.
        :type Source: str
        :param Level: Specifies the trigger level. This value sets the Trigger Level property.
        :type Level: float
        :param Width: Specifies the glitch triggering glitch width in seconds. This value sets the
            Glitch Width property.
        :type Width: float
        :param polarity: Specifies the glitch polarity. This value sets the Glitch Polarity property.
        :type polarity: IviScopeGlitchPolarityEnum
        :param condition: Specifies the glitch condition. This value sets the Glitch Condition property.
        :type condition: IviScopeGlitchConditionEnum
        """
        raise NotImplementedError
