from __future__ import annotations

from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper, IVICOMDriverWrapper
from pverify.core.lab.ivi.type_hinting.IviCounter import IIviCounterEnums


class IIviCounter(IVICOMDriverWrapper):
    def __init__(self):
        self.Enums = IIviCounterEnums

        from .IIviDriverOperation import IIviDriverOperation

        self.DriverOperation = IIviDriverOperation()

        from .IIviDriverIdentity import IIviDriverIdentity

        self.Identity = IIviDriverIdentity()

        from .IIviDriverUtility import IIviDriverUtility

        self.Utility = IIviDriverUtility()

        from .IIviCounterChannels import IIviCounterChannels

        self.Channels = IIviCounterChannels()

        from .IIviCounterFrequency import IIviCounterFrequency

        self.Frequency = IIviCounterFrequency()

        from .IIviCounterPeriod import IIviCounterPeriod

        self.Period = IIviCounterPeriod()

        from .IIviCounterPulseWidth import IIviCounterPulseWidth

        self.PulseWidth = IIviCounterPulseWidth()

        from .IIviCounterDutyCycle import IIviCounterDutyCycle

        self.DutyCycle = IIviCounterDutyCycle()

        from .IIviCounterEdgeTime import IIviCounterEdgeTime

        self.EdgeTime = IIviCounterEdgeTime()

        from .IIviCounterFrequencyRatio import IIviCounterFrequencyRatio

        self.FrequencyRatio = IIviCounterFrequencyRatio()

        from .IIviCounterTimeInterval import IIviCounterTimeInterval

        self.TimeInterval = IIviCounterTimeInterval()

        from .IIviCounterPhase import IIviCounterPhase

        self.Phase = IIviCounterPhase()

        from .IIviCounterTotalizeContinuous import IIviCounterTotalizeContinuous

        self.TotalizeContinuous = IIviCounterTotalizeContinuous()

        from .IIviCounterTotalizeGated import IIviCounterTotalizeGated

        self.TotalizeGated = IIviCounterTotalizeGated()

        from .IIviCounterTotalizeTimed import IIviCounterTotalizeTimed

        self.TotalizeTimed = IIviCounterTotalizeTimed()

        from .IIviCounterArm import IIviCounterArm

        self.Arm = IIviCounterArm()

        from .IIviCounterMeasurement import IIviCounterMeasurement

        self.Measurement = IIviCounterMeasurement()

        from .IIviCounterVoltage import IIviCounterVoltage

        self.Voltage = IIviCounterVoltage()

        self.dllwrap: IVICDriverWrapper = None

    @property
    def drivername(self):
        raise NotImplementedError

    @property
    def Initialized(self):
        raise NotImplementedError

    @property
    def Function(self):
        raise NotImplementedError

    @Function.setter
    def Function(self, value):
        """
        Specifies the current measurement function of the Counter.
        """
        raise NotImplementedError

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameteris "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck,or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        :type OptionString: str
        """
        raise NotImplementedError

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        raise NotImplementedError
