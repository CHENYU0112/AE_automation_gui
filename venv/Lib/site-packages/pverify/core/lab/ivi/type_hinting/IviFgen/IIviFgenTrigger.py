from __future__ import annotations


class IIviFgenTrigger:
    def __init__(self):
        pass

    @property
    def InternalRate(self):
        raise NotImplementedError

    @InternalRate.setter
    def InternalRate(self, value):
        """
        The rate at which the function generator's internal trigger source produces a
        trigger, in triggers per second.
        """
        raise NotImplementedError

    def SendSoftwareTrigger(self):
        """
        Sends a software trigger, which will cause the function generator to generate
        output.
        """
        raise NotImplementedError

    def get_BurstCount(self, ChannelName):
        """
        Retrieves a channel's burst count.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The number of waveform cycles that the function generator produces after it
            receives a trigger.
        :rtype: float
        """
        raise NotImplementedError

    def set_BurstCount(self, ChannelName, pVal):
        """
        Sets a channel's burst count.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The number of waveform cycles that the function generator produces after it
            receives a trigger.
        :type pVal: int
        """
        raise NotImplementedError

    def get_Source(self, ChannelName):
        """
        Retrieves a channel's trigger source.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The trigger source. After the function generator receives a trigger from this
            source, it produces a signal.
        :rtype: int
        """
        raise NotImplementedError

    def set_Source(self, ChannelName, pVal):
        """
        Sets a channel's trigger source.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The trigger source. After the function generator receives a trigger from this
            source, it produces a signal.
        :type pVal: IviFgenTriggerSourceEnum
        """
        raise NotImplementedError
