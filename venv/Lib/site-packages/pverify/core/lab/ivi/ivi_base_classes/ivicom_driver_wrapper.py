from __future__ import annotations

from abc import abstractmethod

from .ivi_driver_wrapper import IVIDriverWrapper


class IVICOMDriverWrapper(IVIDriverWrapper):
    def __init__(self, ivi_compliant=True, *args, **kwargs):
        self._ivi_compliant = bool(ivi_compliant)

    def __str__(self):
        return f"{self.drivername}(IVI-COM driver wrapper)"

    @property
    @abstractmethod
    def Initialized(self) -> bool:
        pass

    def _check_ivi_compliance(self):
        if not self._ivi_compliant:
            msg = "Driver not IVI-COM compliant!"
            raise Exception(msg)

    def _check_initialized(self):
        if not self.Initialized:
            msg = "Driver not initialized!"
            raise Exception(msg)
