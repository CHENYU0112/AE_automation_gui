from __future__ import annotations

from typing import TYPE_CHECKING

from pverify.core.util.string_util import is_valid_identifier

from .specification import Specification

if TYPE_CHECKING:
    from numbers import Number


class Limits(list):
    """A class containing test limits.
    The testcase it self must take care of proper use and evaluation of the defined limit"""

    def __init__(self, baseclass):
        """

        :type baseclass: pverify.core.pyverify_base_test.PyVerifyBaseTest
        """
        list.__init__([])
        self.__baseclass = baseclass

    def Add(
        self,
        OutputName,
        HighLimit=None,
        LowLimit=None,
        Conditions=None,
        ParameterRef: str | None = None,
        x_Range: tuple[Number | None, Number | None] | list[Number | None] | None = None,
        Alias="",
    ):
        """
        Adds a specific limit for an output to the limits collection.

        There are 3 kind of limit styles for high- or low-limit: scalar, PWL (piecewise linear) and EXPR (expression)

        **Scalar (int or float)**
            | Can be applied on all output datatypes.
            | Defines a constant limit for the output.
            | Argument ParameterRef is ignored for this limit.

            The code below adds a limit for Output 'VoutRipple'. The output is compared against maximum of 0.2
            and minimum 0.0.

            .. code-block:: python

               self.Limits.Add("VoutRipple", 0.2, 0.0)

        **Piecewise-Linear (list of x,y values (int/float))** E.g. [x0, y0, x1, y1, ..., xn, yn]
            | Can be applied on all output datatypes.
            | Defines a piecewise linear limit for the output.

            **Scalar output**
                | The limits x values refer to the values of the input parameter referenced
                | with argument "ParameterRef", therefore "ParameterRef" must be specified.
                | The y values represent the limit of the output when the referenced parameter has the value x.
                | All intermediate points are linearly interpolated.

                Example:

                .. code-block:: python

                    self.Limits.Add("Out1", [1, 2.1, 3, 6.1], None, None, "In4")  # PWL limit on scalar output.
                    # Highlimit = 2.1 for In4 <= 1
                    # Highlimit = linear interpolation from 2.1 to 6.1 for 1 < In4 < 3
                    # Highlimit = 6.1 for In4 >= 3

            **Waveform/1-dim array output**
                "ParameterRef" is None:
                    | The x values refer to the time resp. index of the output waveform resp. 1-dim array.
                    | The y values represent the limits for the waveform's resp. 1-dim array's data value at the
                      time resp. index x

                    Example:

                    .. code-block:: python

                        self.Limits.Add("Out2", [1, 1.1, 5, 7.1], None)  # Out2 is a 1-dim numpy array
                        # Highlimit = 1.1 for Index <= 1
                        # Highlimit = linear interpolation from 1.1 to 7.1 for 1 < Index < 5
                        # Highlimit = 7.1 for Index >= 5
                        self.Limits.Add("Out3", [0.5, 5, 0.8, 10], None) # Out3 is a waveform
                        # Highlimit = 5 for time <= 0.5
                        # Highlimit = linear interpolation from 5 to 10 for 0.5 < time < 0.8
                        # Highlimit = 10 for time >= 0.8

                "ParameterRef" specified:
                    | Similar to scalar output with PWL limit.
                    | The limits x values refer to the values of the input parameter referenced
                    | with argument "ParameterRef", therefore "ParameterRef" must be specified.
                    | The y values represent the constant limit of the output 1-dim array/waveform
                    | when the referenced parameter has the value x.
                    | All intermediate points are linearly interpolated.

                    Example:

                    .. code-block:: python

                        self.Limits.Add("Out4", [1, 7, 2, 8], None, None, "In4")  # Out4 is 1-dim array OR waveform
                        # Highlimit = 7 for In4 <= 1
                        # Highlimit = linear interpolation from 7 to 8 for 1 < In4 < 2
                        # Highlimit = 8 for In4 >= 2

        **EXPR (string)**
            | Can be applied on all output datatypes.
            | Defines a limit expression for the output. The expression must contain the variable **"$x"**.
            | Defined functions:

                abs, ceil, floor, sqrt, cbrt, exp, div, log, log1p, log2, logb, ilogb,
                log10, cos, cosh, acos, acosh, sin, sinh, asin, asinh, tan, tanh, atan, atanh, atan2,
                isnan, isinf, isfinite, isnormal, trunc, round, nan, pow, modf, getlogin,
                lround, rand, length, tolower, toupper

            **Scalar output**
                | The limit values are calculated by using the expression, where the $x variable in the expression
                | refer to the values of the referenced input parameter therefore "ParameterRef" must be specified.

                Example:

                .. code-block:: python

                    self.Limits.Add("Out1", "$x * 1.1", "$x * 0.9", None, "In4")  # EXPR limit on scalar output.
                    # HighLimit = 110% of parameter "In4"
                    # LowLimit = 90% of parameter "In4"

            **1-dim array/Waveform output**
                "ParameterRef" is None:
                    | The limit values are calculated by using the time resp. index of the output
                      waveform resp. 1-dim array as input
                    | for the expression.

                    Example:

                    .. code-block:: python

                        self.Limits.Add("Out3", "sin($x)", "2 * $x + 1") # Out3 is waveform
                        # HighLimit = sin(x) where x equals the time vector of waveform Out3
                        # HighLimit = 2x + 1 where x equals the time vector of waveform Out3

                "ParameterRef" specified:
                    | Similar to scalar output with EXPR limit.
                    | The limit values are calculated by using the referenced parameter value and consequentally define
                    | a constant 1-dim array/waveform limit for the current variation.

                    Example:

                    .. code-block:: python

                        # Out4 is 1-dim array OR waveform
                        self.Limits.Add("Out4", "1.5 if $x > 5 else 3", None, None, "In4")
                        # Highlimit = 1.5 if In4 > 5 else 3


        :param OutputName: The name of the Output that has been specified in the output collection.
        :type OutputName: str
        :param HighLimit: The high limit of the output. Either a scalar-, PWL- or Expression-style limit.
        :type HighLimit: int | float | list[int] | list[float] | np.ndarray | str | None
        :param LowLimit: See HighLimit
        :type LowLimit: int | float | list[int] | list[float] | np.ndarray | str | None
        :param Conditions: An expression-string that define the condition under which the output limit applies.\n
                           E.g. "(ParamA==5)||(ParamB<5)&&(ParamC==0)"\n
                           E.g. "(ParamA==5)or(ParamB<5)and(ParamC==0)"
        :type Conditions: str
        :param ParameterRef: The name of the input signal the limit depends on.
        :type ParameterRef: str
        :param x_Range: Only applies on limits for 1-dim arrays & waveforms.
                       Defines the area where the limits are applied on the 1-dim array(index) or waveform(time).

                       Syntax: [<Start>, <Stop>] where <Start> and <Stop> may be an index (for a 1-dim array output)
                       or a time (for a waveform output).
                       If either <Start> or <Stop> should not be specified, insert None.

                       Example:

                       self.Limits.Add("VoutWaveform", 12.6, 11.4, x_Range=[0.5,None])

        :type x_Range: None | tuple | list
        :param Alias: Assign the limit a descriptive name, that will occur
                      in the logs and as testcase name inside the JUnitXML files.
        :type Alias: str
        :return: None

        **Examples:**

        The code below adds a limit for Output 'VoutRipple'. The output is compared against maximum of 0.12,
        but only for a special combination of input parameter

        .. code-block:: python

           self.Limits.Add("VoutRipple", 0.12, None, "(Vac==120)||(Iout<1.5)&&(Frequency==60)")

        The code below adds a relative limit for output 'Iout'. The output is compared against the input parameter
        "Iload". The limit is passed only if "Iout" is within +-10% range of input "Iload".

        .. code-block:: python

           self.Limits.Add("Iout", "$x * 1.1", "$x * 0.9", None, "Iload")

        """
        if HighLimit is None and LowLimit is None:
            msg = "At least one limit has to be specified."
            raise Exception(msg)

        if not is_valid_identifier(OutputName):
            msg = "Invalid parameter name. Name may only contain alphanumeric characters including '_'."
            raise ValueError(msg)

        new_limit = Specification(
            OutputName,
            HighLimit,
            LowLimit,
            Conditions,
            ParameterRef,
            tuple(x_Range) if x_Range is not None else None,
            Alias,
        )
        existing_limit: Specification
        for existing_limit in self:
            if existing_limit == new_limit or existing_limit.alias == new_limit.alias != "":
                msg = f"There is already an identical limit for output {OutputName!r}!"
                raise ValueError(msg)
        self.append(new_limit)

    def _to_serializeable(self):
        return [v.for_json() for v in self]

    def clear(self):
        super().clear()
        Specification._uid = 0
        Specification._counter.clear()


if __name__ == "__main__":
    pass
