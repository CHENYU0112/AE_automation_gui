from __future__ import annotations

import os

from pverify.core.env import IS_WIN


class RunOptions:
    """Configure general run options of the test"""

    def __init__(self, baseclass):
        """

        :type baseclass: pverify.core.pyverify_base_test.PyVerifyBaseTest
        """
        self.__baseclass = baseclass
        self.__SkipPostProcessing = False
        self.__PostProcOnlyReloadPath = None
        self.__SuppressGUI = False
        self.__SkipVariations = []
        self.__RunVariations = []

    @property
    def SkipPostProcessing(self):
        """
        If True and execution mode is not PostProcOnly the VariationLoopPostprocessing will be skipped.
        """
        return self.__SkipPostProcessing

    @SkipPostProcessing.setter
    def SkipPostProcessing(self, value):
        """
        If True and execution mode is not PostProcOnly the VariationLoopPostprocessing will be skipped.
        """
        self.__SkipPostProcessing = bool(value)

    @property
    def PostProcOnlyReloadPath(self):
        """
        The path from where to reload the result for execution mode POSTPROCPONLY.

        If not specified there will be a popup window prompting the user to select a path.
        """
        return self.__PostProcOnlyReloadPath

    @PostProcOnlyReloadPath.setter
    def PostProcOnlyReloadPath(self, value):
        """
        The path from where to reload the result for execution mode POSTPROCPONLY.

        If not specified there will be a popup window prompting the user to select a path.
        """
        self.__PostProcOnlyReloadPath = os.path.abspath(value)

    @property
    def SuppressGUI(self):
        """
        If True, the GUI will be suppressed.
        """
        if not IS_WIN and os.environ.get("DISPLAY", None) is None:
            return True  # Return True if on Unix and no display is available
        return self.__SuppressGUI

    @SuppressGUI.setter
    def SuppressGUI(self, value):
        """
        If True, the GUI will be suppressed.
        """
        self.__SuppressGUI = bool(value)

    @property
    def SkipVariations(self):
        """
        A list/tuple of variation-indices for which the test should skip the execution

        This attribute has a higher priority than RunVariations
        """
        return self.__SkipVariations

    @SkipVariations.setter
    def SkipVariations(self, value):
        """
        A list/tuple of variation-indices for which the test should skip the execution

        This attribute has a higher priority than RunVariations
        """
        if not isinstance(value, (list, tuple, range)) or not all(isinstance(x, (int)) for x in value):
            msg = "Setter only accepts list/tuple of integers!"
            raise TypeError(msg)
        self.__SkipVariations = list(value)

    @property
    def RunVariations(self):
        """
        A list/tuple of variation-indices for which the test should run the execution
        """
        return self.__RunVariations

    @RunVariations.setter
    def RunVariations(self, value):
        """
        A list/tuple of variation-indices for which the test should run the execution
        """
        if not isinstance(value, (list, tuple, range)) or not all(isinstance(x, (int)) for x in value):
            msg = "Setter only accepts list/tuple of integers!"
            raise TypeError(msg)
        self.__RunVariations = list(value)


if __name__ == "__main__":
    pass
