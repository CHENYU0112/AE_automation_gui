# flake8: noqa
"""
This module is used to evaluate numerical, arithmetical, etc expressions that come as PERL expressions from Avenue.
The corresponding python functions are imported with the same names in PERL so that a python eval command is able to
interpret the expression.
"""

import numpy as np
from numpy.random import random_integers as __rand

from ..util.numeric_util import is_numeric_iterable

ilogb = lambda x: int(np.floor(np.log2(x)))
logb = lambda x: float(np.floor(np.log2(x)))
isnormal = np.isfinite
lround = lambda x: int(round(x))
rand = lambda x: __rand(x - 1)
length = len


def eval_expression(expr, values):
    # todo: since Avenue is removed now, allow more complex expressions using multiple variables!
    if is_numeric_iterable(values):
        values = np.array(values)
    else:
        values = np.array([values])
    expr = expr.replace("$x", "_value_").replace("x", "_value_")
    evalfunc = eval(
        "lambda _value_: " + expr,
        dict(
            ilogb=ilogb,
            logb=logb,
            log2=np.log2,
            rand=rand,
            length=length,
            floor=np.floor,
            sin=np.sin,
            cos=np.cos,
            np=np,
        ),
    )
    return np.array(list(map(evalfunc, values)))


if __name__ == "__main__":
    print(eval_expression("sin($x)", 1))
    print(eval_expression("sin($x)", [1, 2, 3]))
    print(eval_expression("sin(x)", 1))
    print(eval_expression("sin(x)", [1, 2, 3]))
