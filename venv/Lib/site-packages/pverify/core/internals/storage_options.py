from __future__ import annotations

import warnings


class StorageOptions:
    """
    Configure storage options of the test.

    If you want to output the results in a different format, you can configure the result handlers here.

    Typically, you don't need to change anything here, as the default options are fine for most cases.

    If you like to additionally output JUnit XML results or other formats, configure its handler like this::

        self.StorageOptions.ConfigureJUnitXMLHandler(True)
        self.StorageOptions.ConfigureJsonHandler(True)
        self.StorageOptions.ConfigureExcelHandler(True)
        self.StorageOptions.ConfigurePassfinderHandler(True)

    """

    def __init__(self, baseclass):
        """

        :type baseclass: pverify.core.pyverify_base_test.PyVerifyBaseTest
        """
        self.__baseclass = baseclass

    def ConfigureResultHandler(self, handlername: str, enabled: bool, **kwargs):
        """
        Configures a result handler

        :param handlername: The name of the handler to configure
        :param enabled: If True, the handler gets enabled
        :param kwargs: The keyword arguments specific for the handler.
        """
        self.__baseclass._result_gateway.update_handler_config(name=handlername, enabled=bool(enabled), **kwargs)

    def ConfigureLegacyHDF5Handler(self, enabled: bool = True):
        """
        Configures the legacy HDF5 handler (results.hdf5 in each run directory and toplevel
        results.hdf5 with relative links)

        :param enabled: If True, the handler gets enabled.
        """
        warnings.warn("This method is deprecated and now does nothing!", DeprecationWarning, stacklevel=2)

    def ConfigureJUnitXMLHandler(self, enabled: bool = True, filename: str = "results"):
        """
        Configures the JUnit XML handler. If enabled, the test will output its specification results as JUnit XML file

        :param enabled: If True, the handler gets enabled.
        :param filename: The desired filename without extension
        """
        self.__baseclass._result_gateway.update_handler_config(
            name="junit_xml_handler",
            enabled=bool(enabled),
            filename=str(filename),
        )

    def ConfigureDLH5Handler(self, enabled: bool = True, filename: str = "results"):
        """
        Configures the DLH5 handler (default).

        :param enabled: If True, the handler gets enabled
        :param filename: The desired filename without extension
        """
        self.__baseclass._result_gateway.update_handler_config(
            name="dlh5_handler", enabled=bool(enabled), filename=str(filename)
        )

    def ConfigureJsonHandler(
        self,
        enabled: bool = True,
        filename: str = "results",
        indent: int = 2,
        include_test_interface: bool = True,
    ):
        """
        Configures the JSON result handler. It will convert the generated DLH5 file to JSON, but skip n-dim results
        like waveforms.

        :param enabled: True for enabled.
        :param filename: The desired filename without extension
        :param indent: Indent in number of characters. None for most compact representation
                       (not human readable anymore), recommended and default is 2.
        :param include_test_interface: Include test interface definition as json object
        """
        self.__baseclass._result_gateway.update_handler_config(
            name="json_handler",
            enabled=bool(enabled),
            filename=str(filename),
            indent=indent,
            include_test_interface=bool(include_test_interface),
        )

    def ConfigureExcelHandler(
        self,
        enabled: bool = True,
        filename: str = "results",
    ):
        """
        Configures the EXCEL result handler. It will convert the generated DLH5 file to Excel, but skip n-dim results
        like waveforms.

        :param enabled: True for enabled. Default False
        :param filename: The desired filename without extension
        """
        self.__baseclass._result_gateway.update_handler_config(
            name="excel_handler",
            enabled=bool(enabled),
            filename=str(filename),
        )

    def ConfigurePassfinderHandler(
        self,
        enabled: bool = True,
    ):
        """
        Configures the PassFinder result handler.

        :param enabled: True for enabled.
        """
        self.__baseclass._result_gateway.update_handler_config(
            name="passfinder_handler",
            enabled=bool(enabled),
        )

    @property
    def PandasHDFStoreOptions(self):
        return self.__baseclass._result_gateway.get_handler_config("hdfstore_handler")

    def ConfigurePandasHDFStore(
        self,
        enabled: bool = True,
        force: bool = True,
        dst_data: str | None = None,
        dst_wf: str | None = None,
        complevel: int = 9,
        complib: str = "blosc",
    ):
        r"""
        :param enabled: If True, after execution the test results are converted to a very fast,
                        easy accessible and indexed HDF5 store.
        :param force: If True, the results are converted even if the test failed
        :param dst_data: The target HDF5 file that contains the parameter indextable, the datatable
                         (only scalar results) and parameter info table
        :param dst_wf: The target HDF5 file that contains the waveform results for all variations.
                       If None the filename is derived from the dst_data argument.
        :param complevel: int, 0-9, default None
                          Specifies a compression level for data.
                          A value of 0 disables compression.
        :param complib: {'zlib', 'lzo', 'bzip2', 'blosc'}, default 'blosc'
                        Specifies the compression library to be used.

                        As of pandas v0.20.2 these additional compressors for Blosc are supported
                        (default if no compressor specified: 'blosc:blosclz'):
                        \{'blosc:blosclz', 'blosc:lz4', 'blosc:lz4hc', 'blosc:snappy', 'blosc:zlib', 'blosc:zstd'\}.

                        Specifying a compression library which is not available issues a ValueError.
        """
        warnings.warn(
            "The Pandas HDFStore support in PyVerify is deprecated and might be removed soon.",
            FutureWarning,
            stacklevel=2,
        )

        self.__baseclass._result_gateway.update_handler_config(
            name="hdfstore_handler",
            enabled=enabled,
            dst_data=dst_data,
            dst_wf=dst_wf,
            complevel=int(complevel),
            complib=complib,
        )


if __name__ == "__main__":
    pass
