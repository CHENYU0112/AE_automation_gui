from __future__ import annotations

import warnings

from pverify.core.internals.Enums import Enums
from pverify.core.util.string_util import is_valid_identifier


class Attributes:
    """Contains the general information/attributes of the test"""

    def __init__(self, classname: str):
        self.__ExecutionMode = None
        self.__Test_Name = classname
        self.__Testcase_Name = ""
        self.__Test_Description = None

        self._user_defined_attributes = {}

    def Add(self, Name, Value):
        """
        Adds global file metadata by name and value.

        :param Name: Name of the attribute
        :type Name: str
        :param Value: Value assigned to the attribute

        **Example:**

        .. code-block:: python

          self.Attributes.Add("ChipType", "abc")
          self.Attributes.Add("ChipID", 1234567)
        """
        if not is_valid_identifier(Name):
            msg = "Invalid attribute name. Name may only contain alphanumeric characters including '_'."
            raise ValueError(msg)
        if Value is not None and isinstance(Value, (str, int, float, bool)):
            self._user_defined_attributes.update({Name: Value})
        else:
            msg = "Argument must not be None, lists, arrays or dictionaries."
            raise Exception(msg)

    @property
    def ExecutionMode(self):
        return self.__ExecutionMode

    @ExecutionMode.setter
    def ExecutionMode(self, value):
        """
        To execute the same test in different verification domains this
        test attribute can be set to the desired verification domain.

        Valid execution modes: Attributes of Enums.ExecutionMode
        """
        if value not in Enums.ExecutionMode.__dict__.values():
            msg = "Unknown execution mode!"
            raise TypeError(msg)
        self.__ExecutionMode = value

    @property
    def Test_Name(self):
        if self.__Test_Name == "":
            self.__Test_Name = str(self.__baseclass.__class__.__name__)
        return self.__Test_Name

    @property
    def Testcase_Name(self):
        if self.__Testcase_Name == "":
            self.__Testcase_Name = self.Test_Name
        return self.__Testcase_Name

    @Testcase_Name.setter
    def Testcase_Name(self, value):
        """
        The testcase name.
        """
        self.__Testcase_Name = str(value).replace(" ", "_")

    @property
    def Test_Description(self):
        return self.__Test_Description

    @Test_Description.setter
    def Test_Description(self, value):
        """
        The test's description. If not set, the doc string of test module and test class will be used as default.
        """
        self.__Test_Description = str(value)

    @property
    def Testcase_Description(self):
        return self.Test_Description

    @Testcase_Description.setter
    def Testcase_Description(self, value):
        """The testcase description."""
        warnings.warn("This is deprecated in favor of Test_Description.", FutureWarning, stacklevel=2)
        self.Test_Description = str(value)


if __name__ == "__main__":
    pass
