from __future__ import annotations

import uuid
from numbers import Number
from pathlib import Path

import arrow

from pverify.core.io.hdf5_handler import H5_TestResult


def hdf5_to_dlh5(filepath_in: Path | str, filepath_out: Path | str | None = None) -> Path:  # pragma: no cover
    """
    Converts the legacy PyVerify hdf5 result data format into DLH5.
    Old metadata is not converted.

    :param filepath_in: The file path to the result data to be converted
    :param filepath_out: The destination of the converted file.
                         If omitted it will be stored at the input file location with a different file suffix.
    :returns: The path to the converted file.
    """
    from pverify import Waveform
    from pverify.core.io.pv_dlh5 import PyVerifyDLH5 as DLH5

    filepath_in = Path(filepath_in)
    if filepath_out is None:
        filepath_out = filepath_in.with_suffix(".dlh5")
    filepath_out = Path(filepath_out)
    filepath_out.parent.mkdir(parents=True, exist_ok=True)

    old = H5_TestResult.from_file(str(filepath_in))

    p = DLH5(filepath_out, "w")

    p.file_add_metadata("converted_from_legacy_hdf5", True)
    p.file_add_metadata("test_started_utc", arrow.utcnow().isoformat())
    p.file_add_metadata("test_name", old.get_attr_str("test_name"))
    p.file_add_metadata("test_version", old.get_attr_str("test_version"))
    test_run_id = str(uuid.uuid4())
    p.file_add_metadata("test_run_id", test_run_id)

    for i, var in enumerate(old.variation_names):
        old_v = old.get_variation(var)
        p.group_add_metadata(i, "test_run_id", test_run_id)
        p.group_add_metadata(i, "test_started", arrow.now().isoformat())
        for inp in old_v.get_inputs(old_v.input_names):
            p.group_add_operating_condition(i, inp.name, inp.data)
        for outp in old_v.get_outputs(old_v.output_names):
            if isinstance(outp.data, Waveform):
                p.group_add_waveform_channel(
                    i,
                    outp.name,
                    y_data=outp.data.data,
                    x_data=outp.data.time,
                    unit_y=outp.unit,
                    meta_data={"spec_eval_result": outp.pfinfo},
                )
            elif isinstance(outp.data, Number):
                p.group_add_numeric_channel(
                    i,
                    outp.name,
                    data=outp.data,
                    unit=outp.unit,
                    meta_data={"spec_eval_result": outp.pfinfo},
                )

    p.close()
    return filepath_out
