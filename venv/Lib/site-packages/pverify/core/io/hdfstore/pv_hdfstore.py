from __future__ import annotations

from typing import TYPE_CHECKING

import pandas as pd

if TYPE_CHECKING:
    from collections.abc import Iterator

WFSTORE_NAME_FORMAT = "run%08d"


class PV_HDFStore(pd.HDFStore):
    INDEXTABLE = "indextable"
    INFOTABLE = "infotable"
    DATATABLE = "datatable"
    TYPE_OUTPUT = "output"
    TYPE_PARAMETER = "parameter"
    DTYPE_NUMBER = "number"
    DTYPE_WAVEFORM = "waveform"

    def pv_select_index(
        self,
        where=None,
        start=None,
        stop=None,
        columns=None,
        iterator=False,
        chunksize=None,
        auto_close=False,
        **kwargs,
    ) -> pd.DataFrame:
        """
        Retrieve (partial) dataframe of indextable (table with all parameter/variation values),
        optionally based on where criteria

        :param where: Index or expression (parameter names are valid indexers) to specify which rows to return,optional.
                      See https://pandas.pydata.org/pandas-docs/stable/io.html#querying-a-table
        :param start: integer (defaults to None), row number to start selection
        :param stop: integer (defaults to None), row number to stop selection
        :param columns: a list of columns (parameter names) that if not None, will limit the return columns
        :param iterator: boolean, return an iterator, default False
        :param chunksize: nrows to include in iteration, return an iterator
        :param auto_close: boolean, should automatically close the store when finished, default is False
        :returns: The selected object
        """
        return self.select(
            PV_HDFStore.INDEXTABLE, where, start, stop, columns, iterator, chunksize, auto_close, **kwargs
        )

    def pv_select_data(
        self,
        where=None,
        start=None,
        stop=None,
        columns=None,
        iterator=False,
        chunksize=None,
        auto_close=False,
        **kwargs,
    ) -> pd.DataFrame:
        """
        Retrieve (partial) dataframe of datatable (table with all scalar output values),
        optionally based on where criteria.

        :param where: Index or expression (output names are valid indexers) to specify which rows to return, optional.
                      See https://pandas.pydata.org/pandas-docs/stable/io.html#querying-a-table
        :param start: integer (defaults to None), row number to start selection
        :param stop: integer (defaults to None), row number to stop selection
        :param columns: a list of columns (output names) that if not None, will limit the return columns
        :param iterator: boolean, return an iterator, default False
        :param chunksize: nrows to include in iteration, return an iterator
        :param auto_close: boolean, should automatically close the store when finished, default is False
        :returns: The selected object
        """
        return self.select(
            PV_HDFStore.DATATABLE, where, start, stop, columns, iterator, chunksize, auto_close, **kwargs
        )

    def pv_select_info(self, where=None, columns=None) -> pd.DataFrame:
        """
        Retrieve (partial) dataframe of info (table with information about parameters),
        optionally based on where criteria

        :param where: Index or expression ("index", "type", "name", "unit", "dtype", "description" are valid indexers)
                      to specify which rows to return, optional.
                      See https://pandas.pydata.org/pandas-docs/stable/io.html#querying-a-table
        :param columns: a list of columns ("type", "name", "unit", "dtype", "description" are valid column names) that
                        if not None, will limit the return columns
        """
        return self.select(PV_HDFStore.INFOTABLE, where, columns=columns)

    def pv_select_index_and_data(
        self,
        where_index=None,
        where_data=None,
        dropindexcols=False,
        columns=None,
        iterator=False,
        chunksize=None,
        auto_close=False,
        **kwargs,
    ) -> pd.DataFrame:
        """
        Retrieve (partial) dataframe of datatable (table with all scalar output values),
        optionally based on where criteria

        :param where_index: Index or expression (parameter names are valid indexers) to specify which rows to return,
                            optional. See https://pandas.pydata.org/pandas-docs/stable/io.html#querying-a-table
        :param where_data: Index or expression (output names are valid indexers) to specify which rows to return,
                           optional. See https://pandas.pydata.org/pandas-docs/stable/io.html#querying-a-table
        :param dropindexcols: If True the returned dataframe will contain columns from the indextable
        :param columns: a list of columns (parameter/output names) that if not None, will limit the return columns
        :param iterator: boolean, return an iterator, default False
        :param chunksize: nrows to include in iteration, return an iterator
        :param auto_close: boolean, should automatically close the store when finished, default is False
        :returns: The selected object
        """
        if dropindexcols:
            allowed_cols = list(
                self.pv_select_info(f"type == '{self.TYPE_OUTPUT}' and dtype != '{self.DTYPE_WAVEFORM}'")["name"]
            )
            columns = allowed_cols[:] if columns is None else [c for c in columns if c in allowed_cols]

        idx_index = self.pv_select_index(where_index).index
        idx_data = self.pv_select_data(where_data).index

        idx_intersect = idx_index.intersection(idx_data)

        return self.select_as_multiple(
            [PV_HDFStore.INDEXTABLE, PV_HDFStore.DATATABLE],
            idx_intersect,
            PV_HDFStore.INDEXTABLE,
            columns,
            None,
            None,
            iterator,
            chunksize,
            auto_close,
            **kwargs,
        )

    def pv_select_from_wfstore(
        self, wfstorefile, where=None, columns=None, iterator=True
    ) -> list[pd.DataFrame] | Iterator[pd.DataFrame]:
        """
        Retrieve dataframes of datatable (table with all scalar output values), optionally based on where criteria

        :param wfstorefile: The file where the waveforms are stored.
                            ("dst_wf" argument of "convert_to_pandas_hdfstore" function)
        :param where: Index or expression (parameter names are valid indexers)
                      to specify which variation to return, optional.
                      See https://pandas.pydata.org/pandas-docs/stable/io.html#querying-a-table
        :param columns: a list of columns that if not None, will limit the return columns
        :param iterator: boolean, return an iterator, default True. If True the return value may
                         consume very much memory because all data is loaded immediately from the file.
        :returns: The selected object
        """
        index = self.select(PV_HDFStore.INDEXTABLE, where, None, None, columns, False, None, False).index

        if columns is None:
            ite = (pd.read_hdf(wfstorefile, WFSTORE_NAME_FORMAT % key).dropna(how="all") for key in index)
        else:
            ite = (pd.read_hdf(wfstorefile, WFSTORE_NAME_FORMAT % key)[columns].dropna(how="all") for key in index)
        if iterator:
            return ite
        return list(ite)


if __name__ == "__main__":
    pass
