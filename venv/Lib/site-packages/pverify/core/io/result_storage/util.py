from __future__ import annotations

from numbers import Number

import numpy as np

from pverify.postproc.waveform import Waveform


def safe_json(data):
    if data is None or isinstance(data, (bool, int, float, str)):
        return True
    if isinstance(data, (tuple, list)):
        return all(safe_json(x) for x in data)
    if isinstance(data, dict):
        return all(isinstance(k, str) and safe_json(v) for k, v in data.items())
    return False


def check_str_type(input):
    if not isinstance(input, str):
        msg = "Only str type supported for this argument!"
        raise TypeError(msg)


def is_string_type(data):
    return isinstance(data, (str, bytes))


def is_number_type(data):
    return isinstance(data, (int, np.int_, float, np.float64, Number))


def is_waveform_type(data):
    return isinstance(data, Waveform)


def is_numeric_1dim_list_type(data):
    return isinstance(data, (list, tuple, set)) and all(isinstance(d, Number) for d in data)


def is_array_type(data):
    return isinstance(data, np.ndarray)
