from __future__ import annotations

import logging
import os
from os.path import join

IS_WIN = os.name == "nt"

DEFAULT_RESULT_DIR = join(os.path.expanduser("~"), "temp", "PyVerify") if not IS_WIN else "C:/temp/PyVerify/results"
IVI_RESET = True

# Timeout for starting the GUI process
GUI_START_TIMEOUT = 300

# Timeout for waiting for a pause state or until a test stops after pressing STOP
GUI_EVENT_TIMEOUT = 60 * 60 * 5

# Enables/disables the logging to stdout
LOG_STDOUT_ENABLE = bool(int(os.environ.get("PYVERIFY_STDOUT_LOG_ENABLE", "1")))

# Determines the logging level (INFO is default). Available values are
LOG_LEVEL = os.environ.get("PYVERIFY_LOG_LEVEL", None)
if LOG_LEVEL is not None and LOG_LEVEL not in logging._nameToLevel:
    msg = "Environment variable 'PYVERIFY_LOG_LEVEL' must either be one of {} or not set at all!".format(
        "/".join(logging._nameToLevel.keys())
    )
    raise OSError(msg)

# Determines the number of stack frames to show in the log if an error occurs, default is 0 for more readability
TRACEBACK_NR_FRAMES = int(os.environ.get("PYVERIFY_TRACEBACK_NR_FRAMES", "1"))

# If 1 tracebacks from a test are not filtered and contain all frames
DEBUG_TRACEBACK = bool(int(os.environ.get("PYVERIFY_DEBUG_TRACEBACK", "0")))
