from __future__ import annotations

import importlib


def include_hooks(cls, ignore_inherited_hooks=True):
    if isinstance(cls, str):
        if cls.count(".") == 0:
            msg = "Passed path spec must contain at least a package name, e.g. mypackage.myplugin"
            raise ValueError(msg)
        packagename, classname = cls.rsplit(".", maxsplit=1)
        module = importlib.import_module(packagename)
        cls = getattr(module, classname)

    if not isinstance(cls, type):
        return include_hooks(cls.__class__)

    if cls.__name__ == "function":
        msg = "Passed argument must be a class, not a function!"
        raise TypeError(msg)

    def decorator(klass):
        for name in dir(cls):
            if name.startswith("__"):
                continue
            try:
                item = getattr(cls, name)
            except Exception:
                continue
            if hasattr(item, "__pyverifyhook_anchorname__") and callable(item):
                if ignore_inherited_hooks and cls.__name__ + "." + name not in str(item):
                    continue
                anchorname = item.__pyverifyhook_anchorname__
                getattr(item, anchorname).__FROM_PLUGIN__ = True
                setattr(klass, f"{cls.__name__}_{item.__name__}", item)
        return klass

    return decorator
