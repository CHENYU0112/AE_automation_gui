from __future__ import annotations


def _check_str(name, value, optional=True):
    types = (str, type(None)) if optional else str
    if not isinstance(value, types):
        msg = (
            f"Invalid value ({value}) specified for scripting variable '{name}' and therefore the schematic "
            f"default stimulus cannot be overwritten by scripting."
        )
        raise ValueError(msg)


class ScriptedSourceVariables:
    def __init__(
        self,
        stimulustype: str,
        stimulus: str | None = None,
        isrc_von: str | None = None,
        isrc_voff: str | None = None,
        vsrc_rin: str | None = None,
        vsrc_l_line: str | None = None,
        psrc_von: str | None = None,
        psrc_voff: str | None = None,
        ledsrc_n_leds: str | None = None,
        ledsrc_r_dyn: str | None = None,
        ledsrc_v_fwd: str | None = None,
    ):
        """

        :param stimulustype: The scripting variable for the "Stimulus Type" parameter
        :param stimulus: The scripting variable for the "Scripted Stimulus" parameter
        :param isrc_von: The scripting variable for the "Start Voltage" parameter
        :param isrc_voff: The scripting variable for the "Stop Voltage" parameter
        :param vsrc_rin: The scripting variable for the "Internal/Line Resistance" parameter
        :param vsrc_l_line: The scripting variable for the "Line Inductance" parameter
        :param psrc_von: The scripting variable for the "Brownin Threshold" parameter
        :param psrc_voff: The scripting variable for the "Brownout Threshold" parameter
        :param ledsrc_n_leds: The scripting variable for the "Number LEDs" parameter
        :param ledsrc_r_dyn: The scripting variable for the "Dyn. LED Resistance" parameter
        :param ledsrc_v_fwd: The scripting variable for the "Fwd Voltage LED" parameter
        """

        _check_str("stimulustype", stimulustype, False)
        _check_str("stimulus", stimulus)
        _check_str("isrc_von", stimulus)
        _check_str("isrc_voff", stimulus)
        _check_str("vsrc_rin", stimulus)
        _check_str("vsrc_l_line", stimulus)
        _check_str("psrc_von", stimulus)
        _check_str("psrc_voff", stimulus)
        _check_str("ledsrc_n_leds", stimulus)
        _check_str("ledsrc_r_dyn", stimulus)
        _check_str("ledsrc_v_fwd", stimulus)

        self.stimulustype = stimulustype
        self.stimulus = stimulus
        self.isrc_von = isrc_von
        self.isrc_voff = isrc_voff
        self.vsrc_rin = vsrc_rin
        self.vsrc_l_line = vsrc_l_line
        self.psrc_von = psrc_von
        self.psrc_voff = psrc_voff
        self.ledsrc_n_leds = ledsrc_n_leds
        self.ledsrc_r_dyn = ledsrc_r_dyn
        self.ledsrc_v_fwd = ledsrc_v_fwd

    def __str__(self):
        return "{} instance ({})".format(
            self.__class__.__name__,
            ", ".join([f"{x}: {y}" for x, y in self.__dict__.items()]),
        )


class _GeneralProbe:
    def __init__(
        self,
        netname_voltage_pos: str,
        netname_voltage_neg: str | None = None,
        netname_current: str | None = None,
    ):
        self.netname_voltage_pos = netname_voltage_pos
        self.netname_voltage_neg = netname_voltage_neg
        self.netname_current = netname_current

        _check_str("netname_voltage_pos", netname_voltage_pos)


class ScopeDifferentialProbe(_GeneralProbe):
    def __init__(self, netname_voltage_pos: str, netname_voltage_neg: str | None = None):
        super().__init__(netname_voltage_pos, netname_voltage_neg, None)

        _check_str("netname_voltage_neg", netname_voltage_neg)


class ScopeProbe(_GeneralProbe):
    def __init__(self, netname_voltage_pos: str):
        super().__init__(netname_voltage_pos, None, None)


class PowerAnalyzerProbe(_GeneralProbe):
    def __init__(self, netname_voltage_pos: str, netname_voltage_neg: str, netname_current: str):
        super().__init__(netname_voltage_pos, netname_voltage_neg, netname_current)

        _check_str("netname_current", netname_current)


class Probes:
    ScopeProbe = ScopeProbe
    ScopeDifferentialProbe = ScopeDifferentialProbe
    PowerAnalyzerProbe = PowerAnalyzerProbe
