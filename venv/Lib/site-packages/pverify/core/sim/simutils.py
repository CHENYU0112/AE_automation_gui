from __future__ import annotations


class SimUtils:
    def __init__(self, testInstance):
        self.__testInstance = testInstance
        """:type : pverify.PyVerifyBaseTest"""
        self._sim_duration = None

    def Set_Simulation_Duration(self, time):
        """
        Overides the estimated simulation time with a user defined fixed value

        Attention: There is no check, whether the user defined time satisfies the given
        requirements for example from the scope settings

        Example: self.SimUtils.Set_Simulation_Duration(0.02)

        :param time: Simulation duration in seconds
        """
        self._sim_duration = time

    def probe_raw(self, name, run_num=None, cache=False):
        """
        Access a raw probed waveform trace

        :param name: The signal to probe. Use "Time" to access the time vector.
        :type name: str
        :param run_num: run number in sweep, None for current run
        :type run_num: int|NoneType
        :param cache: Cache probe data so subsequent calls for same data don't create
                      more copies or trigger a SIMetrix data group load
        :type cache: bool
        :rtype: numpy.ndarray
        """
        ta = self.__testInstance.AbstractInstruments._simulation_manager.ta
        """:type : srd.TransientAnalysis"""
        varindex = self.__testInstance.VariationIndex if run_num is None else int(run_num)

        return ta.probe(name, run_num=varindex, cache=bool(cache))
