from __future__ import annotations

from pverify.core.sim.simulated_pwran import SimulatedPwrAn

from .mappings import PwrAnMapping


class AI_PowerAnalyzer:
    def __init__(self, reftest, sim_manager):
        """

        :type reftest: pverify.core.sim.PyVerifySimTest
        :type sim_manager: pverify.core.sim.simulation_manager.SimulationManager
        """
        self._reftest = reftest

        self.__sim_manager = sim_manager
        self.__SimPwrAn = SimulatedPwrAn(self, self.__sim_manager)
        self.__sim_manager.add_simulated_probe(self.__SimPwrAn)

    def PowerAnalyzerSetup(self, SyncSource, UpdateRate=1.0, AverageCount=0.0, HarmMaxOrder=50):
        """
        Sets the most commonly used parameters for the power analyzer.

        :param SyncSource: The source the power analyzer shall synchronize on when measuring. This function will
                           automatically take the voltage of the selected source element as synchronization source.
        :type SyncSource: pverify.PwrAnMapping
        :param UpdateRate: The time in s the PA waits between updating the measurements.

                           Simulation: UpdateRate * AverageCount -> Minimum simulation time
        :type UpdateRate: float
        :param AverageCount: The number of samples that are used to calculate the moving average.

                             Averaging is disabled if 0.

                             Simulation: ArmTime + UpdateRate * AverageCount -> Minimum simulation time
        :type AverageCount: int
        :param HarmMaxOrder: The max order of harmonics to return
        :type HarmMaxOrder: int

        Example:

        .. code-block:: python

          self.AI_PA.PowerAnalyzerSetup(SyncSource=mappings.PwrAn_Input,
                                        AverageCount=4,
                                        UpdateRate=1.0)
        """
        if not (HarmMaxOrder >= 0):
            msg = "HarmonicOrders has to be greater or equal than 0"
            raise Exception(msg)
        if not isinstance(SyncSource, PwrAnMapping):
            msg = "Argument SyncSource must be of type 'PwrAnMapping'!"
            raise TypeError(msg)

        self.__SimPwrAn.PowerAnalyzerSetup(SyncSource, UpdateRate, AverageCount, HarmMaxOrder)

    def Arm(self):
        """
        Arms the acquisition of the probe.

        Sets the point in simulation time when the simulated poweranalyzer starts to synchronize to the sync waveform.

        It also sets the minimal simulation duration to: Arm-time + UpdateRate * AverageCount

        Example::

            self.AI_PA.PowerAnalyzerSetup(SyncSource=mappings.PwrAn_Input, UpdateRate=0.02, AverageCount=2)
            ...
            self.AbstractInstruments.Wait(10)
            self.AI_PA.Arm()

        **-> Arm-time: 10ms, UpdateRate=20ms, AverageCount=2 -> Minimal simulation time: 50ms**

        Example:

        .. code-block:: python

          self.AI_PA.Arm(Lab_IntegrationTime=2)
        """
        self.__SimPwrAn.Arm()

    def GetChannel(self, MappingObject):
        """
        Returns a channel object for the probe. The different probe channels can be set up indepentently from each other

        :param MappingObject: The mapping object which defines the netlist setup.
                              Use one of the constants of "config.mappings"
        :type MappingObject: PwrAnMapping
        :return: _PwrAnChannel

        Example:

        .. code-block:: python

          self.AI_PA_Input = self.AI_PA.GetChannel(MappingObject=mappings.PwrAn_Input)
        """
        if isinstance(MappingObject, PwrAnMapping):
            return _PwrAnChannel(
                MappingObject=MappingObject,
                SimPwrAn=self.__SimPwrAn,
                reftest=self._reftest,
                ref_driver=None,
            )

        msg = "An instance of type <PwrAnMapping> has to be passed to this function"
        raise TypeError(msg)


class _PwrAnChannel:
    def __init__(self, MappingObject, SimPwrAn, reftest, ref_driver):
        """
        :type MappingObject: PwrAnMapping
        :type SimPwrAn: SimulatedPwrAn|NoneType
        :type ref_driver: SimpleScope|NoneType
        """
        self.__MappingObject = MappingObject
        self.__reftest = reftest

        self.__SimPwrAn = SimPwrAn
        self.__SimPwrAnChannel = SimPwrAn.GetChannel(MappingObject)

    def ProbeSetup(self, UIMeasurementMode="RMS", LineFilter=None, FrequencyFilter=True):
        """
        Sets the most commonly used parameters for a channel

        :param UIMeasurementMode: The mode how the voltage or current is measured when selecting the 'Voltage'
                                  measurement in method 'GetProbeMeasurement'. Use with: "RMS","DC","MEAN","RMEAN"
        :type UIMeasurementMode: str
        :param LineFilter: The filter bandwidth that is applied to the line the probe measures.
        :type LineFilter: float
        :param FrequencyFilter: Acts as a filter for detecting the zero-crossing of the
                                synchronization source signal more accurately.
        :type FrequencyFilter: bool

        Example:

        .. code-block:: python

          self.AI_PA_Input.ProbeSetup(UIMeasurementMode="RMS",
                                      LineFilter=5500)
        """
        self.__SimPwrAnChannel.ProbeSetup(UIMeasurementMode, LineFilter, FrequencyFilter)

    def GetProbeMeasurement(self, MeasurementItem, **kwargs):
        """
        Returns a specific measurement for the channel.

        :param MeasurementItem: The measurement that is returned.
                                Items:
                                Voltage, Current, Power, ApparentPower, ReactivePower, Lambda,
                                FreqU, FreqI, VoltagePlusPeak, VoltageMinusPeak, CurrentPlusPeak,
                                CurrentMinusPeak, PhiU, PhiI, UThd, IThd, PThd

        :type MeasurementItem: str
        :return: Measured value.
        :rtype: float

        Example:

        .. code-block:: python

          self.rc.add("AvgPin", self.AI_PA_Input.GetProbeMeasurement("AvgPower"))
        """
        return self.__SimPwrAnChannel.GetProbeMeasurement(MeasurementItem)

    def GetProbeHarmonicMeasurement(self, MeasurementItem):
        """
        Returns a specific harmonic measurement for the channel.

        :param MeasurementItem: The measurement that is returned.
                                Items:
                                Voltage, Current, Power, ApparentPower, ReactivePower, Lambda, IHDF, UHDF, PHDF
        :type MeasurementItem: str
        :return: A list of harmonics items is returned ([DC, Fundamental, ... n-th harmonic])
        :rtype: list[float]

        Example:

        .. code-block:: python

          self.rc.add("AvgPin", self.AI_PA_Input.GetProbeMeasurement("AvgPower"))
        """
        return self.__SimPwrAnChannel.GetProbeHarmonicMeasurement(MeasurementItem)
