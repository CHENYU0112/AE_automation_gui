from __future__ import annotations

from pverify.core.sim.simulated_dcsource import SimulatedDCSource
from pverify.core.sim.simulated_source import StimType, Stimulus

from .mappings import DCSourceMapping


class AI_DCSource:
    def __init__(self, reftest, sim_manager):
        """

        :type reftest: pverify.core.sim.PyVerifySimTest
        :type sim_manager: pverify.core.sim.simulation_manager.SimulationManager
        """
        self._reftest = reftest
        self._sim_manager = sim_manager

    def GetChannel(self, MappingObject):
        """
        Returns a channel object for the probe.
        The different probe channels can be set up indepentently from each other.
        A Differential channel can be generated by passing a reference signal in the
        constructor of the used MappingObject

        :param MappingObject: The mapping object which defines the netlist setup.
                              Use one of the constants of "config.mappings"
        :type MappingObject: DCSourceMapping
        :return: _Channel class instance
        :rtype: _DCPwrChannel

        Example:

        .. code-block:: python

          self.DCPwrCh1 = self.AI_DCPwr.GetChannel(MappingObject=mappings.DCPwr_V1)
        """
        if isinstance(MappingObject, DCSourceMapping):
            return _DCPwrChannel(parent=self, MappingObject=MappingObject)

        msg = "An instance of type <DCSourceMapping> has to be passed to this function"
        raise TypeError(msg)


class _DCPwrChannel:
    """
    A Class providing all functionality of a DC Source channel
    """

    def __init__(self, parent, MappingObject):
        """
        :type parent: AI_DCSource
        :type MappingObject: SimpleDcPwr|NoneType
        """
        self.__parent = parent
        self.__MappingObject = MappingObject
        self.__reftest = parent._reftest
        self.__sim_last_level = 0.0

        self.__sim_manager = parent._sim_manager
        """:type : pverify.core.sim.simulation_manager.SimulationManager"""
        self.__simsrc = SimulatedDCSource(self, self.__sim_manager, self.__MappingObject.Sim_ScriptingVars)
        self.__sim_manager.add_simulated_source(self.__simsrc)

    def VoltageLevel(self, Level):
        """
        Applies a voltage at a channel.

        :param Level: The voltage level to set. Negative values switch off the channel.
        :type Level: float
        """
        self.__simsrc.add_stimulus(
            Stimulus(
                self.__simsrc,
                StimType.DCPWR_STATIC,
                self.__sim_manager.current_time,
                {
                    "Level": max(0, float(Level)),
                },
            )
        )
        self.__sim_last_level = max(0, float(Level))

    def Enable(self, enable):
        """
        Enables or disables an already configured channel.
        """
        if enable:
            self.__simsrc.add_stimulus(
                Stimulus(
                    self.__simsrc,
                    StimType.DCPWR_STATIC,
                    self.__sim_manager.current_time,
                    {"Level": max(0, float(self.__sim_last_level))},
                )
            )
        else:
            self.__simsrc.add_stimulus(
                Stimulus(
                    self.__simsrc,
                    StimType.DCPWR_STATIC,
                    self.__sim_manager.current_time,
                    {"Level": 0},
                )
            )
