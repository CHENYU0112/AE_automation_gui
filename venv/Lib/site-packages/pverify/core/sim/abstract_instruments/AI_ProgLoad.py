from __future__ import annotations

from pverify.core.sim.simulated_progload import SimulatedProgLoad
from pverify.core.sim.simulated_source import StimType, Stimulus


class AI_ProgLoad:
    def __init__(self, reftest, MappingObject, sim_manager):
        """

        :type reftest: pverify.core.sim.PyVerifySimTest
        :type MappingObject: pverify.core.sim.abstract_instruments.mappings.ProgLoadMapping
        :type sim_manager: pverify.core.sim.simulation_manager.SimulationManager
        """
        self.__reftest = reftest
        self.__MappingObject = MappingObject

        self._sim_manager = sim_manager
        self._simsrc = SimulatedProgLoad(self, self._sim_manager, MappingObject.Sim_ScriptingVars)
        self._sim_manager.add_simulated_source(self._simsrc)

    def CurrentLoad(self, Level, SlewRateRise=1, SlewRateFall=1, Von=None, Voff=None):
        """
        Enables a static current load.

        :param Level: The current to sink.
        :type Level: float
        :param SlewRateRise: The slew rate of a decreasing current in A/uS. Value 0 means MAX.
        :type SlewRateRise: float
        :param SlewRateFall: The slew rate of an increasing current in A/uS. Value 0 means MAX.
        :type SlewRateFall: float
        :param Von: Voltage at which the load starts sinking current
        :type Von: float
        :param Voff: Voltage at which the load stops sinking current
        :type Voff: float

        Example:

        .. code-block:: python

            # Gets a ProgLoad stimulus instance.
            self.AI_Iload = self.Stimuli.ProgLoad(MappingObject=mappings.Pload_ch1)
            # Sink a static current that is defined in the current parameter variation.
            self.AI_Iload.CurrentLoad(Level=self.Current_variation["Iload"],
                                      SlewRateRise=0.5, SlewRateFall=0.5)

        """
        self._simsrc._init_current_load(Von, Voff)
        self._simsrc.add_stimulus(
            Stimulus(
                self._simsrc,
                StimType.PL_CURRENT_STATIC,
                self._sim_manager.current_time,
                {
                    "SlewRateRise": max(1e-12, float(SlewRateRise)),
                    "SlewRateFall": max(1e-12, float(SlewRateFall)),
                    "Level": max(0, float(Level)),
                },
            )
        )

    def CurrentLoad_Stair(self, Istart, Istep, Nstep, DwellTime, Von=None, Voff=None):
        """
        Sinks a current that is rising step-by-step for a delta value from a starting point with a specific
        number of steps and a specific dwell time at each step.

        :param Istart: The start level of the current stair.
        :type Istart: float
        :param Istep: The delta current that is added for each step.
        :type Istep: float
        :param Nstep: The number of steps.
        :type Nstep: int
        :param DwellTime: The step duration in seconds
        :type DwellTime: float
        :param Von: Voltage at which the load starts sinking current
        :type Von: float
        :param Voff: Voltage at which the load stops sinking current
        :type Voff: float

        Example:

        .. code-block:: python

            # Gets a ProgLoad stimulus instance.
            self.AI_Iload = self.Stimuli.ProgLoad(MappingObject=mappings.Pload_ch1)
            # Sink a current stair starting from 0 and increasing every 500ms and 200 times for 10mA.
            self.AI_Iload.CurrentLoad_Stair(Istart=0, Istep=0.01, Nstep=200, DwellTime=0.5)

        """
        self._simsrc._init_current_load(Von, Voff)
        self._simsrc.add_stimulus(
            Stimulus(
                self._simsrc,
                StimType.PL_CURRENT_STAIR,
                self._sim_manager.current_time,
                {
                    "Istart": max(0, float(Istart)),
                    "Istep": float(Istep),
                    "Nstep": max(1, int(Nstep)),
                    "Tstep": max(1e-12, float(DwellTime)),
                },
            )
        )

    def CurrentLoad_Ramp(self, Istart, Istop, RiseTime, Von=None, Voff=None):
        """
        Sinks a current ramp from Istart to Istop during the time RiseTime.

        :param Istart: The start level of the current ramp.
        :param Istop: The stop level of the current ramp.
        :param RiseTime: The duration of the ramp in seconds
        :param Von: Voltage at which the load starts sinking current
        :type Von: float
        :param Voff: Voltage at which the load stops sinking current
        :type Voff: float

        Example:

        .. code-block:: python

            # Gets a ProgLoad stimulus instance.
            self.AI_Iload = self.Stimuli.ProgLoad(MappingObject=mappings.Pload_ch1)
            # Sink a ramp shaped current starting from 1 A stoping at 2 A with a duration of 2 seconds
            self.AI_Iload.CurrentLoad_Ramp(Istart=1, Istop=2, RiseTime=2)
        """
        self._simsrc._init_current_load(Von, Voff)
        self._simsrc.add_stimulus(
            Stimulus(
                self._simsrc,
                StimType.PL_CURRENT_RAMP,
                self._sim_manager.current_time,
                {
                    "Istart": max(0, float(Istart)),
                    "Istop": max(0, float(Istop)),
                    "RiseTime": max(1e-12, float(RiseTime)),
                },
            )
        )

    def CurrentLoad_Pulsed(
        self,
        Level1,
        Level2,
        DwellTime1,
        DwellTime2,
        SlewRateRise,
        SlewRateFall,
        Von=None,
        Voff=None,
    ):
        """
        Sinks a current that is toggled between two levels with a defined frequency and dutycycle as well as with a
        specific slew rate.

        :param Level1: First current level
        :param Level2: Second current level
        :param DwellTime1: The time in s the first current level is applied
        :param DwellTime2: The time in s the second current level is applied
        :param SlewRateRise: The slew rate of a decreasing current in A/uS. Value 0 means MAX.
        :type SlewRateRise: float
        :param SlewRateFall: The slew rate of an increasing current in A/uS. Value 0 means MAX.
        :type SlewRateFall: float
        :param Von: Voltage at which the load starts sinking current
        :type Von: float
        :param Voff: Voltage at which the load stops sinking current
        :type Voff: float

        Example:

        .. code-block:: python

            # Gets a ProgLoad stimulus instance.
            self.AI_Iload = self.Stimuli.ProgLoad(MappingObject=mappings.Pload_ch1)
            # Sink a current stair starting from 0 and increasing every 500ms and 200 times for 10mA.
            self.AI_Iload.CurrentLoad_Pulsed(Level1=1, Level2=2, DwellTime1=0.5, DwellTime2=0.5,
                                                   SlewRateRise=0.5, SlewRateFall=0.5)
        """
        self._simsrc._init_current_load(Von, Voff)
        self._simsrc.add_stimulus(
            Stimulus(
                self._simsrc,
                StimType.PL_CURRENT_PULSED,
                self._sim_manager.current_time,
                {
                    "Level1": max(0, float(Level1)),
                    "Level2": max(0, float(Level2)),
                    "DwellTime1": max(1e-12, float(DwellTime1)),
                    "DwellTime2": max(1e-12, float(DwellTime2)),
                    "SlewRateRise": max(1e-12, float(SlewRateRise)),
                    "SlewRateFall": max(1e-12, float(SlewRateFall)),
                },
            )
        )

    def VoltageLoad(self, Level, Von=None, Voff=None):
        """
        Sets a static voltage load.

        :param Level: The voltage to set.
        :type Level: float
        :param Von: Voltage at which the load starts sinking current
        :type Von: float
        :param Voff: Voltage at which the load stops sinking current
        :type Voff: float

        Example:

        .. code-block:: python

            # Gets a ProgLoad stimulus instance.
            self.AI_Vload = self.Stimuli.ProgLoad(MappingObject=mappings.Pload_ch1)
            # Sinks a 10V static voltage.
            self.AI_Vload.VoltageLoad(Level=10)
        """
        self._simsrc._init_voltage_load()
        self._simsrc.add_stimulus(
            Stimulus(
                self._simsrc,
                StimType.PL_VOLTAGE_STATIC,
                self._sim_manager.current_time,
                {
                    "Level": float(Level),
                },
            )
        )

    def ResistiveLoad(self, Level, Von=None, Voff=None):
        """
        Enables a static resistive load.

        :param Level: The resistance to set.
        :type Level: float
        :param Von: Voltage at which the load starts sinking current
        :type Von: float
        :param Voff: Voltage at which the load stops sinking current
        :type Voff: float

        Example:

        .. code-block:: python

            # Gets a ProgLoad stimulus instance.
            self.AI_Rload = self.Stimuli.ProgLoad(MappingObject=mappings.Pload_ch1)
            # Set a 10 Ohm resistance.
            self.AI_Rload.ResistiveLoad(Level=10)
        """
        self._simsrc._init_resistive_load()
        self._simsrc.add_stimulus(
            Stimulus(
                self._simsrc,
                StimType.PL_RESISTIVE_STATIC,
                self._sim_manager.current_time,
                {
                    "Level": float(Level),
                },
            )
        )

    def PowerLoad(self, Level, Von=None, Voff=None):
        """
        Sink a static power.

        :param Level: The power to set.
        :type Level: float
        :param Von: Voltage at which the load starts sinking current
        :type Von: float
        :param Voff: Voltage at which the load stops sinking current
        :type Voff: float

        Example:

        .. code-block:: python

            # Gets a ProgLoad stimulus instance.
            self.AI_Pload = self.Stimuli.ProgLoad(MappingObject=mappings.Pload_ch1)
            # Sink a 10 Watt power.
            self.AI_Pload.PowerLoad(Level=10)
        """
        self._simsrc._init_power_load(Von, Voff)
        self._simsrc.add_stimulus(
            Stimulus(
                self._simsrc,
                StimType.PL_POWER_STATIC,
                self._sim_manager.current_time,
                {
                    "Level": float(Level),
                },
            )
        )

    def PowerLoad_Ramp(self, Pstart, Pstop, RiseTime, Von=None, Voff=None):
        """
        Sinks a power ramp from Pstart to Pstop during the time RiseTime.

        :param Pstart: The start level of the power ramp.
        :type Pstart: float
        :param Pstop: The stop level of the power ramp.
        :type Pstop: float
        :param RiseTime: The duration of the ramp in seconds.
        :type RiseTime: float
        :param Von: Voltage at which the load starts sinking current
        :type Von: float
        :param Voff: Voltage at which the load stops sinking current
        :type Voff: float

        Example:

        .. code-block:: python

            # Gets a ProgLoad stimulus instance.
            self.AI_Pload = self.Stimuli.ProgLoad(MappingObject=mappings.Pload_ch1)
            # Set a 10 Ohm resistance.
            self.AI_Pload.PowerLoad_Ramp(Pstart=0, Pstop=25, RiseTime=2)
        """
        self._simsrc._init_power_load(Von, Voff)
        self._simsrc.add_stimulus(
            Stimulus(
                self._simsrc,
                StimType.PL_POWER_RAMP,
                self._sim_manager.current_time,
                {
                    "Pstart": max(0, float(Pstart)),
                    "Pstop": max(0, float(Pstop)),
                    "RiseTime": max(1e-12, float(RiseTime)),
                },
            )
        )

    def PowerLoad_Stair(self, Pstart, Pstep, Nstep, DwellTime, Von=None, Voff=None):
        """
        Sinks a power that is rising step-by-step for a delta value from a starting point with a specific
        number of steps and a specific dwell time at each step.

        :param Pstart: The start level of the power stair.
        :type Pstart: float
        :param Pstep: The delta power that is added for each step.
        :type Pstep: float
        :param Nstep: The number of steps.
        :type Nstep: int
        :param DwellTime: The step duration in seconds
        :type DwellTime: float
        :param Von: Voltage at which the load starts sinking current
        :type Von: float
        :param Voff: Voltage at which the load stops sinking current
        :type Voff: float

        Example:

        .. code-block:: python

            # Gets a ProgLoad stimulus instance.
            self.AI_Pload = self.Stimuli.ProgLoad(MappingObject=mappings.Pload_ch1)
            # Set a 10 Ohm resistance.
            self.AI_Pload.PowerLoad_Stair(Pstart=0, Pstop=25, Nstep=25, DwellTime=0.5)
        """
        self._simsrc._init_power_load(Von, Voff)
        self._simsrc.add_stimulus(
            Stimulus(
                self._simsrc,
                StimType.PL_POWER_STAIR,
                self._sim_manager.current_time,
                {
                    "Pstart": max(0, float(Pstart)),
                    "Pstep": float(Pstep),
                    "Nstep": max(1, int(Nstep)),
                    "Tstep": max(1e-12, float(DwellTime)),
                },
            )
        )

    def LEDLoad_VoIoRd(self, Vo, Io, Rd):
        """
        Sets an LED load by configuring its operating point and the dynamic resistance at the operating point.

        :param Vo: The operating voltage. A negative value turns off the channel.
        :type Vo: float
        :param Io: The operating current. A negative value turns off the channel.
        :type Io: float
        :param Rd: The dynamic resistance at the operating point. A negative or 0 value turns off the channel.
        :type Rd: float
        """
        self._simsrc._init_VfRdN_load()
        self._simsrc.add_stimulus(
            Stimulus(
                self._simsrc,
                StimType.PL_LED_VfRdN,
                self._sim_manager.current_time,
                {
                    "Vf": max(0.0, float(Vo - Io * max(0.0, float(Rd)))),
                    "Rd": max(0.0, float(Rd)),
                    "N": 1.0,
                },
            )
        )

    def LEDLoad_VfRdN(self, Vf, Rd, N):
        """
        Sets an LED load by configuring its forward voltage and dynamic resistance.

        :param Vf: The forward voltage of the LEDs. A negative value turns off the channel.
        :type Vf: float
        :param Rd: The dynamic resistance at the operating point of one LED.
                   Will be multipied with N to get the entire resistance.
                   A negative value or 0 turns off the channel.
        :type Rd: The dynamic resistance at the operating point of one LED.
        :param N: The number of LEDs. Will be multipied with Rd to get the entire resistance.
                  A negative value or 0 turns off the channel.
        :type N: int|float
        """
        self._simsrc._init_VfRdN_load()
        self._simsrc.add_stimulus(
            Stimulus(
                self._simsrc,
                StimType.PL_LED_VfRdN,
                self._sim_manager.current_time,
                {
                    "Vf": max(0.0, float(Vf)),
                    "Rd": max(0.0, float(Rd)),
                    "N": max(1.0, float(N)),
                },
            )
        )
