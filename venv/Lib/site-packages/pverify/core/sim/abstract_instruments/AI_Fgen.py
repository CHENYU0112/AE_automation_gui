from __future__ import annotations

import numpy as np

from pverify.core.sim.simulated_fgen import SimulatedFgen
from pverify.core.sim.simulated_source import StimType, Stimulus

from .mappings import FgenMapping


class AI_Fgen:
    def __init__(self, reftest, sim_manager):
        """

        :type reftest: pverify.core.sim.PyVerifySimTest
        :type sim_manager: pverify.core.sim.simulation_manager.SimulationManager
        """
        self._reftest = reftest
        self.__channels = []
        """:type : list[_FgenChannel]"""
        self._sim_manager = sim_manager

    def FgenSetup(self, InternalTriggerRate=1):
        """
        Common Fgen setup.

        :param InternalTriggerRate: The rate at which the function generator's internal trigger
                                    source produces a trigger, in triggers per second.
        :type InternalTriggerRate: float
        """
        for c in self.__channels:
            c._simsrc.FgenSetup(InternalTriggerRate)

    def SendSoftwareTrigger(self):
        """
        Sends a software trigger, which will cause the function generator to generate output
        if the operation mode is Burst and the trigger source is "Software".
        """
        for c in self.__channels:
            c._simsrc.SendSoftwareTrigger()

    def GetChannel(self, MappingObject):
        """
        Returns a channel object. The different output channels can be set up indepentently from each other

        :param MappingObject: The mapping object which defines the netlist setup.
                              Use one of the constants of "config.mappings"
        :type MappingObject: FgenMapping
        :return: _Channel class instance
        :rtype: _FgenChannel
        """
        if isinstance(MappingObject, FgenMapping):
            chan = _FgenChannel(self, MappingObject)
            if chan not in self.__channels:
                self.__channels.append(chan)
            return chan
        msg = "An instance of type <FgenMapping> has to be passed to this function"
        raise TypeError(msg)


# Common again
class _FgenChannel:
    """
    A Class providing all fuunctionality of a scope channel
    """

    def __init__(self, parent, MappingObject):
        """
        :type parent: AI_Fgen
        :type MappingObject: SimpleDCSource|NoneType
        """
        self.__parent = parent
        self.__MappingObject = MappingObject
        self.__reftest = parent._reftest

        self.__sim_manager = parent._sim_manager
        self._simsrc = SimulatedFgen(self, self.__sim_manager, self.__MappingObject.Sim_ScriptingVars)
        self.__sim_manager.add_simulated_source(self._simsrc)

    def ChannelSetup(self, Impedance=None, OperationMode=None, BurstCount=None, TriggerSource=None):
        """
        Common setup for the Fgen channel

        :param Impedance: The impedance of the output channel. The units are Ohms. 0 means INFINITE.
        :type Impedance: float
        :param OperationMode: The mode that determines how the function generator produces output on a channel.

            - Continuous: When in the Output Generation State, the function generator produces output continuously.
            - Burst: When in the Output Generation State, the function generator produces a burst of waveform cycles
                     based on a trigger condition. A burst consists of a discrete number of waveform cycles.

        :type OperationMode: choice(Continuous,Burst)
        :param BurstCount: The number of waveform cycles that the function generator produces after
                           it receives a trigger.
        :type BurstCount: int
        :param TriggerSource: The trigger source. For simulation only Internal and SW are valid
        :type TriggerSource: choice(Internal,External,SW,TTL0,TTL1,TTL2,TTL3,TTL4,TTL5,TTL6,TTL7,ECL0,ECL1)
        """
        self._simsrc.ChannelSetup(Impedance, OperationMode, BurstCount, TriggerSource)

    def Enable(self):
        """
        Enables the channel.
        """
        self._simsrc.Enable()

    def Disable(self):
        """
        Disables the channel.
        """
        self._simsrc.Disable()

    def Configure_Sine(self, Amplitude, Frequency, StartPhase, DCOffset):
        """
        Configures a sine wave output.

        :param Amplitude: The amplitude of the standard waveform output by the function generator. The units are volts.
        :type Amplitude: float
        :param Frequency: The frequency of the standard waveform output by the function generator. The units are Hertz.
        :type Frequency: float
        :param StartPhase: The frequency of the standard waveform output by the function generator. The units are Hertz.
        :type StartPhase: float
        :param DCOffset: The DC offset of the standard waveform output by the function generator. The units are volts.
        :type DCOffset: float
        """
        self._simsrc.set_current_stimulus(
            Stimulus(
                self._simsrc,
                StimType.FGEN_SINE,
                self.__sim_manager.current_time,
                {
                    "Amplitude": max(0, float(Amplitude)),
                    "Frequency": max(1e-12, float(Frequency)),
                    "StartPhase": max(0, float(StartPhase)),
                    "Offset": float(DCOffset),
                },
            )
        )

    def Configure_Square(self, DutyCycleHigh, Amplitude, Frequency, DCOffset):
        """
        Configures a square wave output.

        :param DutyCycleHigh: The duty cycle for a square waveform. The value is expressed as a percentage.
        :type DutyCycleHigh: float
        :param Amplitude: The amplitude of the standard waveform output by the function generator. The units are volts.
        :type Amplitude: float
        :param Frequency: The frequency of the standard waveform output by the function generator. The units are Hertz.
        :type Frequency: float
        :param DCOffset: The DC offset of the standard waveform output by the function generator. The units are volts.
        :type DCOffset: float
        """
        self._simsrc.set_current_stimulus(
            Stimulus(
                self._simsrc,
                StimType.FGEN_SQUARE,
                self.__sim_manager.current_time,
                {
                    "Amplitude": max(0, float(Amplitude)),
                    "Frequency": max(1e-12, float(Frequency)),
                    "DutyCycleHigh": max(1e-12, float(DutyCycleHigh)),
                    "Offset": float(DCOffset),
                },
            )
        )

    def Configure_DC(self, DCOffset):
        """
        Configures a DC wave output.

        :param DCOffset: The DC offset of the standard waveform output by the function generator. The units are volts.
        :type DCOffset: float
        """
        self._simsrc.set_current_stimulus(
            Stimulus(
                self._simsrc,
                StimType.FGEN_DC,
                self.__sim_manager.current_time,
                {
                    "Offset": float(DCOffset),
                },
            )
        )

    def Configure_Triangle(self, Amplitude, Frequency, DCOffset):
        """
        Configures a triangle wave output.

        :param Amplitude: The amplitude of the standard waveform output by the function generator. The units are volts.
        :type Amplitude: float
        :param Frequency: The frequency of the standard waveform output by the function generator. The units are Hertz.
        :type Frequency: float
        :param DCOffset: The DC offset of the standard waveform output by the function generator. The units are volts.
        :type DCOffset: float
        """
        self._simsrc.set_current_stimulus(
            Stimulus(
                self._simsrc,
                StimType.FGEN_TRIANGLE,
                self.__sim_manager.current_time,
                {
                    "Amplitude": max(0, float(Amplitude)),
                    "Frequency": max(1e-12, float(Frequency)),
                    "Offset": float(DCOffset),
                },
            )
        )

    def Configure_RampUp(self, Amplitude, Frequency, DCOffset):
        """
        Configures a positive ramp waveform output.

        :param Amplitude: The amplitude of the standard waveform output by the function generator. The units are volts.
        :type Amplitude: float
        :param Frequency: The frequency of the standard waveform output by the function generator. The units are Hertz.
        :type Frequency: float
        :param DCOffset: The DC offset of the standard waveform output by the function generator. The units are volts.
        :type DCOffset: float
        """
        self._simsrc.set_current_stimulus(
            Stimulus(
                self._simsrc,
                StimType.FGEN_RAMPUP,
                self.__sim_manager.current_time,
                {
                    "Amplitude": max(0, float(Amplitude)),
                    "Frequency": max(1e-12, float(Frequency)),
                    "Offset": float(DCOffset),
                },
            )
        )

    def Configure_RampDown(self, Amplitude, Frequency, DCOffset):
        """
        Configures a positive ramp waveform output.

        :param Amplitude: The amplitude of the standard waveform output by the function generator. The units are volts.
        :type Amplitude: float
        :param Frequency: The frequency of the standard waveform output by the function generator. The units are Hertz.
        :type Frequency: float
        :param DCOffset: The DC offset of the standard waveform output by the function generator. The units are volts.
        :type DCOffset: float
        """
        self._simsrc.set_current_stimulus(
            Stimulus(
                self._simsrc,
                StimType.FGEN_RAMPDOWN,
                self.__sim_manager.current_time,
                {
                    "Amplitude": max(0, float(Amplitude)),
                    "Frequency": max(1e-12, float(Frequency)),
                    "Offset": float(DCOffset),
                },
            )
        )

    def Configure_Arbitrary(self, Data, Gain, Offset, SampleRate):
        """
        Configures an arbitrary waveform output.

        :param Data: Specifies the array of data to use for the new arbitrary waveform.
                     The array's elements must be normalized between -1.00 and +1.00.
        :type Data: list|np.ndarray
        :param Gain: The gain of the arbitrary waveform the function generator produces. This value is unitless.
        :type Gain: float
        :param Offset: The offset of the arbitrary waveform the function generator produces. The units are volts.
        :type Offset: float
        :param SampleRate: The sample rate of the arbitrary waveforms the function generator produces.
                           The units are samples per second.
        :type SampleRate: float
        """
        self._simsrc.set_current_stimulus(
            Stimulus(
                self._simsrc,
                StimType.FGEN_ARB,
                self.__sim_manager.current_time,
                {
                    "Data": np.array(Data),
                    "Gain": max(0, float(Gain)),
                    "Offset": float(Offset),
                    "SampleRate": max(1e-12, float(SampleRate)),
                },
            )
        )

    def Configure_ArbitraryFromWaveform(self, WaveformObj, SampleRate=None):
        """
        Configures an arbitrary waveform output.

        :param WaveformObj: The waveform to be configured as output
        :type WaveformObj: pverify.Waveform
        :param SampleRate: The sample rate of the arbitrary waveforms the function generator produces.
                           The units are samples per second.
                           If specified the waveform object is sampled to the specified rate
        :type SampleRate: float
        """
        self._simsrc.set_current_stimulus(
            Stimulus(
                self._simsrc,
                StimType.FGEN_ARBWF,
                self.__sim_manager.current_time,
                {
                    "Waveform": WaveformObj,
                    "SampleRate": SampleRate,
                },
            )
        )
