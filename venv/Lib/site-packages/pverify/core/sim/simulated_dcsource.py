from __future__ import annotations

import srd as SRD

from .simulated_source import SimulatedSource, StimType


class SimulatedDCSource(SimulatedSource):
    def __init__(self, ref_AI, manager, ScriptingVars):
        SimulatedSource.__init__(self, ref_AI, manager, ScriptingVars)
        if False:
            from pverify.core.sim.abstract_instruments.AI_DCSource import AI_DCSource

            self.ref_AI = AI_DCSource()

    def get_netlist_entry(self):
        SimulatedSource.get_netlist_entry(self)

        if len(self.sequence):
            config = {}

            config[self.ScriptingVars.stimulustype] = 0  # Voltage source template
            config[self.ScriptingVars.stimulus] = self.create_stimulus_string()

        else:
            config = None
        self.reset()
        return config

    def create_stimulus_string(self):
        """
        This Function expands a list of Stimuli to SRD API Strings
        """
        stim_string = SRD.C(value=0, begin=0, end=0)

        for idx, stim in enumerate(self.sequence):
            if stim.type == StimType.WAIT:
                pass
            elif self._timetable[idx].start >= self._timetable[idx].stop:
                continue
            elif stim.type == StimType.DCPWR_STATIC:
                stim_string += SRD.C(
                    value=stim.config["Level"],
                    begin=self._timetable[idx].start,
                    end=self._timetable[idx].stop,
                )

        return stim_string
