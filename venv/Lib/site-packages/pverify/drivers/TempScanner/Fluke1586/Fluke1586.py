from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .Fluke1586_dllwrap import *


class Fluke1586(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = Fluke1586_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.Initialize(ResourceName, IdQuery, Reset)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.Close(self._vi)
        self.__Initialized = False

    def CalculateTemperature(self, InputValue, RJTemperature):
        """

        :param InputValue:
        :type InputValue:
        :param RJTemperature:
        :type RJTemperature:
        """
        return self._dllwrap.CalculateTemperature(self._vi, InputValue, RJTemperature)

    def ClearAlarms(self):
        """"""
        return self._dllwrap.ClearAlarms(self._vi)

    def ClearStatistics(self):
        """"""
        return self._dllwrap.ClearStatistics(self._vi)

    def ClearTotalizeCount(self):
        """"""
        return self._dllwrap.ClearTotalizeCount(self._vi)

    def DeleteAllReadings(self):
        """"""
        return self._dllwrap.DeleteAllReadings(self._vi)

    def OpenDIOChannel(self):
        """"""
        return self._dllwrap.OpenDIOChannel(self._vi)

    def OperateScanning(self, ScanOperation):
        """

        :param ScanOperation:
        :type ScanOperation:
        """
        return self._dllwrap.OperateScanning(self._vi, ScanOperation)

    def QueryAlarmCondition(self):
        """"""
        return self._dllwrap.QueryAlarmCondition(self._vi)

    def QueryMeasurementFunction(self):
        """"""
        return self._dllwrap.QueryMeasurementFunction(self._vi)

    def DeleteExportData(self, DataOperation):
        """

        :param DataOperation:
        :type DataOperation:
        """
        return self._dllwrap.DeleteExportData(self._vi, DataOperation)

    def DeleteRenameSetupFile(self, FileOperation, StorageLocation):
        """

        :param FileOperation:
        :type FileOperation:
        :param StorageLocation:
        :type StorageLocation:
        """
        return self._dllwrap.DeleteRenameSetupFile(self._vi, FileOperation, StorageLocation)

    def QueryFileStatus(self, FileType, StorageLocation):
        """

        :param FileType:
        :type FileType:
        :param StorageLocation:
        :type StorageLocation:
        """
        return self._dllwrap.QueryFileStatus(self._vi, FileType, StorageLocation)

    def QueryMemoryStatus(self):
        """"""
        return self._dllwrap.QueryMemoryStatus(self._vi)

    def QueryMountState(self):
        """"""
        return self._dllwrap.QueryMountState(self._vi)

    def SaveLoadSetupFile(self, FileOperation, StorageLocation):
        """

        :param FileOperation:
        :type FileOperation:
        :param StorageLocation:
        :type StorageLocation:
        """
        return self._dllwrap.SaveLoadSetupFile(self._vi, FileOperation, StorageLocation)

    def StoreScanData(self, MemoryDevice):
        """

        :param MemoryDevice:
        :type MemoryDevice:
        """
        return self._dllwrap.StoreScanData(self._vi, MemoryDevice)

    def ConfigureABCCoefficients(self, ChannelNumber, SensorType, CoefficientsA, CoefficientsB, CoefficientsC):
        """

        :param ChannelNumber:
        :type ChannelNumber:
        :param SensorType:
        :type SensorType:
        :param CoefficientsA:
        :type CoefficientsA:
        :param CoefficientsB:
        :type CoefficientsB:
        :param CoefficientsC:
        :type CoefficientsC:
        """
        return self._dllwrap.ConfigureABCCoefficients(
            self._vi,
            ChannelNumber,
            SensorType,
            CoefficientsA,
            CoefficientsB,
            CoefficientsC,
        )

    def ConfigureAutomatedTest(
        self,
        EnableInstrumentControl,
        PointNumber,
        ChannelOrder,
        PrimaryReferenceChannel,
        SecondaryReferenceChannel,
        SetpointValue,
        ReferenceStabilityLimit,
        ReferenceToleranceLimit,
        SoakTime,
    ):
        """

        :param EnableInstrumentControl:
        :type EnableInstrumentControl:
        :param PointNumber:
        :type PointNumber:
        :param ChannelOrder:
        :type ChannelOrder:
        :param PrimaryReferenceChannel:
        :type PrimaryReferenceChannel:
        :param SecondaryReferenceChannel:
        :type SecondaryReferenceChannel:
        :param SetpointValue:
        :type SetpointValue:
        :param ReferenceStabilityLimit:
        :type ReferenceStabilityLimit:
        :param ReferenceToleranceLimit:
        :type ReferenceToleranceLimit:
        :param SoakTime:
        :type SoakTime:
        """
        return self._dllwrap.ConfigureAutomatedTest(
            self._vi,
            EnableInstrumentControl,
            PointNumber,
            ChannelOrder,
            PrimaryReferenceChannel,
            SecondaryReferenceChannel,
            SetpointValue,
            ReferenceStabilityLimit,
            ReferenceToleranceLimit,
            SoakTime,
        )

    def ConfigureChangeRate(self, ChannelList, Time):
        """

        :param ChannelList:
        :type ChannelList:
        :param Time:
        :type Time:
        """
        return self._dllwrap.ConfigureChangeRate(self._vi, ChannelList, Time)

    def ConfigureChannelAlarm(
        self,
        AlarmFunctionNumber,
        ChannelList,
        AlarmLimit,
        AlarmPort,
        AlarmType,
        TriggerInputChannel,
    ):
        """

        :param AlarmFunctionNumber:
        :type AlarmFunctionNumber:
        :param ChannelList:
        :type ChannelList:
        :param AlarmLimit:
        :type AlarmLimit:
        :param AlarmPort:
        :type AlarmPort:
        :param AlarmType:
        :type AlarmType:
        :param TriggerInputChannel:
        :type TriggerInputChannel:
        """
        return self._dllwrap.ConfigureChannelAlarm(
            self._vi,
            AlarmFunctionNumber,
            ChannelList,
            AlarmLimit,
            AlarmPort,
            AlarmType,
            TriggerInputChannel,
        )

    def ConfigureChannelMeasurement(
        self,
        ChannelList,
        MeasurementType,
        SampleRate,
        SensorType,
        SensorCharacterization,
        TemperatureUnit,
    ):
        """

        :param ChannelList:
        :type ChannelList:
        :param MeasurementType:
        :type MeasurementType:
        :param SampleRate:
        :type SampleRate:
        :param SensorType:
        :type SensorType:
        :param SensorCharacterization:
        :type SensorCharacterization:
        :param TemperatureUnit:
        :type TemperatureUnit:
        """
        return self._dllwrap.ConfigureChannelMeasurement(
            self._vi,
            ChannelList,
            MeasurementType,
            SampleRate,
            SensorType,
            SensorCharacterization,
            TemperatureUnit,
        )

    def ConfigureChannelScanning(self, ChannelList, AutoResume):
        """

        :param ChannelList:
        :type ChannelList:
        :param AutoResume:
        :type AutoResume:
        """
        return self._dllwrap.ConfigureChannelScanning(self._vi, ChannelList, AutoResume)

    def ConfigureChannel(self, ChannelList, EnableChannel, ChannelDelay, ChannelName):
        """

        :param ChannelList:
        :type ChannelList:
        :param EnableChannel:
        :type EnableChannel:
        :param ChannelDelay:
        :type ChannelDelay:
        :param ChannelName:
        :type ChannelName:
        """
        return self._dllwrap.ConfigureChannel(self._vi, ChannelList, EnableChannel, ChannelDelay, ChannelName)

    def ConfigureDataRecording(self, AutoDataRecording, EnableDataRecording, EnableDataFileSecurity, MemoryDevice):
        """

        :param AutoDataRecording:
        :type AutoDataRecording:
        :param EnableDataRecording:
        :type EnableDataRecording:
        :param EnableDataFileSecurity:
        :type EnableDataFileSecurity:
        :param MemoryDevice:
        :type MemoryDevice:
        """
        return self._dllwrap.ConfigureDataRecording(
            self._vi,
            AutoDataRecording,
            EnableDataRecording,
            EnableDataFileSecurity,
            MemoryDevice,
        )

    def ConfigureDCCurrentRange(self, ChannelList, DCCurrentRange):
        """

        :param ChannelList:
        :type ChannelList:
        :param DCCurrentRange:
        :type DCCurrentRange:
        """
        return self._dllwrap.ConfigureDCCurrentRange(self._vi, ChannelList, DCCurrentRange)

    def ConfigureDCVoltageRange(self, ChannelList, DCVoltageRange):
        """

        :param ChannelList:
        :type ChannelList:
        :param DCVoltageRange:
        :type DCVoltageRange:
        """
        return self._dllwrap.ConfigureDCVoltageRange(self._vi, ChannelList, DCVoltageRange)

    def ConfigureDigitalDataByte(self, OutputDataByte):
        """

        :param OutputDataByte:
        :type OutputDataByte:
        """
        return self._dllwrap.ConfigureDigitalDataByte(self._vi, OutputDataByte)

    def ConfigureFourResistanceRange(self, ChannelList, ResistanceRange):
        """

        :param ChannelList:
        :type ChannelList:
        :param ResistanceRange:
        :type ResistanceRange:
        """
        return self._dllwrap.ConfigureFourResistanceRange(self._vi, ChannelList, ResistanceRange)

    def ConfigureMathChannel(
        self,
        ChannelList,
        MathFunction,
        Coefficients,
        ChannelA,
        ChannelB,
        Exponent,
        SourceList,
    ):
        """

        :param ChannelList:
        :type ChannelList:
        :param MathFunction:
        :type MathFunction:
        :param Coefficients:
        :type Coefficients:
        :param ChannelA:
        :type ChannelA:
        :param ChannelB:
        :type ChannelB:
        :param Exponent:
        :type Exponent:
        :param SourceList:
        :type SourceList:
        """
        return self._dllwrap.ConfigureMathChannel(
            self._vi,
            ChannelList,
            MathFunction,
            Coefficients,
            ChannelA,
            ChannelB,
            Exponent,
            SourceList,
        )

    def ConfigureMonitorChannel(self, ChannelList, EnableChannelMonitoring):
        """

        :param ChannelList:
        :type ChannelList:
        :param EnableChannelMonitoring:
        :type EnableChannelMonitoring:
        """
        return self._dllwrap.ConfigureMonitorChannel(self._vi, ChannelList, EnableChannelMonitoring)

    def ConfigureMxBScaling(self, ChannelList, EnableScaling, Gain, Offset, Unit):
        """

        :param ChannelList:
        :type ChannelList:
        :param EnableScaling:
        :type EnableScaling:
        :param Gain:
        :type Gain:
        :param Offset:
        :type Offset:
        :param Unit:
        :type Unit:
        """
        return self._dllwrap.ConfigureMxBScaling(self._vi, ChannelList, EnableScaling, Gain, Offset, Unit)

    def ConfigureResistanceAtZero(self, ChannelNumber, SensorType, CharacterizationType, Resistance):
        """

        :param ChannelNumber:
        :type ChannelNumber:
        :param SensorType:
        :type SensorType:
        :param CharacterizationType:
        :type CharacterizationType:
        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.ConfigureResistanceAtZero(
            self._vi, ChannelNumber, SensorType, CharacterizationType, Resistance
        )

    def ConfigureResistanceCalculation(self, ChannelList, SensorType, EnableResCalc):
        """

        :param ChannelList:
        :type ChannelList:
        :param SensorType:
        :type SensorType:
        :param EnableResCalc:
        :type EnableResCalc:
        """
        return self._dllwrap.ConfigureResistanceCalculation(self._vi, ChannelList, SensorType, EnableResCalc)

    def ConfigureRPOLYCoefficients(
        self,
        ChannelNumber,
        SensorType,
        PolyCoefficients1,
        PolyCoefficients2,
        PolyCoefficients3,
        PolyCoefficients4,
    ):
        """

        :param ChannelNumber:
        :type ChannelNumber:
        :param SensorType:
        :type SensorType:
        :param PolyCoefficients1:
        :type PolyCoefficients1:
        :param PolyCoefficients2:
        :type PolyCoefficients2:
        :param PolyCoefficients3:
        :type PolyCoefficients3:
        :param PolyCoefficients4:
        :type PolyCoefficients4:
        """
        return self._dllwrap.ConfigureRPOLYCoefficients(
            self._vi,
            ChannelNumber,
            SensorType,
            PolyCoefficients1,
            PolyCoefficients2,
            PolyCoefficients3,
            PolyCoefficients4,
        )

    def ConfigureSPRTCoefficients(
        self,
        ChannelNumber,
        SensorType,
        HighPolyCoefficients,
        LowPolyCoefficients,
        CharacterizationRes,
    ):
        """

        :param ChannelNumber:
        :type ChannelNumber:
        :param SensorType:
        :type SensorType:
        :param HighPolyCoefficients:
        :type HighPolyCoefficients:
        :param LowPolyCoefficients:
        :type LowPolyCoefficients:
        :param CharacterizationRes:
        :type CharacterizationRes:
        """
        return self._dllwrap.ConfigureSPRTCoefficients(
            self._vi,
            ChannelNumber,
            SensorType,
            HighPolyCoefficients,
            LowPolyCoefficients,
            CharacterizationRes,
        )

    def ConfigureThermocoupleCoefficients(self, ChannelNumber, CharacterizationType, Coefficients):
        """

        :param ChannelNumber:
        :type ChannelNumber:
        :param CharacterizationType:
        :type CharacterizationType:
        :param Coefficients:
        :type Coefficients:
        """
        return self._dllwrap.ConfigureThermocoupleCoefficients(
            self._vi, ChannelNumber, CharacterizationType, Coefficients
        )

    def ConfigureThermocoupleMeasurement(
        self,
        ChannelList,
        EnableVoltageCalculation,
        EnableOpenCircuitDetection,
        ReferenceJunctionType,
        RJTemperature,
    ):
        """

        :param ChannelList:
        :type ChannelList:
        :param EnableVoltageCalculation:
        :type EnableVoltageCalculation:
        :param EnableOpenCircuitDetection:
        :type EnableOpenCircuitDetection:
        :param ReferenceJunctionType:
        :type ReferenceJunctionType:
        :param RJTemperature:
        :type RJTemperature:
        """
        return self._dllwrap.ConfigureThermocoupleMeasurement(
            self._vi,
            ChannelList,
            EnableVoltageCalculation,
            EnableOpenCircuitDetection,
            ReferenceJunctionType,
            RJTemperature,
        )

    def ConfigureTotalizeCount(self, EnableTotalizeCounter, EnableTotalizeDebounce, AutoReset):
        """

        :param EnableTotalizeCounter:
        :type EnableTotalizeCounter:
        :param EnableTotalizeDebounce:
        :type EnableTotalizeDebounce:
        :param AutoReset:
        :type AutoReset:
        """
        return self._dllwrap.ConfigureTotalizeCount(self._vi, EnableTotalizeCounter, EnableTotalizeDebounce, AutoReset)

    def ConfigureTrigger(self, TriggerSource, ScanInterval, ScanCount):
        """

        :param TriggerSource:
        :type TriggerSource:
        :param ScanInterval:
        :type ScanInterval:
        :param ScanCount:
        :type ScanCount:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, TriggerSource, ScanInterval, ScanCount)

    def ConfigureTwoResistanceRange(self, ChannelList, ResistanceRange):
        """

        :param ChannelList:
        :type ChannelList:
        :param ResistanceRange:
        :type ResistanceRange:
        """
        return self._dllwrap.ConfigureTwoResistanceRange(self._vi, ChannelList, ResistanceRange)

    def ReadAlarmOutput(self):
        """"""
        return self._dllwrap.ReadAlarmOutput(self._vi)

    def ReadDataFile(self, MemoryDevice):
        """

        :param MemoryDevice:
        :type MemoryDevice:
        """
        return self._dllwrap.ReadDataFile(self._vi, MemoryDevice)

    def ReadDigitalInputChannel(self):
        """"""
        return self._dllwrap.ReadDigitalInputChannel(self._vi)

    def ReadDigitalTotalizePort(self):
        """"""
        return self._dllwrap.ReadDigitalTotalizePort(self._vi)

    def ReadLatestMeasurement(self):
        """"""
        return self._dllwrap.ReadLatestMeasurement(self._vi)

    def ReadMonitorChannel(self):
        """"""
        return self._dllwrap.ReadMonitorChannel(self._vi)

    def ReadScanSweep(self, ReadOperation):
        """

        :param ReadOperation:
        :type ReadOperation:
        """
        return self._dllwrap.ReadScanSweep(self._vi, ReadOperation)

    def ReadStatisticResult(self, ResultType):
        """

        :param ResultType:
        :type ResultType:
        """
        return self._dllwrap.ReadStatisticResult(self._vi, ResultType)

    def ReadTotalizeCount(self):
        """"""
        return self._dllwrap.ReadTotalizeCount(self._vi)

    def ReadMeasurementResult(self):
        """"""
        return self._dllwrap.ReadMeasurementResult(self._vi)

    def WaitforScanComplete(self, Timeout):
        """

        :param Timeout:
        :type Timeout:
        """
        return self._dllwrap.WaitforScanComplete(self._vi, Timeout)

    def Reset(self):
        """"""
        return self._dllwrap.Reset(self._vi)

    def SelfTest(self):
        """"""
        return self._dllwrap.SelfTest(self._vi)

    def ErrorQuery(self):
        """"""
        return self._dllwrap.ErrorQuery(self._vi)

    def ErrorMessage(self, statusCode):
        """

        :param statusCode:
        :type statusCode:
        """
        return self._dllwrap.ErrorMessage(self._vi, statusCode)

    def RevisionQuery(self):
        """"""
        return self._dllwrap.RevisionQuery(self._vi)
