from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import Fluke1586_const as const
from .Fluke1586_const import *


class Fluke1586_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("fl1586_32.dll", "fl1586_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "Fluke1586"

    @property
    def const(self):
        return const

    def Initialize(self, resourceName, IDQuery, reset):
        vi = ViSession()
        status = self.dll.fl1586_Initialize(byref(vi), ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(reset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(vi.value)

    def Close(self, vi):
        status = self.dll.fl1586_Close(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalculateTemperature(self, vi, InputValue, RJTemperature):
        ChannelNumber = ARRAY_ViChar(1024)
        CalculateResult = ViReal64()
        status = self.dll.fl1586_CalculateTemperature(
            ViSession(vi),
            ViReal64(InputValue),
            ViReal64(RJTemperature),
            ChannelNumber,
            byref(CalculateResult),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ChannelNumber = decode(ChannelNumber)
        CalculateResult = float(CalculateResult.value)
        return ChannelNumber, CalculateResult

    def ClearAlarms(self, vi):
        ChannelList = ARRAY_ViChar(1024)
        status = self.dll.fl1586_ClearAlarms(ViSession(vi), ChannelList)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ChannelList)

    def ClearStatistics(self, vi):
        ChannelList = ARRAY_ViChar(1024)
        status = self.dll.fl1586_ClearStatistics(ViSession(vi), ChannelList)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ChannelList)

    def ClearTotalizeCount(self, vi):
        status = self.dll.fl1586_ClearTotalizeCount(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DeleteAllReadings(self, vi):
        status = self.dll.fl1586_DeleteAllReadings(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def OpenDIOChannel(self, vi):
        status = self.dll.fl1586_OpenDIOChannel(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def OperateScanning(self, vi, ScanOperation):
        status = self.dll.fl1586_OperateScanning(ViSession(vi), ViInt32(ScanOperation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryAlarmCondition(self, vi):
        ChannelList = ARRAY_ViChar(1024)
        AlarmCondition = ARRAY_ViInt32(1024)
        status = self.dll.fl1586_QueryAlarmCondition(ViSession(vi), ChannelList, AlarmCondition)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ChannelList = decode(ChannelList)
        return ChannelList, AlarmCondition

    def QueryMeasurementFunction(self, vi):
        ChannelList = ARRAY_ViChar(1024)
        MeasurementFunction = ARRAY_ViChar(1024)
        status = self.dll.fl1586_QueryMeasurementFunction(ViSession(vi), ChannelList, MeasurementFunction)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ChannelList = decode(ChannelList)
        MeasurementFunction = decode(MeasurementFunction)
        return ChannelList, MeasurementFunction

    def DeleteExportData(self, vi, DataOperation):
        FileName = ARRAY_ViChar(1024)
        status = self.dll.fl1586_DeleteExportData(ViSession(vi), ViInt32(DataOperation), FileName)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(FileName)

    def DeleteRenameSetupFile(self, vi, FileOperation, StorageLocation):
        SetupFileName = ARRAY_ViChar(1024)
        status = self.dll.fl1586_DeleteRenameSetupFile(
            ViSession(vi), ViInt32(FileOperation), ViInt32(StorageLocation), SetupFileName
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(SetupFileName)

    def QueryFileStatus(self, vi, FileType, StorageLocation):
        FileName = ARRAY_ViChar(1024)
        Existence = ViBoolean()
        status = self.dll.fl1586_QueryFileStatus(
            ViSession(vi),
            ViInt32(FileType),
            ViInt32(StorageLocation),
            FileName,
            byref(Existence),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        FileName = decode(FileName)
        Existence = bool(Existence.value)
        return FileName, Existence

    def QueryMemoryStatus(self, vi):
        InternalMemoryDataNumber = ViInt32()
        USBMemoryDataNumber = ViInt32()
        InternalMemoryUsed = ViInt32()
        InternalMemoryUnused = ViInt32()
        status = self.dll.fl1586_QueryMemoryStatus(
            ViSession(vi),
            byref(InternalMemoryDataNumber),
            byref(USBMemoryDataNumber),
            byref(InternalMemoryUsed),
            byref(InternalMemoryUnused),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        InternalMemoryDataNumber = int(InternalMemoryDataNumber.value)
        USBMemoryDataNumber = int(USBMemoryDataNumber.value)
        InternalMemoryUsed = int(InternalMemoryUsed.value)
        InternalMemoryUnused = int(InternalMemoryUnused.value)
        return (
            InternalMemoryDataNumber,
            USBMemoryDataNumber,
            InternalMemoryUsed,
            InternalMemoryUnused,
        )

    def QueryMountState(self, vi):
        MountState = ViBoolean()
        status = self.dll.fl1586_QueryMountState(ViSession(vi), byref(MountState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(MountState.value)

    def SaveLoadSetupFile(self, vi, FileOperation, StorageLocation):
        status = self.dll.fl1586_SaveLoadSetupFile(ViSession(vi), ViInt32(FileOperation), ViInt32(StorageLocation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StoreScanData(self, vi, MemoryDevice):
        status = self.dll.fl1586_StoreScanData(ViSession(vi), ViInt32(MemoryDevice))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureABCCoefficients(self, vi, ChannelNumber, SensorType, CoefficientsA, CoefficientsB, CoefficientsC):
        status = self.dll.fl1586_ConfigureABCCoefficients(
            ViSession(vi),
            ViConstString(ChannelNumber),
            ViInt32(SensorType),
            ViReal64(CoefficientsA),
            ViReal64(CoefficientsB),
            ViReal64(CoefficientsC),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAutomatedTest(
        self,
        vi,
        EnableInstrumentControl,
        PointNumber,
        ChannelOrder,
        PrimaryReferenceChannel,
        SecondaryReferenceChannel,
        SetpointValue,
        ReferenceStabilityLimit,
        ReferenceToleranceLimit,
        SoakTime,
    ):
        status = self.dll.fl1586_ConfigureAutomatedTest(
            ViSession(vi),
            ViBoolean(EnableInstrumentControl),
            ViInt32(PointNumber),
            ViInt32(ChannelOrder),
            ViConstString(PrimaryReferenceChannel),
            ViConstString(SecondaryReferenceChannel),
            ViInt32(SetpointValue),
            ViInt32(ReferenceStabilityLimit),
            ViInt32(ReferenceToleranceLimit),
            ViConstString(SoakTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChangeRate(self, vi, ChannelList, Time):
        status = self.dll.fl1586_ConfigureChangeRate(ViSession(vi), ViConstString(ChannelList), ViInt32(Time))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannelAlarm(
        self,
        vi,
        AlarmFunctionNumber,
        ChannelList,
        AlarmLimit,
        AlarmPort,
        AlarmType,
        TriggerInputChannel,
    ):
        status = self.dll.fl1586_ConfigureChannelAlarm(
            ViSession(vi),
            ViInt32(AlarmFunctionNumber),
            ViConstString(ChannelList),
            ViReal64(AlarmLimit),
            ViInt32(AlarmPort),
            ViInt32(AlarmType),
            ViConstString(TriggerInputChannel),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannelMeasurement(
        self,
        vi,
        ChannelList,
        MeasurementType,
        SampleRate,
        SensorType,
        SensorCharacterization,
        TemperatureUnit,
    ):
        status = self.dll.fl1586_ConfigureChannelMeasurement(
            ViSession(vi),
            ViConstString(ChannelList),
            ViInt32(MeasurementType),
            ViInt32(SampleRate),
            ViInt32(SensorType),
            ViInt32(SensorCharacterization),
            ViInt32(TemperatureUnit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannelScanning(self, vi, ChannelList, AutoResume):
        status = self.dll.fl1586_ConfigureChannelScanning(
            ViSession(vi), ViConstString(ChannelList), ViBoolean(AutoResume)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannel(self, vi, ChannelList, EnableChannel, ChannelDelay, ChannelName):
        status = self.dll.fl1586_ConfigureChannel(
            ViSession(vi),
            ViConstString(ChannelList),
            ViBoolean(EnableChannel),
            ViReal64(ChannelDelay),
            ViConstString(ChannelName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDataRecording(
        self,
        vi,
        AutoDataRecording,
        EnableDataRecording,
        EnableDataFileSecurity,
        MemoryDevice,
    ):
        status = self.dll.fl1586_ConfigureDataRecording(
            ViSession(vi),
            ViBoolean(AutoDataRecording),
            ViBoolean(EnableDataRecording),
            ViBoolean(EnableDataFileSecurity),
            ViInt32(MemoryDevice),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDCCurrentRange(self, vi, ChannelList, DCCurrentRange):
        status = self.dll.fl1586_ConfigureDCCurrentRange(
            ViSession(vi), ViConstString(ChannelList), ViInt32(DCCurrentRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDCVoltageRange(self, vi, ChannelList, DCVoltageRange):
        status = self.dll.fl1586_ConfigureDCVoltageRange(
            ViSession(vi), ViConstString(ChannelList), ViInt32(DCVoltageRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalDataByte(self, vi, OutputDataByte):
        status = self.dll.fl1586_ConfigureDigitalDataByte(ViSession(vi), ViInt32(OutputDataByte))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFourResistanceRange(self, vi, ChannelList, ResistanceRange):
        status = self.dll.fl1586_ConfigureFourResistanceRange(
            ViSession(vi), ViConstString(ChannelList), ViInt32(ResistanceRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathChannel(
        self,
        vi,
        ChannelList,
        MathFunction,
        Coefficients,
        ChannelA,
        ChannelB,
        Exponent,
        SourceList,
    ):
        status = self.dll.fl1586_ConfigureMathChannel(
            ViSession(vi),
            ViConstString(ChannelList),
            ViInt32(MathFunction),
            ViConstString(Coefficients),
            ViConstString(ChannelA),
            ViConstString(ChannelB),
            ViReal64(Exponent),
            ViConstString(SourceList),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMonitorChannel(self, vi, ChannelList, EnableChannelMonitoring):
        status = self.dll.fl1586_ConfigureMonitorChannel(
            ViSession(vi), ViConstString(ChannelList), ViBoolean(EnableChannelMonitoring)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMxBScaling(self, vi, ChannelList, EnableScaling, Gain, Offset, Unit):
        status = self.dll.fl1586_ConfigureMxBScaling(
            ViSession(vi),
            ViConstString(ChannelList),
            ViBoolean(EnableScaling),
            ViReal64(Gain),
            ViReal64(Offset),
            ViConstString(Unit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureResistanceAtZero(self, vi, ChannelNumber, SensorType, CharacterizationType, Resistance):
        status = self.dll.fl1586_ConfigureResistanceAtZero(
            ViSession(vi),
            ViConstString(ChannelNumber),
            ViInt32(SensorType),
            ViInt32(CharacterizationType),
            ViReal64(Resistance),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureResistanceCalculation(self, vi, ChannelList, SensorType, EnableResCalc):
        status = self.dll.fl1586_ConfigureResistanceCalculation(
            ViSession(vi),
            ViConstString(ChannelList),
            ViInt32(SensorType),
            ViBoolean(EnableResCalc),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRPOLYCoefficients(
        self,
        vi,
        ChannelNumber,
        SensorType,
        PolyCoefficients1,
        PolyCoefficients2,
        PolyCoefficients3,
        PolyCoefficients4,
    ):
        status = self.dll.fl1586_ConfigureRPOLYCoefficients(
            ViSession(vi),
            ViConstString(ChannelNumber),
            ViInt32(SensorType),
            ViReal64(PolyCoefficients1),
            ViReal64(PolyCoefficients2),
            ViReal64(PolyCoefficients3),
            ViReal64(PolyCoefficients4),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSPRTCoefficients(
        self,
        vi,
        ChannelNumber,
        SensorType,
        HighPolyCoefficients,
        LowPolyCoefficients,
        CharacterizationRes,
    ):
        status = self.dll.fl1586_ConfigureSPRTCoefficients(
            ViSession(vi),
            ViConstString(ChannelNumber),
            ViInt32(SensorType),
            ViReal64(HighPolyCoefficients),
            ViReal64(LowPolyCoefficients),
            ViReal64(CharacterizationRes),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureThermocoupleCoefficients(self, vi, ChannelNumber, CharacterizationType, Coefficients):
        status = self.dll.fl1586_ConfigureThermocoupleCoefficients(
            ViSession(vi),
            ViConstString(ChannelNumber),
            ViInt32(CharacterizationType),
            ViConstString(Coefficients),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureThermocoupleMeasurement(
        self,
        vi,
        ChannelList,
        EnableVoltageCalculation,
        EnableOpenCircuitDetection,
        ReferenceJunctionType,
        RJTemperature,
    ):
        status = self.dll.fl1586_ConfigureThermocoupleMeasurement(
            ViSession(vi),
            ViConstString(ChannelList),
            ViBoolean(EnableVoltageCalculation),
            ViBoolean(EnableOpenCircuitDetection),
            ViInt32(ReferenceJunctionType),
            ViReal64(RJTemperature),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTotalizeCount(self, vi, EnableTotalizeCounter, EnableTotalizeDebounce, AutoReset):
        status = self.dll.fl1586_ConfigureTotalizeCount(
            ViSession(vi),
            ViBoolean(EnableTotalizeCounter),
            ViBoolean(EnableTotalizeDebounce),
            ViBoolean(AutoReset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, vi, TriggerSource, ScanInterval, ScanCount):
        status = self.dll.fl1586_ConfigureTrigger(
            ViSession(vi),
            ViInt32(TriggerSource),
            ViInt32(ScanInterval),
            ViInt32(ScanCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTwoResistanceRange(self, vi, ChannelList, ResistanceRange):
        status = self.dll.fl1586_ConfigureTwoResistanceRange(
            ViSession(vi), ViConstString(ChannelList), ViInt32(ResistanceRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadAlarmOutput(self, vi):
        AlarmOutput = ViInt32()
        status = self.dll.fl1586_ReadAlarmOutput(ViSession(vi), byref(AlarmOutput))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AlarmOutput.value)

    def ReadDataFile(self, vi, MemoryDevice):
        FileName = ARRAY_ViChar(1024)
        FileProperties = ARRAY_ViChar(1024)
        FileConfiguration = ARRAY_ViChar(1024)
        FileData = ARRAY_ViChar(1000000)
        status = self.dll.fl1586_ReadDataFile(
            ViSession(vi),
            ViInt32(MemoryDevice),
            FileName,
            FileProperties,
            FileConfiguration,
            FileData,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        FileName = decode(FileName)
        FileProperties = decode(FileProperties)
        FileConfiguration = decode(FileConfiguration)
        FileData = decode(FileData)
        return FileName, FileProperties, FileConfiguration, FileData

    def ReadDigitalInputChannel(self, vi):
        DigitalInput = ViInt32()
        status = self.dll.fl1586_ReadDigitalInputChannel(ViSession(vi), byref(DigitalInput))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(DigitalInput.value)

    def ReadDigitalTotalizePort(self, vi):
        Result = ViReal64()
        status = self.dll.fl1586_ReadDigitalTotalizePort(ViSession(vi), byref(Result))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Result.value)

    def ReadLatestMeasurement(self, vi):
        MeasurementResult = ARRAY_ViChar(1024)
        status = self.dll.fl1586_ReadLatestMeasurement(ViSession(vi), MeasurementResult)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(MeasurementResult)

    def ReadMonitorChannel(self, vi):
        MonitorData = ViReal64()
        status = self.dll.fl1586_ReadMonitorChannel(ViSession(vi), byref(MonitorData))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(MonitorData.value)

    def ReadScanSweep(self, vi, ReadOperation):
        ChannelNumber = ARRAY_ViChar(1024)
        EarliestScanSweep = ARRAY_ViChar(1024)
        LatestScanSweep = ViReal64()
        ScanSweepNumber = ViInt32()
        status = self.dll.fl1586_ReadScanSweep(
            ViSession(vi),
            ViInt32(ReadOperation),
            ChannelNumber,
            EarliestScanSweep,
            byref(LatestScanSweep),
            byref(ScanSweepNumber),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ChannelNumber = decode(ChannelNumber)
        EarliestScanSweep = decode(EarliestScanSweep)
        LatestScanSweep = float(LatestScanSweep.value)
        ScanSweepNumber = int(ScanSweepNumber.value)
        return ChannelNumber, EarliestScanSweep, LatestScanSweep, ScanSweepNumber

    def ReadStatisticResult(self, vi, ResultType):
        ChannelList = ARRAY_ViChar(1024)
        Result = ARRAY_ViChar(1024)
        Time = ARRAY_ViChar(1024)
        status = self.dll.fl1586_ReadStatisticResult(ViSession(vi), ViInt32(ResultType), ChannelList, Result, Time)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ChannelList = decode(ChannelList)
        Result = decode(Result)
        Time = decode(Time)
        return ChannelList, Result, Time

    def ReadTotalizeCount(self, vi):
        TotalizeCount = ViInt32()
        status = self.dll.fl1586_ReadTotalizeCount(ViSession(vi), byref(TotalizeCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(TotalizeCount.value)

    def ReadMeasurementResult(self, vi):
        MeasurementResult = ARRAY_ViChar(1024)
        status = self.dll.fl1586_ReadMeasurementResult(ViSession(vi), MeasurementResult)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(MeasurementResult)

    def WaitforScanComplete(self, vi, Timeout):
        status = self.dll.fl1586_WaitforScanComplete(ViSession(vi), ViInt32(Timeout))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Reset(self, vi):
        status = self.dll.fl1586_Reset(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SelfTest(self, vi):
        testResult = ViInt32()
        testMessage = ARRAY_ViChar(256)
        status = self.dll.fl1586_SelfTest(ViSession(vi), byref(testResult), testMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        testResult = int(testResult.value)
        testMessage = decode(testMessage)
        return testResult, testMessage

    def ErrorQuery(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(256)
        status = self.dll.fl1586_ErrorQuery(ViSession(vi), byref(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def ErrorMessage(self, vi, statusCode):
        message = ARRAY_ViChar(256)
        status = self.dll.fl1586_ErrorMessage(ViSession(vi), ViStatus(statusCode), message)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(message)

    def RevisionQuery(self, vi):
        driverRev = ARRAY_ViChar(256)
        instrRev = ARRAY_ViChar(256)
        status = self.dll.fl1586_RevisionQuery(ViSession(vi), driverRev, instrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        driverRev = decode(driverRev)
        instrRev = decode(instrRev)
        return driverRev, instrRev
