from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import AgRfSigGen_const as const
from .AgRfSigGen_const import *


class AgRfSigGen_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("AgRfSigGen.dll", "AgRfSigGen_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "AgRfSigGen"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.AgRfSigGen_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.AgRfSigGen_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.AgRfSigGen_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.AgRfSigGen_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.AgRfSigGen_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        status = self.dll.AgRfSigGen_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.AgRfSigGen_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        status = self.dll.AgRfSigGen_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.AgRfSigGen_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.AgRfSigGen_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.AgRfSigGen_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.AgRfSigGen_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.AgRfSigGen_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.AgRfSigGen_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.AgRfSigGen_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.AgRfSigGen_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.AgRfSigGen_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.AgRfSigGen_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.AgRfSigGen_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.AgRfSigGen_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        status = self.dll.AgRfSigGen_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgRfSigGen_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgRfSigGen_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgRfSigGen_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgRfSigGen_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgRfSigGen_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureALCEnabled(self, Vi, ALCEnabled):
        status = self.dll.AgRfSigGen_ConfigureALCEnabled(ViSession(Vi), ViBoolean(ALCEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRF(self, Vi, Frequency, PowerLevel):
        status = self.dll.AgRfSigGen_ConfigureRF(ViSession(Vi), ViReal64(Frequency), ViReal64(PowerLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAMEnabled(self, Vi, Enabled):
        status = self.dll.AgRfSigGen_ConfigureAMEnabled(ViSession(Vi), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAMExternalCoupling(self, Vi, Coupling):
        status = self.dll.AgRfSigGen_ConfigureAMExternalCoupling(ViSession(Vi), ViInt32(Coupling))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMEnabled(self, Vi, Enabled):
        status = self.dll.AgRfSigGen_ConfigureFMEnabled(ViSession(Vi), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMExternalCoupling(self, Vi, Coupling):
        status = self.dll.AgRfSigGen_ConfigureFMExternalCoupling(ViSession(Vi), ViInt32(Coupling))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePMEnabled(self, Vi, Enabled):
        status = self.dll.AgRfSigGen_ConfigurePMEnabled(ViSession(Vi), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePMExternalCoupling(self, Vi, Coupling):
        status = self.dll.AgRfSigGen_ConfigurePMExternalCoupling(ViSession(Vi), ViInt32(Coupling))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAnalogModulationSourceName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgRfSigGen_GetAnalogModulationSourceName(
            ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def ConfigureAM(self, Vi, Source, Scaling, Depth):
        status = self.dll.AgRfSigGen_ConfigureAM(
            ViSession(Vi), ViConstString(Source), ViInt32(Scaling), ViReal64(Depth)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFM(self, Vi, Source, Deviation):
        status = self.dll.AgRfSigGen_ConfigureFM(ViSession(Vi), ViConstString(Source), ViReal64(Deviation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePM(self, Vi, Source, Deviation):
        status = self.dll.AgRfSigGen_ConfigurePM(ViSession(Vi), ViConstString(Source), ViReal64(Deviation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseModulationEnabled(self, Vi, Enabled):
        status = self.dll.AgRfSigGen_ConfigurePulseModulationEnabled(ViSession(Vi), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseModulationSource(self, Vi, Source):
        status = self.dll.AgRfSigGen_ConfigurePulseModulationSource(ViSession(Vi), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseModulationExternalPolarity(self, Vi, Polarity):
        status = self.dll.AgRfSigGen_ConfigurePulseModulationExternalPolarity(ViSession(Vi), ViInt32(Polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFGeneratorName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgRfSigGen_GetLFGeneratorName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def SetActiveLFGenerator(self, Vi, ActiveLFGenerator):
        status = self.dll.AgRfSigGen_SetActiveLFGenerator(ViSession(Vi), ViConstString(ActiveLFGenerator))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLFGenerator(self, Vi, Frequency, Waveform):
        status = self.dll.AgRfSigGen_ConfigureLFGenerator(ViSession(Vi), ViReal64(Frequency), ViInt32(Waveform))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLFGeneratorOutput(self, Vi, Amplitude, Enabled):
        status = self.dll.AgRfSigGen_ConfigureLFGeneratorOutput(ViSession(Vi), ViReal64(Amplitude), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulse(self, Vi, PulseTriggerSource, PulseWidth, GatingEnabled):
        status = self.dll.AgRfSigGen_ConfigurePulse(
            ViSession(Vi),
            ViInt32(PulseTriggerSource),
            ViReal64(PulseWidth),
            ViBoolean(GatingEnabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseExternalTrigger(self, Vi, Slope, Delay):
        status = self.dll.AgRfSigGen_ConfigurePulseExternalTrigger(ViSession(Vi), ViInt32(Slope), ViReal64(Delay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseDouble(self, Vi, Enabled, Delay):
        status = self.dll.AgRfSigGen_ConfigurePulseDouble(ViSession(Vi), ViBoolean(Enabled), ViReal64(Delay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseOutput(self, Vi, Polarity, Enabled):
        status = self.dll.AgRfSigGen_ConfigurePulseOutput(ViSession(Vi), ViInt32(Polarity), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencySweepTime(self, Vi, Time):
        status = self.dll.AgRfSigGen_ConfigureFrequencySweepTime(ViSession(Vi), ViReal64(Time))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerSweepTime(self, Vi, Time):
        status = self.dll.AgRfSigGen_ConfigurePowerSweepTime(ViSession(Vi), ViReal64(Time))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SelectList(self, Vi, Name):
        status = self.dll.AgRfSigGen_SelectList(ViSession(Vi), ViConstString(Name))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyStepDwell(self, Vi, SingleStepEnabled, Dwell):
        status = self.dll.AgRfSigGen_ConfigureFrequencyStepDwell(
            ViSession(Vi), ViBoolean(SingleStepEnabled), ViReal64(Dwell)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyStepStartStop(self, Vi, Start, Stop, Scaling, StepSize):
        status = self.dll.AgRfSigGen_ConfigureFrequencyStepStartStop(
            ViSession(Vi),
            ViReal64(Start),
            ViReal64(Stop),
            ViInt32(Scaling),
            ViReal64(StepSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetFrequencyStep(self, Vi):
        status = self.dll.AgRfSigGen_ResetFrequencyStep(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencySweepCenterSpan(self, Vi, Center, Span):
        status = self.dll.AgRfSigGen_ConfigureFrequencySweepCenterSpan(ViSession(Vi), ViReal64(Center), ViReal64(Span))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencySweepStartStop(self, Vi, Start, Stop):
        status = self.dll.AgRfSigGen_ConfigureFrequencySweepStartStop(ViSession(Vi), ViReal64(Start), ViReal64(Stop))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearAllLists(self, Vi):
        status = self.dll.AgRfSigGen_ClearAllLists(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureListDwell(self, Vi, SingleStepEnabled, Dwell):
        status = self.dll.AgRfSigGen_ConfigureListDwell(ViSession(Vi), ViBoolean(SingleStepEnabled), ViReal64(Dwell))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CreateFrequencyList(self, Vi, Name, Length):
        Frequency = ARRAY_ViReal64(Length)
        status = self.dll.AgRfSigGen_CreateFrequencyList(ViSession(Vi), ViConstString(Name), ViInt32(Length), Frequency)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Frequency)

    def CreateFrequencyPowerList(self, Vi, Name, Length):
        Frequency = ARRAY_ViReal64(Length)
        Power = ARRAY_ViReal64(Length)
        status = self.dll.AgRfSigGen_CreateFrequencyPowerList(
            ViSession(Vi), ViConstString(Name), ViInt32(Length), Frequency, Power
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Frequency = list(Frequency)
        Power = list(Power)
        return Frequency, Power

    def CreatePowerList(self, Vi, Name, Length):
        Power = ARRAY_ViReal64(Length)
        status = self.dll.AgRfSigGen_CreatePowerList(ViSession(Vi), ViConstString(Name), ViInt32(Length), Power)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Power)

    def ResetList(self, Vi):
        status = self.dll.AgRfSigGen_ResetList(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerStepDwell(self, Vi, SingleStepEnabled, Dwell):
        status = self.dll.AgRfSigGen_ConfigurePowerStepDwell(
            ViSession(Vi), ViBoolean(SingleStepEnabled), ViReal64(Dwell)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerStepStartStop(self, Vi, Start, Stop, StepSize):
        status = self.dll.AgRfSigGen_ConfigurePowerStepStartStop(
            ViSession(Vi), ViReal64(Start), ViReal64(Stop), ViReal64(StepSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetPowerStep(self, Vi):
        status = self.dll.AgRfSigGen_ResetPowerStep(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerSweepStartStop(self, Vi, Start, Stop):
        status = self.dll.AgRfSigGen_ConfigurePowerSweepStartStop(ViSession(Vi), ViReal64(Start), ViReal64(Stop))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSweep(self, Vi, Mode, TriggerSource):
        status = self.dll.AgRfSigGen_ConfigureSweep(ViSession(Vi), ViInt32(Mode), ViInt32(TriggerSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureIQEnabled(self, Vi, Enabled):
        status = self.dll.AgRfSigGen_ConfigureIQEnabled(ViSession(Vi), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureIQImpairmentEnabled(self, Vi, Enabled):
        status = self.dll.AgRfSigGen_ConfigureIQImpairmentEnabled(ViSession(Vi), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrateIQ(self, Vi):
        status = self.dll.AgRfSigGen_CalibrateIQ(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureIQ(self, Vi, Source, SwapEnabled):
        status = self.dll.AgRfSigGen_ConfigureIQ(ViSession(Vi), ViInt32(Source), ViBoolean(SwapEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureIQImpairment(self, Vi, IOffset, QOffset, Ratio, Skew):
        status = self.dll.AgRfSigGen_ConfigureIQImpairment(
            ViSession(Vi),
            ViReal64(IOffset),
            ViReal64(QOffset),
            ViReal64(Ratio),
            ViReal64(Skew),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SelectArbWaveform(self, Vi, Name):
        status = self.dll.AgRfSigGen_SelectArbWaveform(ViSession(Vi), ViConstString(Name))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureArbTriggerSource(self, Vi, Source):
        status = self.dll.AgRfSigGen_ConfigureArbTriggerSource(ViSession(Vi), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureArbExternalTriggerSlope(self, Vi, Slope):
        status = self.dll.AgRfSigGen_ConfigureArbExternalTriggerSlope(ViSession(Vi), ViInt32(Slope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearAllArbWaveforms(self, Vi):
        status = self.dll.AgRfSigGen_ClearAllArbWaveforms(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureArb(self, Vi, ClockFrequency, FilterFrequency):
        status = self.dll.AgRfSigGen_ConfigureArb(ViSession(Vi), ViReal64(ClockFrequency), ViReal64(FilterFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryArbWaveformCapabilities(self, Vi):
        MaxNumberWaveforms = ViInt32()
        WaveformQuantum = ViInt32()
        MinWaveformSize = ViInt32()
        MaxWaveformSize = ViInt32()
        status = self.dll.AgRfSigGen_QueryArbWaveformCapabilities(
            ViSession(Vi),
            byref(MaxNumberWaveforms),
            byref(WaveformQuantum),
            byref(MinWaveformSize),
            byref(MaxWaveformSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MaxNumberWaveforms = int(MaxNumberWaveforms.value)
        WaveformQuantum = int(WaveformQuantum.value)
        MinWaveformSize = int(MinWaveformSize.value)
        MaxWaveformSize = int(MaxWaveformSize.value)
        return MaxNumberWaveforms, WaveformQuantum, MinWaveformSize, MaxWaveformSize

    def WriteArbWaveform(self, Vi, Name, NumberOfSamples, MoreDataPending):
        IData = ARRAY_ViReal64(NumberOfSamples)
        QData = ARRAY_ViReal64(NumberOfSamples)
        status = self.dll.AgRfSigGen_WriteArbWaveform(
            ViSession(Vi),
            ViConstString(Name),
            ViInt32(NumberOfSamples),
            IData,
            QData,
            ViBoolean(MoreDataPending),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        IData = list(IData)
        QData = list(QData)
        return IData, QData

    def SelectDigitalModulationBaseStandard(self, Vi, Name):
        status = self.dll.AgRfSigGen_SelectDigitalModulationBaseStandard(ViSession(Vi), ViConstString(Name))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalModulationBaseDataSource(self, Vi, Source):
        status = self.dll.AgRfSigGen_ConfigureDigitalModulationBaseDataSource(ViSession(Vi), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalModulationBasePRBSType(self, Vi, Type):
        status = self.dll.AgRfSigGen_ConfigureDigitalModulationBasePRBSType(ViSession(Vi), ViInt32(Type))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SelectDigitalModulationBaseBitSequence(self, Vi, Name):
        status = self.dll.AgRfSigGen_SelectDigitalModulationBaseBitSequence(ViSession(Vi), ViConstString(Name))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearAllDigitalModulationBaseBitSequences(self, Vi):
        status = self.dll.AgRfSigGen_ClearAllDigitalModulationBaseBitSequences(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalModulationBaseClockSource(self, Vi, Source, Type):
        status = self.dll.AgRfSigGen_ConfigureDigitalModulationBaseClockSource(
            ViSession(Vi), ViInt32(Source), ViInt32(Type)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def WriteDigitalModulationBaseBitSequence(self, Vi, Name, BitCount, Sequence, MoreDataPending):
        status = self.dll.AgRfSigGen_WriteDigitalModulationBaseBitSequence(
            ViSession(Vi),
            ViConstString(Name),
            ViInt32(BitCount),
            ViConstString(Sequence),
            ViBoolean(MoreDataPending),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SelectCDMAStandard(self, Vi, Name):
        status = self.dll.AgRfSigGen_SelectCDMAStandard(ViSession(Vi), ViConstString(Name))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCDMAClockSource(self, Vi, Source):
        status = self.dll.AgRfSigGen_ConfigureCDMAClockSource(ViSession(Vi), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCDMATriggerSource(self, Vi, Source):
        status = self.dll.AgRfSigGen_ConfigureCDMATriggerSource(ViSession(Vi), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCDMAExternalTriggerSlope(self, Vi, Slope):
        status = self.dll.AgRfSigGen_ConfigureCDMAExternalTriggerSlope(ViSession(Vi), ViInt32(Slope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SelectCDMATestModel(self, Vi, Name):
        status = self.dll.AgRfSigGen_SelectCDMATestModel(ViSession(Vi), ViConstString(Name))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SelectTDMAStandard(self, Vi, Name):
        status = self.dll.AgRfSigGen_SelectTDMAStandard(ViSession(Vi), ViConstString(Name))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTDMATriggerSource(self, Vi, Source):
        status = self.dll.AgRfSigGen_ConfigureTDMATriggerSource(ViSession(Vi), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTDMAExternalTriggerSlope(self, Vi, Slope):
        status = self.dll.AgRfSigGen_ConfigureTDMAExternalTriggerSlope(ViSession(Vi), ViInt32(Slope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SelectTDMAFrame(self, Vi, Name):
        status = self.dll.AgRfSigGen_SelectTDMAFrame(ViSession(Vi), ViConstString(Name))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTDMAClockSource(self, Vi, Source, Type):
        status = self.dll.AgRfSigGen_ConfigureTDMAClockSource(ViSession(Vi), ViInt32(Source), ViInt32(Type))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureALC(self, Vi, Source, Bandwidth):
        status = self.dll.AgRfSigGen_ConfigureALC(ViSession(Vi), ViInt32(Source), ViReal64(Bandwidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureReferenceOscillator(self, Vi, Source, Frequency):
        status = self.dll.AgRfSigGen_ConfigureReferenceOscillator(ViSession(Vi), ViInt32(Source), ViReal64(Frequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_ConfigureArmAlarm(self, Vi, AlarmName, Enabled, TimeSeconds, TimeFraction, Period, RepeatCount):
        status = self.dll.AgRfSigGen_IviLxiSync_ConfigureArmAlarm(
            ViSession(Vi),
            ViConstString(AlarmName),
            ViBoolean(Enabled),
            ViReal64(TimeSeconds),
            ViReal64(TimeFraction),
            ViReal64(Period),
            ViInt32(RepeatCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_AddArmAlarm(self, Vi, AlarmName):
        status = self.dll.AgRfSigGen_IviLxiSync_AddArmAlarm(ViSession(Vi), ViConstString(AlarmName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_DisableAllArmAlarms(self, Vi):
        status = self.dll.AgRfSigGen_IviLxiSync_DisableAllArmAlarms(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveArmAlarm(self, Vi, AlarmName):
        status = self.dll.AgRfSigGen_IviLxiSync_RemoveArmAlarm(ViSession(Vi), ViConstString(AlarmName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveAllCustomArmAlarms(self, Vi):
        status = self.dll.AgRfSigGen_IviLxiSync_RemoveAllCustomArmAlarms(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_ConfigureArmSource(self, Vi, SourceName, Enabled, Detection):
        status = self.dll.AgRfSigGen_IviLxiSync_ConfigureArmSource(
            ViSession(Vi),
            ViConstString(SourceName),
            ViBoolean(Enabled),
            ViInt32(Detection),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_AddArmSource(self, Vi, SourceName):
        status = self.dll.AgRfSigGen_IviLxiSync_AddArmSource(ViSession(Vi), ViConstString(SourceName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_DisableAllArmSources(self, Vi):
        status = self.dll.AgRfSigGen_IviLxiSync_DisableAllArmSources(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveArmSource(self, Vi, SourceName):
        status = self.dll.AgRfSigGen_IviLxiSync_RemoveArmSource(ViSession(Vi), ViConstString(SourceName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveAllCustomArmSources(self, Vi):
        status = self.dll.AgRfSigGen_IviLxiSync_RemoveAllCustomArmSources(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_ConfigureTriggerAlarm(self, Vi, AlarmName, TimeSeconds, TimeFraction, Period, RepeatCount):
        status = self.dll.AgRfSigGen_IviLxiSync_ConfigureTriggerAlarm(
            ViSession(Vi),
            ViConstString(AlarmName),
            ViReal64(TimeSeconds),
            ViReal64(TimeFraction),
            ViReal64(Period),
            ViInt32(RepeatCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_AddTriggerAlarm(self, Vi, AlarmName):
        status = self.dll.AgRfSigGen_IviLxiSync_AddTriggerAlarm(ViSession(Vi), ViConstString(AlarmName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_DisableAllTriggerAlarms(self, Vi):
        status = self.dll.AgRfSigGen_IviLxiSync_DisableAllTriggerAlarms(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveTriggerAlarm(self, Vi, AlarmName):
        status = self.dll.AgRfSigGen_IviLxiSync_RemoveTriggerAlarm(ViSession(Vi), ViConstString(AlarmName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveAllTriggerAlarms(self, Vi):
        status = self.dll.AgRfSigGen_IviLxiSync_RemoveAllTriggerAlarms(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_ConfigureTriggerSource(self, Vi, SourceName, Delay, Detection):
        status = self.dll.AgRfSigGen_IviLxiSync_ConfigureTriggerSource(
            ViSession(Vi), ViConstString(SourceName), ViReal64(Delay), ViInt32(Detection)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_AddTriggerSource(self, Vi, SourceName):
        status = self.dll.AgRfSigGen_IviLxiSync_AddTriggerSource(ViSession(Vi), ViConstString(SourceName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveTriggerSource(self, Vi, SourceName):
        status = self.dll.AgRfSigGen_IviLxiSync_RemoveTriggerSource(ViSession(Vi), ViConstString(SourceName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveAllCustomTriggerSources(self, Vi):
        status = self.dll.AgRfSigGen_IviLxiSync_RemoveAllCustomTriggerSources(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_ConfigureEvent(self, Vi, EventName, DriveMode, Source, DestinationPath, Slope):
        status = self.dll.AgRfSigGen_IviLxiSync_ConfigureEvent(
            ViSession(Vi),
            ViConstString(EventName),
            ViInt32(DriveMode),
            ViConstString(Source),
            ViConstString(DestinationPath),
            ViInt32(Slope),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_AddEvent(self, Vi, EventName):
        status = self.dll.AgRfSigGen_IviLxiSync_AddEvent(ViSession(Vi), ViConstString(EventName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_DisableAllEvents(self, Vi):
        status = self.dll.AgRfSigGen_IviLxiSync_DisableAllEvents(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveEvent(self, Vi, EventName):
        status = self.dll.AgRfSigGen_IviLxiSync_RemoveEvent(ViSession(Vi), ViConstString(EventName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveAllCustomEvents(self, Vi):
        status = self.dll.AgRfSigGen_IviLxiSync_RemoveAllCustomEvents(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SendSoftwareTrigger(self, Vi):
        status = self.dll.AgRfSigGen_SendSoftwareTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisableAllModulation(self, Vi):
        status = self.dll.AgRfSigGen_DisableAllModulation(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsSettled(self, Vi):
        Done = ViBoolean()
        status = self.dll.AgRfSigGen_IsSettled(ViSession(Vi), byref(Done))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Done.value)

    def WaitUntilSettled(self, Vi, MaxTimeMilliseconds):
        status = self.dll.AgRfSigGen_WaitUntilSettled(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputEnabled(self, Vi, OutputEnabled):
        status = self.dll.AgRfSigGen_ConfigureOutputEnabled(ViSession(Vi), ViBoolean(OutputEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemClearIO(self, Vi):
        status = self.dll.AgRfSigGen_SystemClearIO(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemReadBytes(self, Vi, ValBufferSize):
        Val = ARRAY_ViByte(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgRfSigGen_SystemReadBytes(ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgRfSigGen_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def SystemWriteBytes(self, Vi, BufferBufferSize):
        Buffer = ARRAY_ViByte(BufferBufferSize)
        status = self.dll.AgRfSigGen_SystemWriteBytes(ViSession(Vi), ViInt32(BufferBufferSize), Buffer)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Buffer

    def SystemWriteString(self, Vi, DataBufferSize, Data):
        status = self.dll.AgRfSigGen_SystemWriteString(ViSession(Vi), ViInt32(DataBufferSize), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def viWrite(self, Vi, Count):
        Buffer = ARRAY_ViByte(Count)
        ReturnCount = ViInt64()
        status = self.dll.AgRfSigGen_viWrite(ViSession(Vi), ViInt64(Count), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def ConfigurePulseInternalTrigger(self, Vi, Period):
        status = self.dll.AgRfSigGen_ConfigurePulseInternalTrigger(ViSession(Vi), ViReal64(Period))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_ClearEventLog(self, Vi):
        status = self.dll.AgRfSigGen_IviLxiSync_ClearEventLog(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_GetNextEventLogEntry(self, Vi, LogEntryBufferSize):
        LogEntry = ARRAY_ViChar(LogEntryBufferSize)
        status = self.dll.AgRfSigGen_IviLxiSync_GetNextEventLogEntry(
            ViSession(Vi), ViInt32(LogEntryBufferSize), LogEntry
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(LogEntry)

    def IviLxiSync_GetSystemTime(self, Vi):
        TimeSeconds = ViReal64()
        TimeFractional = ViReal64()
        status = self.dll.AgRfSigGen_IviLxiSync_GetSystemTime(ViSession(Vi), byref(TimeSeconds), byref(TimeFractional))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TimeSeconds = float(TimeSeconds.value)
        TimeFractional = float(TimeFractional.value)
        return TimeSeconds, TimeFractional

    def AnalogModulationDisableAll(self, Vi):
        status = self.dll.AgRfSigGen_AnalogModulationDisableAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalModulationArbWriteWaveformToNVMemory(self, Vi, Name, IDataBufferSize, QDataBufferSize, MoreDataPending):
        IData = ARRAY_ViReal64(IDataBufferSize)
        IDataActualSize = ViInt32()
        QData = ARRAY_ViReal64(QDataBufferSize)
        QDataActualSize = ViInt32()
        status = self.dll.AgRfSigGen_DigitalModulationArbWriteWaveformToNVMemory(
            ViSession(Vi),
            ViConstString(Name),
            ViInt32(IDataBufferSize),
            IData,
            byref(IDataActualSize),
            ViInt32(QDataBufferSize),
            QData,
            byref(QDataActualSize),
            ViBoolean(MoreDataPending),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        IData = list(IData)
        IDataActualSize = int(IDataActualSize.value)
        QData = list(QData)
        QDataActualSize = int(QDataActualSize.value)
        return IData, IDataActualSize, QData, QDataActualSize

    def StatusPreset(self, Vi):
        status = self.dll.AgRfSigGen_StatusPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusConfigureServiceRequest(self, Vi, Reason):
        status = self.dll.AgRfSigGen_StatusConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusClear(self, Vi):
        status = self.dll.AgRfSigGen_StatusClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusGetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.AgRfSigGen_StatusGetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatusSetRegister(self, Vi, Register, SubRegister, Val):
        status = self.dll.AgRfSigGen_StatusSetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        status = self.dll.AgRfSigGen_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemSaveState(self, Vi, Identifier):
        status = self.dll.AgRfSigGen_SystemSaveState(ViSession(Vi), ViConstString(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRecallState(self, Vi, Identifier):
        status = self.dll.AgRfSigGen_SystemRecallState(ViSession(Vi), ViConstString(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemEnableLocalControls(self, Vi):
        status = self.dll.AgRfSigGen_SystemEnableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemDisableLocalControls(self, Vi):
        status = self.dll.AgRfSigGen_SystemDisableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemIoWrite(self, Vi, CommandString):
        status = self.dll.AgRfSigGen_SystemIoWrite(ViSession(Vi), ViConstString(CommandString))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemIoRead(self, Vi, Size):
        Value = ARRAY_ViChar(Size)
        ActualSize = ViInt32()
        status = self.dll.AgRfSigGen_SystemIoRead(ViSession(Vi), ViInt32(Size), Value, byref(ActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Value = decode(Value)
        ActualSize = int(ActualSize.value)
        return Value, ActualSize

    def PtpServoAlgorithmConfigure(
        self,
        Vi,
        Asymmetry,
        CoarseFineThreshold,
        CoarseProportionalConstant,
        CoarseIntegralConstant,
        FineProportionalConstant,
        FineIntegralConstant,
        OutlierMaxDiscardCount,
        OutlierThreshold,
        SteeringThreshold,
    ):
        status = self.dll.AgRfSigGen_PtpServoAlgorithmConfigure(
            ViSession(Vi),
            ViReal64(Asymmetry),
            ViReal64(CoarseFineThreshold),
            ViReal64(CoarseProportionalConstant),
            ViReal64(CoarseIntegralConstant),
            ViReal64(FineProportionalConstant),
            ViReal64(FineIntegralConstant),
            ViInt32(OutlierMaxDiscardCount),
            ViReal64(OutlierThreshold),
            ViReal64(SteeringThreshold),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PtpServoAlgorithmLogReadAll(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.AgRfSigGen_PtpServoAlgorithmLogReadAll(ViSession(Vi), ViInt32(RetValBufferSize), RetVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def PtpServoAlgorithmLogSetCircularReferenceIndex(self, Vi):
        status = self.dll.AgRfSigGen_PtpServoAlgorithmLogSetCircularReferenceIndex(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PtpServoAlgorithmLogClearAll(self, Vi):
        status = self.dll.AgRfSigGen_PtpServoAlgorithmLogClearAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PtpServoAlgorithmLogGetIndexedEntry(self, Vi, Index, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.AgRfSigGen_PtpServoAlgorithmLogGetIndexedEntry(
            ViSession(Vi), ViInt32(Index), ViInt32(RetValBufferSize), RetVal
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def PtpServoAlgorithmLogGetNextEntry(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.AgRfSigGen_PtpServoAlgorithmLogGetNextEntry(ViSession(Vi), ViInt32(RetValBufferSize), RetVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def PtpServoAlgorithmLogGetStatistics(self, Vi):
        Samples = ViInt32()
        MeanOffset = ViReal64()
        StdDevOffset = ViReal64()
        MaxOffset = ViReal64()
        MinOffset = ViReal64()
        status = self.dll.AgRfSigGen_PtpServoAlgorithmLogGetStatistics(
            ViSession(Vi),
            byref(Samples),
            byref(MeanOffset),
            byref(StdDevOffset),
            byref(MaxOffset),
            byref(MinOffset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Samples = int(Samples.value)
        MeanOffset = float(MeanOffset.value)
        StdDevOffset = float(StdDevOffset.value)
        MaxOffset = float(MaxOffset.value)
        MinOffset = float(MinOffset.value)
        return Samples, MeanOffset, StdDevOffset, MaxOffset, MinOffset

    def PtpServoAlgorithmLogClearStatistics(self, Vi):
        status = self.dll.AgRfSigGen_PtpServoAlgorithmLogClearStatistics(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PtpTimeClearMeasurementTime(self, Vi):
        status = self.dll.AgRfSigGen_PtpTimeClearMeasurementTime(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PtpTimeGetMeasurementTime(self, Vi):
        DeltaSeconds = ViReal64()
        BeginSeconds = ViReal64()
        BeginFraction = ViReal64()
        EndSeconds = ViReal64()
        EndFraction = ViReal64()
        status = self.dll.AgRfSigGen_PtpTimeGetMeasurementTime(
            ViSession(Vi),
            byref(DeltaSeconds),
            byref(BeginSeconds),
            byref(BeginFraction),
            byref(EndSeconds),
            byref(EndFraction),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DeltaSeconds = float(DeltaSeconds.value)
        BeginSeconds = float(BeginSeconds.value)
        BeginFraction = float(BeginFraction.value)
        EndSeconds = float(EndSeconds.value)
        EndFraction = float(EndFraction.value)
        return DeltaSeconds, BeginSeconds, BeginFraction, EndSeconds, EndFraction

    def PtpTimeSetCurrentTime(self, Vi, TimeSeconds, TimeFraction):
        status = self.dll.AgRfSigGen_PtpTimeSetCurrentTime(ViSession(Vi), ViReal64(TimeSeconds), ViReal64(TimeFraction))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PtpTimeFetchCurrentTime(self, Vi):
        TimeSeconds = ViReal64()
        TimeFraction = ViReal64()
        status = self.dll.AgRfSigGen_PtpTimeFetchCurrentTime(ViSession(Vi), byref(TimeSeconds), byref(TimeFraction))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TimeSeconds = float(TimeSeconds.value)
        TimeFraction = float(TimeFraction.value)
        return TimeSeconds, TimeFraction

    def PtpTimeMarkerClearMarker(self, Vi, Marker):
        status = self.dll.AgRfSigGen_PtpTimeMarkerClearMarker(ViSession(Vi), ViInt32(Marker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PtpTimeMarkerGetMarkerTime(self, Vi, Marker):
        DeltaSeconds = ViReal64()
        MarkerSeconds = ViReal64()
        MarkerFraction = ViReal64()
        CurrentSeconds = ViReal64()
        CurrentFraction = ViReal64()
        status = self.dll.AgRfSigGen_PtpTimeMarkerGetMarkerTime(
            ViSession(Vi),
            ViInt32(Marker),
            byref(DeltaSeconds),
            byref(MarkerSeconds),
            byref(MarkerFraction),
            byref(CurrentSeconds),
            byref(CurrentFraction),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DeltaSeconds = float(DeltaSeconds.value)
        MarkerSeconds = float(MarkerSeconds.value)
        MarkerFraction = float(MarkerFraction.value)
        CurrentSeconds = float(CurrentSeconds.value)
        CurrentFraction = float(CurrentFraction.value)
        return (
            DeltaSeconds,
            MarkerSeconds,
            MarkerFraction,
            CurrentSeconds,
            CurrentFraction,
        )

    def PtpTimeMarkerSetMarker(self, Vi, Marker):
        status = self.dll.AgRfSigGen_PtpTimeMarkerSetMarker(ViSession(Vi), ViInt32(Marker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetArmAlarmName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgRfSigGen_GetArmAlarmName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetArmSourceName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgRfSigGen_GetArmSourceName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetEventName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgRfSigGen_GetEventName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetTriggerAlarmName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgRfSigGen_GetTriggerAlarmName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetTriggerSourceName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgRfSigGen_GetTriggerSourceName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def CorrectionClearData(self, Vi):
        status = self.dll.AgRfSigGen_CorrectionClearData(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryDeleteFile(self, Vi, FileNameBufferSize, FileName):
        status = self.dll.AgRfSigGen_MemoryDeleteFile(
            ViSession(Vi), ViInt32(FileNameBufferSize), ViConstString(FileName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryLoadCalibrationData(self, Vi, FileName):
        status = self.dll.AgRfSigGen_MemoryLoadCalibrationData(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryReplaceListInfo(self, Vi, FileName1):
        status = self.dll.AgRfSigGen_MemoryReplaceListInfo(ViSession(Vi), ViConstString(FileName1))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryStoreCalibrationData(self, Vi, FileName):
        status = self.dll.AgRfSigGen_MemoryStoreCalibrationData(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryStoreListInfo(self, Vi, FileName1):
        status = self.dll.AgRfSigGen_MemoryStoreListInfo(ViSession(Vi), ViConstString(FileName1))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryReplacePulseTrainTableInfo(self, Vi, FileName2):
        status = self.dll.AgRfSigGen_MemoryReplacePulseTrainTableInfo(ViSession(Vi), ViConstString(FileName2))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryStorePulseTrainTableInfo(self, Vi, FileName2):
        status = self.dll.AgRfSigGen_MemoryStorePulseTrainTableInfo(ViSession(Vi), ViConstString(FileName2))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DSIMPresetPassthrough(self, Vi):
        status = self.dll.AgRfSigGen_DSIMPresetPassthrough(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InputFrequencyOffsetPhaseReset(self, Vi):
        status = self.dll.AgRfSigGen_InputFrequencyOffsetPhaseReset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PhaseNoiseAmplitudeList(self, Vi, StartFrequency, StopFrequency, NumSamples, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgRfSigGen_PhaseNoiseAmplitudeList(
            ViSession(Vi),
            ViReal64(StartFrequency),
            ViReal64(StopFrequency),
            ViReal64(NumSamples),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def CorrectionLoadFlatnessCorrectionData(self, Vi, FileName):
        status = self.dll.AgRfSigGen_CorrectionLoadFlatnessCorrectionData(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CorrectionStoreFlatnessCorrectionData(self, Vi, FileName):
        status = self.dll.AgRfSigGen_CorrectionStoreFlatnessCorrectionData(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
