from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .AgRfSigGen_dllwrap import *


class AgRfSigGen(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = AgRfSigGen_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ConfigureALCEnabled(self, ALCEnabled):
        """

        :param ALCEnabled:
        :type ALCEnabled:
        """
        return self._dllwrap.ConfigureALCEnabled(self._vi, ALCEnabled)

    def ConfigureRF(self, Frequency, PowerLevel):
        """

        :param Frequency:
        :type Frequency:
        :param PowerLevel:
        :type PowerLevel:
        """
        return self._dllwrap.ConfigureRF(self._vi, Frequency, PowerLevel)

    def ConfigureAMEnabled(self, Enabled):
        """

        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureAMEnabled(self._vi, Enabled)

    def ConfigureAMExternalCoupling(self, Coupling):
        """

        :param Coupling:
        :type Coupling:
        """
        return self._dllwrap.ConfigureAMExternalCoupling(self._vi, Coupling)

    def ConfigureFMEnabled(self, Enabled):
        """

        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureFMEnabled(self._vi, Enabled)

    def ConfigureFMExternalCoupling(self, Coupling):
        """

        :param Coupling:
        :type Coupling:
        """
        return self._dllwrap.ConfigureFMExternalCoupling(self._vi, Coupling)

    def ConfigurePMEnabled(self, Enabled):
        """

        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigurePMEnabled(self._vi, Enabled)

    def ConfigurePMExternalCoupling(self, Coupling):
        """

        :param Coupling:
        :type Coupling:
        """
        return self._dllwrap.ConfigurePMExternalCoupling(self._vi, Coupling)

    def GetAnalogModulationSourceName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetAnalogModulationSourceName(self._vi, Index, NameBufferSize)

    def ConfigureAM(self, Source, Scaling, Depth):
        """

        :param Source:
        :type Source:
        :param Scaling:
        :type Scaling:
        :param Depth:
        :type Depth:
        """
        return self._dllwrap.ConfigureAM(self._vi, Source, Scaling, Depth)

    def ConfigureFM(self, Source, Deviation):
        """

        :param Source:
        :type Source:
        :param Deviation:
        :type Deviation:
        """
        return self._dllwrap.ConfigureFM(self._vi, Source, Deviation)

    def ConfigurePM(self, Source, Deviation):
        """

        :param Source:
        :type Source:
        :param Deviation:
        :type Deviation:
        """
        return self._dllwrap.ConfigurePM(self._vi, Source, Deviation)

    def ConfigurePulseModulationEnabled(self, Enabled):
        """

        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigurePulseModulationEnabled(self._vi, Enabled)

    def ConfigurePulseModulationSource(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigurePulseModulationSource(self._vi, Source)

    def ConfigurePulseModulationExternalPolarity(self, Polarity):
        """

        :param Polarity:
        :type Polarity:
        """
        return self._dllwrap.ConfigurePulseModulationExternalPolarity(self._vi, Polarity)

    def GetLFGeneratorName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetLFGeneratorName(self._vi, Index, NameBufferSize)

    def SetActiveLFGenerator(self, ActiveLFGenerator):
        """

        :param ActiveLFGenerator:
        :type ActiveLFGenerator:
        """
        return self._dllwrap.SetActiveLFGenerator(self._vi, ActiveLFGenerator)

    def ConfigureLFGenerator(self, Frequency, Waveform):
        """

        :param Frequency:
        :type Frequency:
        :param Waveform:
        :type Waveform:
        """
        return self._dllwrap.ConfigureLFGenerator(self._vi, Frequency, Waveform)

    def ConfigureLFGeneratorOutput(self, Amplitude, Enabled):
        """

        :param Amplitude:
        :type Amplitude:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureLFGeneratorOutput(self._vi, Amplitude, Enabled)

    def ConfigurePulse(self, PulseTriggerSource, PulseWidth, GatingEnabled):
        """

        :param PulseTriggerSource:
        :type PulseTriggerSource:
        :param PulseWidth:
        :type PulseWidth:
        :param GatingEnabled:
        :type GatingEnabled:
        """
        return self._dllwrap.ConfigurePulse(self._vi, PulseTriggerSource, PulseWidth, GatingEnabled)

    def ConfigurePulseExternalTrigger(self, Slope, Delay):
        """

        :param Slope:
        :type Slope:
        :param Delay:
        :type Delay:
        """
        return self._dllwrap.ConfigurePulseExternalTrigger(self._vi, Slope, Delay)

    def ConfigurePulseDouble(self, Enabled, Delay):
        """

        :param Enabled:
        :type Enabled:
        :param Delay:
        :type Delay:
        """
        return self._dllwrap.ConfigurePulseDouble(self._vi, Enabled, Delay)

    def ConfigurePulseOutput(self, Polarity, Enabled):
        """

        :param Polarity:
        :type Polarity:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigurePulseOutput(self._vi, Polarity, Enabled)

    def ConfigureFrequencySweepTime(self, Time):
        """

        :param Time:
        :type Time:
        """
        return self._dllwrap.ConfigureFrequencySweepTime(self._vi, Time)

    def ConfigurePowerSweepTime(self, Time):
        """

        :param Time:
        :type Time:
        """
        return self._dllwrap.ConfigurePowerSweepTime(self._vi, Time)

    def SelectList(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.SelectList(self._vi, Name)

    def ConfigureFrequencyStepDwell(self, SingleStepEnabled, Dwell):
        """

        :param SingleStepEnabled:
        :type SingleStepEnabled:
        :param Dwell:
        :type Dwell:
        """
        return self._dllwrap.ConfigureFrequencyStepDwell(self._vi, SingleStepEnabled, Dwell)

    def ConfigureFrequencyStepStartStop(self, Start, Stop, Scaling, StepSize):
        """

        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        :param Scaling:
        :type Scaling:
        :param StepSize:
        :type StepSize:
        """
        return self._dllwrap.ConfigureFrequencyStepStartStop(self._vi, Start, Stop, Scaling, StepSize)

    def ResetFrequencyStep(self):
        """"""
        return self._dllwrap.ResetFrequencyStep(self._vi)

    def ConfigureFrequencySweepCenterSpan(self, Center, Span):
        """

        :param Center:
        :type Center:
        :param Span:
        :type Span:
        """
        return self._dllwrap.ConfigureFrequencySweepCenterSpan(self._vi, Center, Span)

    def ConfigureFrequencySweepStartStop(self, Start, Stop):
        """

        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        """
        return self._dllwrap.ConfigureFrequencySweepStartStop(self._vi, Start, Stop)

    def ClearAllLists(self):
        """"""
        return self._dllwrap.ClearAllLists(self._vi)

    def ConfigureListDwell(self, SingleStepEnabled, Dwell):
        """

        :param SingleStepEnabled:
        :type SingleStepEnabled:
        :param Dwell:
        :type Dwell:
        """
        return self._dllwrap.ConfigureListDwell(self._vi, SingleStepEnabled, Dwell)

    def CreateFrequencyList(self, Name, Length):
        """

        :param Name:
        :type Name:
        :param Length:
        :type Length:
        """
        return self._dllwrap.CreateFrequencyList(self._vi, Name, Length)

    def CreateFrequencyPowerList(self, Name, Length):
        """

        :param Name:
        :type Name:
        :param Length:
        :type Length:
        """
        return self._dllwrap.CreateFrequencyPowerList(self._vi, Name, Length)

    def CreatePowerList(self, Name, Length):
        """

        :param Name:
        :type Name:
        :param Length:
        :type Length:
        """
        return self._dllwrap.CreatePowerList(self._vi, Name, Length)

    def ResetList(self):
        """"""
        return self._dllwrap.ResetList(self._vi)

    def ConfigurePowerStepDwell(self, SingleStepEnabled, Dwell):
        """

        :param SingleStepEnabled:
        :type SingleStepEnabled:
        :param Dwell:
        :type Dwell:
        """
        return self._dllwrap.ConfigurePowerStepDwell(self._vi, SingleStepEnabled, Dwell)

    def ConfigurePowerStepStartStop(self, Start, Stop, StepSize):
        """

        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        :param StepSize:
        :type StepSize:
        """
        return self._dllwrap.ConfigurePowerStepStartStop(self._vi, Start, Stop, StepSize)

    def ResetPowerStep(self):
        """"""
        return self._dllwrap.ResetPowerStep(self._vi)

    def ConfigurePowerSweepStartStop(self, Start, Stop):
        """

        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        """
        return self._dllwrap.ConfigurePowerSweepStartStop(self._vi, Start, Stop)

    def ConfigureSweep(self, Mode, TriggerSource):
        """

        :param Mode:
        :type Mode:
        :param TriggerSource:
        :type TriggerSource:
        """
        return self._dllwrap.ConfigureSweep(self._vi, Mode, TriggerSource)

    def ConfigureIQEnabled(self, Enabled):
        """

        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureIQEnabled(self._vi, Enabled)

    def ConfigureIQImpairmentEnabled(self, Enabled):
        """

        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureIQImpairmentEnabled(self._vi, Enabled)

    def CalibrateIQ(self):
        """"""
        return self._dllwrap.CalibrateIQ(self._vi)

    def ConfigureIQ(self, Source, SwapEnabled):
        """

        :param Source:
        :type Source:
        :param SwapEnabled:
        :type SwapEnabled:
        """
        return self._dllwrap.ConfigureIQ(self._vi, Source, SwapEnabled)

    def ConfigureIQImpairment(self, IOffset, QOffset, Ratio, Skew):
        """

        :param IOffset:
        :type IOffset:
        :param QOffset:
        :type QOffset:
        :param Ratio:
        :type Ratio:
        :param Skew:
        :type Skew:
        """
        return self._dllwrap.ConfigureIQImpairment(self._vi, IOffset, QOffset, Ratio, Skew)

    def SelectArbWaveform(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.SelectArbWaveform(self._vi, Name)

    def ConfigureArbTriggerSource(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureArbTriggerSource(self._vi, Source)

    def ConfigureArbExternalTriggerSlope(self, Slope):
        """

        :param Slope:
        :type Slope:
        """
        return self._dllwrap.ConfigureArbExternalTriggerSlope(self._vi, Slope)

    def ClearAllArbWaveforms(self):
        """"""
        return self._dllwrap.ClearAllArbWaveforms(self._vi)

    def ConfigureArb(self, ClockFrequency, FilterFrequency):
        """

        :param ClockFrequency:
        :type ClockFrequency:
        :param FilterFrequency:
        :type FilterFrequency:
        """
        return self._dllwrap.ConfigureArb(self._vi, ClockFrequency, FilterFrequency)

    def QueryArbWaveformCapabilities(self):
        """"""
        return self._dllwrap.QueryArbWaveformCapabilities(self._vi)

    def WriteArbWaveform(self, Name, NumberOfSamples, MoreDataPending):
        """

        :param Name:
        :type Name:
        :param NumberOfSamples:
        :type NumberOfSamples:
        :param MoreDataPending:
        :type MoreDataPending:
        """
        return self._dllwrap.WriteArbWaveform(self._vi, Name, NumberOfSamples, MoreDataPending)

    def SelectDigitalModulationBaseStandard(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.SelectDigitalModulationBaseStandard(self._vi, Name)

    def ConfigureDigitalModulationBaseDataSource(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureDigitalModulationBaseDataSource(self._vi, Source)

    def ConfigureDigitalModulationBasePRBSType(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.ConfigureDigitalModulationBasePRBSType(self._vi, Type)

    def SelectDigitalModulationBaseBitSequence(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.SelectDigitalModulationBaseBitSequence(self._vi, Name)

    def ClearAllDigitalModulationBaseBitSequences(self):
        """"""
        return self._dllwrap.ClearAllDigitalModulationBaseBitSequences(self._vi)

    def ConfigureDigitalModulationBaseClockSource(self, Source, Type):
        """

        :param Source:
        :type Source:
        :param Type:
        :type Type:
        """
        return self._dllwrap.ConfigureDigitalModulationBaseClockSource(self._vi, Source, Type)

    def WriteDigitalModulationBaseBitSequence(self, Name, BitCount, Sequence, MoreDataPending):
        """

        :param Name:
        :type Name:
        :param BitCount:
        :type BitCount:
        :param Sequence:
        :type Sequence:
        :param MoreDataPending:
        :type MoreDataPending:
        """
        return self._dllwrap.WriteDigitalModulationBaseBitSequence(self._vi, Name, BitCount, Sequence, MoreDataPending)

    def SelectCDMAStandard(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.SelectCDMAStandard(self._vi, Name)

    def ConfigureCDMAClockSource(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureCDMAClockSource(self._vi, Source)

    def ConfigureCDMATriggerSource(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureCDMATriggerSource(self._vi, Source)

    def ConfigureCDMAExternalTriggerSlope(self, Slope):
        """

        :param Slope:
        :type Slope:
        """
        return self._dllwrap.ConfigureCDMAExternalTriggerSlope(self._vi, Slope)

    def SelectCDMATestModel(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.SelectCDMATestModel(self._vi, Name)

    def SelectTDMAStandard(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.SelectTDMAStandard(self._vi, Name)

    def ConfigureTDMATriggerSource(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureTDMATriggerSource(self._vi, Source)

    def ConfigureTDMAExternalTriggerSlope(self, Slope):
        """

        :param Slope:
        :type Slope:
        """
        return self._dllwrap.ConfigureTDMAExternalTriggerSlope(self._vi, Slope)

    def SelectTDMAFrame(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.SelectTDMAFrame(self._vi, Name)

    def ConfigureTDMAClockSource(self, Source, Type):
        """

        :param Source:
        :type Source:
        :param Type:
        :type Type:
        """
        return self._dllwrap.ConfigureTDMAClockSource(self._vi, Source, Type)

    def ConfigureALC(self, Source, Bandwidth):
        """

        :param Source:
        :type Source:
        :param Bandwidth:
        :type Bandwidth:
        """
        return self._dllwrap.ConfigureALC(self._vi, Source, Bandwidth)

    def ConfigureReferenceOscillator(self, Source, Frequency):
        """

        :param Source:
        :type Source:
        :param Frequency:
        :type Frequency:
        """
        return self._dllwrap.ConfigureReferenceOscillator(self._vi, Source, Frequency)

    def IviLxiSync_ConfigureArmAlarm(self, AlarmName, Enabled, TimeSeconds, TimeFraction, Period, RepeatCount):
        """

        :param AlarmName:
        :type AlarmName:
        :param Enabled:
        :type Enabled:
        :param TimeSeconds:
        :type TimeSeconds:
        :param TimeFraction:
        :type TimeFraction:
        :param Period:
        :type Period:
        :param RepeatCount:
        :type RepeatCount:
        """
        return self._dllwrap.IviLxiSync_ConfigureArmAlarm(
            self._vi, AlarmName, Enabled, TimeSeconds, TimeFraction, Period, RepeatCount
        )

    def IviLxiSync_AddArmAlarm(self, AlarmName):
        """

        :param AlarmName:
        :type AlarmName:
        """
        return self._dllwrap.IviLxiSync_AddArmAlarm(self._vi, AlarmName)

    def IviLxiSync_DisableAllArmAlarms(self):
        """"""
        return self._dllwrap.IviLxiSync_DisableAllArmAlarms(self._vi)

    def IviLxiSync_RemoveArmAlarm(self, AlarmName):
        """

        :param AlarmName:
        :type AlarmName:
        """
        return self._dllwrap.IviLxiSync_RemoveArmAlarm(self._vi, AlarmName)

    def IviLxiSync_RemoveAllCustomArmAlarms(self):
        """"""
        return self._dllwrap.IviLxiSync_RemoveAllCustomArmAlarms(self._vi)

    def IviLxiSync_ConfigureArmSource(self, SourceName, Enabled, Detection):
        """

        :param SourceName:
        :type SourceName:
        :param Enabled:
        :type Enabled:
        :param Detection:
        :type Detection:
        """
        return self._dllwrap.IviLxiSync_ConfigureArmSource(self._vi, SourceName, Enabled, Detection)

    def IviLxiSync_AddArmSource(self, SourceName):
        """

        :param SourceName:
        :type SourceName:
        """
        return self._dllwrap.IviLxiSync_AddArmSource(self._vi, SourceName)

    def IviLxiSync_DisableAllArmSources(self):
        """"""
        return self._dllwrap.IviLxiSync_DisableAllArmSources(self._vi)

    def IviLxiSync_RemoveArmSource(self, SourceName):
        """

        :param SourceName:
        :type SourceName:
        """
        return self._dllwrap.IviLxiSync_RemoveArmSource(self._vi, SourceName)

    def IviLxiSync_RemoveAllCustomArmSources(self):
        """"""
        return self._dllwrap.IviLxiSync_RemoveAllCustomArmSources(self._vi)

    def IviLxiSync_ConfigureTriggerAlarm(self, AlarmName, TimeSeconds, TimeFraction, Period, RepeatCount):
        """

        :param AlarmName:
        :type AlarmName:
        :param TimeSeconds:
        :type TimeSeconds:
        :param TimeFraction:
        :type TimeFraction:
        :param Period:
        :type Period:
        :param RepeatCount:
        :type RepeatCount:
        """
        return self._dllwrap.IviLxiSync_ConfigureTriggerAlarm(
            self._vi, AlarmName, TimeSeconds, TimeFraction, Period, RepeatCount
        )

    def IviLxiSync_AddTriggerAlarm(self, AlarmName):
        """

        :param AlarmName:
        :type AlarmName:
        """
        return self._dllwrap.IviLxiSync_AddTriggerAlarm(self._vi, AlarmName)

    def IviLxiSync_DisableAllTriggerAlarms(self):
        """"""
        return self._dllwrap.IviLxiSync_DisableAllTriggerAlarms(self._vi)

    def IviLxiSync_RemoveTriggerAlarm(self, AlarmName):
        """

        :param AlarmName:
        :type AlarmName:
        """
        return self._dllwrap.IviLxiSync_RemoveTriggerAlarm(self._vi, AlarmName)

    def IviLxiSync_RemoveAllTriggerAlarms(self):
        """"""
        return self._dllwrap.IviLxiSync_RemoveAllTriggerAlarms(self._vi)

    def IviLxiSync_ConfigureTriggerSource(self, SourceName, Delay, Detection):
        """

        :param SourceName:
        :type SourceName:
        :param Delay:
        :type Delay:
        :param Detection:
        :type Detection:
        """
        return self._dllwrap.IviLxiSync_ConfigureTriggerSource(self._vi, SourceName, Delay, Detection)

    def IviLxiSync_AddTriggerSource(self, SourceName):
        """

        :param SourceName:
        :type SourceName:
        """
        return self._dllwrap.IviLxiSync_AddTriggerSource(self._vi, SourceName)

    def IviLxiSync_RemoveTriggerSource(self, SourceName):
        """

        :param SourceName:
        :type SourceName:
        """
        return self._dllwrap.IviLxiSync_RemoveTriggerSource(self._vi, SourceName)

    def IviLxiSync_RemoveAllCustomTriggerSources(self):
        """"""
        return self._dllwrap.IviLxiSync_RemoveAllCustomTriggerSources(self._vi)

    def IviLxiSync_ConfigureEvent(self, EventName, DriveMode, Source, DestinationPath, Slope):
        """

        :param EventName:
        :type EventName:
        :param DriveMode:
        :type DriveMode:
        :param Source:
        :type Source:
        :param DestinationPath:
        :type DestinationPath:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.IviLxiSync_ConfigureEvent(self._vi, EventName, DriveMode, Source, DestinationPath, Slope)

    def IviLxiSync_AddEvent(self, EventName):
        """

        :param EventName:
        :type EventName:
        """
        return self._dllwrap.IviLxiSync_AddEvent(self._vi, EventName)

    def IviLxiSync_DisableAllEvents(self):
        """"""
        return self._dllwrap.IviLxiSync_DisableAllEvents(self._vi)

    def IviLxiSync_RemoveEvent(self, EventName):
        """

        :param EventName:
        :type EventName:
        """
        return self._dllwrap.IviLxiSync_RemoveEvent(self._vi, EventName)

    def IviLxiSync_RemoveAllCustomEvents(self):
        """"""
        return self._dllwrap.IviLxiSync_RemoveAllCustomEvents(self._vi)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def DisableAllModulation(self):
        """"""
        return self._dllwrap.DisableAllModulation(self._vi)

    def IsSettled(self):
        """"""
        return self._dllwrap.IsSettled(self._vi)

    def WaitUntilSettled(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.WaitUntilSettled(self._vi, MaxTimeMilliseconds)

    def ConfigureOutputEnabled(self, OutputEnabled):
        """

        :param OutputEnabled:
        :type OutputEnabled:
        """
        return self._dllwrap.ConfigureOutputEnabled(self._vi, OutputEnabled)

    def SystemClearIO(self):
        """"""
        return self._dllwrap.SystemClearIO(self._vi)

    def SystemReadBytes(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadBytes(self._vi, ValBufferSize)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def SystemWriteBytes(self, BufferBufferSize):
        """

        :param BufferBufferSize:
        :type BufferBufferSize:
        """
        return self._dllwrap.SystemWriteBytes(self._vi, BufferBufferSize)

    def SystemWriteString(self, DataBufferSize, Data):
        """

        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, DataBufferSize, Data)

    def viWrite(self, Count):
        """

        :param Count:
        :type Count:
        """
        return self._dllwrap.viWrite(self._vi, Count)

    def ConfigurePulseInternalTrigger(self, Period):
        """

        :param Period:
        :type Period:
        """
        return self._dllwrap.ConfigurePulseInternalTrigger(self._vi, Period)

    def IviLxiSync_ClearEventLog(self):
        """"""
        return self._dllwrap.IviLxiSync_ClearEventLog(self._vi)

    def IviLxiSync_GetNextEventLogEntry(self, LogEntryBufferSize):
        """

        :param LogEntryBufferSize:
        :type LogEntryBufferSize:
        """
        return self._dllwrap.IviLxiSync_GetNextEventLogEntry(self._vi, LogEntryBufferSize)

    def IviLxiSync_GetSystemTime(self):
        """"""
        return self._dllwrap.IviLxiSync_GetSystemTime(self._vi)

    def AnalogModulationDisableAll(self):
        """"""
        return self._dllwrap.AnalogModulationDisableAll(self._vi)

    def DigitalModulationArbWriteWaveformToNVMemory(self, Name, IDataBufferSize, QDataBufferSize, MoreDataPending):
        """

        :param Name:
        :type Name:
        :param IDataBufferSize:
        :type IDataBufferSize:
        :param QDataBufferSize:
        :type QDataBufferSize:
        :param MoreDataPending:
        :type MoreDataPending:
        """
        return self._dllwrap.DigitalModulationArbWriteWaveformToNVMemory(
            self._vi, Name, IDataBufferSize, QDataBufferSize, MoreDataPending
        )

    def StatusPreset(self):
        """"""
        return self._dllwrap.StatusPreset(self._vi)

    def StatusConfigureServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.StatusConfigureServiceRequest(self._vi, Reason)

    def StatusClear(self):
        """"""
        return self._dllwrap.StatusClear(self._vi)

    def StatusGetRegister(self, Register, SubRegister):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusGetRegister(self._vi, Register, SubRegister)

    def StatusSetRegister(self, Register, SubRegister, Val):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusSetRegister(self._vi, Register, SubRegister, Val)

    def SystemWaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.SystemWaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def SystemSaveState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemSaveState(self._vi, Identifier)

    def SystemRecallState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemRecallState(self._vi, Identifier)

    def SystemEnableLocalControls(self):
        """"""
        return self._dllwrap.SystemEnableLocalControls(self._vi)

    def SystemDisableLocalControls(self):
        """"""
        return self._dllwrap.SystemDisableLocalControls(self._vi)

    def SystemIoWrite(self, CommandString):
        """

        :param CommandString:
        :type CommandString:
        """
        return self._dllwrap.SystemIoWrite(self._vi, CommandString)

    def SystemIoRead(self, Size):
        """

        :param Size:
        :type Size:
        """
        return self._dllwrap.SystemIoRead(self._vi, Size)

    def PtpServoAlgorithmConfigure(
        self,
        Asymmetry,
        CoarseFineThreshold,
        CoarseProportionalConstant,
        CoarseIntegralConstant,
        FineProportionalConstant,
        FineIntegralConstant,
        OutlierMaxDiscardCount,
        OutlierThreshold,
        SteeringThreshold,
    ):
        """

        :param Asymmetry:
        :type Asymmetry:
        :param CoarseFineThreshold:
        :type CoarseFineThreshold:
        :param CoarseProportionalConstant:
        :type CoarseProportionalConstant:
        :param CoarseIntegralConstant:
        :type CoarseIntegralConstant:
        :param FineProportionalConstant:
        :type FineProportionalConstant:
        :param FineIntegralConstant:
        :type FineIntegralConstant:
        :param OutlierMaxDiscardCount:
        :type OutlierMaxDiscardCount:
        :param OutlierThreshold:
        :type OutlierThreshold:
        :param SteeringThreshold:
        :type SteeringThreshold:
        """
        return self._dllwrap.PtpServoAlgorithmConfigure(
            self._vi,
            Asymmetry,
            CoarseFineThreshold,
            CoarseProportionalConstant,
            CoarseIntegralConstant,
            FineProportionalConstant,
            FineIntegralConstant,
            OutlierMaxDiscardCount,
            OutlierThreshold,
            SteeringThreshold,
        )

    def PtpServoAlgorithmLogReadAll(self, RetValBufferSize):
        """

        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.PtpServoAlgorithmLogReadAll(self._vi, RetValBufferSize)

    def PtpServoAlgorithmLogSetCircularReferenceIndex(self):
        """"""
        return self._dllwrap.PtpServoAlgorithmLogSetCircularReferenceIndex(self._vi)

    def PtpServoAlgorithmLogClearAll(self):
        """"""
        return self._dllwrap.PtpServoAlgorithmLogClearAll(self._vi)

    def PtpServoAlgorithmLogGetIndexedEntry(self, Index, RetValBufferSize):
        """

        :param Index:
        :type Index:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.PtpServoAlgorithmLogGetIndexedEntry(self._vi, Index, RetValBufferSize)

    def PtpServoAlgorithmLogGetNextEntry(self, RetValBufferSize):
        """

        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.PtpServoAlgorithmLogGetNextEntry(self._vi, RetValBufferSize)

    def PtpServoAlgorithmLogGetStatistics(self):
        """"""
        return self._dllwrap.PtpServoAlgorithmLogGetStatistics(self._vi)

    def PtpServoAlgorithmLogClearStatistics(self):
        """"""
        return self._dllwrap.PtpServoAlgorithmLogClearStatistics(self._vi)

    def PtpTimeClearMeasurementTime(self):
        """"""
        return self._dllwrap.PtpTimeClearMeasurementTime(self._vi)

    def PtpTimeGetMeasurementTime(self):
        """"""
        return self._dllwrap.PtpTimeGetMeasurementTime(self._vi)

    def PtpTimeSetCurrentTime(self, TimeSeconds, TimeFraction):
        """

        :param TimeSeconds:
        :type TimeSeconds:
        :param TimeFraction:
        :type TimeFraction:
        """
        return self._dllwrap.PtpTimeSetCurrentTime(self._vi, TimeSeconds, TimeFraction)

    def PtpTimeFetchCurrentTime(self):
        """"""
        return self._dllwrap.PtpTimeFetchCurrentTime(self._vi)

    def PtpTimeMarkerClearMarker(self, Marker):
        """

        :param Marker:
        :type Marker:
        """
        return self._dllwrap.PtpTimeMarkerClearMarker(self._vi, Marker)

    def PtpTimeMarkerGetMarkerTime(self, Marker):
        """

        :param Marker:
        :type Marker:
        """
        return self._dllwrap.PtpTimeMarkerGetMarkerTime(self._vi, Marker)

    def PtpTimeMarkerSetMarker(self, Marker):
        """

        :param Marker:
        :type Marker:
        """
        return self._dllwrap.PtpTimeMarkerSetMarker(self._vi, Marker)

    def GetArmAlarmName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetArmAlarmName(self._vi, Index, NameBufferSize)

    def GetArmSourceName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetArmSourceName(self._vi, Index, NameBufferSize)

    def GetEventName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetEventName(self._vi, Index, NameBufferSize)

    def GetTriggerAlarmName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetTriggerAlarmName(self._vi, Index, NameBufferSize)

    def GetTriggerSourceName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetTriggerSourceName(self._vi, Index, NameBufferSize)

    def CorrectionClearData(self):
        """"""
        return self._dllwrap.CorrectionClearData(self._vi)

    def MemoryDeleteFile(self, FileNameBufferSize, FileName):
        """

        :param FileNameBufferSize:
        :type FileNameBufferSize:
        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryDeleteFile(self._vi, FileNameBufferSize, FileName)

    def MemoryLoadCalibrationData(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryLoadCalibrationData(self._vi, FileName)

    def MemoryReplaceListInfo(self, FileName1):
        """

        :param FileName1:
        :type FileName1:
        """
        return self._dllwrap.MemoryReplaceListInfo(self._vi, FileName1)

    def MemoryStoreCalibrationData(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryStoreCalibrationData(self._vi, FileName)

    def MemoryStoreListInfo(self, FileName1):
        """

        :param FileName1:
        :type FileName1:
        """
        return self._dllwrap.MemoryStoreListInfo(self._vi, FileName1)

    def MemoryReplacePulseTrainTableInfo(self, FileName2):
        """

        :param FileName2:
        :type FileName2:
        """
        return self._dllwrap.MemoryReplacePulseTrainTableInfo(self._vi, FileName2)

    def MemoryStorePulseTrainTableInfo(self, FileName2):
        """

        :param FileName2:
        :type FileName2:
        """
        return self._dllwrap.MemoryStorePulseTrainTableInfo(self._vi, FileName2)

    def DSIMPresetPassthrough(self):
        """"""
        return self._dllwrap.DSIMPresetPassthrough(self._vi)

    def InputFrequencyOffsetPhaseReset(self):
        """"""
        return self._dllwrap.InputFrequencyOffsetPhaseReset(self._vi)

    def PhaseNoiseAmplitudeList(self, StartFrequency, StopFrequency, NumSamples, ValBufferSize):
        """

        :param StartFrequency:
        :type StartFrequency:
        :param StopFrequency:
        :type StopFrequency:
        :param NumSamples:
        :type NumSamples:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.PhaseNoiseAmplitudeList(self._vi, StartFrequency, StopFrequency, NumSamples, ValBufferSize)

    def CorrectionLoadFlatnessCorrectionData(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.CorrectionLoadFlatnessCorrectionData(self._vi, FileName)

    def CorrectionStoreFlatnessCorrectionData(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.CorrectionStoreFlatnessCorrectionData(self._vi, FileName)
