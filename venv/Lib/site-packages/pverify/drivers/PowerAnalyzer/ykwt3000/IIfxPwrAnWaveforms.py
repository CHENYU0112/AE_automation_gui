# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

from pverify.drivers.PowerAnalyzer.ykwt3000 import IIfxPwrAnBase
from pverify.drivers.PowerAnalyzer.ykwt3000.IIfxPwrAnWaveform import IIfxPwrAnWaveform


class IIfxPwrAnWaveforms(IIfxPwrAnBase.IIfxPwrAnBase):
    """IfxPowerAnalyzer class-compliant waveform collection interface

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        RecordLength [r]
            Number of data points a waveform consists of.

        SampleRate [r]
            Sampling rate

        TriggerMode [String] [rw]
            Values:
                "IfxPwrAnTriggerModeEnumAuto"
                "IfxPwrAnTriggerModeEnumNormal"

        TriggerSlope [String] [rw]
            Values:
                "IfxPwrAnTriggerSlopeRise"
                "IfxPwrAnTriggerSlopeFall"
                "IfxPwrAnTriggerSlopeRiseFall"

        TriggerSource [String] [rw]
            Values:
                "IfxPwrAnTriggerSourceEnumU1"
                "IfxPwrAnTriggerSourceEnumU2"
                "IfxPwrAnTriggerSourceEnumU3"
                "IfxPwrAnTriggerSourceEnumU4"
                "IfxPwrAnTriggerSourceEnumI1"
                "IfxPwrAnTriggerSourceEnumI2"
                "IfxPwrAnTriggerSourceEnumI3"
                "IfxPwrAnTriggerSourceEnumI4"
                "IfxPwrAnTriggerSourceEnumExtClk"

        TriggerLevel [Float] [rw]

        TimeResolution [Float] [rw]
            The time resolution per division.


    Methods:
        Configure(SampleRate, RecordLength, TriggerMode, TriggerSource, TimeResolution, TriggerLevel)
            Configures the most commonly used properties of the PwrAn waveform sub-system.

        Item(Name, PwrAnWaveformType)
            Values for PwrAnWaveformType:
                "IfxPwrAnWaveformTypeEnumVoltage"
                "IfxPwrAnWaveformTypeEnumCurrent"

    """

    def __init__(self, parent):
        IIfxPwrAnBase.IIfxPwrAnBase.__init__(self, parent)

    # Read-write dependent properties
    @property
    def RecordLength(self):
        """Number of data points a waveform consists of.

        :rtype: float
        """
        ret = self.interface.vi_query(":WAVE:LENG?", rformat="%f")
        self.GetError()
        return ret

    @property
    def SampleRate(self):
        """The sampling rate

        :rtype: float
        """
        ret = self.interface.vi_query(":WAVE:SRAT?", rformat="%f")
        self.GetError()
        return ret

    @property
    def TriggerMode(self):
        """The trigger mode

        :rtype: IfxPwrAnTriggerModeEnum
        """
        ret = self.interface.vi_query(":DISP:WAVE:TRIG:MODE?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IfxPwrAnTriggerModeEnum, ret)

    @TriggerMode.setter
    def TriggerMode(self, value):
        """The trigger mode

        :type value: IfxPwrAnTriggerModeEnum
        """
        self.interface.vi_write(f":DISP:WAVE:TRIG:MODE {value.value}")
        self.GetError()

    @property
    def TriggerSlope(self):
        """The trigger slope

        :rtype: IfxPwrAnTriggerSlopeEnum
        """
        ret = self.interface.vi_query(":DISP:WAVE:TRIG:SLOP?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IfxPwrAnTriggerSlopeEnum, ret)

    @TriggerSlope.setter
    def TriggerSlope(self, value):
        """The trigger slope

        :type value: IfxPwrAnTriggerSlopeEnum
        """
        self.interface.vi_write(f":DISP:WAVE:TRIG:SLOP {value.value}")
        self.GetError()

    @property
    def TriggerSource(self):
        """The trigger source

        :rtype: IfxPwrAnTriggerSourceEnum
        """
        ret = self.interface.vi_query(":DISP:WAVE:TRIG:SOUR?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IfxPwrAnTriggerSourceEnum, ret)

    @TriggerSource.setter
    def TriggerSource(self, value):
        """The trigger source

        :type value: IfxPwrAnTriggerSourceEnum
        """
        self.interface.vi_write(f":DISP:WAVE:TRIG:SOUR {value.value}")
        self.GetError()

    @property
    def TriggerLevel(self):
        """
        Set the value in terms of a percentage of the fullscale value displayed on the screen.

        :rtype: float
        """
        ret = self.interface.vi_query(":DISP:WAVE:TRIG:LEV?", rformat="%f")
        self.GetError()
        return ret

    @TriggerLevel.setter
    def TriggerLevel(self, value):
        """
        Set the value in terms of a percentage of the fullscale value displayed on the screen.

        :type value: float
        """
        self.interface.vi_write(f":DISP:WAVE:TRIG:LEV {value:f}")
        self.GetError()

    @property
    def TimeResolution(self):
        """
        The time resolution per division

        :rtype: float
        """
        ret = self.interface.vi_query(":DISP:WAVE:TDIV?", rformat="%f")
        self.GetError()
        return ret

    @TimeResolution.setter
    def TimeResolution(self, value):
        """
        The time resolution per division

        :type value: float
        """
        self.interface.vi_write(f":DISP:WAVE:TDIV {value:f}")
        self.GetError()

    # Methods
    def Configure(
        self,
        SampleRate,
        RecordLength,
        TriggerMode,
        TriggerSource,
        TimeResolution,
        TriggerLevel,
    ):
        """
        Configures the most commonly used properties of the PwrAn waveform sub-system.

        :type SampleRate: float
        :type RecordLength: float
        :type TriggerMode: str
        :type TriggerSource: str
        :type TimeResolution: float
        :type TriggerLevel: float
        """
        # self.SampleRate = SampleRate
        # self.RecordLength = RecordLength
        self.TriggerMode = TriggerMode
        self.TriggerSource = TriggerSource
        self.TimeResolution = TimeResolution
        self.TriggerLevel = TriggerLevel

    def Item(self, Source):
        """
        Gets a pointer to a waveform object.

        :param Source:
        :rtype: IIfxPwrAnWaveform
        """
        if Source in ["U1", "U2", "U3", "U4", "I1", "I2", "I3", "I4"]:
            return IIfxPwrAnWaveform(self, Source)
        else:
            msg = f"Channel '{Source}' does not exist. This power analyzer only has channel 1-4."
            raise IndexError(msg)

    def Name(self, Index):
        """
        Gets the name of a channel.

        :param Index:
            One based index into the collection of channels.
        """
        if (int(Index) >= 1) and (int(Index) <= 4):
            return ["U1", "U2", "U3", "U4", "I1", "I2", "I3", "I4"][int(Index) - 1]
        else:
            msg = "ykwt3000: Channel index exceeds the limits 1-4"
            raise IndexError(msg)
