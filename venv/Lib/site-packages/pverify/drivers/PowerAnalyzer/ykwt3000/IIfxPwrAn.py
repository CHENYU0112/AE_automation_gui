# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

import contextlib
import warnings
from time import sleep

from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper
from pverify.drivers.BaseInstrument import BaseVisaInstrument
from pverify.drivers.PowerAnalyzer.ykwt3000 import (
    IIfxPwrAnBase,
    IIfxPwrAnChannels,
    IIfxPwrAnHarmonics,
    IIfxPwrAnIntegration,
    IIfxPwrAnMeasurements,
    IIfxPwrAnWaveforms,
)


class IIfxPwrAn(IVICOMDriverWrapper, IIfxPwrAnBase.IIfxPwrAnBase):
    """IVI Scope class-compliant root interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        Channels
            Pointer to the class-compliant IIfxPwrAnChannels interface

        Measurements
            Pointer to the class-compliant IIfxPwrAnMeasurements interface

        Waveforms
            Pointer to the class-compliant IIfxPwrAnWaveforms interface

        Harmonics
            Pointer to the class-compliant IIfxPwrAnHarmonics interface

        Integration
            Pointer to the class-compliant IIfxPwrAnIntegration interface

        interface
            Specific for instrument connection via VISA.
            Provides interface for wrapped VISA library.

    Methods:
        Initialize(self, ResourceName, IdQuery=1, Reset=1, OptionString=''):
            Opens the I/O session to the instrument. Driver methods and properties
            that access the instrument are only accessible after Initialize is called.
            Initialize optionally performs a Reset and queries the instrument to
            validate the instrument model.

        Close()
            Closes the I/O session to the instrument.
            Driver methods and properties that access the
            instrument are not accessible after Close is called.
    """

    def __init__(self):
        IVICOMDriverWrapper.__init__(self)
        self.IDN = ""
        self.interface = BaseVisaInstrument()
        self.__Initialized = False
        IIfxPwrAnBase.IIfxPwrAnBase.__init__(self, self)

        self.Channels = IIfxPwrAnChannels.IIfxPwrAnChannels(self)

        self.Measurements = IIfxPwrAnMeasurements.IIfxPwrAnMeasurements(self)

        self.Waveforms = IIfxPwrAnWaveforms.IIfxPwrAnWaveforms(self)

        self.Harmonics = IIfxPwrAnHarmonics.IIfxPwrAnHarmonics(self)

        self.Integration = IIfxPwrAnIntegration.IIfxPwrAnIntegration(self)

        from .IIviDriverOperation import IIviDriverOperation

        self.DriverOperation = IIviDriverOperation(self)

        from .IIviDriverIdentity import IIviDriverIdentity

        self.Identity = IIviDriverIdentity(self)

        from .IIviDriverUtility import IIviDriverUtility

        self.Utility = IIviDriverUtility(self)

    # Read only dependent properties
    @property
    def Initialized(self):
        """
        Initialized is True between a successful call to the Initialize method
        and a successful call to the Close method, and False at all other
        times.
        """
        return self.__Initialized

    @property
    def drivername(self):
        return "YK_WT3000"

    # Methods
    def Initialize(self, ResourceName, IdQuery=1, Reset=1, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties
        that access the instrument are only accessible after Initialize is
        called. Initialize optionally performs a Reset and queries the
        instrument to validate the instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies
            the address of the instrument, such as a VISA resource descriptor
            string.
        :type ResourceName: str

        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool

        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool

        :param OptionString:
            Provides additional functionality for the initialization process.
        :type OptionString: str

        """
        self.interface.ResourceName = ResourceName
        self.interface.vi_open()

        with contextlib.suppress(Exception):
            self.GetError()

        if IdQuery:
            ret = self.interface.vi_query("*IDN?")
            ret = ret.strip()
            self.IDN = ret
            if ret.find("YOKOGAWA,760") == -1:
                warnings.warn(
                    "ykwt3000: Can't find '{}' in the returned IDN string '{}'".format("YOKOGAWA,760304-22-SV", ret),
                    stacklevel=1,
                )

        if Reset:
            self.interface.vi_write("*RST")
            sleep(1)

        self.interface.vi_write(":COMM:HEAD OFF")
        self.Display(self.Enums.IfxPwrAnDisplayModeEnum.IfxPwrAnDisplayModeNumeric)

        self.interface.vi_write(":INTEGRATE:MODE NORMAL")
        self.interface.vi_write(":FILTER:FREQUENCY:ALL ON")
        self.interface.vi_write(":FILTER:LINE:ALL OFF")

        self.interface.vi_write(":MEAS:AVER:STAT OFF")
        self.interface.vi_write(":RATE 500MS")
        self.interface.vi_write(":MEAS:AVER:TYPE EXP")
        self.interface.vi_write(":MEAS:AVER:COUN 8")

        self.interface.vi_write(':MEAS:FUNC1:EXPR "WH(E1)/TI(E1)*3600"')
        self.interface.vi_write(':MEAS:FUNC2:EXPR "WH(E2)/TI(E2)*3600"')
        self.interface.vi_write(':MEAS:FUNC3:EXPR "WH(E3)/TI(E3)*3600"')
        self.interface.vi_write(':MEAS:FUNC4:EXPR "WH(E4)/TI(E4)*3600"')
        self.interface.vi_write(':MEAS:FUNC1:UNIT "W"')
        self.interface.vi_write(':MEAS:FUNC2:UNIT "W"')
        self.interface.vi_write(':MEAS:FUNC3:UNIT "W"')
        self.interface.vi_write(':MEAS:FUNC4:UNIT "W"')
        self.interface.vi_write(":MEAS:FUNC1:STAT ON")
        self.interface.vi_write(":MEAS:FUNC2:STAT ON")
        self.interface.vi_write(":MEAS:FUNC3:STAT ON")
        self.interface.vi_write(":MEAS:FUNC4:STAT ON")
        self.GetError()

        self.interface.vi_write(":DISP:NUM:FORM ALL")
        self.interface.vi_write(":NUM:LIST:ORD ALL")
        self.interface.vi_write(":NUM:LIST:NUM 1")
        self.interface.vi_write(":NUM:FORM ASC")
        self.interface.vi_write(":NUM:NUM 1")

        self.Harmonics.ThdFormula = self.Enums.IfxPwrAnThdFormulaEnum.IfxPwrAnThdFormulaFundamental

        with contextlib.suppress(Exception):
            self.GetError()
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and
        properties that access the instrument are not accessible after Close
        is called.
        """
        if self.__Initialized:
            # self.interface.vi_write(":COMM:REM OFF")
            self.interface.vi_close()
            self.__Initialized = False

    def Display(self, DisplayMode):
        """
        Opens the I/O session to the instrument. Driver methods and properties
        that access the instrument are only accessible after Initialize is
        called. Initialize optionally performs a Reset and queries the
        instrument to validate the instrument model.

        :param DisplayMode: An IVI logical name or an instrument specific string that identifies
            the address of the instrument, such as a VISA resource descriptor
            string.
        :type DisplayMode: IfxPwrAnDisplayModeEnum
        """
        self.interface.vi_write(f":DISP:MODE {DisplayMode.value}")
        self.GetError()

    def RemoteOff(self):
        self.interface.vi_write(":COMM:REM OFF")
        self.GetError()
