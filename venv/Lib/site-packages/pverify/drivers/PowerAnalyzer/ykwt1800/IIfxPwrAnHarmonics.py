# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

from pverify.drivers.PowerAnalyzer.ykwt1800 import IIfxPwrAnBase


class IIfxPwrAnHarmonics(IIfxPwrAnBase.IIfxPwrAnBase):
    """IfxPowerAnalyzer class-compliant harmonics interface

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        FrequencyBand [Boolean] [rw]
            The frequency band to choose
            Values:
                "IfxPwrAnFrequencybandEnumNormal"
                "IfxPwrAnFrequencybandEnumWide"

        PllSource [Float] [rw]
            The source the PLL can synchronize on
            Values:
                "IfxPwrAnPllSourceEnumU1"
                "IfxPwrAnPllSourceEnumU2"
                "IfxPwrAnPllSourceEnumU3"
                "IfxPwrAnPllSourceEnumU4"
                "IfxPwrAnPllSourceEnumI1"
                "IfxPwrAnPllSourceEnumI2"
                "IfxPwrAnPllSourceEnumI3"
                "IfxPwrAnPllSourceEnumI4"
                "IfxPwrAnPllSourceEnumExtClk"

        ThdFormula [String] [rw]
            The formula how the THD is calculated
            Values:
                "IfxPwrAnThdFormulaEnumTotal"
                "IfxPwrAnThdFormulaEnumFundamental"


    Methods:
        ConfigureHarmonics(Frequencyband, PllSource, MinOrder, MaxOrder, ThdFormula)
            Configures the most commonly used properties of the PwrAn Harmonics sub-system.

        SetOrder(MinOrder, MaxOrder)
            Configures the min and max order for calculating the THD.
    """

    def __init__(self, parent):
        IIfxPwrAnBase.IIfxPwrAnBase.__init__(self, parent)

    # Read-write dependent properties
    @property
    def Frequencyband(self):
        """
        The frequency band to choose

        :rtype: IfxPwrAnFrequencybandEnum
        """
        ret = self.interface.vi_query(":HARM:FBAN?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IfxPwrAnFrequencybandEnum, ret)

    @Frequencyband.setter
    def Frequencyband(self, value):
        """
        The frequency band to choose

        :type value: IfxPwrAnFrequencybandEnum
        """
        self.interface.vi_write(f":HARM:FBAN {value.value}")
        self.GetError()

    # TODO

    @property
    def PllSource(self):
        """
        The source the PLL can synchronize on

        :rtype: IfxPwrAnPllSourceEnum
        """
        ret = self.interface.vi_query(":HARM:PLLS?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IfxPwrAnPllSourceEnum, ret)

    @PllSource.setter
    def PllSource(self, value):
        """
        The source the PLL can synchronize on

        :type value: IfxPwrAnPllSourceEnum
        """
        self.interface.vi_write(f":HARM:PLLS {value.value}")
        self.GetError()

    @property
    def ThdFormula(self):
        """
        The formula how the THD is calculated

        :rtype: IfxPwrAnThdFormulaEnum
        """
        ret = self.interface.vi_query(":HARM:THD?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IfxPwrAnThdFormulaEnum, ret)

    @ThdFormula.setter
    def ThdFormula(self, value):
        """The formula how the THD is calculated

        :type value: IfxPwrAnThdFormulaEnum
        """
        self.interface.vi_write(f":HARM:THD {value.value}")
        self.GetError()

    # Methods
    def ConfigureHarmonics(self, Frequencyband, PllSource, MinOrder, MaxOrder, ThdFormula):
        """Configures the most commonly used properties of the PwrAn Harmonics sub-system.

        :type Frequencyband: IfxPwrAnFrequencybandEnum
        :type PllSource: IfxPwrAnPllSourceEnum
        :type MinOrder: int
        :type MaxOrder: int
        :type ThdFormula: IfxPwrAnThdFormulaEnum
        """
        self.Frequencyband = Frequencyband
        self.PllSource = PllSource
        self.ThdFormula = ThdFormula
        self.SetOrder(MinOrder, MaxOrder)

    def SetOrder(self, MinOrder, MaxOrder):
        """Configures the min and max order for calculating the THD and the maximum output order of the numeric
        list data of harmonic measurement.

        :type MinOrder: int
        :type MaxOrder: int
        """
        if ((MinOrder == 0) or (MinOrder == 1)) and ((MaxOrder >= 1) and (MaxOrder <= 100)):
            self.interface.vi_write(":HARM:ORD %d,%d" % (MinOrder, MaxOrder))
            self.interface.vi_write(":NUM:LIST:ORD %d" % MaxOrder)
        self.GetError()
