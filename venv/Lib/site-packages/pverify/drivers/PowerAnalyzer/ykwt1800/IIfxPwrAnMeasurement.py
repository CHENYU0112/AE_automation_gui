# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

from pverify.drivers.PowerAnalyzer.ykwt1800 import IIfxPwrAnBase


class IIfxPwrAnMeasurement(IIfxPwrAnBase.IIfxPwrAnBase):
    """IfxPowerAnalyzer class-compliant measurement interface

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Methods:
        getValue()
            Returns the measured value defined when creating the Measurement-object
    """

    def __init__(self, parent, Element, PwrAnMeasItem, ItemCount, harmonic=False):
        IIfxPwrAnBase.IIfxPwrAnBase.__init__(self, parent)
        self._Element = Element
        self._PwrAnMeasItem = PwrAnMeasItem.value
        self._ItemCount = ItemCount
        self._harmonic = bool(harmonic)

        if self._harmonic:  # Harmonic item
            self.interface.vi_write(":NUM:LIST:ITEM%d %s,%s" % (self._ItemCount, self._PwrAnMeasItem, self._Element))
        else:  # Normal item
            if PwrAnMeasItem == self.Enums.IfxPwrAnMeasItemEnum.IfxPwrAnMeasItemVoltage:
                if self._measuringMode[Element] == self.Enums.IfxPwrAnMeasuringModeEnum.IfxPwrAnMeasuringModeRMS:
                    self._PwrAnMeasItem = "URMS"
                elif self._measuringMode[Element] == self.Enums.IfxPwrAnMeasuringModeEnum.IfxPwrAnMeasuringModeDC:
                    self._PwrAnMeasItem = "UDC"
                elif self._measuringMode[Element] == self.Enums.IfxPwrAnMeasuringModeEnum.IfxPwrAnMeasuringModeRMEAN:
                    self._PwrAnMeasItem = "URMN"
                elif self._measuringMode[Element] == self.Enums.IfxPwrAnMeasuringModeEnum.IfxPwrAnMeasuringModeMEAN:
                    self._PwrAnMeasItem = "UMN"
            elif PwrAnMeasItem == self.Enums.IfxPwrAnMeasItemEnum.IfxPwrAnMeasItemCurrent:
                if self._measuringMode[Element] == self.Enums.IfxPwrAnMeasuringModeEnum.IfxPwrAnMeasuringModeRMS:
                    self._PwrAnMeasItem = "IRMS"
                elif self._measuringMode[Element] == self.Enums.IfxPwrAnMeasuringModeEnum.IfxPwrAnMeasuringModeDC:
                    self._PwrAnMeasItem = "IDC"
                elif self._measuringMode[Element] == self.Enums.IfxPwrAnMeasuringModeEnum.IfxPwrAnMeasuringModeRMEAN:
                    self._PwrAnMeasItem = "IRMN"
                elif self._measuringMode[Element] == self.Enums.IfxPwrAnMeasuringModeEnum.IfxPwrAnMeasuringModeMEAN:
                    self._PwrAnMeasItem = "IMN"
            self.interface.vi_write(":NUM:NORM:ITEM%d %s,%s" % (self._ItemCount, self._PwrAnMeasItem, self._Element))
        self.GetError()

    @property
    def Value(self):
        """
        Returns the measured value

        :rtype: float
        """
        if self._harmonic:  # Harmonic/List item
            try:
                ord = self.interface.vi_query(":NUM:LIST:ORD?", rformat="%d")
                values = self.interface.vi_query(":NUM:LIST:VAL? %d" % self._ItemCount)
                values = list(map(float, values.split(",")))
                ret = values[1 : (ord + 2)]  # Remove the total value
            except Exception:
                return [float("nan")]

        else:  # Normal item
            try:
                ret = self.interface.vi_query(":NUM:VAL? %d" % self._ItemCount, rformat="%f")
            except Exception:
                return float("nan")

        self.GetError()
        return ret
