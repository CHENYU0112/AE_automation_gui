# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

from time import sleep

from pverify.drivers.PowerAnalyzer.ykwt1800 import IIfxPwrAnBase


class IIfxPwrAnIntegration(IIfxPwrAnBase.IIfxPwrAnBase):
    """IfxPowerAnalyzer class-compliant integration collection interface

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    """

    def __init__(self, parent):
        IIfxPwrAnBase.IIfxPwrAnBase.__init__(self, parent)

    @property
    def State(self):
        """
        Returns the integration state.

        :rtype: IfxPwrAnIntegrationStateEnum
        """
        ret = self.interface.vi_query("INTEG:STAT?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IfxPwrAnIntegrationStateEnum, ret)

    # Methods
    def StartIntegration(self):
        """
        Starts the integration.
        """
        if self.State == self.Enums.IfxPwrAnIntegrationStateEnum.IfxPwrAnIntegrationStateStart:
            self.StopIntegration()
        self.ResetIntegration()
        self.interface.vi_write(":INTEG:MODE NORM")
        self.interface.vi_write(":INTEG:STAR")
        self.GetError()

    def StopIntegration(self):
        """
        Stops the integration.
        """
        self.interface.vi_write(":INTEG:STOP")
        self.GetError()

    def ResetIntegration(self):
        """
        Resets the integration.
        """
        self.interface.vi_write(":INTEG:RES")
        self.GetError()

    def StartIntegrationWithTimer(self, Seconds, Wait=True):
        """
        Starts integration for a specific time.

        :param Seconds: The number of seconds to integrate.
        """
        TotalSeconds = Seconds
        _hours = Seconds // 3600
        Seconds -= _hours * 3600
        _minutes = Seconds // 60
        Seconds -= _minutes * 60
        _seconds = Seconds
        if self.State == self.Enums.IfxPwrAnIntegrationStateEnum.IfxPwrAnIntegrationStateStart:
            self.StopIntegration()
        self.ResetIntegration()
        self.interface.vi_write(":INTEG:TIM %d,%d,%d" % (_hours, _minutes, _seconds))
        self.StartIntegration()
        if Wait:
            timer = 0
            while self.State != self.Enums.IfxPwrAnIntegrationStateEnum.IfxPwrAnIntegrationStateTimeup and timer < (
                TotalSeconds + 5
            ):
                sleep(0.5)
                timer += 0.5
            if (
                timer >= TotalSeconds + 5
                and self.State == self.Enums.IfxPwrAnIntegrationStateEnum.IfxPwrAnIntegrationStateStart
            ):
                self.StopIntegration()
