# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

import numpy as np
from pyvisa.constants import VI_ATTR_TMO_VALUE

from pverify.drivers.PowerAnalyzer.ykwt500 import IIfxPwrAnBase


class IIfxPwrAnWaveform(IIfxPwrAnBase.IIfxPwrAnBase):
    """IfxPowerAnalyzer class-compliant waveform interface

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Methods:
        FetchWaveform()
            Returns a previously acquired waveform for this channel. The
            acquisition must be made prior to calling this method.
            Call this method separately for each channel.
    """

    def __init__(self, parent, Source):
        IIfxPwrAnBase.IIfxPwrAnBase.__init__(self, parent)
        self.Source = Source

    # Methods
    def ReadWaveform(self):
        """
        Initiates an acquisition on all enabled channels, waits for the acquisition to complete,
        and returns the waveform for this channel.

        :return: Returns a waveform datatype as dictionary of form {"time": <np.ndarray>, "data": <np.ndarray>}
        """
        xInitial = 0
        xIncrement = 1 / self.interface.vi_query(":WAV:SRAT?", rformat="%f")

        tmo = self.interface.get_visa_attribute(VI_ATTR_TMO_VALUE)
        self.interface.set_visa_attribute(VI_ATTR_TMO_VALUE, 5000)

        self.interface.vi_write(f"WAV:FORM ASC;BYT MSBF;TRAC {self.Source}")
        ret = self.interface.vi_query(":WAV:SEND?", rformat="%s")
        self.interface.set_visa_attribute(VI_ATTR_TMO_VALUE, tmo)
        if ret.find("NAN") > 0:
            msg = "Waveform could not be acquired (Data contains NAN strings)."
            raise Exception(msg)

        ret = list(map(float, ret.split(",")))
        data = np.array(ret).astype(np.float64)
        self.GetError()

        ret_wave = {}
        ret_wave["time"] = np.array([xInitial + xIncrement * i for i in range(len(data))])
        ret_wave["data"] = data
        return ret_wave
