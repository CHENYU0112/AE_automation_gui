from __future__ import annotations

import logging
import sys

import pyvisa.resources
from pyvisa import ResourceManager

from pverify.core.lab.driver_identity import Identity_SCPI, IdentityABC
from pverify.core.lab.ivi.helper import InstrumentError

from .ke2400_Channel import ke2400_Channel
from .ke2400_const import *

SIMULATION_MODE = False


class ke2400(IdentityABC):
    def __init__(self, logger: logging.Logger | None = None):
        self._simulation_mode = SIMULATION_MODE
        self._inst: pyvisa.resources.MessageBasedResource = None

        if isinstance(logger, logging.Logger):
            self._log = logger
        else:
            self._log = logging.getLogger(self.__class__.__name__)
            if len(self._log.handlers) == 0:  # only add streamhandler if none exists
                self._log.addHandler(logging.StreamHandler(sys.stdout))
            if self._simulation_mode:
                self._log.setLevel(logging.DEBUG)
            else:
                self._log.setLevel(logging.INFO)
        self.__Initialized = False
        self.__channels = {}
        """:type : dict[str,ke2400_Channel]"""

        from .ke2400_DevUtils import ke2400_DevUtils

        self.DevUtils = ke2400_DevUtils(self)

        from .ke2400_Trigger import ke2400_Trigger

        self.Trigger = ke2400_Trigger(self)

        from .ke2400_DirectIO import ke2400_DirectIO

        self.DirectIO = ke2400_DirectIO(self)

        from .ke2400_System import ke2400_System

        self.System = ke2400_System(self)

        from .ke2400_LowLevel import ke2400_LowLevel

        self.LowLevel = ke2400_LowLevel(self)

        self.__Identity = Identity_SCPI(parent=self, rsrc_attr_name="_inst")

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def drivername(self):
        return "ke2400"

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """

        if "simulate=true" in OptionString.lower():
            self._simulation_mode = True
            ResourceName = "GPIB0::1::INSTR"
            self._log.info("Instrument simulation activated!")

        if self.__Initialized:
            return

        self._rm = ResourceManager("@sim" if self._simulation_mode else "")
        self._inst = self._rm.open_resource(ResourceName)
        """:type : pyvisa.resources.gpib.GPIBInstrument"""
        self._inst.open()
        if not self._simulation_mode:
            self._inst.write_termination = "\n"
            self._inst.read_termination = "\n"
            self._inst.timeout = 2000

        try:
            self.LowLevel.Ke24xx_error_query()
        except InstrumentError as ie:
            self._log.debug(
                f"Suppressed errors:\n\tDescription: {ie.description}, Status: {ie.status}",
                exc_info=False,
            )

        # Dynamically assign channel objects
        self.ch1 = self.GetChannel(1)

        if Reset:
            self.System.Utility.ResetWithDefaults()
        self.System.ClearEventLog()

        # Disable beeper
        self._inst.write(":SYST:BEEP:STAT OFF")

        if not self._simulation_mode:
            self.LowLevel.Ke24xx_ConfigureSRQEvents(KE24XX_SRQ_ON_IDLE | KE24XX_SRQ_ON_OPERATION_COMPLETE)
            self.LowLevel.Ke24xx_PrepareRead(
                KE24XX_READ_VOLTAGE | KE24XX_READ_CURRENT | KE24XX_READ_RESISTANCE | KE24XX_READ_TIME,
                False,
            )

            self.LowLevel.Ke24xx_error_query()
            self.GoToLocal()

        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self.GoToLocal()
        self._inst.close()

    def GetChannel(self, Index):
        """
        Returns a channel instance

        :param Index: The channel index (1-based)
        :type Index: int
        :rtype: ke2400_Channel
        """
        cname = f"ch{Index:d}"
        if cname in self.__channels:
            return self.__channels[cname]
        else:
            chan = ke2400_Channel(self, cname)
            self.__channels[cname] = chan
            return chan

    def CheckError(self):
        """
        Checks if one or multiple errors occurred and raises an exception if this is the case
        """
        self.LowLevel.Ke24xx_error_query()

    def GoToLocal(self):
        self.LowLevel.Ke24xx_GTL()
