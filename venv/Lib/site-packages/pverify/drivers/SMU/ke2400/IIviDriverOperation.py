from __future__ import annotations


class IIviDriverOperation:
    def __init__(self, parent):
        self._parent = parent
        """:type: pverify.drivers.SMU.ke2400.ke2400_DevUtils.ke2400_DevUtils"""

    @property
    def LogicalName(self):
        raise NotImplementedError

    @property
    def IoResourceDescriptor(self):
        raise NotImplementedError

    @property
    def Cache(self):
        raise NotImplementedError

    @Cache.setter
    def Cache(self, value):
        """
        Drivers may choose to always cache some instrument settings, never
        cache others, and optionally cache others, to avoid unecessary I/O to
        the instrument.  If True, the driver caches optionally cached
        instrument settings.
        """
        raise NotImplementedError

    @property
    def InterchangeCheck(self):
        raise NotImplementedError

    @InterchangeCheck.setter
    def InterchangeCheck(self, value):
        """
        If True, the driver maintains a record of interchangeability warnings.
        If the driver does not support interchangeability checking, attempts
        to set InterchangeCheck to True return an error.
        """
        raise NotImplementedError

    @property
    def QueryInstrumentStatus(self):
        raise NotImplementedError

    @QueryInstrumentStatus.setter
    def QueryInstrumentStatus(self, value):
        """
        If True, the driver queries the instrument status at the end of each
        method or property that performs I/O to the instrument.  If an error
        is reported, use ErrorQuery to retrieve error messages one at a time
        from the instrument.
        """
        raise NotImplementedError

    @property
    def RangeCheck(self):
        raise NotImplementedError

    @RangeCheck.setter
    def RangeCheck(self, value):
        """
        Drivers may choose to always validate some property/parameter values,
        never validate others, and optionally validate others, to avoid
        sending invalid commands to the instrument.  If True, the driver
        performs optional validations.
        """
        raise NotImplementedError

    @property
    def RecordCoercions(self):
        raise NotImplementedError

    @RecordCoercions.setter
    def RecordCoercions(self, value):
        """
        If True, the driver keeps a list of the value coercions it makes for
        ViInt32 and ViReal64 attributes.  If the driver does not support
        coercion recording, attempts to set RecordCoercions to True will
        return an error.
        """
        raise NotImplementedError

    @property
    def Simulate(self):
        raise NotImplementedError

    @Simulate.setter
    def Simulate(self, value):
        """
        If True, the driver does not perform I/O to the instrument, and
        returns simulated values for output parameters.
        """
        raise NotImplementedError

    @property
    def DriverSetup(self):
        raise NotImplementedError

    def InvalidateAllAttributes(self):
        """
        Invalidates all of the driver's cached values.
        """
        raise NotImplementedError

    def ClearInterchangeWarnings(self):
        """
        Clears the list of interchangeability warnings that the IVI specific
        driver maintains.
        """
        raise NotImplementedError

    def GetNextInterchangeWarning(self):
        """
        Returns the oldest warning from the interchange warning list.  Records
        are only added to the list if InterchangeCheck is True.
        """
        raise NotImplementedError

    def ResetInterchangeCheck(self):
        """
        Resets the interchangeability checking algorithms of the driver so
        that methods and properties that executed prior to calling this
        function have no affect on whether future calls to the driver generate
        interchangeability warnings.
        """
        raise NotImplementedError

    def GetNextCoercionRecord(self):
        """
        Returns the oldest record from the coercion record list.  Records are
        only added to the list if RecordCoercions is True.
        """
        raise NotImplementedError
