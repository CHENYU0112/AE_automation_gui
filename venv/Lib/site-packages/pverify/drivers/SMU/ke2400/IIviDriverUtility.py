from __future__ import annotations

from .ke2400_const import *


class IIviDriverUtility:
    def __init__(self, parent):
        self._parent = parent
        """:type: pverify.drivers.SMU.ke2400.ke2400_System.ke2400_System"""

    def Reset(self):
        """
        Places the instrument in a known state and configures instrument
        options on which the IVI specific driver depends (for example,
        enabling/disabling headers).  For an IEEE 488.2 instrument, Reset
        sends the command string *RST to the instrument.
        """
        self._parent._inst.write("*RST")

    def ResetWithDefaults(self):
        """
        Does the equivalent of Reset and then, (1) disables class extension
        capability groups, (2) sets attributes to initial values defined by
        class specs, and (3) configures the driver to option string settings
        used when Initialize was last executed.
        """
        self._parent._inst.write("*RST")
        # Disable beeper
        self._parent._inst.write(":SYST:BEEP:STAT OFF")

        self._parent._parent.LowLevel.Ke24xx_ConfigureSRQEvents(KE24XX_SRQ_ON_IDLE | KE24XX_SRQ_ON_OPERATION_COMPLETE)
        self._parent._parent.LowLevel.Ke24xx_PrepareRead(
            KE24XX_READ_VOLTAGE | KE24XX_READ_CURRENT | KE24XX_READ_RESISTANCE | KE24XX_READ_TIME,
            False,
        )

    def Disable(self):
        """
        Quickly places the instrument in a state where it has no, or minimal,
        effect on the external system to which it is connected.  This state is
        not necessarily a known state.
        """
        raise NotImplementedError

    def SelfTest(self):
        """
        Performs an instrument self test, waits for the instrument to complete
        the test, and queries the instrument for the results.  If the
        instrument passes the test, TestResult is zero and TestMessage is
        'Self test passed'.
        """
        self._parent._inst.query("*TST?")

    def ErrorQuery(self):
        """
        Queries the instrument and returns instrument specific error
        information.  This function can be used when QueryInstrumentStatus is
        True to retrieve error details when the driver detects an instrument
        error.
        """
        self._parent._parent.LowLevel.Ke24xx_error_query()
