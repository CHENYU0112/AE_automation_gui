from __future__ import annotations

import numpy as np

from pverify import Waveform


class ke2400_Trace:
    def __init__(self, parent):
        self._parent = parent
        """:type : pverify.drivers.SMU.ke2400.ke2400_Measure.ke2400_Measure"""
        self._name = self._parent._name

    @property
    def _root(self):
        return self._parent._root

    @property
    def _inst(self):
        """
        The instrument visa resource
        """
        return self._root._inst

    def GetAverageReading(self, BufferName="defbuffer1"):
        """
        Returns the average reading calculated from all of the readings in the specified reading buffer.

        :param BufferName: not used - kept for compliance with ke2450
        """
        data = self.GetData(BufferName, "READ", True)[0]
        return np.mean(data)

    def GetMaximumReading(self, BufferName="defbuffer1"):
        """
        Returns the maximum reading value in the specified buffer

        :param BufferName: not used - kept for compliance with ke2450
        """
        data = self.GetData(BufferName, "READ", True)[0]
        return np.max(data)

    def GetMinimumReading(self, BufferName="defbuffer1"):
        """
        Returns the minimum reading value in the specified buffer

        :param BufferName: not used - kept for compliance with ke2450
        """
        data = self.GetData(BufferName, "READ", True)[0]
        return np.min(data)

    def GetPeak2PeakReading(self, BufferName="defbuffer1"):
        """
        Returns the peak-to-peak reading value in the specified buffer

        :param BufferName: not used - kept for compliance with ke2450
        """
        data = self.GetData(BufferName, "READ", True)[0]
        return np.ptp(data)

    def GetSDevReading(self, BufferName="defbuffer1"):
        """
        Returns the standard deviation of the readings in the specified buffer

        :param BufferName: not used - kept for compliance with ke2450
        """
        data = self.GetData(BufferName, "READ", True)[0]
        return np.std(data)

    def GetData(
        self,
        BufferName="defbuffer1",
        BufferElements="",
        Transposed=False,
        StartIndex=1,
        EndIndex=None,
    ):
        """
        Returns the reading buffer content as list of lists. See description of parameter "Transposed" to see how the returned data looks like.

        :param BufferElements: Specify the buffer elements. If nothing is defined, the source and measurement values are returned as list.

            | After comma delimeter give single space then give another BufferElement.

            READing:
                The measurement reading ; if no buffer elements are defined, this option is used

            SOURce:
                The source value; if readback is ON, then it is the readback value, otherwise it is the programmed source value.

            SOURUNIT:
                The unit of value associated with the source value

            TIME:
                The time for the data point

            UNIT:
                The unit of measure associated with the measurement
        :type BufferElements: str
        :param BufferName: not used - kept for compliance with ke2450
        :param Transposed:
            True:
                Returns data in form [[elem1_x1, elem1_x2, ..., elem1_xN], ..., [elemN_x1, elemN_x2, ..., elemN_xN]]

            False:
                Returns data in form [[elem1_x1, elem2_x1, ..., elemN_x1], ..., [elem1_xN, elem2_xN, ..., elemN_xN]]

        :type Transposed: bool
        :param StartIndex: Beginning index of the buffer to return. 1-based.
        :type StartIndex: int
        :param EndIndex: Ending index of the buffer to return. 1-based. If set to None, the actual buffer length is taken.
        :type EndIndex: int|NoneType
        :return: Returns a list of all requested buffer elements. Elements that can be converted to float are converted, other are returned as string.
        :rtype: list[list[str|float]]
        """
        data = self._inst.query_ascii_values(":FETCH?")

        data = self._root.LowLevel._ExtractData(BufferElements, data, self._parent._parent._measure_fct, raw=True)

        if EndIndex is not None:
            EndIndex -= 1
        data = data[:, slice(max(1, StartIndex) - 1, EndIndex)]
        if not bool(Transposed):
            data = data.transpose()

        ret = np.zeros(data.shape).tolist()
        for r in range(data.shape[0]):
            for c in range(data.shape[1]):
                try:
                    ret[r][c] = float(data[r][c])
                except Exception:
                    ret[r][c] = data[r][c]
        return ret

    def GetReadingWaveform(self, BufferName="defbuffer1", StartIndex=1, EndIndex=None):
        """
        Returns the reading as Waveform.

        :param BufferName: The name of the buffer where the reading is stored.
        :type BufferName: str
        :param StartIndex: Beginning index of the buffer to return. 1-based.
        :type StartIndex: int|float
        :param EndIndex: Ending index of the buffer to return. 1-based. If set to None, the actual buffer length is taken.
        :type EndIndex: int|float|NoneType
        :rtype: Waveform
        """
        time, data = self.GetData(BufferName, "REL, READ", True, StartIndex, EndIndex)
        return Waveform(data=data, time=time)

    def GetSourceWaveform(self, BufferName="defbuffer1", StartIndex=1, EndIndex=None):
        """
        Returns the reading as Waveform.

        :param BufferName: The name of the buffer where the reading is stored.
        :type BufferName: str
        :param StartIndex: Beginning index of the buffer to return. 1-based.
        :type StartIndex: int|float
        :param EndIndex: Ending index of the buffer to return. 1-based. If set to None, the actual buffer length is taken.
        :type EndIndex: int|float
        :rtype: Waveform
        """
        time, data = self.GetData(BufferName, "REL, SOUR", True, StartIndex, EndIndex)
        return Waveform(data=data, time=time)
