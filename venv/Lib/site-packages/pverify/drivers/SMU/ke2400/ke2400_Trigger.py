from __future__ import annotations

from time import sleep, time

from .ke2400_const import *


class ke2400_Trigger:
    def __init__(self, parent):
        self._parent = parent
        """:type : pverify.drivers.SMU.ke2400.ke2400.ke2400"""

    @property
    def _root(self):
        return self._parent

    @property
    def _inst(self):
        """
        The instrument visa resource
        """
        return self._root._inst

    def Abort(self):
        """
        returns the power supply to the ignore triggers state if the power supply is currently waiting for a trigger to change the output signal.
        If the power supply is not waiting for a trigger, this method does nothing.
        """
        self._root.LowLevel.Ke24xx_Abort()

    def Initiate(self):
        """
        causes the power supply to wait for a trigger if the power supply is not currently waiting for a trigger.
        If the power supply is already waiting for a trigger, this method does nothing.

        This method clears the status bytes. Use method "Wait4Idle" to wait for the current trigger model to complete.
        """
        self._root.LowLevel.Ke24xx_ClearEventRegisters()
        self._root.LowLevel.Ke24xx_Initiate()

    def Wait4Idle(self, Timeout=10):
        """
        Waits until the operation event register != 0 or maximum <Timeout> seconds.

        :param Timeout: The timeout in seconds. If the current trigger model does not reach the Idle state within this time, an exception is raised.
        :raises: TimeoutError
        """
        sleep(0.05)
        tmo = self._inst.timeout
        self._inst.timeout = int(Timeout * 1000)
        if self._root.LowLevel.Ke24xx_GetIdleCondition():
            self._inst.timeout = tmo
            return

        tstart = time()
        t = time()
        while t - tstart < Timeout:
            if self._root.LowLevel.Ke24xx_GetIdleEvent():
                self._inst.timeout = tmo
                return
            else:
                sleep(0.2)
                t = time()
        self._inst.timeout = tmo
        msg = f"Trigger model did not reach Idle state within {Timeout}s."
        raise TimeoutError(msg)

    def ConfigureSimpleLoopTrigger(self, Count, Delay=0, ReadingBufferBufferSize=None, ReadingBuffer=None):
        """
        Loads a predefined trigger model configuration.
        This trigger model sets up a loop that sets a delay, makes a measurement, and then repeats the loop the number of times you defined in the count parameter

        :param Count: The number of measurements to make.
        :type Count: int|float
        :param Delay: The time before the measurement in seconds; default is 0
        :type Delay: int|float
        :param ReadingBufferBufferSize: not used - kept for compliance with ke2450
        :param ReadingBuffer: not used - kept for compliance with ke2450
        """
        self._root.LowLevel.Ke24xx_SetFixedMode()
        self._root.LowLevel.Ke24xx_ConfigureArmLayer(1, KE24XX_TRIG_ON_GET, 0, 0)
        self._root.LowLevel.Ke24xx_ConfigureTriggerLayer(Count, KE24XX_TRIG_ON_IMMEDIATE, Delay)

    def ConfigureDurationLoopTrigger(self, Duration, Delay=0, ReadingBufferBufferSize=None, ReadingBuffer=None):
        """
        Loads a predefined trigger model configuration.

        :param Duration: The amount of time for which to take measurements (seconds)
        :type Duration: int|float
        :param Delay: The time before the measurement in seconds; default is 0
        :type Delay: int|float
        :param ReadingBufferBufferSize: not used - kept for compliance with ke2450
        :param ReadingBuffer: not used - kept for compliance with ke2450
        """
        self._root.LowLevel.Ke24xx_SetFixedMode()
        Count = int(float(Duration) / float(Delay))
        self._root.LowLevel.Ke24xx_ConfigureArmLayer(1, KE24XX_TRIG_ON_GET, 0, 0)
        self._root.LowLevel.Ke24xx_ConfigureTriggerLayer(Count, KE24XX_TRIG_ON_IMMEDIATE, Delay)

    def ConfigureConfigListTrigger(
        self,
        MeasureConfigList,
        SourceConfigList,
        Delay=0,
        ReadingBufferBufferSize=None,
        ReadingBuffer=None,
    ):
        """
        not used - kept for compliance with ke2450
        """
        raise NotImplementedError

    def ResetTriggerModel(self):
        """
        Resets the trigger model
        """
        self._inst.write(":TRIG:CLE")
        self._root.LowLevel.Ke24xx_ConfigureArmLayer(1, KE24XX_TRIG_ON_IMMEDIATE, 0, 0)
        self._root.LowLevel.Ke24xx_ConfigureTriggerLayer(1, KE24XX_TRIG_ON_IMMEDIATE, 0)
