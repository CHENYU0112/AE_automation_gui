from __future__ import annotations

from . import ke2400_const


class ke2400_System:
    def __init__(self, parent):
        self._parent = parent
        """:type : pverify.drivers.SMU.ke2400.ke2400.ke2400"""

        from .IIviDriverUtility import IIviDriverUtility

        self.Utility = IIviDriverUtility(self)

    @property
    def _inst(self):
        """
        The instrument visa resource
        """
        return self._parent._inst

    def SetCurrentTime(self):
        """
        Configures the current time in the instrument
        """
        raise NotImplementedError

    def SelectFrontTerminal(self):
        """
        Select the front terminal for measurements
        """
        self._parent.LowLevel.Ke24xx_SelectTerminals(ke2400_const.KE24XX_USE_FRONT_TERMINALS)

    def SelectRearTerminal(self):
        """
        Select the rear terminal for measurements
        """
        self._parent.LowLevel.Ke24xx_SelectTerminals(ke2400_const.KE24XX_USE_REAR_TERMINALS)

    def Beep(self, Frequency, Time):
        """
        Generates an audible tone at a specified frequency and time duration

        :param Frequency: The frequency of the beep (20 to 20000).
        :param Time: The amount of time to play the tone in seconds (0.001 to 100).
        """
        if Frequency > 0 and Time > 0:
            self._parent.LowLevel.Ke24xx_EnableBeeper(True)
            self._inst.write(f":SYST:BEEP {float(Frequency)}, {float(Time)}")
        else:
            self._parent.LowLevel.Ke24xx_EnableBeeper(False)

    def ClearEventLog(self):
        """
        Clears messages from error log.
        """
        self._inst.write("*CLS;:SYST:CLE")

    def BufferCreate(self, BufferName, BufferSize):
        """
        not used - kept for compliance with ke2450
        """
        raise NotImplementedError

    def BufferClear(self, BufferName="defbuffer1"):
        """
        not used - kept for compliance with ke2450
        """
        raise NotImplementedError

    def BufferDelete(self, BufferName):
        """
        not used - kept for compliance with ke2450
        """
        raise NotImplementedError

    def BufferModify(self, BufferName="defbuffer1", BufferSize=None, BufferFillMode=None):
        """
        not used - kept for compliance with ke2450
        """
        raise NotImplementedError

    def BufferGetActualSize(self, BufferName="defbuffer1"):
        """
        not used - kept for compliance with ke2450
        """
        raise NotImplementedError

    def DisplayMessage(self, linenr, message):
        """
        Defines the text that is displayed on the front-panel User Display screen.

        :param linenr: The line of the User Display on which to display text. Valid values: 1 (top), 2 (bottom)
        :type linenr: int
        :param message: String that contains the message; up to 20 characters for line 1 and 20 characters for line 2.
        :type message: str
        """
        if linenr == 1:
            self._inst.write(f":DISP:WIND1:TEXT:DATA '{message[:20]}'")
        elif linenr == 2:
            self._inst.write(f":DISP:WIND2:TEXT:DATA '{message[:20]}'")
        else:
            msg = "Invalid line number!"
            raise ValueError(msg)
        self._parent.CheckError()

    def DisplayMessageClear(self):
        """
        Clears the text that is displayed on the front-panel User Display screen.
        """
        self._inst.write(":DISP:WIND1:TEXT:DATA ''")
        self._inst.write(":DISP:WIND2:TEXT:DATA ''")

    def DisplayScreen(self, screen):
        """
        Sets the displayed front-panel screen.

        :param screen: The name of the screen to activate. Valid values: HOME|SOURce|PLOT|USER|STAT|SETTings|GRAPh|DATasheet
        :type screen: str
        """
        screen = str(screen).upper()
        if "HOME" in screen:
            self._inst.write(":DISP:WIND1:TEXT:STAT 0")
            self._inst.write(":DISP:WIND2:TEXT:STAT 0")
            self._inst.write(":DISP:CND")
        elif "MSG" in screen or "MESSAGE" in screen:
            self._inst.write(":DISP:WIND1:TEXT:STAT 1")
            self._inst.write(":DISP:WIND2:TEXT:STAT 1")
        else:
            msg = "Invalid value for parameter 'screen'. Valid values: HOME|MSG"
            raise ValueError(msg)
        self._parent.CheckError()

    def _BeepImperialMarch(self):
        from time import sleep

        seq = (
            (440, 500),
            (440, 500),
            (349, 350),
            (523, 150),
            (440, 500),
            (349, 350),
            (523, 150),
            (440, 1000),
            (659, 500),
            (659, 500),
            (659, 500),
            (698, 350),
            (523, 150),
            (415, 500),
            (349, 350),
            (523, 150),
            (440, 1000),
        )
        for f, d in seq:
            self.Beep(f, d / 1000.0)
            sleep(0.5)
