from __future__ import annotations

from time import sleep

from pverify.core.lab.ivi.helper import InstrumentError

from .ke2400_const import *


class ke2400_Source_X:
    def __init__(self, parent, function):
        self._parent = parent
        """:type : pverify.drivers.SMU.ke2400.ke2400_Source.ke2400_Source"""
        self._name = self._parent._name
        self._function = function

    @property
    def _root(self):
        return self._parent._parent._parent

    @property
    def _inst(self):
        """
        The instrument visa resource
        """
        return self._root._inst

    def __ConfigureSourceSweep(self, sourceFunction, spacing, direction, ranging, start, stop, numberofPoints):
        if sourceFunction == "VOLT":
            self._root.LowLevel.Ke24xx_ConfigureSourceSweep(
                KE24XX_SOURCE_VOLTAGE_FUNCTION,
                spacing,
                direction,
                ranging,
                start,
                stop,
                numberofPoints,
            )
            self._root.LowLevel.Ke24xx_ConfigureSourceMode(KE24XX_SOURCE_VOLTAGE_FUNCTION, KE24XX_SOURCE_SWEEP_MODE)
        else:
            self._root.LowLevel.Ke24xx_ConfigureSourceSweep(
                KE24XX_SOURCE_CURRENT_FUNCTION,
                spacing,
                direction,
                ranging,
                start,
                stop,
                numberofPoints,
            )
            self._root.LowLevel.Ke24xx_ConfigureSourceMode(KE24XX_SOURCE_CURRENT_FUNCTION, KE24XX_SOURCE_SWEEP_MODE)

    def ConfigureSource(
        self,
        Amplitude=None,
        SourceMode=None,
        Range=None,
        AutoRange=None,
        HiCapMode=None,
        ReadBackState=None,
        AutoDelay=None,
    ):
        """
        Configures the SMU sourcing for the current selected function

        :param Amplitude: the source amplitude
        :type Amplitude: int|float
        :param SourceMode: The source mode. Valid values "norm", "himp", "zero", "guard".

                            When the Model 2450 is set to the normal output-off state, the following settings are made when the source is turned off:

                                - The measurement sense is set to 2-wire
                                - The voltage source is selected and set to 0 V
                                - The current limit is set to 10 % of the full scale of the present measurement function autorange value
                                - If source readback is off, Output Off is displayed in the Home screen Source area
                                - If source readback is on, the actual measurement is displayed in the Home screen Source area
                                - If measurement is set to resistance, dashes (--.----) are shown in the Home screen Source area
                                - The Source button on the Home screen shows the value that will be sourced when the output is turned on again

                            When the high-impedance output-off state is selected and the output is turned off:

                                - The measurement sense is set to 2-wire
                                - The output relay opens, disconnecting the instrument as a load

                                Opening the relay disconnects external circuitry from the inputs and outputs of the instrument. To
                                prevent excessive wear on the output relay, do not use this output-off state for tests that turn the
                                output off and on frequently.
                                The high-impedance output-off state should be used when the instrument is connected to a power
                                source or another source-measure instrument. In some cases, it may also be appropriate for devices
                                such as capacitors.


                            When the zero output-off state is selected and you turn off the output:

                                - The measurement sense is changed to 2-wire
                                - The voltage source is selected and set to 0
                                - The range is set to the presently selected range (turn off autorange)
                                - If the source is voltage, the current limit is not changed
                                - If the source is current, the current limit is set to the programmed source current value or to 10 %
                                  full scale of the present current range, whichever is greater

                                When the zero output-off state is selected, you can use the instrument as an ammeter because it is
                                outputting 0 V.

                            When the guard output-off state is selected and the output is turned off, the following actions occur:

                                - The measurement sense is changed to 2-wire
                                - The current source is selected and set to 0 A if the source is set to current (amps); otherwise, the
                                  output remains a voltage source when the output is turned off
                                - The voltage limit is set to 10 % full scale of the present voltage range

                            Note that the front-panel display does not reflect all of the changes. For example, the 4-wire display

        :type SourceMode: str
        :param Range: Sets or queries the range for the source for the selected source function.
        :type Range: int|float
        :param AutoRange: Enables or disables automatic range selection for the source for the selected source function.
        :type AutoRange: bool
        :param HiCapMode: not used - kept for compliance with ke2450
        :param ReadBackState: not used - kept for compliance with ke2450
        :param AutoDelay: not used - kept for compliance with ke2450
        """
        if Range is not None:
            self._inst.write(f":SOUR:{self._function}:RANG {Range:f}")

        if AutoRange is not None:
            self._inst.write(":SOUR:{}:RANG:AUTO {}".format(self._function, ["OFF", "ON"][int(bool(AutoRange))]))

        if Amplitude is not None:
            if AutoRange:
                self._inst.write(f":SOUR:{self._function} {Amplitude:f}")
            if Range is not None:
                if Amplitude < Range:
                    self._inst.write(f":SOUR:{self._function} {Amplitude:f}")
                else:
                    msg = f"Amplitude must be in range: {Range}"
                    raise InstrumentError(msg)

        if SourceMode is not None:
            SourceMode = str(SourceMode).lower()
            if "norm" in SourceMode:
                sm = "NORM"
            elif "imp" in SourceMode:
                sm = "HIMP"
            elif "zero" in SourceMode:
                sm = "ZERO"
            elif "guard" in SourceMode:
                sm = "GUAR"
            else:
                msg = "Invalid value for parameter 'SourceMode'. Valid: 'norm', 'himp', 'zero', 'guard'."
                raise ValueError(msg)

            self._inst.write(f":OUTP:SMOD {sm}")

        if HiCapMode is not None:
            raise NotImplementedError

        if ReadBackState is not None:
            raise NotImplementedError

        if AutoDelay is not None:
            raise NotImplementedError

        sleep(0.3)
        self._root.CheckError()

    def ConfigureLinearSweep(
        self,
        Start,
        Stop,
        Points,
        Delay,
        RangeType="auto",
        Count=1,
        FailAbort=True,
        Dual=False,
        BufferName="defbuffer1",
    ):
        """
        Configures a linear sweep for a set number of measurement points

        :param Start: The voltage or current source level at which the sweep starts. Current: -1.05 A to 1.05 A, Voltage: -210 V to 210 V
        :type Start: int|float
        :param Stop: The voltage or current at which the sweep stops. Current: -1.05 A to 1.05 A, Voltage: -210 V to 210 V
        :type Stop: int|float
        :param Points: The number of source-measure points between the start and stop values of the sweep (2 to 1e6);
                       to calculate the number of source-measure points in a sweep, use the following formula: Points = [(Stop - Start) / Step] + 1
        :type Points: int|float
        :param Delay: The delay between measurement points. 50 Âµs to 10 ks
        :type Delay: int|float
        :param RangeType: The source range that is used for the sweep. Valid values: "auto", "fixed", "best"

                          auto:
                               The instrument selects the most sensitive source range for each source level in the sweep
                          fixed
                               The source remains on the range that is set when the sweep is started.
                               If a sweep point exceeds the source range capability, the source will output the maximum level for that range.
                          best
                               The instrument selects a single fixed source range that will accommodate all the source levels in the sweep.
                               This avoids overshoots during sweeps
        :type RangeType: str
        :param Count: The number of times to run the sweep
        :type Count: int|float
        :param FailAbort: not used - kept for compliance with ke2450
        :param Dual: not used - kept for compliance with ke2450
        :param BufferName: not used - kept for compliance with ke2450
        """
        RangeType = str(RangeType).lower()
        if "auto" in RangeType:
            rt = "AUTO"
        elif "fix" in RangeType:
            rt = "FIX"
        elif "best" in RangeType:
            rt = "BEST"
        else:
            msg = "Invalid value for parameter 'RangeType'. Valid: 'auto', 'fixed', 'best'."
            raise ValueError(msg)

        self._root.LowLevel.Ke24xx_ConfigureArmLayer(1, KE24XX_TRIG_ON_GET, 0, 0)
        self._root.LowLevel.Ke24xx_ConfigureTriggerLayer(int(Points * Count), KE24XX_TRIG_ON_IMMEDIATE, Delay)
        self.__ConfigureSourceSweep(self._function, KE24XX_SWEEP_SPACING_LINEAR, None, rt, Start, Stop, Points)
        self._root.CheckError()

    def ConfigureLogarithmicSweep(
        self,
        Start,
        Stop,
        Points,
        Delay,
        RangeType="auto",
        Count=1,
        FailAbort=True,
        Dual=False,
        BufferName="defbuffer1",
    ):
        """
        Configure a logarithmic sweep for a set number of measurement points

        log step size = [log10(stop) - log10(start)] / (points - 1)

        :param Start: The voltage or current source level at which the sweep starts. Current: 1 pA to 1.05 A, Voltage: 1 pV to 210 V
        :type Start: int|float
        :param Stop: The voltage or current at which the sweep stops. Current: 1 pA to 1.05 A, Voltage: 1 pV to 210 V
        :type Stop: int|float
        :param Points: The number of source-measure points between the start and stop values of the sweep (2 to 1e6);
                       to calculate the number of source-measure points in a sweep, use the following formula: Points = [(Stop - Start) / Step] + 1
        :type Points: int|float
        :param Delay: The delay between measurement points. 50 Âµs to 10 ks
        :type Delay: int|float
        :param RangeType: The source range that is used for the sweep. Valid values: "auto", "fixed", "best"

                          auto:
                               The instrument selects the most sensitive source range for each source level in the sweep
                          fixed
                               The source remains on the range that is set when the sweep is started.
                               If a sweep point exceeds the source range capability, the source will output the maximum level for that range.
                          best
                               The instrument selects a single fixed source range that will accommodate all the source levels in the sweep.
                               This avoids overshoots during sweeps
        :type RangeType: str
        :param Count: The number of times to run the sweep
        :type Count: int|float
        :param FailAbort: not used - kept for compliance with ke2450
        :param Dual: not used - kept for compliance with ke2450
        :param BufferName: not used - kept for compliance with ke2450
        """
        RangeType = str(RangeType).lower()
        if "auto" in RangeType:
            rt = "AUTO"
        elif "fix" in RangeType:
            rt = "FIX"
        elif "best" in RangeType:
            rt = "BEST"
        else:
            msg = "Invalid value for parameter 'RangeType'. Valid: 'auto', 'fixed', 'best'."
            raise ValueError(msg)

        self._root.LowLevel.Ke24xx_ConfigureArmLayer(1, KE24XX_TRIG_ON_GET, 0, 0)
        self._root.LowLevel.Ke24xx_ConfigureTriggerLayer(int(Points * Count), KE24XX_TRIG_ON_IMMEDIATE, Delay)
        self.__ConfigureSourceSweep(self._function, KE24XX_SWEEP_SPACING_LOG, None, rt, Start, Stop, Points)
        self._root.CheckError()

    def ConfigureLinearSweepStep(
        self,
        Start,
        Stop,
        Step,
        Delay,
        RangeType="auto",
        Count=1,
        FailAbort=True,
        Dual=False,
        BufferName="defbuffer1",
    ):
        """
        Configures a linear source sweep configuration list and trigger model with a fixed number of steps

        :param Start: The voltage or current source level at which the sweep starts. Current: -1.05 A to 1.05 A, Voltage: -210 V to 210 V
        :type Start: int|float
        :param Stop: The voltage or current at which the sweep stops. Current: -1.05 A to 1.05 A, Voltage: -210 V to 210 V
        :type Stop: int|float
        :param Step: The step size at which the source level will change
        :type Step: int|float
        :param Delay: The delay between measurement points. 50 Âµs to 10 ks
        :type Delay: int|float
        :param RangeType: The source range that is used for the sweep. Valid values: "auto", "fixed", "best"

                          auto:
                               The instrument selects the most sensitive source range for each source level in the sweep
                          fixed
                               The source remains on the range that is set when the sweep is started.
                               If a sweep point exceeds the source range capability, the source will output the maximum level for that range.
                          best
                               The instrument selects a single fixed source range that will accommodate all the source levels in the sweep.
                               This avoids overshoots during sweeps
        :type RangeType: str
        :param Count: The number of times to run the sweep
        :type Count: int|float
        :param FailAbort: not used - kept for compliance with ke2450
        :param Dual: not used - kept for compliance with ke2450
        :param BufferName: not used - kept for compliance with ke2450
        """
        RangeType = str(RangeType).lower()
        if "auto" in RangeType:
            rt = "AUTO"
        elif "fix" in RangeType:
            rt = "FIX"
        elif "best" in RangeType:
            rt = "BEST"
        else:
            msg = "Invalid value for parameter 'RangeType'. Valid: 'auto', 'fixed', 'best'."
            raise ValueError(msg)

        Points = round((Stop - Start) / Step) + 1

        self._root.LowLevel.Ke24xx_ConfigureArmLayer(1, KE24XX_TRIG_ON_GET, 0, 0)
        self._root.LowLevel.Ke24xx_ConfigureTriggerLayer(int(Points * Count), KE24XX_TRIG_ON_IMMEDIATE, Delay)
        self.__ConfigureSourceSweep(self._function, KE24XX_SWEEP_SPACING_LINEAR, None, rt, Start, Stop, Points)
        self._root.CheckError()

    def ConfigureListSweep(self, Values, Ranges, Delay, BufferName="defbuffer1"):
        """
        Configures the sweep based on a configuration list.

        :param Values: A list of source values to sweep
        :type Values: list[int|float]
        :param Ranges: not used - kept for compliance with ke2450
        :param Delay: The delay between measurement points. 50 Âµs to 10 ks
        :type Delay: int|float
        :param BufferName: not used - kept for compliance with ke2450
        """
        Count = len(Values)

        self._root.LowLevel.Ke24xx_ConfigureArmLayer(1, KE24XX_TRIG_ON_GET, 0, 0)
        self._root.LowLevel.Ke24xx_ConfigureTriggerLayer(Count, KE24XX_TRIG_ON_IMMEDIATE, Delay)

        if self._function == "VOLT":
            self._root.LowLevel.Ke24xx_ConfigureSourceMode(KE24XX_SOURCE_VOLTAGE_FUNCTION, KE24XX_SOURCE_LIST_MODE)
            self._root.LowLevel.Ke24xx_ConfigureSourceList(KE24XX_SOURCE_VOLTAGE_FUNCTION, [float(v) for v in Values])
        else:
            self._root.LowLevel.Ke24xx_ConfigureSourceMode(KE24XX_SOURCE_CURRENT_FUNCTION, KE24XX_SOURCE_LIST_MODE)
            self._root.LowLevel.Ke24xx_ConfigureSourceList(KE24XX_SOURCE_CURRENT_FUNCTION, [float(v) for v in Values])
        self._root.CheckError()


class ke2400_Source_V(ke2400_Source_X):
    def __init__(self, parent):
        ke2400_Source_X.__init__(self, parent, "VOLT")

    def SetCurrentLimit(self, limit):
        """
        Sets the limit for measurements of the voltage function.

        :type limit: int|float
        """
        self._root.LowLevel.Ke24xx_ConfigureSourceCompliance("CURR", limit)
        self._root.CheckError()


class ke2400_Source_I(ke2400_Source_X):
    def __init__(self, parent):
        ke2400_Source_X.__init__(self, parent, "CURR")

    def SetVoltageLimit(self, limit):
        """
        Sets the limit for measurements of the current function.

        :type limit: int|float
        """
        self._root.LowLevel.Ke24xx_ConfigureSourceCompliance("VOLT", limit)
        self._root.CheckError()
