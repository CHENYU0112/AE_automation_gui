from __future__ import annotations

from .ke2450_dllwrap import *
from .ke2450_Source_ConfigLists import ke2450_Source_ConfigLists
from .ke2450_Source_X import ke2450_Source_I, ke2450_Source_V


class ke2450_Source:
    def __init__(self, parent):
        self._parent = parent
        """:type : pverify.drivers.SMU.ke2450.ke2450_Channel.ke2450_Channel"""
        self._name = self._parent._name

        self.__Voltage = ke2450_Source_V(self)
        self.__Current = ke2450_Source_I(self)
        self.__ConfigLists = ke2450_Source_ConfigLists(self)

    @property
    def Voltage(self):
        """
        If the source mode is set to voltage, use this property to access the voltage sourcing subclass
        """
        return self.__Voltage

    @property
    def Current(self):
        """
        If the source mode is set to current, use this property to access the current sourcing subclass
        """
        return self.__Current

    @property
    def ConfigLists(self):
        """
        Use this property to access the ConfigLists sourcing subclass
        """
        return self.__ConfigLists

    @property
    def _vi(self):
        """
        The instrument IO session
        """
        return self._parent._vi

    @property
    def _dllwrap(self):
        """
        The Python dll wrapper module
        """
        return self._parent._dllwrap

    def SetOutputEnabled(self, Enabled):
        """
        Configures whether the signal that the power supply produces appears at the output connector.

        :type Enabled: bool
        """
        self._dllwrap.ConfigureOutputEnabled(self._vi, self._name, bool(Enabled))

    def SetVoltageProtectionLevel(self, level=None):
        """
        Sets the overvoltage protection setting of the source output.

        :param level: The voltage protection level. Following levels are valid: 0(None),2,5,10,20,40,60,80,100,120,140,160,180 or None.
                      Levels between will be rounded to the next bigger valid level.
        :type level: int|float
        """
        if level is None or level <= 0:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELNONE
        elif 0 < level <= 2:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELPROT2
        elif 2 < level <= 5:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELPROT5
        elif 5 < level <= 10:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELPROT10
        elif 10 < level <= 20:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELPROT20
        elif 20 < level <= 40:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELPROT40
        elif 40 < level <= 60:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELPROT60
        elif 60 < level <= 80:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELPROT80
        elif 80 < level <= 100:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELPROT100
        elif 100 < level <= 120:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELPROT120
        elif 120 < level <= 140:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELPROT140
        elif 140 < level <= 160:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELPROT160
        elif 160 < level <= 180:
            lv = KE2450_VAL_VOLTAGE_PROTECTION_LEVELPROT180
        else:
            msg = "Cannot set protection level to greater than 180!"
            raise ValueError(msg)

        self._dllwrap.SetVoltageProtectionLevel(self._vi, lv)
