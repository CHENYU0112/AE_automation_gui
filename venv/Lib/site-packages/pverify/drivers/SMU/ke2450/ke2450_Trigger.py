from __future__ import annotations

from time import sleep, time

from .ke2450_const import *


class ke2450_Trigger:
    def __init__(self, parent):
        self._parent = parent
        """:type : pverify.drivers.SMU.ke2450.ke2450.ke2450"""

    @property
    def _vi(self):
        """
        The instrument IO session
        """
        return self._parent._vi

    @property
    def _dllwrap(self):
        """
        The Python dll wrapper module
        """
        return self._parent._dllwrap

    def Abort(self):
        """
        returns the power supply to the ignore triggers state if the power supply is currently waiting for a trigger to change the output signal.
        If the power supply is not waiting for a trigger, this method does nothing.
        """
        self._dllwrap.Abort(self._vi)

    def Initiate(self):
        """
        causes the power supply to wait for a trigger if the power supply is not currently waiting for a trigger.
        If the power supply is already waiting for a trigger, this method does nothing.

        This method clears the status bytes. Use method "Wait4Idle" to wait for the current trigger model to complete.
        """
        self._parent.DirectIO.Write("STAT:CLE")  # Clear the status byte

        # Map bit 0 of operational status register to set on trigger
        # model exit (2732) and clear on trigger model enter (2731).
        self._dllwrap.MapEventIDToBitNumberInOERegister(self._vi, 0, 2732, 2731)

        # Enable bit 0 to flow through to the status byte
        self._dllwrap.SetAttributeViInt32(self._vi, "", KE2450_ATTR_ENABLE_OPERATION_EVENT_REGISTER, 1)

        # Enable the Operational Summary Bit to set the Master -- Summary Bit/RQS
        self._parent.DirectIO.Write("*SRE 128")

        # Initiate trigger model
        self._dllwrap.Initiate(self._vi)

    def Wait4Idle(self, Timeout=10):
        """
        Waits until the operation event register != 0 or maximum <Timeout> seconds.

        :param Timeout: The timeout in seconds. If the current trigger model does not reach the Idle state within this time, an exception is raised.
        :raises: TimeoutError
        """
        tstart = time()
        t = time()
        while t - tstart < Timeout:
            if self._dllwrap.ReadOperationEventRegister(self._vi):
                return
            else:
                sleep(0.25)
                t = time()
        msg = f"Trigger model did not reach Idle state within {Timeout}s."
        raise TimeoutError(msg)

    def ConfigureSimpleLoopTrigger(self, Count, Delay=0, ReadingBufferBufferSize=100000, ReadingBuffer="defbuffer1"):
        """
        Loads a predefined trigger model configuration.
        This trigger model sets up a loop that sets a delay, makes a measurement, and then repeats the loop the number of times you defined in the count parameter

        :param Count: The number of measurements to make.
        :type Count: int|float
        :param Delay: The time before the measurement in seconds; default is 0
        :type Delay: int|float
        :param ReadingBufferBufferSize: Number of elements in ReadingBuffer.
        :type ReadingBufferBufferSize: int|float
        :param ReadingBuffer: A string that indicates the reading buffer
        :type ReadingBuffer: str
        """
        self._dllwrap.LoadTriggerModelLoopSimple(self._vi, Count, Delay, ReadingBufferBufferSize, ReadingBuffer)

    def ConfigureDurationLoopTrigger(
        self,
        Duration,
        Delay=0,
        ReadingBufferBufferSize=100000,
        ReadingBuffer="defbuffer1",
    ):
        """
        Loads a predefined trigger model configuration.

        :param Duration: The amount of time for which to take measurements (seconds)
        :type Duration: int|float
        :param Delay: The time before the measurement in seconds; default is 0
        :type Delay: int|float
        :param ReadingBufferBufferSize: Number of elements in ReadingBuffer.
        :type ReadingBufferBufferSize: int|float
        :param ReadingBuffer: A string that indicates the reading buffer
        :type ReadingBuffer: str
        """
        self._dllwrap.LoadTriggerModelLoopDuration(self._vi, Duration, Delay, ReadingBufferBufferSize, ReadingBuffer)

    def ConfigureConfigListTrigger(
        self,
        MeasureConfigList,
        SourceConfigList,
        Delay=0,
        ReadingBufferBufferSize=100000,
        ReadingBuffer="defbuffer1",
    ):
        """
        Loads a predefined trigger model configuration that uses source and measure configuration lists

        :param MeasureConfigList: The configuration list that contains the measurement settings to be used for this trigger model.
        :type MeasureConfigList: str
        :param SourceConfigList: The configuration list that contains the source settings to be used for this trigger model
        :type SourceConfigList: str
        :param Delay: The time before the measurement in seconds; default is 0
        :type Delay: int|float
        :param ReadingBufferBufferSize: Number of elements in ReadingBuffer.
        :type ReadingBufferBufferSize: int|float
        :param ReadingBuffer: A string that indicates the reading buffer
        :type ReadingBuffer: str
        """
        self._dllwrap.LoadTriggerModelList(
            self._vi,
            1024,
            MeasureConfigList,
            1024,
            SourceConfigList,
            Delay,
            ReadingBufferBufferSize,
            ReadingBuffer,
        )

    def ResetTriggerModel(self):
        """
        Resets the trigger model
        """
        self._dllwrap.ResetTriggerModel(self._vi)
