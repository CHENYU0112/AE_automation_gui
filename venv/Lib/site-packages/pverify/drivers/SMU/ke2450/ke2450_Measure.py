from __future__ import annotations

from .ke2450_dllwrap import *
from .ke2450_Measure_ConfigLists import ke2450_Measure_ConfigLists
from .ke2450_Measure_X import ke2450_Measure_C, ke2450_Measure_V
from .ke2450_Trace import ke2450_Trace


class ke2450_Measure:
    def __init__(self, parent):
        self._parent = parent
        """:type : pverify.drivers.SMU.ke2450.ke2450_Channel.ke2450_Channel"""
        self._name = self._parent._name

        self.__Voltage = ke2450_Measure_V(self)
        self.__Current = ke2450_Measure_C(self)
        self.__ConfigLists = ke2450_Measure_ConfigLists(self)

        self.__Trace = ke2450_Trace(self)

    @property
    def Voltage(self):
        """
        If the measure mode is set to voltage, use this property to access the voltage measurement subclass
        """
        return self.__Voltage

    @property
    def Current(self):
        """
        If the measure mode is set to current, use this property to access the current measurement subclass
        """
        return self.__Current

    @property
    def ConfigLists(self):
        """
        Use this property to access the ConfigLists sourcing subclass
        """
        return self.__ConfigLists

    @property
    def Trace(self):
        """
        Use this property to access the subclass for interacting with multi-point traces
        """
        return self.__Trace

    @property
    def _vi(self):
        """
        The instrument IO session
        """
        return self._parent._vi

    @property
    def _dllwrap(self):
        """
        The Python dll wrapper module
        """
        return self._parent._dllwrap

    def AutoZeroOnce(self):
        """
        Do a once time refresh of the reference and zero measurements
        """
        self._dllwrap.AutoZeroOnce(self._vi)

    def ConfigureMeasurementCount(self, count):
        """
        Sets or the number of measurements to be performed when a measurement is requested

        :param count: number of measurements to be performed when a measurement is requested
        :type count: int|float
        """
        self._dllwrap.SetAttributeViInt32(self._vi, "", KE2450_ATTR_MEASUREMENT_COUNT, int(count))

    def Fetch(self, BufferElements="", BufferName="defbuffer1"):
        """
        Requests the latest post-processed readings stored in the sample buffer based on selected BufferElement.

        Example:
            <instance>.Fetch("defbuffer1", "READ, SOUR")


        :param BufferName: The name of the buffer where the reading is stored.
        :type BufferName: str
        :param BufferElements: Specify the buffer elements. If nothing is defined, the source and measurement values are returned as list.

            | After comma delimeter give single space then give another BufferElement.

            DATE:
                The date when the data point was measured

            FORMatted:
                The measured value as it appears on the front panel

            FRACtional:
                The fractional seconds for the data point when the data point was measured

            READing:
                The measurement reading based on the SENS:FUNC setting; if no buffer elements are defined, this option is used

            RELative:
                The relative time when the data point was measured

            SEConds:
                The seconds in UTC (Coordinated Universal Time) format when the data point was measured

            SOURce:
                The source value; if readback is ON, then it is the readback value, otherwise it is the programmed source value.

            SOURFORMatted:
                The source value as it appears on the display

            SOURSTATus:
                The status information associated with sourcing. The values returned indicate the status of the following conditions:

                - Overvoltage protection was active
                - Measured source value was read
                - Overtemperature condition existed
                - Source function level was limited
                - Four-wire sense was used
                - Output was on

            SOURUNIT:
                The unit of value associated with the source value

            STATus:
                The status information associated with the measurement; see table below

                ===================  =======  ===========
                Name                 Decimal  Description
                ===================  =======  ===========
                STAT_QUESTIONABLE    1        Measure status questionable
                STAT_ORIGIN          6        A/D converter from which reading originated, for Model 2450 always 0
                STAT_TERMINAL        8        Measure terminal, front is 1, rear is 0
                STAT_LIMIT2_LOW      16       Measure status limit 2 low
                STAT_LIMIT2_HIGH     32       Measure status limit 2 high
                STAT_LIMIT1_LOW      64       Measure status limit 1 low
                STAT_LIMIT1_HIGH     128      Measure status limit 1 high
                STAT_START_GROUP     256      First reading in a group
                ===================  =======  ===========

            TIME:
                The time for the data point

            TSTamp:
                The timestamp for the data point

            UNIT:
                The unit of measure associated with the measurement
        :type BufferElements: str
        :return: Returns a list of all requested buffer elements. Elements that can be converted to float are converted, other are returned as string.
        :rtype: list[str|float]

        """
        if BufferElements == "":
            BufferElements = "SOUR, READ"

        BufferElements = ", ".join([str.strip(x) for x in BufferElements.split(",")])
        readings = self._dllwrap.Fetch(self._vi, BufferName, len(BufferElements) + 1, BufferElements, 16384).split(",")

        ret = []
        for r in readings:
            try:
                ret.append(float(r))
            except Exception:
                ret.append(r)

        return ret

    def Read(self, BufferElements="", BufferName="defbuffer1"):
        """
        Query makes measurements, places them in a reading buffer, and returns the latest reading.

        Example:
            <instance>.Read("defbuffer1", "READ, SOUR")


        :param BufferName: The name of the buffer where the reading is stored.
        :type BufferName: str
        :param BufferElements: Specify the buffer elements. If nothing is defined, the source and measurement values are returned as list.

            | After comma delimeter give single space then give another BufferElement.

            DATE:
                The date when the data point was measured

            FORMatted:
                The measured value as it appears on the front panel

            FRACtional:
                The fractional seconds for the data point when the data point was measured

            READing:
                The measurement reading based on the SENS:FUNC setting; if no buffer elements are defined, this option is used

            RELative:
                The relative time when the data point was measured

            SEConds:
                The seconds in UTC (Coordinated Universal Time) format when the data point was measured

            SOURce:
                The source value; if readback is ON, then it is the readback value, otherwise it is the programmed source value.

            SOURFORMatted:
                The source value as it appears on the display

            SOURSTATus:
                The status information associated with sourcing. The values returned indicate the status of the following conditions:

                - Overvoltage protection was active
                - Measured source value was read
                - Overtemperature condition existed
                - Source function level was limited
                - Four-wire sense was used
                - Output was on

            SOURUNIT:
                The unit of value associated with the source value

            STATus:
                The status information associated with the measurement; see table below

                ===================  =======  ===========
                Name                 Decimal  Description
                ===================  =======  ===========
                STAT_QUESTIONABLE    1        Measure status questionable
                STAT_ORIGIN          6        A/D converter from which reading originated, for Model 2450 always 0
                STAT_TERMINAL        8        Measure terminal, front is 1, rear is 0
                STAT_LIMIT2_LOW      16       Measure status limit 2 low
                STAT_LIMIT2_HIGH     32       Measure status limit 2 high
                STAT_LIMIT1_LOW      64       Measure status limit 1 low
                STAT_LIMIT1_HIGH     128      Measure status limit 1 high
                STAT_START_GROUP     256      First reading in a group
                ===================  =======  ===========

            TIME:
                The time for the data point

            TSTamp:
                The timestamp for the data point

            UNIT:
                The unit of measure associated with the measurement
        :type BufferElements: str
        :return: Returns a list of all requested buffer elements. Elements that can be converted to float are converted, other are returned as string.
        :rtype: list[str|float]

        """
        if BufferElements == "":
            BufferElements = "SOUR, READ"

        BufferElements = ", ".join([str.strip(x) for x in BufferElements.split(",")])
        readings = self._dllwrap.Read(self._vi, BufferName, len(BufferElements) + 1, BufferElements, 16384).split(",")

        ret = []
        for r in readings:
            try:
                ret.append(float(r))
            except Exception:
                ret.append(r)

        return ret
