from __future__ import annotations

import numpy as np

from pverify import Waveform


class ke2450_Trace:
    def __init__(self, parent):
        self._parent = parent
        """:type : pverify.drivers.SMU.ke2450.ke2450_Measure.ke2450_Measure"""
        self._name = self._parent._name

    @property
    def _vi(self):
        """
        The instrument IO session
        """
        return self._parent._vi

    @property
    def _dllwrap(self):
        """
        The Python dll wrapper module
        """
        return self._parent._dllwrap

    def GetAverageReading(self, BufferName="defbuffer1"):
        """
        Returns the average reading calculated from all of the readings in the specified reading buffer.

        :param BufferName: The name of the buffer where the reading is stored.
        :type BufferName: str
        """
        return float(self._dllwrap.GetGetAverageReading(self._vi, BufferName))

    def GetMaximumReading(self, BufferName="defbuffer1"):
        """
        Returns the maximum reading value in the specified buffer

        :param BufferName: The name of the buffer where the reading is stored.
        :type BufferName: str
        """
        return float(self._dllwrap.GetGetMaximumReading(self._vi, BufferName))

    def GetMinimumReading(self, BufferName="defbuffer1"):
        """
        Returns the minimum reading value in the specified buffer

        :param BufferName: The name of the buffer where the reading is stored.
        :type BufferName: str
        """
        return float(self._dllwrap.GetGetMinimumReading(self._vi, BufferName))

    def GetPeak2PeakReading(self, BufferName="defbuffer1"):
        """
        Returns the peak-to-peak reading value in the specified buffer

        :param BufferName: The name of the buffer where the reading is stored.
        :type BufferName: str
        """
        return float(self._dllwrap.GetGetPeak2PeakReading(self._vi, BufferName))

    def GetSDevReading(self, BufferName="defbuffer1"):
        """
        Returns the standard deviation of the readings in the specified buffer

        :param BufferName: The name of the buffer where the reading is stored.
        :type BufferName: str
        """
        return float(self._dllwrap.GetGetStandardDeviationOfReadings(self._vi, BufferName))

    def GetData(
        self,
        BufferName="defbuffer1",
        BufferElements="",
        Transposed=False,
        StartIndex=1,
        EndIndex=None,
    ):
        """
        Returns the reading buffer content as list of lists. See description of parameter "Transposed" to see how the returned data looks like.

        :param BufferName: The name of the buffer where the reading is stored.
        :type BufferName: str
        :param BufferElements: Specify the buffer elements. If nothing is defined, the source and measurement values are returned as list.

            | After comma delimeter give single space then give another BufferElement.

            DATE:
                The date when the data point was measured

            FORMatted:
                The measured value as it appears on the front panel

            FRACtional:
                The fractional seconds for the data point when the data point was measured

            READing:
                The measurement reading based on the SENS:FUNC setting; if no buffer elements are defined, this option is used

            RELative:
                The relative time when the data point was measured

            SEConds:
                The seconds in UTC (Coordinated Universal Time) format when the data point was measured

            SOURce:
                The source value; if readback is ON, then it is the readback value, otherwise it is the programmed source value.

            SOURFORMatted:
                The source value as it appears on the display

            SOURSTATus:
                The status information associated with sourcing. The values returned indicate the status of the following conditions:

                - Overvoltage protection was active
                - Measured source value was read
                - Overtemperature condition existed
                - Source function level was limited
                - Four-wire sense was used
                - Output was on

            SOURUNIT:
                The unit of value associated with the source value

            STATus:
                The status information associated with the measurement; see table below

                ===================  =======  ===========
                Name                 Decimal  Description
                ===================  =======  ===========
                STAT_QUESTIONABLE    1        Measure status questionable
                STAT_ORIGIN          6        A/D converter from which reading originated, for Model 2450 always 0
                STAT_TERMINAL        8        Measure terminal, front is 1, rear is 0
                STAT_LIMIT2_LOW      16       Measure status limit 2 low
                STAT_LIMIT2_HIGH     32       Measure status limit 2 high
                STAT_LIMIT1_LOW      64       Measure status limit 1 low
                STAT_LIMIT1_HIGH     128      Measure status limit 1 high
                STAT_START_GROUP     256      First reading in a group
                ===================  =======  ===========

            TIME:
                The time for the data point

            TSTamp:
                The timestamp for the data point

            UNIT:
                The unit of measure associated with the measurement
        :type BufferElements: str
        :param Transposed:
            True:
                Returns data in form [[elem1_x1, elem1_x2, ..., elem1_xN], ..., [elemN_x1, elemN_x2, ..., elemN_xN]]

            False:
                Returns data in form [[elem1_x1, elem2_x1, ..., elemN_x1], ..., [elem1_xN, elem2_xN, ..., elemN_xN]]

        :type Transposed: bool
        :param StartIndex: Beginning index of the buffer to return. 1-based.
        :type StartIndex: int|float
        :param EndIndex: Ending index of the buffer to return. 1-based. If set to None, the actual buffer length is taken.
        :type EndIndex: int|float|NoneType
        :return: Returns a list of all requested buffer elements. Elements that can be converted to float are converted, other are returned as string.
        :rtype: list[list[str|float]]
        """
        if BufferElements == "":
            BufferElements = "SOUR, READ"
        BufferElements = ", ".join([str.strip(x) for x in BufferElements.split(",")])
        bufsize = self._dllwrap.GetActual(self._vi, BufferName)
        if EndIndex is not None:
            if StartIndex > EndIndex:
                msg = "Parameter 'StartIndex' must not be greater than 'EndIndex'!"
                raise ValueError(msg)
            bufsize = min(int(EndIndex), bufsize)
        StartIndex = min(StartIndex, bufsize)
        num_elements = len(BufferElements.split(","))
        readings = self._dllwrap.GetData(
            self._vi,
            StartIndex,
            bufsize,
            BufferName,
            len(BufferElements) + 1,
            BufferElements,
            num_elements * bufsize * 32,
        ).split(",")
        # readings = self._parent._parent._parent.DirectIO.Query(
        #     ':TRAC:DATA? %d, %d, "%s", %s' % (StartIndex, bufsize, BufferName, BufferElements),
        # ).split(",")

        # Convert
        ret = []
        for r in readings:
            try:
                ret.append(float(r))
            except Exception:
                ret.append(r)

        # Split to list of lists
        a = np.array(ret, dtype=object).reshape((bufsize - StartIndex + 1, num_elements))
        if bool(Transposed):
            a = a.transpose()

        return a.tolist()

    def GetReadingWaveform(self, BufferName="defbuffer1", StartIndex=1, EndIndex=None):
        """
        Returns the reading as Waveform.

        :param BufferName: The name of the buffer where the reading is stored.
        :type BufferName: str
        :param StartIndex: Beginning index of the buffer to return. 1-based.
        :type StartIndex: int|float
        :param EndIndex: Ending index of the buffer to return. 1-based. If set to None, the actual buffer length is taken.
        :type EndIndex: int|float|NoneType
        :rtype: Waveform
        """
        time, data = self.GetData(BufferName, "REL, READ", True, StartIndex, EndIndex)
        return Waveform(data=data, time=time)

    def GetSourceWaveform(self, BufferName="defbuffer1", StartIndex=1, EndIndex=None):
        """
        Returns the reading as Waveform.

        :param BufferName: The name of the buffer where the reading is stored.
        :type BufferName: str
        :param StartIndex: Beginning index of the buffer to return. 1-based.
        :type StartIndex: int|float
        :param EndIndex: Ending index of the buffer to return. 1-based. If set to None, the actual buffer length is taken.
        :type EndIndex: int|float
        :rtype: Waveform
        """
        time, data = self.GetData(BufferName, "REL, SOUR", True, StartIndex, EndIndex)
        return Waveform(data=data, time=time)
