"""
This file contains all functions of the dll again wrapped in a Python class
"""

from __future__ import annotations


class ke2450_LowLevel:
    def __init__(self, parent):
        self._parent = parent
        """:type : pverify.drivers.SMU.ke2450.ke2450_DevUtils.ke2450_DevUtils"""

    @property
    def _vi(self):
        """
        The instrument IO session
        """
        return self._parent.vi

    @property
    def _dllwrap(self):
        """
        The Python dll wrapper module
        """
        return self._parent.dllwrap

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ConfigureOutputEnabled(self, ChannelName, Enabled):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureOutputEnabled(self._vi, ChannelName, Enabled)

    def ConfigureVoltageLevel(self, ChannelName, Level):
        """

        :param ChannelName:
        :type ChannelName:
        :param Level:
        :type Level:
        """
        return self._dllwrap.ConfigureVoltageLevel(self._vi, ChannelName, Level)

    def ConfigureCurrentLimit(self, ChannelName, Behavior, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Behavior:
        :type Behavior:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureCurrentLimit(self._vi, ChannelName, Behavior, Limit)

    def ConfigureOVP(self, ChannelName, Enabled, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureOVP(self._vi, ChannelName, Enabled, Limit)

    def ConfigureOutputRange(self, ChannelName, RangeType, Range):
        """

        :param ChannelName:
        :type ChannelName:
        :param RangeType:
        :type RangeType:
        :param Range:
        :type Range:
        """
        return self._dllwrap.ConfigureOutputRange(self._vi, ChannelName, RangeType, Range)

    def QueryMaxCurrentLimit(self, ChannelName, VoltageLevel):
        """

        :param ChannelName:
        :type ChannelName:
        :param VoltageLevel:
        :type VoltageLevel:
        """
        return self._dllwrap.QueryMaxCurrentLimit(self._vi, ChannelName, VoltageLevel)

    def QueryMaxVoltageLevel(self, ChannelName, CurrentLimit):
        """

        :param ChannelName:
        :type ChannelName:
        :param CurrentLimit:
        :type CurrentLimit:
        """
        return self._dllwrap.QueryMaxVoltageLevel(self._vi, ChannelName, CurrentLimit)

    def ConfigureTriggeredCurrentLimit(self, ChannelName, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureTriggeredCurrentLimit(self._vi, ChannelName, Limit)

    def ConfigureTriggeredVoltageLevel(self, ChannelName, Level):
        """

        :param ChannelName:
        :type ChannelName:
        :param Level:
        :type Level:
        """
        return self._dllwrap.ConfigureTriggeredVoltageLevel(self._vi, ChannelName, Level)

    def ConfigureTriggerSource(self, ChannelName, Source):
        """

        :param ChannelName:
        :type ChannelName:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureTriggerSource(self._vi, ChannelName, Source)

    def Measure(self, ChannelName, MeasurementType):
        """

        :param ChannelName:
        :type ChannelName:
        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.Measure(self._vi, ChannelName, MeasurementType)

    def QueryOutputState(self, ChannelName, OutputState):
        """

        :param ChannelName:
        :type ChannelName:
        :param OutputState:
        :type OutputState:
        """
        return self._dllwrap.QueryOutputState(self._vi, ChannelName, OutputState)

    def ResetOutputProtection(self, ChannelName):
        """

        :param ChannelName:
        :type ChannelName:
        """
        return self._dllwrap.ResetOutputProtection(self._vi, ChannelName)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def Initiate(self):
        """"""
        return self._dllwrap.Initiate(self._vi)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def Beep(self, Frequency, Time):
        """

        :param Frequency:
        :type Frequency:
        :param Time:
        :type Time:
        """
        return self._dllwrap.Beep(self._vi, Frequency, Time)

    def Clear(self):
        """"""
        return self._dllwrap.Clear(self._vi)

    def LANConfiguration(
        self,
        IPAddressBufferSize,
        IPAddress,
        NetMaskBufferSize,
        NetMask,
        GateWayBufferSize,
        GateWay,
    ):
        """

        :param IPAddressBufferSize:
        :type IPAddressBufferSize:
        :param IPAddress:
        :type IPAddress:
        :param NetMaskBufferSize:
        :type NetMaskBufferSize:
        :param NetMask:
        :type NetMask:
        :param GateWayBufferSize:
        :type GateWayBufferSize:
        :param GateWay:
        :type GateWay:
        """
        return self._dllwrap.LANConfiguration(
            self._vi,
            IPAddressBufferSize,
            IPAddress,
            NetMaskBufferSize,
            NetMask,
            GateWayBufferSize,
            GateWay,
        )

    def QueryLANConfiguration(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.QueryLANConfiguration(self._vi, ValBufferSize)

    def ReadNextError(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadNextError(self._vi, ValBufferSize)

    def ReadNextErrorCode(self):
        """"""
        return self._dllwrap.ReadNextErrorCode(self._vi)

    def GetEventLogCount(self, Mask):
        """

        :param Mask:
        :type Mask:
        """
        return self._dllwrap.GetEventLogCount(self._vi, Mask)

    def GetReadNextEventLog(self, Mask, ReadNextEventLogBufferSize):
        """

        :param Mask:
        :type Mask:
        :param ReadNextEventLogBufferSize:
        :type ReadNextEventLogBufferSize:
        """
        return self._dllwrap.GetReadNextEventLog(self._vi, Mask, ReadNextEventLogBufferSize)

    def PostEventLog(self, MessageBufferSize, Message, SeverityType):
        """

        :param MessageBufferSize:
        :type MessageBufferSize:
        :param Message:
        :type Message:
        :param SeverityType:
        :type SeverityType:
        """
        return self._dllwrap.PostEventLog(self._vi, MessageBufferSize, Message, SeverityType)

    def SaveEventLog(self, FilenameBufferSize, Filename, EventType):
        """

        :param FilenameBufferSize:
        :type FilenameBufferSize:
        :param Filename:
        :type Filename:
        :param EventType:
        :type EventType:
        """
        return self._dllwrap.SaveEventLog(self._vi, FilenameBufferSize, Filename, EventType)

    def SaveAllEventLogs(self, FilenameBufferSize, Filename):
        """

        :param FilenameBufferSize:
        :type FilenameBufferSize:
        :param Filename:
        :type Filename:
        """
        return self._dllwrap.SaveAllEventLogs(self._vi, FilenameBufferSize, Filename)

    def LANAutoConfiguration(self):
        """"""
        return self._dllwrap.LANAutoConfiguration(self._vi)

    def ContactCheckAll(self):
        """"""
        return self._dllwrap.ContactCheckAll(self._vi)

    def Read(self, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize):
        """

        :param BufferName:
        :type BufferName:
        :param BufferElementsBufferSize:
        :type BufferElementsBufferSize:
        :param BufferElements:
        :type BufferElements:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.Read(self._vi, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize)

    def Fetch(self, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize):
        """

        :param BufferName:
        :type BufferName:
        :param BufferElementsBufferSize:
        :type BufferElementsBufferSize:
        :param BufferElements:
        :type BufferElements:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.Fetch(self._vi, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize)

    def Measure2(
        self,
        Function,
        BufferName,
        BufferElementsBufferSize,
        BufferElements,
        ValBufferSize,
    ):
        """

        :param Function:
        :type Function:
        :param BufferName:
        :type BufferName:
        :param BufferElementsBufferSize:
        :type BufferElementsBufferSize:
        :param BufferElements:
        :type BufferElements:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.Measure2(
            self._vi,
            Function,
            BufferName,
            BufferElementsBufferSize,
            BufferElements,
            ValBufferSize,
        )

    def MeasureDigitizer(
        self,
        Function,
        BufferName,
        BufferElementsBufferSize,
        BufferElements,
        ValBufferSize,
    ):
        """

        :param Function:
        :type Function:
        :param BufferName:
        :type BufferName:
        :param BufferElementsBufferSize:
        :type BufferElementsBufferSize:
        :param BufferElements:
        :type BufferElements:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.MeasureDigitizer(
            self._vi,
            Function,
            BufferName,
            BufferElementsBufferSize,
            BufferElements,
            ValBufferSize,
        )

    def ReadDigitzer(self, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize):
        """

        :param BufferName:
        :type BufferName:
        :param BufferElementsBufferSize:
        :type BufferElementsBufferSize:
        :param BufferElements:
        :type BufferElements:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadDigitzer(self._vi, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize)

    def GetActual(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetActual(self._vi, BufferName)

    def Clear2(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.Clear2(self._vi, BufferName)

    def GetData(
        self,
        StartIndex,
        EndIndex,
        BufferName,
        BufferElementsBufferSize,
        BufferElements,
        ValBufferSize,
    ):
        """

        :param StartIndex:
        :type StartIndex:
        :param EndIndex:
        :type EndIndex:
        :param BufferName:
        :type BufferName:
        :param BufferElementsBufferSize:
        :type BufferElementsBufferSize:
        :param BufferElements:
        :type BufferElements:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.GetData(
            self._vi,
            StartIndex,
            EndIndex,
            BufferName,
            BufferElementsBufferSize,
            BufferElements,
            ValBufferSize,
        )

    def GetBufferFillMode(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetBufferFillMode(self._vi, BufferName)

    def SetBufferFillMode(self, BufferName, BufferFillMode):
        """

        :param BufferName:
        :type BufferName:
        :param BufferFillMode:
        :type BufferFillMode:
        """
        return self._dllwrap.SetBufferFillMode(self._vi, BufferName, BufferFillMode)

    def GetLogStateEnable(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetLogStateEnable(self._vi, BufferName)

    def SetLogStateEnable(self, BufferName, LogStateEnable):
        """

        :param BufferName:
        :type BufferName:
        :param LogStateEnable:
        :type LogStateEnable:
        """
        return self._dllwrap.SetLogStateEnable(self._vi, BufferName, LogStateEnable)

    def CreateBuffer(self, BufferName, BufferSize):
        """

        :param BufferName:
        :type BufferName:
        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.CreateBuffer(self._vi, BufferName, BufferSize)

    def GetBufferSize(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetBufferSize(self._vi, BufferName)

    def SetBufferSize(self, BufferName, BufferSize):
        """

        :param BufferName:
        :type BufferName:
        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.SetBufferSize(self._vi, BufferName, BufferSize)

    def SaveDataToFile(self, FileName, BufferName, TimeFormat, Start, End):
        """

        :param FileName:
        :type FileName:
        :param BufferName:
        :type BufferName:
        :param TimeFormat:
        :type TimeFormat:
        :param Start:
        :type Start:
        :param End:
        :type End:
        """
        return self._dllwrap.SaveDataToFile(self._vi, FileName, BufferName, TimeFormat, Start, End)

    def AppendDataToFile(self, FileName, BufferName, TimeFormat, Start, End):
        """

        :param FileName:
        :type FileName:
        :param BufferName:
        :type BufferName:
        :param TimeFormat:
        :type TimeFormat:
        :param Start:
        :type Start:
        :param End:
        :type End:
        """
        return self._dllwrap.AppendDataToFile(self._vi, FileName, BufferName, TimeFormat, Start, End)

    def GetGetAverageReading(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetGetAverageReading(self._vi, BufferName)

    def ClearStatistics(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.ClearStatistics(self._vi, BufferName)

    def GetGetMaximumReading(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetGetMaximumReading(self._vi, BufferName)

    def GetGetMinimumReading(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetGetMinimumReading(self._vi, BufferName)

    def GetGetPeak2PeakReading(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetGetPeak2PeakReading(self._vi, BufferName)

    def GetGetStandardDeviationOfReadings(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetGetStandardDeviationOfReadings(self._vi, BufferName)

    def Delete(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.Delete(self._vi, BufferName)

    def TraceTrigger(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.TraceTrigger(self._vi, BufferName)

    def AutoZeroOnce(self):
        """"""
        return self._dllwrap.AutoZeroOnce(self._vi)

    def CreateConfigurationList(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.CreateConfigurationList(self._vi, Name)

    def DeleteConfigurationList(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.DeleteConfigurationList(self._vi, Name)

    def DeleteConfigListIndexData(self, Name, Point):
        """

        :param Name:
        :type Name:
        :param Point:
        :type Point:
        """
        return self._dllwrap.DeleteConfigListIndexData(self._vi, Name, Point)

    def RecallConfigurationPoint(self, Name, Point):
        """

        :param Name:
        :type Name:
        :param Point:
        :type Point:
        """
        return self._dllwrap.RecallConfigurationPoint(self._vi, Name, Point)

    def GetConfigurationListSize(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.GetConfigurationListSize(self._vi, Name)

    def AppendToConfigurationList(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.AppendToConfigurationList(self._vi, Name)

    def StoreToConfigurationList(self, Name, Point):
        """

        :param Name:
        :type Name:
        :param Point:
        :type Point:
        """
        return self._dllwrap.StoreToConfigurationList(self._vi, Name, Point)

    def GetAveragingFilterState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAveragingFilterState(self._vi, Function)

    def SetAveragingFilterState(self, Function, AveragingFilterState):
        """

        :param Function:
        :type Function:
        :param AveragingFilterState:
        :type AveragingFilterState:
        """
        return self._dllwrap.SetAveragingFilterState(self._vi, Function, AveragingFilterState)

    def GetAveragingFilterCount(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAveragingFilterCount(self._vi, Function)

    def SetAveragingFilterCount(self, Function, AveragingFilterCount):
        """

        :param Function:
        :type Function:
        :param AveragingFilterCount:
        :type AveragingFilterCount:
        """
        return self._dllwrap.SetAveragingFilterCount(self._vi, Function, AveragingFilterCount)

    def GetAveragingFilterType(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAveragingFilterType(self._vi, Function)

    def SetAveragingFilterType(self, Function, AveragingFilterType):
        """

        :param Function:
        :type Function:
        :param AveragingFilterType:
        :type AveragingFilterType:
        """
        return self._dllwrap.SetAveragingFilterType(self._vi, Function, AveragingFilterType)

    def GetAutoZeroState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAutoZeroState(self._vi, Function)

    def SetAutoZeroState(self, Function, AutoZeroState):
        """

        :param Function:
        :type Function:
        :param AutoZeroState:
        :type AutoZeroState:
        """
        return self._dllwrap.SetAutoZeroState(self._vi, Function, AutoZeroState)

    def ConfigureUserDelay(self, Function, UserDelayNumber, DelayTime):
        """

        :param Function:
        :type Function:
        :param UserDelayNumber:
        :type UserDelayNumber:
        :param DelayTime:
        :type DelayTime:
        """
        return self._dllwrap.ConfigureUserDelay(self._vi, Function, UserDelayNumber, DelayTime)

    def QueryUserDelay(self, Function, UserDelayNumber):
        """

        :param Function:
        :type Function:
        :param UserDelayNumber:
        :type UserDelayNumber:
        """
        return self._dllwrap.QueryUserDelay(self._vi, Function, UserDelayNumber)

    def GetFunctionnplc(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetFunctionnplc(self._vi, Function)

    def SetFunctionnplc(self, Function, FunctionNPLC):
        """

        :param Function:
        :type Function:
        :param FunctionNPLC:
        :type FunctionNPLC:
        """
        return self._dllwrap.SetFunctionnplc(self._vi, Function, FunctionNPLC)

    def GetAutoRange(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAutoRange(self._vi, Function)

    def SetAutoRange(self, Function, AutoRange):
        """

        :param Function:
        :type Function:
        :param AutoRange:
        :type AutoRange:
        """
        return self._dllwrap.SetAutoRange(self._vi, Function, AutoRange)

    def GetLowerLimit(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetLowerLimit(self._vi, Function)

    def SetLowerLimit(self, Function, LowerLimit):
        """

        :param Function:
        :type Function:
        :param LowerLimit:
        :type LowerLimit:
        """
        return self._dllwrap.SetLowerLimit(self._vi, Function, LowerLimit)

    def GetRange(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetRange(self._vi, Function)

    def SetRange(self, Function, Range):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        """
        return self._dllwrap.SetRange(self._vi, Function, Range)

    def GetRelativeOffset(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetRelativeOffset(self._vi, Function)

    def SetRelativeOffset(self, Function, RelativeOffset):
        """

        :param Function:
        :type Function:
        :param RelativeOffset:
        :type RelativeOffset:
        """
        return self._dllwrap.SetRelativeOffset(self._vi, Function, RelativeOffset)

    def Acquire(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.Acquire(self._vi, Function)

    def GetRelativeOffsetState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetRelativeOffsetState(self._vi, Function)

    def SetRelativeOffsetState(self, Function, RelativeOffsetState):
        """

        :param Function:
        :type Function:
        :param RelativeOffsetState:
        :type RelativeOffsetState:
        """
        return self._dllwrap.SetRelativeOffsetState(self._vi, Function, RelativeOffsetState)

    def GetEnableRemoteSense(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetEnableRemoteSense(self._vi, Function)

    def SetEnableRemoteSense(self, Function, EnableRemoteSense):
        """

        :param Function:
        :type Function:
        :param EnableRemoteSense:
        :type EnableRemoteSense:
        """
        return self._dllwrap.SetEnableRemoteSense(self._vi, Function, EnableRemoteSense)

    def ReadConfigurationList(self, Name, Point, ValBufferSize):
        """

        :param Name:
        :type Name:
        :param Point:
        :type Point:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadConfigurationList(self._vi, Name, Point, ValBufferSize)

    def GetEnableOffsetCompensation(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetEnableOffsetCompensation(self._vi, Function)

    def SetEnableOffsetCompensation(self, Function, EnableOffsetCompensation):
        """

        :param Function:
        :type Function:
        :param EnableOffsetCompensation:
        :type EnableOffsetCompensation:
        """
        return self._dllwrap.SetEnableOffsetCompensation(self._vi, Function, EnableOffsetCompensation)

    def GetDigitizerMeasureRange(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerMeasureRange(self._vi, Function)

    def SetDigitizerMeasureRange(self, Function, Range):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        """
        return self._dllwrap.SetDigitizerMeasureRange(self._vi, Function, Range)

    def GetDigitizerAperture(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerAperture(self._vi, Function)

    def SetDigitizerAperture(self, Function, Range):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        """
        return self._dllwrap.SetDigitizerAperture(self._vi, Function, Range)

    def GetDigitizerSampleRate(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerSampleRate(self._vi, Function)

    def SetDigitizerSampleRate(self, Function, Range):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        """
        return self._dllwrap.SetDigitizerSampleRate(self._vi, Function, Range)

    def GetDigitizerDisplayDigits(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerDisplayDigits(self._vi, Function)

    def SetDigitizerDisplayDigits(self, Function, Range):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        """
        return self._dllwrap.SetDigitizerDisplayDigits(self._vi, Function, Range)

    def GetDigitizerEnableRemoteSense(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerEnableRemoteSense(self._vi, Function)

    def SetDigitizerEnableRemoteSense(self, Function, EnableRemoteSense):
        """

        :param Function:
        :type Function:
        :param EnableRemoteSense:
        :type EnableRemoteSense:
        """
        return self._dllwrap.SetDigitizerEnableRemoteSense(self._vi, Function, EnableRemoteSense)

    def DigitizerConfigureUserDelay(self, Function, UserDelayNumber, DelayTime):
        """

        :param Function:
        :type Function:
        :param UserDelayNumber:
        :type UserDelayNumber:
        :param DelayTime:
        :type DelayTime:
        """
        return self._dllwrap.DigitizerConfigureUserDelay(self._vi, Function, UserDelayNumber, DelayTime)

    def DigitizeAcquire(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.DigitizeAcquire(self._vi, Function)

    def DigitizeGetRelativeOffsetState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.DigitizeGetRelativeOffsetState(self._vi, Function)

    def DigitizeSetRelativeOffsetState(self, Function, RelativeOffsetState):
        """

        :param Function:
        :type Function:
        :param RelativeOffsetState:
        :type RelativeOffsetState:
        """
        return self._dllwrap.DigitizeSetRelativeOffsetState(self._vi, Function, RelativeOffsetState)

    def DigitizeGetRelativeOffset(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.DigitizeGetRelativeOffset(self._vi, Function)

    def DigitizeSetRelativeOffset(self, Function, RelativeOffset):
        """

        :param Function:
        :type Function:
        :param RelativeOffset:
        :type RelativeOffset:
        """
        return self._dllwrap.DigitizeSetRelativeOffset(self._vi, Function, RelativeOffset)

    def GetAutoAperture(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAutoAperture(self._vi, Function)

    def SetAutoAperture(self, Function, AutoAperture):
        """

        :param Function:
        :type Function:
        :param AutoAperture:
        :type AutoAperture:
        """
        return self._dllwrap.SetAutoAperture(self._vi, Function, AutoAperture)

    def DigitizerIsLimitTestFailed(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.DigitizerIsLimitTestFailed(self._vi, Function, LimitTest)

    def DigitizerConfigureLimitTestLowerLimit(self, Function, LimitTest, Value):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param Value:
        :type Value:
        """
        return self._dllwrap.DigitizerConfigureLimitTestLowerLimit(self._vi, Function, LimitTest, Value)

    def DigitizerReadLimitTestLowerLimit(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.DigitizerReadLimitTestLowerLimit(self._vi, Function, LimitTest)

    def DigitizerEnableLimitTest(self, Function, LimitTest, State):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param State:
        :type State:
        """
        return self._dllwrap.DigitizerEnableLimitTest(self._vi, Function, LimitTest, State)

    def DigitizerQueryLimitTestState(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.DigitizerQueryLimitTestState(self._vi, Function, LimitTest)

    def DigitizerConfigureLimitTestUpperLimit(self, Function, LimitTest, Value):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param Value:
        :type Value:
        """
        return self._dllwrap.DigitizerConfigureLimitTestUpperLimit(self._vi, Function, LimitTest, Value)

    def DigitizerReadLimitTestUpperLimit(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.DigitizerReadLimitTestUpperLimit(self._vi, Function, LimitTest)

    def DigitizerAutoClearEnable(self, Function, LimitTest, State):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param State:
        :type State:
        """
        return self._dllwrap.DigitizerAutoClearEnable(self._vi, Function, LimitTest, State)

    def DigitizerClearLimit(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.DigitizerClearLimit(self._vi, Function, LimitTest)

    def DigitizerQueryAutoClearEnable(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.DigitizerQueryAutoClearEnable(self._vi, Function, LimitTest)

    def DigitizerGetMathOperation(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.DigitizerGetMathOperation(self._vi, Function)

    def DigitizerSetMathOperation(self, Function, MathOperation):
        """

        :param Function:
        :type Function:
        :param MathOperation:
        :type MathOperation:
        """
        return self._dllwrap.DigitizerSetMathOperation(self._vi, Function, MathOperation)

    def DigitizerGetMathOffsetFactor(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.DigitizerGetMathOffsetFactor(self._vi, Function)

    def DigitizerSetMathOffsetFactor(self, Function, MathOffsetFactor):
        """

        :param Function:
        :type Function:
        :param MathOffsetFactor:
        :type MathOffsetFactor:
        """
        return self._dllwrap.DigitizerSetMathOffsetFactor(self._vi, Function, MathOffsetFactor)

    def DigitizerGetMathScaleFactor(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.DigitizerGetMathScaleFactor(self._vi, Function)

    def DigitizerSetMathScaleFactor(self, Function, MathScaleFactor):
        """

        :param Function:
        :type Function:
        :param MathScaleFactor:
        :type MathScaleFactor:
        """
        return self._dllwrap.DigitizerSetMathScaleFactor(self._vi, Function, MathScaleFactor)

    def DigitizerGetMathPercent(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.DigitizerGetMathPercent(self._vi, Function)

    def DigitizerSetMathPercent(self, Function, MathPercent):
        """

        :param Function:
        :type Function:
        :param MathPercent:
        :type MathPercent:
        """
        return self._dllwrap.DigitizerSetMathPercent(self._vi, Function, MathPercent)

    def DigitizerGetMathOperationState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.DigitizerGetMathOperationState(self._vi, Function)

    def DigitizerSetMathOperationState(self, Function, MathOperationState):
        """

        :param Function:
        :type Function:
        :param MathOperationState:
        :type MathOperationState:
        """
        return self._dllwrap.DigitizerSetMathOperationState(self._vi, Function, MathOperationState)

    def GetMathOperation(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetMathOperation(self._vi, Function)

    def SetMathOperation(self, Function, MathOperation):
        """

        :param Function:
        :type Function:
        :param MathOperation:
        :type MathOperation:
        """
        return self._dllwrap.SetMathOperation(self._vi, Function, MathOperation)

    def GetMathOffsetFactor(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetMathOffsetFactor(self._vi, Function)

    def SetMathOffsetFactor(self, Function, MathOffsetFactor):
        """

        :param Function:
        :type Function:
        :param MathOffsetFactor:
        :type MathOffsetFactor:
        """
        return self._dllwrap.SetMathOffsetFactor(self._vi, Function, MathOffsetFactor)

    def GetMathScaleFactor(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetMathScaleFactor(self._vi, Function)

    def SetMathScaleFactor(self, Function, MathScaleFactor):
        """

        :param Function:
        :type Function:
        :param MathScaleFactor:
        :type MathScaleFactor:
        """
        return self._dllwrap.SetMathScaleFactor(self._vi, Function, MathScaleFactor)

    def GetMathPercent(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetMathPercent(self._vi, Function)

    def SetMathPercent(self, Function, MathPercent):
        """

        :param Function:
        :type Function:
        :param MathPercent:
        :type MathPercent:
        """
        return self._dllwrap.SetMathPercent(self._vi, Function, MathPercent)

    def GetMathOperationState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetMathOperationState(self._vi, Function)

    def SetMathOperationState(self, Function, MathOperationState):
        """

        :param Function:
        :type Function:
        :param MathOperationState:
        :type MathOperationState:
        """
        return self._dllwrap.SetMathOperationState(self._vi, Function, MathOperationState)

    def IsLimitTestFailed(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.IsLimitTestFailed(self._vi, Function, LimitTest)

    def ConfigureLimitTestLowerLimit(self, Function, LimitTest, Value):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param Value:
        :type Value:
        """
        return self._dllwrap.ConfigureLimitTestLowerLimit(self._vi, Function, LimitTest, Value)

    def ReadLimitTestLowerLimit(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.ReadLimitTestLowerLimit(self._vi, Function, LimitTest)

    def EnableLimitTest(self, Function, LimitTest, State):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param State:
        :type State:
        """
        return self._dllwrap.EnableLimitTest(self._vi, Function, LimitTest, State)

    def QueryLimitTestState(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.QueryLimitTestState(self._vi, Function, LimitTest)

    def ConfigureLimitTestUpperLimit(self, Function, LimitTest, Value):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param Value:
        :type Value:
        """
        return self._dllwrap.ConfigureLimitTestUpperLimit(self._vi, Function, LimitTest, Value)

    def ReadLimitTestUpperLimit(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.ReadLimitTestUpperLimit(self._vi, Function, LimitTest)

    def AutoClearEnable(self, Function, LimitTest, State):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param State:
        :type State:
        """
        return self._dllwrap.AutoClearEnable(self._vi, Function, LimitTest, State)

    def Clear3(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.Clear3(self._vi, Function, LimitTest)

    def QueryAutoClearEnable(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.QueryAutoClearEnable(self._vi, Function, LimitTest)

    def CreateConfigurationList2(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.CreateConfigurationList2(self._vi, Name)

    def DeleteConfigurationList2(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.DeleteConfigurationList2(self._vi, Name)

    def DeleteConfigListIndexedData(self, Name, Index):
        """

        :param Name:
        :type Name:
        :param Index:
        :type Index:
        """
        return self._dllwrap.DeleteConfigListIndexedData(self._vi, Name, Index)

    def RecallConfigurationListPoint(self, Name, Point):
        """

        :param Name:
        :type Name:
        :param Point:
        :type Point:
        """
        return self._dllwrap.RecallConfigurationListPoint(self._vi, Name, Point)

    def GetConfigurationListSize2(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.GetConfigurationListSize2(self._vi, Name)

    def AppendToConfigurationList2(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.AppendToConfigurationList2(self._vi, Name)

    def StoreToConfigurationList2(self, Name, Point):
        """

        :param Name:
        :type Name:
        :param Point:
        :type Point:
        """
        return self._dllwrap.StoreToConfigurationList2(self._vi, Name, Point)

    def GetSourceDelay(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetSourceDelay(self._vi, Function)

    def SetSourceDelay(self, Function, SourceDelay):
        """

        :param Function:
        :type Function:
        :param SourceDelay:
        :type SourceDelay:
        """
        return self._dllwrap.SetSourceDelay(self._vi, Function, SourceDelay)

    def GetEnableHighCapacitanceMode(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetEnableHighCapacitanceMode(self._vi, Function)

    def SetEnableHighCapacitanceMode(self, Function, EnableHighCapacitance):
        """

        :param Function:
        :type Function:
        :param EnableHighCapacitance:
        :type EnableHighCapacitance:
        """
        return self._dllwrap.SetEnableHighCapacitanceMode(self._vi, Function, EnableHighCapacitance)

    def GetSourceAmplitude(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetSourceAmplitude(self._vi, Function)

    def SetSourceAmplitude(self, Function, SourceAmplitude):
        """

        :param Function:
        :type Function:
        :param SourceAmplitude:
        :type SourceAmplitude:
        """
        return self._dllwrap.SetSourceAmplitude(self._vi, Function, SourceAmplitude)

    def GetSourceListLength(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetSourceListLength(self._vi, Function)

    def ConfigureListSweep(self, Function, StartIndex, Delay, Count, FailAbort, BufferName, ConfigListName):
        """

        :param Function:
        :type Function:
        :param StartIndex:
        :type StartIndex:
        :param Delay:
        :type Delay:
        :param Count:
        :type Count:
        :param FailAbort:
        :type FailAbort:
        :param BufferName:
        :type BufferName:
        :param ConfigListName:
        :type ConfigListName:
        """
        return self._dllwrap.ConfigureListSweep(
            self._vi,
            Function,
            StartIndex,
            Delay,
            Count,
            FailAbort,
            BufferName,
            ConfigListName,
        )

    def ConfigureLinearSweep(
        self,
        Function,
        Start,
        Stop,
        Points,
        Delay,
        Count,
        RangeType,
        FailAbort,
        Dual,
        BufferName,
    ):
        """

        :param Function:
        :type Function:
        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        :param Points:
        :type Points:
        :param Delay:
        :type Delay:
        :param Count:
        :type Count:
        :param RangeType:
        :type RangeType:
        :param FailAbort:
        :type FailAbort:
        :param Dual:
        :type Dual:
        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.ConfigureLinearSweep(
            self._vi,
            Function,
            Start,
            Stop,
            Points,
            Delay,
            Count,
            RangeType,
            FailAbort,
            Dual,
            BufferName,
        )

    def ConfigureLinearSweepStep(
        self,
        Function,
        Start,
        Stop,
        Steps,
        Delay,
        Count,
        RangeType,
        FailAbort,
        Dual,
        BufferName,
    ):
        """

        :param Function:
        :type Function:
        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        :param Steps:
        :type Steps:
        :param Delay:
        :type Delay:
        :param Count:
        :type Count:
        :param RangeType:
        :type RangeType:
        :param FailAbort:
        :type FailAbort:
        :param Dual:
        :type Dual:
        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.ConfigureLinearSweepStep(
            self._vi,
            Function,
            Start,
            Stop,
            Steps,
            Delay,
            Count,
            RangeType,
            FailAbort,
            Dual,
            BufferName,
        )

    def ConfigureLogarithmicSweep(
        self,
        Function,
        Start,
        Stop,
        Points,
        Delay,
        Count,
        RangeType,
        FailAbort,
        Dual,
        BufferName,
    ):
        """

        :param Function:
        :type Function:
        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        :param Points:
        :type Points:
        :param Delay:
        :type Delay:
        :param Count:
        :type Count:
        :param RangeType:
        :type RangeType:
        :param FailAbort:
        :type FailAbort:
        :param Dual:
        :type Dual:
        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.ConfigureLogarithmicSweep(
            self._vi,
            Function,
            Start,
            Stop,
            Points,
            Delay,
            Count,
            RangeType,
            FailAbort,
            Dual,
            BufferName,
        )

    def GetAutoDelay(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAutoDelay(self._vi, Function)

    def SetAutoDelay(self, Function, AutoDelay):
        """

        :param Function:
        :type Function:
        :param AutoDelay:
        :type AutoDelay:
        """
        return self._dllwrap.SetAutoDelay(self._vi, Function, AutoDelay)

    def GetSourceRange(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetSourceRange(self._vi, Function)

    def SetSourceRange(self, Function, SourceRange):
        """

        :param Function:
        :type Function:
        :param SourceRange:
        :type SourceRange:
        """
        return self._dllwrap.SetSourceRange(self._vi, Function, SourceRange)

    def GetEnableAutoRange(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetEnableAutoRange(self._vi, Function)

    def SetEnableAutoRange(self, Function, EnableAutoRange):
        """

        :param Function:
        :type Function:
        :param EnableAutoRange:
        :type EnableAutoRange:
        """
        return self._dllwrap.SetEnableAutoRange(self._vi, Function, EnableAutoRange)

    def GetReadBackState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetReadBackState(self._vi, Function)

    def SetReadBackState(self, Function, ReadBackState):
        """

        :param Function:
        :type Function:
        :param ReadBackState:
        :type ReadBackState:
        """
        return self._dllwrap.SetReadBackState(self._vi, Function, ReadBackState)

    def GetSourceMode2(self, OutputChannel, Function):
        """

        :param OutputChannel:
        :type OutputChannel:
        :param Function:
        :type Function:
        """
        return self._dllwrap.GetSourceMode2(self._vi, OutputChannel, Function)

    def SetSourceMode2(self, OutputChannel, Function, SourceMode):
        """

        :param OutputChannel:
        :type OutputChannel:
        :param Function:
        :type Function:
        :param SourceMode:
        :type SourceMode:
        """
        return self._dllwrap.SetSourceMode2(self._vi, OutputChannel, Function, SourceMode)

    def ReadConfigurationList2(self, Name, Point, ValBufferSize):
        """

        :param Name:
        :type Name:
        :param Point:
        :type Point:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadConfigurationList2(self._vi, Name, Point, ValBufferSize)

    def GetVoltageProtectionLevel(self):
        """"""
        return self._dllwrap.GetVoltageProtectionLevel(self._vi)

    def SetVoltageProtectionLevel(self, VoltageProtectionLevel):
        """

        :param VoltageProtectionLevel:
        :type VoltageProtectionLevel:
        """
        return self._dllwrap.SetVoltageProtectionLevel(self._vi, VoltageProtectionLevel)

    def SetAppendToSourceList(self, Function, AppendToSourceList):
        """

        :param Function:
        :type Function:
        :param AppendToSourceList:
        :type AppendToSourceList:
        """
        return self._dllwrap.SetAppendToSourceList(self._vi, Function, AppendToSourceList)

    def GetSourceList(self, Function, SourceListBufferSize):
        """

        :param Function:
        :type Function:
        :param SourceListBufferSize:
        :type SourceListBufferSize:
        """
        return self._dllwrap.GetSourceList(self._vi, Function, SourceListBufferSize)

    def SetSourceList(self, Function, SourceList):
        """

        :param Function:
        :type Function:
        :param SourceList:
        :type SourceList:
        """
        return self._dllwrap.SetSourceList(self._vi, Function, SourceList)

    def SetUserDelay(self, Function, UserDelayNumber, DelayTime):
        """

        :param Function:
        :type Function:
        :param UserDelayNumber:
        :type UserDelayNumber:
        :param DelayTime:
        :type DelayTime:
        """
        return self._dllwrap.SetUserDelay(self._vi, Function, UserDelayNumber, DelayTime)

    def GetUserDelay(self, Function, UserDelayNumber):
        """

        :param Function:
        :type Function:
        :param UserDelayNumber:
        :type UserDelayNumber:
        """
        return self._dllwrap.GetUserDelay(self._vi, Function, UserDelayNumber)

    def GetPulseAmplitude(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetPulseAmplitude(self._vi, Function)

    def SetPulseAmplitude(self, Function, Amplitude):
        """

        :param Function:
        :type Function:
        :param Amplitude:
        :type Amplitude:
        """
        return self._dllwrap.SetPulseAmplitude(self._vi, Function, Amplitude)

    def GetPulseCurrentLimit(self):
        """"""
        return self._dllwrap.GetPulseCurrentLimit(self._vi)

    def SetPulseCurrentLimit(self, CurrentLimit):
        """

        :param CurrentLimit:
        :type CurrentLimit:
        """
        return self._dllwrap.SetPulseCurrentLimit(self._vi, CurrentLimit)

    def ConfigurePulseTrain(
        self,
        Function,
        BiasLevel,
        PulseLevel,
        PulseWidth,
        Count,
        MeasurementEnable,
        BufferName,
        PulseDelay,
        PulseOffTime,
        BiasLimit,
        PulseLimit,
        AbortOnCompliance,
    ):
        """

        :param Function:
        :type Function:
        :param BiasLevel:
        :type BiasLevel:
        :param PulseLevel:
        :type PulseLevel:
        :param PulseWidth:
        :type PulseWidth:
        :param Count:
        :type Count:
        :param MeasurementEnable:
        :type MeasurementEnable:
        :param BufferName:
        :type BufferName:
        :param PulseDelay:
        :type PulseDelay:
        :param PulseOffTime:
        :type PulseOffTime:
        :param BiasLimit:
        :type BiasLimit:
        :param PulseLimit:
        :type PulseLimit:
        :param AbortOnCompliance:
        :type AbortOnCompliance:
        """
        return self._dllwrap.ConfigurePulseTrain(
            self._vi,
            Function,
            BiasLevel,
            PulseLevel,
            PulseWidth,
            Count,
            MeasurementEnable,
            BufferName,
            PulseDelay,
            PulseOffTime,
            BiasLimit,
            PulseLimit,
            AbortOnCompliance,
        )

    def ConfigurePulseLinearSweep(
        self,
        Function,
        BiasLevel,
        Start,
        Stop,
        Points,
        PulseWidth,
        MeasurementEnable,
        BufferName,
        PulseDelay,
        PulseOffTime,
        Count,
        BiasLimit,
        PulseLimit,
        AbortOnCompliance,
        Dual,
    ):
        """

        :param Function:
        :type Function:
        :param BiasLevel:
        :type BiasLevel:
        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        :param Points:
        :type Points:
        :param PulseWidth:
        :type PulseWidth:
        :param MeasurementEnable:
        :type MeasurementEnable:
        :param BufferName:
        :type BufferName:
        :param PulseDelay:
        :type PulseDelay:
        :param PulseOffTime:
        :type PulseOffTime:
        :param Count:
        :type Count:
        :param BiasLimit:
        :type BiasLimit:
        :param PulseLimit:
        :type PulseLimit:
        :param AbortOnCompliance:
        :type AbortOnCompliance:
        :param Dual:
        :type Dual:
        """
        return self._dllwrap.ConfigurePulseLinearSweep(
            self._vi,
            Function,
            BiasLevel,
            Start,
            Stop,
            Points,
            PulseWidth,
            MeasurementEnable,
            BufferName,
            PulseDelay,
            PulseOffTime,
            Count,
            BiasLimit,
            PulseLimit,
            AbortOnCompliance,
            Dual,
        )

    def ConfigurePulseLinearSweepStep(
        self,
        Function,
        BiasLevel,
        Start,
        Stop,
        Step,
        PulseWidth,
        MeasurementEnable,
        BufferName,
        PulseDelay,
        PulseOffTime,
        Count,
        BiasLimit,
        PulseLimit,
        AbortOnCompliance,
        Dual,
    ):
        """

        :param Function:
        :type Function:
        :param BiasLevel:
        :type BiasLevel:
        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        :param Step:
        :type Step:
        :param PulseWidth:
        :type PulseWidth:
        :param MeasurementEnable:
        :type MeasurementEnable:
        :param BufferName:
        :type BufferName:
        :param PulseDelay:
        :type PulseDelay:
        :param PulseOffTime:
        :type PulseOffTime:
        :param Count:
        :type Count:
        :param BiasLimit:
        :type BiasLimit:
        :param PulseLimit:
        :type PulseLimit:
        :param AbortOnCompliance:
        :type AbortOnCompliance:
        :param Dual:
        :type Dual:
        """
        return self._dllwrap.ConfigurePulseLinearSweepStep(
            self._vi,
            Function,
            BiasLevel,
            Start,
            Stop,
            Step,
            PulseWidth,
            MeasurementEnable,
            BufferName,
            PulseDelay,
            PulseOffTime,
            Count,
            BiasLimit,
            PulseLimit,
            AbortOnCompliance,
            Dual,
        )

    def ConfigurePulseLogarithmicSweep(
        self,
        Function,
        BiasLevel,
        Start,
        Stop,
        Points,
        PulseWidth,
        MeasurementEnable,
        BufferName,
        PulseDelay,
        PulseOffTime,
        Count,
        BiasLimit,
        PulseLimit,
        AbortOnCompliance,
        Dual,
        Asymptote,
    ):
        """

        :param Function:
        :type Function:
        :param BiasLevel:
        :type BiasLevel:
        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        :param Points:
        :type Points:
        :param PulseWidth:
        :type PulseWidth:
        :param MeasurementEnable:
        :type MeasurementEnable:
        :param BufferName:
        :type BufferName:
        :param PulseDelay:
        :type PulseDelay:
        :param PulseOffTime:
        :type PulseOffTime:
        :param Count:
        :type Count:
        :param BiasLimit:
        :type BiasLimit:
        :param PulseLimit:
        :type PulseLimit:
        :param AbortOnCompliance:
        :type AbortOnCompliance:
        :param Dual:
        :type Dual:
        :param Asymptote:
        :type Asymptote:
        """
        return self._dllwrap.ConfigurePulseLogarithmicSweep(
            self._vi,
            Function,
            BiasLevel,
            Start,
            Stop,
            Points,
            PulseWidth,
            MeasurementEnable,
            BufferName,
            PulseDelay,
            PulseOffTime,
            Count,
            BiasLimit,
            PulseLimit,
            AbortOnCompliance,
            Dual,
            Asymptote,
        )

    def ConfigurePulseListSweep(
        self,
        Function,
        PulseWidth,
        MeasurementEnable,
        BufferName,
        StartIndex,
        Count,
        PulseDelay,
        PulseOffTime,
        AbortOnCompliance,
        ConfligListNameBufferSize,
        ConfligListName,
    ):
        """

        :param Function:
        :type Function:
        :param PulseWidth:
        :type PulseWidth:
        :param MeasurementEnable:
        :type MeasurementEnable:
        :param BufferName:
        :type BufferName:
        :param StartIndex:
        :type StartIndex:
        :param Count:
        :type Count:
        :param PulseDelay:
        :type PulseDelay:
        :param PulseOffTime:
        :type PulseOffTime:
        :param AbortOnCompliance:
        :type AbortOnCompliance:
        :param ConfligListNameBufferSize:
        :type ConfligListNameBufferSize:
        :param ConfligListName:
        :type ConfligListName:
        """
        return self._dllwrap.ConfigurePulseListSweep(
            self._vi,
            Function,
            PulseWidth,
            MeasurementEnable,
            BufferName,
            StartIndex,
            Count,
            PulseDelay,
            PulseOffTime,
            AbortOnCompliance,
            ConfligListNameBufferSize,
            ConfligListName,
        )

    def GetPulseList(self, Function, SourceListBufferSize):
        """

        :param Function:
        :type Function:
        :param SourceListBufferSize:
        :type SourceListBufferSize:
        """
        return self._dllwrap.GetPulseList(self._vi, Function, SourceListBufferSize)

    def SetPulseList(self, Function, SourceList):
        """

        :param Function:
        :type Function:
        :param SourceList:
        :type SourceList:
        """
        return self._dllwrap.SetPulseList(self._vi, Function, SourceList)

    def GetPulseListAppend(self, Function, SourceListBufferSize):
        """

        :param Function:
        :type Function:
        :param SourceListBufferSize:
        :type SourceListBufferSize:
        """
        return self._dllwrap.GetPulseListAppend(self._vi, Function, SourceListBufferSize)

    def SetPulseListAppend(self, Function, SourceList):
        """

        :param Function:
        :type Function:
        :param SourceList:
        :type SourceList:
        """
        return self._dllwrap.SetPulseListAppend(self._vi, Function, SourceList)

    def GetPulseListSize(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetPulseListSize(self._vi, Function)

    def Clear4(self):
        """"""
        return self._dllwrap.Clear4(self._vi)

    def GetResolution(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetResolution(self._vi, Function)

    def SetResolution(self, Function, Resolution):
        """

        :param Function:
        :type Function:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.SetResolution(self._vi, Function, Resolution)

    def Message(self, LineNumber, TextMessageBufferSize, TextMessage):
        """

        :param LineNumber:
        :type LineNumber:
        :param TextMessageBufferSize:
        :type TextMessageBufferSize:
        :param TextMessage:
        :type TextMessage:
        """
        return self._dllwrap.Message(self._vi, LineNumber, TextMessageBufferSize, TextMessage)

    def ReadOperationCondition(self):
        """"""
        return self._dllwrap.ReadOperationCondition(self._vi)

    def MapEventIDToBitNumberInOERegister(self, BitNumber, SetEvent, ClearEvent):
        """

        :param BitNumber:
        :type BitNumber:
        :param SetEvent:
        :type SetEvent:
        :param ClearEvent:
        :type ClearEvent:
        """
        return self._dllwrap.MapEventIDToBitNumberInOERegister(self._vi, BitNumber, SetEvent, ClearEvent)

    def ReadOERegisterMap(self, BitNumber):
        """

        :param BitNumber:
        :type BitNumber:
        """
        return self._dllwrap.ReadOERegisterMap(self._vi, BitNumber)

    def Preset(self):
        """"""
        return self._dllwrap.Preset(self._vi)

    def ReadQuestionableCondition(self):
        """"""
        return self._dllwrap.ReadQuestionableCondition(self._vi)

    def MapEventIDToBitNumberInQERegister(self, BitNumber, SetEvent, ClearEvent):
        """

        :param BitNumber:
        :type BitNumber:
        :param SetEvent:
        :type SetEvent:
        :param ClearEvent:
        :type ClearEvent:
        """
        return self._dllwrap.MapEventIDToBitNumberInQERegister(self._vi, BitNumber, SetEvent, ClearEvent)

    def ReadQERegisterMap(self, BitNumber):
        """

        :param BitNumber:
        :type BitNumber:
        """
        return self._dllwrap.ReadQERegisterMap(self._vi, BitNumber)

    def ReadOperationEventRegister(self):
        """"""
        return self._dllwrap.ReadOperationEventRegister(self._vi)

    def ReadQuestionableEventRegister(self):
        """"""
        return self._dllwrap.ReadQuestionableEventRegister(self._vi)

    def SetLineMode(self, LineNumber, TriggerType, LineState):
        """

        :param LineNumber:
        :type LineNumber:
        :param TriggerType:
        :type TriggerType:
        :param LineState:
        :type LineState:
        """
        return self._dllwrap.SetLineMode(self._vi, LineNumber, TriggerType, LineState)

    def GetLineState(self, LineNumber):
        """

        :param LineNumber:
        :type LineNumber:
        """
        return self._dllwrap.GetLineState(self._vi, LineNumber)

    def SetLineState(self, LineNumber, LineState):
        """

        :param LineNumber:
        :type LineNumber:
        :param LineState:
        :type LineState:
        """
        return self._dllwrap.SetLineState(self._vi, LineNumber, LineState)

    def Read2(self):
        """"""
        return self._dllwrap.Read2(self._vi)

    def Write(self, Value):
        """

        :param Value:
        :type Value:
        """
        return self._dllwrap.Write(self._vi, Value)

    def GetLineMode(self, LineNumber):
        """

        :param LineNumber:
        :type LineNumber:
        """
        return self._dllwrap.GetLineMode(self._vi, LineNumber)

    def BlenderClear(self, BlenderNumber):
        """

        :param BlenderNumber:
        :type BlenderNumber:
        """
        return self._dllwrap.BlenderClear(self._vi, BlenderNumber)

    def GetBlenderMode(self, BlenderNumber):
        """

        :param BlenderNumber:
        :type BlenderNumber:
        """
        return self._dllwrap.GetBlenderMode(self._vi, BlenderNumber)

    def SetBlenderMode(self, BlenderNumber, BlenderMode):
        """

        :param BlenderNumber:
        :type BlenderNumber:
        :param BlenderMode:
        :type BlenderMode:
        """
        return self._dllwrap.SetBlenderMode(self._vi, BlenderNumber, BlenderMode)

    def GetBlenderOverRun(self, BlenderNumber):
        """

        :param BlenderNumber:
        :type BlenderNumber:
        """
        return self._dllwrap.GetBlenderOverRun(self._vi, BlenderNumber)

    def ResetTriggerModel(self):
        """"""
        return self._dllwrap.ResetTriggerModel(self._vi)

    def ConfigureBlenderStimulus(self, BlenderNumber, StimulusNumber, EventBufferSize, Event):
        """

        :param BlenderNumber:
        :type BlenderNumber:
        :param StimulusNumber:
        :type StimulusNumber:
        :param EventBufferSize:
        :type EventBufferSize:
        :param Event:
        :type Event:
        """
        return self._dllwrap.ConfigureBlenderStimulus(self._vi, BlenderNumber, StimulusNumber, EventBufferSize, Event)

    def QueryBlenderStimulus(self, BlenderNumber, StimulusNumber, ValBufferSize):
        """

        :param BlenderNumber:
        :type BlenderNumber:
        :param StimulusNumber:
        :type StimulusNumber:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.QueryBlenderStimulus(self._vi, BlenderNumber, StimulusNumber, ValBufferSize)

    def LoadTriggerModelList(
        self,
        MeasureConfigListBufferSize,
        MeasureConfigList,
        SourceConfigListBufferSize,
        SourceConfigList,
        Delay,
        ReadingBufferBufferSize,
        ReadingBuffer,
    ):
        """

        :param MeasureConfigListBufferSize:
        :type MeasureConfigListBufferSize:
        :param MeasureConfigList:
        :type MeasureConfigList:
        :param SourceConfigListBufferSize:
        :type SourceConfigListBufferSize:
        :param SourceConfigList:
        :type SourceConfigList:
        :param Delay:
        :type Delay:
        :param ReadingBufferBufferSize:
        :type ReadingBufferBufferSize:
        :param ReadingBuffer:
        :type ReadingBuffer:
        """
        return self._dllwrap.LoadTriggerModelList(
            self._vi,
            MeasureConfigListBufferSize,
            MeasureConfigList,
            SourceConfigListBufferSize,
            SourceConfigList,
            Delay,
            ReadingBufferBufferSize,
            ReadingBuffer,
        )

    def LoadTriggerModelLoopDuration(self, Duration, Delay, ReadingBufferBufferSize, ReadingBuffer):
        """

        :param Duration:
        :type Duration:
        :param Delay:
        :type Delay:
        :param ReadingBufferBufferSize:
        :type ReadingBufferBufferSize:
        :param ReadingBuffer:
        :type ReadingBuffer:
        """
        return self._dllwrap.LoadTriggerModelLoopDuration(
            self._vi, Duration, Delay, ReadingBufferBufferSize, ReadingBuffer
        )

    def LoadTriggerModelLoopSimple(self, Count, Delay, ReadingBufferBufferSize, ReadingBuffer):
        """

        :param Count:
        :type Count:
        :param Delay:
        :type Delay:
        :param ReadingBufferBufferSize:
        :type ReadingBufferBufferSize:
        :param ReadingBuffer:
        :type ReadingBuffer:
        """
        return self._dllwrap.LoadTriggerModelLoopSimple(self._vi, Count, Delay, ReadingBufferBufferSize, ReadingBuffer)

    def LoadTriggerModelExternal(
        self,
        DigitalInLine,
        DigitalOutLine,
        Count,
        Delay,
        ReadingBufferBufferSize,
        ReadingBuffer,
    ):
        """

        :param DigitalInLine:
        :type DigitalInLine:
        :param DigitalOutLine:
        :type DigitalOutLine:
        :param Count:
        :type Count:
        :param Delay:
        :type Delay:
        :param ReadingBufferBufferSize:
        :type ReadingBufferBufferSize:
        :param ReadingBuffer:
        :type ReadingBuffer:
        """
        return self._dllwrap.LoadTriggerModelExternal(
            self._vi,
            DigitalInLine,
            DigitalOutLine,
            Count,
            Delay,
            ReadingBufferBufferSize,
            ReadingBuffer,
        )

    def Clear5(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.Clear5(self._vi, TimerNumber)

    def GetEventCount(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetEventCount(self._vi, TimerNumber)

    def SetEventCount(self, TimerNumber, EventCount):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param EventCount:
        :type EventCount:
        """
        return self._dllwrap.SetEventCount(self._vi, TimerNumber, EventCount)

    def GetDelay(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetDelay(self._vi, TimerNumber)

    def SetDelay(self, TimerNumber, Delay):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param Delay:
        :type Delay:
        """
        return self._dllwrap.SetDelay(self._vi, TimerNumber, Delay)

    def GetIsTimerOverRun(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetIsTimerOverRun(self._vi, TimerNumber)

    def GetGenerateEventidState(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetGenerateEventidState(self._vi, TimerNumber)

    def SetGenerateEventidState(self, TimerNumber, GenerateEventIDState):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param GenerateEventIDState:
        :type GenerateEventIDState:
        """
        return self._dllwrap.SetGenerateEventidState(self._vi, TimerNumber, GenerateEventIDState)

    def GetState(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetState(self._vi, TimerNumber)

    def SetState(self, TimerNumber, State):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param State:
        :type State:
        """
        return self._dllwrap.SetState(self._vi, TimerNumber, State)

    def GetStartByEventid(self, TimerNumber, StartByEventIDBufferSize):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param StartByEventIDBufferSize:
        :type StartByEventIDBufferSize:
        """
        return self._dllwrap.GetStartByEventid(self._vi, TimerNumber, StartByEventIDBufferSize)

    def SetStartByEventid(self, TimerNumber, StartByEventID):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param StartByEventID:
        :type StartByEventID:
        """
        return self._dllwrap.SetStartByEventid(self._vi, TimerNumber, StartByEventID)

    def GetStartFractional(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetStartFractional(self._vi, TimerNumber)

    def SetStartFractional(self, TimerNumber, StartFractional):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param StartFractional:
        :type StartFractional:
        """
        return self._dllwrap.SetStartFractional(self._vi, TimerNumber, StartFractional)

    def GetStartSeconds(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetStartSeconds(self._vi, TimerNumber)

    def SetStartSeconds(self, TimerNumber, StartSeconds):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param StartSeconds:
        :type StartSeconds:
        """
        return self._dllwrap.SetStartSeconds(self._vi, TimerNumber, StartSeconds)

    def BranchAlways(self, BlockNumber, BranchPath):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BranchPath:
        :type BranchPath:
        """
        return self._dllwrap.BranchAlways(self._vi, BlockNumber, BranchPath)

    def BranchCounter(self, BlockNumber, TargetCount, BranchPath):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param TargetCount:
        :type TargetCount:
        :param BranchPath:
        :type BranchPath:
        """
        return self._dllwrap.BranchCounter(self._vi, BlockNumber, TargetCount, BranchPath)

    def ReadBranchCounter(self, BlockNumber):
        """

        :param BlockNumber:
        :type BlockNumber:
        """
        return self._dllwrap.ReadBranchCounter(self._vi, BlockNumber)

    def BranchDelta(self, BlockNumber, TargetDifference, BranchPath, MeasureBlock):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param TargetDifference:
        :type TargetDifference:
        :param BranchPath:
        :type BranchPath:
        :param MeasureBlock:
        :type MeasureBlock:
        """
        return self._dllwrap.BranchDelta(self._vi, BlockNumber, TargetDifference, BranchPath, MeasureBlock)

    def BranchEvent(self, BlockNumber, EventIDBufferSize, EventID, BranchPath):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param EventIDBufferSize:
        :type EventIDBufferSize:
        :param EventID:
        :type EventID:
        :param BranchPath:
        :type BranchPath:
        """
        return self._dllwrap.BranchEvent(self._vi, BlockNumber, EventIDBufferSize, EventID, BranchPath)

    def BranchLimitConstant(self, BlockNumber, LimitType, LimitA, LimitB, BranchPath, MeasureBlock):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param LimitType:
        :type LimitType:
        :param LimitA:
        :type LimitA:
        :param LimitB:
        :type LimitB:
        :param BranchPath:
        :type BranchPath:
        :param MeasureBlock:
        :type MeasureBlock:
        """
        return self._dllwrap.BranchLimitConstant(
            self._vi, BlockNumber, LimitType, LimitA, LimitB, BranchPath, MeasureBlock
        )

    def BranchLimitDynamic(self, BlockNumber, LimitType, LimitNumuber, BranchPath, MeasureBlock):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param LimitType:
        :type LimitType:
        :param LimitNumuber:
        :type LimitNumuber:
        :param BranchPath:
        :type BranchPath:
        :param MeasureBlock:
        :type MeasureBlock:
        """
        return self._dllwrap.BranchLimitDynamic(
            self._vi, BlockNumber, LimitType, LimitNumuber, BranchPath, MeasureBlock
        )

    def BranchOnce(self, BlockNumber, BranchPath):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BranchPath:
        :type BranchPath:
        """
        return self._dllwrap.BranchOnce(self._vi, BlockNumber, BranchPath)

    def BranchOnceExcluded(self, BlockNumber, BranchPath):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BranchPath:
        :type BranchPath:
        """
        return self._dllwrap.BranchOnceExcluded(self._vi, BlockNumber, BranchPath)

    def BufferClear(self, BlockNumber, BufferName):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.BufferClear(self._vi, BlockNumber, BufferName)

    def RecallConfigurationNext(self, BlockNumber, ConfigurationListBufferSize, ConfigurationList):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param ConfigurationListBufferSize:
        :type ConfigurationListBufferSize:
        :param ConfigurationList:
        :type ConfigurationList:
        """
        return self._dllwrap.RecallConfigurationNext(
            self._vi, BlockNumber, ConfigurationListBufferSize, ConfigurationList
        )

    def RecallConfigurationPrevious(self, BlockNumber, ConfigurationListBufferSize, ConfigurationList):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param ConfigurationListBufferSize:
        :type ConfigurationListBufferSize:
        :param ConfigurationList:
        :type ConfigurationList:
        """
        return self._dllwrap.RecallConfigurationPrevious(
            self._vi, BlockNumber, ConfigurationListBufferSize, ConfigurationList
        )

    def RecallConfiguration(self, BlockNumber, ConfigurationListBufferSize, ConfigurationList, Point):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param ConfigurationListBufferSize:
        :type ConfigurationListBufferSize:
        :param ConfigurationList:
        :type ConfigurationList:
        :param Point:
        :type Point:
        """
        return self._dllwrap.RecallConfiguration(
            self._vi, BlockNumber, ConfigurationListBufferSize, ConfigurationList, Point
        )

    def ConstantDelay(self, BlockNumber, Time):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param Time:
        :type Time:
        """
        return self._dllwrap.ConstantDelay(self._vi, BlockNumber, Time)

    def DelayDynamic(self, BlockNumber, UserDelayType, UserDelayNumber):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param UserDelayType:
        :type UserDelayType:
        :param UserDelayNumber:
        :type UserDelayNumber:
        """
        return self._dllwrap.DelayDynamic(self._vi, BlockNumber, UserDelayType, UserDelayNumber)

    def ConfigureDigitalIO(self, BlockNumber, BitPattern, BitMask):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BitPattern:
        :type BitPattern:
        :param BitMask:
        :type BitMask:
        """
        return self._dllwrap.ConfigureDigitalIO(self._vi, BlockNumber, BitPattern, BitMask)

    def Measure3(self, BlockNumber, BufferName):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.Measure3(self._vi, BlockNumber, BufferName)

    def Notify(self, BlockNumber, NotifyID):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param NotifyID:
        :type NotifyID:
        """
        return self._dllwrap.Notify(self._vi, BlockNumber, NotifyID)

    def SourceState(self, BlockNumber, State):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param State:
        :type State:
        """
        return self._dllwrap.SourceState(self._vi, BlockNumber, State)

    def Wait(
        self,
        BlockNumber,
        Event1BufferSize,
        Event1,
        StimulusAction,
        Logic,
        Event2BufferSize,
        Event2,
        Event3BufferSize,
        Event3,
    ):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param Event1BufferSize:
        :type Event1BufferSize:
        :param Event1:
        :type Event1:
        :param StimulusAction:
        :type StimulusAction:
        :param Logic:
        :type Logic:
        :param Event2BufferSize:
        :type Event2BufferSize:
        :param Event2:
        :type Event2:
        :param Event3BufferSize:
        :type Event3BufferSize:
        :param Event3:
        :type Event3:
        """
        return self._dllwrap.Wait(
            self._vi,
            BlockNumber,
            Event1BufferSize,
            Event1,
            StimulusAction,
            Logic,
            Event2BufferSize,
            Event2,
            Event3BufferSize,
            Event3,
        )

    def LogEvent(self, BlockNumber, EventBufferSize, Event, MessageBufferSize, Message):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param EventBufferSize:
        :type EventBufferSize:
        :param Event:
        :type Event:
        :param MessageBufferSize:
        :type MessageBufferSize:
        :param Message:
        :type Message:
        """
        return self._dllwrap.LogEvent(self._vi, BlockNumber, EventBufferSize, Event, MessageBufferSize, Message)

    def NoOperation(self, BlockNumber):
        """

        :param BlockNumber:
        :type BlockNumber:
        """
        return self._dllwrap.NoOperation(self._vi, BlockNumber)

    def TriggerModelBlockDigitize(self, BlockNumber, BufferNameBufferSize, BufferName, Count):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BufferNameBufferSize:
        :type BufferNameBufferSize:
        :param BufferName:
        :type BufferName:
        :param Count:
        :type Count:
        """
        return self._dllwrap.TriggerModelBlockDigitize(self._vi, BlockNumber, BufferNameBufferSize, BufferName, Count)

    def TriggerModelBlockPulseOutput(self, BlockNumber, State):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param State:
        :type State:
        """
        return self._dllwrap.TriggerModelBlockPulseOutput(self._vi, BlockNumber, State)

    def Clear6(self, InputLine):
        """

        :param InputLine:
        :type InputLine:
        """
        return self._dllwrap.Clear6(self._vi, InputLine)

    def GetMode(self, InputLine):
        """

        :param InputLine:
        :type InputLine:
        """
        return self._dllwrap.GetMode(self._vi, InputLine)

    def SetMode(self, InputLine, Mode):
        """

        :param InputLine:
        :type InputLine:
        :param Mode:
        :type Mode:
        """
        return self._dllwrap.SetMode(self._vi, InputLine, Mode)

    def GetOverRunStatus(self, InputLine):
        """

        :param InputLine:
        :type InputLine:
        """
        return self._dllwrap.GetOverRunStatus(self._vi, InputLine)

    def GetOutputLogic(self, InputLine):
        """

        :param InputLine:
        :type InputLine:
        """
        return self._dllwrap.GetOutputLogic(self._vi, InputLine)

    def SetOutputLogic(self, InputLine, OutputLogic):
        """

        :param InputLine:
        :type InputLine:
        :param OutputLogic:
        :type OutputLogic:
        """
        return self._dllwrap.SetOutputLogic(self._vi, InputLine, OutputLogic)

    def GetOutputPulsewidth(self, InputLine):
        """

        :param InputLine:
        :type InputLine:
        """
        return self._dllwrap.GetOutputPulsewidth(self._vi, InputLine)

    def SetOutputPulsewidth(self, InputLine, OutputPulsewidth):
        """

        :param InputLine:
        :type InputLine:
        :param OutputPulsewidth:
        :type OutputPulsewidth:
        """
        return self._dllwrap.SetOutputPulsewidth(self._vi, InputLine, OutputPulsewidth)

    def GetOutputStimulus(self, InputLine, OutputStimulusBufferSize):
        """

        :param InputLine:
        :type InputLine:
        :param OutputStimulusBufferSize:
        :type OutputStimulusBufferSize:
        """
        return self._dllwrap.GetOutputStimulus(self._vi, InputLine, OutputStimulusBufferSize)

    def SetOutputStimulus(self, InputLine, OutputStimulus):
        """

        :param InputLine:
        :type InputLine:
        :param OutputStimulus:
        :type OutputStimulus:
        """
        return self._dllwrap.SetOutputStimulus(self._vi, InputLine, OutputStimulus)

    def Clear7(self, EventNumber):
        """

        :param EventNumber:
        :type EventNumber:
        """
        return self._dllwrap.Clear7(self._vi, EventNumber)

    def GetMode2(self, EventNumber):
        """

        :param EventNumber:
        :type EventNumber:
        """
        return self._dllwrap.GetMode2(self._vi, EventNumber)

    def SetMode2(self, EventNumber, Mode):
        """

        :param EventNumber:
        :type EventNumber:
        :param Mode:
        :type Mode:
        """
        return self._dllwrap.SetMode2(self._vi, EventNumber, Mode)

    def GetOverRunStatus2(self, EventNumber):
        """

        :param EventNumber:
        :type EventNumber:
        """
        return self._dllwrap.GetOverRunStatus2(self._vi, EventNumber)

    def GetEventGeneratorState(self, EventNumber):
        """

        :param EventNumber:
        :type EventNumber:
        """
        return self._dllwrap.GetEventGeneratorState(self._vi, EventNumber)

    def SetEventGeneratorState(self, EventNumber, EventGeneratorState):
        """

        :param EventNumber:
        :type EventNumber:
        :param EventGeneratorState:
        :type EventGeneratorState:
        """
        return self._dllwrap.SetEventGeneratorState(self._vi, EventNumber, EventGeneratorState)

    def GetIpAddress(self, EventNumber, IPAddressBufferSize):
        """

        :param EventNumber:
        :type EventNumber:
        :param IPAddressBufferSize:
        :type IPAddressBufferSize:
        """
        return self._dllwrap.GetIpAddress(self._vi, EventNumber, IPAddressBufferSize)

    def SetIpAddress(self, EventNumber, IPAddress):
        """

        :param EventNumber:
        :type EventNumber:
        :param IPAddress:
        :type IPAddress:
        """
        return self._dllwrap.SetIpAddress(self._vi, EventNumber, IPAddress)

    def GetOutLogic(self, EventNumber):
        """

        :param EventNumber:
        :type EventNumber:
        """
        return self._dllwrap.GetOutLogic(self._vi, EventNumber)

    def SetOutLogic(self, EventNumber, OutLogic):
        """

        :param EventNumber:
        :type EventNumber:
        :param OutLogic:
        :type OutLogic:
        """
        return self._dllwrap.SetOutLogic(self._vi, EventNumber, OutLogic)

    def GetOutProtocol(self, EventNumber):
        """

        :param EventNumber:
        :type EventNumber:
        """
        return self._dllwrap.GetOutProtocol(self._vi, EventNumber)

    def SetOutProtocol(self, EventNumber, OutProtocol):
        """

        :param EventNumber:
        :type EventNumber:
        :param OutProtocol:
        :type OutProtocol:
        """
        return self._dllwrap.SetOutProtocol(self._vi, EventNumber, OutProtocol)

    def GetOutStimulus(self, EventNumber, OutStimulusBufferSize):
        """

        :param EventNumber:
        :type EventNumber:
        :param OutStimulusBufferSize:
        :type OutStimulusBufferSize:
        """
        return self._dllwrap.GetOutStimulus(self._vi, EventNumber, OutStimulusBufferSize)

    def SetOutStimulus(self, EventNumber, OutStimulus):
        """

        :param EventNumber:
        :type EventNumber:
        :param OutStimulus:
        :type OutStimulus:
        """
        return self._dllwrap.SetOutStimulus(self._vi, EventNumber, OutStimulus)

    def Query(self, Command, ValBufferSize):
        """

        :param Command:
        :type Command:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.Query(self._vi, Command, ValBufferSize)

    def ReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadString(self._vi, ValBufferSize)

    def WriteString(self, Command):
        """

        :param Command:
        :type Command:
        """
        return self._dllwrap.WriteString(self._vi, Command)
