from __future__ import annotations

from .ke2450_dllwrap import *


class ke2450_Channel:
    def __init__(self, parent, name):
        self._parent = parent
        """:type : pverify.drivers.SMU.ke2450.ke2450.ke2450"""
        self._name = name

        from .ke2450_Source import ke2450_Source

        self.__Source = ke2450_Source(self)

        from .ke2450_Measure import ke2450_Measure

        self.__Measure = ke2450_Measure(self)

    @property
    def Source(self):
        """
        Use this property to access the sourcing subclass
        """
        return self.__Source

    @property
    def Measure(self):
        """
        Use this property to access the metering subclass
        """
        return self.__Measure

    @property
    def _vi(self):
        """
        The instrument IO session
        """
        return self._parent._vi

    @property
    def _dllwrap(self):
        """
        The Python dll wrapper module
        """
        return self._parent._dllwrap

    def SourceMeterSetup(self, Source, Measure, Performance=None):
        """
        Performs a quick setup of source, measure and performance.

        :param Source: The source function. Valid values: "voltage", "current" or short "vol", "cur"
        :type Source: str
        :param Measure: The measure function. Valid values: "voltage", "current", "resistance", "power" or short "vol", "cur", "res", "pow".
        :type Measure: str
        :param Performance: The measurement performance. The more the performance, the lower the resolution and the higher the speed.

            Model ke2450:
                ===  ============  ==============  =========  =========  ============
                0:   ~6.5 digits   ~1     rdgs/s   NPLC=1     Filter=10  AutoZero=On
                1:   ~6.5 digits   ~5     rdgs/s   NPLC=1     Filter=5   AutoZero=On
                2:   ~5.5 digits   ~15    rdgs/s   NPLC=1     Filter=0   AutoZero=On
                3:   ~5.5 digits   ~100   rdgs/s   NPLC=0.1   Filter=0   AutoZero=On
                4:   ~4.5 digits   ~500   rdgs/s   NPLC=0.1   Filter=0   AutoZero=Off
                5:   ~4.5 digits   ~900   rdgs/s   NPLC=0.05  Filter=0   AutoZero=Off
                6:   ~3.5 digits   ~2500  rdgs/s   NPLC=0.01  Filter=0   AutoZero=Off
                ===  ============  ==============  =========  =========  ============
        :type Performance: int
        """
        Measure = str(Measure).lower()
        Source = str(Source).lower()

        # Metering setup
        if "cur" in Measure:
            self._dllwrap.SetAttributeViInt32(
                self._vi,
                self._name,
                KE2450_ATTR_ENABLED_FUNCTION,
                KE2450_VAL_FUNCTION_CURRENT,
            )
            self.Measure.Current.ConfigureCurrentMeasureUnits("amps")
            subsys = self.Measure.Current

        elif "vol" in Measure:
            self._dllwrap.SetAttributeViInt32(
                self._vi,
                self._name,
                KE2450_ATTR_ENABLED_FUNCTION,
                KE2450_VAL_FUNCTION_VOLTAGE,
            )
            self.Measure.Voltage.ConfigureVoltageMeasureUnits("volts")
            subsys = self.Measure.Voltage

        elif "res" in Measure:
            if "cur" in Source:
                self._dllwrap.SetAttributeViInt32(
                    self._vi,
                    self._name,
                    KE2450_ATTR_ENABLED_FUNCTION,
                    KE2450_VAL_FUNCTION_VOLTAGE,
                )
                self.Measure.Voltage.ConfigureVoltageMeasureUnits("ohms")
                subsys = self.Measure.Voltage
            elif "vol" in Source:
                self._dllwrap.SetAttributeViInt32(
                    self._vi,
                    self._name,
                    KE2450_ATTR_ENABLED_FUNCTION,
                    KE2450_VAL_FUNCTION_CURRENT,
                )
                self.Measure.Current.ConfigureCurrentMeasureUnits("ohms")
                subsys = self.Measure.Current
            else:
                msg = "Invalid value for parameter 'Source'. Valid: 'current', 'voltage'."
                raise ValueError(msg)

        elif "pow" in Measure:
            if "cur" in Source:
                self._dllwrap.SetAttributeViInt32(
                    self._vi,
                    self._name,
                    KE2450_ATTR_ENABLED_FUNCTION,
                    KE2450_VAL_FUNCTION_VOLTAGE,
                )
                self.Measure.Voltage.ConfigureVoltageMeasureUnits("watts")
                subsys = self.Measure.Voltage
            elif "vol" in Source:
                self._dllwrap.SetAttributeViInt32(
                    self._vi,
                    self._name,
                    KE2450_ATTR_ENABLED_FUNCTION,
                    KE2450_VAL_FUNCTION_CURRENT,
                )
                self.Measure.Current.ConfigureCurrentMeasureUnits("watts")
                subsys = self.Measure.Current
            else:
                msg = "Invalid value for parameter 'Source'. Valid: 'current', 'voltage'."
                raise ValueError(msg)

        else:
            msg = "Invalid value for parameter 'Function'. Valid: 'current', 'voltage', 'resistance'."
            raise ValueError(msg)

        # Sourcing setup
        if "cur" in Source:
            self._dllwrap.SetAttributeViInt32(
                self._vi,
                self._name,
                KE2450_ATTR_SOURCE_MODE,
                KE2450_VAL_FUNCTION2_CURRENT,
            )
        elif "vol" in Source:
            self._dllwrap.SetAttributeViInt32(
                self._vi,
                self._name,
                KE2450_ATTR_SOURCE_MODE,
                KE2450_VAL_FUNCTION2_VOLTAGE,
            )
        else:
            msg = "Invalid value for parameter 'Source'. Valid: 'current', 'voltage'."
            raise ValueError(msg)

        # Performance setup
        if Performance is not None and "2450" in self._parent.Identity.InstrumentModel:
            if not (0 <= Performance <= 6):
                msg = "Invalid value for parameter 'Performance'. Valid: 0...6."
                raise ValueError(msg)
            else:
                funcs = (
                    # Resolution, NPLC, Filter, AutoZero
                    (KE2450_VAL_DISPLAY_RESOLUTION_6AND_HALF_DIGITS, 1, 10, True),
                    (KE2450_VAL_DISPLAY_RESOLUTION_6AND_HALF_DIGITS, 1, 5, True),
                    (KE2450_VAL_DISPLAY_RESOLUTION_5AND_HALF_DIGITS, 1, 0, True),
                    (KE2450_VAL_DISPLAY_RESOLUTION_5AND_HALF_DIGITS, 0.1, 0, True),
                    (KE2450_VAL_DISPLAY_RESOLUTION_4AND_HALF_DIGITS, 0.1, 0, False),
                    (KE2450_VAL_DISPLAY_RESOLUTION_4AND_HALF_DIGITS, 0.05, 0, False),
                    (KE2450_VAL_DISPLAY_RESOLUTION_3AND_HALF_DIGITS, 0.05, 0, False),
                )

                args = funcs[Performance]
                subsys.ConfigureMeasurement(NPLC=args[1], Resolution=args[0], AutoZeroState=args[3])
                subsys.ConfigureAveragingFilter(args[2] > 0, args[2])

    def ResetOutputProtection(self):
        """
        resets the power supply's output protection after an over-voltage or over-current condition occurs.
        """
        self._dllwrap.ResetOutputProtection(self._vi, self._name)
