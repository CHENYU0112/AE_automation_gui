from __future__ import annotations

from pyvisa.resources.messagebased import MessageBasedResource

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .ke2450_Channel import ke2450_Channel
from .ke2450_dllwrap import *


class ke2450(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = ke2450_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__channels = {}
        """:type : dict[str,ke2450_Channel]"""

        from .ke2450_DevUtils import ke2450_DevUtils

        self.DevUtils = ke2450_DevUtils(self)

        from .IIviDriverIdentity import IIviDriverIdentity

        self.Identity = IIviDriverIdentity(self)

        from .ke2450_Trigger import ke2450_Trigger

        self.Trigger = ke2450_Trigger(self)

        from .ke2450_DirectIO import ke2450_DirectIO

        self.DirectIO = ke2450_DirectIO(self)

        from .ke2450_System import ke2450_System

        self.System = ke2450_System(self)

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        try:
            self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        except InstrumentError as ie:
            if "IVI_ERROR_RESET_FAILED" in ie.description:
                msg = (
                    "Failed to initialize the SMU. One possible reason might be a misconfigured commandset. "
                    "Get the vendors User or Reference Manual and look up 'How do I change the command set?' in the "
                    "'Troubleshooting FAQs' section for step by step instructions on how to change and verify the "
                    "active commandset to the full-featured 'SCPI'."
                )
                raise InstrumentError(status=ie.status, description=msg) from None
            else:
                raise
        self.__Initialized = True

        while 1:
            try:
                self.CheckError()
                break
            except Exception:
                pass

        if not self.DevUtils.DriverOperation.Simulate:
            self.System.ClearEventLog()

            # DLL internal direct Write/Read/Query as broken. Using raw pyvisa instead
            self.DevUtils._visa_mbr = MessageBasedResource(self.DevUtils._visa_rm, ResourceName)
            self.DevUtils._visa_mbr.session = self._dllwrap.GetAttributeViInt32(
                self._vi, "", self.DevUtils.Enums.KE2450_ATTR_IO_SESSION
            )
            self.DevUtils._visa_mbr.write_termination = "\n"
            self.DevUtils._visa_mbr.read_termination = "\n"

            self._dllwrap.SetAttributeViInt32(self._vi, "", KE2450_ATTR_DATA_FORMAT, KE2450_VAL_DATA_FORMAT_TYPE_ASCII)

        # Dynamically assign channel objects
        ccount = self._dllwrap.GetAttributeViInt32(self._vi, "", IVI_ATTR_CHANNEL_COUNT)
        for c in range(ccount):
            setattr(self, "ch%d" % (c + 1), self.GetChannel(c + 1))

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        # Set first to None otherwise close(Vi) will print "Exception ignored in:" in the console after program
        # terminates.
        self.DevUtils._visa_mbr = None
        """:type : MessageBasedResource"""
        self._dllwrap.close(self._vi)

    def GetChannel(self, Index):
        """
        Returns a channel instance

        :param Index: The channel index (1-based)
        :type Index: int
        :rtype: ke2450_Channel
        """
        cname = self._dllwrap.GetChannelName(self._vi, int(Index), IVI_MAX_MESSAGE_BUF_SIZE)
        if cname in self.__channels:
            return self.__channels[cname]
        else:
            chan = ke2450_Channel(self, cname)
            self.__channels[cname] = chan
            return chan

    def CheckError(self):
        """
        Checks if one or multiple errors occurred and raises an exception if this is the case
        """
        status, msg = self._dllwrap.error_query(self._vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
