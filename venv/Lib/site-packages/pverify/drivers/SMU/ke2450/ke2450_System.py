from __future__ import annotations

import arrow


class ke2450_System:
    def __init__(self, parent):
        self._parent = parent
        """:type : pverify.drivers.SMU.ke2450.ke2450.ke2450"""

        from .IIviDriverUtility import IIviDriverUtility

        self.Utility = IIviDriverUtility(self)

    @property
    def _vi(self):
        """
        The instrument IO session
        """
        return self._parent._vi

    @property
    def _dllwrap(self):
        """
        The Python dll wrapper module
        """
        return self._parent._dllwrap

    def SetCurrentTime(self):
        """
        Configures the current time in the instrument
        """
        time = arrow.now()
        self._parent.DirectIO.Write(
            f":SYST:TIME {time.year}, {time.month}, {time.day}, {time.hour}, {time.minute}, {time.second}"
        )

    def SelectFrontTerminal(self):
        """
        Select the front terminal for measurements
        """
        self._dllwrap.SetAttributeViInt32(
            self._vi,
            "",
            self._parent.DevUtils.Enums.KE2450_ATTR_TERMINAL,
            self._parent.DevUtils.Enums.KE2450_VAL_SYSTEM_TERMINAL_FRONT,
        )

    def SelectRearTerminal(self):
        """
        Select the rear terminal for measurements
        """
        self._dllwrap.SetAttributeViInt32(
            self._vi,
            "",
            self._parent.DevUtils.Enums.KE2450_ATTR_TERMINAL,
            self._parent.DevUtils.Enums.KE2450_VAL_SYSTEM_TERMINAL_REAR,
        )

    def Beep(self, Frequency, Time):
        """
        Generates an audible tone at a specified frequency and time duration

        :param Frequency: The frequency of the beep (20 to 20000).
        :param Time: The amount of time to play the tone in seconds (0.001 to 100).
        """
        self._dllwrap.Beep(self._vi, float(Frequency), float(Time))

    def ClearEventLog(self):
        """
        Clears messages from event log.
        """
        self._dllwrap.Clear(self._vi)

    def BufferCreate(self, BufferName, BufferSize):
        """
        Creates a user-defined reading buffer.

        :param BufferName: A user-supplied string that indicates the name of a user-defined buffer
        :param BufferSize: A number that indicates the maximum number of readings that can be stored. Range 10..55000000
        """
        self._dllwrap.CreateBuffer(self._vi, BufferName, min(max(10, int(BufferSize)), 55000000))

    def BufferClear(self, BufferName="defbuffer1"):
        """
        Clears all readings and associated recall attributes from the specified buffer.

        :param BufferName: A string that indicates the reading buffer.
        """
        self._dllwrap.Clear2(self._vi, BufferName)

    def BufferDelete(self, BufferName):
        """
        Delete/Remove the user created buffer from the system

        :param BufferName: A string that contains the name of the user-defined reading buffer to delete
        """
        self._dllwrap.Delete(self._vi, BufferName)

    def BufferModify(self, BufferName="defbuffer1", BufferSize=None, BufferFillMode=None):
        """
        Modifies a user created buffer in the system.

        :param BufferName: A string that contains the name of the user-defined reading buffer to delete
        :param BufferSize: A number that indicates the maximum number of readings that can be stored. Range 10..55000000
        :param BufferFillMode: The buffer's fill mode.

            continuous (cont):
                Fill the buffer continuously. The oldest data is overwritten by the newest data after the buffer fills.

            once:
                no data is overwritten in the buffer. When the buffer is filled, no more data is stored in that buffer and new readings are discarded.
        """
        if BufferSize is not None:
            self._dllwrap.SetBufferSize(self._vi, BufferName, min(max(10, int(BufferSize)), 55000000))
        if BufferFillMode is not None:
            BufferFillMode = str(BufferFillMode).lower()
            if "once" in BufferFillMode:
                self._dllwrap.SetBufferFillMode(
                    self._vi,
                    BufferName,
                    self._parent.DevUtils.Enums.KE2450_VAL_MEASUREMENT_TRACE_BUFFER_FILL_TYPE_ONCE,
                )
            else:
                self._dllwrap.SetBufferFillMode(
                    self._vi,
                    BufferName,
                    self._parent.DevUtils.Enums.KE2450_VAL_MEASUREMENT_TRACE_BUFFER_FILL_TYPE_CONTINUOUS,
                )

    def BufferGetActualSize(self, BufferName="defbuffer1"):
        """
        Returns the actual number of readings in the specified buffer

        :param BufferName: A string that contains the name of the user-defined reading buffer to delete
        :rtype: int
        """
        return int(self._dllwrap.GetActual(self._vi, BufferName))

    def DisplayMessage(self, linenr, message):
        """
        Defines the text that is displayed on the front-panel User Display screen.

        :param linenr: The line of the User Display on which to display text. Valid values: 1 (top), 2 (bottom)
        :type linenr: int
        :param message: String that contains the message; up to 20 characters for line 1 and 32 characters for line 2.
        :type message: str
        """
        if linenr == 1:
            line = self._parent.DevUtils.Enums.KE2450_VAL_DISPLAY_LINE_TOP
            message = message[:20]
        elif linenr == 2:
            line = self._parent.DevUtils.Enums.KE2450_VAL_DISPLAY_LINE_BOTTOM
            message = message[:32]
        else:
            msg = "Invalid line number!"
            raise ValueError(msg)
        self._dllwrap.Message(self._vi, line, len(message) + 1, message)

    def DisplayMessageClear(self):
        """
        Clears the text that is displayed on the front-panel User Display screen.
        """
        self._dllwrap.Clear4(self._vi)

    def DisplayScreen(self, screen):
        """
        Sets the displayed front-panel screen.

        :param screen: The name of the screen to activate. Valid values: HOME|SOURce|PLOT|USER|STAT|SETTings|GRAPh|DATasheet
        :type screen: str
        """
        screen = str(screen).upper()
        en = self._parent.DevUtils.Enums
        if "HOME" in screen:
            screen = en.KE2450_VAL_DISPLAY_SCREEN_NAME_HOME
        elif "SOUR" in screen:
            screen = en.KE2450_VAL_DISPLAY_SCREEN_NAME_SOURCE
        elif "PLOT" in screen:
            screen = en.KE2450_VAL_DISPLAY_SCREEN_NAME_PLOT
        elif "USER" in screen:
            screen = en.KE2450_VAL_DISPLAY_SCREEN_NAME_USER
        elif "STAT" in screen:
            screen = en.KE2450_VAL_DISPLAY_SCREEN_NAME_STATISTICS
        elif "SETT" in screen:
            screen = en.KE2450_VAL_DISPLAY_SCREEN_NAME_SETTINGS
        elif "GRAP" in screen:
            screen = en.KE2450_VAL_DISPLAY_SCREEN_NAME_GRAPH
        elif "DAT" in screen:
            screen = en.KE2450_VAL_DISPLAY_SCREEN_NAME_DATA_SHEET
        else:
            msg = "Invalid value for parameter 'screen'. Valid values: HOME|SOURce|PLOT|USER|STAT|SETTings|GRAPh|DATasheet"
            raise ValueError(msg)
        self._dllwrap.SetAttributeViInt32(self._vi, "", en.KE2450_ATTR_SCREEN_NAME, screen)

    def _BeepImperialMarch(self):
        from time import sleep

        seq = (
            (440, 500),
            (440, 500),
            (349, 350),
            (523, 150),
            (440, 500),
            (349, 350),
            (523, 150),
            (440, 1000),
            (659, 500),
            (659, 500),
            (659, 500),
            (698, 350),
            (523, 150),
            (415, 500),
            (349, 350),
            (523, 150),
            (440, 1000),
        )
        for f, d in seq:
            self.Beep(f, d / 1000.0)
            sleep(0.1)
