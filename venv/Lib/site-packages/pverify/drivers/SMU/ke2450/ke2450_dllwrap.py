from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import ke2450_const as const
from .ke2450_const import *


class ke2450_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("ke2450.dll", "ke2450_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "ke2450"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.ke2450_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.ke2450_close(ViSession(Vi))
        if int(status) != 0:
            raise InstrumentError(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.ke2450_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.ke2450_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Name)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.ke2450_revision_query(ViSession(Vi), DriverRev, InstrRev)
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.ke2450_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(1024)
        status = self.dll.ke2450_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.ke2450_ClearError(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ClearInterchangeWarnings(self, Vi):
        status = self.dll.ke2450_ClearInterchangeWarnings(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        status = self.dll.ke2450_GetNextCoercionRecord(ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord)
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(InterchangeWarningBufferSize)
        status = self.dll.ke2450_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.ke2450_InvalidateAllAttributes(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ResetInterchangeCheck(self, Vi):
        status = self.dll.ke2450_ResetInterchangeCheck(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Disable(self, Vi):
        status = self.dll.ke2450_Disable(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def error_query(self, Vi):
        codes, messages = [], []
        while True:
            ErrorCode = ViInt32()
            ErrorMessage = ARRAY_ViChar(1024)
            status = self.dll.ke2450_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
            if int(status) != 0:
                raise InstrumentError(status)
            ErrorCode = int(ErrorCode.value)
            ErrorMessage = decode(ErrorMessage)
            if int(ErrorCode) != 0:
                codes.append(ErrorCode)
                messages.append(ErrorMessage)
            else:
                break
        if len(codes):
            return codes[0], ";".join(["\nError %d:%s" % (code, msg) for code, msg in zip(codes, messages)])
        else:
            return 0, "no error"

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.ke2450_LockSession(ViSession(Vi), byref(CallerHasLock))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.ke2450_reset(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.ke2450_ResetWithDefaults(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.ke2450_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.ke2450_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.ke2450_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.ke2450_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.ke2450_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.ke2450_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        status = self.dll.ke2450_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.ke2450_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.ke2450_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.ke2450_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.ke2450_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.ke2450_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureOutputEnabled(self, Vi, ChannelName, Enabled):
        status = self.dll.ke2450_ConfigureOutputEnabled(ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureVoltageLevel(self, Vi, ChannelName, Level):
        status = self.dll.ke2450_ConfigureVoltageLevel(ViSession(Vi), ViConstString(ChannelName), ViReal64(Level))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureCurrentLimit(self, Vi, ChannelName, Behavior, Limit):
        status = self.dll.ke2450_ConfigureCurrentLimit(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(Behavior), ViReal64(Limit)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureOVP(self, Vi, ChannelName, Enabled, Limit):
        status = self.dll.ke2450_ConfigureOVP(
            ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled), ViReal64(Limit)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureOutputRange(self, Vi, ChannelName, RangeType, Range):
        status = self.dll.ke2450_ConfigureOutputRange(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(RangeType), ViReal64(Range)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def QueryMaxCurrentLimit(self, Vi, ChannelName, VoltageLevel):
        MaxCurrentLimit = ViReal64()
        status = self.dll.ke2450_QueryMaxCurrentLimit(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViReal64(VoltageLevel),
            byref(MaxCurrentLimit),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(MaxCurrentLimit.value)

    def QueryMaxVoltageLevel(self, Vi, ChannelName, CurrentLimit):
        MaxVoltageLevel = ViReal64()
        status = self.dll.ke2450_QueryMaxVoltageLevel(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViReal64(CurrentLimit),
            byref(MaxVoltageLevel),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(MaxVoltageLevel.value)

    def ConfigureTriggeredCurrentLimit(self, Vi, ChannelName, Limit):
        status = self.dll.ke2450_ConfigureTriggeredCurrentLimit(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(Limit)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureTriggeredVoltageLevel(self, Vi, ChannelName, Level):
        status = self.dll.ke2450_ConfigureTriggeredVoltageLevel(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(Level)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureTriggerSource(self, Vi, ChannelName, Source):
        status = self.dll.ke2450_ConfigureTriggerSource(ViSession(Vi), ViConstString(ChannelName), ViInt32(Source))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Measure(self, Vi, ChannelName, MeasurementType):
        Measurement = ViReal64()
        status = self.dll.ke2450_Measure(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(MeasurementType),
            byref(Measurement),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(Measurement.value)

    def QueryOutputState(self, Vi, ChannelName, OutputState):
        InState = ViBoolean()
        status = self.dll.ke2450_QueryOutputState(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(OutputState),
            byref(InState),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(InState.value)

    def ResetOutputProtection(self, Vi, ChannelName):
        status = self.dll.ke2450_ResetOutputProtection(ViSession(Vi), ViConstString(ChannelName))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Abort(self, Vi):
        status = self.dll.ke2450_Abort(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Initiate(self, Vi):
        status = self.dll.ke2450_Initiate(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def SendSoftwareTrigger(self, Vi):
        status = self.dll.ke2450_SendSoftwareTrigger(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Beep(self, Vi, Frequency, Time):
        status = self.dll.ke2450_Beep(ViSession(Vi), ViReal64(Frequency), ViReal64(Time))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Clear(self, Vi):
        status = self.dll.ke2450_Clear(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def LANConfiguration(
        self,
        Vi,
        IPAddressBufferSize,
        IPAddress,
        NetMaskBufferSize,
        NetMask,
        GateWayBufferSize,
        GateWay,
    ):
        status = self.dll.ke2450_LANConfiguration(
            ViSession(Vi),
            ViInt32(IPAddressBufferSize),
            ViConstString(IPAddress),
            ViInt32(NetMaskBufferSize),
            ViConstString(NetMask),
            ViInt32(GateWayBufferSize),
            ViConstString(GateWay),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def QueryLANConfiguration(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_QueryLANConfiguration(ViSession(Vi), ViInt32(ValBufferSize), Val)
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Val)

    def ReadNextError(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_ReadNextError(ViSession(Vi), ViInt32(ValBufferSize), Val)
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Val)

    def ReadNextErrorCode(self, Vi):
        Val = ViInt32()
        status = self.dll.ke2450_ReadNextErrorCode(ViSession(Vi), byref(Val))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Val.value)

    def GetEventLogCount(self, Vi, Mask):
        EventLogCount = ViInt32()
        status = self.dll.ke2450_GetEventLogCount(ViSession(Vi), ViInt32(Mask), byref(EventLogCount))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(EventLogCount.value)

    def GetReadNextEventLog(self, Vi, Mask, ReadNextEventLogBufferSize):
        ReadNextEventLog = ARRAY_ViChar(ReadNextEventLogBufferSize)
        status = self.dll.ke2450_GetReadNextEventLog(
            ViSession(Vi),
            ViInt32(Mask),
            ViInt32(ReadNextEventLogBufferSize),
            ReadNextEventLog,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(ReadNextEventLog)

    def PostEventLog(self, Vi, MessageBufferSize, Message, SeverityType):
        status = self.dll.ke2450_PostEventLog(
            ViSession(Vi),
            ViInt32(MessageBufferSize),
            ViConstString(Message),
            ViInt32(SeverityType),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def SaveEventLog(self, Vi, FilenameBufferSize, Filename, EventType):
        status = self.dll.ke2450_SaveEventLog(
            ViSession(Vi),
            ViInt32(FilenameBufferSize),
            ViConstString(Filename),
            ViInt32(EventType),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def SaveAllEventLogs(self, Vi, FilenameBufferSize, Filename):
        status = self.dll.ke2450_SaveAllEventLogs(ViSession(Vi), ViInt32(FilenameBufferSize), ViConstString(Filename))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def LANAutoConfiguration(self, Vi):
        status = self.dll.ke2450_LANAutoConfiguration(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ContactCheckAll(self, Vi):
        HighTerminals = ViBoolean()
        LowTerminals = ViBoolean()
        Guard = ViBoolean()
        status = self.dll.ke2450_ContactCheckAll(ViSession(Vi), byref(HighTerminals), byref(LowTerminals), byref(Guard))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        HighTerminals = bool(HighTerminals.value)
        LowTerminals = bool(LowTerminals.value)
        Guard = bool(Guard.value)
        return HighTerminals, LowTerminals, Guard

    def Read(self, Vi, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_Read(
            ViSession(Vi),
            ViConstString(BufferName),
            ViInt32(BufferElementsBufferSize),
            ViConstString(BufferElements),
            ViInt32(ValBufferSize),
            Val,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Val)

    def Fetch(self, Vi, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_Fetch(
            ViSession(Vi),
            ViConstString(BufferName),
            ViInt32(BufferElementsBufferSize),
            ViConstString(BufferElements),
            ViInt32(ValBufferSize),
            Val,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Val)

    def Measure2(
        self,
        Vi,
        Function,
        BufferName,
        BufferElementsBufferSize,
        BufferElements,
        ValBufferSize,
    ):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_Measure2(
            ViSession(Vi),
            ViInt32(Function),
            ViConstString(BufferName),
            ViInt32(BufferElementsBufferSize),
            ViConstString(BufferElements),
            ViInt32(ValBufferSize),
            Val,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Val)

    def MeasureDigitizer(
        self,
        Vi,
        Function,
        BufferName,
        BufferElementsBufferSize,
        BufferElements,
        ValBufferSize,
    ):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_MeasureDigitizer(
            ViSession(Vi),
            ViInt32(Function),
            ViConstString(BufferName),
            ViInt32(BufferElementsBufferSize),
            ViConstString(BufferElements),
            ViInt32(ValBufferSize),
            Val,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Val)

    def ReadDigitzer(self, Vi, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_ReadDigitzer(
            ViSession(Vi),
            ViConstString(BufferName),
            ViInt32(BufferElementsBufferSize),
            ViConstString(BufferElements),
            ViInt32(ValBufferSize),
            Val,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Val)

    def GetActual(self, Vi, BufferName):
        Actual = ViInt32()
        status = self.dll.ke2450_GetActual(ViSession(Vi), ViConstString(BufferName), byref(Actual))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Actual.value)

    def Clear2(self, Vi, BufferName):
        status = self.dll.ke2450_Clear2(ViSession(Vi), ViConstString(BufferName))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetData(
        self,
        Vi,
        StartIndex,
        EndIndex,
        BufferName,
        BufferElementsBufferSize,
        BufferElements,
        ValBufferSize,
    ):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_GetData(
            ViSession(Vi),
            ViInt32(StartIndex),
            ViInt32(EndIndex),
            ViConstString(BufferName),
            ViInt32(BufferElementsBufferSize),
            ViConstString(BufferElements),
            ViInt32(ValBufferSize),
            Val,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Val)

    def GetBufferFillMode(self, Vi, BufferName):
        BufferFillMode = ViInt32()
        status = self.dll.ke2450_GetBufferFillMode(ViSession(Vi), ViConstString(BufferName), byref(BufferFillMode))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(BufferFillMode.value)

    def SetBufferFillMode(self, Vi, BufferName, BufferFillMode):
        status = self.dll.ke2450_SetBufferFillMode(ViSession(Vi), ViConstString(BufferName), ViInt32(BufferFillMode))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetLogStateEnable(self, Vi, BufferName):
        LogStateEnable = ViBoolean()
        status = self.dll.ke2450_GetLogStateEnable(ViSession(Vi), ViConstString(BufferName), byref(LogStateEnable))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(LogStateEnable.value)

    def SetLogStateEnable(self, Vi, BufferName, LogStateEnable):
        status = self.dll.ke2450_SetLogStateEnable(ViSession(Vi), ViConstString(BufferName), ViBoolean(LogStateEnable))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def CreateBuffer(self, Vi, BufferName, BufferSize):
        status = self.dll.ke2450_CreateBuffer(ViSession(Vi), ViConstString(BufferName), ViInt32(BufferSize))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetBufferSize(self, Vi, BufferName):
        BufferSize = ViInt32()
        status = self.dll.ke2450_GetBufferSize(ViSession(Vi), ViConstString(BufferName), byref(BufferSize))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(BufferSize.value)

    def SetBufferSize(self, Vi, BufferName, BufferSize):
        status = self.dll.ke2450_SetBufferSize(ViSession(Vi), ViConstString(BufferName), ViInt32(BufferSize))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def SaveDataToFile(self, Vi, FileName, BufferName, TimeFormat, Start, End):
        status = self.dll.ke2450_SaveDataToFile(
            ViSession(Vi),
            ViConstString(FileName),
            ViConstString(BufferName),
            ViInt32(TimeFormat),
            ViInt32(Start),
            ViInt32(End),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def AppendDataToFile(self, Vi, FileName, BufferName, TimeFormat, Start, End):
        status = self.dll.ke2450_AppendDataToFile(
            ViSession(Vi),
            ViConstString(FileName),
            ViConstString(BufferName),
            ViInt32(TimeFormat),
            ViInt32(Start),
            ViInt32(End),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetGetAverageReading(self, Vi, BufferName):
        GetAverageReading = ViReal64()
        status = self.dll.ke2450_GetGetAverageReading(
            ViSession(Vi), ViConstString(BufferName), byref(GetAverageReading)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(GetAverageReading.value)

    def ClearStatistics(self, Vi, BufferName):
        status = self.dll.ke2450_ClearStatistics(ViSession(Vi), ViConstString(BufferName))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetGetMaximumReading(self, Vi, BufferName):
        GetMaximumReading = ViReal64()
        status = self.dll.ke2450_GetGetMaximumReading(
            ViSession(Vi), ViConstString(BufferName), byref(GetMaximumReading)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(GetMaximumReading.value)

    def GetGetMinimumReading(self, Vi, BufferName):
        GetMinimumReading = ViReal64()
        status = self.dll.ke2450_GetGetMinimumReading(
            ViSession(Vi), ViConstString(BufferName), byref(GetMinimumReading)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(GetMinimumReading.value)

    def GetGetPeak2PeakReading(self, Vi, BufferName):
        GetPeak2PeakReading = ViReal64()
        status = self.dll.ke2450_GetGetPeak2PeakReading(
            ViSession(Vi), ViConstString(BufferName), byref(GetPeak2PeakReading)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(GetPeak2PeakReading.value)

    def GetGetStandardDeviationOfReadings(self, Vi, BufferName):
        GetStandardDeviationOfReadings = ViReal64()
        status = self.dll.ke2450_GetGetStandardDeviationOfReadings(
            ViSession(Vi),
            ViConstString(BufferName),
            byref(GetStandardDeviationOfReadings),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(GetStandardDeviationOfReadings.value)

    def Delete(self, Vi, BufferName):
        status = self.dll.ke2450_Delete(ViSession(Vi), ViConstString(BufferName))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def TraceTrigger(self, Vi, BufferName):
        status = self.dll.ke2450_TraceTrigger(ViSession(Vi), ViConstString(BufferName))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def AutoZeroOnce(self, Vi):
        status = self.dll.ke2450_AutoZeroOnce(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def CreateConfigurationList(self, Vi, Name):
        status = self.dll.ke2450_CreateConfigurationList(ViSession(Vi), ViConstString(Name))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DeleteConfigurationList(self, Vi, Name):
        status = self.dll.ke2450_DeleteConfigurationList(ViSession(Vi), ViConstString(Name))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DeleteConfigListIndexData(self, Vi, Name, Point):
        status = self.dll.ke2450_DeleteConfigListIndexData(ViSession(Vi), ViConstString(Name), ViInt32(Point))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def RecallConfigurationPoint(self, Vi, Name, Point):
        status = self.dll.ke2450_RecallConfigurationPoint(ViSession(Vi), ViConstString(Name), ViInt32(Point))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetConfigurationListSize(self, Vi, Name):
        ConfigurationListSize = ViInt32()
        status = self.dll.ke2450_GetConfigurationListSize(
            ViSession(Vi), ViConstString(Name), byref(ConfigurationListSize)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(ConfigurationListSize.value)

    def AppendToConfigurationList(self, Vi, Name):
        status = self.dll.ke2450_AppendToConfigurationList(ViSession(Vi), ViConstString(Name))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def StoreToConfigurationList(self, Vi, Name, Point):
        status = self.dll.ke2450_StoreToConfigurationList(ViSession(Vi), ViConstString(Name), ViInt32(Point))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetAveragingFilterState(self, Vi, Function):
        AveragingFilterState = ViBoolean()
        status = self.dll.ke2450_GetAveragingFilterState(ViSession(Vi), ViInt32(Function), byref(AveragingFilterState))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(AveragingFilterState.value)

    def SetAveragingFilterState(self, Vi, Function, AveragingFilterState):
        status = self.dll.ke2450_SetAveragingFilterState(
            ViSession(Vi), ViInt32(Function), ViBoolean(AveragingFilterState)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetAveragingFilterCount(self, Vi, Function):
        AveragingFilterCount = ViInt32()
        status = self.dll.ke2450_GetAveragingFilterCount(ViSession(Vi), ViInt32(Function), byref(AveragingFilterCount))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(AveragingFilterCount.value)

    def SetAveragingFilterCount(self, Vi, Function, AveragingFilterCount):
        status = self.dll.ke2450_SetAveragingFilterCount(
            ViSession(Vi), ViInt32(Function), ViInt32(AveragingFilterCount)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetAveragingFilterType(self, Vi, Function):
        AveragingFilterType = ViInt32()
        status = self.dll.ke2450_GetAveragingFilterType(ViSession(Vi), ViInt32(Function), byref(AveragingFilterType))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(AveragingFilterType.value)

    def SetAveragingFilterType(self, Vi, Function, AveragingFilterType):
        status = self.dll.ke2450_SetAveragingFilterType(ViSession(Vi), ViInt32(Function), ViInt32(AveragingFilterType))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetAutoZeroState(self, Vi, Function):
        AutoZeroState = ViInt32()
        status = self.dll.ke2450_GetAutoZeroState(ViSession(Vi), ViInt32(Function), byref(AutoZeroState))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(AutoZeroState.value)

    def SetAutoZeroState(self, Vi, Function, AutoZeroState):
        status = self.dll.ke2450_SetAutoZeroState(ViSession(Vi), ViInt32(Function), ViInt32(AutoZeroState))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureUserDelay(self, Vi, Function, UserDelayNumber, DelayTime):
        status = self.dll.ke2450_ConfigureUserDelay(
            ViSession(Vi),
            ViInt32(Function),
            ViInt32(UserDelayNumber),
            ViReal64(DelayTime),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def QueryUserDelay(self, Vi, Function, UserDelayNumber):
        Val = ViReal64()
        status = self.dll.ke2450_QueryUserDelay(ViSession(Vi), ViInt32(Function), ViInt32(UserDelayNumber), byref(Val))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(Val.value)

    def GetFunctionnplc(self, Vi, Function):
        FunctionNPLC = ViReal64()
        status = self.dll.ke2450_GetFunctionnplc(ViSession(Vi), ViInt32(Function), byref(FunctionNPLC))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(FunctionNPLC.value)

    def SetFunctionnplc(self, Vi, Function, FunctionNPLC):
        status = self.dll.ke2450_SetFunctionnplc(ViSession(Vi), ViInt32(Function), ViReal64(FunctionNPLC))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetAutoRange(self, Vi, Function):
        AutoRange = ViBoolean()
        status = self.dll.ke2450_GetAutoRange(ViSession(Vi), ViInt32(Function), byref(AutoRange))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(AutoRange.value)

    def SetAutoRange(self, Vi, Function, AutoRange):
        status = self.dll.ke2450_SetAutoRange(ViSession(Vi), ViInt32(Function), ViBoolean(AutoRange))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetLowerLimit(self, Vi, Function):
        LowerLimit = ViReal64()
        status = self.dll.ke2450_GetLowerLimit(ViSession(Vi), ViInt32(Function), byref(LowerLimit))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(LowerLimit.value)

    def SetLowerLimit(self, Vi, Function, LowerLimit):
        status = self.dll.ke2450_SetLowerLimit(ViSession(Vi), ViInt32(Function), ViReal64(LowerLimit))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetRange(self, Vi, Function):
        Range = ViReal64()
        status = self.dll.ke2450_GetRange(ViSession(Vi), ViInt32(Function), byref(Range))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(Range.value)

    def SetRange(self, Vi, Function, Range):
        status = self.dll.ke2450_SetRange(ViSession(Vi), ViInt32(Function), ViReal64(Range))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetRelativeOffset(self, Vi, Function):
        RelativeOffset = ViReal64()
        status = self.dll.ke2450_GetRelativeOffset(ViSession(Vi), ViInt32(Function), byref(RelativeOffset))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(RelativeOffset.value)

    def SetRelativeOffset(self, Vi, Function, RelativeOffset):
        status = self.dll.ke2450_SetRelativeOffset(ViSession(Vi), ViInt32(Function), ViReal64(RelativeOffset))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Acquire(self, Vi, Function):
        status = self.dll.ke2450_Acquire(ViSession(Vi), ViInt32(Function))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetRelativeOffsetState(self, Vi, Function):
        RelativeOffsetState = ViBoolean()
        status = self.dll.ke2450_GetRelativeOffsetState(ViSession(Vi), ViInt32(Function), byref(RelativeOffsetState))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(RelativeOffsetState.value)

    def SetRelativeOffsetState(self, Vi, Function, RelativeOffsetState):
        status = self.dll.ke2450_SetRelativeOffsetState(
            ViSession(Vi), ViInt32(Function), ViBoolean(RelativeOffsetState)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetEnableRemoteSense(self, Vi, Function):
        EnableRemoteSense = ViBoolean()
        status = self.dll.ke2450_GetEnableRemoteSense(ViSession(Vi), ViInt32(Function), byref(EnableRemoteSense))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(EnableRemoteSense.value)

    def SetEnableRemoteSense(self, Vi, Function, EnableRemoteSense):
        status = self.dll.ke2450_SetEnableRemoteSense(ViSession(Vi), ViInt32(Function), ViBoolean(EnableRemoteSense))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ReadConfigurationList(self, Vi, Name, Point, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_ReadConfigurationList(
            ViSession(Vi),
            ViConstString(Name),
            ViInt32(Point),
            ViInt32(ValBufferSize),
            Val,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Val)

    def GetEnableOffsetCompensation(self, Vi, Function):
        EnableOffsetCompensation = ViBoolean()
        status = self.dll.ke2450_GetEnableOffsetCompensation(
            ViSession(Vi), ViInt32(Function), byref(EnableOffsetCompensation)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(EnableOffsetCompensation.value)

    def SetEnableOffsetCompensation(self, Vi, Function, EnableOffsetCompensation):
        status = self.dll.ke2450_SetEnableOffsetCompensation(
            ViSession(Vi), ViInt32(Function), ViBoolean(EnableOffsetCompensation)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetDigitizerMeasureRange(self, Vi, Function):
        Range = ViReal64()
        status = self.dll.ke2450_GetDigitizerMeasureRange(ViSession(Vi), ViInt32(Function), byref(Range))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(Range.value)

    def SetDigitizerMeasureRange(self, Vi, Function, Range):
        status = self.dll.ke2450_SetDigitizerMeasureRange(ViSession(Vi), ViInt32(Function), ViReal64(Range))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetDigitizerAperture(self, Vi, Function):
        Range = ViReal64()
        status = self.dll.ke2450_GetDigitizerAperture(ViSession(Vi), ViInt32(Function), byref(Range))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(Range.value)

    def SetDigitizerAperture(self, Vi, Function, Range):
        status = self.dll.ke2450_SetDigitizerAperture(ViSession(Vi), ViInt32(Function), ViReal64(Range))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetDigitizerSampleRate(self, Vi, Function):
        Range = ViInt32()
        status = self.dll.ke2450_GetDigitizerSampleRate(ViSession(Vi), ViInt32(Function), byref(Range))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Range.value)

    def SetDigitizerSampleRate(self, Vi, Function, Range):
        status = self.dll.ke2450_SetDigitizerSampleRate(ViSession(Vi), ViInt32(Function), ViInt32(Range))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetDigitizerDisplayDigits(self, Vi, Function):
        Range = ViInt32()
        status = self.dll.ke2450_GetDigitizerDisplayDigits(ViSession(Vi), ViInt32(Function), byref(Range))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Range.value)

    def SetDigitizerDisplayDigits(self, Vi, Function, Range):
        status = self.dll.ke2450_SetDigitizerDisplayDigits(ViSession(Vi), ViInt32(Function), ViInt32(Range))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetDigitizerEnableRemoteSense(self, Vi, Function):
        EnableRemoteSense = ViBoolean()
        status = self.dll.ke2450_GetDigitizerEnableRemoteSense(
            ViSession(Vi), ViInt32(Function), byref(EnableRemoteSense)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(EnableRemoteSense.value)

    def SetDigitizerEnableRemoteSense(self, Vi, Function, EnableRemoteSense):
        status = self.dll.ke2450_SetDigitizerEnableRemoteSense(
            ViSession(Vi), ViInt32(Function), ViBoolean(EnableRemoteSense)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizerConfigureUserDelay(self, Vi, Function, UserDelayNumber, DelayTime):
        status = self.dll.ke2450_DigitizerConfigureUserDelay(
            ViSession(Vi),
            ViInt32(Function),
            ViInt32(UserDelayNumber),
            ViReal64(DelayTime),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizeAcquire(self, Vi, Function):
        status = self.dll.ke2450_DigitizeAcquire(ViSession(Vi), ViInt32(Function))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizeGetRelativeOffsetState(self, Vi, Function):
        RelativeOffsetState = ViBoolean()
        status = self.dll.ke2450_DigitizeGetRelativeOffsetState(
            ViSession(Vi), ViInt32(Function), byref(RelativeOffsetState)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(RelativeOffsetState.value)

    def DigitizeSetRelativeOffsetState(self, Vi, Function, RelativeOffsetState):
        status = self.dll.ke2450_DigitizeSetRelativeOffsetState(
            ViSession(Vi), ViInt32(Function), ViBoolean(RelativeOffsetState)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizeGetRelativeOffset(self, Vi, Function):
        RelativeOffset = ViReal64()
        status = self.dll.ke2450_DigitizeGetRelativeOffset(ViSession(Vi), ViInt32(Function), byref(RelativeOffset))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(RelativeOffset.value)

    def DigitizeSetRelativeOffset(self, Vi, Function, RelativeOffset):
        status = self.dll.ke2450_DigitizeSetRelativeOffset(ViSession(Vi), ViInt32(Function), ViReal64(RelativeOffset))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetAutoAperture(self, Vi, Function):
        AutoAperture = ViBoolean()
        status = self.dll.ke2450_GetAutoAperture(ViSession(Vi), ViInt32(Function), byref(AutoAperture))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(AutoAperture.value)

    def SetAutoAperture(self, Vi, Function, AutoAperture):
        status = self.dll.ke2450_SetAutoAperture(ViSession(Vi), ViInt32(Function), ViBoolean(AutoAperture))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizerIsLimitTestFailed(self, Vi, Function, LimitTest):
        Val = ViInt32()
        status = self.dll.ke2450_DigitizerIsLimitTestFailed(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Val)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Val.value)

    def DigitizerConfigureLimitTestLowerLimit(self, Vi, Function, LimitTest, Value):
        status = self.dll.ke2450_DigitizerConfigureLimitTestLowerLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViReal64(Value)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizerReadLimitTestLowerLimit(self, Vi, Function, LimitTest):
        Val = ViReal64()
        status = self.dll.ke2450_DigitizerReadLimitTestLowerLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Val)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(Val.value)

    def DigitizerEnableLimitTest(self, Vi, Function, LimitTest, State):
        status = self.dll.ke2450_DigitizerEnableLimitTest(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViBoolean(State)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizerQueryLimitTestState(self, Vi, Function, LimitTest):
        Val = ViBoolean()
        status = self.dll.ke2450_DigitizerQueryLimitTestState(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Val)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(Val.value)

    def DigitizerConfigureLimitTestUpperLimit(self, Vi, Function, LimitTest, Value):
        status = self.dll.ke2450_DigitizerConfigureLimitTestUpperLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViReal64(Value)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizerReadLimitTestUpperLimit(self, Vi, Function, LimitTest):
        Val = ViReal64()
        status = self.dll.ke2450_DigitizerReadLimitTestUpperLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Val)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(Val.value)

    def DigitizerAutoClearEnable(self, Vi, Function, LimitTest, State):
        status = self.dll.ke2450_DigitizerAutoClearEnable(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViBoolean(State)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizerClearLimit(self, Vi, Function, LimitTest):
        status = self.dll.ke2450_DigitizerClearLimit(ViSession(Vi), ViInt32(Function), ViInt32(LimitTest))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizerQueryAutoClearEnable(self, Vi, Function, LimitTest):
        Val = ViBoolean()
        status = self.dll.ke2450_DigitizerQueryAutoClearEnable(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Val)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(Val.value)

    def DigitizerGetMathOperation(self, Vi, Function):
        MathOperation = ViInt32()
        status = self.dll.ke2450_DigitizerGetMathOperation(ViSession(Vi), ViInt32(Function), byref(MathOperation))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(MathOperation.value)

    def DigitizerSetMathOperation(self, Vi, Function, MathOperation):
        status = self.dll.ke2450_DigitizerSetMathOperation(ViSession(Vi), ViInt32(Function), ViInt32(MathOperation))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizerGetMathOffsetFactor(self, Vi, Function):
        MathOffsetFactor = ViReal64()
        status = self.dll.ke2450_DigitizerGetMathOffsetFactor(ViSession(Vi), ViInt32(Function), byref(MathOffsetFactor))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(MathOffsetFactor.value)

    def DigitizerSetMathOffsetFactor(self, Vi, Function, MathOffsetFactor):
        status = self.dll.ke2450_DigitizerSetMathOffsetFactor(
            ViSession(Vi), ViInt32(Function), ViReal64(MathOffsetFactor)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizerGetMathScaleFactor(self, Vi, Function):
        MathScaleFactor = ViReal64()
        status = self.dll.ke2450_DigitizerGetMathScaleFactor(ViSession(Vi), ViInt32(Function), byref(MathScaleFactor))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(MathScaleFactor.value)

    def DigitizerSetMathScaleFactor(self, Vi, Function, MathScaleFactor):
        status = self.dll.ke2450_DigitizerSetMathScaleFactor(
            ViSession(Vi), ViInt32(Function), ViReal64(MathScaleFactor)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizerGetMathPercent(self, Vi, Function):
        MathPercent = ViReal64()
        status = self.dll.ke2450_DigitizerGetMathPercent(ViSession(Vi), ViInt32(Function), byref(MathPercent))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(MathPercent.value)

    def DigitizerSetMathPercent(self, Vi, Function, MathPercent):
        status = self.dll.ke2450_DigitizerSetMathPercent(ViSession(Vi), ViInt32(Function), ViReal64(MathPercent))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DigitizerGetMathOperationState(self, Vi, Function):
        MathOperationState = ViBoolean()
        status = self.dll.ke2450_DigitizerGetMathOperationState(
            ViSession(Vi), ViInt32(Function), byref(MathOperationState)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(MathOperationState.value)

    def DigitizerSetMathOperationState(self, Vi, Function, MathOperationState):
        status = self.dll.ke2450_DigitizerSetMathOperationState(
            ViSession(Vi), ViInt32(Function), ViBoolean(MathOperationState)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetMathOperation(self, Vi, Function):
        MathOperation = ViInt32()
        status = self.dll.ke2450_GetMathOperation(ViSession(Vi), ViInt32(Function), byref(MathOperation))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(MathOperation.value)

    def SetMathOperation(self, Vi, Function, MathOperation):
        status = self.dll.ke2450_SetMathOperation(ViSession(Vi), ViInt32(Function), ViInt32(MathOperation))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetMathOffsetFactor(self, Vi, Function):
        MathOffsetFactor = ViReal64()
        status = self.dll.ke2450_GetMathOffsetFactor(ViSession(Vi), ViInt32(Function), byref(MathOffsetFactor))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(MathOffsetFactor.value)

    def SetMathOffsetFactor(self, Vi, Function, MathOffsetFactor):
        status = self.dll.ke2450_SetMathOffsetFactor(ViSession(Vi), ViInt32(Function), ViReal64(MathOffsetFactor))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetMathScaleFactor(self, Vi, Function):
        MathScaleFactor = ViReal64()
        status = self.dll.ke2450_GetMathScaleFactor(ViSession(Vi), ViInt32(Function), byref(MathScaleFactor))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(MathScaleFactor.value)

    def SetMathScaleFactor(self, Vi, Function, MathScaleFactor):
        status = self.dll.ke2450_SetMathScaleFactor(ViSession(Vi), ViInt32(Function), ViReal64(MathScaleFactor))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetMathPercent(self, Vi, Function):
        MathPercent = ViReal64()
        status = self.dll.ke2450_GetMathPercent(ViSession(Vi), ViInt32(Function), byref(MathPercent))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(MathPercent.value)

    def SetMathPercent(self, Vi, Function, MathPercent):
        status = self.dll.ke2450_SetMathPercent(ViSession(Vi), ViInt32(Function), ViReal64(MathPercent))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetMathOperationState(self, Vi, Function):
        MathOperationState = ViBoolean()
        status = self.dll.ke2450_GetMathOperationState(ViSession(Vi), ViInt32(Function), byref(MathOperationState))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(MathOperationState.value)

    def SetMathOperationState(self, Vi, Function, MathOperationState):
        status = self.dll.ke2450_SetMathOperationState(ViSession(Vi), ViInt32(Function), ViBoolean(MathOperationState))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def IsLimitTestFailed(self, Vi, Function, LimitTest):
        Val = ViInt32()
        status = self.dll.ke2450_IsLimitTestFailed(ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Val))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Val.value)

    def ConfigureLimitTestLowerLimit(self, Vi, Function, LimitTest, Value):
        status = self.dll.ke2450_ConfigureLimitTestLowerLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViReal64(Value)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ReadLimitTestLowerLimit(self, Vi, Function, LimitTest):
        Val = ViReal64()
        status = self.dll.ke2450_ReadLimitTestLowerLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Val)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(Val.value)

    def EnableLimitTest(self, Vi, Function, LimitTest, State):
        status = self.dll.ke2450_EnableLimitTest(ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViBoolean(State))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def QueryLimitTestState(self, Vi, Function, LimitTest):
        Val = ViBoolean()
        status = self.dll.ke2450_QueryLimitTestState(ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Val))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(Val.value)

    def ConfigureLimitTestUpperLimit(self, Vi, Function, LimitTest, Value):
        status = self.dll.ke2450_ConfigureLimitTestUpperLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViReal64(Value)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ReadLimitTestUpperLimit(self, Vi, Function, LimitTest):
        Val = ViReal64()
        status = self.dll.ke2450_ReadLimitTestUpperLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Val)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(Val.value)

    def AutoClearEnable(self, Vi, Function, LimitTest, State):
        status = self.dll.ke2450_AutoClearEnable(ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViBoolean(State))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Clear3(self, Vi, Function, LimitTest):
        status = self.dll.ke2450_Clear3(ViSession(Vi), ViInt32(Function), ViInt32(LimitTest))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def QueryAutoClearEnable(self, Vi, Function, LimitTest):
        Val = ViBoolean()
        status = self.dll.ke2450_QueryAutoClearEnable(ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Val))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(Val.value)

    def CreateConfigurationList2(self, Vi, Name):
        status = self.dll.ke2450_CreateConfigurationList2(ViSession(Vi), ViConstString(Name))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DeleteConfigurationList2(self, Vi, Name):
        status = self.dll.ke2450_DeleteConfigurationList2(ViSession(Vi), ViConstString(Name))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DeleteConfigListIndexedData(self, Vi, Name, Index):
        status = self.dll.ke2450_DeleteConfigListIndexedData(ViSession(Vi), ViConstString(Name), ViInt32(Index))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def RecallConfigurationListPoint(self, Vi, Name, Point):
        status = self.dll.ke2450_RecallConfigurationListPoint(ViSession(Vi), ViConstString(Name), ViInt32(Point))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetConfigurationListSize2(self, Vi, Name):
        ConfigurationListSize = ViInt32()
        status = self.dll.ke2450_GetConfigurationListSize2(
            ViSession(Vi), ViConstString(Name), byref(ConfigurationListSize)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(ConfigurationListSize.value)

    def AppendToConfigurationList2(self, Vi, Name):
        status = self.dll.ke2450_AppendToConfigurationList2(ViSession(Vi), ViConstString(Name))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def StoreToConfigurationList2(self, Vi, Name, Point):
        status = self.dll.ke2450_StoreToConfigurationList2(ViSession(Vi), ViConstString(Name), ViInt32(Point))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetSourceDelay(self, Vi, Function):
        SourceDelay = ViReal64()
        status = self.dll.ke2450_GetSourceDelay(ViSession(Vi), ViInt32(Function), byref(SourceDelay))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(SourceDelay.value)

    def SetSourceDelay(self, Vi, Function, SourceDelay):
        status = self.dll.ke2450_SetSourceDelay(ViSession(Vi), ViInt32(Function), ViReal64(SourceDelay))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetEnableHighCapacitanceMode(self, Vi, Function):
        EnableHighCapacitance = ViBoolean()
        status = self.dll.ke2450_GetEnableHighCapacitanceMode(
            ViSession(Vi), ViInt32(Function), byref(EnableHighCapacitance)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(EnableHighCapacitance.value)

    def SetEnableHighCapacitanceMode(self, Vi, Function, EnableHighCapacitance):
        status = self.dll.ke2450_SetEnableHighCapacitanceMode(
            ViSession(Vi), ViInt32(Function), ViBoolean(EnableHighCapacitance)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetSourceAmplitude(self, Vi, Function):
        SourceAmplitude = ViReal64()
        status = self.dll.ke2450_GetSourceAmplitude(ViSession(Vi), ViInt32(Function), byref(SourceAmplitude))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(SourceAmplitude.value)

    def SetSourceAmplitude(self, Vi, Function, SourceAmplitude):
        status = self.dll.ke2450_SetSourceAmplitude(ViSession(Vi), ViInt32(Function), ViReal64(SourceAmplitude))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetSourceListLength(self, Vi, Function):
        SourceListLength = ViInt32()
        status = self.dll.ke2450_GetSourceListLength(ViSession(Vi), ViInt32(Function), byref(SourceListLength))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(SourceListLength.value)

    def ConfigureListSweep(
        self,
        Vi,
        Function,
        StartIndex,
        Delay,
        Count,
        FailAbort,
        BufferName,
        ConfigListName,
    ):
        status = self.dll.ke2450_ConfigureListSweep(
            ViSession(Vi),
            ViInt32(Function),
            ViInt32(StartIndex),
            ViReal64(Delay),
            ViInt32(Count),
            ViBoolean(FailAbort),
            ViConstString(BufferName),
            ViConstString(ConfigListName),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureLinearSweep(
        self,
        Vi,
        Function,
        Start,
        Stop,
        Points,
        Delay,
        Count,
        RangeType,
        FailAbort,
        Dual,
        BufferName,
    ):
        status = self.dll.ke2450_ConfigureLinearSweep(
            ViSession(Vi),
            ViInt32(Function),
            ViReal64(Start),
            ViReal64(Stop),
            ViInt32(Points),
            ViReal64(Delay),
            ViInt32(Count),
            ViInt32(RangeType),
            ViBoolean(FailAbort),
            ViBoolean(Dual),
            ViConstString(BufferName),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureLinearSweepStep(
        self,
        Vi,
        Function,
        Start,
        Stop,
        Steps,
        Delay,
        Count,
        RangeType,
        FailAbort,
        Dual,
        BufferName,
    ):
        status = self.dll.ke2450_ConfigureLinearSweepStep(
            ViSession(Vi),
            ViInt32(Function),
            ViReal64(Start),
            ViReal64(Stop),
            ViReal64(Steps),
            ViReal64(Delay),
            ViInt32(Count),
            ViInt32(RangeType),
            ViBoolean(FailAbort),
            ViBoolean(Dual),
            ViConstString(BufferName),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureLogarithmicSweep(
        self,
        Vi,
        Function,
        Start,
        Stop,
        Points,
        Delay,
        Count,
        RangeType,
        FailAbort,
        Dual,
        BufferName,
    ):
        status = self.dll.ke2450_ConfigureLogarithmicSweep(
            ViSession(Vi),
            ViInt32(Function),
            ViReal64(Start),
            ViReal64(Stop),
            ViInt32(Points),
            ViReal64(Delay),
            ViInt32(Count),
            ViInt32(RangeType),
            ViBoolean(FailAbort),
            ViBoolean(Dual),
            ViConstString(BufferName),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetAutoDelay(self, Vi, Function):
        AutoDelay = ViBoolean()
        status = self.dll.ke2450_GetAutoDelay(ViSession(Vi), ViInt32(Function), byref(AutoDelay))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(AutoDelay.value)

    def SetAutoDelay(self, Vi, Function, AutoDelay):
        status = self.dll.ke2450_SetAutoDelay(ViSession(Vi), ViInt32(Function), ViBoolean(AutoDelay))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetSourceRange(self, Vi, Function):
        SourceRange = ViReal64()
        status = self.dll.ke2450_GetSourceRange(ViSession(Vi), ViInt32(Function), byref(SourceRange))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(SourceRange.value)

    def SetSourceRange(self, Vi, Function, SourceRange):
        status = self.dll.ke2450_SetSourceRange(ViSession(Vi), ViInt32(Function), ViReal64(SourceRange))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetEnableAutoRange(self, Vi, Function):
        EnableAutoRange = ViBoolean()
        status = self.dll.ke2450_GetEnableAutoRange(ViSession(Vi), ViInt32(Function), byref(EnableAutoRange))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(EnableAutoRange.value)

    def SetEnableAutoRange(self, Vi, Function, EnableAutoRange):
        status = self.dll.ke2450_SetEnableAutoRange(ViSession(Vi), ViInt32(Function), ViBoolean(EnableAutoRange))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetReadBackState(self, Vi, Function):
        ReadBackState = ViBoolean()
        status = self.dll.ke2450_GetReadBackState(ViSession(Vi), ViInt32(Function), byref(ReadBackState))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(ReadBackState.value)

    def SetReadBackState(self, Vi, Function, ReadBackState):
        status = self.dll.ke2450_SetReadBackState(ViSession(Vi), ViInt32(Function), ViBoolean(ReadBackState))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetSourceMode2(self, Vi, OutputChannel, Function):
        SourceMode = ViInt32()
        status = self.dll.ke2450_GetSourceMode2(
            ViSession(Vi),
            ViConstString(OutputChannel),
            ViInt32(Function),
            byref(SourceMode),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(SourceMode.value)

    def SetSourceMode2(self, Vi, OutputChannel, Function, SourceMode):
        status = self.dll.ke2450_SetSourceMode2(
            ViSession(Vi),
            ViConstString(OutputChannel),
            ViInt32(Function),
            ViInt32(SourceMode),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ReadConfigurationList2(self, Vi, Name, Point, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_ReadConfigurationList2(
            ViSession(Vi),
            ViConstString(Name),
            ViInt32(Point),
            ViInt32(ValBufferSize),
            Val,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Val)

    def GetVoltageProtectionLevel(self, Vi):
        VoltageProtectionLevel = ViInt32()
        status = self.dll.ke2450_GetVoltageProtectionLevel(ViSession(Vi), byref(VoltageProtectionLevel))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(VoltageProtectionLevel.value)

    def SetVoltageProtectionLevel(self, Vi, VoltageProtectionLevel):
        status = self.dll.ke2450_SetVoltageProtectionLevel(ViSession(Vi), ViInt32(VoltageProtectionLevel))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def SetAppendToSourceList(self, Vi, Function, AppendToSourceList):
        status = self.dll.ke2450_SetAppendToSourceList(
            ViSession(Vi), ViInt32(Function), ViConstString(AppendToSourceList)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetSourceList(self, Vi, Function, SourceListBufferSize):
        SourceList = ARRAY_ViChar(SourceListBufferSize)
        status = self.dll.ke2450_GetSourceList(
            ViSession(Vi), ViInt32(Function), ViInt32(SourceListBufferSize), SourceList
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(SourceList)

    def SetSourceList(self, Vi, Function, SourceList):
        status = self.dll.ke2450_SetSourceList(ViSession(Vi), ViInt32(Function), ViConstString(SourceList))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def SetUserDelay(self, Vi, Function, UserDelayNumber, DelayTime):
        status = self.dll.ke2450_SetUserDelay(
            ViSession(Vi),
            ViInt32(Function),
            ViInt32(UserDelayNumber),
            ViReal64(DelayTime),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetUserDelay(self, Vi, Function, UserDelayNumber):
        Val = ViReal64()
        status = self.dll.ke2450_GetUserDelay(ViSession(Vi), ViInt32(Function), ViInt32(UserDelayNumber), byref(Val))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(Val.value)

    def GetPulseAmplitude(self, Vi, Function):
        Amplitude = ViReal64()
        status = self.dll.ke2450_GetPulseAmplitude(ViSession(Vi), ViInt32(Function), byref(Amplitude))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(Amplitude.value)

    def SetPulseAmplitude(self, Vi, Function, Amplitude):
        status = self.dll.ke2450_SetPulseAmplitude(ViSession(Vi), ViInt32(Function), ViReal64(Amplitude))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetPulseCurrentLimit(self, Vi):
        CurrentLimit = ViReal64()
        status = self.dll.ke2450_GetPulseCurrentLimit(ViSession(Vi), byref(CurrentLimit))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(CurrentLimit.value)

    def SetPulseCurrentLimit(self, Vi, CurrentLimit):
        status = self.dll.ke2450_SetPulseCurrentLimit(ViSession(Vi), ViReal64(CurrentLimit))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigurePulseTrain(
        self,
        Vi,
        Function,
        BiasLevel,
        PulseLevel,
        PulseWidth,
        Count,
        MeasurementEnable,
        BufferName,
        PulseDelay,
        PulseOffTime,
        BiasLimit,
        PulseLimit,
        AbortOnCompliance,
    ):
        status = self.dll.ke2450_ConfigurePulseTrain(
            ViSession(Vi),
            ViInt32(Function),
            ViReal64(BiasLevel),
            ViReal64(PulseLevel),
            ViReal64(PulseWidth),
            ViInt32(Count),
            ViBoolean(MeasurementEnable),
            ViConstString(BufferName),
            ViReal64(PulseDelay),
            ViReal64(PulseOffTime),
            ViReal64(BiasLimit),
            ViReal64(PulseLimit),
            ViBoolean(AbortOnCompliance),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigurePulseLinearSweep(
        self,
        Vi,
        Function,
        BiasLevel,
        Start,
        Stop,
        Points,
        PulseWidth,
        MeasurementEnable,
        BufferName,
        PulseDelay,
        PulseOffTime,
        Count,
        BiasLimit,
        PulseLimit,
        AbortOnCompliance,
        Dual,
    ):
        status = self.dll.ke2450_ConfigurePulseLinearSweep(
            ViSession(Vi),
            ViInt32(Function),
            ViReal64(BiasLevel),
            ViReal64(Start),
            ViReal64(Stop),
            ViInt32(Points),
            ViReal64(PulseWidth),
            ViBoolean(MeasurementEnable),
            ViConstString(BufferName),
            ViReal64(PulseDelay),
            ViReal64(PulseOffTime),
            ViInt32(Count),
            ViReal64(BiasLimit),
            ViReal64(PulseLimit),
            ViBoolean(AbortOnCompliance),
            ViBoolean(Dual),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigurePulseLinearSweepStep(
        self,
        Vi,
        Function,
        BiasLevel,
        Start,
        Stop,
        Step,
        PulseWidth,
        MeasurementEnable,
        BufferName,
        PulseDelay,
        PulseOffTime,
        Count,
        BiasLimit,
        PulseLimit,
        AbortOnCompliance,
        Dual,
    ):
        status = self.dll.ke2450_ConfigurePulseLinearSweepStep(
            ViSession(Vi),
            ViInt32(Function),
            ViReal64(BiasLevel),
            ViReal64(Start),
            ViReal64(Stop),
            ViReal64(Step),
            ViReal64(PulseWidth),
            ViBoolean(MeasurementEnable),
            ViConstString(BufferName),
            ViReal64(PulseDelay),
            ViReal64(PulseOffTime),
            ViInt32(Count),
            ViReal64(BiasLimit),
            ViReal64(PulseLimit),
            ViBoolean(AbortOnCompliance),
            ViBoolean(Dual),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigurePulseLogarithmicSweep(
        self,
        Vi,
        Function,
        BiasLevel,
        Start,
        Stop,
        Points,
        PulseWidth,
        MeasurementEnable,
        BufferName,
        PulseDelay,
        PulseOffTime,
        Count,
        BiasLimit,
        PulseLimit,
        AbortOnCompliance,
        Dual,
        Asymptote,
    ):
        status = self.dll.ke2450_ConfigurePulseLogarithmicSweep(
            ViSession(Vi),
            ViInt32(Function),
            ViReal64(BiasLevel),
            ViReal64(Start),
            ViReal64(Stop),
            ViInt32(Points),
            ViReal64(PulseWidth),
            ViBoolean(MeasurementEnable),
            ViConstString(BufferName),
            ViReal64(PulseDelay),
            ViReal64(PulseOffTime),
            ViInt32(Count),
            ViReal64(BiasLimit),
            ViReal64(PulseLimit),
            ViBoolean(AbortOnCompliance),
            ViBoolean(Dual),
            ViReal64(Asymptote),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigurePulseListSweep(
        self,
        Vi,
        Function,
        PulseWidth,
        MeasurementEnable,
        BufferName,
        StartIndex,
        Count,
        PulseDelay,
        PulseOffTime,
        AbortOnCompliance,
        ConfligListNameBufferSize,
        ConfligListName,
    ):
        status = self.dll.ke2450_ConfigurePulseListSweep(
            ViSession(Vi),
            ViInt32(Function),
            ViReal64(PulseWidth),
            ViBoolean(MeasurementEnable),
            ViConstString(BufferName),
            ViInt32(StartIndex),
            ViInt32(Count),
            ViReal64(PulseDelay),
            ViReal64(PulseOffTime),
            ViBoolean(AbortOnCompliance),
            ViInt32(ConfligListNameBufferSize),
            ViConstString(ConfligListName),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetPulseList(self, Vi, Function, SourceListBufferSize):
        SourceList = ARRAY_ViChar(SourceListBufferSize)
        status = self.dll.ke2450_GetPulseList(
            ViSession(Vi), ViInt32(Function), ViInt32(SourceListBufferSize), SourceList
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(SourceList)

    def SetPulseList(self, Vi, Function, SourceList):
        status = self.dll.ke2450_SetPulseList(ViSession(Vi), ViInt32(Function), ViConstString(SourceList))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetPulseListAppend(self, Vi, Function, SourceListBufferSize):
        SourceList = ARRAY_ViChar(SourceListBufferSize)
        status = self.dll.ke2450_GetPulseListAppend(
            ViSession(Vi), ViInt32(Function), ViInt32(SourceListBufferSize), SourceList
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(SourceList)

    def SetPulseListAppend(self, Vi, Function, SourceList):
        status = self.dll.ke2450_SetPulseListAppend(ViSession(Vi), ViInt32(Function), ViConstString(SourceList))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetPulseListSize(self, Vi, Function):
        PulseListSize = ViInt32()
        status = self.dll.ke2450_GetPulseListSize(ViSession(Vi), ViInt32(Function), byref(PulseListSize))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(PulseListSize.value)

    def Clear4(self, Vi):
        status = self.dll.ke2450_Clear4(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetResolution(self, Vi, Function):
        Resolution = ViInt32()
        status = self.dll.ke2450_GetResolution(ViSession(Vi), ViInt32(Function), byref(Resolution))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Resolution.value)

    def SetResolution(self, Vi, Function, Resolution):
        status = self.dll.ke2450_SetResolution(ViSession(Vi), ViInt32(Function), ViInt32(Resolution))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Message(self, Vi, LineNumber, TextMessageBufferSize, TextMessage):
        status = self.dll.ke2450_Message(
            ViSession(Vi),
            ViInt32(LineNumber),
            ViInt32(TextMessageBufferSize),
            ViConstString(TextMessage),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ReadOperationCondition(self, Vi):
        Val = ViInt32()
        status = self.dll.ke2450_ReadOperationCondition(ViSession(Vi), byref(Val))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Val.value)

    def MapEventIDToBitNumberInOERegister(self, Vi, BitNumber, SetEvent, ClearEvent):
        status = self.dll.ke2450_MapEventIDToBitNumberInOERegister(
            ViSession(Vi), ViInt32(BitNumber), ViInt32(SetEvent), ViInt32(ClearEvent)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ReadOERegisterMap(self, Vi, BitNumber):
        SetEvent = ViInt32()
        ClearEvent = ViInt32()
        status = self.dll.ke2450_ReadOERegisterMap(
            ViSession(Vi), ViInt32(BitNumber), byref(SetEvent), byref(ClearEvent)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        SetEvent = int(SetEvent.value)
        ClearEvent = int(ClearEvent.value)
        return SetEvent, ClearEvent

    def Preset(self, Vi):
        status = self.dll.ke2450_Preset(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ReadQuestionableCondition(self, Vi):
        Val = ViInt32()
        status = self.dll.ke2450_ReadQuestionableCondition(ViSession(Vi), byref(Val))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Val.value)

    def MapEventIDToBitNumberInQERegister(self, Vi, BitNumber, SetEvent, ClearEvent):
        status = self.dll.ke2450_MapEventIDToBitNumberInQERegister(
            ViSession(Vi), ViInt32(BitNumber), ViInt32(SetEvent), ViInt32(ClearEvent)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ReadQERegisterMap(self, Vi, BitNumber):
        SetEvent = ViInt32()
        ClearEvent = ViInt32()
        status = self.dll.ke2450_ReadQERegisterMap(
            ViSession(Vi), ViInt32(BitNumber), byref(SetEvent), byref(ClearEvent)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        SetEvent = int(SetEvent.value)
        ClearEvent = int(ClearEvent.value)
        return SetEvent, ClearEvent

    def ReadOperationEventRegister(self, Vi):
        Val = ViInt32()
        status = self.dll.ke2450_ReadOperationEventRegister(ViSession(Vi), byref(Val))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Val.value)

    def ReadQuestionableEventRegister(self, Vi):
        Val = ViInt32()
        status = self.dll.ke2450_ReadQuestionableEventRegister(ViSession(Vi), byref(Val))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Val.value)

    def SetLineMode(self, Vi, LineNumber, TriggerType, LineState):
        status = self.dll.ke2450_SetLineMode(
            ViSession(Vi), ViInt32(LineNumber), ViInt32(TriggerType), ViInt32(LineState)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetLineState(self, Vi, LineNumber):
        LineState = ViBoolean()
        status = self.dll.ke2450_GetLineState(ViSession(Vi), ViInt32(LineNumber), byref(LineState))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(LineState.value)

    def SetLineState(self, Vi, LineNumber, LineState):
        status = self.dll.ke2450_SetLineState(ViSession(Vi), ViInt32(LineNumber), ViBoolean(LineState))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Read2(self, Vi):
        Val = ViInt32()
        status = self.dll.ke2450_Read2(ViSession(Vi), byref(Val))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Val.value)

    def Write(self, Vi, Value):
        status = self.dll.ke2450_Write(ViSession(Vi), ViInt32(Value))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetLineMode(self, Vi, LineNumber):
        TriggerType = ViInt32()
        LineState = ViInt32()
        status = self.dll.ke2450_GetLineMode(ViSession(Vi), ViInt32(LineNumber), byref(TriggerType), byref(LineState))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        TriggerType = int(TriggerType.value)
        LineState = int(LineState.value)
        return TriggerType, LineState

    def BlenderClear(self, Vi, BlenderNumber):
        status = self.dll.ke2450_BlenderClear(ViSession(Vi), ViInt32(BlenderNumber))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetBlenderMode(self, Vi, BlenderNumber):
        BlenderMode = ViInt32()
        status = self.dll.ke2450_GetBlenderMode(ViSession(Vi), ViInt32(BlenderNumber), byref(BlenderMode))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(BlenderMode.value)

    def SetBlenderMode(self, Vi, BlenderNumber, BlenderMode):
        status = self.dll.ke2450_SetBlenderMode(ViSession(Vi), ViInt32(BlenderNumber), ViInt32(BlenderMode))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetBlenderOverRun(self, Vi, BlenderNumber):
        BlenderOverRun = ViBoolean()
        status = self.dll.ke2450_GetBlenderOverRun(ViSession(Vi), ViInt32(BlenderNumber), byref(BlenderOverRun))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(BlenderOverRun.value)

    def ResetTriggerModel(self, Vi):
        status = self.dll.ke2450_ResetTriggerModel(ViSession(Vi))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureBlenderStimulus(self, Vi, BlenderNumber, StimulusNumber, EventBufferSize, Event):
        status = self.dll.ke2450_ConfigureBlenderStimulus(
            ViSession(Vi),
            ViInt32(BlenderNumber),
            ViInt32(StimulusNumber),
            ViInt32(EventBufferSize),
            ViConstString(Event),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def QueryBlenderStimulus(self, Vi, BlenderNumber, StimulusNumber, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_QueryBlenderStimulus(
            ViSession(Vi),
            ViInt32(BlenderNumber),
            ViInt32(StimulusNumber),
            ViInt32(ValBufferSize),
            Val,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Val)

    def LoadTriggerModelList(
        self,
        Vi,
        MeasureConfigListBufferSize,
        MeasureConfigList,
        SourceConfigListBufferSize,
        SourceConfigList,
        Delay,
        ReadingBufferBufferSize,
        ReadingBuffer,
    ):
        status = self.dll.ke2450_LoadTriggerModelList(
            ViSession(Vi),
            ViInt32(MeasureConfigListBufferSize),
            ViConstString(MeasureConfigList),
            ViInt32(SourceConfigListBufferSize),
            ViConstString(SourceConfigList),
            ViReal64(Delay),
            ViInt32(ReadingBufferBufferSize),
            ViConstString(ReadingBuffer),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def LoadTriggerModelLoopDuration(self, Vi, Duration, Delay, ReadingBufferBufferSize, ReadingBuffer):
        status = self.dll.ke2450_LoadTriggerModelLoopDuration(
            ViSession(Vi),
            ViReal64(Duration),
            ViReal64(Delay),
            ViInt32(ReadingBufferBufferSize),
            ViConstString(ReadingBuffer),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def LoadTriggerModelLoopSimple(self, Vi, Count, Delay, ReadingBufferBufferSize, ReadingBuffer):
        status = self.dll.ke2450_LoadTriggerModelLoopSimple(
            ViSession(Vi),
            ViInt32(Count),
            ViReal64(Delay),
            ViInt32(ReadingBufferBufferSize),
            ViConstString(ReadingBuffer),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def LoadTriggerModelExternal(
        self,
        Vi,
        DigitalInLine,
        DigitalOutLine,
        Count,
        Delay,
        ReadingBufferBufferSize,
        ReadingBuffer,
    ):
        status = self.dll.ke2450_LoadTriggerModelExternal(
            ViSession(Vi),
            ViInt32(DigitalInLine),
            ViInt32(DigitalOutLine),
            ViInt32(Count),
            ViReal64(Delay),
            ViInt32(ReadingBufferBufferSize),
            ViConstString(ReadingBuffer),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Clear5(self, Vi, TimerNumber):
        status = self.dll.ke2450_Clear5(ViSession(Vi), ViInt32(TimerNumber))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetEventCount(self, Vi, TimerNumber):
        EventCount = ViInt32()
        status = self.dll.ke2450_GetEventCount(ViSession(Vi), ViInt32(TimerNumber), byref(EventCount))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(EventCount.value)

    def SetEventCount(self, Vi, TimerNumber, EventCount):
        status = self.dll.ke2450_SetEventCount(ViSession(Vi), ViInt32(TimerNumber), ViInt32(EventCount))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetDelay(self, Vi, TimerNumber):
        Delay = ViReal64()
        status = self.dll.ke2450_GetDelay(ViSession(Vi), ViInt32(TimerNumber), byref(Delay))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(Delay.value)

    def SetDelay(self, Vi, TimerNumber, Delay):
        status = self.dll.ke2450_SetDelay(ViSession(Vi), ViInt32(TimerNumber), ViReal64(Delay))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetIsTimerOverRun(self, Vi, TimerNumber):
        IsTimerOverRun = ViBoolean()
        status = self.dll.ke2450_GetIsTimerOverRun(ViSession(Vi), ViInt32(TimerNumber), byref(IsTimerOverRun))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(IsTimerOverRun.value)

    def GetGenerateEventidState(self, Vi, TimerNumber):
        GenerateEventIDState = ViBoolean()
        status = self.dll.ke2450_GetGenerateEventidState(
            ViSession(Vi), ViInt32(TimerNumber), byref(GenerateEventIDState)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(GenerateEventIDState.value)

    def SetGenerateEventidState(self, Vi, TimerNumber, GenerateEventIDState):
        status = self.dll.ke2450_SetGenerateEventidState(
            ViSession(Vi), ViInt32(TimerNumber), ViBoolean(GenerateEventIDState)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetState(self, Vi, TimerNumber):
        State = ViBoolean()
        status = self.dll.ke2450_GetState(ViSession(Vi), ViInt32(TimerNumber), byref(State))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(State.value)

    def SetState(self, Vi, TimerNumber, State):
        status = self.dll.ke2450_SetState(ViSession(Vi), ViInt32(TimerNumber), ViBoolean(State))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetStartByEventid(self, Vi, TimerNumber, StartByEventIDBufferSize):
        StartByEventID = ARRAY_ViChar(StartByEventIDBufferSize)
        status = self.dll.ke2450_GetStartByEventid(
            ViSession(Vi),
            ViInt32(TimerNumber),
            ViInt32(StartByEventIDBufferSize),
            StartByEventID,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(StartByEventID)

    def SetStartByEventid(self, Vi, TimerNumber, StartByEventID):
        status = self.dll.ke2450_SetStartByEventid(ViSession(Vi), ViInt32(TimerNumber), ViConstString(StartByEventID))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetStartFractional(self, Vi, TimerNumber):
        StartFractional = ViReal64()
        status = self.dll.ke2450_GetStartFractional(ViSession(Vi), ViInt32(TimerNumber), byref(StartFractional))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(StartFractional.value)

    def SetStartFractional(self, Vi, TimerNumber, StartFractional):
        status = self.dll.ke2450_SetStartFractional(ViSession(Vi), ViInt32(TimerNumber), ViReal64(StartFractional))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetStartSeconds(self, Vi, TimerNumber):
        StartSeconds = ViReal64()
        status = self.dll.ke2450_GetStartSeconds(ViSession(Vi), ViInt32(TimerNumber), byref(StartSeconds))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(StartSeconds.value)

    def SetStartSeconds(self, Vi, TimerNumber, StartSeconds):
        status = self.dll.ke2450_SetStartSeconds(ViSession(Vi), ViInt32(TimerNumber), ViReal64(StartSeconds))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def BranchAlways(self, Vi, BlockNumber, BranchPath):
        status = self.dll.ke2450_BranchAlways(ViSession(Vi), ViInt32(BlockNumber), ViInt32(BranchPath))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def BranchCounter(self, Vi, BlockNumber, TargetCount, BranchPath):
        status = self.dll.ke2450_BranchCounter(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(TargetCount),
            ViReal64(BranchPath),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ReadBranchCounter(self, Vi, BlockNumber):
        Val = ViInt32()
        status = self.dll.ke2450_ReadBranchCounter(ViSession(Vi), ViInt32(BlockNumber), byref(Val))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Val.value)

    def BranchDelta(self, Vi, BlockNumber, TargetDifference, BranchPath, MeasureBlock):
        status = self.dll.ke2450_BranchDelta(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViReal64(TargetDifference),
            ViInt32(BranchPath),
            ViInt32(MeasureBlock),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def BranchEvent(self, Vi, BlockNumber, EventIDBufferSize, EventID, BranchPath):
        status = self.dll.ke2450_BranchEvent(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(EventIDBufferSize),
            ViConstString(EventID),
            ViInt32(BranchPath),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def BranchLimitConstant(self, Vi, BlockNumber, LimitType, LimitA, LimitB, BranchPath, MeasureBlock):
        status = self.dll.ke2450_BranchLimitConstant(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(LimitType),
            ViReal64(LimitA),
            ViReal64(LimitB),
            ViInt32(BranchPath),
            ViInt32(MeasureBlock),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def BranchLimitDynamic(self, Vi, BlockNumber, LimitType, LimitNumuber, BranchPath, MeasureBlock):
        status = self.dll.ke2450_BranchLimitDynamic(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(LimitType),
            ViInt32(LimitNumuber),
            ViInt32(BranchPath),
            ViInt32(MeasureBlock),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def BranchOnce(self, Vi, BlockNumber, BranchPath):
        status = self.dll.ke2450_BranchOnce(ViSession(Vi), ViInt32(BlockNumber), ViInt32(BranchPath))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def BranchOnceExcluded(self, Vi, BlockNumber, BranchPath):
        status = self.dll.ke2450_BranchOnceExcluded(ViSession(Vi), ViInt32(BlockNumber), ViInt32(BranchPath))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def BufferClear(self, Vi, BlockNumber, BufferName):
        status = self.dll.ke2450_BufferClear(ViSession(Vi), ViInt32(BlockNumber), ViConstString(BufferName))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def RecallConfigurationNext(self, Vi, BlockNumber, ConfigurationListBufferSize, ConfigurationList):
        status = self.dll.ke2450_RecallConfigurationNext(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(ConfigurationListBufferSize),
            ViConstString(ConfigurationList),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def RecallConfigurationPrevious(self, Vi, BlockNumber, ConfigurationListBufferSize, ConfigurationList):
        status = self.dll.ke2450_RecallConfigurationPrevious(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(ConfigurationListBufferSize),
            ViConstString(ConfigurationList),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def RecallConfiguration(self, Vi, BlockNumber, ConfigurationListBufferSize, ConfigurationList, Point):
        status = self.dll.ke2450_RecallConfiguration(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(ConfigurationListBufferSize),
            ViConstString(ConfigurationList),
            ViInt32(Point),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConstantDelay(self, Vi, BlockNumber, Time):
        status = self.dll.ke2450_ConstantDelay(ViSession(Vi), ViInt32(BlockNumber), ViReal64(Time))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def DelayDynamic(self, Vi, BlockNumber, UserDelayType, UserDelayNumber):
        status = self.dll.ke2450_DelayDynamic(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(UserDelayType),
            ViInt32(UserDelayNumber),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def ConfigureDigitalIO(self, Vi, BlockNumber, BitPattern, BitMask):
        status = self.dll.ke2450_ConfigureDigitalIO(
            ViSession(Vi), ViInt32(BlockNumber), ViInt32(BitPattern), ViInt32(BitMask)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Measure3(self, Vi, BlockNumber, BufferName):
        status = self.dll.ke2450_Measure3(ViSession(Vi), ViInt32(BlockNumber), ViConstString(BufferName))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Notify(self, Vi, BlockNumber, NotifyID):
        status = self.dll.ke2450_Notify(ViSession(Vi), ViInt32(BlockNumber), ViInt32(NotifyID))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def SourceState(self, Vi, BlockNumber, State):
        status = self.dll.ke2450_SourceState(ViSession(Vi), ViInt32(BlockNumber), ViBoolean(State))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Wait(
        self,
        Vi,
        BlockNumber,
        Event1BufferSize,
        Event1,
        StimulusAction,
        Logic,
        Event2BufferSize,
        Event2,
        Event3BufferSize,
        Event3,
    ):
        status = self.dll.ke2450_Wait(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(Event1BufferSize),
            ViConstString(Event1),
            ViInt32(StimulusAction),
            ViInt32(Logic),
            ViInt32(Event2BufferSize),
            ViConstString(Event2),
            ViInt32(Event3BufferSize),
            ViConstString(Event3),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def LogEvent(self, Vi, BlockNumber, EventBufferSize, Event, MessageBufferSize, Message):
        status = self.dll.ke2450_LogEvent(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(EventBufferSize),
            ViConstString(Event),
            ViInt32(MessageBufferSize),
            ViConstString(Message),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def NoOperation(self, Vi, BlockNumber):
        status = self.dll.ke2450_NoOperation(ViSession(Vi), ViInt32(BlockNumber))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def TriggerModelBlockDigitize(self, Vi, BlockNumber, BufferNameBufferSize, BufferName, Count):
        status = self.dll.ke2450_TriggerModelBlockDigitize(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(BufferNameBufferSize),
            ViConstString(BufferName),
            ViInt32(Count),
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def TriggerModelBlockPulseOutput(self, Vi, BlockNumber, State):
        status = self.dll.ke2450_TriggerModelBlockPulseOutput(ViSession(Vi), ViInt32(BlockNumber), ViBoolean(State))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Clear6(self, Vi, InputLine):
        status = self.dll.ke2450_Clear6(ViSession(Vi), ViInt32(InputLine))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetMode(self, Vi, InputLine):
        Mode = ViInt32()
        status = self.dll.ke2450_GetMode(ViSession(Vi), ViReal64(InputLine), byref(Mode))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Mode.value)

    def SetMode(self, Vi, InputLine, Mode):
        status = self.dll.ke2450_SetMode(ViSession(Vi), ViReal64(InputLine), ViInt32(Mode))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetOverRunStatus(self, Vi, InputLine):
        OverRunStatus = ViBoolean()
        status = self.dll.ke2450_GetOverRunStatus(ViSession(Vi), ViInt32(InputLine), byref(OverRunStatus))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(OverRunStatus.value)

    def GetOutputLogic(self, Vi, InputLine):
        OutputLogic = ViInt32()
        status = self.dll.ke2450_GetOutputLogic(ViSession(Vi), ViInt32(InputLine), byref(OutputLogic))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(OutputLogic.value)

    def SetOutputLogic(self, Vi, InputLine, OutputLogic):
        status = self.dll.ke2450_SetOutputLogic(ViSession(Vi), ViInt32(InputLine), ViInt32(OutputLogic))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetOutputPulsewidth(self, Vi, InputLine):
        OutputPulsewidth = ViReal64()
        status = self.dll.ke2450_GetOutputPulsewidth(ViSession(Vi), ViInt32(InputLine), byref(OutputPulsewidth))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return float(OutputPulsewidth.value)

    def SetOutputPulsewidth(self, Vi, InputLine, OutputPulsewidth):
        status = self.dll.ke2450_SetOutputPulsewidth(ViSession(Vi), ViInt32(InputLine), ViReal64(OutputPulsewidth))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetOutputStimulus(self, Vi, InputLine, OutputStimulusBufferSize):
        OutputStimulus = ARRAY_ViChar(OutputStimulusBufferSize)
        status = self.dll.ke2450_GetOutputStimulus(
            ViSession(Vi),
            ViInt32(InputLine),
            ViInt32(OutputStimulusBufferSize),
            OutputStimulus,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(OutputStimulus)

    def SetOutputStimulus(self, Vi, InputLine, OutputStimulus):
        status = self.dll.ke2450_SetOutputStimulus(ViSession(Vi), ViInt32(InputLine), ViConstString(OutputStimulus))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Clear7(self, Vi, EventNumber):
        status = self.dll.ke2450_Clear7(ViSession(Vi), ViInt32(EventNumber))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetMode2(self, Vi, EventNumber):
        Mode = ViInt32()
        status = self.dll.ke2450_GetMode2(ViSession(Vi), ViInt32(EventNumber), byref(Mode))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(Mode.value)

    def SetMode2(self, Vi, EventNumber, Mode):
        status = self.dll.ke2450_SetMode2(ViSession(Vi), ViInt32(EventNumber), ViInt32(Mode))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetOverRunStatus2(self, Vi, EventNumber):
        OverRunStatus = ViBoolean()
        status = self.dll.ke2450_GetOverRunStatus2(ViSession(Vi), ViInt32(EventNumber), byref(OverRunStatus))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(OverRunStatus.value)

    def GetEventGeneratorState(self, Vi, EventNumber):
        EventGeneratorState = ViBoolean()
        status = self.dll.ke2450_GetEventGeneratorState(ViSession(Vi), ViInt32(EventNumber), byref(EventGeneratorState))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return bool(EventGeneratorState.value)

    def SetEventGeneratorState(self, Vi, EventNumber, EventGeneratorState):
        status = self.dll.ke2450_SetEventGeneratorState(
            ViSession(Vi), ViInt32(EventNumber), ViBoolean(EventGeneratorState)
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetIpAddress(self, Vi, EventNumber, IPAddressBufferSize):
        IPAddress = ARRAY_ViChar(IPAddressBufferSize)
        status = self.dll.ke2450_GetIpAddress(
            ViSession(Vi), ViInt32(EventNumber), ViInt32(IPAddressBufferSize), IPAddress
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(IPAddress)

    def SetIpAddress(self, Vi, EventNumber, IPAddress):
        status = self.dll.ke2450_SetIpAddress(ViSession(Vi), ViInt32(EventNumber), ViConstString(IPAddress))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetOutLogic(self, Vi, EventNumber):
        OutLogic = ViInt32()
        status = self.dll.ke2450_GetOutLogic(ViSession(Vi), ViInt32(EventNumber), byref(OutLogic))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(OutLogic.value)

    def SetOutLogic(self, Vi, EventNumber, OutLogic):
        status = self.dll.ke2450_SetOutLogic(ViSession(Vi), ViInt32(EventNumber), ViInt32(OutLogic))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetOutProtocol(self, Vi, EventNumber):
        OutProtocol = ViInt32()
        status = self.dll.ke2450_GetOutProtocol(ViSession(Vi), ViInt32(EventNumber), byref(OutProtocol))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return int(OutProtocol.value)

    def SetOutProtocol(self, Vi, EventNumber, OutProtocol):
        status = self.dll.ke2450_SetOutProtocol(ViSession(Vi), ViInt32(EventNumber), ViInt32(OutProtocol))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def GetOutStimulus(self, Vi, EventNumber, OutStimulusBufferSize):
        OutStimulus = ARRAY_ViChar(OutStimulusBufferSize)
        status = self.dll.ke2450_GetOutStimulus(
            ViSession(Vi),
            ViInt32(EventNumber),
            ViInt32(OutStimulusBufferSize),
            OutStimulus,
        )
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(OutStimulus)

    def SetOutStimulus(self, Vi, EventNumber, OutStimulus):
        status = self.dll.ke2450_SetOutStimulus(ViSession(Vi), ViInt32(EventNumber), ViConstString(OutStimulus))
        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)

        return

    def Query(self, Vi, Command, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_Query(ViSession(Vi), ViConstString(Command), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        status, msg = self.error_query(Vi)
        if int(status) != 0:
            raise InstrumentError(status, msg)
        return decode(Val)

    def ReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.ke2450_ReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) != 0:
            msg = self.error_message(Vi, status)
            raise InstrumentError(status, msg)
        else:
            return decode(Val)

    def WriteString(self, Vi, Command):
        status = self.dll.ke2450_WriteString(ViSession(Vi), ViConstString(Command))
        if int(status) != 0:
            msg = self.error_message(Vi, status)
            raise InstrumentError(status, msg)

        return
