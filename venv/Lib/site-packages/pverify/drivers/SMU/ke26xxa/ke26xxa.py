from __future__ import annotations

from comtypes.client import CreateObject, GetModule

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.helper import MissingIVICOMDependenciesError


class Ke26XXA:
    def __init__(self):
        try:
            GetModule("Ke26XXA.dll")
            from comtypes.gen import Ke26XXALib

            self.tl = Ke26XXALib
            self.com = CreateObject("Ke26XXA.Ke26XXA")

        except Exception:
            raise MissingIVICOMDependenciesError from None

        self.Identity = IdentityBasic(
            fct_idn=lambda: self.com.Identity.Identifier,
            fct_drv_rev=lambda: self.com.Identity.Revision,
            fct_fw_rev=lambda: self.com.Identity.InstrumentFirmwareRevision,
        )

    @property
    def Initialized(self):
        return self.com.Initialized

    @property
    def drivername(self):
        return self.__class__.__name__

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self.com.Initialize(ResourceName, IdQuery, Reset, OptionString)

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self.com.Close()


if __name__ == "__main__":
    d = Ke26XXA()
    d.Initialize("", True, True, "simulate=true")
    print(d.Identity.Identifier)
    print(d.Identity.Revision)
    print(d.Identity.InstrumentFirmwareRevision)
    d.Close()
