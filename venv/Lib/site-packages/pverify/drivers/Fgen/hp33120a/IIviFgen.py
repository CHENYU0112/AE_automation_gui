from __future__ import annotations

from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper

from .hp33120a import *


class IIviFgen(IVICOMDriverWrapper):
    def __init__(self):
        super().__init__()

        self.dllwrap = hp33120a()
        self.__Initialized = False

        from . import IIviFgenEnums

        self.Enums = IIviFgenEnums

        from .IIviDriverOperation import IIviDriverOperation

        self.DriverOperation = IIviDriverOperation(self)

        from .IIviDriverIdentity import IIviDriverIdentity

        self.Identity = IIviDriverIdentity(self)

        from .IIviDriverUtility import IIviDriverUtility

        self.Utility = IIviDriverUtility(self)

        from .IIviFgenOutput import IIviFgenOutput

        self.Output = IIviFgenOutput(self)

        from .IIviFgenTrigger import IIviFgenTrigger

        self.Trigger = IIviFgenTrigger(self)

        from .IIviFgenStandardWaveform import IIviFgenStandardWaveform

        self.StandardWaveform = IIviFgenStandardWaveform(self)

        from .IIviFgenArbitrary import IIviFgenArbitrary

        self.Arbitrary = IIviFgenArbitrary(self)

        from .IIviFgenAM import IIviFgenAM

        self.AM = IIviFgenAM(self)

        from .IIviFgenFM import IIviFgenFM

        self.FM = IIviFgenFM(self)

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def drivername(self):
        return self.dllwrap.drivername

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self.dllwrap.Initialize(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True
        self.IDN = (
            f"{self.Identity.Vendor}, {self.Identity.InstrumentModel}, n.a., {self.Identity.InstrumentFirmwareRevision}"
        )

        if Reset:
            for i in range(self.Output.Count):
                self.Output.set_Enabled(self.Output.Name(i + 1), False)

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self.dllwrap.Close()
        self.__Initialized = False

    def InitiateGeneration(self):
        """
        If the function generator is in the Configuration State, this function moves the
        function generator to the Output Generation State. If the function generator is
        already in the Output Generation State, this function does nothing and returns
        Success.
        """
        self.dllwrap.InitiateGeneration()

    def AbortGeneration(self):
        """
        If the function generator is in the Output Generation State, this function moves
        the function generator to the Configuration State. If the function generator is
        already in the Configuration State, the function does nothing and returns
        Success.
        """
        self.dllwrap.AbortGeneration()
