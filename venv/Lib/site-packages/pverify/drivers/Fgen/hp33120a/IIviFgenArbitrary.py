from __future__ import annotations

from .hp33120a import *


class IIviFgenArbitrary:
    def __init__(self, root):
        self.root = root

        from .IIviFgenArbitrarySequence import IIviFgenArbitrarySequence

        self.Sequence = IIviFgenArbitrarySequence(self.root)

        from .IIviFgenArbitraryWaveform import IIviFgenArbitraryWaveform

        self.Waveform = IIviFgenArbitraryWaveform(self.root)

    @property
    def SampleRate(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 204)

    @SampleRate.setter
    def SampleRate(self, value):
        """
        The sample rate of the arbitrary waveforms the function generator produces. The
        units are samples per second.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 204, value)

    def ClearMemory(self):
        """
        Removes all previously created arbitrary waveforms and sequences from the
        function generator's memory and invalidates all waveform and sequence handles.
        """
        self.root.dllwrap.ClearArbWaveform(-1)

    def get_Gain(self, ChannelName):
        """
        Retrieves the gain.

        :param ChannelName: The name of a channel.
        :type ChannelName: str

        :return: The gain of the arbitrary waveform the function generator produces. This value
            is unitless.
        :rtype: Sfloat
        """
        return self.root.dllwrap.GetAttributeViReal64(ChannelName, IVI_CLASS_PUBLIC_ATTR_BASE + 202)

    def get_Offset(self, ChannelName):
        """
        Retrieves the offset.

        :param ChannelName: The name of a channel.
        :type ChannelName: str

        :return: The offset of the arbitrary waveform the function generator produces. The units
            are volts.
        :rtype: float
        """
        return self.root.dllwrap.GetAttributeViReal64(ChannelName, IVI_CLASS_PUBLIC_ATTR_BASE + 203)

    def set_Gain(self, ChannelName, pVal):
        """
        Sets the gain.

        :param ChannelName: The name of a channel.
        :type ChannelName: str
        :param pVal: The gain of the arbitrary waveform the function generator produces. This value
            is unitless.
        :type pVal: float
        """
        self.root.dllwrap.SetAttributeViReal64(ChannelName, IVI_CLASS_PUBLIC_ATTR_BASE + 202, pVal)

    def set_Offset(self, ChannelName, pVal):
        """
        Retrieves the offset.

        :param ChannelName: The name of a channel.
        :type ChannelName: str
        :param pVal: The offset of the arbitrary waveform the function generator produces. The units
            are volts.
        :type pVal: float
        """
        self.root.dllwrap.SetAttributeViReal64(ChannelName, IVI_CLASS_PUBLIC_ATTR_BASE + 203, pVal)
