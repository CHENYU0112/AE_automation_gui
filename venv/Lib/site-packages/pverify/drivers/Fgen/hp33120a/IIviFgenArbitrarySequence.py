from __future__ import annotations

from .hp33120a import *


class IIviFgenArbitrarySequence:
    def __init__(self, root):
        self.root = root

    @property
    def NumberWaveformsMax(self):
        """
        The maximum number of arbitrary waveforms that the function generator allows.
        """
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 205)

    @property
    def Quantum(self):
        """
        The size of each arbitrary waveform must be a multiple of a quantum value. This attribute returns the quantum
        value the function generator allows.
        For example, if this attribute returns a value of 8, all waveform sizes must be a multiple of 8.
        """
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 206)

    @property
    def SizeMax(self):
        """
        The maximum number of points the function generator allows in an arbitrary waveform.
        """
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 208)

    @property
    def SizeMin(self):
        """
        The minimum number of points the function generator allows in an arbitrary waveform.
        """
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 207)

    def Configure(self, ChannelName, Handle, Gain, Offset):
        """
        Configures the attributes of the function generator that affect arbitrary
        waveform generation.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param Handle: Specifies the handle that identifies the arbitrary waveform to produce. This
            value sets the Arbitrary Waveform Handle attribute.
        :type Handle: int
        :param Gain: Specifies the arbitrary waveform gain. This value sets the Arbitrary Gain
            attribute.
        :type Gain: float
        :param Offset: Specifies the arbitrary waveform offset. This value sets the Arbitrary Offset
            attribute.
        :type Offset: float
        """
        self.root.dllwrap.ConfigureArbWaveform(ChannelName, Handle, Gain, Offset)

    def Clear(self, Handle):
        """
        Removes a previously created arbitrary waveform from the function generator's
        memory and invalidates the waveform's handle.

        :param Handle: Specifies the handle that identifies the arbitrary waveform to clear.
        :type Handle: int
        """
        self.root.dllwrap.ClearArbWaveform(Handle)

    def Create(self, WfmHandle, LoopCount):
        """
        Creates an arbitrary waveform sequence from an array of waveform handles and a corresponding
        array of loop counts, and returns a handle that identifies the sequence.
        The handle is used by the Configure, and Clear methods.

        :param WfmHandle: Specifies the array of waveform handles for the new arbitrary sequence.
               The array must have at least as many elements as the value in the Length parameter (IVI-C only).
               Each WfmHandle array element has a corresponding LoopCount array element that
               specifies how many times that waveform is repeated.
        :param LoopCount: Specifies the array of loop counts for the new arbitrary sequence.
                          The array must have at least as many elements as the value in the length parameter
                          (IVI-C only). Each LoopCount array element corresponds to a WfmHandle array element
                          and indicates how many times to repeat that waveform. Each element of the LoopCount
                          array must be less than or equal to the maximum number of loop counts the function
                          generator allows. The function generator's maximum loop count is stored in the Loop Count Max attribute.

        """
        return self.root.dllwrap.CreateArbSequence(len(WfmHandle), WfmHandle, LoopCount[: len(WfmHandle)])

    def get_Frequency(self, ChannelName):
        """
        The rate at which an entire arbitrary waveform is generated. The units are in
        Hertz.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The frequency.
        :rtype: float
        """
        return self.root.dllwrap.GetAttributeViReal64(ChannelName, IVI_CLASS_PUBLIC_ATTR_BASE + 209)

    def set_Frequency(self, ChannelName, pVal):
        """
        The rate at which an entire arbitrary waveform is generated. The units are in
        Hertz.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The frequency.
        :type pVal: float
        """
        self.root.dllwrap.SetAttributeViReal64(ChannelName, IVI_CLASS_PUBLIC_ATTR_BASE + 209, pVal)
