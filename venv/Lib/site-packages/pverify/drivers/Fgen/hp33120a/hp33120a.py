from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .hp33120a_dllwrap import *


class hp33120a(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = hp33120a_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def GetNextCoercionRecord(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def ConfigureSyncSignal(self, enable):
        """

        :param enable:
        :type enable:
        """
        return self._dllwrap.ConfigureSyncSignal(self._vi, enable)

    def ConfigureOutputPolarity(self, channelName, polarity):
        """

        :param channelName:
        :type channelName:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.ConfigureOutputPolarity(self._vi, channelName, polarity)

    def ConfigureVoltAutoRanging(self, autoRange):
        """

        :param autoRange:
        :type autoRange:
        """
        return self._dllwrap.ConfigureVoltAutoRanging(self._vi, autoRange)

    def PhaseUnlockErrorState(self, lock):
        """

        :param lock:
        :type lock:
        """
        return self._dllwrap.PhaseUnlockErrorState(self._vi, lock)

    def ConfigureOperationMode(self, channelName, operationMode):
        """

        :param channelName:
        :type channelName:
        :param operationMode:
        :type operationMode:
        """
        return self._dllwrap.ConfigureOperationMode(self._vi, channelName, operationMode)

    def ConfigureOutputMode(self, outputMode):
        """

        :param outputMode:
        :type outputMode:
        """
        return self._dllwrap.ConfigureOutputMode(self._vi, outputMode)

    def ConfigureRefClockSource(self, refClockSource):
        """

        :param refClockSource:
        :type refClockSource:
        """
        return self._dllwrap.ConfigureRefClockSource(self._vi, refClockSource)

    def ConfigureOutputImpedance(self, channelName, outputImpedance):
        """

        :param channelName:
        :type channelName:
        :param outputImpedance:
        :type outputImpedance:
        """
        return self._dllwrap.ConfigureOutputImpedance(self._vi, channelName, outputImpedance)

    def InitiateGeneration(self):
        """"""
        return self._dllwrap.InitiateGeneration(self._vi)

    def AbortGeneration(self):
        """"""
        return self._dllwrap.AbortGeneration(self._vi)

    def ConfigureOutputEnabled(self, channelName, outputEnabled):
        """

        :param channelName:
        :type channelName:
        :param outputEnabled:
        :type outputEnabled:
        """
        return self._dllwrap.ConfigureOutputEnabled(self._vi, channelName, outputEnabled)

    def ConfigureRampSymmetry(self, channelName, rampSymmetry):
        """

        :param channelName:
        :type channelName:
        :param rampSymmetry:
        :type rampSymmetry:
        """
        return self._dllwrap.ConfigureRampSymmetry(self._vi, channelName, rampSymmetry)

    def ConfigurePulse(self, channelName, pulsePeriod, pulseWidth, pulseTransition):
        """

        :param channelName:
        :type channelName:
        :param pulsePeriod:
        :type pulsePeriod:
        :param pulseWidth:
        :type pulseWidth:
        :param pulseTransition:
        :type pulseTransition:
        """
        return self._dllwrap.ConfigurePulse(self._vi, channelName, pulsePeriod, pulseWidth, pulseTransition)

    def ConfigureSquareDutyCycle(self, channelName, dutyCycle):
        """

        :param channelName:
        :type channelName:
        :param dutyCycle:
        :type dutyCycle:
        """
        return self._dllwrap.ConfigureSquareDutyCycle(self._vi, channelName, dutyCycle)

    def ConfigureStandardWaveform(self, channelName, waveform, amplitude, dcOffset, frequency, startPhase):
        """

        :param channelName:
        :type channelName:
        :param waveform:
        :type waveform:
        :param amplitude:
        :type amplitude:
        :param dcOffset:
        :type dcOffset:
        :param frequency:
        :type frequency:
        :param startPhase:
        :type startPhase:
        """
        return self._dllwrap.ConfigureStandardWaveform(
            self._vi, channelName, waveform, amplitude, dcOffset, frequency, startPhase
        )

    def ConfigurePulseHold(self, hold):
        """

        :param hold:
        :type hold:
        """
        return self._dllwrap.ConfigurePulseHold(self._vi, hold)

    def ConfigurePulseDutyCycle(self, dutyCycle):
        """

        :param dutyCycle:
        :type dutyCycle:
        """
        return self._dllwrap.ConfigurePulseDutyCycle(self._vi, dutyCycle)

    def QueryArbWfmCapabilities(self):
        """"""
        return self._dllwrap.QueryArbWfmCapabilities(self._vi)

    def QueryArbWfmProperties(self, wfmHandle):
        """

        :param wfmHandle:
        :type wfmHandle:
        """
        return self._dllwrap.QueryArbWfmProperties(self._vi, wfmHandle)

    def CreateArbWaveform(self, wfmSize, wfmData):
        """

        :param wfmSize:
        :type wfmSize:
        :param wfmData:
        :type wfmData:
        """
        return self._dllwrap.CreateArbWaveform(self._vi, wfmSize, wfmData)

    def ConfigureSampleRate(self, sampleRate):
        """

        :param sampleRate:
        :type sampleRate:
        """
        return self._dllwrap.ConfigureSampleRate(self._vi, sampleRate)

    def ConfigureArbWaveform(self, channelName, wfmHandle, arbGain, arbOffset):
        """

        :param channelName:
        :type channelName:
        :param wfmHandle:
        :type wfmHandle:
        :param arbGain:
        :type arbGain:
        :param arbOffset:
        :type arbOffset:
        """
        return self._dllwrap.ConfigureArbWaveform(self._vi, channelName, wfmHandle, arbGain, arbOffset)

    def ClearArbWaveform(self, wfmHandle):
        """

        :param wfmHandle:
        :type wfmHandle:
        """
        return self._dllwrap.ClearArbWaveform(self._vi, wfmHandle)

    def GetWfmNameFromHandle(self, wfmHandle, arraySize):
        """

        :param wfmHandle:
        :type wfmHandle:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetWfmNameFromHandle(self._vi, wfmHandle, arraySize)

    def GetWfmHandleFromName(self, wfmName):
        """

        :param wfmName:
        :type wfmName:
        """
        return self._dllwrap.GetWfmHandleFromName(self._vi, wfmName)

    def GetWfmNames(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetWfmNames(self._vi, arraySize)

    def ConfigureArbFrequency(self, channelName, frequency):
        """

        :param channelName:
        :type channelName:
        :param frequency:
        :type frequency:
        """
        return self._dllwrap.ConfigureArbFrequency(self._vi, channelName, frequency)

    def ConfigureAMEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureAMEnabled(self._vi, channelName, enabled)

    def ConfigureAMSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureAMSource(self._vi, channelName, source)

    def ConfigureAMInternal(self, amDepth, amWaveform, amFrequency):
        """

        :param amDepth:
        :type amDepth:
        :param amWaveform:
        :type amWaveform:
        :param amFrequency:
        :type amFrequency:
        """
        return self._dllwrap.ConfigureAMInternal(self._vi, amDepth, amWaveform, amFrequency)

    def ConfigureFMEnabled(self, channelName, FMEnabled):
        """

        :param channelName:
        :type channelName:
        :param FMEnabled:
        :type FMEnabled:
        """
        return self._dllwrap.ConfigureFMEnabled(self._vi, channelName, FMEnabled)

    def ConfigureFMSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureFMSource(self._vi, channelName, source)

    def ConfigureFMInternal(self, fmDeviation, fmWaveform, fmFrequency):
        """

        :param fmDeviation:
        :type fmDeviation:
        :param fmWaveform:
        :type fmWaveform:
        :param fmFrequency:
        :type fmFrequency:
        """
        return self._dllwrap.ConfigureFMInternal(self._vi, fmDeviation, fmWaveform, fmFrequency)

    def ConfigurePMEnabled(self, channelName, PMEnabled):
        """

        :param channelName:
        :type channelName:
        :param PMEnabled:
        :type PMEnabled:
        """
        return self._dllwrap.ConfigurePMEnabled(self._vi, channelName, PMEnabled)

    def ConfigurePMSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigurePMSource(self._vi, channelName, source)

    def ConfigurePMInternal(self, pmDeviation, pmWaveform, pmFrequency):
        """

        :param pmDeviation:
        :type pmDeviation:
        :param pmWaveform:
        :type pmWaveform:
        :param pmFrequency:
        :type pmFrequency:
        """
        return self._dllwrap.ConfigurePMInternal(self._vi, pmDeviation, pmWaveform, pmFrequency)

    def ConfigurePWMEnabled(self, channelName, PWMEnabled):
        """

        :param channelName:
        :type channelName:
        :param PWMEnabled:
        :type PWMEnabled:
        """
        return self._dllwrap.ConfigurePWMEnabled(self._vi, channelName, PWMEnabled)

    def ConfigurePWMSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigurePWMSource(self._vi, channelName, source)

    def ConfigurePWMInternal(self, pwmDeviation, pwmWaveform, pwmFrequency, pwmDutyCycleDev):
        """

        :param pwmDeviation:
        :type pwmDeviation:
        :param pwmWaveform:
        :type pwmWaveform:
        :param pwmFrequency:
        :type pwmFrequency:
        :param pwmDutyCycleDev:
        :type pwmDutyCycleDev:
        """
        return self._dllwrap.ConfigurePWMInternal(self._vi, pwmDeviation, pwmWaveform, pwmFrequency, pwmDutyCycleDev)

    def ConfigureFSKEnabled(self, channelName, FSKEnabled):
        """

        :param channelName:
        :type channelName:
        :param FSKEnabled:
        :type FSKEnabled:
        """
        return self._dllwrap.ConfigureFSKEnabled(self._vi, channelName, FSKEnabled)

    def ConfigureFSKSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureFSKSource(self._vi, channelName, source)

    def ConfigureFSKHopFrequency(self, hopFrequency):
        """

        :param hopFrequency:
        :type hopFrequency:
        """
        return self._dllwrap.ConfigureFSKHopFrequency(self._vi, hopFrequency)

    def ConfigureFSKInternal(self, fskRate):
        """

        :param fskRate:
        :type fskRate:
        """
        return self._dllwrap.ConfigureFSKInternal(self._vi, fskRate)

    def ConfigureSweep(self, sweepSpacing, startFreq, stopFreq, sweepTime):
        """

        :param sweepSpacing:
        :type sweepSpacing:
        :param startFreq:
        :type startFreq:
        :param stopFreq:
        :type stopFreq:
        :param sweepTime:
        :type sweepTime:
        """
        return self._dllwrap.ConfigureSweep(self._vi, sweepSpacing, startFreq, stopFreq, sweepTime)

    def ConfigureSweepCenterSpan(self, spacing, centerFrequency_Hz, frequencySpan_Hz, sweepTime_s):
        """

        :param spacing:
        :type spacing:
        :param centerFrequency_Hz:
        :type centerFrequency_Hz:
        :param frequencySpan_Hz:
        :type frequencySpan_Hz:
        :param sweepTime_s:
        :type sweepTime_s:
        """
        return self._dllwrap.ConfigureSweepCenterSpan(
            self._vi, spacing, centerFrequency_Hz, frequencySpan_Hz, sweepTime_s
        )

    def SweepMarkerEnabled(self, channelName, sweepMark):
        """

        :param channelName:
        :type channelName:
        :param sweepMark:
        :type sweepMark:
        """
        return self._dllwrap.SweepMarkerEnabled(self._vi, channelName, sweepMark)

    def ConfigureSweepMarkerFreq(self, channelName, markerFreq):
        """

        :param channelName:
        :type channelName:
        :param markerFreq:
        :type markerFreq:
        """
        return self._dllwrap.ConfigureSweepMarkerFreq(self._vi, channelName, markerFreq)

    def ConfigureBurstCount(self, channelName, burstCount):
        """

        :param channelName:
        :type channelName:
        :param burstCount:
        :type burstCount:
        """
        return self._dllwrap.ConfigureBurstCount(self._vi, channelName, burstCount)

    def ConfigureBurstPhase(self, phase):
        """

        :param phase:
        :type phase:
        """
        return self._dllwrap.ConfigureBurstPhase(self._vi, phase)

    def ConfigureBurstGatePolarity(self, channelName, gatePolarity):
        """

        :param channelName:
        :type channelName:
        :param gatePolarity:
        :type gatePolarity:
        """
        return self._dllwrap.ConfigureBurstGatePolarity(self._vi, channelName, gatePolarity)

    def ConfigureBurstMode(self, channelName, mode):
        """

        :param channelName:
        :type channelName:
        :param mode:
        :type mode:
        """
        return self._dllwrap.ConfigureBurstMode(self._vi, channelName, mode)

    def ConfigureTriggerSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureTriggerSource(self._vi, channelName, source)

    def ConfigureOutputTriggerSlope(self, slope):
        """

        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureOutputTriggerSlope(self._vi, slope)

    def ConfigureTriggerSlope(self, channelName, slope):
        """

        :param channelName:
        :type channelName:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureTriggerSlope(self._vi, channelName, slope)

    def ConfigureTriggerDelay(self, channelName, delay):
        """

        :param channelName:
        :type channelName:
        :param delay:
        :type delay:
        """
        return self._dllwrap.ConfigureTriggerDelay(self._vi, channelName, delay)

    def OutputTriggerEnabled(self, outputTrig):
        """

        :param outputTrig:
        :type outputTrig:
        """
        return self._dllwrap.OutputTriggerEnabled(self._vi, outputTrig)

    def ConfigureInternalTriggerRate(self, rate):
        """

        :param rate:
        :type rate:
        """
        return self._dllwrap.ConfigureInternalTriggerRate(self._vi, rate)

    def ConfigureTTLLineEnabled(self, Line, state):
        """

        :param Line:
        :type Line:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureTTLLineEnabled(self._vi, Line, state)

    def ConfigurePhaseRef(self, phaseReference):
        """

        :param phaseReference:
        :type phaseReference:
        """
        return self._dllwrap.ConfigurePhaseRef(self._vi, phaseReference)

    def ConfigurePhaseAdjust(self, phaseAdjust):
        """

        :param phaseAdjust:
        :type phaseAdjust:
        """
        return self._dllwrap.ConfigurePhaseAdjust(self._vi, phaseAdjust)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def GetError(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def GetChannelName(self, index, bufferSize):
        """

        :param index:
        :type index:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, index, bufferSize)

    def GetNextInterchangeWarning(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def VoltAutoRangingOnce(self):
        """"""
        return self._dllwrap.VoltAutoRangingOnce(self._vi)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def SendExternalTrigger(self):
        """"""
        return self._dllwrap.SendExternalTrigger(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def viWrite(self, buffer, count):
        """

        :param buffer:
        :type buffer:
        :param count:
        :type count:
        """
        return self._dllwrap.viWrite(self._vi, buffer, count)

    def viRead(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.viRead(self._vi, bufferSize)

    def AutoRecallEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.AutoRecallEnabled(self._vi, channelName, enabled)

    def SetMemoryStateName(self, locationNum, stateName):
        """

        :param locationNum:
        :type locationNum:
        :param stateName:
        :type stateName:
        """
        return self._dllwrap.SetMemoryStateName(self._vi, locationNum, stateName)

    def SaveInstrState(self, locationNum):
        """

        :param locationNum:
        :type locationNum:
        """
        return self._dllwrap.SaveInstrState(self._vi, locationNum)

    def RecallInstrState(self, locationNum):
        """

        :param locationNum:
        :type locationNum:
        """
        return self._dllwrap.RecallInstrState(self._vi, locationNum)

    def DeleteMemoryStateContent(self, locationNum):
        """

        :param locationNum:
        :type locationNum:
        """
        return self._dllwrap.DeleteMemoryStateContent(self._vi, locationNum)

    def QueryMemoryValidState(self, locationNum):
        """

        :param locationNum:
        :type locationNum:
        """
        return self._dllwrap.QueryMemoryValidState(self._vi, locationNum)

    def QueryMemoryInfo(self):
        """"""
        return self._dllwrap.QueryMemoryInfo(self._vi)

    def QueryArbWfmMemoryInfo(self):
        """"""
        return self._dllwrap.QueryArbWfmMemoryInfo(self._vi)

    def QuerySCPISettings(self):
        """"""
        return self._dllwrap.QuerySCPISettings(self._vi)

    def GetAttributeViInt32(self, channelName, attributeId):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attributeId)

    def GetAttributeViReal64(self, channelName, attributeId):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attributeId)

    def GetAttributeViString(self, channelName, attributeId, bufSize):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        :param bufSize:
        :type bufSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attributeId, bufSize)

    def GetAttributeViSession(self, channelName, attributeId):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attributeId)

    def GetAttributeViBoolean(self, channelName, attributeId):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attributeId)

    def SetAttributeViInt32(self, channelName, attributeId, value):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attributeId, value)

    def SetAttributeViReal64(self, channelName, attributeId, value):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attributeId, value)

    def SetAttributeViString(self, channelName, attributeId, value):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attributeId, value)

    def SetAttributeViSession(self, channelName, attributeId, value):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attributeId, value)

    def SetAttributeViBoolean(self, channelName, attributeId, value):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attributeId, value)

    def CheckAttributeViInt32(self, channelName, attributeId, value):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attributeId, value)

    def CheckAttributeViReal64(self, channelName, attributeId, value):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attributeId, value)

    def CheckAttributeViString(self, channelName, attributeId, value):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attributeId, value)

    def CheckAttributeViSession(self, channelName, attributeId, value):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attributeId, value)

    def CheckAttributeViBoolean(self, channelName, attributeId, value):
        """

        :param channelName:
        :type channelName:
        :param attributeId:
        :type attributeId:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attributeId, value)

    def IviInit(self, resourceName, IDQuery, reset):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param reset:
        :type reset:
        """
        return self._dllwrap.IviInit(resourceName, IDQuery, reset, self._vi)

    def IviClose(self):
        """"""
        return self._dllwrap.IviClose(self._vi)

    def GetErrorInfo(self):
        """"""
        return self._dllwrap.GetErrorInfo(self._vi)

    def ClearErrorInfo(self):
        """"""
        return self._dllwrap.ClearErrorInfo(self._vi)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """

        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)
