from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import hp33120a_const as const
from .hp33120a_const import *


class hp33120a_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("hp33120a_32.dll", "hp33120a_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "hp33120a"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        status = self.dll.hp33120a_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        status = self.dll.hp33120a_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViConstString(optionString),
            byref(newVi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(newVi.value)

    def close(self, vi):
        status = self.dll.hp33120a_close(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.hp33120a_LockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.hp33120a_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def ConfigureSyncSignal(self, vi, enable):
        status = self.dll.hp33120a_ConfigureSyncSignal(ViSession(vi), ViBoolean(enable))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputPolarity(self, vi, channelName, polarity):
        status = self.dll.hp33120a_ConfigureOutputPolarity(ViSession(vi), ViConstString(channelName), ViInt32(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureVoltAutoRanging(self, vi, autoRange):
        status = self.dll.hp33120a_ConfigureVoltAutoRanging(ViSession(vi), ViInt32(autoRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PhaseUnlockErrorState(self, vi, lock):
        status = self.dll.hp33120a_PhaseUnlockErrorState(ViSession(vi), ViBoolean(lock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOperationMode(self, vi, channelName, operationMode):
        status = self.dll.hp33120a_ConfigureOperationMode(
            ViSession(vi), ViConstString(channelName), ViInt32(operationMode)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputMode(self, vi, outputMode):
        status = self.dll.hp33120a_ConfigureOutputMode(ViSession(vi), ViInt32(outputMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefClockSource(self, vi, refClockSource):
        status = self.dll.hp33120a_ConfigureRefClockSource(ViSession(vi), ViInt32(refClockSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputImpedance(self, vi, channelName, outputImpedance):
        status = self.dll.hp33120a_ConfigureOutputImpedance(
            ViSession(vi), ViConstString(channelName), ViReal64(outputImpedance)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitiateGeneration(self, vi):
        status = self.dll.hp33120a_InitiateGeneration(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AbortGeneration(self, vi):
        status = self.dll.hp33120a_AbortGeneration(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputEnabled(self, vi, channelName, outputEnabled):
        status = self.dll.hp33120a_ConfigureOutputEnabled(
            ViSession(vi), ViConstString(channelName), ViBoolean(outputEnabled)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRampSymmetry(self, vi, channelName, rampSymmetry):
        status = self.dll.hp33120a_ConfigureRampSymmetry(
            ViSession(vi), ViConstString(channelName), ViReal64(rampSymmetry)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulse(self, vi, channelName, pulsePeriod, pulseWidth, pulseTransition):
        status = self.dll.hp33120a_ConfigurePulse(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(pulsePeriod),
            ViReal64(pulseWidth),
            ViReal64(pulseTransition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSquareDutyCycle(self, vi, channelName, dutyCycle):
        status = self.dll.hp33120a_ConfigureSquareDutyCycle(
            ViSession(vi), ViConstString(channelName), ViReal64(dutyCycle)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureStandardWaveform(self, vi, channelName, waveform, amplitude, dcOffset, frequency, startPhase):
        status = self.dll.hp33120a_ConfigureStandardWaveform(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(waveform),
            ViReal64(amplitude),
            ViReal64(dcOffset),
            ViReal64(frequency),
            ViReal64(startPhase),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseHold(self, vi, hold):
        status = self.dll.hp33120a_ConfigurePulseHold(ViSession(vi), ViInt32(hold))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseDutyCycle(self, vi, dutyCycle):
        status = self.dll.hp33120a_ConfigurePulseDutyCycle(ViSession(vi), ViReal64(dutyCycle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryArbWfmCapabilities(self, vi):
        maxNumWfms = ViInt32()
        wfmQuantum = ViInt32()
        minWfmSize = ViInt32()
        maxWfmSize = ViInt32()
        status = self.dll.hp33120a_QueryArbWfmCapabilities(
            ViSession(vi),
            byref(maxNumWfms),
            byref(wfmQuantum),
            byref(minWfmSize),
            byref(maxWfmSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        maxNumWfms = int(maxNumWfms.value)
        wfmQuantum = int(wfmQuantum.value)
        minWfmSize = int(minWfmSize.value)
        maxWfmSize = int(maxWfmSize.value)
        return maxNumWfms, wfmQuantum, minWfmSize, maxWfmSize

    def QueryArbWfmProperties(self, vi, wfmHandle):
        average = ViReal64()
        crestFactor = ViReal64()
        status = self.dll.hp33120a_QueryArbWfmProperties(
            ViSession(vi), ViInt32(wfmHandle), byref(average), byref(crestFactor)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        average = float(average.value)
        crestFactor = float(crestFactor.value)
        return average, crestFactor

    def CreateArbWaveform(self, vi, wfmSize, wfmData):
        _wfmData = (ViReal64 * len(wfmData))(*wfmData)
        wfmHandle = ViInt32()
        status = self.dll.hp33120a_CreateArbWaveform(ViSession(vi), ViInt32(wfmSize), _wfmData, byref(wfmHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(wfmHandle.value)

    def ConfigureSampleRate(self, vi, sampleRate):
        status = self.dll.hp33120a_ConfigureSampleRate(ViSession(vi), ViReal64(sampleRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureArbWaveform(self, vi, channelName, wfmHandle, arbGain, arbOffset):
        status = self.dll.hp33120a_ConfigureArbWaveform(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(wfmHandle),
            ViReal64(arbGain),
            ViReal64(arbOffset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearArbWaveform(self, vi, wfmHandle):
        status = self.dll.hp33120a_ClearArbWaveform(ViSession(vi), ViInt32(wfmHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetWfmNameFromHandle(self, vi, wfmHandle, arraySize):
        wfmName = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_GetWfmNameFromHandle(ViSession(vi), ViInt32(wfmHandle), ViInt32(arraySize), wfmName)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(wfmName)

    def GetWfmHandleFromName(self, vi, wfmName):
        wfmHandle = ViInt32()
        status = self.dll.hp33120a_GetWfmHandleFromName(ViSession(vi), ViConstString(wfmName), byref(wfmHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(wfmHandle.value)

    def GetWfmNames(self, vi, arraySize):
        wfmNames = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_GetWfmNames(ViSession(vi), ViInt32(arraySize), wfmNames)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(wfmNames)

    def ConfigureArbFrequency(self, vi, channelName, frequency):
        status = self.dll.hp33120a_ConfigureArbFrequency(ViSession(vi), ViConstString(channelName), ViReal64(frequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAMEnabled(self, vi, channelName, enabled):
        status = self.dll.hp33120a_ConfigureAMEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAMSource(self, vi, channelName, source):
        status = self.dll.hp33120a_ConfigureAMSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAMInternal(self, vi, amDepth, amWaveform, amFrequency):
        status = self.dll.hp33120a_ConfigureAMInternal(
            ViSession(vi), ViReal64(amDepth), ViInt32(amWaveform), ViReal64(amFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMEnabled(self, vi, channelName, FMEnabled):
        status = self.dll.hp33120a_ConfigureFMEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(FMEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMSource(self, vi, channelName, source):
        status = self.dll.hp33120a_ConfigureFMSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMInternal(self, vi, fmDeviation, fmWaveform, fmFrequency):
        status = self.dll.hp33120a_ConfigureFMInternal(
            ViSession(vi),
            ViReal64(fmDeviation),
            ViInt32(fmWaveform),
            ViReal64(fmFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePMEnabled(self, vi, channelName, PMEnabled):
        status = self.dll.hp33120a_ConfigurePMEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(PMEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePMSource(self, vi, channelName, source):
        status = self.dll.hp33120a_ConfigurePMSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePMInternal(self, vi, pmDeviation, pmWaveform, pmFrequency):
        status = self.dll.hp33120a_ConfigurePMInternal(
            ViSession(vi),
            ViReal64(pmDeviation),
            ViInt32(pmWaveform),
            ViReal64(pmFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePWMEnabled(self, vi, channelName, PWMEnabled):
        status = self.dll.hp33120a_ConfigurePWMEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(PWMEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePWMSource(self, vi, channelName, source):
        status = self.dll.hp33120a_ConfigurePWMSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePWMInternal(self, vi, pwmDeviation, pwmWaveform, pwmFrequency, pwmDutyCycleDev):
        status = self.dll.hp33120a_ConfigurePWMInternal(
            ViSession(vi),
            ViReal64(pwmDeviation),
            ViInt32(pwmWaveform),
            ViReal64(pwmFrequency),
            ViReal64(pwmDutyCycleDev),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFSKEnabled(self, vi, channelName, FSKEnabled):
        status = self.dll.hp33120a_ConfigureFSKEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(FSKEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFSKSource(self, vi, channelName, source):
        status = self.dll.hp33120a_ConfigureFSKSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFSKHopFrequency(self, vi, hopFrequency):
        status = self.dll.hp33120a_ConfigureFSKHopFrequency(ViSession(vi), ViReal64(hopFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFSKInternal(self, vi, fskRate):
        status = self.dll.hp33120a_ConfigureFSKInternal(ViSession(vi), ViReal64(fskRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSweep(self, vi, sweepSpacing, startFreq, stopFreq, sweepTime):
        status = self.dll.hp33120a_ConfigureSweep(
            ViSession(vi),
            ViInt32(sweepSpacing),
            ViReal64(startFreq),
            ViReal64(stopFreq),
            ViReal64(sweepTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSweepCenterSpan(self, instrumentHandle, spacing, centerFrequency_Hz, frequencySpan_Hz, sweepTime_s):
        status = self.dll.hp33120a_ConfigureSweepCenterSpan(
            ViSession(instrumentHandle),
            ViInt32(spacing),
            ViReal64(centerFrequency_Hz),
            ViReal64(frequencySpan_Hz),
            ViReal64(sweepTime_s),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SweepMarkerEnabled(self, vi, channelName, sweepMark):
        status = self.dll.hp33120a_SweepMarkerEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(sweepMark))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSweepMarkerFreq(self, vi, channelName, markerFreq):
        status = self.dll.hp33120a_ConfigureSweepMarkerFreq(
            ViSession(vi), ViConstString(channelName), ViReal64(markerFreq)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureBurstCount(self, vi, channelName, burstCount):
        status = self.dll.hp33120a_ConfigureBurstCount(ViSession(vi), ViConstString(channelName), ViInt32(burstCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureBurstPhase(self, vi, phase):
        status = self.dll.hp33120a_ConfigureBurstPhase(ViSession(vi), ViReal64(phase))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureBurstGatePolarity(self, vi, channelName, gatePolarity):
        status = self.dll.hp33120a_ConfigureBurstGatePolarity(
            ViSession(vi), ViConstString(channelName), ViInt32(gatePolarity)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureBurstMode(self, instrumentHandle, channelName, mode):
        status = self.dll.hp33120a_ConfigureBurstMode(
            ViSession(instrumentHandle), ViConstString(channelName), ViInt32(mode)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerSource(self, vi, channelName, source):
        status = self.dll.hp33120a_ConfigureTriggerSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputTriggerSlope(self, vi, slope):
        status = self.dll.hp33120a_ConfigureOutputTriggerSlope(ViSession(vi), ViInt32(slope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerSlope(self, vi, channelName, slope):
        status = self.dll.hp33120a_ConfigureTriggerSlope(ViSession(vi), ViConstString(channelName), ViInt32(slope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerDelay(self, vi, channelName, delay):
        status = self.dll.hp33120a_ConfigureTriggerDelay(ViSession(vi), ViConstString(channelName), ViReal64(delay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def OutputTriggerEnabled(self, vi, outputTrig):
        status = self.dll.hp33120a_OutputTriggerEnabled(ViSession(vi), ViBoolean(outputTrig))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInternalTriggerRate(self, vi, rate):
        status = self.dll.hp33120a_ConfigureInternalTriggerRate(ViSession(vi), ViReal64(rate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTTLLineEnabled(self, vi, Line, state):
        status = self.dll.hp33120a_ConfigureTTLLineEnabled(ViSession(vi), ViInt32(Line), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePhaseRef(self, instrumentHandle, phaseReference):
        status = self.dll.hp33120a_ConfigurePhaseRef(ViSession(instrumentHandle), ViReal64(phaseReference))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePhaseAdjust(self, instrumentHandle, phaseAdjust):
        status = self.dll.hp33120a_ConfigurePhaseAdjust(ViSession(instrumentHandle), ViReal64(phaseAdjust))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        status = self.dll.hp33120a_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(errorMessage)

    def GetError(self, vi, bufferSize):
        errorCode = ViStatus()
        description = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_GetError(ViSession(vi), byref(errorCode), ViInt32(bufferSize), description)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        description = decode(description)
        return errorCode, description

    def ClearError(self, vi):
        status = self.dll.hp33120a_ClearError(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetChannelName(self, vi, index, bufferSize):
        name = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_GetChannelName(ViSession(vi), ViInt32(index), ViInt32(bufferSize), name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(name)

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        status = self.dll.hp33120a_ResetInterchangeCheck(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, vi):
        status = self.dll.hp33120a_ClearInterchangeWarnings(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltAutoRangingOnce(self, vi):
        status = self.dll.hp33120a_VoltAutoRangingOnce(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InvalidateAllAttributes(self, vi):
        status = self.dll.hp33120a_InvalidateAllAttributes(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, vi):
        status = self.dll.hp33120a_ResetWithDefaults(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, vi):
        status = self.dll.hp33120a_Disable(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SendSoftwareTrigger(self, vi):
        status = self.dll.hp33120a_SendSoftwareTrigger(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SendExternalTrigger(self, vi):
        status = self.dll.hp33120a_SendExternalTrigger(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def reset(self, vi):
        status = self.dll.hp33120a_reset(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def viWrite(self, vi, buffer, count):
        _buffer = (ViByte * len(buffer))(*buffer)
        returnCount = ViInt64()
        status = self.dll.hp33120a_viWrite(ViSession(vi), _buffer, ViInt64(count), byref(returnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(returnCount.value)

    def viRead(self, vi, bufferSize):
        buffer = ARRAY_ViByte(1024)
        returnCount = ViInt64()
        status = self.dll.hp33120a_viRead(ViSession(vi), ViInt64(bufferSize), buffer, byref(returnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        returnCount = int(returnCount.value)
        return buffer, returnCount

    def AutoRecallEnabled(self, instrumentHandle, channelName, enabled):
        status = self.dll.hp33120a_AutoRecallEnabled(
            ViSession(instrumentHandle), ViConstString(channelName), ViInt32(enabled)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMemoryStateName(self, vi, locationNum, stateName):
        status = self.dll.hp33120a_SetMemoryStateName(
            ViSession(vi), ViConstString(locationNum), ViConstString(stateName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SaveInstrState(self, vi, locationNum):
        status = self.dll.hp33120a_SaveInstrState(ViSession(vi), ViConstString(locationNum))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RecallInstrState(self, vi, locationNum):
        status = self.dll.hp33120a_RecallInstrState(ViSession(vi), ViConstString(locationNum))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DeleteMemoryStateContent(self, vi, locationNum):
        status = self.dll.hp33120a_DeleteMemoryStateContent(ViSession(vi), ViConstString(locationNum))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryMemoryValidState(self, vi, locationNum):
        validState = ViInt32()
        status = self.dll.hp33120a_QueryMemoryValidState(ViSession(vi), ViConstString(locationNum), byref(validState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(validState.value)

    def QueryMemoryInfo(self, vi):
        availableSlots = ViInt32()
        stateCatalog = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_QueryMemoryInfo(ViSession(vi), byref(availableSlots), stateCatalog)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        availableSlots = int(availableSlots.value)
        stateCatalog = decode(stateCatalog)
        return availableSlots, stateCatalog

    def QueryArbWfmMemoryInfo(self, vi):
        freeSlotsNum = ViInt32()
        wfmCatalog = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_QueryArbWfmMemoryInfo(ViSession(vi), byref(freeSlotsNum), wfmCatalog)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        freeSlotsNum = int(freeSlotsNum.value)
        wfmCatalog = decode(wfmCatalog)
        return freeSlotsNum, wfmCatalog

    def QuerySCPISettings(self, vi):
        learnString = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_QuerySCPISettings(ViSession(vi), learnString)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(learnString)

    def GetAttributeViInt32(self, vi, channelName, attributeId):
        value = ViInt32()
        status = self.dll.hp33120a_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attributeId), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attributeId):
        value = ViReal64()
        status = self.dll.hp33120a_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attributeId), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attributeId, bufSize):
        value = ARRAY_ViChar(1024)
        status = self.dll.hp33120a_GetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attributeId),
            ViInt32(bufSize),
            value,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attributeId):
        value = ViSession()
        status = self.dll.hp33120a_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attributeId), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attributeId):
        value = ViBoolean()
        status = self.dll.hp33120a_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attributeId), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attributeId, value):
        status = self.dll.hp33120a_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attributeId), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, vi, channelName, attributeId, value):
        status = self.dll.hp33120a_SetAttributeViReal64(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attributeId),
            ViReal64(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, vi, channelName, attributeId, value):
        status = self.dll.hp33120a_SetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attributeId),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, vi, channelName, attributeId, value):
        status = self.dll.hp33120a_SetAttributeViSession(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attributeId),
            ViSession(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attributeId, value):
        status = self.dll.hp33120a_SetAttributeViBoolean(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attributeId),
            ViBoolean(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attributeId, value):
        status = self.dll.hp33120a_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attributeId), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attributeId, value):
        status = self.dll.hp33120a_CheckAttributeViReal64(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attributeId),
            ViReal64(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViString(self, vi, channelName, attributeId, value):
        status = self.dll.hp33120a_CheckAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attributeId),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViSession(self, vi, channelName, attributeId, value):
        status = self.dll.hp33120a_CheckAttributeViSession(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attributeId),
            ViSession(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attributeId, value):
        status = self.dll.hp33120a_CheckAttributeViBoolean(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attributeId),
            ViBoolean(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviInit(self, resourceName, IDQuery, reset, vi):
        status = self.dll.hp33120a_IviInit(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(reset), ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviClose(self, vi):
        status = self.dll.hp33120a_IviClose(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetErrorInfo(self, vi):
        errorElaboration = ARRAY_ViChar(256)
        status = self.dll.hp33120a_GetErrorInfo(ViSession(vi), errorElaboration)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(errorElaboration)

    def ClearErrorInfo(self, vi):
        status = self.dll.hp33120a_ClearErrorInfo(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def WriteInstrData(self, vi, writeBuffer):
        status = self.dll.hp33120a_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        status = self.dll.hp33120a_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead
