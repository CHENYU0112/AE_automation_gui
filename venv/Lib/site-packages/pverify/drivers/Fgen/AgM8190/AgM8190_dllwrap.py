from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import AgM8190_const as const
from .AgM8190_const import *


class AgM8190_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("AgM8190.dll", "AgM8190_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "AgM8190"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        _status = self.dll.AgM8190_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Vi.value)

    def close(self, Vi):
        _status = self.dll.AgM8190_close(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        _status = self.dll.AgM8190_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        _status = self.dll.AgM8190_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        _status = self.dll.AgM8190_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        _status = self.dll.AgM8190_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        _status = self.dll.AgM8190_ClearError(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearInterchangeWarnings(self, Vi):
        _status = self.dll.AgM8190_ClearInterchangeWarnings(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        _status = self.dll.AgM8190_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(InterchangeWarningBufferSize)
        _status = self.dll.AgM8190_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        _status = self.dll.AgM8190_InvalidateAllAttributes(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetInterchangeCheck(self, Vi):
        _status = self.dll.AgM8190_ResetInterchangeCheck(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Disable(self, Vi):
        _status = self.dll.AgM8190_Disable(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        _status = self.dll.AgM8190_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        _status = self.dll.AgM8190_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        _status = self.dll.AgM8190_reset(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetWithDefaults(self, Vi):
        _status = self.dll.AgM8190_ResetWithDefaults(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        _status = self.dll.AgM8190_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        _status = self.dll.AgM8190_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(CallerHasLock.value)

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        _status = self.dll.AgM8190_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Name)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        _status = self.dll.AgM8190_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        _status = self.dll.AgM8190_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        _status = self.dll.AgM8190_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        _status = self.dll.AgM8190_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        _status = self.dll.AgM8190_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgM8190_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgM8190_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgM8190_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgM8190_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgM8190_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt64()
        _status = self.dll.AgM8190_GetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def SetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgM8190_SetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(AttributeID),
            ViInt64(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputEnabled(self, Vi, ChannelName, Enabled):
        _status = self.dll.AgM8190_ConfigureOutputEnabled(ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputMode(self, Vi, OutputMode):
        _status = self.dll.AgM8190_ConfigureOutputMode(ViSession(Vi), ViInt32(OutputMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRefClockSource(self, Vi, Source):
        _status = self.dll.AgM8190_ConfigureRefClockSource(ViSession(Vi), ViInt32(Source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSampleRate(self, Vi, SampleRate):
        _status = self.dll.AgM8190_ConfigureSampleRate(ViSession(Vi), ViReal64(SampleRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryArbWfmCapabilities(self, Vi):
        MaxNumWfms = ViInt32()
        WfmQuantum = ViInt32()
        MinWfmSize = ViInt32()
        MaxWfmSize = ViInt32()
        _status = self.dll.AgM8190_QueryArbWfmCapabilities(
            ViSession(Vi),
            byref(MaxNumWfms),
            byref(WfmQuantum),
            byref(MinWfmSize),
            byref(MaxWfmSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        MaxNumWfms = int(MaxNumWfms.value)
        WfmQuantum = int(WfmQuantum.value)
        MinWfmSize = int(MinWfmSize.value)
        MaxWfmSize = int(MaxWfmSize.value)
        return MaxNumWfms, WfmQuantum, MinWfmSize, MaxWfmSize

    def ClearArbWaveform(self, Vi, Handle):
        _status = self.dll.AgM8190_ClearArbWaveform(ViSession(Vi), ViInt32(Handle))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureArbWaveform(self, Vi, ChannelName, Handle, Gain, Offset):
        _status = self.dll.AgM8190_ConfigureArbWaveform(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(Handle),
            ViReal64(Gain),
            ViReal64(Offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CreateArbWaveform(self, Vi, Size, Data):
        _Data = (ViReal64 * len(Data))(*Data)
        Handle = ViInt32()
        _status = self.dll.AgM8190_CreateArbWaveform(ViSession(Vi), ViInt32(Size), _Data, byref(Handle))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Handle.value)

    def QueryArbSeqCapabilities(self, Vi):
        MaxNumSeqs = ViInt32()
        MinSeqLength = ViInt32()
        MaxSeqLength = ViInt32()
        MaxLoopCount = ViInt32()
        _status = self.dll.AgM8190_QueryArbSeqCapabilities(
            ViSession(Vi),
            byref(MaxNumSeqs),
            byref(MinSeqLength),
            byref(MaxSeqLength),
            byref(MaxLoopCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        MaxNumSeqs = int(MaxNumSeqs.value)
        MinSeqLength = int(MinSeqLength.value)
        MaxSeqLength = int(MaxSeqLength.value)
        MaxLoopCount = int(MaxLoopCount.value)
        return MaxNumSeqs, MinSeqLength, MaxSeqLength, MaxLoopCount

    def ClearArbMemory(self, Vi):
        _status = self.dll.AgM8190_ClearArbMemory(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearArbSequence(self, Vi, Handle):
        _status = self.dll.AgM8190_ClearArbSequence(ViSession(Vi), ViInt32(Handle))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureArbSequence(self, Vi, ChannelName, Handle, Gain, Offset):
        _status = self.dll.AgM8190_ConfigureArbSequence(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(Handle),
            ViReal64(Gain),
            ViReal64(Offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CreateArbSequence(self, Vi, Length, WfmHandle, LoopCount):
        _WfmHandle = (ViInt32 * len(WfmHandle))(*WfmHandle)
        _LoopCount = (ViInt32 * len(LoopCount))(*LoopCount)
        Handle = ViInt32()
        _status = self.dll.AgM8190_CreateArbSequence(
            ViSession(Vi), ViInt32(Length), _WfmHandle, _LoopCount, byref(Handle)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Handle.value)

    def ConfigureTriggerSource(self, Vi, ChannelName, Source):
        _status = self.dll.AgM8190_ConfigureTriggerSource(ViSession(Vi), ViConstString(ChannelName), ViInt32(Source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureInternalTriggerRate(self, Vi, Rate):
        _status = self.dll.AgM8190_ConfigureInternalTriggerRate(ViSession(Vi), ViReal64(Rate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AbortGeneration(self, Vi):
        _status = self.dll.AgM8190_AbortGeneration(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InitiateGeneration(self, Vi):
        _status = self.dll.AgM8190_InitiateGeneration(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SendSoftwareTrigger(self, Vi):
        _status = self.dll.AgM8190_SendSoftwareTrigger(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ChannelInitiateGeneration(self, Vi, Channel):
        _status = self.dll.AgM8190_ChannelInitiateGeneration(ViSession(Vi), ViConstString(Channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ChannelAbortGeneration(self, Vi, Channel):
        _status = self.dll.AgM8190_ChannelAbortGeneration(ViSession(Vi), ViConstString(Channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputConfigureDelay(self, Vi, Channel, CoarseDelay, FineDelay, DifferentialOffset):
        _status = self.dll.AgM8190_OutputConfigureDelay(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(CoarseDelay),
            ViReal64(FineDelay),
            ViReal64(DifferentialOffset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetReferenceClockSourceSupported(self, Vi, Source):
        ReferenceClockSourceSupported = ViBoolean()
        _status = self.dll.AgM8190_GetReferenceClockSourceSupported(
            ViSession(Vi), ViInt32(Source), byref(ReferenceClockSourceSupported)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(ReferenceClockSourceSupported.value)

    def SampleClockGetSampleClockSource(self, Vi, Channel):
        SampleClockSource = ViInt32()
        _status = self.dll.AgM8190_SampleClockGetSampleClockSource(
            ViSession(Vi), ViConstString(Channel), byref(SampleClockSource)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(SampleClockSource.value)

    def SampleClockSetSampleClockSource(self, Vi, Channel, SampleClockSource):
        _status = self.dll.AgM8190_SampleClockSetSampleClockSource(
            ViSession(Vi), ViConstString(Channel), ViInt32(SampleClockSource)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SampleClockConfigure(self, Vi, Channel, Source, Output):
        _status = self.dll.AgM8190_SampleClockConfigure(
            ViSession(Vi), ViConstString(Channel), ViInt32(Source), ViInt32(Output)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ArbitraryClearMemory(self, Vi):
        _status = self.dll.AgM8190_ArbitraryClearMemory(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ArbitraryConfigureAC(self, Vi, Channel, Amplitude, Format):
        _status = self.dll.AgM8190_ArbitraryConfigureAC(
            ViSession(Vi), ViConstString(Channel), ViReal64(Amplitude), ViInt32(Format)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ArbitraryConfigureDC(self, Vi, Channel, Amplitude, Format, Offset):
        _status = self.dll.AgM8190_ArbitraryConfigureDC(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(Amplitude),
            ViInt32(Format),
            ViReal64(Offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ArbitraryConfigureDAC(self, Vi, Channel, Amplitude, Format, Offset):
        _status = self.dll.AgM8190_ArbitraryConfigureDAC(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(Amplitude),
            ViInt32(Format),
            ViReal64(Offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformCreateChannelWaveform(self, Vi, Channel, DataBufferSize, Data):
        _Data = (ViReal64 * len(Data))(*Data)
        Val = ViInt32()
        _status = self.dll.AgM8190_WaveformCreateChannelWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(DataBufferSize),
            _Data,
            byref(Val),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def WaveformConfigure(self, Vi, Channel, Handle, Amplitude, Offset):
        _status = self.dll.AgM8190_WaveformConfigure(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViReal64(Amplitude),
            ViReal64(Offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformCreateChannelWaveformInt16(self, Vi, Channel, DataBufferSize, Data):
        _Data = (ViInt16 * len(Data))(*Data)
        Val = ViInt32()
        _status = self.dll.AgM8190_WaveformCreateChannelWaveformInt16(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(DataBufferSize),
            _Data,
            byref(Val),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def WaveformCreateChannelWaveformChunkInt16(self, Vi, Channel, Handle, Position, Length, DataBufferSize, Data):
        _Data = (ViInt16 * len(Data))(*Data)
        Val = ViInt32()
        _status = self.dll.AgM8190_WaveformCreateChannelWaveformChunkInt16(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViInt32(Position),
            ViInt32(Length),
            ViInt32(DataBufferSize),
            _Data,
            byref(Val),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def WaveformCreateChannelWaveformChunkInt16WithInit(
        self, Vi, Channel, Handle, Position, Length, DataBufferSize, Data, Init
    ):
        _Data = (ViInt16 * len(Data))(*Data)
        Val = ViInt32()
        _status = self.dll.AgM8190_WaveformCreateChannelWaveformChunkInt16WithInit(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViInt32(Position),
            ViInt32(Length),
            ViInt32(DataBufferSize),
            _Data,
            ViInt16(Init),
            byref(Val),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def WaveformCreateChannelWaveformInt16WriteOnly(self, Vi, Channel, DataBufferSize, Data):
        _Data = (ViInt16 * len(Data))(*Data)
        Val = ViInt32()
        _status = self.dll.AgM8190_WaveformCreateChannelWaveformInt16WriteOnly(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(DataBufferSize),
            _Data,
            byref(Val),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def WaveformClear(self, Vi, Channel, Handle):
        _status = self.dll.AgM8190_WaveformClear(ViSession(Vi), ViConstString(Channel), ViInt32(Handle))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformClearAll(self, Vi, Channel):
        _status = self.dll.AgM8190_WaveformClearAll(ViSession(Vi), ViConstString(Channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformQueryFreeMemory(self, Vi, Channel):
        BytesAvailable = ViInt64()
        BytesUsed = ViInt64()
        ContiguousBytesAvailable = ViInt64()
        _status = self.dll.AgM8190_WaveformQueryFreeMemory(
            ViSession(Vi),
            ViConstString(Channel),
            byref(BytesAvailable),
            byref(BytesUsed),
            byref(ContiguousBytesAvailable),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        BytesAvailable = int(BytesAvailable.value)
        BytesUsed = int(BytesUsed.value)
        ContiguousBytesAvailable = int(ContiguousBytesAvailable.value)
        return BytesAvailable, BytesUsed, ContiguousBytesAvailable

    def WaveformGetComment(self, Vi, Channel, Handle, CommentBufferSize):
        Comment = ARRAY_ViChar(CommentBufferSize)
        _status = self.dll.AgM8190_WaveformGetComment(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViInt32(CommentBufferSize),
            Comment,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Comment)

    def WaveformSetComment(self, Vi, Channel, Handle, Comment):
        _status = self.dll.AgM8190_WaveformSetComment(
            ViSession(Vi), ViConstString(Channel), ViInt32(Handle), ViConstString(Comment)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformGetName(self, Vi, Channel, Handle, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        _status = self.dll.AgM8190_WaveformGetName(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViInt32(NameBufferSize),
            Name,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Name)

    def WaveformSetName(self, Vi, Channel, Handle, Name):
        _status = self.dll.AgM8190_WaveformSetName(
            ViSession(Vi), ViConstString(Channel), ViInt32(Handle), ViConstString(Name)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformImport(self, Vi, Channel, Handle, FileName, FileType, PaddingType):
        _status = self.dll.AgM8190_WaveformImport(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViConstString(FileName),
            ViInt32(FileType),
            ViInt32(PaddingType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformImportIQ(
        self,
        Vi,
        Channel,
        Handle,
        FileName,
        FileType,
        DataType,
        MarkerFlagEnabled,
        PaddingType,
    ):
        _status = self.dll.AgM8190_WaveformImportIQ(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViConstString(FileName),
            ViInt32(FileType),
            ViInt32(DataType),
            ViBoolean(MarkerFlagEnabled),
            ViInt32(PaddingType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CreateChannelIQWaveformWithInit(self, Vi, Channel, Length, IValue, QValue):
        Val = ViInt32()
        _status = self.dll.AgM8190_CreateChannelIQWaveformWithInit(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Length),
            ViInt16(IValue),
            ViInt16(QValue),
            byref(Val),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def ImportIQToFile(self, Vi, FileName, FileType, MarkerFlagEnabled):
        _status = self.dll.AgM8190_ImportIQToFile(
            ViSession(Vi),
            ViConstString(FileName),
            ViInt32(FileType),
            ViBoolean(MarkerFlagEnabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SequenceCreate(self, Vi, Channel, WfmHandleBufferSize, WfmHandle, LoopCountBufferSize, LoopCount):
        _WfmHandle = (ViInt32 * len(WfmHandle))(*WfmHandle)
        _LoopCount = (ViInt32 * len(LoopCount))(*LoopCount)
        Val = ViInt32()
        _status = self.dll.AgM8190_SequenceCreate(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WfmHandleBufferSize),
            _WfmHandle,
            ViInt32(LoopCountBufferSize),
            _LoopCount,
            byref(Val),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def SequenceConfigure(self, Vi, Channel, Handle, Amplitude, Offset):
        _status = self.dll.AgM8190_SequenceConfigure(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViReal64(Amplitude),
            ViReal64(Offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SequenceSetData(self, Vi, Channel, Handle, Step, DataBufferSize, Data):
        _Data = (ViInt32 * len(Data))(*Data)
        _status = self.dll.AgM8190_SequenceSetData(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViInt32(Step),
            ViInt32(DataBufferSize),
            _Data,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SequenceGetData(self, Vi, Channel, Handle, Step, Length, DataBufferSize):
        Data = ARRAY_ViInt32(DataBufferSize)
        DataActualSize = ViInt32()
        _status = self.dll.AgM8190_SequenceGetData(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViInt32(Step),
            ViInt32(Length),
            ViInt32(DataBufferSize),
            Data,
            byref(DataActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        DataActualSize = int(DataActualSize.value)
        return Data, DataActualSize

    def SequenceClear(self, Vi, Channel, Handle):
        _status = self.dll.AgM8190_SequenceClear(ViSession(Vi), ViConstString(Channel), ViInt32(Handle))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SequenceClearAll(self, Vi, Channel):
        _status = self.dll.AgM8190_SequenceClearAll(ViSession(Vi), ViConstString(Channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SequenceGetLoopCount(self, Vi, Channel, Handle):
        LoopCount = ViInt64()
        _status = self.dll.AgM8190_SequenceGetLoopCount(
            ViSession(Vi), ViConstString(Channel), ViInt32(Handle), byref(LoopCount)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(LoopCount.value)

    def SequenceSetLoopCount(self, Vi, Channel, Handle, LoopCount):
        _status = self.dll.AgM8190_SequenceSetLoopCount(
            ViSession(Vi), ViConstString(Channel), ViInt32(Handle), ViInt64(LoopCount)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SequenceGetComment(self, Vi, Channel, Handle, CommentBufferSize):
        Comment = ARRAY_ViChar(CommentBufferSize)
        _status = self.dll.AgM8190_SequenceGetComment(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViInt32(CommentBufferSize),
            Comment,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Comment)

    def SequenceSetComment(self, Vi, Channel, Handle, Comment):
        _status = self.dll.AgM8190_SequenceSetComment(
            ViSession(Vi), ViConstString(Channel), ViInt32(Handle), ViConstString(Comment)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SequenceGetAdvancementMode(self, Vi, Channel, Handle):
        AdvancementMode = ViInt32()
        _status = self.dll.AgM8190_SequenceGetAdvancementMode(
            ViSession(Vi), ViConstString(Channel), ViInt32(Handle), byref(AdvancementMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AdvancementMode.value)

    def SequenceSetAdvancementMode(self, Vi, Channel, Handle, AdvancementMode):
        _status = self.dll.AgM8190_SequenceSetAdvancementMode(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViInt32(AdvancementMode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SequenceGetName(self, Vi, Channel, Handle, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        _status = self.dll.AgM8190_SequenceGetName(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Handle),
            ViInt32(NameBufferSize),
            Name,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Name)

    def SequenceSetName(self, Vi, Channel, Handle, Name):
        _status = self.dll.AgM8190_SequenceSetName(
            ViSession(Vi), ViConstString(Channel), ViInt32(Handle), ViConstString(Name)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SequenceQueryFreeMemory(self, Vi, Channel):
        Available = ViInt32()
        Used = ViInt32()
        ContiguousAvailable = ViInt32()
        _status = self.dll.AgM8190_SequenceQueryFreeMemory(
            ViSession(Vi),
            ViConstString(Channel),
            byref(Available),
            byref(Used),
            byref(ContiguousAvailable),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Available = int(Available.value)
        Used = int(Used.value)
        ContiguousAvailable = int(ContiguousAvailable.value)
        return Available, Used, ContiguousAvailable

    def SequenceTableReset(self, Vi, Channel):
        _status = self.dll.AgM8190_SequenceTableReset(ViSession(Vi), ViConstString(Channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SequenceTableSetData(self, Vi, Channel, TableIndex, DataBufferSize, Data):
        _Data = (ViInt32 * len(Data))(*Data)
        _status = self.dll.AgM8190_SequenceTableSetData(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(TableIndex),
            ViInt32(DataBufferSize),
            _Data,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SequenceTableGetData(self, Vi, Channel, TableIndex, Length, DataBufferSize):
        Data = ARRAY_ViInt32(DataBufferSize)
        DataActualSize = ViInt32()
        _status = self.dll.AgM8190_SequenceTableGetData(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(TableIndex),
            ViInt32(Length),
            ViInt32(DataBufferSize),
            Data,
            byref(DataActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        DataActualSize = int(DataActualSize.value)
        return Data, DataActualSize

    def DigitalUpConversionSetCarrierFrequency(self, Vi, Channel, FrequencyIntegral, FrequencyFractional):
        _status = self.dll.AgM8190_DigitalUpConversionSetCarrierFrequency(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(FrequencyIntegral),
            ViReal64(FrequencyFractional),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitalUpConversionGetCarrierFrequency(self, Vi, Channel):
        FrequencyIntegral = ViReal64()
        FrequencyFractional = ViReal64()
        _status = self.dll.AgM8190_DigitalUpConversionGetCarrierFrequency(
            ViSession(Vi),
            ViConstString(Channel),
            byref(FrequencyIntegral),
            byref(FrequencyFractional),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        FrequencyIntegral = float(FrequencyIntegral.value)
        FrequencyFractional = float(FrequencyFractional.value)
        return FrequencyIntegral, FrequencyFractional

    def DigitalUpConversionGetCarrierFrequencyMin(self, Vi, Channel):
        FrequencyIntegral = ViReal64()
        FrequencyFractional = ViReal64()
        _status = self.dll.AgM8190_DigitalUpConversionGetCarrierFrequencyMin(
            ViSession(Vi),
            ViConstString(Channel),
            byref(FrequencyIntegral),
            byref(FrequencyFractional),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        FrequencyIntegral = float(FrequencyIntegral.value)
        FrequencyFractional = float(FrequencyFractional.value)
        return FrequencyIntegral, FrequencyFractional

    def DigitalUpConversionGetCarrierFrequencyMax(self, Vi, Channel):
        FrequencyIntegral = ViReal64()
        FrequencyFractional = ViReal64()
        _status = self.dll.AgM8190_DigitalUpConversionGetCarrierFrequencyMax(
            ViSession(Vi),
            ViConstString(Channel),
            byref(FrequencyIntegral),
            byref(FrequencyFractional),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        FrequencyIntegral = float(FrequencyIntegral.value)
        FrequencyFractional = float(FrequencyFractional.value)
        return FrequencyIntegral, FrequencyFractional

    def ActionSequenceCreate(self, Vi, Channel):
        Val = ViInt32()
        _status = self.dll.AgM8190_ActionSequenceCreate(ViSession(Vi), ViConstString(Channel), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def ActionSequenceAppend(self, Vi, Channel, SequenceID, Action, Value1, Value2):
        _status = self.dll.AgM8190_ActionSequenceAppend(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(SequenceID),
            ViInt32(Action),
            ViReal64(Value1),
            ViReal64(Value2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ActionSequenceDelete(self, Vi, Channel, SequenceID):
        _status = self.dll.AgM8190_ActionSequenceDelete(ViSession(Vi), ViConstString(Channel), ViInt32(SequenceID))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ActionSequenceDeleteAll(self, Vi, Channel):
        _status = self.dll.AgM8190_ActionSequenceDeleteAll(ViSession(Vi), ViConstString(Channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AmplitudeTableSetData(self, Vi, Channel, TableIndex, DataBufferSize, Data):
        _Data = (ViReal64 * len(Data))(*Data)
        _status = self.dll.AgM8190_AmplitudeTableSetData(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(TableIndex),
            ViInt32(DataBufferSize),
            _Data,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AmplitudeTableGetData(self, Vi, Channel, TableIndex, Length, DataBufferSize):
        Data = ARRAY_ViReal64(DataBufferSize)
        DataActualSize = ViInt32()
        _status = self.dll.AgM8190_AmplitudeTableGetData(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(TableIndex),
            ViInt32(Length),
            ViInt32(DataBufferSize),
            Data,
            byref(DataActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Data = list(Data)
        DataActualSize = int(DataActualSize.value)
        return Data, DataActualSize

    def AmplitudeTableReset(self, Vi, Channel):
        _status = self.dll.AgM8190_AmplitudeTableReset(ViSession(Vi), ViConstString(Channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FrequencyTableSetData(self, Vi, Channel, TableIndex, DataBufferSize, Data):
        _Data = (ViReal64 * len(Data))(*Data)
        _status = self.dll.AgM8190_FrequencyTableSetData(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(TableIndex),
            ViInt32(DataBufferSize),
            _Data,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FrequencyTableGetData(self, Vi, Channel, TableIndex, Length, DataBufferSize):
        Data = ARRAY_ViReal64(DataBufferSize)
        DataActualSize = ViInt32()
        _status = self.dll.AgM8190_FrequencyTableGetData(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(TableIndex),
            ViInt32(Length),
            ViInt32(DataBufferSize),
            Data,
            byref(DataActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Data = list(Data)
        DataActualSize = int(DataActualSize.value)
        return Data, DataActualSize

    def FrequencyTableReset(self, Vi, Channel):
        _status = self.dll.AgM8190_FrequencyTableReset(ViSession(Vi), ViConstString(Channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemLoadConfiguration(self, Vi, FileName):
        _status = self.dll.AgM8190_SystemLoadConfiguration(ViSession(Vi), ViConstString(FileName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemStoreConfiguration(self, Vi, FileName):
        _status = self.dll.AgM8190_SystemStoreConfiguration(ViSession(Vi), ViConstString(FileName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        _status = self.dll.AgM8190_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemIoRead(self, Vi, Size):
        Value = ARRAY_ViChar(Size)
        ActualSize = ViInt32()
        _status = self.dll.AgM8190_SystemIoRead(ViSession(Vi), ViInt32(Size), Value, byref(ActualSize))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Value = decode(Value)
        ActualSize = int(ActualSize.value)
        return Value, ActualSize

    def SystemIoWrite(self, Vi, Value):
        _status = self.dll.AgM8190_SystemIoWrite(ViSession(Vi), ViConstString(Value))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemPowerOnSelfTest(self, Vi, TestMessageBufferSize):
        TestMessage = ARRAY_ViChar(TestMessageBufferSize)
        _status = self.dll.AgM8190_SystemPowerOnSelfTest(ViSession(Vi), ViInt32(TestMessageBufferSize), TestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(TestMessage)

    def MarkerConfigure(self, Vi, Channel, MarkerType, Amplitude, Offset):
        _status = self.dll.AgM8190_MarkerConfigure(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(MarkerType),
            ViReal64(Amplitude),
            ViReal64(Offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerSendSoftwareTrigger(self, Vi, Channel):
        _status = self.dll.AgM8190_TriggerSendSoftwareTrigger(ViSession(Vi), ViConstString(Channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerSendSoftwareEvent(self, Vi, Channel):
        _status = self.dll.AgM8190_TriggerSendSoftwareEvent(ViSession(Vi), ViConstString(Channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerSendSoftwareEnable(self, Vi, Channel):
        _status = self.dll.AgM8190_TriggerSendSoftwareEnable(ViSession(Vi), ViConstString(Channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerConfigureTrigger(self, Vi, Impedance, Slope, Threshold):
        _status = self.dll.AgM8190_TriggerConfigureTrigger(
            ViSession(Vi), ViInt32(Impedance), ViInt32(Slope), ViReal64(Threshold)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerConfigureEvent(self, Vi, Impedance, Slope, Threshold):
        _status = self.dll.AgM8190_TriggerConfigureEvent(
            ViSession(Vi), ViInt32(Impedance), ViInt32(Slope), ViReal64(Threshold)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerConfigureMode(self, Vi, Channel, ArmMode, GateMode, TriggerMode):
        _status = self.dll.AgM8190_TriggerConfigureMode(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(ArmMode),
            ViInt32(GateMode),
            ViInt32(TriggerMode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusGetFrequencyStable(self, Vi, Channel):
        FrequencyStableState = ViBoolean()
        _status = self.dll.AgM8190_StatusGetFrequencyStable(
            ViSession(Vi), ViConstString(Channel), byref(FrequencyStableState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(FrequencyStableState.value)

    def StatusGetGenerating(self, Vi, Channel):
        Generating = ViBoolean()
        _status = self.dll.AgM8190_StatusGetGenerating(ViSession(Vi), ViConstString(Channel), byref(Generating))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(Generating.value)

    def StatusGetOutputVoltageOK(self, Vi, Channel):
        OutputProtectionState = ViBoolean()
        _status = self.dll.AgM8190_StatusGetOutputVoltageOK(
            ViSession(Vi), ViConstString(Channel), byref(OutputProtectionState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(OutputProtectionState.value)

    def StatusClear(self, Vi):
        _status = self.dll.AgM8190_StatusClear(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusConfigureServiceRequest(self, Vi, Reason):
        _status = self.dll.AgM8190_StatusConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusGetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        _status = self.dll.AgM8190_StatusGetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(RetVal.value)

    def StatusSetRegister(self, Vi, Register, SubRegister, Val):
        _status = self.dll.AgM8190_StatusSetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetStatusAmplitudeClipped(self, Vi, Channel):
        AmplitudeClipped = ViBoolean()
        _status = self.dll.AgM8190_GetStatusAmplitudeClipped(
            ViSession(Vi), ViConstString(Channel), byref(AmplitudeClipped)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(AmplitudeClipped.value)

    def MemoryCopy(self, Vi, SourceBufferSize, Source, DestinationBufferSize, Destination):
        _status = self.dll.AgM8190_MemoryCopy(
            ViSession(Vi),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
            ViInt32(DestinationBufferSize),
            ViConstString(Destination),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MemoryDelete(self, Vi, FileName, DirectoryName):
        _status = self.dll.AgM8190_MemoryDelete(ViSession(Vi), ViConstString(FileName), ViConstString(DirectoryName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MemoryStoreData(self, Vi, FileName, DataBufferSize, Data):
        _status = self.dll.AgM8190_MemoryStoreData(
            ViSession(Vi),
            ViConstString(FileName),
            ViInt32(DataBufferSize),
            ViConstString(Data),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MemoryLoadData(self, Vi, FileName, DataBufferSize):
        Data = ARRAY_ViChar(DataBufferSize)
        DataActualSize = ViInt32()
        _status = self.dll.AgM8190_MemoryLoadData(
            ViSession(Vi),
            ViConstString(FileName),
            ViInt32(DataBufferSize),
            Data,
            byref(DataActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Data = decode(Data)
        DataActualSize = int(DataActualSize.value)
        return Data, DataActualSize

    def MemoryCreateFolder(self, Vi, DirectoryName):
        _status = self.dll.AgM8190_MemoryCreateFolder(ViSession(Vi), ViConstString(DirectoryName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MemoryMove(self, Vi, SourceBufferSize, Source, DestinationBufferSize, Destination):
        _status = self.dll.AgM8190_MemoryMove(
            ViSession(Vi),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
            ViInt32(DestinationBufferSize),
            ViConstString(Destination),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MemoryDeleteFolder(self, Vi, DirectoryName):
        _status = self.dll.AgM8190_MemoryDeleteFolder(ViSession(Vi), ViConstString(DirectoryName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MemoryQueryCatalog(self, Vi, FileEntriesBufferSize):
        UsedMemory = ViInt64()
        AvailableMemory = ViInt64()
        FileEntries = ARRAY_ViChar(FileEntriesBufferSize)
        _status = self.dll.AgM8190_MemoryQueryCatalog(
            ViSession(Vi),
            byref(UsedMemory),
            byref(AvailableMemory),
            ViInt32(FileEntriesBufferSize),
            FileEntries,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        UsedMemory = int(UsedMemory.value)
        AvailableMemory = int(AvailableMemory.value)
        FileEntries = decode(FileEntries)
        return UsedMemory, AvailableMemory, FileEntries
