from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .AgM8190_dllwrap import *


class AgM8190(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = AgM8190_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def GetAttributeViInt64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID)

    def SetAttributeViInt64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ConfigureOutputEnabled(self, ChannelName, Enabled):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureOutputEnabled(self._vi, ChannelName, Enabled)

    def ConfigureOutputMode(self, OutputMode):
        """

        :param OutputMode:
        :type OutputMode:
        """
        return self._dllwrap.ConfigureOutputMode(self._vi, OutputMode)

    def ConfigureRefClockSource(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureRefClockSource(self._vi, Source)

    def ConfigureSampleRate(self, SampleRate):
        """

        :param SampleRate:
        :type SampleRate:
        """
        return self._dllwrap.ConfigureSampleRate(self._vi, SampleRate)

    def QueryArbWfmCapabilities(self):
        """"""
        return self._dllwrap.QueryArbWfmCapabilities(self._vi)

    def ClearArbWaveform(self, Handle):
        """

        :param Handle:
        :type Handle:
        """
        return self._dllwrap.ClearArbWaveform(self._vi, Handle)

    def ConfigureArbWaveform(self, ChannelName, Handle, Gain, Offset):
        """

        :param ChannelName:
        :type ChannelName:
        :param Handle:
        :type Handle:
        :param Gain:
        :type Gain:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ConfigureArbWaveform(self._vi, ChannelName, Handle, Gain, Offset)

    def CreateArbWaveform(self, Size, Data):
        """

        :param Size:
        :type Size:
        :param Data:
        :type Data:
        """
        return self._dllwrap.CreateArbWaveform(self._vi, Size, Data)

    def QueryArbSeqCapabilities(self):
        """"""
        return self._dllwrap.QueryArbSeqCapabilities(self._vi)

    def ClearArbMemory(self):
        """"""
        return self._dllwrap.ClearArbMemory(self._vi)

    def ClearArbSequence(self, Handle):
        """

        :param Handle:
        :type Handle:
        """
        return self._dllwrap.ClearArbSequence(self._vi, Handle)

    def ConfigureArbSequence(self, ChannelName, Handle, Gain, Offset):
        """

        :param ChannelName:
        :type ChannelName:
        :param Handle:
        :type Handle:
        :param Gain:
        :type Gain:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ConfigureArbSequence(self._vi, ChannelName, Handle, Gain, Offset)

    def CreateArbSequence(self, Length, WfmHandle, LoopCount):
        """

        :param Length:
        :type Length:
        :param WfmHandle:
        :type WfmHandle:
        :param LoopCount:
        :type LoopCount:
        """
        return self._dllwrap.CreateArbSequence(self._vi, Length, WfmHandle, LoopCount)

    def ConfigureTriggerSource(self, ChannelName, Source):
        """

        :param ChannelName:
        :type ChannelName:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureTriggerSource(self._vi, ChannelName, Source)

    def ConfigureInternalTriggerRate(self, Rate):
        """

        :param Rate:
        :type Rate:
        """
        return self._dllwrap.ConfigureInternalTriggerRate(self._vi, Rate)

    def AbortGeneration(self):
        """"""
        return self._dllwrap.AbortGeneration(self._vi)

    def InitiateGeneration(self):
        """"""
        return self._dllwrap.InitiateGeneration(self._vi)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def ChannelInitiateGeneration(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChannelInitiateGeneration(self._vi, Channel)

    def ChannelAbortGeneration(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChannelAbortGeneration(self._vi, Channel)

    def OutputConfigureDelay(self, Channel, CoarseDelay, FineDelay, DifferentialOffset):
        """

        :param Channel:
        :type Channel:
        :param CoarseDelay:
        :type CoarseDelay:
        :param FineDelay:
        :type FineDelay:
        :param DifferentialOffset:
        :type DifferentialOffset:
        """
        return self._dllwrap.OutputConfigureDelay(self._vi, Channel, CoarseDelay, FineDelay, DifferentialOffset)

    def GetReferenceClockSourceSupported(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.GetReferenceClockSourceSupported(self._vi, Source)

    def SampleClockGetSampleClockSource(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SampleClockGetSampleClockSource(self._vi, Channel)

    def SampleClockSetSampleClockSource(self, Channel, SampleClockSource):
        """

        :param Channel:
        :type Channel:
        :param SampleClockSource:
        :type SampleClockSource:
        """
        return self._dllwrap.SampleClockSetSampleClockSource(self._vi, Channel, SampleClockSource)

    def SampleClockConfigure(self, Channel, Source, Output):
        """

        :param Channel:
        :type Channel:
        :param Source:
        :type Source:
        :param Output:
        :type Output:
        """
        return self._dllwrap.SampleClockConfigure(self._vi, Channel, Source, Output)

    def ArbitraryClearMemory(self):
        """"""
        return self._dllwrap.ArbitraryClearMemory(self._vi)

    def ArbitraryConfigureAC(self, Channel, Amplitude, Format):
        """

        :param Channel:
        :type Channel:
        :param Amplitude:
        :type Amplitude:
        :param Format:
        :type Format:
        """
        return self._dllwrap.ArbitraryConfigureAC(self._vi, Channel, Amplitude, Format)

    def ArbitraryConfigureDC(self, Channel, Amplitude, Format, Offset):
        """

        :param Channel:
        :type Channel:
        :param Amplitude:
        :type Amplitude:
        :param Format:
        :type Format:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ArbitraryConfigureDC(self._vi, Channel, Amplitude, Format, Offset)

    def ArbitraryConfigureDAC(self, Channel, Amplitude, Format, Offset):
        """

        :param Channel:
        :type Channel:
        :param Amplitude:
        :type Amplitude:
        :param Format:
        :type Format:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ArbitraryConfigureDAC(self._vi, Channel, Amplitude, Format, Offset)

    def WaveformCreateChannelWaveform(self, Channel, DataBufferSize, Data):
        """

        :param Channel:
        :type Channel:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.WaveformCreateChannelWaveform(self._vi, Channel, DataBufferSize, Data)

    def WaveformConfigure(self, Channel, Handle, Amplitude, Offset):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param Amplitude:
        :type Amplitude:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.WaveformConfigure(self._vi, Channel, Handle, Amplitude, Offset)

    def WaveformCreateChannelWaveformInt16(self, Channel, DataBufferSize, Data):
        """

        :param Channel:
        :type Channel:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.WaveformCreateChannelWaveformInt16(self._vi, Channel, DataBufferSize, Data)

    def WaveformCreateChannelWaveformChunkInt16(self, Channel, Handle, Position, Length, DataBufferSize, Data):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param Position:
        :type Position:
        :param Length:
        :type Length:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.WaveformCreateChannelWaveformChunkInt16(
            self._vi, Channel, Handle, Position, Length, DataBufferSize, Data
        )

    def WaveformCreateChannelWaveformChunkInt16WithInit(
        self, Channel, Handle, Position, Length, DataBufferSize, Data, Init
    ):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param Position:
        :type Position:
        :param Length:
        :type Length:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        :param Init:
        :type Init:
        """
        return self._dllwrap.WaveformCreateChannelWaveformChunkInt16WithInit(
            self._vi, Channel, Handle, Position, Length, DataBufferSize, Data, Init
        )

    def WaveformCreateChannelWaveformInt16WriteOnly(self, Channel, DataBufferSize, Data):
        """

        :param Channel:
        :type Channel:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.WaveformCreateChannelWaveformInt16WriteOnly(self._vi, Channel, DataBufferSize, Data)

    def WaveformClear(self, Channel, Handle):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        """
        return self._dllwrap.WaveformClear(self._vi, Channel, Handle)

    def WaveformClearAll(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.WaveformClearAll(self._vi, Channel)

    def WaveformQueryFreeMemory(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.WaveformQueryFreeMemory(self._vi, Channel)

    def WaveformGetComment(self, Channel, Handle, CommentBufferSize):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param CommentBufferSize:
        :type CommentBufferSize:
        """
        return self._dllwrap.WaveformGetComment(self._vi, Channel, Handle, CommentBufferSize)

    def WaveformSetComment(self, Channel, Handle, Comment):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param Comment:
        :type Comment:
        """
        return self._dllwrap.WaveformSetComment(self._vi, Channel, Handle, Comment)

    def WaveformGetName(self, Channel, Handle, NameBufferSize):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.WaveformGetName(self._vi, Channel, Handle, NameBufferSize)

    def WaveformSetName(self, Channel, Handle, Name):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param Name:
        :type Name:
        """
        return self._dllwrap.WaveformSetName(self._vi, Channel, Handle, Name)

    def WaveformImport(self, Channel, Handle, FileName, FileType, PaddingType):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param FileName:
        :type FileName:
        :param FileType:
        :type FileType:
        :param PaddingType:
        :type PaddingType:
        """
        return self._dllwrap.WaveformImport(self._vi, Channel, Handle, FileName, FileType, PaddingType)

    def WaveformImportIQ(
        self,
        Channel,
        Handle,
        FileName,
        FileType,
        DataType,
        MarkerFlagEnabled,
        PaddingType,
    ):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param FileName:
        :type FileName:
        :param FileType:
        :type FileType:
        :param DataType:
        :type DataType:
        :param MarkerFlagEnabled:
        :type MarkerFlagEnabled:
        :param PaddingType:
        :type PaddingType:
        """
        return self._dllwrap.WaveformImportIQ(
            self._vi,
            Channel,
            Handle,
            FileName,
            FileType,
            DataType,
            MarkerFlagEnabled,
            PaddingType,
        )

    def CreateChannelIQWaveformWithInit(self, Channel, Length, IValue, QValue):
        """

        :param Channel:
        :type Channel:
        :param Length:
        :type Length:
        :param IValue:
        :type IValue:
        :param QValue:
        :type QValue:
        """
        return self._dllwrap.CreateChannelIQWaveformWithInit(self._vi, Channel, Length, IValue, QValue)

    def ImportIQToFile(self, FileName, FileType, MarkerFlagEnabled):
        """

        :param FileName:
        :type FileName:
        :param FileType:
        :type FileType:
        :param MarkerFlagEnabled:
        :type MarkerFlagEnabled:
        """
        return self._dllwrap.ImportIQToFile(self._vi, FileName, FileType, MarkerFlagEnabled)

    def SequenceCreate(self, Channel, WfmHandleBufferSize, WfmHandle, LoopCountBufferSize, LoopCount):
        """

        :param Channel:
        :type Channel:
        :param WfmHandleBufferSize:
        :type WfmHandleBufferSize:
        :param WfmHandle:
        :type WfmHandle:
        :param LoopCountBufferSize:
        :type LoopCountBufferSize:
        :param LoopCount:
        :type LoopCount:
        """
        return self._dllwrap.SequenceCreate(
            self._vi,
            Channel,
            WfmHandleBufferSize,
            WfmHandle,
            LoopCountBufferSize,
            LoopCount,
        )

    def SequenceConfigure(self, Channel, Handle, Amplitude, Offset):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param Amplitude:
        :type Amplitude:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.SequenceConfigure(self._vi, Channel, Handle, Amplitude, Offset)

    def SequenceSetData(self, Channel, Handle, Step, DataBufferSize, Data):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param Step:
        :type Step:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.SequenceSetData(self._vi, Channel, Handle, Step, DataBufferSize, Data)

    def SequenceGetData(self, Channel, Handle, Step, Length, DataBufferSize):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param Step:
        :type Step:
        :param Length:
        :type Length:
        :param DataBufferSize:
        :type DataBufferSize:
        """
        return self._dllwrap.SequenceGetData(self._vi, Channel, Handle, Step, Length, DataBufferSize)

    def SequenceClear(self, Channel, Handle):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        """
        return self._dllwrap.SequenceClear(self._vi, Channel, Handle)

    def SequenceClearAll(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SequenceClearAll(self._vi, Channel)

    def SequenceGetLoopCount(self, Channel, Handle):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        """
        return self._dllwrap.SequenceGetLoopCount(self._vi, Channel, Handle)

    def SequenceSetLoopCount(self, Channel, Handle, LoopCount):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param LoopCount:
        :type LoopCount:
        """
        return self._dllwrap.SequenceSetLoopCount(self._vi, Channel, Handle, LoopCount)

    def SequenceGetComment(self, Channel, Handle, CommentBufferSize):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param CommentBufferSize:
        :type CommentBufferSize:
        """
        return self._dllwrap.SequenceGetComment(self._vi, Channel, Handle, CommentBufferSize)

    def SequenceSetComment(self, Channel, Handle, Comment):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param Comment:
        :type Comment:
        """
        return self._dllwrap.SequenceSetComment(self._vi, Channel, Handle, Comment)

    def SequenceGetAdvancementMode(self, Channel, Handle):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        """
        return self._dllwrap.SequenceGetAdvancementMode(self._vi, Channel, Handle)

    def SequenceSetAdvancementMode(self, Channel, Handle, AdvancementMode):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param AdvancementMode:
        :type AdvancementMode:
        """
        return self._dllwrap.SequenceSetAdvancementMode(self._vi, Channel, Handle, AdvancementMode)

    def SequenceGetName(self, Channel, Handle, NameBufferSize):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.SequenceGetName(self._vi, Channel, Handle, NameBufferSize)

    def SequenceSetName(self, Channel, Handle, Name):
        """

        :param Channel:
        :type Channel:
        :param Handle:
        :type Handle:
        :param Name:
        :type Name:
        """
        return self._dllwrap.SequenceSetName(self._vi, Channel, Handle, Name)

    def SequenceQueryFreeMemory(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SequenceQueryFreeMemory(self._vi, Channel)

    def SequenceTableReset(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SequenceTableReset(self._vi, Channel)

    def SequenceTableSetData(self, Channel, TableIndex, DataBufferSize, Data):
        """

        :param Channel:
        :type Channel:
        :param TableIndex:
        :type TableIndex:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.SequenceTableSetData(self._vi, Channel, TableIndex, DataBufferSize, Data)

    def SequenceTableGetData(self, Channel, TableIndex, Length, DataBufferSize):
        """

        :param Channel:
        :type Channel:
        :param TableIndex:
        :type TableIndex:
        :param Length:
        :type Length:
        :param DataBufferSize:
        :type DataBufferSize:
        """
        return self._dllwrap.SequenceTableGetData(self._vi, Channel, TableIndex, Length, DataBufferSize)

    def DigitalUpConversionSetCarrierFrequency(self, Channel, FrequencyIntegral, FrequencyFractional):
        """

        :param Channel:
        :type Channel:
        :param FrequencyIntegral:
        :type FrequencyIntegral:
        :param FrequencyFractional:
        :type FrequencyFractional:
        """
        return self._dllwrap.DigitalUpConversionSetCarrierFrequency(
            self._vi, Channel, FrequencyIntegral, FrequencyFractional
        )

    def DigitalUpConversionGetCarrierFrequency(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.DigitalUpConversionGetCarrierFrequency(self._vi, Channel)

    def DigitalUpConversionGetCarrierFrequencyMin(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.DigitalUpConversionGetCarrierFrequencyMin(self._vi, Channel)

    def DigitalUpConversionGetCarrierFrequencyMax(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.DigitalUpConversionGetCarrierFrequencyMax(self._vi, Channel)

    def ActionSequenceCreate(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ActionSequenceCreate(self._vi, Channel)

    def ActionSequenceAppend(self, Channel, SequenceID, Action, Value1, Value2):
        """

        :param Channel:
        :type Channel:
        :param SequenceID:
        :type SequenceID:
        :param Action:
        :type Action:
        :param Value1:
        :type Value1:
        :param Value2:
        :type Value2:
        """
        return self._dllwrap.ActionSequenceAppend(self._vi, Channel, SequenceID, Action, Value1, Value2)

    def ActionSequenceDelete(self, Channel, SequenceID):
        """

        :param Channel:
        :type Channel:
        :param SequenceID:
        :type SequenceID:
        """
        return self._dllwrap.ActionSequenceDelete(self._vi, Channel, SequenceID)

    def ActionSequenceDeleteAll(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ActionSequenceDeleteAll(self._vi, Channel)

    def AmplitudeTableSetData(self, Channel, TableIndex, DataBufferSize, Data):
        """

        :param Channel:
        :type Channel:
        :param TableIndex:
        :type TableIndex:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.AmplitudeTableSetData(self._vi, Channel, TableIndex, DataBufferSize, Data)

    def AmplitudeTableGetData(self, Channel, TableIndex, Length, DataBufferSize):
        """

        :param Channel:
        :type Channel:
        :param TableIndex:
        :type TableIndex:
        :param Length:
        :type Length:
        :param DataBufferSize:
        :type DataBufferSize:
        """
        return self._dllwrap.AmplitudeTableGetData(self._vi, Channel, TableIndex, Length, DataBufferSize)

    def AmplitudeTableReset(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.AmplitudeTableReset(self._vi, Channel)

    def FrequencyTableSetData(self, Channel, TableIndex, DataBufferSize, Data):
        """

        :param Channel:
        :type Channel:
        :param TableIndex:
        :type TableIndex:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.FrequencyTableSetData(self._vi, Channel, TableIndex, DataBufferSize, Data)

    def FrequencyTableGetData(self, Channel, TableIndex, Length, DataBufferSize):
        """

        :param Channel:
        :type Channel:
        :param TableIndex:
        :type TableIndex:
        :param Length:
        :type Length:
        :param DataBufferSize:
        :type DataBufferSize:
        """
        return self._dllwrap.FrequencyTableGetData(self._vi, Channel, TableIndex, Length, DataBufferSize)

    def FrequencyTableReset(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.FrequencyTableReset(self._vi, Channel)

    def SystemLoadConfiguration(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.SystemLoadConfiguration(self._vi, FileName)

    def SystemStoreConfiguration(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.SystemStoreConfiguration(self._vi, FileName)

    def SystemWaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.SystemWaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def SystemIoRead(self, Size):
        """

        :param Size:
        :type Size:
        """
        return self._dllwrap.SystemIoRead(self._vi, Size)

    def SystemIoWrite(self, Value):
        """

        :param Value:
        :type Value:
        """
        return self._dllwrap.SystemIoWrite(self._vi, Value)

    def SystemPowerOnSelfTest(self, TestMessageBufferSize):
        """

        :param TestMessageBufferSize:
        :type TestMessageBufferSize:
        """
        return self._dllwrap.SystemPowerOnSelfTest(self._vi, TestMessageBufferSize)

    def MarkerConfigure(self, Channel, MarkerType, Amplitude, Offset):
        """

        :param Channel:
        :type Channel:
        :param MarkerType:
        :type MarkerType:
        :param Amplitude:
        :type Amplitude:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.MarkerConfigure(self._vi, Channel, MarkerType, Amplitude, Offset)

    def TriggerSendSoftwareTrigger(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TriggerSendSoftwareTrigger(self._vi, Channel)

    def TriggerSendSoftwareEvent(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TriggerSendSoftwareEvent(self._vi, Channel)

    def TriggerSendSoftwareEnable(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TriggerSendSoftwareEnable(self._vi, Channel)

    def TriggerConfigureTrigger(self, Impedance, Slope, Threshold):
        """

        :param Impedance:
        :type Impedance:
        :param Slope:
        :type Slope:
        :param Threshold:
        :type Threshold:
        """
        return self._dllwrap.TriggerConfigureTrigger(self._vi, Impedance, Slope, Threshold)

    def TriggerConfigureEvent(self, Impedance, Slope, Threshold):
        """

        :param Impedance:
        :type Impedance:
        :param Slope:
        :type Slope:
        :param Threshold:
        :type Threshold:
        """
        return self._dllwrap.TriggerConfigureEvent(self._vi, Impedance, Slope, Threshold)

    def TriggerConfigureMode(self, Channel, ArmMode, GateMode, TriggerMode):
        """

        :param Channel:
        :type Channel:
        :param ArmMode:
        :type ArmMode:
        :param GateMode:
        :type GateMode:
        :param TriggerMode:
        :type TriggerMode:
        """
        return self._dllwrap.TriggerConfigureMode(self._vi, Channel, ArmMode, GateMode, TriggerMode)

    def StatusGetFrequencyStable(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.StatusGetFrequencyStable(self._vi, Channel)

    def StatusGetGenerating(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.StatusGetGenerating(self._vi, Channel)

    def StatusGetOutputVoltageOK(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.StatusGetOutputVoltageOK(self._vi, Channel)

    def StatusClear(self):
        """"""
        return self._dllwrap.StatusClear(self._vi)

    def StatusConfigureServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.StatusConfigureServiceRequest(self._vi, Reason)

    def StatusGetRegister(self, Register, SubRegister):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusGetRegister(self._vi, Register, SubRegister)

    def StatusSetRegister(self, Register, SubRegister, Val):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusSetRegister(self._vi, Register, SubRegister, Val)

    def GetStatusAmplitudeClipped(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.GetStatusAmplitudeClipped(self._vi, Channel)

    def MemoryCopy(self, SourceBufferSize, Source, DestinationBufferSize, Destination):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        :param DestinationBufferSize:
        :type DestinationBufferSize:
        :param Destination:
        :type Destination:
        """
        return self._dllwrap.MemoryCopy(self._vi, SourceBufferSize, Source, DestinationBufferSize, Destination)

    def MemoryDelete(self, FileName, DirectoryName):
        """

        :param FileName:
        :type FileName:
        :param DirectoryName:
        :type DirectoryName:
        """
        return self._dllwrap.MemoryDelete(self._vi, FileName, DirectoryName)

    def MemoryStoreData(self, FileName, DataBufferSize, Data):
        """

        :param FileName:
        :type FileName:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.MemoryStoreData(self._vi, FileName, DataBufferSize, Data)

    def MemoryLoadData(self, FileName, DataBufferSize):
        """

        :param FileName:
        :type FileName:
        :param DataBufferSize:
        :type DataBufferSize:
        """
        return self._dllwrap.MemoryLoadData(self._vi, FileName, DataBufferSize)

    def MemoryCreateFolder(self, DirectoryName):
        """

        :param DirectoryName:
        :type DirectoryName:
        """
        return self._dllwrap.MemoryCreateFolder(self._vi, DirectoryName)

    def MemoryMove(self, SourceBufferSize, Source, DestinationBufferSize, Destination):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        :param DestinationBufferSize:
        :type DestinationBufferSize:
        :param Destination:
        :type Destination:
        """
        return self._dllwrap.MemoryMove(self._vi, SourceBufferSize, Source, DestinationBufferSize, Destination)

    def MemoryDeleteFolder(self, DirectoryName):
        """

        :param DirectoryName:
        :type DirectoryName:
        """
        return self._dllwrap.MemoryDeleteFolder(self._vi, DirectoryName)

    def MemoryQueryCatalog(self, FileEntriesBufferSize):
        """

        :param FileEntriesBufferSize:
        :type FileEntriesBufferSize:
        """
        return self._dllwrap.MemoryQueryCatalog(self._vi, FileEntriesBufferSize)
