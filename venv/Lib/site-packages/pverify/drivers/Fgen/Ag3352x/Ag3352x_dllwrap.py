from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import Ag3352x_const as const
from .Ag3352x_const import *


class Ag3352x_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("Ag3352x.dll", "Ag3352x_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "Ag3352x"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.Ag3352x_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.Ag3352x_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.Ag3352x_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.Ag3352x_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.Ag3352x_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.Ag3352x_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.Ag3352x_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.Ag3352x_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.Ag3352x_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.Ag3352x_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.Ag3352x_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.Ag3352x_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.Ag3352x_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.Ag3352x_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag3352x_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag3352x_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag3352x_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag3352x_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag3352x_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOperationMode(self, Vi, ChannelName, OperationMode):
        status = self.dll.Ag3352x_ConfigureOperationMode(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(OperationMode)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputEnabled(self, Vi, ChannelName, Enabled):
        status = self.dll.Ag3352x_ConfigureOutputEnabled(ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputImpedance(self, Vi, ChannelName, Impedance):
        status = self.dll.Ag3352x_ConfigureOutputImpedance(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(Impedance)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputMode(self, Vi, OutputMode):
        status = self.dll.Ag3352x_ConfigureOutputMode(ViSession(Vi), ViInt32(OutputMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefClockSource(self, Vi, Source):
        status = self.dll.Ag3352x_ConfigureRefClockSource(ViSession(Vi), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSampleRate(self, Vi, SampleRate):
        status = self.dll.Ag3352x_ConfigureSampleRate(ViSession(Vi), ViReal64(SampleRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryArbWfmCapabilities(self, Vi):
        MaxNumWfms = ViInt32()
        WfmQuantum = ViInt32()
        MinWfmSize = ViInt32()
        MaxWfmSize = ViInt32()
        status = self.dll.Ag3352x_QueryArbWfmCapabilities(
            ViSession(Vi),
            byref(MaxNumWfms),
            byref(WfmQuantum),
            byref(MinWfmSize),
            byref(MaxWfmSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MaxNumWfms = int(MaxNumWfms.value)
        WfmQuantum = int(WfmQuantum.value)
        MinWfmSize = int(MinWfmSize.value)
        MaxWfmSize = int(MaxWfmSize.value)
        return MaxNumWfms, WfmQuantum, MinWfmSize, MaxWfmSize

    def ClearArbWaveform(self, Vi, Handle):
        status = self.dll.Ag3352x_ClearArbWaveform(ViSession(Vi), ViInt32(Handle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureArbWaveform(self, Vi, ChannelName, Handle, Gain, Offset):
        status = self.dll.Ag3352x_ConfigureArbWaveform(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(Handle),
            ViReal64(Gain),
            ViReal64(Offset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CreateArbWaveform(self, Vi, Size, Data):
        _Data = (ViReal64 * len(Data))(*Data)
        Handle = ViInt32()
        status = self.dll.Ag3352x_CreateArbWaveform(ViSession(Vi), ViInt32(Size), _Data, byref(Handle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Handle.value)

    def ConfigureArbFrequency(self, Vi, ChannelName, Frequency):
        status = self.dll.Ag3352x_ConfigureArbFrequency(ViSession(Vi), ViConstString(ChannelName), ViReal64(Frequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryArbSeqCapabilities(self, Vi):
        MaxNumSeqs = ViInt32()
        MinSeqLength = ViInt32()
        MaxSeqLength = ViInt32()
        MaxLoopCount = ViInt32()
        status = self.dll.Ag3352x_QueryArbSeqCapabilities(
            ViSession(Vi),
            byref(MaxNumSeqs),
            byref(MinSeqLength),
            byref(MaxSeqLength),
            byref(MaxLoopCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MaxNumSeqs = int(MaxNumSeqs.value)
        MinSeqLength = int(MinSeqLength.value)
        MaxSeqLength = int(MaxSeqLength.value)
        MaxLoopCount = int(MaxLoopCount.value)
        return MaxNumSeqs, MinSeqLength, MaxSeqLength, MaxLoopCount

    def ClearArbMemory(self, Vi):
        status = self.dll.Ag3352x_ClearArbMemory(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearArbSequence(self, Vi, Handle):
        status = self.dll.Ag3352x_ClearArbSequence(ViSession(Vi), ViInt32(Handle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureArbSequence(self, Vi, ChannelName, Handle, Gain, Offset):
        status = self.dll.Ag3352x_ConfigureArbSequence(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(Handle),
            ViReal64(Gain),
            ViReal64(Offset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CreateArbSequence(self, Vi, Length, WfmHandle, LoopCount):
        _WfmHandle = (ViInt32 * len(WfmHandle))(*WfmHandle)
        _LoopCount = (ViInt32 * len(LoopCount))(*LoopCount)
        Handle = ViInt32()
        status = self.dll.Ag3352x_CreateArbSequence(
            ViSession(Vi), ViInt32(Length), _WfmHandle, _LoopCount, byref(Handle)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Handle.value)

    def ConfigureTriggerSource(self, Vi, ChannelName, Source):
        status = self.dll.Ag3352x_ConfigureTriggerSource(ViSession(Vi), ViConstString(ChannelName), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInternalTriggerRate(self, Vi, Rate):
        status = self.dll.Ag3352x_ConfigureInternalTriggerRate(ViSession(Vi), ViReal64(Rate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureBurstCount(self, Vi, ChannelName, Count):
        status = self.dll.Ag3352x_ConfigureBurstCount(ViSession(Vi), ViConstString(ChannelName), ViInt32(Count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAMEnabled(self, Vi, ChannelName, Enabled):
        status = self.dll.Ag3352x_ConfigureAMEnabled(ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAMSource(self, Vi, ChannelName, Source):
        status = self.dll.Ag3352x_ConfigureAMSource(ViSession(Vi), ViConstString(ChannelName), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAMInternal(self, Vi, Depth, Waveform, Frequency):
        status = self.dll.Ag3352x_ConfigureAMInternal(
            ViSession(Vi), ViReal64(Depth), ViInt32(Waveform), ViReal64(Frequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMEnabled(self, Vi, ChannelName, Enabled):
        status = self.dll.Ag3352x_ConfigureFMEnabled(ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMSource(self, Vi, ChannelName, Source):
        status = self.dll.Ag3352x_ConfigureFMSource(ViSession(Vi), ViConstString(ChannelName), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMInternal(self, Vi, Deviation, Waveform, Frequency):
        status = self.dll.Ag3352x_ConfigureFMInternal(
            ViSession(Vi), ViReal64(Deviation), ViInt32(Waveform), ViReal64(Frequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureStandardWaveform(self, Vi, ChannelName, Waveform, Amplitude, DCOffset, Frequency, StartPhase):
        status = self.dll.Ag3352x_ConfigureStandardWaveform(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(Waveform),
            ViReal64(Amplitude),
            ViReal64(DCOffset),
            ViReal64(Frequency),
            ViReal64(StartPhase),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AbortGeneration(self, Vi):
        status = self.dll.Ag3352x_AbortGeneration(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitiateGeneration(self, Vi):
        status = self.dll.Ag3352x_InitiateGeneration(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SendSoftwareTrigger(self, Vi):
        status = self.dll.Ag3352x_SendSoftwareTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelOutputSetLoadInfinity(self, Vi, RepCapIdentifier):
        status = self.dll.Ag3352x_ChannelOutputSetLoadInfinity(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelOutputListSetFrequencyList(self, Vi, RepCapIdentifier, FrequencyBufferSize, Frequency):
        _Frequency = (ViReal64 * len(Frequency))(*Frequency)
        status = self.dll.Ag3352x_ChannelOutputListSetFrequencyList(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(FrequencyBufferSize),
            _Frequency,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelOutputListGetFreqencyList(self, Vi, RepCapIdentifier, FreqListBufferSize):
        FreqList = ARRAY_ViReal64(1024)
        FreqListActualSize = ViInt32()
        status = self.dll.Ag3352x_ChannelOutputListGetFreqencyList(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(FreqListBufferSize),
            FreqList,
            byref(FreqListActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        FreqList = list(FreqList)
        FreqListActualSize = int(FreqListActualSize.value)
        return FreqList, FreqListActualSize

    def ChannelOutputVoltageAutoRangingOnce(self, Vi, RepCapIdentifier):
        status = self.dll.Ag3352x_ChannelOutputVoltageAutoRangingOnce(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelTriggerSoftwareTrigger(self, Vi, RepCapIdentifier):
        status = self.dll.Ag3352x_ChannelTriggerSoftwareTrigger(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelTriggerAbort(self, Vi, RepCapIdentifier):
        status = self.dll.Ag3352x_ChannelTriggerAbort(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelTrigger(self, Vi, RepCapIdentifier):
        status = self.dll.Ag3352x_ChannelTrigger(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelTriggerInitiate(self, Vi, RepCapIdentifier):
        status = self.dll.Ag3352x_ChannelTriggerInitiate(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetTriggerLevelMax(self, Vi, Channel):
        status = self.dll.Ag3352x_SetTriggerLevelMax(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetTriggerLevelMin(self, Vi, Channel):
        Val = ViReal64()
        status = self.dll.Ag3352x_GetTriggerLevelMin(ViSession(Vi), ViConstString(Channel), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ChannelApplySetDC(self, Vi, RepCapIdentifier, Offset):
        status = self.dll.Ag3352x_ChannelApplySetDC(ViSession(Vi), ViConstString(RepCapIdentifier), ViReal64(Offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelApplySetNoise(self, Vi, RepCapIdentifier, Amplitude, Offset):
        status = self.dll.Ag3352x_ChannelApplySetNoise(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(Amplitude),
            ViReal64(Offset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelApplySetPulse(self, Vi, RepCapIdentifier, Frequency, Amplitude, Offset):
        status = self.dll.Ag3352x_ChannelApplySetPulse(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViReal64(Offset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelApplySetRamp(self, Vi, RepCapIdentifier, Frequency, Amplitude, Offset):
        status = self.dll.Ag3352x_ChannelApplySetRamp(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViReal64(Offset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelApplySetSinusoid(self, Vi, RepCapIdentifier, Frequency, Amplitude, Offset):
        status = self.dll.Ag3352x_ChannelApplySetSinusoid(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViReal64(Offset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelApplySetSquare(self, Vi, RepCapIdentifier, Frequency, Amplitude, Offset):
        status = self.dll.Ag3352x_ChannelApplySetSquare(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViReal64(Offset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelApplySetArbWaveform(self, Vi, RepCapIdentifier, SampleRate, Amplitude, Offset):
        status = self.dll.Ag3352x_ChannelApplySetArbWaveform(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(SampleRate),
            ViReal64(Amplitude),
            ViReal64(Offset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelApplySetPRBS(self, Vi, RepCapIdentifier, Frequency, Amplitude, Offset):
        status = self.dll.Ag3352x_ChannelApplySetPRBS(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViReal64(Offset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelApplyQueryOutputConfiguration(self, Vi, RepCapIdentifier):
        Function = ViInt32()
        Frequency = ViReal64()
        Amplitude = ViReal64()
        Offset = ViReal64()
        status = self.dll.Ag3352x_ChannelApplyQueryOutputConfiguration(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            byref(Function),
            byref(Frequency),
            byref(Amplitude),
            byref(Offset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Function = int(Function.value)
        Frequency = float(Frequency.value)
        Amplitude = float(Amplitude.value)
        Offset = float(Offset.value)
        return Function, Frequency, Amplitude, Offset

    def ChannelApplySetTriangle(self, Vi, Channel, Frequency, Amplitude, Offset):
        status = self.dll.Ag3352x_ChannelApplySetTriangle(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViReal64(Offset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelBurstSetNumberOfCyclesInfinity(self, Vi, RepCapIdentifier):
        status = self.dll.Ag3352x_ChannelBurstSetNumberOfCyclesInfinity(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelPhaseLockSetReference(self, Vi, RepCapIdentifier):
        status = self.dll.Ag3352x_ChannelPhaseLockSetReference(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelPhaseLockSynchronizeChannels(self, Vi, RepCapIdentifier):
        status = self.dll.Ag3352x_ChannelPhaseLockSynchronizeChannels(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPhaseMax(self, Vi, Channel):
        status = self.dll.Ag3352x_SetPhaseMax(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPhaseMax(self, Vi, Channel):
        Val = ViReal64()
        status = self.dll.Ag3352x_GetPhaseMax(ViSession(Vi), ViConstString(Channel), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def GetPhaseMin(self, Vi, Channel):
        Val = ViReal64()
        status = self.dll.Ag3352x_GetPhaseMin(ViSession(Vi), ViConstString(Channel), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def SetPhaseMin(self, Vi, Channel):
        status = self.dll.Ag3352x_SetPhaseMin(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelOutputFunctionArbitraryWaveformSelectArbWaveform(self, Vi, RepCapIdentifier, Name):
        status = self.dll.Ag3352x_ChannelOutputFunctionArbitraryWaveformSelectArbWaveform(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViConstString(Name)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelOutputFunctionArbitraryWaveformClear(self, Vi, RepCapIdentifier):
        status = self.dll.Ag3352x_ChannelOutputFunctionArbitraryWaveformClear(
            ViSession(Vi), ViConstString(RepCapIdentifier)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelOutputFunctionArbitraryWaveformLoadArbWaveform(self, Vi, RepCapIdentifier, Name, DataBufferSize, Data):
        _Data = (ViReal64 * len(Data))(*Data)
        DataActualSize = ViInt32()
        status = self.dll.Ag3352x_ChannelOutputFunctionArbitraryWaveformLoadArbWaveform(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViConstString(Name),
            ViInt32(DataBufferSize),
            _Data,
            byref(DataActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(DataActualSize.value)

    def ChannelOutputFunctionArbitraryWaveformOpenArbWaveform(self, Vi, RepCapIdentifier, FileName):
        status = self.dll.Ag3352x_ChannelOutputFunctionArbitraryWaveformOpenArbWaveform(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViConstString(FileName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelOutputFunctionArbitraryWaveformStoreArbWaveform(self, Vi, RepCapIdentifier, FileName):
        status = self.dll.Ag3352x_ChannelOutputFunctionArbitraryWaveformStoreArbWaveform(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViConstString(FileName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelOutputFunctionArbitraryWaveformCreateArbSequence(
        self,
        Vi,
        repCapIdentifier,
        SequenceName,
        DataBufferSize,
        ArbName,
        RepeatCount,
        PlayControl,
        MarkerMode,
        MarkerPoint,
    ):
        _RepeatCount = (ViInt32 * len(RepeatCount))(*RepeatCount)
        _MarkerPoint = (ViInt32 * len(MarkerPoint))(*MarkerPoint)
        status = self.dll.Ag3352x_ChannelOutputFunctionArbitraryWaveformCreateArbSequence(
            ViSession(Vi),
            ViConstString(repCapIdentifier),
            ViConstString(SequenceName),
            ViInt32(DataBufferSize),
            ViConstString(ArbName),
            _RepeatCount,
            ViConstString(PlayControl),
            ViConstString(MarkerMode),
            _MarkerPoint,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelOutputFunctionArbitraryWaveformGetCatalog(self, Vi, repCapIdentifier, retValBufferSize):
        retVal = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_ChannelOutputFunctionArbitraryWaveformGetCatalog(
            ViSession(Vi),
            ViConstString(repCapIdentifier),
            ViInt32(retValBufferSize),
            retVal,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(retVal)

    def ArbitraryWaveformLoadDualArbWaveform(self, Vi, Channel, Format, Name, DataBufferSize, Data):
        _Data = (ViReal32 * len(Data))(*Data)
        status = self.dll.Ag3352x_ArbitraryWaveformLoadDualArbWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Format),
            ViConstString(Name),
            ViInt32(DataBufferSize),
            _Data,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ArbitraryWaveformSynchronizeArbs(self, Vi, Channel):
        status = self.dll.Ag3352x_ArbitraryWaveformSynchronizeArbs(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ArbitraryWaveformLoadArbWaveformDAC(self, Vi, Channel, Name, DataBufferSize, Data):
        _Data = (ViInt16 * len(Data))(*Data)
        status = self.dll.Ag3352x_ArbitraryWaveformLoadArbWaveformDAC(
            ViSession(Vi),
            ViConstString(Channel),
            ViConstString(Name),
            ViInt32(DataBufferSize),
            _Data,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ArbitraryWaveformLoadDualArbWaveformDAC(self, Vi, Channel, Format, Name, DataBufferSize, Data):
        _Data = (ViInt16 * len(Data))(*Data)
        status = self.dll.Ag3352x_ArbitraryWaveformLoadDualArbWaveformDAC(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Format),
            ViConstString(Name),
            ViInt32(DataBufferSize),
            _Data,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ArbitraryWaveformSetArbFrequencyMin(self, Vi, Channel):
        status = self.dll.Ag3352x_ArbitraryWaveformSetArbFrequencyMin(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ArbitraryWaveformGetArbFrequencyMin(self, Vi, Channel):
        Val = ViReal64()
        status = self.dll.Ag3352x_ArbitraryWaveformGetArbFrequencyMin(ViSession(Vi), ViConstString(Channel), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ArbitraryWaveformGetArbPeriodMax(self, Vi, Channel):
        Val = ViReal64()
        status = self.dll.Ag3352x_ArbitraryWaveformGetArbPeriodMax(ViSession(Vi), ViConstString(Channel), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ArbitraryWaveformSetArbPeriodMax(self, Vi, Channel):
        status = self.dll.Ag3352x_ArbitraryWaveformSetArbPeriodMax(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ArbitraryWaveformSetArbPhaseMin(self, Vi, Channel):
        status = self.dll.Ag3352x_ArbitraryWaveformSetArbPhaseMin(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ArbitraryWaveformGetArbPhaseMax(self, Vi, Channel):
        Val = ViReal64()
        status = self.dll.Ag3352x_ArbitraryWaveformGetArbPhaseMax(ViSession(Vi), ViConstString(Channel), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ArbitraryWaveformGetArbPeriodMin(self, Vi, Channel):
        Val = ViReal64()
        status = self.dll.Ag3352x_ArbitraryWaveformGetArbPeriodMin(ViSession(Vi), ViConstString(Channel), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ArbitraryWaveformGetArbFrequencyMax(self, Vi, Channel):
        Val = ViReal64()
        status = self.dll.Ag3352x_ArbitraryWaveformGetArbFrequencyMax(ViSession(Vi), ViConstString(Channel), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def LoadArbWaveformBinary(self, Vi, Channel, Name, DataBufferSize):
        _Data = ViReal32 * len(DataBufferSize)
        status = self.dll.Ag3352x_LoadArbWaveformBinary(
            ViSession(Vi),
            ViConstString(Channel),
            ViConstString(Name),
            ViInt32(DataBufferSize),
            _Data,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelOutputFunctionArbitraryWaveformAttributeGetAverage(self, Vi, RepCapIdentifier, ArbName):
        RetVal = ViReal64()
        status = self.dll.Ag3352x_ChannelOutputFunctionArbitraryWaveformAttributeGetAverage(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViConstString(ArbName),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ChannelOutputFunctionArbitraryWaveformAttributeGetCrestFactor(self, Vi, RepCapIdentifier, ArbName):
        RetVal = ViReal64()
        status = self.dll.Ag3352x_ChannelOutputFunctionArbitraryWaveformAttributeGetCrestFactor(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViConstString(ArbName),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ChannelOutputFunctionArbitraryWaveformAttributeGetDataPoints(self, Vi, RepCapIdentifier, ArbName):
        RetVal = ViInt32()
        status = self.dll.Ag3352x_ChannelOutputFunctionArbitraryWaveformAttributeGetDataPoints(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViConstString(ArbName),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def ChannelOutputFunctionArbitraryWaveformAttributeGetPeakToPeak(self, Vi, RepCapIdentifier, ArbName):
        RetVal = ViReal64()
        status = self.dll.Ag3352x_ChannelOutputFunctionArbitraryWaveformAttributeGetPeakToPeak(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViConstString(ArbName),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def SetPeriodMin(self, Vi, Channel):
        status = self.dll.Ag3352x_SetPeriodMin(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPhaseMax2(self, Vi, Channel):
        status = self.dll.Ag3352x_SetPhaseMax2(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ArbitraryWaveformGetArbGetPhaseMin(self, Vi, Channel):
        Val = ViReal64()
        status = self.dll.Ag3352x_ArbitraryWaveformGetArbGetPhaseMin(ViSession(Vi), ViConstString(Channel), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def SetFrequencyMax(self, Vi, Channel):
        status = self.dll.Ag3352x_SetFrequencyMax(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetTriggerLevelMin(self, Vi, Channel):
        status = self.dll.Ag3352x_SetTriggerLevelMin(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetTriggerLevelMax(self, Vi, Channel):
        Val = ViReal64()
        status = self.dll.Ag3352x_GetTriggerLevelMax(ViSession(Vi), ViConstString(Channel), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViByte(1024)
        ReturnCount = ViInt64()
        status = self.dll.Ag3352x_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def viWrite(self, Vi, Count, Buffer):
        _Buffer = (ViByte * len(Buffer))(*Buffer)
        ReturnCount = ViInt64()
        status = self.dll.Ag3352x_viWrite(ViSession(Vi), ViInt64(Count), _Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ReturnCount.value)

    def SystemWriteString(self, Vi, Data):
        status = self.dll.Ag3352x_SystemWriteString(ViSession(Vi), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayTextClear(self, Vi):
        status = self.dll.Ag3352x_DisplayTextClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayHCopyGetScreenDump(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViByte(1024)
        RetValActualSize = ViInt32()
        status = self.dll.Ag3352x_DisplayHCopyGetScreenDump(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def StateStorageDelete(self, Vi, State):
        status = self.dll.Ag3352x_StateStorageDelete(ViSession(Vi), ViInt32(State))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StateStorageSave(self, Vi, State):
        status = self.dll.Ag3352x_StateStorageSave(ViSession(Vi), ViInt32(State))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StateStorageRecall(self, Vi, State):
        status = self.dll.Ag3352x_StateStorageRecall(ViSession(Vi), ViInt32(State))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StateStorageGetName(self, Vi, State, RetValBufferSize):
        RetVal = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_StateStorageGetName(ViSession(Vi), ViInt32(State), ViInt32(RetValBufferSize), RetVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def StateStorageSetName(self, Vi, State, Val):
        status = self.dll.Ag3352x_StateStorageSetName(ViSession(Vi), ViInt32(State), ViConstString(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StateStorageGetValid(self, Vi, Location):
        RetVal = ViBoolean()
        status = self.dll.Ag3352x_StateStorageGetValid(ViSession(Vi), ViInt32(Location), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def StateStorageGetCatalog(self, Vi, retValBufferSize):
        retVal = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_StateStorageGetCatalog(ViSession(Vi), ViInt32(retValBufferSize), retVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(retVal)

    def MemoryDelete(self, Vi, FileName):
        status = self.dll.Ag3352x_MemoryDelete(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryLoad(self, Vi, FileName):
        status = self.dll.Ag3352x_MemoryLoad(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryMakeDirectory(self, Vi, DirectoryName):
        status = self.dll.Ag3352x_MemoryMakeDirectory(ViSession(Vi), ViConstString(DirectoryName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryMoveFiles(self, Vi, SourceFile, DestinationFile):
        status = self.dll.Ag3352x_MemoryMoveFiles(
            ViSession(Vi), ViConstString(SourceFile), ViConstString(DestinationFile)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryStore(self, Vi, FileName):
        status = self.dll.Ag3352x_MemoryStore(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryLoadState(self, Vi, FileName):
        status = self.dll.Ag3352x_MemoryLoadState(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryRemoveFolder(self, Vi, Foldername):
        status = self.dll.Ag3352x_MemoryRemoveFolder(ViSession(Vi), ViConstString(Foldername))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryCopyFiles(self, Vi, SourceFile, DestinationFile):
        status = self.dll.Ag3352x_MemoryCopyFiles(
            ViSession(Vi), ViConstString(SourceFile), ViConstString(DestinationFile)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryCopySeqFiles(self, Vi, Source, Destination):
        status = self.dll.Ag3352x_MemoryCopySeqFiles(ViSession(Vi), ViConstString(Source), ViConstString(Destination))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryStoreState(self, Vi, FileName):
        status = self.dll.Ag3352x_MemoryStoreState(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryUploadFile(self, Vi, Source, Destination):
        status = self.dll.Ag3352x_MemoryUploadFile(ViSession(Vi), ViConstString(Source), ViConstString(Destination))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryLoadList(self, Vi, FileName):
        status = self.dll.Ag3352x_MemoryLoadList(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryStoreList(self, Vi, FileName):
        status = self.dll.Ag3352x_MemoryStoreList(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryDownloadFile(self, Vi, Source, Destination):
        status = self.dll.Ag3352x_MemoryDownloadFile(ViSession(Vi), ViConstString(Source), ViConstString(Destination))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryGetCatalog(self, Vi, FolderName, RetValBufferSize):
        MemoryUsed = ViReal64()
        MemoryFree = ViReal64()
        RetVal = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_MemoryGetCatalog(
            ViSession(Vi),
            ViConstString(FolderName),
            byref(MemoryUsed),
            byref(MemoryFree),
            ViInt32(RetValBufferSize),
            RetVal,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MemoryUsed = float(MemoryUsed.value)
        MemoryFree = float(MemoryFree.value)
        RetVal = decode(RetVal)
        return MemoryUsed, MemoryFree, RetVal

    def MemoryGetCatalogDataFiles(self, Vi, FolderName, RetValBufferSize):
        MemoryUsed = ViReal64()
        MemoryFree = ViReal64()
        RetVal = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_MemoryGetCatalogDataFiles(
            ViSession(Vi),
            ViConstString(FolderName),
            byref(MemoryUsed),
            byref(MemoryFree),
            ViInt32(RetValBufferSize),
            RetVal,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MemoryUsed = float(MemoryUsed.value)
        MemoryFree = float(MemoryFree.value)
        RetVal = decode(RetVal)
        return MemoryUsed, MemoryFree, RetVal

    def MemoryGetCatalogStateFiles(self, Vi, FolderName, RetValBufferSize):
        MemoryUsed = ViReal64()
        MemoryFree = ViReal64()
        RetVal = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_MemoryGetCatalogStateFiles(
            ViSession(Vi),
            ViConstString(FolderName),
            byref(MemoryUsed),
            byref(MemoryFree),
            ViInt32(RetValBufferSize),
            RetVal,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MemoryUsed = float(MemoryUsed.value)
        MemoryFree = float(MemoryFree.value)
        RetVal = decode(RetVal)
        return MemoryUsed, MemoryFree, RetVal

    def StateCatalog(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(1024)
        status = self.dll.Ag3352x_StateCatalog(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def SetSecureState(self, Vi, Mode, Code):
        status = self.dll.Ag3352x_SetSecureState(ViSession(Vi), ViBoolean(Mode), ViConstString(Code))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Calibrate(self, Vi):
        RetVal = ViInt32()
        status = self.dll.Ag3352x_Calibrate(ViSession(Vi), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatusPreset(self, Vi):
        status = self.dll.Ag3352x_StatusPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusConfigureServiceRequest(self, Vi, Reason):
        status = self.dll.Ag3352x_StatusConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusClear(self, Vi):
        status = self.dll.Ag3352x_StatusClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusGetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.Ag3352x_StatusGetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatusSetRegister(self, Vi, Register, SubRegister, Val):
        status = self.dll.Ag3352x_StatusSetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusGetSerialPoll(self, Vi):
        RetVal = ViInt32()
        status = self.dll.Ag3352x_StatusGetSerialPoll(ViSession(Vi), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def DisableLocalControls(self, Vi):
        status = self.dll.Ag3352x_DisableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def EnableLocalControls(self, Vi):
        status = self.dll.Ag3352x_EnableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetState(self, Vi, DataBufferSize):
        Data = ARRAY_ViByte(1024)
        DataActualSize = ViInt32()
        status = self.dll.Ag3352x_GetState(ViSession(Vi), ViInt32(DataBufferSize), Data, byref(DataActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DataActualSize = int(DataActualSize.value)
        return Data, DataActualSize

    def PutState(self, Vi, DataBufferSize, Data):
        _Data = (ViByte * len(Data))(*Data)
        status = self.dll.Ag3352x_PutState(ViSession(Vi), ViInt32(DataBufferSize), _Data)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def WaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        status = self.dll.Ag3352x_WaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IoRead(self, Vi, ValueBufferSize):
        Value = ARRAY_ViChar(1024)
        ActualSize = ViInt32()
        status = self.dll.Ag3352x_IoRead(ViSession(Vi), ViInt32(ValueBufferSize), Value, byref(ActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Value = decode(Value)
        ActualSize = int(ActualSize.value)
        return Value, ActualSize

    def IoWrite(self, Vi, Value):
        status = self.dll.Ag3352x_IoWrite(ViSession(Vi), ViConstString(Value))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
