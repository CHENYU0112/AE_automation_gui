from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .Ag3352x_dllwrap import *


class Ag3352x(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = Ag3352x_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ConfigureOperationMode(self, ChannelName, OperationMode):
        """

        :param ChannelName:
        :type ChannelName:
        :param OperationMode:
        :type OperationMode:
        """
        return self._dllwrap.ConfigureOperationMode(self._vi, ChannelName, OperationMode)

    def ConfigureOutputEnabled(self, ChannelName, Enabled):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureOutputEnabled(self._vi, ChannelName, Enabled)

    def ConfigureOutputImpedance(self, ChannelName, Impedance):
        """

        :param ChannelName:
        :type ChannelName:
        :param Impedance:
        :type Impedance:
        """
        return self._dllwrap.ConfigureOutputImpedance(self._vi, ChannelName, Impedance)

    def ConfigureOutputMode(self, OutputMode):
        """

        :param OutputMode:
        :type OutputMode:
        """
        return self._dllwrap.ConfigureOutputMode(self._vi, OutputMode)

    def ConfigureRefClockSource(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureRefClockSource(self._vi, Source)

    def ConfigureSampleRate(self, SampleRate):
        """

        :param SampleRate:
        :type SampleRate:
        """
        return self._dllwrap.ConfigureSampleRate(self._vi, SampleRate)

    def QueryArbWfmCapabilities(self):
        """"""
        return self._dllwrap.QueryArbWfmCapabilities(self._vi)

    def ClearArbWaveform(self, Handle):
        """

        :param Handle:
        :type Handle:
        """
        return self._dllwrap.ClearArbWaveform(self._vi, Handle)

    def ConfigureArbWaveform(self, ChannelName, Handle, Gain, Offset):
        """

        :param ChannelName:
        :type ChannelName:
        :param Handle:
        :type Handle:
        :param Gain:
        :type Gain:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ConfigureArbWaveform(self._vi, ChannelName, Handle, Gain, Offset)

    def CreateArbWaveform(self, Size, Data):
        """

        :param Size:
        :type Size:
        :param Data:
        :type Data:
        """
        return self._dllwrap.CreateArbWaveform(self._vi, Size, Data)

    def ConfigureArbFrequency(self, ChannelName, Frequency):
        """

        :param ChannelName:
        :type ChannelName:
        :param Frequency:
        :type Frequency:
        """
        return self._dllwrap.ConfigureArbFrequency(self._vi, ChannelName, Frequency)

    def QueryArbSeqCapabilities(self):
        """"""
        return self._dllwrap.QueryArbSeqCapabilities(self._vi)

    def ClearArbMemory(self):
        """"""
        return self._dllwrap.ClearArbMemory(self._vi)

    def ClearArbSequence(self, Handle):
        """

        :param Handle:
        :type Handle:
        """
        return self._dllwrap.ClearArbSequence(self._vi, Handle)

    def ConfigureArbSequence(self, ChannelName, Handle, Gain, Offset):
        """

        :param ChannelName:
        :type ChannelName:
        :param Handle:
        :type Handle:
        :param Gain:
        :type Gain:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ConfigureArbSequence(self._vi, ChannelName, Handle, Gain, Offset)

    def CreateArbSequence(self, Length, WfmHandle, LoopCount):
        """

        :param Length:
        :type Length:
        :param WfmHandle:
        :type WfmHandle:
        :param LoopCount:
        :type LoopCount:
        """
        return self._dllwrap.CreateArbSequence(self._vi, Length, WfmHandle, LoopCount)

    def ConfigureTriggerSource(self, ChannelName, Source):
        """

        :param ChannelName:
        :type ChannelName:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureTriggerSource(self._vi, ChannelName, Source)

    def ConfigureInternalTriggerRate(self, Rate):
        """

        :param Rate:
        :type Rate:
        """
        return self._dllwrap.ConfigureInternalTriggerRate(self._vi, Rate)

    def ConfigureBurstCount(self, ChannelName, Count):
        """

        :param ChannelName:
        :type ChannelName:
        :param Count:
        :type Count:
        """
        return self._dllwrap.ConfigureBurstCount(self._vi, ChannelName, Count)

    def ConfigureAMEnabled(self, ChannelName, Enabled):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureAMEnabled(self._vi, ChannelName, Enabled)

    def ConfigureAMSource(self, ChannelName, Source):
        """

        :param ChannelName:
        :type ChannelName:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureAMSource(self._vi, ChannelName, Source)

    def ConfigureAMInternal(self, Depth, Waveform, Frequency):
        """

        :param Depth:
        :type Depth:
        :param Waveform:
        :type Waveform:
        :param Frequency:
        :type Frequency:
        """
        return self._dllwrap.ConfigureAMInternal(self._vi, Depth, Waveform, Frequency)

    def ConfigureFMEnabled(self, ChannelName, Enabled):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureFMEnabled(self._vi, ChannelName, Enabled)

    def ConfigureFMSource(self, ChannelName, Source):
        """

        :param ChannelName:
        :type ChannelName:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureFMSource(self._vi, ChannelName, Source)

    def ConfigureFMInternal(self, Deviation, Waveform, Frequency):
        """

        :param Deviation:
        :type Deviation:
        :param Waveform:
        :type Waveform:
        :param Frequency:
        :type Frequency:
        """
        return self._dllwrap.ConfigureFMInternal(self._vi, Deviation, Waveform, Frequency)

    def ConfigureStandardWaveform(self, ChannelName, Waveform, Amplitude, DCOffset, Frequency, StartPhase):
        """

        :param ChannelName:
        :type ChannelName:
        :param Waveform:
        :type Waveform:
        :param Amplitude:
        :type Amplitude:
        :param DCOffset:
        :type DCOffset:
        :param Frequency:
        :type Frequency:
        :param StartPhase:
        :type StartPhase:
        """
        return self._dllwrap.ConfigureStandardWaveform(
            self._vi, ChannelName, Waveform, Amplitude, DCOffset, Frequency, StartPhase
        )

    def AbortGeneration(self):
        """"""
        return self._dllwrap.AbortGeneration(self._vi)

    def InitiateGeneration(self):
        """"""
        return self._dllwrap.InitiateGeneration(self._vi)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def ChannelOutputSetLoadInfinity(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelOutputSetLoadInfinity(self._vi, RepCapIdentifier)

    def ChannelOutputListSetFrequencyList(self, RepCapIdentifier, FrequencyBufferSize, Frequency):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param FrequencyBufferSize:
        :type FrequencyBufferSize:
        :param Frequency:
        :type Frequency:
        """
        return self._dllwrap.ChannelOutputListSetFrequencyList(
            self._vi, RepCapIdentifier, FrequencyBufferSize, Frequency
        )

    def ChannelOutputListGetFreqencyList(self, RepCapIdentifier, FreqListBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param FreqListBufferSize:
        :type FreqListBufferSize:
        """
        return self._dllwrap.ChannelOutputListGetFreqencyList(self._vi, RepCapIdentifier, FreqListBufferSize)

    def ChannelOutputVoltageAutoRangingOnce(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelOutputVoltageAutoRangingOnce(self._vi, RepCapIdentifier)

    def ChannelTriggerSoftwareTrigger(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelTriggerSoftwareTrigger(self._vi, RepCapIdentifier)

    def ChannelTriggerAbort(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelTriggerAbort(self._vi, RepCapIdentifier)

    def ChannelTrigger(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelTrigger(self._vi, RepCapIdentifier)

    def ChannelTriggerInitiate(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelTriggerInitiate(self._vi, RepCapIdentifier)

    def SetTriggerLevelMax(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SetTriggerLevelMax(self._vi, Channel)

    def GetTriggerLevelMin(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.GetTriggerLevelMin(self._vi, Channel)

    def ChannelApplySetDC(self, RepCapIdentifier, Offset):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ChannelApplySetDC(self._vi, RepCapIdentifier, Offset)

    def ChannelApplySetNoise(self, RepCapIdentifier, Amplitude, Offset):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Amplitude:
        :type Amplitude:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ChannelApplySetNoise(self._vi, RepCapIdentifier, Amplitude, Offset)

    def ChannelApplySetPulse(self, RepCapIdentifier, Frequency, Amplitude, Offset):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Frequency:
        :type Frequency:
        :param Amplitude:
        :type Amplitude:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ChannelApplySetPulse(self._vi, RepCapIdentifier, Frequency, Amplitude, Offset)

    def ChannelApplySetRamp(self, RepCapIdentifier, Frequency, Amplitude, Offset):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Frequency:
        :type Frequency:
        :param Amplitude:
        :type Amplitude:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ChannelApplySetRamp(self._vi, RepCapIdentifier, Frequency, Amplitude, Offset)

    def ChannelApplySetSinusoid(self, RepCapIdentifier, Frequency, Amplitude, Offset):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Frequency:
        :type Frequency:
        :param Amplitude:
        :type Amplitude:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ChannelApplySetSinusoid(self._vi, RepCapIdentifier, Frequency, Amplitude, Offset)

    def ChannelApplySetSquare(self, RepCapIdentifier, Frequency, Amplitude, Offset):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Frequency:
        :type Frequency:
        :param Amplitude:
        :type Amplitude:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ChannelApplySetSquare(self._vi, RepCapIdentifier, Frequency, Amplitude, Offset)

    def ChannelApplySetArbWaveform(self, RepCapIdentifier, SampleRate, Amplitude, Offset):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param SampleRate:
        :type SampleRate:
        :param Amplitude:
        :type Amplitude:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ChannelApplySetArbWaveform(self._vi, RepCapIdentifier, SampleRate, Amplitude, Offset)

    def ChannelApplySetPRBS(self, RepCapIdentifier, Frequency, Amplitude, Offset):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Frequency:
        :type Frequency:
        :param Amplitude:
        :type Amplitude:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ChannelApplySetPRBS(self._vi, RepCapIdentifier, Frequency, Amplitude, Offset)

    def ChannelApplyQueryOutputConfiguration(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelApplyQueryOutputConfiguration(self._vi, RepCapIdentifier)

    def ChannelApplySetTriangle(self, Channel, Frequency, Amplitude, Offset):
        """

        :param Channel:
        :type Channel:
        :param Frequency:
        :type Frequency:
        :param Amplitude:
        :type Amplitude:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ChannelApplySetTriangle(self._vi, Channel, Frequency, Amplitude, Offset)

    def ChannelBurstSetNumberOfCyclesInfinity(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelBurstSetNumberOfCyclesInfinity(self._vi, RepCapIdentifier)

    def ChannelPhaseLockSetReference(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelPhaseLockSetReference(self._vi, RepCapIdentifier)

    def ChannelPhaseLockSynchronizeChannels(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelPhaseLockSynchronizeChannels(self._vi, RepCapIdentifier)

    def SetPhaseMax(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SetPhaseMax(self._vi, Channel)

    def GetPhaseMax(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.GetPhaseMax(self._vi, Channel)

    def GetPhaseMin(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.GetPhaseMin(self._vi, Channel)

    def SetPhaseMin(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SetPhaseMin(self._vi, Channel)

    def ChannelOutputFunctionArbitraryWaveformSelectArbWaveform(self, RepCapIdentifier, Name):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Name:
        :type Name:
        """
        return self._dllwrap.ChannelOutputFunctionArbitraryWaveformSelectArbWaveform(self._vi, RepCapIdentifier, Name)

    def ChannelOutputFunctionArbitraryWaveformClear(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelOutputFunctionArbitraryWaveformClear(self._vi, RepCapIdentifier)

    def ChannelOutputFunctionArbitraryWaveformLoadArbWaveform(self, RepCapIdentifier, Name, DataBufferSize, Data):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Name:
        :type Name:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        # WORKAROUND FOR https://jiradesprod.intra.infineon.com/browse/PYVERIFY-439
        # Replacing the IVI driver call by SCPI equivalent

        # return self._dllwrap.ChannelOutputFunctionArbitraryWaveformLoadArbWaveform(self._vi, RepCapIdentifier, Name, DataBufferSize, Data)
        return self.SystemWriteString(f"DATA:ARB {Name}, {','.join(map(str, Data))}")

    def ChannelOutputFunctionArbitraryWaveformOpenArbWaveform(self, RepCapIdentifier, FileName):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param FileName:
        :type FileName:
        """
        return self._dllwrap.ChannelOutputFunctionArbitraryWaveformOpenArbWaveform(self._vi, RepCapIdentifier, FileName)

    def ChannelOutputFunctionArbitraryWaveformStoreArbWaveform(self, RepCapIdentifier, FileName):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param FileName:
        :type FileName:
        """
        return self._dllwrap.ChannelOutputFunctionArbitraryWaveformStoreArbWaveform(
            self._vi, RepCapIdentifier, FileName
        )

    def ChannelOutputFunctionArbitraryWaveformCreateArbSequence(
        self,
        repCapIdentifier,
        SequenceName,
        DataBufferSize,
        ArbName,
        RepeatCount,
        PlayControl,
        MarkerMode,
        MarkerPoint,
    ):
        """

        :param repCapIdentifier:
        :type repCapIdentifier:
        :param SequenceName:
        :type SequenceName:
        :param DataBufferSize:
        :type DataBufferSize:
        :param ArbName:
        :type ArbName:
        :param RepeatCount:
        :type RepeatCount:
        :param PlayControl:
        :type PlayControl:
        :param MarkerMode:
        :type MarkerMode:
        :param MarkerPoint:
        :type MarkerPoint:
        """
        return self._dllwrap.ChannelOutputFunctionArbitraryWaveformCreateArbSequence(
            self._vi,
            repCapIdentifier,
            SequenceName,
            DataBufferSize,
            ArbName,
            RepeatCount,
            PlayControl,
            MarkerMode,
            MarkerPoint,
        )

    def ChannelOutputFunctionArbitraryWaveformGetCatalog(self, repCapIdentifier, retValBufferSize):
        """

        :param repCapIdentifier:
        :type repCapIdentifier:
        :param retValBufferSize:
        :type retValBufferSize:
        """
        return self._dllwrap.ChannelOutputFunctionArbitraryWaveformGetCatalog(
            self._vi, repCapIdentifier, retValBufferSize
        )

    def ArbitraryWaveformLoadDualArbWaveform(self, Channel, Format, Name, DataBufferSize, Data):
        """

        :param Channel:
        :type Channel:
        :param Format:
        :type Format:
        :param Name:
        :type Name:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.ArbitraryWaveformLoadDualArbWaveform(self._vi, Channel, Format, Name, DataBufferSize, Data)

    def ArbitraryWaveformSynchronizeArbs(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ArbitraryWaveformSynchronizeArbs(self._vi, Channel)

    def ArbitraryWaveformLoadArbWaveformDAC(self, Channel, Name, DataBufferSize, Data):
        """

        :param Channel:
        :type Channel:
        :param Name:
        :type Name:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.ArbitraryWaveformLoadArbWaveformDAC(self._vi, Channel, Name, DataBufferSize, Data)

    def ArbitraryWaveformLoadDualArbWaveformDAC(self, Channel, Format, Name, DataBufferSize, Data):
        """

        :param Channel:
        :type Channel:
        :param Format:
        :type Format:
        :param Name:
        :type Name:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.ArbitraryWaveformLoadDualArbWaveformDAC(
            self._vi, Channel, Format, Name, DataBufferSize, Data
        )

    def ArbitraryWaveformSetArbFrequencyMin(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ArbitraryWaveformSetArbFrequencyMin(self._vi, Channel)

    def ArbitraryWaveformGetArbFrequencyMin(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ArbitraryWaveformGetArbFrequencyMin(self._vi, Channel)

    def ArbitraryWaveformGetArbPeriodMax(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ArbitraryWaveformGetArbPeriodMax(self._vi, Channel)

    def ArbitraryWaveformSetArbPeriodMax(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ArbitraryWaveformSetArbPeriodMax(self._vi, Channel)

    def ArbitraryWaveformSetArbPhaseMin(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ArbitraryWaveformSetArbPhaseMin(self._vi, Channel)

    def ArbitraryWaveformGetArbPhaseMax(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ArbitraryWaveformGetArbPhaseMax(self._vi, Channel)

    def ArbitraryWaveformGetArbPeriodMin(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ArbitraryWaveformGetArbPeriodMin(self._vi, Channel)

    def ArbitraryWaveformGetArbFrequencyMax(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ArbitraryWaveformGetArbFrequencyMax(self._vi, Channel)

    def LoadArbWaveformBinary(self, Channel, Name, DataBufferSize, Data):
        """

        :param Channel:
        :type Channel:
        :param Name:
        :type Name:
        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.LoadArbWaveformBinary(self._vi, Channel, Name, DataBufferSize, Data)

    def ChannelOutputFunctionArbitraryWaveformAttributeGetAverage(self, RepCapIdentifier, ArbName):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param ArbName:
        :type ArbName:
        """
        return self._dllwrap.ChannelOutputFunctionArbitraryWaveformAttributeGetAverage(
            self._vi, RepCapIdentifier, ArbName
        )

    def ChannelOutputFunctionArbitraryWaveformAttributeGetCrestFactor(self, RepCapIdentifier, ArbName):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param ArbName:
        :type ArbName:
        """
        return self._dllwrap.ChannelOutputFunctionArbitraryWaveformAttributeGetCrestFactor(
            self._vi, RepCapIdentifier, ArbName
        )

    def ChannelOutputFunctionArbitraryWaveformAttributeGetDataPoints(self, RepCapIdentifier, ArbName):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param ArbName:
        :type ArbName:
        """
        return self._dllwrap.ChannelOutputFunctionArbitraryWaveformAttributeGetDataPoints(
            self._vi, RepCapIdentifier, ArbName
        )

    def ChannelOutputFunctionArbitraryWaveformAttributeGetPeakToPeak(self, RepCapIdentifier, ArbName):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param ArbName:
        :type ArbName:
        """
        return self._dllwrap.ChannelOutputFunctionArbitraryWaveformAttributeGetPeakToPeak(
            self._vi, RepCapIdentifier, ArbName
        )

    def SetPeriodMin(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SetPeriodMin(self._vi, Channel)

    def SetPhaseMax2(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SetPhaseMax2(self._vi, Channel)

    def ArbitraryWaveformGetArbGetPhaseMin(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ArbitraryWaveformGetArbGetPhaseMin(self._vi, Channel)

    def SetFrequencyMax(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SetFrequencyMax(self._vi, Channel)

    def SetTriggerLevelMin(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SetTriggerLevelMin(self._vi, Channel)

    def GetTriggerLevelMax(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.GetTriggerLevelMax(self._vi, Channel)

    def viRead(self, BufferSize):
        """

        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.viRead(self._vi, BufferSize)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def viWrite(self, Count, Buffer):
        """

        :param Count:
        :type Count:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.viWrite(self._vi, Count, Buffer)

    def SystemWriteString(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, Data)

    def DisplayTextClear(self):
        """"""
        return self._dllwrap.DisplayTextClear(self._vi)

    def DisplayHCopyGetScreenDump(self, RetValBufferSize):
        """

        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.DisplayHCopyGetScreenDump(self._vi, RetValBufferSize)

    def StateStorageDelete(self, State):
        """

        :param State:
        :type State:
        """
        return self._dllwrap.StateStorageDelete(self._vi, State)

    def StateStorageSave(self, State):
        """

        :param State:
        :type State:
        """
        return self._dllwrap.StateStorageSave(self._vi, State)

    def StateStorageRecall(self, State):
        """

        :param State:
        :type State:
        """
        return self._dllwrap.StateStorageRecall(self._vi, State)

    def StateStorageGetName(self, State, RetValBufferSize):
        """

        :param State:
        :type State:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.StateStorageGetName(self._vi, State, RetValBufferSize)

    def StateStorageSetName(self, State, Val):
        """

        :param State:
        :type State:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StateStorageSetName(self._vi, State, Val)

    def StateStorageGetValid(self, Location):
        """

        :param Location:
        :type Location:
        """
        return self._dllwrap.StateStorageGetValid(self._vi, Location)

    def StateStorageGetCatalog(self, retValBufferSize):
        """

        :param retValBufferSize:
        :type retValBufferSize:
        """
        return self._dllwrap.StateStorageGetCatalog(self._vi, retValBufferSize)

    def MemoryDelete(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryDelete(self._vi, FileName)

    def MemoryLoad(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryLoad(self._vi, FileName)

    def MemoryMakeDirectory(self, DirectoryName):
        """

        :param DirectoryName:
        :type DirectoryName:
        """
        return self._dllwrap.MemoryMakeDirectory(self._vi, DirectoryName)

    def MemoryMoveFiles(self, SourceFile, DestinationFile):
        """

        :param SourceFile:
        :type SourceFile:
        :param DestinationFile:
        :type DestinationFile:
        """
        return self._dllwrap.MemoryMoveFiles(self._vi, SourceFile, DestinationFile)

    def MemoryStore(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryStore(self._vi, FileName)

    def MemoryLoadState(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryLoadState(self._vi, FileName)

    def MemoryRemoveFolder(self, Foldername):
        """

        :param Foldername:
        :type Foldername:
        """
        return self._dllwrap.MemoryRemoveFolder(self._vi, Foldername)

    def MemoryCopyFiles(self, SourceFile, DestinationFile):
        """

        :param SourceFile:
        :type SourceFile:
        :param DestinationFile:
        :type DestinationFile:
        """
        return self._dllwrap.MemoryCopyFiles(self._vi, SourceFile, DestinationFile)

    def MemoryCopySeqFiles(self, Source, Destination):
        """

        :param Source:
        :type Source:
        :param Destination:
        :type Destination:
        """
        return self._dllwrap.MemoryCopySeqFiles(self._vi, Source, Destination)

    def MemoryStoreState(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryStoreState(self._vi, FileName)

    def MemoryUploadFile(self, Source, Destination):
        """

        :param Source:
        :type Source:
        :param Destination:
        :type Destination:
        """
        return self._dllwrap.MemoryUploadFile(self._vi, Source, Destination)

    def MemoryLoadList(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryLoadList(self._vi, FileName)

    def MemoryStoreList(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryStoreList(self._vi, FileName)

    def MemoryDownloadFile(self, Source, Destination):
        """

        :param Source:
        :type Source:
        :param Destination:
        :type Destination:
        """
        return self._dllwrap.MemoryDownloadFile(self._vi, Source, Destination)

    def MemoryGetCatalog(self, FolderName, RetValBufferSize):
        """

        :param FolderName:
        :type FolderName:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MemoryGetCatalog(self._vi, FolderName, RetValBufferSize)

    def MemoryGetCatalogDataFiles(self, FolderName, RetValBufferSize):
        """

        :param FolderName:
        :type FolderName:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MemoryGetCatalogDataFiles(self._vi, FolderName, RetValBufferSize)

    def MemoryGetCatalogStateFiles(self, FolderName, RetValBufferSize):
        """

        :param FolderName:
        :type FolderName:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MemoryGetCatalogStateFiles(self._vi, FolderName, RetValBufferSize)

    def StateCatalog(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.StateCatalog(self._vi, ValBufferSize)

    def SetSecureState(self, Mode, Code):
        """

        :param Mode:
        :type Mode:
        :param Code:
        :type Code:
        """
        return self._dllwrap.SetSecureState(self._vi, Mode, Code)

    def Calibrate(self):
        """"""
        return self._dllwrap.Calibrate(self._vi)

    def StatusPreset(self):
        """"""
        return self._dllwrap.StatusPreset(self._vi)

    def StatusConfigureServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.StatusConfigureServiceRequest(self._vi, Reason)

    def StatusClear(self):
        """"""
        return self._dllwrap.StatusClear(self._vi)

    def StatusGetRegister(self, Register, SubRegister):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusGetRegister(self._vi, Register, SubRegister)

    def StatusSetRegister(self, Register, SubRegister, Val):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusSetRegister(self._vi, Register, SubRegister, Val)

    def StatusGetSerialPoll(self):
        """"""
        return self._dllwrap.StatusGetSerialPoll(self._vi)

    def DisableLocalControls(self):
        """"""
        return self._dllwrap.DisableLocalControls(self._vi)

    def EnableLocalControls(self):
        """"""
        return self._dllwrap.EnableLocalControls(self._vi)

    def GetState(self, DataBufferSize):
        """

        :param DataBufferSize:
        :type DataBufferSize:
        """
        return self._dllwrap.GetState(self._vi, DataBufferSize)

    def PutState(self, DataBufferSize, Data):
        """

        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.PutState(self._vi, DataBufferSize, Data)

    def WaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.WaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def IoRead(self, ValueBufferSize):
        """

        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.IoRead(self._vi, ValueBufferSize)

    def IoWrite(self, Value):
        """

        :param Value:
        :type Value:
        """
        return self._dllwrap.IoWrite(self._vi, Value)
