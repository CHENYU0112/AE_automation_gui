from __future__ import annotations

from .tkafg31k import *


class IIviFgenArbitraryWaveform:
    def __init__(self, root):
        self.root = root
        """:type : pverify.drivers.Fgen.tkafg31k.IIviFgen.IIviFgen"""

    @property
    def NumberWaveformsMax(self):
        """
        The maximum number of arbitrary waveforms that the function generator allows.
        """
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 205)

    @property
    def Quantum(self):
        """
        The size of each arbitrary waveform must be a multiple of a quantum value. This attribute returns the quantum
        value the function generator allows.
        For example, if this attribute returns a value of 8, all waveform sizes must be a multiple of 8.
        """
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 206)

    @property
    def SizeMax(self):
        """
        The maximum number of points the function generator allows in an arbitrary waveform.
        """
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 208)

    @property
    def SizeMin(self):
        """
        The minimum number of points the function generator allows in an arbitrary waveform.
        """
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 207)

    def Configure(self, ChannelName, Handle, Gain, Offset):
        """
        Configures the attributes of the function generator that affect arbitrary
        waveform generation.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param Handle: Specifies the handle that identifies the arbitrary waveform to produce. This
            value sets the Arbitrary Waveform Handle attribute.
        :type Handle: int
        :param Gain: Specifies the arbitrary waveform gain. This value sets the Arbitrary Gain
            attribute.
        :type Gain: float
        :param Offset: Specifies the arbitrary waveform offset. This value sets the Arbitrary Offset
            attribute.
        :type Offset: float
        """
        self.root.dllwrap.ConfigureArbWaveform(ChannelName, Handle, Gain, Offset)

    def Clear(self, Handle):
        """
        Removes a previously created arbitrary waveform from the function generator's
        memory and invalidates the waveform's handle.

        :param Handle: Specifies the handle that identifies the arbitrary waveform to clear.
        :type Handle: int
        """
        self.root.dllwrap.ClearArbWaveform(Handle)

    def Create(self, Data):
        """
        Creates an arbitrary waveform and returns a handle to it. The handle is used by
        the Configure, Clear, and ArbitrarySequence.Create methods.

        :return: Returns the handle that identifies the new arbitrary waveform.
        :rtype: int
        """
        return self.root.dllwrap.CreateArbWaveform(len(Data), Data)

    def get_Frequency(self, ChannelName):
        """
        The rate at which an entire arbitrary waveform is generated. The units are in
        Hertz.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The frequency.
        :rtype: float
        """
        return self.root.dllwrap.GetAttributeViReal64(ChannelName, IVI_CLASS_PUBLIC_ATTR_BASE + 209)

    def set_Frequency(self, ChannelName, pVal):
        """
        The rate at which an entire arbitrary waveform is generated. The units are in
        Hertz.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The frequency.
        :type pVal: float
        """
        self.root.dllwrap.SetAttributeViReal64(ChannelName, IVI_CLASS_PUBLIC_ATTR_BASE + 209, pVal)
