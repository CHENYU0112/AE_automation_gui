from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import tkafg31k_const as const
from .tkafg31k_const import *


class tkafg31k_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("tkafg31k_32.dll", "tkafg31k_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "tkafg31k"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        _status = self.dll.tkafg31k_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        _status = self.dll.tkafg31k_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViConstString(optionString),
            byref(newVi),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(newVi.value)

    def close(self, vi):
        _status = self.dll.tkafg31k_close(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkafg31k_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.tkafg31k_LockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.tkafg31k_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def GetChannelName(self, vi, index, bufferSize):
        name = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkafg31k_GetChannelName(ViSession(vi), ViInt32(index), ViInt32(bufferSize), name)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(name)

    def ConfigureActiveMemory(self, vi, activeMemory):
        _status = self.dll.tkafg31k_ConfigureActiveMemory(ViSession(vi), ViInt32(activeMemory))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOperationMode(self, vi, channelName, outputMode):
        _status = self.dll.tkafg31k_ConfigureOperationMode(
            ViSession(vi), ViConstString(channelName), ViInt32(outputMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputMode(self, vi, outputMode):
        _status = self.dll.tkafg31k_ConfigureOutputMode(ViSession(vi), ViInt32(outputMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRefClockSource(self, vi, refClockSource):
        _status = self.dll.tkafg31k_ConfigureRefClockSource(ViSession(vi), ViInt32(refClockSource))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputImpedance(self, vi, channelName, outputImpedance):
        _status = self.dll.tkafg31k_ConfigureOutputImpedance(
            ViSession(vi), ViConstString(channelName), ViReal64(outputImpedance)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputEnabled(self, vi, channelName, enabled):
        _status = self.dll.tkafg31k_ConfigureOutputEnabled(
            ViSession(vi), ViConstString(channelName), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InitiateGeneration(self, vi):
        _status = self.dll.tkafg31k_InitiateGeneration(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AbortGeneration(self, vi):
        _status = self.dll.tkafg31k_AbortGeneration(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureActiveChannel(self, vi, channelName):
        _status = self.dll.tkafg31k_ConfigureActiveChannel(ViSession(vi), ViConstString(channelName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureStandardWaveform(self, vi, channelName, waveform, amplitude, dcOffset, frequency, startPhase):
        _status = self.dll.tkafg31k_ConfigureStandardWaveform(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(waveform),
            ViReal64(amplitude),
            ViReal64(dcOffset),
            ViReal64(frequency),
            ViReal64(startPhase),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRampSymmetry(self, vi, channelName, rampSymmetry):
        _status = self.dll.tkafg31k_ConfigureRampSymmetry(
            ViSession(vi), ViConstString(channelName), ViReal64(rampSymmetry)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePulseWaveform(self, vi, channelName, dutyCycle, leadingEdgeTime, trailingEdgeTime):
        _status = self.dll.tkafg31k_ConfigurePulseWaveform(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(dutyCycle),
            ViReal64(leadingEdgeTime),
            ViReal64(trailingEdgeTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePulseDelay(self, vi, channelName, delay):
        _status = self.dll.tkafg31k_ConfigurePulseDelay(ViSession(vi), ViConstString(channelName), ViReal64(delay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearArbWaveform(self, vi, waveformHandle):
        _status = self.dll.tkafg31k_ClearArbWaveform(ViSession(vi), ViInt32(waveformHandle))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSampleRate(self, vi, sampleRate):
        _status = self.dll.tkafg31k_ConfigureSampleRate(ViSession(vi), ViReal64(sampleRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryArbWfmCapabilities(self, vi):
        maxNumWfms = ViInt32()
        wfmQuantum = ViInt32()
        minWfmSize = ViInt32()
        maxWfmSize = ViInt32()
        _status = self.dll.tkafg31k_QueryArbWfmCapabilities(
            ViSession(vi),
            byref(maxNumWfms),
            byref(wfmQuantum),
            byref(minWfmSize),
            byref(maxWfmSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        maxNumWfms = int(maxNumWfms.value)
        wfmQuantum = int(wfmQuantum.value)
        minWfmSize = int(minWfmSize.value)
        maxWfmSize = int(maxWfmSize.value)
        return maxNumWfms, wfmQuantum, minWfmSize, maxWfmSize

    def ConfigureArbWaveform(self, vi, channelName, wfmHandle, arbGain, arbOffset):
        _status = self.dll.tkafg31k_ConfigureArbWaveform(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(wfmHandle),
            ViReal64(arbGain),
            ViReal64(arbOffset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CreateArbWaveform(self, vi, wfmSize, wfmData):
        _wfmData = (ViReal64 * len(wfmData))(*wfmData)
        wfmHandle = ViInt32()
        _status = self.dll.tkafg31k_CreateArbWaveform(ViSession(vi), ViInt32(wfmSize), _wfmData, byref(wfmHandle))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(wfmHandle.value)

    def ConfigureArbWaveformExtended(self, vi, channelName, wfmHandle, arbGain, arbOffset, editFile):
        _status = self.dll.tkafg31k_ConfigureArbWaveformExtended(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(wfmHandle),
            ViReal64(arbGain),
            ViReal64(arbOffset),
            ViConstString(editFile),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureArbFrequency(self, vi, channelName, frequency):
        _status = self.dll.tkafg31k_ConfigureArbFrequency(
            ViSession(vi), ViConstString(channelName), ViReal64(frequency)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryArbSeqCapabilities(self, vi):
        maxNumSeqs = ViInt32()
        minSeqLength = ViInt32()
        maxSeqLength = ViInt32()
        maxLoopCount = ViInt32()
        _status = self.dll.tkafg31k_QueryArbSeqCapabilities(
            ViSession(vi),
            byref(maxNumSeqs),
            byref(minSeqLength),
            byref(maxSeqLength),
            byref(maxLoopCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        maxNumSeqs = int(maxNumSeqs.value)
        minSeqLength = int(minSeqLength.value)
        maxSeqLength = int(maxSeqLength.value)
        maxLoopCount = int(maxLoopCount.value)
        return maxNumSeqs, minSeqLength, maxSeqLength, maxLoopCount

    def CreateArbSequence(self, vi, length, waveformHandle, loopCount):
        _waveformHandle = (ViInt32 * len(waveformHandle))(*waveformHandle)
        _loopCount = (ViInt32 * len(loopCount))(*loopCount)
        _status = self.dll.tkafg31k_CreateArbSequence(ViSession(vi), ViInt32(length), _waveformHandle, _loopCount)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CreateSequence(self, vi):
        _status = self.dll.tkafg31k_CreateSequence(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureArbSequence(self, vi, channelName, seqHandle, arbGain, offset):
        _status = self.dll.tkafg31k_ConfigureArbSequence(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(seqHandle),
            ViReal64(arbGain),
            ViReal64(offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSequenceScale(self, vi, channelName, scale):
        _status = self.dll.tkafg31k_ConfigureSequenceScale(ViSession(vi), ViConstString(channelName), ViReal64(scale))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearArbMemory(self, vi):
        _status = self.dll.tkafg31k_ClearArbMemory(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearArbSequence(self, vi, sequenceHandle):
        _status = self.dll.tkafg31k_ClearArbSequence(ViSession(vi), ViInt32(sequenceHandle))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAddress(self, vi, element, jumpIndex, GOTOIndex, enableInfiniteLoop, enableGOTO, loopCount):
        _status = self.dll.tkafg31k_ConfigureAddress(
            ViSession(vi),
            ViInt32(element),
            ViInt32(jumpIndex),
            ViInt32(GOTOIndex),
            ViBoolean(enableInfiniteLoop),
            ViBoolean(enableGOTO),
            ViInt32(loopCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSequenceSamplingRate(self, vi, samplingRate):
        _status = self.dll.tkafg31k_ConfigureSequenceSamplingRate(ViSession(vi), ViReal64(samplingRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSequenceJumpTrigger(self, vi, element, jumpTriggerType, jumpTargetType, jumpTriggerSlopeType, timer):
        _status = self.dll.tkafg31k_ConfigureSequenceJumpTrigger(
            ViSession(vi),
            ViInt32(element),
            ViInt32(jumpTriggerType),
            ViInt32(jumpTargetType),
            ViInt32(jumpTriggerSlopeType),
            ViReal64(timer),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSequenceWaveform(self, vi, channelName, element, waveformPath, sequenceRunMode):
        _status = self.dll.tkafg31k_ConfigureSequenceWaveform(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(element),
            ViConstString(waveformPath),
            ViInt32(sequenceRunMode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSequenceWaitTrigger(
        self, vi, element, waitTriggerType, enableWaitTrigger, waitTriggerSlopeType, timer
    ):
        _status = self.dll.tkafg31k_ConfigureSequenceWaitTrigger(
            ViSession(vi),
            ViInt32(element),
            ViInt32(waitTriggerType),
            ViBoolean(enableWaitTrigger),
            ViInt32(waitTriggerSlopeType),
            ViReal64(timer),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformDelay(self, vi, delay):
        _status = self.dll.tkafg31k_ConfigureWaveformDelay(ViSession(vi), ViReal64(delay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DeleteWaveform(self, vi, waveformPath):
        _status = self.dll.tkafg31k_DeleteWaveform(ViSession(vi), ViConstString(waveformPath))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMarkerEnabled(self, vi, element, markerEnabled):
        _status = self.dll.tkafg31k_ConfigureMarkerEnabled(ViSession(vi), ViInt32(element), ViBoolean(markerEnabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StartSequenceOutput(self, vi):
        _status = self.dll.tkafg31k_StartSequenceOutput(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StopSequenceOutput(self, vi):
        _status = self.dll.tkafg31k_StopSequenceOutput(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSequenceLength(self, vi, sequenceLength):
        _status = self.dll.tkafg31k_ConfigureSequenceLength(ViSession(vi), ViInt32(sequenceLength))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerSource(self, vi, channelName, trigSource):
        _status = self.dll.tkafg31k_ConfigureTriggerSource(
            ViSession(vi), ViConstString(channelName), ViInt32(trigSource)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ForceTrigger(self, vi):
        _status = self.dll.tkafg31k_ForceTrigger(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerOutputMode(self, vi, outputMode):
        _status = self.dll.tkafg31k_ConfigureTriggerOutputMode(ViSession(vi), ViInt32(outputMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureStartTrigger(self, vi, channelName, triggerSource, triggerSlope):
        _status = self.dll.tkafg31k_ConfigureStartTrigger(
            ViSession(vi),
            ViConstString(channelName),
            ViConstString(triggerSource),
            ViInt32(triggerSlope),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureInternalTriggerRate(self, vi, rate):
        _status = self.dll.tkafg31k_ConfigureInternalTriggerRate(ViSession(vi), ViReal64(rate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureExternalTriggerSlope(self, vi, triggerSlope):
        _status = self.dll.tkafg31k_ConfigureExternalTriggerSlope(ViSession(vi), ViInt32(triggerSlope))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBurstEnabled(self, vi, channelName, enabled):
        _status = self.dll.tkafg31k_ConfigureBurstEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBurstCount(self, vi, channelName, burstCount):
        _status = self.dll.tkafg31k_ConfigureBurstCount(ViSession(vi), ViConstString(channelName), ViInt32(burstCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBurstMode(self, vi, channelName, burstMode):
        _status = self.dll.tkafg31k_ConfigureBurstMode(ViSession(vi), ViConstString(channelName), ViInt32(burstMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBurstDelay(self, vi, channelName, burstDelay):
        _status = self.dll.tkafg31k_ConfigureBurstDelay(ViSession(vi), ViConstString(channelName), ViReal64(burstDelay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBurstIdle(self, vi, channelName, burstIdle):
        _status = self.dll.tkafg31k_ConfigureBurstIdle(ViSession(vi), ViConstString(channelName), ViInt32(burstIdle))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RearmBurst(self, vi, channelName):
        _status = self.dll.tkafg31k_RearmBurst(ViSession(vi), ViConstString(channelName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSweepEnabled(self, vi, channelName, enabled):
        _status = self.dll.tkafg31k_ConfigureSweepEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSweep(self, vi, channelName, startFrequency, stopFrequency, time, type):
        _status = self.dll.tkafg31k_ConfigureSweep(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(startFrequency),
            ViReal64(stopFrequency),
            ViReal64(time),
            ViInt32(type),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSweepEx(
        self,
        vi,
        channelName,
        startFrequency,
        stopFrequency,
        time,
        holdTime,
        returnTime,
        type,
    ):
        _status = self.dll.tkafg31k_ConfigureSweepEx(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(startFrequency),
            ViReal64(stopFrequency),
            ViReal64(time),
            ViReal64(holdTime),
            ViReal64(returnTime),
            ViInt32(type),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSweepMode(self, vi, channelName, sweepMode):
        _status = self.dll.tkafg31k_ConfigureSweepMode(ViSession(vi), ViConstString(channelName), ViInt32(sweepMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNoiseAppendantEnabled(self, vi, channelName, enabled):
        _status = self.dll.tkafg31k_ConfigureNoiseAppendantEnabled(
            ViSession(vi), ViConstString(channelName), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNoiseLevel(self, vi, channelName, level):
        _status = self.dll.tkafg31k_ConfigureNoiseLevel(ViSession(vi), ViConstString(channelName), ViReal64(level))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureExternalAppendEnabled(self, vi, channelName, enabled):
        _status = self.dll.tkafg31k_ConfigureExternalAppendEnabled(
            ViSession(vi), ViConstString(channelName), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAMEnabled(self, vi, channelName, enabled):
        _status = self.dll.tkafg31k_ConfigureAMEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAMSource(self, vi, channelName, source):
        _status = self.dll.tkafg31k_ConfigureAMSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAMInternal(self, vi, modulationDepth, modulationWaveform, modulationFrequency):
        _status = self.dll.tkafg31k_ConfigureAMInternal(
            ViSession(vi),
            ViReal64(modulationDepth),
            ViInt32(modulationWaveform),
            ViReal64(modulationFrequency),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAMInternalByChannel(self, vi, channelName, amDepth, amWaveform, amFrequency, editFile):
        _status = self.dll.tkafg31k_ConfigureAMInternalByChannel(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(amDepth),
            ViInt32(amWaveform),
            ViReal64(amFrequency),
            ViConstString(editFile),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAMExternalByChannel(self, vi, channelName, amDepth):
        _status = self.dll.tkafg31k_ConfigureAMExternalByChannel(
            ViSession(vi), ViConstString(channelName), ViReal64(amDepth)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFMEnabled(self, vi, channelName, enabled):
        _status = self.dll.tkafg31k_ConfigureFMEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFMSource(self, vi, channelName, source):
        _status = self.dll.tkafg31k_ConfigureFMSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFMInternal(self, vi, peakDeviation_Hz, modulationWaveform, modulationFrequency_Hz):
        _status = self.dll.tkafg31k_ConfigureFMInternal(
            ViSession(vi),
            ViReal64(peakDeviation_Hz),
            ViInt32(modulationWaveform),
            ViReal64(modulationFrequency_Hz),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFMInternalByChannel(self, vi, channelName, fmDeviance, fmWaveform, fmFrequency, editFile):
        _status = self.dll.tkafg31k_ConfigureFMInternalByChannel(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(fmDeviance),
            ViInt32(fmWaveform),
            ViReal64(fmFrequency),
            ViConstString(editFile),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFMExternalByChannel(self, vi, channelName, fmDeviance):
        _status = self.dll.tkafg31k_ConfigureFMExternalByChannel(
            ViSession(vi), ViConstString(channelName), ViReal64(fmDeviance)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePMEnabled(self, vi, channelName, enabled):
        _status = self.dll.tkafg31k_ConfigurePMEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePMSource(self, vi, channelName, source):
        _status = self.dll.tkafg31k_ConfigurePMSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePMInternalByChannel(self, vi, channelName, pmDeviation, pmWaveform, pmFrequency, editFile):
        _status = self.dll.tkafg31k_ConfigurePMInternalByChannel(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(pmDeviation),
            ViInt32(pmWaveform),
            ViReal64(pmFrequency),
            ViConstString(editFile),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePMExternalByChannel(self, vi, channelName, pmDeviation):
        _status = self.dll.tkafg31k_ConfigurePMExternalByChannel(
            ViSession(vi), ViConstString(channelName), ViReal64(pmDeviation)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFSKEnabled(self, vi, channelName, enabled):
        _status = self.dll.tkafg31k_ConfigureFSKEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFSKSource(self, vi, channelName, source):
        _status = self.dll.tkafg31k_ConfigureFSKSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFSKInternalByChannel(self, vi, channelName, hopFrequency, rate):
        _status = self.dll.tkafg31k_ConfigureFSKInternalByChannel(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(hopFrequency),
            ViReal64(rate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFSKExternalByChannel(self, vi, channelName, hopFrequency):
        _status = self.dll.tkafg31k_ConfigureFSKExternalByChannel(
            ViSession(vi), ViConstString(channelName), ViReal64(hopFrequency)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePWMEnabled(self, vi, channelName, enabled):
        _status = self.dll.tkafg31k_ConfigurePWMEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePWMSource(self, vi, channelName, source):
        _status = self.dll.tkafg31k_ConfigurePWMSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePWMInternalByChannel(self, vi, channelName, pwmDeviation, pwmWaveform, pwmFrequency, editFile):
        _status = self.dll.tkafg31k_ConfigurePWMInternalByChannel(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(pwmDeviation),
            ViInt32(pwmWaveform),
            ViReal64(pwmFrequency),
            ViConstString(editFile),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePWMExternalByChannel(self, vi, channelName, pwmDeviation):
        _status = self.dll.tkafg31k_ConfigurePWMExternalByChannel(
            ViSession(vi), ViConstString(channelName), ViReal64(pwmDeviation)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        _status = self.dll.tkafg31k_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def GetError(self, vi, bufferSize):
        code = ViStatus()
        description = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkafg31k_GetError(ViSession(vi), byref(code), ViInt32(bufferSize), description)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        description = decode(description)
        return code, description

    def ClearError(self, vi):
        _status = self.dll.tkafg31k_ClearError(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        _status = self.dll.tkafg31k_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(errorMessage)

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkafg31k_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        _status = self.dll.tkafg31k_ResetInterchangeCheck(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearInterchangeWarnings(self, vi):
        _status = self.dll.tkafg31k_ClearInterchangeWarnings(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InvalidateAllAttributes(self, vi):
        _status = self.dll.tkafg31k_InvalidateAllAttributes(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySequenceParameter(self, vi, channelName):
        samplingRate = ViReal64()
        scale = ViReal64()
        sequenceLength = ViInt32()
        offset = ViReal64()
        _status = self.dll.tkafg31k_QuerySequenceParameter(
            ViSession(vi),
            ViConstString(channelName),
            byref(samplingRate),
            byref(scale),
            byref(sequenceLength),
            byref(offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        samplingRate = float(samplingRate.value)
        scale = float(scale.value)
        sequenceLength = int(sequenceLength.value)
        offset = float(offset.value)
        return samplingRate, scale, sequenceLength, offset

    def ListWaveforms(self, vi, index):
        waveformAmount = ViInt32()
        waveformPath = ARRAY_ViChar(1024)
        waveformLength = ViInt32()
        _status = self.dll.tkafg31k_ListWaveforms(
            ViSession(vi),
            ViInt32(index),
            byref(waveformAmount),
            waveformPath,
            byref(waveformLength),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformAmount = int(waveformAmount.value)
        waveformPath = decode(waveformPath)
        waveformLength = int(waveformLength.value)
        return waveformAmount, waveformPath, waveformLength

    def SaveLoadSequence(self, vi, operation, filePath):
        _status = self.dll.tkafg31k_SaveLoadSequence(ViSession(vi), ViInt32(operation), ViConstString(filePath))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def reset(self, vi):
        _status = self.dll.tkafg31k_reset(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetWithDefaults(self, vi):
        _status = self.dll.tkafg31k_ResetWithDefaults(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        _status = self.dll.tkafg31k_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        _status = self.dll.tkafg31k_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def Disable(self, vi):
        _status = self.dll.tkafg31k_Disable(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SaveLoadInstrumentSettings(self, vi, operationSelect, fileName):
        _status = self.dll.tkafg31k_SaveLoadInstrumentSettings(
            ViSession(vi), ViInt32(operationSelect), ViConstString(fileName)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SaveLoadWaveformData(self, vi, operationSelect, fileName, editMemory):
        _status = self.dll.tkafg31k_SaveLoadWaveformData(
            ViSession(vi),
            ViInt32(operationSelect),
            ViConstString(fileName),
            ViInt32(editMemory),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def viWrite(self, vi, buffer, count):
        _buffer = (ViByte * len(buffer))(*buffer)
        returnCount = ViInt64()
        _status = self.dll.tkafg31k_viWrite(ViSession(vi), _buffer, ViInt64(count), byref(returnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(returnCount.value)

    def viRead(self, vi, bufferSize):
        buffer = ARRAY_ViByte(bufferSize)
        returnCount = ViInt64()
        _status = self.dll.tkafg31k_viRead(ViSession(vi), ViInt64(bufferSize), buffer, byref(returnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnCount = int(returnCount.value)
        return buffer, returnCount

    def WriteInstrData(self, vi, writeBuffer):
        _status = self.dll.tkafg31k_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        _status = self.dll.tkafg31k_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        _status = self.dll.tkafg31k_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        _status = self.dll.tkafg31k_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(bufSize)
        _status = self.dll.tkafg31k_GetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViInt32(bufSize),
            value,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        _status = self.dll.tkafg31k_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        _status = self.dll.tkafg31k_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.tkafg31k_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.tkafg31k_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.tkafg31k_SetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.tkafg31k_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.tkafg31k_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.tkafg31k_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.tkafg31k_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.tkafg31k_CheckAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.tkafg31k_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.tkafg31k_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
