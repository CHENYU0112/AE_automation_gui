from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .ww257x_dllwrap import *


class ww257x(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = ww257x_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def GetNextCoercionRecord(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def GetNextInterchangeWarning(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def ConfigureOperationMode(self, channelName, operMode):
        """

        :param channelName:
        :type channelName:
        :param operMode:
        :type operMode:
        """
        return self._dllwrap.ConfigureOperationMode(self._vi, channelName, operMode)

    def ConfigureOutputMode(self, opMode):
        """

        :param opMode:
        :type opMode:
        """
        return self._dllwrap.ConfigureOutputMode(self._vi, opMode)

    def ConfigureRefClockSource(self, refClockSource):
        """

        :param refClockSource:
        :type refClockSource:
        """
        return self._dllwrap.ConfigureRefClockSource(self._vi, refClockSource)

    def ConfigureOutputImpedance(self, channelName, outputImpedance):
        """

        :param channelName:
        :type channelName:
        :param outputImpedance:
        :type outputImpedance:
        """
        return self._dllwrap.ConfigureOutputImpedance(self._vi, channelName, outputImpedance)

    def ConfigureOutputEnabled(self, channelName, outputEnabled):
        """

        :param channelName:
        :type channelName:
        :param outputEnabled:
        :type outputEnabled:
        """
        return self._dllwrap.ConfigureOutputEnabled(self._vi, channelName, outputEnabled)

    def ConfigureFilter(self, channelName, filter):
        """

        :param channelName:
        :type channelName:
        :param filter:
        :type filter:
        """
        return self._dllwrap.ConfigureFilter(self._vi, channelName, filter)

    def ConfigureSyncSignal(self, wfmHandle, syncType, syncEnabled, syncPosition):
        """

        :param wfmHandle:
        :type wfmHandle:
        :param syncType:
        :type syncType:
        :param syncEnabled:
        :type syncEnabled:
        :param syncPosition:
        :type syncPosition:
        """
        return self._dllwrap.ConfigureSyncSignal(self._vi, wfmHandle, syncType, syncEnabled, syncPosition)

    def InitiateGeneration(self):
        """"""
        return self._dllwrap.InitiateGeneration(self._vi)

    def AbortGeneration(self):
        """"""
        return self._dllwrap.AbortGeneration(self._vi)

    def ConfigureStandardWaveform(self, channelName, waveform, amplitude, dcOffset, frequency, startPhase):
        """

        :param channelName:
        :type channelName:
        :param waveform:
        :type waveform:
        :param amplitude:
        :type amplitude:
        :param dcOffset:
        :type dcOffset:
        :param frequency:
        :type frequency:
        :param startPhase:
        :type startPhase:
        """
        return self._dllwrap.ConfigureStandardWaveform(
            self._vi, channelName, waveform, amplitude, dcOffset, frequency, startPhase
        )

    def ConfigureRampWaveform(self, channelName, fallTime, riseTime, delay):
        """

        :param channelName:
        :type channelName:
        :param fallTime:
        :type fallTime:
        :param riseTime:
        :type riseTime:
        :param delay:
        :type delay:
        """
        return self._dllwrap.ConfigureRampWaveform(self._vi, channelName, fallTime, riseTime, delay)

    def ConfigurePulseWaveform(self, channelName, fallTime, riseTime, delay, width):
        """

        :param channelName:
        :type channelName:
        :param fallTime:
        :type fallTime:
        :param riseTime:
        :type riseTime:
        :param delay:
        :type delay:
        :param width:
        :type width:
        """
        return self._dllwrap.ConfigurePulseWaveform(self._vi, channelName, fallTime, riseTime, delay, width)

    def ConfigureGaussExponential(self, channelName, exponent):
        """

        :param channelName:
        :type channelName:
        :param exponent:
        :type exponent:
        """
        return self._dllwrap.ConfigureGaussExponential(self._vi, channelName, exponent)

    def ConfigureSquareWaveform(self, channelName, dutyCycle):
        """

        :param channelName:
        :type channelName:
        :param dutyCycle:
        :type dutyCycle:
        """
        return self._dllwrap.ConfigureSquareWaveform(self._vi, channelName, dutyCycle)

    def ConfigureSincWaveform(self, channelName, sincCycleCount):
        """

        :param channelName:
        :type channelName:
        :param sincCycleCount:
        :type sincCycleCount:
        """
        return self._dllwrap.ConfigureSincWaveform(self._vi, channelName, sincCycleCount)

    def ConfigureDClevel(self, channelName, dcLevel):
        """

        :param channelName:
        :type channelName:
        :param dcLevel:
        :type dcLevel:
        """
        return self._dllwrap.ConfigureDClevel(self._vi, channelName, dcLevel)

    def ConfigureSampleRate(self, sampleRate):
        """

        :param sampleRate:
        :type sampleRate:
        """
        return self._dllwrap.ConfigureSampleRate(self._vi, sampleRate)

    def ConfigureSampleRateSource(self, source):
        """

        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureSampleRateSource(self._vi, source)

    def QueryArbWfmCapabilities(self):
        """"""
        return self._dllwrap.QueryArbWfmCapabilities(self._vi)

    def GetWfmHandleFromName(self, wfmName):
        """

        :param wfmName:
        :type wfmName:
        """
        return self._dllwrap.GetWfmHandleFromName(self._vi, wfmName)

    def GetWfmNameFromHandle(self, wfmHandle, arraySize):
        """

        :param wfmHandle:
        :type wfmHandle:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetWfmNameFromHandle(self._vi, wfmHandle, arraySize)

    def GetWfmNames(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetWfmNames(self._vi, arraySize)

    def CreateArbWaveform(self, wfmSize, wfmData):
        """

        :param wfmSize:
        :type wfmSize:
        :param wfmData:
        :type wfmData:
        """
        return self._dllwrap.CreateArbWaveform(self._vi, wfmSize, wfmData)

    def ConfigureArbWaveform(self, channelName, wfmHandle, arbGain, arbOffset):
        """

        :param channelName:
        :type channelName:
        :param wfmHandle:
        :type wfmHandle:
        :param arbGain:
        :type arbGain:
        :param arbOffset:
        :type arbOffset:
        """
        return self._dllwrap.ConfigureArbWaveform(self._vi, channelName, wfmHandle, arbGain, arbOffset)

    def ClearArbWaveform(self, wfmHandle):
        """

        :param wfmHandle:
        :type wfmHandle:
        """
        return self._dllwrap.ClearArbWaveform(self._vi, wfmHandle)

    def LoadArbWfmFromFile(self, channelName, fileName):
        """

        :param channelName:
        :type channelName:
        :param fileName:
        :type fileName:
        """
        return self._dllwrap.LoadArbWfmFromFile(self._vi, channelName, fileName)

    def LoadSegmentData(self, number_ofSegments):
        """

        :param number_ofSegments:
        :type number_ofSegments:
        """
        return self._dllwrap.LoadSegmentData(self._vi, number_ofSegments)

    def SetActiveSegment(self, activeSegment):
        """

        :param activeSegment:
        :type activeSegment:
        """
        return self._dllwrap.SetActiveSegment(self._vi, activeSegment)

    def QueryArbSeqCapabilities(self):
        """"""
        return self._dllwrap.QueryArbSeqCapabilities(self._vi)

    def GetSeqHandleFromName(self, seqName):
        """

        :param seqName:
        :type seqName:
        """
        return self._dllwrap.GetSeqHandleFromName(self._vi, seqName)

    def DefineArbWaveformFromFile(self, channelName, fileName, wfmHandle):
        """

        :param channelName:
        :type channelName:
        :param fileName:
        :type fileName:
        :param wfmHandle:
        :type wfmHandle:
        """
        return self._dllwrap.DefineArbWaveformFromFile(self._vi, channelName, fileName, wfmHandle)

    def LoadCSVFile(self, channelName, fileName):
        """

        :param channelName:
        :type channelName:
        :param fileName:
        :type fileName:
        """
        return self._dllwrap.LoadCSVFile(self._vi, channelName, fileName)

    def GetSeqNameFromHandle(self, seqHandle, arraySize):
        """

        :param seqHandle:
        :type seqHandle:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSeqNameFromHandle(self._vi, seqHandle, arraySize)

    def GetSeqNames(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSeqNames(self._vi, arraySize)

    def CreateArbSequence(self, seqLength, wfmHandle, wfmLoopCount):
        """

        :param seqLength:
        :type seqLength:
        :param wfmHandle:
        :type wfmHandle:
        :param wfmLoopCount:
        :type wfmLoopCount:
        """
        return self._dllwrap.CreateArbSequence(self._vi, seqLength, wfmHandle, wfmLoopCount)

    def CreateArbitrarySequenceAdv(self, seqLength, wfmHandle, wfmLoopCount, Mode):
        """

        :param seqLength:
        :type seqLength:
        :param wfmHandle:
        :type wfmHandle:
        :param wfmLoopCount:
        :type wfmLoopCount:
        :param Mode:
        :type Mode:
        """
        return self._dllwrap.CreateArbitrarySequenceAdv(self._vi, seqLength, wfmHandle, wfmLoopCount, Mode)

    def ConfigureSequenceAdvance(self, seqAdvance, source):
        """

        :param seqAdvance:
        :type seqAdvance:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureSequenceAdvance(self._vi, seqAdvance, source)

    def ConfigureArbSequence(self, channelName, seqHandle, arbGain, arbOffset):
        """

        :param channelName:
        :type channelName:
        :param seqHandle:
        :type seqHandle:
        :param arbGain:
        :type arbGain:
        :param arbOffset:
        :type arbOffset:
        """
        return self._dllwrap.ConfigureArbSequence(self._vi, channelName, seqHandle, arbGain, arbOffset)

    def ClearArbSequence(self, seqHandle):
        """

        :param seqHandle:
        :type seqHandle:
        """
        return self._dllwrap.ClearArbSequence(self._vi, seqHandle)

    def ClearArbMemory(self):
        """"""
        return self._dllwrap.ClearArbMemory(self._vi)

    def ConfigureAMEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureAMEnabled(self._vi, channelName, enabled)

    def ConfigureAMSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureAMSource(self._vi, channelName, source)

    def ConfigureAMInternal(self, amDepth, amWaveform, amFrequency):
        """

        :param amDepth:
        :type amDepth:
        :param amWaveform:
        :type amWaveform:
        :param amFrequency:
        :type amFrequency:
        """
        return self._dllwrap.ConfigureAMInternal(self._vi, amDepth, amWaveform, amFrequency)

    def ConfigureFMEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureFMEnabled(self._vi, channelName, enabled)

    def ConfigureFMSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureFMSource(self._vi, channelName, source)

    def ConfigureFMInternal(self, deviation, waveform, frequency):
        """

        :param deviation:
        :type deviation:
        :param waveform:
        :type waveform:
        :param frequency:
        :type frequency:
        """
        return self._dllwrap.ConfigureFMInternal(self._vi, deviation, waveform, frequency)

    def ConfigureFMSampleRate(self, sampleRate):
        """

        :param sampleRate:
        :type sampleRate:
        """
        return self._dllwrap.ConfigureFMSampleRate(self._vi, sampleRate)

    def ConfigureFMMarkerFrequency(self, markerFrequency):
        """

        :param markerFrequency:
        :type markerFrequency:
        """
        return self._dllwrap.ConfigureFMMarkerFrequency(self._vi, markerFrequency)

    def CreateFMArbWaveform(self, wfmSize, wfmData):
        """

        :param wfmSize:
        :type wfmSize:
        :param wfmData:
        :type wfmData:
        """
        return self._dllwrap.CreateFMArbWaveform(self._vi, wfmSize, wfmData)

    def LoadFMArbWfmFromFile(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.LoadFMArbWfmFromFile(self._vi, fileName)

    def ConfigureFSKEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureFSKEnabled(self._vi, enabled)

    def ConfigureFSK(self, shiftFrequency, hopFrequency):
        """

        :param shiftFrequency:
        :type shiftFrequency:
        :param hopFrequency:
        :type hopFrequency:
        """
        return self._dllwrap.ConfigureFSK(self._vi, shiftFrequency, hopFrequency)

    def ConfigureFSKMarker(self, markerIndex):
        """

        :param markerIndex:
        :type markerIndex:
        """
        return self._dllwrap.ConfigureFSKMarker(self._vi, markerIndex)

    def LoadFSKDataFile(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.LoadFSKDataFile(self._vi, fileName)

    def LoadFSKDataArray(self, size, FSKData):
        """

        :param size:
        :type size:
        :param FSKData:
        :type FSKData:
        """
        return self._dllwrap.LoadFSKDataArray(self._vi, size, FSKData)

    def ConfigureSweepEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureSweepEnabled(self._vi, enabled)

    def ConfigureSweep(
        self,
        sweepMode,
        sweepProgression,
        sweepDirection,
        startFrequencyHz,
        stopFrequencyHz,
        times,
        sweepMarkerHz,
    ):
        """

        :param sweepMode:
        :type sweepMode:
        :param sweepProgression:
        :type sweepProgression:
        :param sweepDirection:
        :type sweepDirection:
        :param startFrequencyHz:
        :type startFrequencyHz:
        :param stopFrequencyHz:
        :type stopFrequencyHz:
        :param times:
        :type times:
        :param sweepMarkerHz:
        :type sweepMarkerHz:
        """
        return self._dllwrap.ConfigureSweep(
            self._vi,
            sweepMode,
            sweepProgression,
            sweepDirection,
            startFrequencyHz,
            stopFrequencyHz,
            times,
            sweepMarkerHz,
        )

    def ConfigureHopEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureHopEnabled(self._vi, enabled)

    def ConfigureHopDwell(self, hopDwellMode, hopDwellTime):
        """

        :param hopDwellMode:
        :type hopDwellMode:
        :param hopDwellTime:
        :type hopDwellTime:
        """
        return self._dllwrap.ConfigureHopDwell(self._vi, hopDwellMode, hopDwellTime)

    def ConfigureHopMarker(self, hopMarker):
        """

        :param hopMarker:
        :type hopMarker:
        """
        return self._dllwrap.ConfigureHopMarker(self._vi, hopMarker)

    def LoadHOPDataFile(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.LoadHOPDataFile(self._vi, fileName)

    def LoadFreqHopFixedDataArray(self, size, hopFixData):
        """

        :param size:
        :type size:
        :param hopFixData:
        :type hopFixData:
        """
        return self._dllwrap.LoadFreqHopFixedDataArray(self._vi, size, hopFixData)

    def LoadFreqHopVarDataArray(self, freqData, dwellTimeData, size):
        """

        :param freqData:
        :type freqData:
        :param dwellTimeData:
        :type dwellTimeData:
        :param size:
        :type size:
        """
        return self._dllwrap.LoadFreqHopVarDataArray(self._vi, freqData, dwellTimeData, size)

    def ConfigurePSKEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigurePSKEnabled(self._vi, enabled)

    def ConfigurePSK(self, startPhase, shiftedPhase, rate):
        """

        :param startPhase:
        :type startPhase:
        :param shiftedPhase:
        :type shiftedPhase:
        :param rate:
        :type rate:
        """
        return self._dllwrap.ConfigurePSK(self._vi, startPhase, shiftedPhase, rate)

    def ConfigurePSKMarker(self, markerIndex):
        """

        :param markerIndex:
        :type markerIndex:
        """
        return self._dllwrap.ConfigurePSKMarker(self._vi, markerIndex)

    def ConfigurenPSK(self, pskType, symbolRate):
        """

        :param pskType:
        :type pskType:
        :param symbolRate:
        :type symbolRate:
        """
        return self._dllwrap.ConfigurenPSK(self._vi, pskType, symbolRate)

    def ConfigurePSKCWEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigurePSKCWEnabled(self._vi, enabled)

    def LoadPSKDataFile(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.LoadPSKDataFile(self._vi, fileName)

    def LoadPSKDataArray(self, size, PSKData):
        """

        :param size:
        :type size:
        :param PSKData:
        :type PSKData:
        """
        return self._dllwrap.LoadPSKDataArray(self._vi, size, PSKData)

    def LoadPSKUserDataArray(self, size, phaseData):
        """

        :param size:
        :type size:
        :param phaseData:
        :type phaseData:
        """
        return self._dllwrap.LoadPSKUserDataArray(self._vi, size, phaseData)

    def Configure3DEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.Configure3DEnabled(self._vi, enabled)

    def Configure3DMarker(self, Marker):
        """

        :param Marker:
        :type Marker:
        """
        return self._dllwrap.Configure3DMarker(self._vi, Marker)

    def Configure3DSampleRate(self, sampleRate):
        """

        :param sampleRate:
        :type sampleRate:
        """
        return self._dllwrap.Configure3DSampleRate(self._vi, sampleRate)

    def ConfigureASKEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureASKEnabled(self._vi, enabled)

    def ConfigureASKAmplitude(self, channelName, startAmplitude, shiftedAmplitude):
        """

        :param channelName:
        :type channelName:
        :param startAmplitude:
        :type startAmplitude:
        :param shiftedAmplitude:
        :type shiftedAmplitude:
        """
        return self._dllwrap.ConfigureASKAmplitude(self._vi, channelName, startAmplitude, shiftedAmplitude)

    def ConfigureASKMarker(self, markerIndex):
        """

        :param markerIndex:
        :type markerIndex:
        """
        return self._dllwrap.ConfigureASKMarker(self._vi, markerIndex)

    def ConfigureASKBaud(self, baud):
        """

        :param baud:
        :type baud:
        """
        return self._dllwrap.ConfigureASKBaud(self._vi, baud)

    def LoadASKDataFile(self, channelName, fileName):
        """

        :param channelName:
        :type channelName:
        :param fileName:
        :type fileName:
        """
        return self._dllwrap.LoadASKDataFile(self._vi, channelName, fileName)

    def LoadASKDataArray(self, channelName, size, ASKData):
        """

        :param channelName:
        :type channelName:
        :param size:
        :type size:
        :param ASKData:
        :type ASKData:
        """
        return self._dllwrap.LoadASKDataArray(self._vi, channelName, size, ASKData)

    def ConfigureAHOPEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureAHOPEnabled(self._vi, enabled)

    def ConfigureAHOPDwell(self, ahopDwellMode, ahopDwellTime):
        """

        :param ahopDwellMode:
        :type ahopDwellMode:
        :param ahopDwellTime:
        :type ahopDwellTime:
        """
        return self._dllwrap.ConfigureAHOPDwell(self._vi, ahopDwellMode, ahopDwellTime)

    def ConfigureAHOPMarker(self, ahopMarker):
        """

        :param ahopMarker:
        :type ahopMarker:
        """
        return self._dllwrap.ConfigureAHOPMarker(self._vi, ahopMarker)

    def LoadAHOPDataFile(self, channelName, fileName):
        """

        :param channelName:
        :type channelName:
        :param fileName:
        :type fileName:
        """
        return self._dllwrap.LoadAHOPDataFile(self._vi, channelName, fileName)

    def LoadAHOPFixedDataArray(self, channelName, size, amplitudeData):
        """

        :param channelName:
        :type channelName:
        :param size:
        :type size:
        :param amplitudeData:
        :type amplitudeData:
        """
        return self._dllwrap.LoadAHOPFixedDataArray(self._vi, channelName, size, amplitudeData)

    def LoadAHOPVarDataArray(self, channelName, size, amplitudeData, dwellTimeData):
        """

        :param channelName:
        :type channelName:
        :param size:
        :type size:
        :param amplitudeData:
        :type amplitudeData:
        :param dwellTimeData:
        :type dwellTimeData:
        """
        return self._dllwrap.LoadAHOPVarDataArray(self._vi, channelName, size, amplitudeData, dwellTimeData)

    def ConfigureQAMEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureQAMEnabled(self._vi, enabled)

    def ConfigureQAMCWEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureQAMCWEnabled(self._vi, enabled)

    def ConfigureQAM(self, baud, QAMtype):
        """

        :param baud:
        :type baud:
        :param QAMtype:
        :type QAMtype:
        """
        return self._dllwrap.ConfigureQAM(self._vi, baud, QAMtype)

    def ConfigureQAMMarker(self, QAMMarker):
        """

        :param QAMMarker:
        :type QAMMarker:
        """
        return self._dllwrap.ConfigureQAMMarker(self._vi, QAMMarker)

    def LoadQAMDataFile(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.LoadQAMDataFile(self._vi, fileName)

    def LoadQAMDataArray(self, size, QAMData):
        """

        :param size:
        :type size:
        :param QAMData:
        :type QAMData:
        """
        return self._dllwrap.LoadQAMDataArray(self._vi, size, QAMData)

    def LoadQAMUserDataArray(self, size, arrI, arrQ):
        """

        :param size:
        :type size:
        :param arrI:
        :type arrI:
        :param arrQ:
        :type arrQ:
        """
        return self._dllwrap.LoadQAMUserDataArray(self._vi, size, arrI, arrQ)

    def ConfigureModCarrierFreq(self, modCarrierFreq):
        """

        :param modCarrierFreq:
        :type modCarrierFreq:
        """
        return self._dllwrap.ConfigureModCarrierFreq(self._vi, modCarrierFreq)

    def ConfigureModCarrierBaseline(self, carrierBaseline):
        """

        :param carrierBaseline:
        :type carrierBaseline:
        """
        return self._dllwrap.ConfigureModCarrierBaseline(self._vi, carrierBaseline)

    def LoadModulationDemoTable(self):
        """"""
        return self._dllwrap.LoadModulationDemoTable(self._vi)

    def ConfigureTriggerSource(self, channelName, trigSource):
        """

        :param channelName:
        :type channelName:
        :param trigSource:
        :type trigSource:
        """
        return self._dllwrap.ConfigureTriggerSource(self._vi, channelName, trigSource)

    def ConfigureReTrigger(self, reTriggerTime, enabled):
        """

        :param reTriggerTime:
        :type reTriggerTime:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureReTrigger(self._vi, reTriggerTime, enabled)

    def ConfigureTriggerSlope(self, slope):
        """

        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureTriggerSlope(self._vi, slope)

    def ConfigureTriggerLevel(self, triggerLevel):
        """

        :param triggerLevel:
        :type triggerLevel:
        """
        return self._dllwrap.ConfigureTriggerLevel(self._vi, triggerLevel)

    def ConfigureTriggerDelay(self, triggerDelay):
        """

        :param triggerDelay:
        :type triggerDelay:
        """
        return self._dllwrap.ConfigureTriggerDelay(self._vi, triggerDelay)

    def ConfigureTriggerDelayEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureTriggerDelayEnabled(self._vi, enabled)

    def ConfigureDigitalEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDigitalEnabled(self._vi, enabled)

    def ConfigureDigitalRate(self, digitalRate):
        """

        :param digitalRate:
        :type digitalRate:
        """
        return self._dllwrap.ConfigureDigitalRate(self._vi, digitalRate)

    def LoadDigitalDataFile(self, fileName, mode):
        """

        :param fileName:
        :type fileName:
        :param mode:
        :type mode:
        """
        return self._dllwrap.LoadDigitalDataFile(self._vi, fileName, mode)

    def LoadDigitalDataArray(self, size, digitalData, mode):
        """

        :param size:
        :type size:
        :param digitalData:
        :type digitalData:
        :param mode:
        :type mode:
        """
        return self._dllwrap.LoadDigitalDataArray(self._vi, size, digitalData, mode)

    def DigitalChannelSetup(self, channelNumber, highLevel, lowLevel):
        """

        :param channelNumber:
        :type channelNumber:
        :param highLevel:
        :type highLevel:
        :param lowLevel:
        :type lowLevel:
        """
        return self._dllwrap.DigitalChannelSetup(self._vi, channelNumber, highLevel, lowLevel)

    def ConfigureHalfCycleWave(self, channelName, halfCycleWave, phase, dutyCycle):
        """

        :param channelName:
        :type channelName:
        :param halfCycleWave:
        :type halfCycleWave:
        :param phase:
        :type phase:
        :param dutyCycle:
        :type dutyCycle:
        """
        return self._dllwrap.ConfigureHalfCycleWave(self._vi, channelName, halfCycleWave, phase, dutyCycle)

    def ConfigureHalfCycleDelay(self, delay):
        """

        :param delay:
        :type delay:
        """
        return self._dllwrap.ConfigureHalfCycleDelay(self._vi, delay)

    def ConfigureHalfCycleFrequency(self, frequency):
        """

        :param frequency:
        :type frequency:
        """
        return self._dllwrap.ConfigureHalfCycleFrequency(self._vi, frequency)

    def ConfigurePulseEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigurePulseEnabled(self._vi, channelName, enabled)

    def ConfigurePulseLevel(self, channelName, highLevel, lowLevel):
        """

        :param channelName:
        :type channelName:
        :param highLevel:
        :type highLevel:
        :param lowLevel:
        :type lowLevel:
        """
        return self._dllwrap.ConfigurePulseLevel(self._vi, channelName, highLevel, lowLevel)

    def ConfigurePulsePolarity(self, channelName, pulsePolarity):
        """

        :param channelName:
        :type channelName:
        :param pulsePolarity:
        :type pulsePolarity:
        """
        return self._dllwrap.ConfigurePulsePolarity(self._vi, channelName, pulsePolarity)

    def ConfigurePulse(self, highTime, period, riseTime, fallTime):
        """

        :param highTime:
        :type highTime:
        :param period:
        :type period:
        :param riseTime:
        :type riseTime:
        :param fallTime:
        :type fallTime:
        """
        return self._dllwrap.ConfigurePulse(self._vi, highTime, period, riseTime, fallTime)

    def ConfigurePulseAdv(self, channelName, transition, leading, trailing, width, dutyCycle):
        """

        :param channelName:
        :type channelName:
        :param transition:
        :type transition:
        :param leading:
        :type leading:
        :param trailing:
        :type trailing:
        :param width:
        :type width:
        :param dutyCycle:
        :type dutyCycle:
        """
        return self._dllwrap.ConfigurePulseAdv(self._vi, channelName, transition, leading, trailing, width, dutyCycle)

    def ConfigurePulseDelay(self, channelName, delay):
        """

        :param channelName:
        :type channelName:
        :param delay:
        :type delay:
        """
        return self._dllwrap.ConfigurePulseDelay(self._vi, channelName, delay)

    def ConfigureDoublePulseEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDoublePulseEnabled(self._vi, enabled)

    def ConfigureDoublePulseDelay(self, delay):
        """

        :param delay:
        :type delay:
        """
        return self._dllwrap.ConfigureDoublePulseDelay(self._vi, delay)

    def ConfigurePulseMode(self, channelName, pulseMode):
        """

        :param channelName:
        :type channelName:
        :param pulseMode:
        :type pulseMode:
        """
        return self._dllwrap.ConfigurePulseMode(self._vi, channelName, pulseMode)

    def ConfigurePulseLevelMode(self, channelName, pulseLevelMode):
        """

        :param channelName:
        :type channelName:
        :param pulseLevelMode:
        :type pulseLevelMode:
        """
        return self._dllwrap.ConfigurePulseLevelMode(self._vi, channelName, pulseLevelMode)

    def ConfigurePulsePeriod(self, period):
        """

        :param period:
        :type period:
        """
        return self._dllwrap.ConfigurePulsePeriod(self._vi, period)

    def ConfigurePWMSettings(self, source, period, deviation):
        """

        :param source:
        :type source:
        :param period:
        :type period:
        :param deviation:
        :type deviation:
        """
        return self._dllwrap.ConfigurePWMSettings(self._vi, source, period, deviation)

    def ConfigurePulseBurst(self, transBurst):
        """

        :param transBurst:
        :type transBurst:
        """
        return self._dllwrap.ConfigurePulseBurst(self._vi, transBurst)

    def ConfigureBurstCount(self, channelName, burstCount):
        """

        :param channelName:
        :type channelName:
        :param burstCount:
        :type burstCount:
        """
        return self._dllwrap.ConfigureBurstCount(self._vi, channelName, burstCount)

    def ConfigurePhaseOffset(self, channelName, phaseOffset):
        """

        :param channelName:
        :type channelName:
        :param phaseOffset:
        :type phaseOffset:
        """
        return self._dllwrap.ConfigurePhaseOffset(self._vi, channelName, phaseOffset)

    def ConfigureCoupleEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureCoupleEnabled(self._vi, enabled)

    def ConfigureCoupleDelay(self, coupleDelay):
        """

        :param coupleDelay:
        :type coupleDelay:
        """
        return self._dllwrap.ConfigureCoupleDelay(self._vi, coupleDelay)

    def InsertSlave(self, IPAddress):
        """

        :param IPAddress:
        :type IPAddress:
        """
        return self._dllwrap.InsertSlave(self._vi, IPAddress)

    def DeleteSlaves(self):
        """"""
        return self._dllwrap.DeleteSlaves(self._vi)

    def ConfigureCounter(self, counterDisplayMode, gateTime, counterMode):
        """

        :param counterDisplayMode:
        :type counterDisplayMode:
        :param gateTime:
        :type gateTime:
        :param counterMode:
        :type counterMode:
        """
        return self._dllwrap.ConfigureCounter(self._vi, counterDisplayMode, gateTime, counterMode)

    def ReadCounterValue(self):
        """"""
        return self._dllwrap.ReadCounterValue(self._vi)

    def ResetCounter(self):
        """"""
        return self._dllwrap.ResetCounter(self._vi)

    def StoreCell(self, storeCell):
        """

        :param storeCell:
        :type storeCell:
        """
        return self._dllwrap.StoreCell(self._vi, storeCell)

    def RecallCell(self, recallCell):
        """

        :param recallCell:
        :type recallCell:
        """
        return self._dllwrap.RecallCell(self._vi, recallCell)

    def ClearCell(self, clearCell):
        """

        :param clearCell:
        :type clearCell:
        """
        return self._dllwrap.ClearCell(self._vi, clearCell)

    def GetChannelName(self, index, bufferSize):
        """

        :param index:
        :type index:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, index, bufferSize)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def SetActiveChannel(self, channelName):
        """

        :param channelName:
        :type channelName:
        """
        return self._dllwrap.SetActiveChannel(self._vi, channelName)

    def GetAmplOffsetLimits(self):
        """"""
        return self._dllwrap.GetAmplOffsetLimits(self._vi)

    def GetError(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """

        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def GetAttributeViInt32(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName, attribute, bufSize):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param bufSize:
        :type bufSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)

    def IviInit(self, resourceName, IDQuery, reset):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param reset:
        :type reset:
        """
        return self._dllwrap.IviInit(resourceName, IDQuery, reset, self._vi)

    def IviClose(self):
        """"""
        return self._dllwrap.IviClose(self._vi)

    def GetErrorInfo(self):
        """"""
        return self._dllwrap.GetErrorInfo(self._vi)

    def ClearErrorInfo(self):
        """"""
        return self._dllwrap.ClearErrorInfo(self._vi)
