from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import ww257x_const as const
from .ww257x_const import *


class ww257x_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("ww257x_32.dll", "ww257x_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "ww257x"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        status = self.dll.ww257x_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        status = self.dll.ww257x_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViString(optionString),
            byref(newVi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(newVi.value)

    def close(self, vi):
        status = self.dll.ww257x_close(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(1024)
        status = self.dll.ww257x_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(record)

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(1024)
        status = self.dll.ww257x_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        status = self.dll.ww257x_ResetInterchangeCheck(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, vi):
        status = self.dll.ww257x_ClearInterchangeWarnings(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.ww257x_LockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.ww257x_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def ConfigureOperationMode(self, vi, channelName, operMode):
        status = self.dll.ww257x_ConfigureOperationMode(ViSession(vi), ViConstString(channelName), ViInt32(operMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputMode(self, vi, opMode):
        status = self.dll.ww257x_ConfigureOutputMode(ViSession(vi), ViInt32(opMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefClockSource(self, vi, refClockSource):
        status = self.dll.ww257x_ConfigureRefClockSource(ViSession(vi), ViInt32(refClockSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputImpedance(self, vi, channelName, outputImpedance):
        status = self.dll.ww257x_ConfigureOutputImpedance(
            ViSession(vi), ViConstString(channelName), ViReal64(outputImpedance)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputEnabled(self, vi, channelName, outputEnabled):
        status = self.dll.ww257x_ConfigureOutputEnabled(
            ViSession(vi), ViConstString(channelName), ViBoolean(outputEnabled)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFilter(self, vi, channelName, filter):
        status = self.dll.ww257x_ConfigureFilter(ViSession(vi), ViConstString(channelName), ViInt32(filter))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSyncSignal(self, vi, wfmHandle, syncType, syncEnabled, syncPosition):
        status = self.dll.ww257x_ConfigureSyncSignal(
            ViSession(vi),
            ViInt32(wfmHandle),
            ViInt32(syncType),
            ViBoolean(syncEnabled),
            ViInt32(syncPosition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitiateGeneration(self, vi):
        status = self.dll.ww257x_InitiateGeneration(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AbortGeneration(self, vi):
        status = self.dll.ww257x_AbortGeneration(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureStandardWaveform(self, vi, channelName, waveform, amplitude, dcOffset, frequency, startPhase):
        status = self.dll.ww257x_ConfigureStandardWaveform(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(waveform),
            ViReal64(amplitude),
            ViReal64(dcOffset),
            ViReal64(frequency),
            ViReal64(startPhase),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRampWaveform(self, vi, channelName, fallTime, riseTime, delay):
        status = self.dll.ww257x_ConfigureRampWaveform(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(fallTime),
            ViReal64(riseTime),
            ViReal64(delay),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseWaveform(self, vi, channelName, fallTime, riseTime, delay, width):
        status = self.dll.ww257x_ConfigurePulseWaveform(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(fallTime),
            ViReal64(riseTime),
            ViReal64(delay),
            ViReal64(width),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGaussExponential(self, vi, channelName, exponent):
        status = self.dll.ww257x_ConfigureGaussExponential(ViSession(vi), ViConstString(channelName), ViInt32(exponent))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSquareWaveform(self, instrumentHandle, channelName, dutyCycle):
        status = self.dll.ww257x_ConfigureSquareWaveform(
            ViSession(instrumentHandle), ViConstString(channelName), ViReal64(dutyCycle)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSincWaveform(self, vi, channelName, sincCycleCount):
        status = self.dll.ww257x_ConfigureSincWaveform(
            ViSession(vi), ViConstString(channelName), ViInt32(sincCycleCount)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDClevel(self, vi, channelName, dcLevel):
        status = self.dll.ww257x_ConfigureDClevel(ViSession(vi), ViConstString(channelName), ViReal64(dcLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSampleRate(self, vi, sampleRate):
        status = self.dll.ww257x_ConfigureSampleRate(ViSession(vi), ViReal64(sampleRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSampleRateSource(self, vi, source):
        status = self.dll.ww257x_ConfigureSampleRateSource(ViSession(vi), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryArbWfmCapabilities(self, vi):
        maxNumWfms = ViInt32()
        wfmQuantum = ViInt32()
        minWfmSize = ViInt32()
        maxWfmSize = ViInt32()
        status = self.dll.ww257x_QueryArbWfmCapabilities(
            ViSession(vi),
            byref(maxNumWfms),
            byref(wfmQuantum),
            byref(minWfmSize),
            byref(maxWfmSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        maxNumWfms = int(maxNumWfms.value)
        wfmQuantum = int(wfmQuantum.value)
        minWfmSize = int(minWfmSize.value)
        maxWfmSize = int(maxWfmSize.value)
        return maxNumWfms, wfmQuantum, minWfmSize, maxWfmSize

    def GetWfmHandleFromName(self, vi, wfmName):
        wfmHandle = ViInt32()
        status = self.dll.ww257x_GetWfmHandleFromName(ViSession(vi), ViConstString(wfmName), byref(wfmHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(wfmHandle.value)

    def GetWfmNameFromHandle(self, vi, wfmHandle, arraySize):
        wfmName = ARRAY_ViChar(1024)
        status = self.dll.ww257x_GetWfmNameFromHandle(ViSession(vi), ViInt32(wfmHandle), ViInt32(arraySize), wfmName)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(wfmName)

    def GetWfmNames(self, vi, arraySize):
        wfmNamesChan = ARRAY_ViChar(1024)
        status = self.dll.ww257x_GetWfmNames(ViSession(vi), ViInt32(arraySize), wfmNamesChan)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(wfmNamesChan)

    def CreateArbWaveform(self, vi, wfmSize, wfmData):
        _wfmData = (ViReal64 * len(wfmData))(*wfmData)
        wfmHandle = ViInt32()
        status = self.dll.ww257x_CreateArbWaveform(ViSession(vi), ViInt32(wfmSize), _wfmData, byref(wfmHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(wfmHandle.value)

    def ConfigureArbWaveform(self, vi, channelName, wfmHandle, arbGain, arbOffset):
        status = self.dll.ww257x_ConfigureArbWaveform(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(wfmHandle),
            ViReal64(arbGain),
            ViReal64(arbOffset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearArbWaveform(self, vi, wfmHandle):
        status = self.dll.ww257x_ClearArbWaveform(ViSession(vi), ViInt32(wfmHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadArbWfmFromFile(self, vi, channelName, fileName):
        wfmHandle = ViInt32()
        status = self.dll.ww257x_LoadArbWfmFromFile(
            ViSession(vi),
            ViConstString(channelName),
            ViConstString(fileName),
            byref(wfmHandle),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(wfmHandle.value)

    def LoadSegmentData(self, vi, number_ofSegments):
        wfmHandles = ARRAY_ViInt32(1024)
        status = self.dll.ww257x_LoadSegmentData(ViSession(vi), ViInt32(number_ofSegments), wfmHandles)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return wfmHandles

    def SetActiveSegment(self, vi, activeSegment):
        status = self.dll.ww257x_SetActiveSegment(ViSession(vi), ViInt32(activeSegment))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryArbSeqCapabilities(self, vi):
        maxNumSeqs = ViInt32()
        minSeqLength = ViInt32()
        maxSeqLength = ViInt32()
        maxLoopCount = ViInt32()
        status = self.dll.ww257x_QueryArbSeqCapabilities(
            ViSession(vi),
            byref(maxNumSeqs),
            byref(minSeqLength),
            byref(maxSeqLength),
            byref(maxLoopCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        maxNumSeqs = int(maxNumSeqs.value)
        minSeqLength = int(minSeqLength.value)
        maxSeqLength = int(maxSeqLength.value)
        maxLoopCount = int(maxLoopCount.value)
        return maxNumSeqs, minSeqLength, maxSeqLength, maxLoopCount

    def GetSeqHandleFromName(self, vi, seqName):
        seqHandle = ViInt32()
        status = self.dll.ww257x_GetSeqHandleFromName(ViSession(vi), ViConstString(seqName), byref(seqHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(seqHandle.value)

    def SetActiveSegment(self, vi, activeSegment):
        status = self.dll.ww257x_SetActiveSegment(ViSession(vi), ViInt32(activeSegment))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DefineArbWaveformFromFile(self, vi, channelName, fileName, wfmHandle):
        status = self.dll.ww257x_DefineArbWaveformFromFile(
            ViSession(vi),
            ViConstString(channelName),
            ViConstString(fileName),
            ViInt32(wfmHandle),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadCSVFile(self, vi, channelName, fileName):
        wfmHandle = ViInt32()
        status = self.dll.ww257x_LoadCSVFile(
            ViSession(vi),
            ViConstString(channelName),
            ViConstString(fileName),
            byref(wfmHandle),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(wfmHandle.value)

    def GetSeqNameFromHandle(self, vi, seqHandle, arraySize):
        seqName = ARRAY_ViChar(1024)
        status = self.dll.ww257x_GetSeqNameFromHandle(ViSession(vi), ViInt32(seqHandle), ViInt32(arraySize), seqName)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(seqName)

    def GetSeqNames(self, vi, arraySize):
        seqNames = ARRAY_ViChar(1024)
        status = self.dll.ww257x_GetSeqNames(ViSession(vi), ViInt32(arraySize), seqNames)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(seqNames)

    def CreateArbSequence(self, vi, seqLength, wfmHandle, wfmLoopCount):
        _wfmHandle = (ViInt32 * len(wfmHandle))(*wfmHandle)
        _wfmLoopCount = (ViInt32 * len(wfmLoopCount))(*wfmLoopCount)
        seqHandle = ViInt32()
        status = self.dll.ww257x_CreateArbSequence(
            ViSession(vi), ViInt32(seqLength), _wfmHandle, _wfmLoopCount, byref(seqHandle)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(seqHandle.value)

    def CreateArbitrarySequenceAdv(self, vi, seqLength, wfmHandle, wfmLoopCount, Mode):
        _wfmHandle = (ViInt32 * len(wfmHandle))(*wfmHandle)
        _wfmLoopCount = (ViInt32 * len(wfmLoopCount))(*wfmLoopCount)
        _Mode = (ViUInt8 * len(Mode))(*Mode)
        seqHandle = ViInt32()
        status = self.dll.ww257x_CreateArbitrarySequenceAdv(
            ViSession(vi),
            ViInt32(seqLength),
            _wfmHandle,
            _wfmLoopCount,
            _Mode,
            byref(seqHandle),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(seqHandle.value)

    def ConfigureSequenceAdvance(self, vi, seqAdvance, source):
        status = self.dll.ww257x_ConfigureSequenceAdvance(ViSession(vi), ViInt32(seqAdvance), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureArbSequence(self, vi, channelName, seqHandle, arbGain, arbOffset):
        status = self.dll.ww257x_ConfigureArbSequence(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(seqHandle),
            ViReal64(arbGain),
            ViReal64(arbOffset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearArbSequence(self, vi, seqHandle):
        status = self.dll.ww257x_ClearArbSequence(ViSession(vi), ViInt32(seqHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearArbMemory(self, vi):
        status = self.dll.ww257x_ClearArbMemory(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAMEnabled(self, vi, channelName, enabled):
        status = self.dll.ww257x_ConfigureAMEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAMSource(self, vi, channelName, source):
        status = self.dll.ww257x_ConfigureAMSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAMInternal(self, vi, amDepth, amWaveform, amFrequency):
        status = self.dll.ww257x_ConfigureAMInternal(
            ViSession(vi), ViReal64(amDepth), ViInt32(amWaveform), ViReal64(amFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMEnabled(self, vi, channelName, enabled):
        status = self.dll.ww257x_ConfigureFMEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMSource(self, vi, channelName, source):
        status = self.dll.ww257x_ConfigureFMSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMInternal(self, vi, deviation, waveform, frequency):
        status = self.dll.ww257x_ConfigureFMInternal(
            ViSession(vi), ViReal64(deviation), ViInt32(waveform), ViReal64(frequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMSampleRate(self, vi, sampleRate):
        status = self.dll.ww257x_ConfigureFMSampleRate(ViSession(vi), ViReal64(sampleRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFMMarkerFrequency(self, vi, markerFrequency):
        status = self.dll.ww257x_ConfigureFMMarkerFrequency(ViSession(vi), ViReal64(markerFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CreateFMArbWaveform(self, vi, wfmSize, wfmData):
        _wfmData = (ViReal64 * len(wfmData))(*wfmData)
        status = self.dll.ww257x_CreateFMArbWaveform(ViSession(vi), ViInt32(wfmSize), _wfmData)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadFMArbWfmFromFile(self, vi, fileName):
        status = self.dll.ww257x_LoadFMArbWfmFromFile(ViSession(vi), ViConstString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFSKEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigureFSKEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFSK(self, vi, shiftFrequency, hopFrequency):
        status = self.dll.ww257x_ConfigureFSK(ViSession(vi), ViReal64(shiftFrequency), ViReal64(hopFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFSKMarker(self, vi, markerIndex):
        status = self.dll.ww257x_ConfigureFSKMarker(ViSession(vi), ViInt32(markerIndex))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadFSKDataFile(self, vi, fileName):
        status = self.dll.ww257x_LoadFSKDataFile(ViSession(vi), ViConstString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadFSKDataArray(self, vi, size, FSKData):
        _FSKData = (ViUInt8 * len(FSKData))(*FSKData)
        status = self.dll.ww257x_LoadFSKDataArray(ViSession(vi), ViInt16(size), _FSKData)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSweepEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigureSweepEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSweep(
        self,
        vi,
        sweepMode,
        sweepProgression,
        sweepDirection,
        startFrequencyHz,
        stopFrequencyHz,
        times,
        sweepMarkerHz,
    ):
        status = self.dll.ww257x_ConfigureSweep(
            ViSession(vi),
            ViInt32(sweepMode),
            ViInt32(sweepProgression),
            ViInt32(sweepDirection),
            ViReal64(startFrequencyHz),
            ViReal64(stopFrequencyHz),
            ViReal64(times),
            ViReal64(sweepMarkerHz),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureHopEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigureHopEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureHopDwell(self, vi, hopDwellMode, hopDwellTime):
        status = self.dll.ww257x_ConfigureHopDwell(ViSession(vi), ViInt32(hopDwellMode), ViReal64(hopDwellTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureHopMarker(self, vi, hopMarker):
        status = self.dll.ww257x_ConfigureHopMarker(ViSession(vi), ViInt32(hopMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadHOPDataFile(self, vi, fileName):
        status = self.dll.ww257x_LoadHOPDataFile(ViSession(vi), ViConstString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadFreqHopFixedDataArray(self, vi, size, hopFixData):
        _hopFixData = (ViReal64 * len(hopFixData))(*hopFixData)
        status = self.dll.ww257x_LoadFreqHopFixedDataArray(ViSession(vi), ViInt16(size), _hopFixData)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadFreqHopVarDataArray(self, vi, freqData, dwellTimeData, size):
        _freqData = (ViReal64 * len(freqData))(*freqData)
        _dwellTimeData = (ViReal64 * len(dwellTimeData))(*dwellTimeData)
        status = self.dll.ww257x_LoadFreqHopVarDataArray(ViSession(vi), _freqData, _dwellTimeData, ViInt16(size))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePSKEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigurePSKEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePSK(self, vi, startPhase, shiftedPhase, rate):
        status = self.dll.ww257x_ConfigurePSK(
            ViSession(vi), ViReal64(startPhase), ViReal64(shiftedPhase), ViReal64(rate)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePSKMarker(self, vi, markerIndex):
        status = self.dll.ww257x_ConfigurePSKMarker(ViSession(vi), ViInt32(markerIndex))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurenPSK(self, vi, pskType, symbolRate):
        status = self.dll.ww257x_ConfigurenPSK(ViSession(vi), ViInt32(pskType), ViReal64(symbolRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePSKCWEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigurePSKCWEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadPSKDataFile(self, vi, fileName):
        status = self.dll.ww257x_LoadPSKDataFile(ViSession(vi), ViConstString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadPSKDataArray(self, vi, size, PSKData):
        _PSKData = (ViUInt8 * len(PSKData))(*PSKData)
        status = self.dll.ww257x_LoadPSKDataArray(ViSession(vi), ViInt16(size), _PSKData)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadPSKUserDataArray(self, vi, size, phaseData):
        _phaseData = (ViReal32 * len(phaseData))(*phaseData)
        status = self.dll.ww257x_LoadPSKUserDataArray(ViSession(vi), ViInt16(size), _phaseData)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Configure3DEnabled(self, vi, enabled):
        status = self.dll.ww257x_Configure3DEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Configure3DMarker(self, vi, Marker):
        status = self.dll.ww257x_Configure3DMarker(ViSession(vi), ViInt32(Marker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Configure3DSampleRate(self, vi, sampleRate):
        status = self.dll.ww257x_Configure3DSampleRate(ViSession(vi), ViReal64(sampleRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureASKEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigureASKEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureASKAmplitude(self, vi, channelName, startAmplitude, shiftedAmplitude):
        status = self.dll.ww257x_ConfigureASKAmplitude(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(startAmplitude),
            ViReal64(shiftedAmplitude),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureASKMarker(self, vi, markerIndex):
        status = self.dll.ww257x_ConfigureASKMarker(ViSession(vi), ViInt32(markerIndex))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureASKBaud(self, vi, baud):
        status = self.dll.ww257x_ConfigureASKBaud(ViSession(vi), ViReal64(baud))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadASKDataFile(self, vi, channelName, fileName):
        status = self.dll.ww257x_LoadASKDataFile(ViSession(vi), ViConstString(channelName), ViConstString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadASKDataArray(self, vi, channelName, size, ASKData):
        _ASKData = (ViUInt8 * len(ASKData))(*ASKData)
        status = self.dll.ww257x_LoadASKDataArray(ViSession(vi), ViConstString(channelName), ViInt16(size), _ASKData)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAHOPEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigureAHOPEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAHOPDwell(self, vi, ahopDwellMode, ahopDwellTime):
        status = self.dll.ww257x_ConfigureAHOPDwell(ViSession(vi), ViInt32(ahopDwellMode), ViReal64(ahopDwellTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAHOPMarker(self, vi, ahopMarker):
        status = self.dll.ww257x_ConfigureAHOPMarker(ViSession(vi), ViInt32(ahopMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadAHOPDataFile(self, vi, channelName, fileName):
        status = self.dll.ww257x_LoadAHOPDataFile(ViSession(vi), ViConstString(channelName), ViConstString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadAHOPFixedDataArray(self, vi, channelName, size, amplitudeData):
        _amplitudeData = (ViReal32 * len(amplitudeData))(*amplitudeData)
        status = self.dll.ww257x_LoadAHOPFixedDataArray(
            ViSession(vi), ViConstString(channelName), ViInt16(size), _amplitudeData
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadAHOPVarDataArray(self, vi, channelName, size, amplitudeData, dwellTimeData):
        _amplitudeData = (ViReal64 * len(amplitudeData))(*amplitudeData)
        _dwellTimeData = (ViReal64 * len(dwellTimeData))(*dwellTimeData)
        status = self.dll.ww257x_LoadAHOPVarDataArray(
            ViSession(vi),
            ViConstString(channelName),
            ViInt16(size),
            _amplitudeData,
            _dwellTimeData,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureQAMEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigureQAMEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureQAMCWEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigureQAMCWEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureQAM(self, vi, baud, QAMtype):
        status = self.dll.ww257x_ConfigureQAM(ViSession(vi), ViReal64(baud), ViInt32(QAMtype))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureQAMMarker(self, vi, QAMMarker):
        status = self.dll.ww257x_ConfigureQAMMarker(ViSession(vi), ViInt32(QAMMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadQAMDataFile(self, vi, fileName):
        status = self.dll.ww257x_LoadQAMDataFile(ViSession(vi), ViConstString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadQAMDataArray(self, vi, size, QAMData):
        _QAMData = (ViUInt8 * len(QAMData))(*QAMData)
        status = self.dll.ww257x_LoadQAMDataArray(ViSession(vi), ViInt16(size), _QAMData)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadQAMUserDataArray(self, vi, size, arrI, arrQ):
        _arrI = (ViReal32 * len(arrI))(*arrI)
        _arrQ = (ViReal32 * len(arrQ))(*arrQ)
        status = self.dll.ww257x_LoadQAMUserDataArray(ViSession(vi), ViInt16(size), _arrI, _arrQ)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureModCarrierFreq(self, vi, modCarrierFreq):
        status = self.dll.ww257x_ConfigureModCarrierFreq(ViSession(vi), ViReal64(modCarrierFreq))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureModCarrierBaseline(self, vi, carrierBaseline):
        status = self.dll.ww257x_ConfigureModCarrierBaseline(ViSession(vi), ViInt32(carrierBaseline))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadModulationDemoTable(self, vi):
        status = self.dll.ww257x_LoadModulationDemoTable(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerSource(self, vi, channelName, trigSource):
        status = self.dll.ww257x_ConfigureTriggerSource(ViSession(vi), ViConstString(channelName), ViInt32(trigSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureReTrigger(self, vi, reTriggerTime, enabled):
        status = self.dll.ww257x_ConfigureReTrigger(ViSession(vi), ViReal64(reTriggerTime), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerSlope(self, vi, slope):
        status = self.dll.ww257x_ConfigureTriggerSlope(ViSession(vi), ViInt32(slope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerLevel(self, vi, triggerLevel):
        status = self.dll.ww257x_ConfigureTriggerLevel(ViSession(vi), ViReal64(triggerLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerDelay(self, vi, triggerDelay):
        status = self.dll.ww257x_ConfigureTriggerDelay(ViSession(vi), ViReal64(triggerDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerDelayEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigureTriggerDelayEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigureDigitalEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalRate(self, vi, digitalRate):
        status = self.dll.ww257x_ConfigureDigitalRate(ViSession(vi), ViReal64(digitalRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadDigitalDataFile(self, vi, fileName, mode):
        status = self.dll.ww257x_LoadDigitalDataFile(ViSession(vi), ViConstString(fileName), ViInt32(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LoadDigitalDataArray(self, vi, size, digitalData, mode):
        _digitalData = (ViUInt16 * len(digitalData))(*digitalData)
        status = self.dll.ww257x_LoadDigitalDataArray(ViSession(vi), ViInt16(size), _digitalData, ViInt32(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalChannelSetup(self, vi, channelNumber, highLevel, lowLevel):
        status = self.dll.ww257x_DigitalChannelSetup(
            ViSession(vi), ViInt32(channelNumber), ViReal64(highLevel), ViReal64(lowLevel)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureHalfCycleWave(self, vi, channelName, halfCycleWave, phase, dutyCycle):
        status = self.dll.ww257x_ConfigureHalfCycleWave(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(halfCycleWave),
            ViReal64(phase),
            ViReal64(dutyCycle),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureHalfCycleDelay(self, vi, delay):
        status = self.dll.ww257x_ConfigureHalfCycleDelay(ViSession(vi), ViReal64(delay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureHalfCycleFrequency(self, vi, frequency):
        status = self.dll.ww257x_ConfigureHalfCycleFrequency(ViSession(vi), ViReal64(frequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseEnabled(self, vi, channelName, enabled):
        status = self.dll.ww257x_ConfigurePulseEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseLevel(self, vi, channelName, highLevel, lowLevel):
        status = self.dll.ww257x_ConfigurePulseLevel(
            ViSession(vi),
            ViConstString(channelName),
            ViReal64(highLevel),
            ViReal64(lowLevel),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulsePolarity(self, vi, channelName, pulsePolarity):
        status = self.dll.ww257x_ConfigurePulsePolarity(
            ViSession(vi), ViConstString(channelName), ViInt32(pulsePolarity)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulse(self, vi, highTime, period, riseTime, fallTime):
        status = self.dll.ww257x_ConfigurePulse(
            ViSession(vi),
            ViReal64(highTime),
            ViReal64(period),
            ViReal64(riseTime),
            ViReal64(fallTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseAdv(self, vi, channelName, transition, leading, trailing, width, dutyCycle):
        status = self.dll.ww257x_ConfigurePulseAdv(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(transition),
            ViReal64(leading),
            ViReal64(trailing),
            ViReal64(width),
            ViReal64(dutyCycle),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseDelay(self, vi, channelName, delay):
        status = self.dll.ww257x_ConfigurePulseDelay(ViSession(vi), ViConstString(channelName), ViReal64(delay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDoublePulseEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigureDoublePulseEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDoublePulseDelay(self, vi, delay):
        status = self.dll.ww257x_ConfigureDoublePulseDelay(ViSession(vi), ViReal64(delay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseMode(self, vi, channelName, pulseMode):
        status = self.dll.ww257x_ConfigurePulseMode(ViSession(vi), ViConstString(channelName), ViInt32(pulseMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseLevelMode(self, vi, channelName, pulseLevelMode):
        status = self.dll.ww257x_ConfigurePulseLevelMode(
            ViSession(vi), ViConstString(channelName), ViInt32(pulseLevelMode)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulsePeriod(self, vi, period):
        status = self.dll.ww257x_ConfigurePulsePeriod(ViSession(vi), ViReal64(period))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePWMSettings(self, vi, source, period, deviation):
        status = self.dll.ww257x_ConfigurePWMSettings(
            ViSession(vi), ViInt32(source), ViReal64(period), ViReal64(deviation)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseBurst(self, vi, transBurst):
        status = self.dll.ww257x_ConfigurePulseBurst(ViSession(vi), ViInt32(transBurst))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureBurstCount(self, vi, channelName, burstCount):
        status = self.dll.ww257x_ConfigureBurstCount(ViSession(vi), ViConstString(channelName), ViInt32(burstCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePhaseOffset(self, vi, channelName, phaseOffset):
        status = self.dll.ww257x_ConfigurePhaseOffset(ViSession(vi), ViConstString(channelName), ViInt32(phaseOffset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCoupleEnabled(self, vi, enabled):
        status = self.dll.ww257x_ConfigureCoupleEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCoupleDelay(self, vi, coupleDelay):
        status = self.dll.ww257x_ConfigureCoupleDelay(ViSession(vi), ViReal64(coupleDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InsertSlave(self, vi, IPAddress):
        status = self.dll.ww257x_InsertSlave(ViSession(vi), ViConstString(IPAddress))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DeleteSlaves(self, vi):
        status = self.dll.ww257x_DeleteSlaves(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCounter(self, vi, counterDisplayMode, gateTime, counterMode):
        status = self.dll.ww257x_ConfigureCounter(
            ViSession(vi),
            ViInt32(counterDisplayMode),
            ViReal64(gateTime),
            ViInt32(counterMode),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadCounterValue(self, vi):
        counterValue = ViReal64()
        status = self.dll.ww257x_ReadCounterValue(ViSession(vi), byref(counterValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(counterValue.value)

    def ResetCounter(self, vi):
        status = self.dll.ww257x_ResetCounter(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StoreCell(self, vi, storeCell):
        status = self.dll.ww257x_StoreCell(ViSession(vi), ViInt32(storeCell))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RecallCell(self, vi, recallCell):
        status = self.dll.ww257x_RecallCell(ViSession(vi), ViInt32(recallCell))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearCell(self, vi, clearCell):
        status = self.dll.ww257x_ClearCell(ViSession(vi), ViInt32(clearCell))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetChannelName(self, vi, index, bufferSize):
        name = ARRAY_ViChar(1024)
        status = self.dll.ww257x_GetChannelName(ViSession(vi), ViInt32(index), ViInt32(bufferSize), name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(name)

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        status = self.dll.ww257x_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(1024)
        status = self.dll.ww257x_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(errorMessage)

    def SetActiveChannel(self, vi, channelName):
        status = self.dll.ww257x_SetActiveChannel(ViSession(vi), ViConstString(channelName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAmplOffsetLimits(self, vi):
        minAmplitude = ViReal64()
        maxAmplitude = ViReal64()
        minOffset = ViReal64()
        maxOffset = ViReal64()
        status = self.dll.ww257x_GetAmplOffsetLimits(
            ViSession(vi),
            byref(minAmplitude),
            byref(maxAmplitude),
            byref(minOffset),
            byref(maxOffset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        minAmplitude = float(minAmplitude.value)
        maxAmplitude = float(maxAmplitude.value)
        minOffset = float(minOffset.value)
        maxOffset = float(maxOffset.value)
        return minAmplitude, maxAmplitude, minOffset, maxOffset

    def GetError(self, vi, bufferSize):
        errorCode = ViStatus()
        description = ARRAY_ViChar(1024)
        status = self.dll.ww257x_GetError(ViSession(vi), byref(errorCode), ViInt32(bufferSize), description)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        description = decode(description)
        return errorCode, description

    def ClearError(self, vi):
        status = self.dll.ww257x_ClearError(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def reset(self, vi):
        status = self.dll.ww257x_reset(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        status = self.dll.ww257x_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        status = self.dll.ww257x_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def WriteInstrData(self, vi, writeBuffer):
        status = self.dll.ww257x_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        status = self.dll.ww257x_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def SendSoftwareTrigger(self, vi):
        status = self.dll.ww257x_SendSoftwareTrigger(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InvalidateAllAttributes(self, vi):
        status = self.dll.ww257x_InvalidateAllAttributes(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, vi):
        status = self.dll.ww257x_ResetWithDefaults(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, vi):
        status = self.dll.ww257x_Disable(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        status = self.dll.ww257x_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        status = self.dll.ww257x_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(1024)
        status = self.dll.ww257x_GetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViInt32(bufSize),
            value,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        status = self.dll.ww257x_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        status = self.dll.ww257x_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        status = self.dll.ww257x_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        status = self.dll.ww257x_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        status = self.dll.ww257x_SetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        status = self.dll.ww257x_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        status = self.dll.ww257x_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        status = self.dll.ww257x_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        status = self.dll.ww257x_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        status = self.dll.ww257x_CheckAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        status = self.dll.ww257x_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        status = self.dll.ww257x_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviInit(self, resourceName, IDQuery, reset, vi):
        status = self.dll.ww257x_IviInit(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(reset), ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviClose(self, vi):
        status = self.dll.ww257x_IviClose(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetErrorInfo(self, vi):
        primaryError = ViStatus()
        secondaryError = ViStatus()
        errorElaboration = ARRAY_ViChar(1024)
        status = self.dll.ww257x_GetErrorInfo(
            ViSession(vi), byref(primaryError), byref(secondaryError), errorElaboration
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        errorElaboration = decode(errorElaboration)
        return primaryError, secondaryError, errorElaboration

    def ClearErrorInfo(self, vi):
        status = self.dll.ww257x_ClearErrorInfo(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
