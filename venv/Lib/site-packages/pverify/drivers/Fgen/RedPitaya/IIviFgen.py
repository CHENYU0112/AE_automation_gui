# ===========================================================================
# Copyright (C) 2016 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
IVI Fgen class-compliant root interface.
"""

from __future__ import annotations

import contextlib
from time import sleep

from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper
from pverify.drivers.BaseInstrument import BaseVisaInstrument
from pverify.drivers.Fgen.RedPitaya import IIviFgenEnums

from .IIviFgenBase import IIviFgenBase


class IIviFgen(IVICOMDriverWrapper, IIviFgenBase):
    """IVI Fgen class-compliant root interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        interface
            Specific for instrument connection via VISA.
            Provides interface for wrapped VISA library.
         DriverOperation
            Pointer to the class-compliant IIviDriverOperation interface
         Identity
            Pointer to the class-compliant IIviDriverIdentity interface
         Utility
            Pointer to the class-compliant IIviDriverUtility interface
         Output
            Pointer to the class-compliant IIviFgenOutput interface
         Trigger
            Pointer to the class-compliant IIviFgenTrigger interface
         StandardWaveform
            Pointer to the class-compliant IIviFgenStandardWaveform interface
         Arbitrary
            Pointer to the class-compliant IIviFgenArbitrary interface
         #AM
            Pointer to the class-compliant IIviFgenAM interface
         #FM
            Pointer to the class-compliant IIviFgenFM interface

    Methods:
        Initialize(self, ResourceName, IdQuery=1, Reset=1, OptionString=""):
            Opens the I/O session to the instrument. Driver methods and properties
            that access the instrument are only accessible after Initialize is called.
            Initialize optionally performs a Reset and queries the instrument to
            validate the instrument model.

        Close(self)
            Closes the I/O session to the instrument.
            Driver methods and properties that access the
            instrument are not accessible after Close is called.
    """

    def __init__(self):
        super().__init__(self)
        self._delimiter = "\r\n"
        self.IDN = ""
        self.interface = BaseVisaInstrument()
        self.__Initialized = False
        self.Enums = IIviFgenEnums

        from .IIviDriverOperation import IIviDriverOperation

        self.DriverOperation = IIviDriverOperation(self)

        from .IIviDriverIdentity import IIviDriverIdentity

        self.Identity = IIviDriverIdentity(self)

        from .IIviDriverUtility import IIviDriverUtility

        self.Utility = IIviDriverUtility(self)

        from .IIviFgenOutput import IIviFgenOutput

        self.Output = IIviFgenOutput(self)

        from .IIviFgenTrigger import IIviFgenTrigger

        self.Trigger = IIviFgenTrigger(self)

        from .IIviFgenStandardWaveform import IIviFgenStandardWaveform

        self.StandardWaveform = IIviFgenStandardWaveform(self)

        from .IIviFgenArbitrary import IIviFgenArbitrary

        self.Arbitrary = IIviFgenArbitrary(self)

        from .IIviFgenAM import IIviFgenAM

        self.AM = IIviFgenAM(self)

        from .IIviFgenFM import IIviFgenFM

        self.FM = IIviFgenFM(self)

    @property
    def Initialized(self):
        """
        Initialized is True between a successful call to the Initialize method
        and a successful call to the Close method, and False at all other
        times.
        """
        return self.__Initialized

    @property
    def drivername(self):
        return "RedPitaya"

    def Initialize(self, ResourceName, IdQuery=1, Reset=1, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        :type OptionString: str
        """
        self.interface.ResourceName = ResourceName
        self.interface.vi_open(rw_termination=self._delimiter)
        self.__Initialized = True

        with contextlib.suppress(Exception):
            self.GetError()

        if IdQuery:
            ret = self.vi_query("*IDN?")
            ret = ret.strip()
            self.IDN = ret
            if ret.find("REDPITAYA,INSTR2014") == -1:
                self.__Initialized = False
                self.interface.vi_close()
                msg = "RedPitaya: Cant't find '{}' in the returned IDN string '{}'".format(ret, "REDPITAYA,INSTR")
                raise ValueError(msg)
            with contextlib.suppress(Exception):
                self.GetError()
        if Reset:
            self.vi_write("*RST")
            sleep(1)
            self.GetError()

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        if self.__Initialized:
            self.__Initialized = False
            self.interface.vi_close()

    def InitiateGeneration(self):
        """
        If the function generator is in the Configuration State, this function moves the
        function generator to the Output Generation State. If the function generator is
        already in the Output Generation State, this function does nothing and returns
        Success.
        """
        for ch in range(1, 2):
            self.vi_write(":OUTPUT%d:STATE ON" % ch)
            self.GetError()

    def AbortGeneration(self):
        """
        If the function generator is in the Output Generation State, this function moves
        the function generator to the Configuration State. If the function generator is
        already in the Configuration State, the function does nothing and returns
        Success.
        """
        for ch in range(1, 2):
            self.vi_write(":OUTPUT%d:STATE OFF" % ch)
            self.GetError()
