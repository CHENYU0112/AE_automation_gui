from __future__ import annotations

from .IIviFgenArbitrarySequence import IIviFgenArbitrarySequence
from .IIviFgenArbitraryWaveform import IIviFgenArbitraryWaveform
from .IIviFgenBase import IIviFgenBase


class IIviFgenArbitrary(IIviFgenBase):
    def __init__(self, parent=None):
        super().__init__(self)
        self.parent = parent
        self._handle_dict = {}
        self._handle_idx = 0
        self._handle_idx_max = 10

        self.Sequence = IIviFgenArbitrarySequence(self)
        self.Waveform = IIviFgenArbitraryWaveform(self)

    @property
    def SampleRate(self, ChannelName="OUT1"):
        ret = self.vi_query(f":SOUR{self._ChannelNameToN(ChannelName)}:FREQ:FIX?", rformat="%f\n")
        self.GetError()
        return ret

    @SampleRate.setter
    def SampleRate(self, value, ChannelName="OUT1"):
        """
        The sample rate of the arbitrary waveforms the function generator produces. The
        units are samples per second.

        RedPitaya: Default Channel is OUT1.
        """
        self.vi_write(f":SOUR{self._ChannelNameToN(ChannelName)}:FREQ:FIX {value:f}")
        self.GetError()

    def ClearMemory(self):
        """
        Removes all previously created arbitrary waveforms and sequences from the
        function generator's memory and invalidates all waveform and sequence handles.
        """
        self._handle_dict.clear()
        self._handle_idx = 0

    def get_Gain(self, ChannelName):
        """
        Retrieves the gain.

        :param ChannelName: The name of a channel.
        :type ChannelName: str

        :return: The gain of the arbitrary waveform the function generator produces. This value
            is unitless.
        :rtype: Sfloat
        """
        ret = self.vi_query(f":SOUR{self._ChannelNameToN(ChannelName)}:VOLT?", rformat="%f\n")
        self.GetError()
        return ret

    def get_Offset(self, ChannelName):
        """
        Retrieves the offset.

        :param ChannelName: The name of a channel.
        :type ChannelName: str

        :return: The offset of the arbitrary waveform the function generator produces. The units
            are volts.
        :rtype: float
        """
        ret = self.vi_query(f":SOUR{self._ChannelNameToN(ChannelName)}:VOLT:OFFS?", rformat="%f\n")
        self.GetError()
        return ret

    def set_Gain(self, ChannelName, pVal):
        """
        Sets the gain.

        :param ChannelName: The name of a channel.
        :type ChannelName: str
        :param pVal: The gain of the arbitrary waveform the function generator produces. This value
            is unitless.
        :type pVal: float
        """
        self.vi_write(f":SOUR{self._ChannelNameToN(ChannelName)}:VOLT {pVal:f}")
        self.GetError()

    def set_Offset(self, ChannelName, pVal):
        """
        Retrieves the offset.

        :param ChannelName: The name of a channel.
        :type ChannelName: str
        :param pVal: The offset of the arbitrary waveform the function generator produces. The units
            are volts.
        :type pVal: float
        """
        self.vi_write(f":SOUR{self._ChannelNameToN(ChannelName)}:VOLT:OFFS {pVal:f}")
        self.GetError()

    def set_ArbitraryData(self, ChannelName, data):
        """
        *Writes the data to RedPitaya and sets the waveform to arbitrary.

        :param ChannelName: The name of a channel.
        :type ChannelName: str
        :param data: Data for arbitrary waveform
        :type data: list
        """
        ch = self._ChannelNameToN(ChannelName)
        self.vi_write(":SOUR{}:TRAC:DATA:DATA {}".format(ch, ",".join(map(str, data))))
        self.GetError()
        self.vi_write(f":SOUR{ch}:FUNC ARBITRARY")
        self.GetError()

    def get_SizeMax(self):
        """
        *Return maximum size of arbitrary data buffer.

        :return: Max buffer size
        :rtype: int
        """
        ret = self.parent.parent.interface.vi_query(":ACQ:BUF:SIZE?", rformat="%d\n")
        self.GetError()
        return ret
