from __future__ import annotations

from .IIviFgenBase import IIviFgenBase


class IIviFgenOutput(IIviFgenBase):
    def __init__(self, parent=None):
        super().__init__(self)
        self.parent = parent

    @property
    def OutputMode(self, ChannelName="OUT1"):
        ret = self.vi_query(f"SOUR{self._ChannelNameToN(ChannelName)}:FUNC?", rformat="%s")
        self.GetError()
        if ret.find("ARBITRARY") == -1:
            return self.Enums.IviFgenOutputModeEnum.IviFgenOutputModeFunction
        else:
            return self.Enums.IviFgenOutputModeEnum.IviFgenOutputModeArbitrary

    @OutputMode.setter
    def OutputMode(self, value, ChannelName="OUT1"):
        """
        The mode that determines how the function generator produces waveforms. This
        attribute determines which extension group's functions and attributes are used
        to configure the waveform the function generator produces.

        RedPitaya: Default is Channel 1 (OUT1)
        """
        if value == self.Enums.IviFgenOutputModeEnum.IviFgenOutputModeArbitrary:
            self.vi_write(f"SOUR{self._ChannelNameToN(ChannelName)}:FUNC ARBITRARY")
            self.GetError()

    @property
    def ReferenceClockSource(self):
        raise NotImplementedError

    @ReferenceClockSource.setter
    def ReferenceClockSource(self, value):
        """
        The source of the reference clock. The function generator derives frequencies
        and sample rates that it uses to generate waveforms from the reference clock.
        """
        raise NotImplementedError

    @property
    def Count(self):
        return 2

    def get_Enabled(self, ChannelName):
        """
        Provides an indication whether the signal the function generator produces
        appears at the output connector.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: True if the signal the function generator produces appears at the output
            connector.
        :rtype: bool
        """
        ret = self.vi_query(f"OUTPUT{self._ChannelNameToN(ChannelName)}:STATE?", rformat="%d\n")
        self.GetError()
        return bool(ret)

    def set_Enabled(self, ChannelName, pVal):
        """
        Sets whether the signal the function generator produces appears at the output
        connector.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: If true, the signal the function generator produces appears at the output
            connector.
        :type pVal: bool
        """
        val = "ON" if pVal else "OFF"
        self.vi_write(f"OUTPUT{self._ChannelNameToN(ChannelName)}:STATE {val}")
        self.GetError()

    def get_Impedance(self, ChannelName):
        """
        Retrieves a channel's impedance.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The impedance of the output channel. The units are Ohms.
        :rtype: float
        """
        return 50.0

    def set_Impedance(self, ChannelName, pVal):
        """
        Sets channel's impedance.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The impedance of the output channel. The units are Ohms.
        :type pVal: float
        """
        if int(pVal) != 50:
            msg = "RedPitaya: Channel impedance is fixed to 50 Ohms!"
            raise ValueError(msg)

    def get_OperationMode(self, ChannelName):
        """
        Retrieves a channel's operation mode.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The mode that determines how the function generator produces output on a
            channel.
        :rtype: IviFgenOperationModeEnum
        """
        ret = self.vi_query(f":SOUR{self._ChannelNameToN(ChannelName)}:BURS:STAT?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviFgenOperationModeEnum, ret)

    def set_OperationMode(self, ChannelName, pVal):
        """
        Sets a channel's operation mode.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The mode that determines how the function generator produces output on a
            channel.
        :type pVal: IviFgenOperationModeEnum
        """
        self.vi_write(f":SOUR{self._ChannelNameToN(ChannelName)}:BURS:STAT {pVal.value}")
        self.GetError()

    def Name(self, Index):
        """
        Retrieves the name of a channel.

        :param Index: The one-based index into the collection of channel names.
        :type Index: int

        :return: The name of the output channel specified.
        :rtype: str
        """
        if isinstance(Index, int) and 1 <= Index <= 2:
            return ["OUT1", "OUT2"][Index - 1]
        else:
            msg = "RedPitaya: Channel index exceeds the limits 1-2"
            raise IndexError(msg)
