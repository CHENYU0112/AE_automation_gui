from __future__ import annotations

from pverify.drivers.BaseInstrument import InstrumentError
from pverify.drivers.Fgen.RedPitaya import IIviFgenEnums


class IIviFgenBase:
    """Common methods/properties for all interfaces.

    Attributes:
        Enums
            NOT AVAILABLE IN OFFICIAL IVI DRIVERS
            Contains python dictionaries that contain the enumerations
    """

    def __init__(self, parent=None):
        self.parent = parent
        self.Enums = IIviFgenEnums

    def GetError(self):
        """
        Queries all error messages of the scopes error buffer an raises an error if one
        or more errors occurred.

        :raise: InstrumentError
        """
        errorList = []
        error = 1
        while error:
            ret = self.vi_query(":SYST:ERR?").strip().split(",")
            error = 1 if int(ret[0]) else 0
            if error:
                errMsg = "ErrCode:%d, ErrMsg:'%s'" % (int(ret[0]), str(ret[1]).strip())
                errorList.append(errMsg)
                self.parent.interface._Log.error(errMsg)
        if errorList:
            raise InstrumentError(str(errorList))

    def vi_query(self, cmd, wformat="%s", rformat=""):
        """..."""
        return self.parent.interface.vi_query(cmd, wformat, rformat)

    def vi_write(self, cmd, wformat="%s"):
        """..."""
        return self.parent.interface.vi_write(cmd, wformat)

    def _ChannelNameToN(self, ChannelName):
        return {"OUT1": "1", "OUT2": "2"}[ChannelName]
