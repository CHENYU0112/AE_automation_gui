from __future__ import annotations

from .IIviFgenBase import IIviFgenBase


class IIviFgenArbitraryWaveform(IIviFgenBase):
    def __init__(self, parent=None):
        super().__init__(self)
        self.parent = parent

    @property
    def NumberWaveformsMax(self):
        """
        The maximum number of arbitrary waveforms that the function generator allows.
        """
        return self.parent._handle_idx_max  # Max number of Handles?

    @property
    def Quantum(self):
        """
        The size of each arbitrary waveform must be a multiple of a quantum value. This attribute returns the quantum
        value the function generator allows.
        For example, if this attribute returns a value of 8, all waveform sizes must be a multiple of 8.
        """
        return 1

    @property
    def SizeMax(self):
        """
        The maximum number of points the function generator allows in an arbitrary waveform.
        """
        return self.parent.get_SizeMax()

    @property
    def SizeMin(self):
        """
        The minimum number of points the function generator allows in an arbitrary waveform.
        """
        return 1

    def Configure(self, ChannelName, Handle, Gain, Offset):
        """
        Configures the attributes of the function generator that affect arbitrary
        waveform generation.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param Handle: Specifies the handle that identifies the arbitrary waveform to produce. This
            value sets the Arbitrary Waveform Handle attribute.
        :type Handle: int
        :param Gain: Specifies the arbitrary waveform gain. This value sets the Arbitrary Gain
            attribute.
        :type Gain: float
        :param Offset: Specifies the arbitrary waveform offset. This value sets the Arbitrary Offset
            attribute.
        :type Offset: float
        """
        if Handle in self.parent._handle_dict:
            data = self.parent._handle_dict[Handle]
            self.parent.set_ArbitraryData(ChannelName, data)
            self.parent.set_Gain(ChannelName, Gain)
            self.parent.set_Offset(ChannelName, Offset)
        else:
            raise ValueError("RedPitaya: Arbitrary Waveform Handle %d not defined!" % Handle)

    def Clear(self, Handle):
        """
        Removes a previously created arbitrary waveform from the function generator's
        memory and invalidates the waveform's handle.

        :param Handle: Specifies the handle that identifies the arbitrary waveform to clear.
        :type Handle: int
        """
        if Handle in self.parent._handle_dict:
            del self.parent._handle_dict[Handle]
        else:
            raise ValueError("RedPitaya: Arbitrary Waveform Handle %d not defined!" % Handle)

    def Create(self, Data):
        """
        Creates an arbitrary waveform and returns a handle to it. The handle is used by
        the Configure, Clear, and ArbitrarySequence.Create methods.

        :return: Returns the handle that identifies the new arbitrary waveform.
        :rtype: int
        """
        if len(self.parent._handle_dict) < self.parent._handle_idx_max:
            handle = self.parent._handle_idx
            self.parent._handle_idx += 1
            self.parent._handle_dict[handle] = Data
            return handle
        else:
            raise ValueError(
                "RedPitaya: Maximum number of arbitrary waveform handles (%d) reached!" % self.parent._handle_idx_max
            )

    def get_Frequency(self, ChannelName):
        """
        The rate at which an entire arbitrary waveform is generated. The units are in
        Hertz.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The frequency.
        :rtype: float
        """
        return self.parent.parent.parent.StandardWaveform.get_Frequency(ChannelName)

    def set_Frequency(self, ChannelName, pVal):
        """
        The rate at which an entire arbitrary waveform is generated. The units are in
        Hertz.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The frequency.
        :type pVal: float
        """
        self.parent.parent.parent.StandardWaveform.set_Frequency(ChannelName, pVal)
