from __future__ import annotations

from .IIviFgenBase import IIviFgenBase


class IIviFgenTrigger(IIviFgenBase):
    def __init__(self, parent=None):
        super().__init__(self)
        self.parent = parent

    @property
    def InternalRate(self):
        raise NotImplementedError

    @InternalRate.setter
    def InternalRate(self, value):
        """
        The rate at which the function generator's internal trigger source produces a
        trigger, in triggers per second.
        """
        raise NotImplementedError

    def SendSoftwareTrigger(self):
        """
        Sends a software trigger, which will cause the function generator to generate
        output.
        """
        for ch in range(1, 2):
            self.vi_write(":SOUR%d:TRIG:IMM" % ch)
            self.GetError()

    def get_BurstCount(self, ChannelName):
        """
        Retrieves a channel's burst count.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The number of waveform cycles that the function generator produces after it
            receives a trigger.
        :rtype: int
        """
        ret = self.vi_query(f":SOUR{self._ChannelNameToN(ChannelName)}:BURS:NCYC?", rformat="%d\n")
        self.GetError()
        return ret

    def set_BurstCount(self, ChannelName, pVal):
        """
        Sets a channel's burst count.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The number of waveform cycles that the function generator produces after it
            receives a trigger.
        :type pVal: int
        """
        self.vi_write(":SOUR%s:BURS:NCYC %d" % (self._ChannelNameToN(ChannelName), pVal))
        self.GetError()

    def get_Source(self, ChannelName):
        """
        Retrieves a channel's trigger source.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str

        :return: The trigger source. After the function generator receives a trigger from this
            source, it produces a signal.
        :rtype: int
        """
        ret = self.vi_query(f":SOUR{self._ChannelNameToN(ChannelName)}:TRIG:SOUR?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviFgenTriggerSourceEnum, ret)

    def set_Source(self, ChannelName, pVal):
        """
        Sets a channel's trigger source.

        :param ChannelName: The ChannelName parameter may be a string defined by the driver or supplied as a
            virtual name in the configuration store. For single output instruments, the
            driver may define the empty string as valid ChannelName.
        :type ChannelName: str
        :param pVal: The trigger source. After the function generator receives a trigger from this
            source, it produces a signal.
        :type pVal: IviFgenTriggerSourceEnum
        """
        self.vi_write(f":SOUR{self._ChannelNameToN(ChannelName)}:TRIG:SOUR {pVal.value}")
        self.GetError()
