from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .tkafg3k_dllwrap import *


class tkafg3k(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = tkafg3k_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def GetNextCoercionRecord(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetChannelName(self, index, bufferSize):
        """

        :param index:
        :type index:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, index, bufferSize)

    def ConfigureActiveMemory(self, activeMemory):
        """

        :param activeMemory:
        :type activeMemory:
        """
        return self._dllwrap.ConfigureActiveMemory(self._vi, activeMemory)

    def ConfigureOperationMode(self, channelName, outputMode):
        """

        :param channelName:
        :type channelName:
        :param outputMode:
        :type outputMode:
        """
        return self._dllwrap.ConfigureOperationMode(self._vi, channelName, outputMode)

    def ConfigureOutputMode(self, outputMode):
        """

        :param outputMode:
        :type outputMode:
        """
        return self._dllwrap.ConfigureOutputMode(self._vi, outputMode)

    def ConfigureOutputModeByChannel(self, channelName, outputMode):
        """

        :param channelName:
        :type channelName:
        :param outputMode:
        :type outputMode:
        """
        return self._dllwrap.ConfigureOutputModeByChannel(self._vi, channelName, outputMode)

    def ConfigureRefClockSource(self, refClockSource):
        """

        :param refClockSource:
        :type refClockSource:
        """
        return self._dllwrap.ConfigureRefClockSource(self._vi, refClockSource)

    def ConfigureOutputImpedance(self, channelName, outputImpedance):
        """

        :param channelName:
        :type channelName:
        :param outputImpedance:
        :type outputImpedance:
        """
        return self._dllwrap.ConfigureOutputImpedance(self._vi, channelName, outputImpedance)

    def ConfigureOutputEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureOutputEnabled(self._vi, channelName, enabled)

    def InitiateGeneration(self):
        """"""
        return self._dllwrap.InitiateGeneration(self._vi)

    def AbortGeneration(self):
        """"""
        return self._dllwrap.AbortGeneration(self._vi)

    def ConfigureStandardWaveform(self, channelName, waveform, amplitude, dcOffset, frequency, startPhase):
        """

        :param channelName:
        :type channelName:
        :param waveform:
        :type waveform:
        :param amplitude:
        :type amplitude:
        :param dcOffset:
        :type dcOffset:
        :param frequency:
        :type frequency:
        :param startPhase:
        :type startPhase:
        """
        return self._dllwrap.ConfigureStandardWaveform(
            self._vi, channelName, waveform, amplitude, dcOffset, frequency, startPhase
        )

    def ConfigureRampSymmetry(self, channelName, rampSymmetry):
        """

        :param channelName:
        :type channelName:
        :param rampSymmetry:
        :type rampSymmetry:
        """
        return self._dllwrap.ConfigureRampSymmetry(self._vi, channelName, rampSymmetry)

    def ConfigurePulseWaveform(self, channelName, dutyCycle, leadingEdgeTime, trailingEdgeTime):
        """

        :param channelName:
        :type channelName:
        :param dutyCycle:
        :type dutyCycle:
        :param leadingEdgeTime:
        :type leadingEdgeTime:
        :param trailingEdgeTime:
        :type trailingEdgeTime:
        """
        return self._dllwrap.ConfigurePulseWaveform(self._vi, channelName, dutyCycle, leadingEdgeTime, trailingEdgeTime)

    def ConfigurePulseDelay(self, channelName, delay):
        """

        :param channelName:
        :type channelName:
        :param delay:
        :type delay:
        """
        return self._dllwrap.ConfigurePulseDelay(self._vi, channelName, delay)

    def ConfigureSampleRate(self, sampleRate):
        """

        :param sampleRate:
        :type sampleRate:
        """
        return self._dllwrap.ConfigureSampleRate(self._vi, sampleRate)

    def QueryArbWfmCapabilities(self):
        """"""
        return self._dllwrap.QueryArbWfmCapabilities(self._vi)

    def CreateArbWaveform(self, wfmSize, wfmData):
        """

        :param wfmSize:
        :type wfmSize:
        :param wfmData:
        :type wfmData:
        """
        return self._dllwrap.CreateArbWaveform(self._vi, wfmSize, wfmData)

    def CreateLineInterpolateArbWfm(self, wfmSize, startPointData, endPointData):
        """

        :param wfmSize:
        :type wfmSize:
        :param startPointData:
        :type startPointData:
        :param endPointData:
        :type endPointData:
        """
        return self._dllwrap.CreateLineInterpolateArbWfm(self._vi, wfmSize, startPointData, endPointData)

    def CreateStandardShapeArbWfm(self, wfmSize, wfmType):
        """

        :param wfmSize:
        :type wfmSize:
        :param wfmType:
        :type wfmType:
        """
        return self._dllwrap.CreateStandardShapeArbWfm(self._vi, wfmSize, wfmType)

    def GetArbitraryWaveformBySlot(self, slot):
        """

        :param slot:
        :type slot:
        """
        return self._dllwrap.GetArbitraryWaveformBySlot(self._vi, slot)

    def CreateArbWaveformBySlot(self, slot, wfmSize, wfmData, overwrite):
        """

        :param slot:
        :type slot:
        :param wfmSize:
        :type wfmSize:
        :param wfmData:
        :type wfmData:
        :param overwrite:
        :type overwrite:
        """
        return self._dllwrap.CreateArbWaveformBySlot(self._vi, slot, wfmSize, wfmData, overwrite)

    def CreateLineInterpolateArbWfmBySlot(self, slot, wfmSize, startPointData, endPointData, overwrite):
        """

        :param slot:
        :type slot:
        :param wfmSize:
        :type wfmSize:
        :param startPointData:
        :type startPointData:
        :param endPointData:
        :type endPointData:
        :param overwrite:
        :type overwrite:
        """
        return self._dllwrap.CreateLineInterpolateArbWfmBySlot(
            self._vi, slot, wfmSize, startPointData, endPointData, overwrite
        )

    def CreateStandardShapeArbWfmBySlot(self, slot, wfmSize, wfmType, overwrite):
        """

        :param slot:
        :type slot:
        :param wfmSize:
        :type wfmSize:
        :param wfmType:
        :type wfmType:
        :param overwrite:
        :type overwrite:
        """
        return self._dllwrap.CreateStandardShapeArbWfmBySlot(self._vi, slot, wfmSize, wfmType, overwrite)

    def ClearArbWaveform(self, wfmHandle):
        """

        :param wfmHandle:
        :type wfmHandle:
        """
        return self._dllwrap.ClearArbWaveform(self._vi, wfmHandle)

    def ClearArbWaveformBySlot(self, slot):
        """

        :param slot:
        :type slot:
        """
        return self._dllwrap.ClearArbWaveformBySlot(self._vi, slot)

    def ConfigureArbWaveform(self, channelName, wfmHandle, arbGain, arbOffset):
        """

        :param channelName:
        :type channelName:
        :param wfmHandle:
        :type wfmHandle:
        :param arbGain:
        :type arbGain:
        :param arbOffset:
        :type arbOffset:
        """
        return self._dllwrap.ConfigureArbWaveform(self._vi, channelName, wfmHandle, arbGain, arbOffset)

    def ConfigureArbFrequency(self, channelName, arbFrequency):
        """

        :param channelName:
        :type channelName:
        :param arbFrequency:
        :type arbFrequency:
        """
        return self._dllwrap.ConfigureArbFrequency(self._vi, channelName, arbFrequency)

    def ConfigureTriggerSource(self, channelName, trigSource):
        """

        :param channelName:
        :type channelName:
        :param trigSource:
        :type trigSource:
        """
        return self._dllwrap.ConfigureTriggerSource(self._vi, channelName, trigSource)

    def ForceTrigger(self):
        """"""
        return self._dllwrap.ForceTrigger(self._vi)

    def ConfigureTriggerOutputMode(self, outputMode):
        """

        :param outputMode:
        :type outputMode:
        """
        return self._dllwrap.ConfigureTriggerOutputMode(self._vi, outputMode)

    def ConfigureInternalTriggerRate(self, rate):
        """

        :param rate:
        :type rate:
        """
        return self._dllwrap.ConfigureInternalTriggerRate(self._vi, rate)

    def ConfigureExternalTriggerSlope(self, triggerSlope):
        """

        :param triggerSlope:
        :type triggerSlope:
        """
        return self._dllwrap.ConfigureExternalTriggerSlope(self._vi, triggerSlope)

    def ConfigureBurstEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureBurstEnabled(self._vi, channelName, enabled)

    def ConfigureBurstCount(self, channelName, burstCount):
        """

        :param channelName:
        :type channelName:
        :param burstCount:
        :type burstCount:
        """
        return self._dllwrap.ConfigureBurstCount(self._vi, channelName, burstCount)

    def ConfigureBurstMode(self, channelName, burstMode):
        """

        :param channelName:
        :type channelName:
        :param burstMode:
        :type burstMode:
        """
        return self._dllwrap.ConfigureBurstMode(self._vi, channelName, burstMode)

    def ConfigureBurstDelay(self, channelName, burstDelay):
        """

        :param channelName:
        :type channelName:
        :param burstDelay:
        :type burstDelay:
        """
        return self._dllwrap.ConfigureBurstDelay(self._vi, channelName, burstDelay)

    def ConfigureSweepEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureSweepEnabled(self._vi, channelName, enabled)

    def ConfigureSweep(self, channelName, startFrequency, stopFrequency, time, type):
        """

        :param channelName:
        :type channelName:
        :param startFrequency:
        :type startFrequency:
        :param stopFrequency:
        :type stopFrequency:
        :param time:
        :type time:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSweep(self._vi, channelName, startFrequency, stopFrequency, time, type)

    def ConfigureSweepEx(self, channelName, startFrequency, stopFrequency, time, holdTime, returnTime, type):
        """

        :param channelName:
        :type channelName:
        :param startFrequency:
        :type startFrequency:
        :param stopFrequency:
        :type stopFrequency:
        :param time:
        :type time:
        :param holdTime:
        :type holdTime:
        :param returnTime:
        :type returnTime:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSweepEx(
            self._vi,
            channelName,
            startFrequency,
            stopFrequency,
            time,
            holdTime,
            returnTime,
            type,
        )

    def ConfigureSweepMode(self, channelName, sweepMode):
        """

        :param channelName:
        :type channelName:
        :param sweepMode:
        :type sweepMode:
        """
        return self._dllwrap.ConfigureSweepMode(self._vi, channelName, sweepMode)

    def ConfigureNoiseAppendantEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureNoiseAppendantEnabled(self._vi, channelName, enabled)

    def ConfigureNoiseLevel(self, channelName, level):
        """

        :param channelName:
        :type channelName:
        :param level:
        :type level:
        """
        return self._dllwrap.ConfigureNoiseLevel(self._vi, channelName, level)

    def ConfigureExternalAppendEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureExternalAppendEnabled(self._vi, channelName, enabled)

    def ConfigureAMEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureAMEnabled(self._vi, channelName, enabled)

    def ConfigureAMSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureAMSource(self._vi, channelName, source)

    def ConfigureAMInternal(self, amDepth, amWaveform, amFrequency):
        """

        :param amDepth:
        :type amDepth:
        :param amWaveform:
        :type amWaveform:
        :param amFrequency:
        :type amFrequency:
        """
        return self._dllwrap.ConfigureAMInternal(self._vi, amDepth, amWaveform, amFrequency)

    def ConfigureAMInternalByChannel(self, channelName, amDepth, amWaveform, amFrequency):
        """

        :param channelName:
        :type channelName:
        :param amDepth:
        :type amDepth:
        :param amWaveform:
        :type amWaveform:
        :param amFrequency:
        :type amFrequency:
        """
        return self._dllwrap.ConfigureAMInternalByChannel(self._vi, channelName, amDepth, amWaveform, amFrequency)

    def ConfigureAMExternalByChannel(self, channelName, amDepth):
        """

        :param channelName:
        :type channelName:
        :param amDepth:
        :type amDepth:
        """
        return self._dllwrap.ConfigureAMExternalByChannel(self._vi, channelName, amDepth)

    def ConfigureFMEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureFMEnabled(self._vi, channelName, enabled)

    def ConfigureFMSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureFMSource(self._vi, channelName, source)

    def ConfigureFMInternal(self, fmDeviation, fmWaveform, fmFrequency):
        """

        :param fmDeviation:
        :type fmDeviation:
        :param fmWaveform:
        :type fmWaveform:
        :param fmFrequency:
        :type fmFrequency:
        """
        return self._dllwrap.ConfigureFMInternal(self._vi, fmDeviation, fmWaveform, fmFrequency)

    def ConfigureFMInternalByChannel(self, channelName, fmDeviance, fmWaveform, fmFrequency):
        """

        :param channelName:
        :type channelName:
        :param fmDeviance:
        :type fmDeviance:
        :param fmWaveform:
        :type fmWaveform:
        :param fmFrequency:
        :type fmFrequency:
        """
        return self._dllwrap.ConfigureFMInternalByChannel(self._vi, channelName, fmDeviance, fmWaveform, fmFrequency)

    def ConfigureFMExternalByChannel(self, channelName, fmDeviance):
        """

        :param channelName:
        :type channelName:
        :param fmDeviance:
        :type fmDeviance:
        """
        return self._dllwrap.ConfigureFMExternalByChannel(self._vi, channelName, fmDeviance)

    def ConfigurePMEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigurePMEnabled(self._vi, channelName, enabled)

    def ConfigurePMSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigurePMSource(self._vi, channelName, source)

    def ConfigurePMInternalByChannel(self, channelName, pmDeviation, pmWaveform, pmFrequency):
        """

        :param channelName:
        :type channelName:
        :param pmDeviation:
        :type pmDeviation:
        :param pmWaveform:
        :type pmWaveform:
        :param pmFrequency:
        :type pmFrequency:
        """
        return self._dllwrap.ConfigurePMInternalByChannel(self._vi, channelName, pmDeviation, pmWaveform, pmFrequency)

    def ConfigurePMExternalByChannel(self, channelName, pmDeviation):
        """

        :param channelName:
        :type channelName:
        :param pmDeviation:
        :type pmDeviation:
        """
        return self._dllwrap.ConfigurePMExternalByChannel(self._vi, channelName, pmDeviation)

    def ConfigureFSKEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureFSKEnabled(self._vi, channelName, enabled)

    def ConfigureFSKSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureFSKSource(self._vi, channelName, source)

    def ConfigureFSKInternalByChannel(self, channelName, hopFrequency, rate):
        """

        :param channelName:
        :type channelName:
        :param hopFrequency:
        :type hopFrequency:
        :param rate:
        :type rate:
        """
        return self._dllwrap.ConfigureFSKInternalByChannel(self._vi, channelName, hopFrequency, rate)

    def ConfigureFSKExternalByChannel(self, channelName, hopFrequency):
        """

        :param channelName:
        :type channelName:
        :param hopFrequency:
        :type hopFrequency:
        """
        return self._dllwrap.ConfigureFSKExternalByChannel(self._vi, channelName, hopFrequency)

    def ConfigurePWMEnabled(self, channelName, enabled):
        """

        :param channelName:
        :type channelName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigurePWMEnabled(self._vi, channelName, enabled)

    def ConfigurePWMSource(self, channelName, source):
        """

        :param channelName:
        :type channelName:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigurePWMSource(self._vi, channelName, source)

    def ConfigurePWMInternalByChannel(self, channelName, pwmDeviation, pwmWaveform, pwmFrequency):
        """

        :param channelName:
        :type channelName:
        :param pwmDeviation:
        :type pwmDeviation:
        :param pwmWaveform:
        :type pwmWaveform:
        :param pwmFrequency:
        :type pwmFrequency:
        """
        return self._dllwrap.ConfigurePWMInternalByChannel(
            self._vi, channelName, pwmDeviation, pwmWaveform, pwmFrequency
        )

    def ConfigurePWMExternalByChannel(self, channelName, pwmDeviation):
        """

        :param channelName:
        :type channelName:
        :param pwmDeviation:
        :type pwmDeviation:
        """
        return self._dllwrap.ConfigurePWMExternalByChannel(self._vi, channelName, pwmDeviation)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def GetError(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def GetNextInterchangeWarning(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def SaveLoadInstrumentSettings(self, operationSelect, fileName):
        """

        :param operationSelect:
        :type operationSelect:
        :param fileName:
        :type fileName:
        """
        return self._dllwrap.SaveLoadInstrumentSettings(self._vi, operationSelect, fileName)

    def SaveLoadWaveformData(self, operationSelect, fileName, editMemory):
        """

        :param operationSelect:
        :type operationSelect:
        :param fileName:
        :type fileName:
        :param editMemory:
        :type editMemory:
        """
        return self._dllwrap.SaveLoadWaveformData(self._vi, operationSelect, fileName, editMemory)

    def SetGetWaveformPointValue(self, pointIndex, pointValue, operationSelect, editMemory):
        """

        :param pointIndex:
        :type pointIndex:
        :param pointValue:
        :type pointValue:
        :param operationSelect:
        :type operationSelect:
        :param editMemory:
        :type editMemory:
        """
        return self._dllwrap.SetGetWaveformPointValue(self._vi, pointIndex, pointValue, operationSelect, editMemory)

    def CopyWfmDataBetweenEditMemory(self, sourceMemory, targetMemory):
        """

        :param sourceMemory:
        :type sourceMemory:
        :param targetMemory:
        :type targetMemory:
        """
        return self._dllwrap.CopyWfmDataBetweenEditMemory(self._vi, sourceMemory, targetMemory)

    def viWrite(self, buffer, count):
        """

        :param buffer:
        :type buffer:
        :param count:
        :type count:
        """
        return self._dllwrap.viWrite(self._vi, buffer, count)

    def viRead(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.viRead(self._vi, bufferSize)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """

        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def GetAttributeViInt32(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName, attribute, bufSize):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param bufSize:
        :type bufSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)
