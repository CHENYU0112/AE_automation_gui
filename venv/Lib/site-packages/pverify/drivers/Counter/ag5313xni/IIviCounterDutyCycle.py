from __future__ import annotations

from .ag5313xni import *


class IIviCounterDutyCycle:
    def __init__(self, root):
        self.root = root

    @property
    def Channel(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 25, 1024)

    @Channel.setter
    def Channel(self, value):
        """
        Specifies the input channel the duty cycle is measured on.
        """
        self.root.dllwrap.SetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 25, value)

    @property
    def FrequencyEstimate(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 26)

    @FrequencyEstimate.setter
    def FrequencyEstimate(self, value):
        """
        Specifies the estimated frequency, in hertz, for the duty cycle function.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 26, value)

    @property
    def Resolution(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 27)

    @Resolution.setter
    def Resolution(self, value):
        """
        Specifies the resolution for the duty cycle function. Duty Cycle Resolution is a
        unitless value.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 27, value)

    def Configure(self, Channel, FrequencyEstimate, Resolution):
        """
        Configures the frequency estimate and resolution attributes for a duty cycle
        measurement.

        :param Channel: Specifies the channel the duty cycle will be measured on.
        :type Channel: str
        :param FrequencyEstimate: Specifies the estimated frequency.
        :type FrequencyEstimate: float
        :param Resolution: Specifies the resolution of the duty cycle measurement. It is the quantization
            size, i.e. the smallest delta value that can be detected.
        :type Resolution: float
        """
        self.root.dllwrap.ConfigureDutyCycle(Channel, FrequencyEstimate, Resolution)
