from __future__ import annotations

from .ag5313xni import *


class IIviCounterFrequency:
    def __init__(self, root):
        self.root = root

    @property
    def Channel(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 11, 1024)

    @Channel.setter
    def Channel(self, value):
        """
        Specifies the input channel the frequency is measured on.
        """
        self.root.dllwrap.SetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 11, value)

    @property
    def Estimate(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 12)

    @Estimate.setter
    def Estimate(self, value):
        """
        Specifies the estimated frequency, in hertz, for the frequency function.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 12, value)

    @property
    def Resolution(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 13)

    @Resolution.setter
    def Resolution(self, value):
        """
        Specifies the resolution of the measurement, in hertz, for the frequency
        function.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 13, value)

    @property
    def ApertureTime(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 14)

    @ApertureTime.setter
    def ApertureTime(self, value):
        """
        Specifies the aperture time in seconds for the frequency with aperture time
        function.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 14, value)

    @property
    def EstimateAuto(self):
        return self.root.dllwrap.GetAttributeViBoolean(None, IVI_CLASS_PUBLIC_ATTR_BASE + 15)

    @EstimateAuto.setter
    def EstimateAuto(self, value):
        """
        Specifies if the Counter Frequency Estimate Auto is enabled.
        """
        self.root.dllwrap.SetAttributeViBoolean(None, IVI_CLASS_PUBLIC_ATTR_BASE + 15, value)

    @property
    def ResolutionAuto(self):
        return self.root.dllwrap.GetAttributeViBoolean(None, IVI_CLASS_PUBLIC_ATTR_BASE + 16)

    @ResolutionAuto.setter
    def ResolutionAuto(self, value):
        """
        Specifies if the Counter Frequency Resolution Auto is enabled.
        """
        self.root.dllwrap.SetAttributeViBoolean(None, IVI_CLASS_PUBLIC_ATTR_BASE + 16, value)

    def ConfigureWithAperture(self, Channel, ApertureTime):
        """
        Configures a frequency measurement based on the specified aperture time.

        :param Channel: Specifies the channel the frequency will be measured on.
        :type Channel: str
        :param ApertureTime: Specifies the aperture time of the frequency measurement.
        :type ApertureTime: float
        """
        self.root.dllwrap.ConfigureFrequencyWithApertureTime(Channel, ApertureTime)

    def ConfigureManual(self, Channel, Estimate, Resolution):
        """
        Provides manual frequency configuration. Configures the Estimate and Resolution
        attributes for a frequency measurement for a particular channel.

        :param Channel: Specifies the channel the frequency will be measured on.
        :type Channel: str
        :param Estimate: Specifies the estimated frequency.
        :type Estimate: float
        :param Resolution: Specifies the resolution of the frequency measurement. It is the quantization
            size, i.e. the smallest delta value that can be detected.
        :type Resolution: float
        """
        self.root.dllwrap.ConfigureFrequencyManual(Channel, Estimate, Resolution)

    def Configure(self, Channel):
        """
        Provides auto frequency configuration. Configures the instrument to determine
        the best estimate and resolution for the selected channel.

        :param Channel: Specifies the channel the frequency will be measured on.
        :type Channel: str
        """
        self.root.dllwrap.ConfigureFrequency(Channel)
