from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import ag5313xni_const as const
from .ag5313xni_const import *


class ag5313xni_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("ag5313xni_32.dll", "ag5313xni_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "ag5313xni"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        status = self.dll.ag5313xni_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        status = self.dll.ag5313xni_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViConstString(optionString),
            byref(newVi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(newVi.value)

    def close(self, vi):
        status = self.dll.ag5313xni_close(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(1024)
        status = self.dll.ag5313xni_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.ag5313xni_LockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.ag5313xni_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        status = self.dll.ag5313xni_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def GetChannelName(self, vi, index, bufferSize):
        channelName = ARRAY_ViChar(1024)
        status = self.dll.ag5313xni_GetChannelName(ViSession(vi), ViInt32(index), ViInt32(bufferSize), channelName)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(channelName)

    def GetError(self, vi, bufferSize):
        code = ViStatus()
        description = ARRAY_ViChar(1024)
        status = self.dll.ag5313xni_GetError(ViSession(vi), byref(code), ViInt32(bufferSize), description)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        description = decode(description)
        return code, description

    def ClearError(self, vi):
        status = self.dll.ag5313xni_ClearError(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        status = self.dll.ag5313xni_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(errorMessage)

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(1024)
        status = self.dll.ag5313xni_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        status = self.dll.ag5313xni_ResetInterchangeCheck(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, vi):
        status = self.dll.ag5313xni_ClearInterchangeWarnings(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InvalidateAllAttributes(self, vi):
        status = self.dll.ag5313xni_InvalidateAllAttributes(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Initiate(self, vi):
        status = self.dll.ag5313xni_Initiate(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsMeasurementComplete(self, vi):
        MeasurementStatus = ViInt32()
        status = self.dll.ag5313xni_IsMeasurementComplete(ViSession(vi), byref(MeasurementStatus))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(MeasurementStatus.value)

    def Fetch(self, vi):
        measurement = ViReal64()
        status = self.dll.ag5313xni_Fetch(ViSession(vi), byref(measurement))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def Read(self, vi, maximumTime_ms):
        measurement = ViReal64()
        status = self.dll.ag5313xni_Read(ViSession(vi), ViInt32(maximumTime_ms), byref(measurement))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def Abort(self, vi):
        status = self.dll.ag5313xni_Abort(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def reset(self, vi):
        status = self.dll.ag5313xni_reset(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, vi):
        status = self.dll.ag5313xni_ResetWithDefaults(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        status = self.dll.ag5313xni_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        status = self.dll.ag5313xni_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def Disable(self, vi):
        status = self.dll.ag5313xni_Disable(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def viWrite(self, vi, buffer, count):
        _buffer = (ViByte * len(buffer))(*buffer)
        returnCount = ViInt64()
        status = self.dll.ag5313xni_viWrite(ViSession(vi), _buffer, ViInt64(count), byref(returnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(returnCount.value)

    def viRead(self, vi, bufferSize):
        buffer = ARRAY_ViByte(1024)
        returnCount = ViInt64()
        status = self.dll.ag5313xni_viRead(ViSession(vi), ViInt64(bufferSize), buffer, byref(returnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        returnCount = int(returnCount.value)
        return buffer, returnCount

    def WriteInstrData(self, vi, writeBuffer):
        status = self.dll.ag5313xni_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        status = self.dll.ag5313xni_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def ConfigureChannel(self, vi, channel, impedance, coupling, attenuation):
        status = self.dll.ag5313xni_ConfigureChannel(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(impedance),
            ViInt32(coupling),
            ViReal64(attenuation),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannelFilterEnabled(self, vi, channel, filterEnabled):
        status = self.dll.ag5313xni_ConfigureChannelFilterEnabled(
            ViSession(vi), ViConstString(channel), ViBoolean(filterEnabled)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannelLevel(self, vi, channel, level, hysteresis):
        status = self.dll.ag5313xni_ConfigureChannelLevel(
            ViSession(vi), ViConstString(channel), ViReal64(level), ViReal64(hysteresis)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannelSlope(self, vi, channel, slope):
        status = self.dll.ag5313xni_ConfigureChannelSlope(ViSession(vi), ViConstString(channel), ViInt32(slope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyManual(self, vi, channel, estimate, resolution):
        status = self.dll.ag5313xni_ConfigureFrequencyManual(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(estimate),
            ViReal64(resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequency(self, vi, channel):
        status = self.dll.ag5313xni_ConfigureFrequency(ViSession(vi), ViConstString(channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyWithApertureTime(self, vi, channel, ApertureTime):
        status = self.dll.ag5313xni_ConfigureFrequencyWithApertureTime(
            ViSession(vi), ViConstString(channel), ViReal64(ApertureTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePeriod(self, vi, channel, estimate, resolution):
        status = self.dll.ag5313xni_ConfigurePeriod(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(estimate),
            ViReal64(resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePeriodWithApertureTime(self, vi, channel, ApertureTime):
        status = self.dll.ag5313xni_ConfigurePeriodWithApertureTime(
            ViSession(vi), ViConstString(channel), ViReal64(ApertureTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseWidth(self, vi, channel, estimate, resolution):
        status = self.dll.ag5313xni_ConfigurePulseWidth(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(estimate),
            ViReal64(resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDutyCycle(self, vi, channel, frequencyEstimate, resolution):
        status = self.dll.ag5313xni_ConfigureDutyCycle(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(frequencyEstimate),
            ViReal64(resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEdgeTime(self, vi, channel, estimate, resolution):
        status = self.dll.ag5313xni_ConfigureEdgeTime(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(estimate),
            ViReal64(resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEdgeTimeReferenceLevels(
        self,
        vi,
        channel,
        referenceType,
        estimate,
        resolution,
        highReference,
        lowReference,
    ):
        status = self.dll.ag5313xni_ConfigureEdgeTimeReferenceLevels(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(referenceType),
            ViReal64(estimate),
            ViReal64(resolution),
            ViReal64(highReference),
            ViReal64(lowReference),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyRatio(
        self,
        vi,
        NumeratorChannel,
        DenominatorChannel,
        NumeratorFrequencyEstimate,
        Estimate,
        Resolution,
    ):
        status = self.dll.ag5313xni_ConfigureFrequencyRatio(
            ViSession(vi),
            ViConstString(NumeratorChannel),
            ViConstString(DenominatorChannel),
            ViReal64(NumeratorFrequencyEstimate),
            ViReal64(Estimate),
            ViReal64(Resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTimeInterval(self, vi, startChannel, stopChannel, estimate, resolution):
        status = self.dll.ag5313xni_ConfigureTimeInterval(
            ViSession(vi),
            ViConstString(startChannel),
            ViConstString(stopChannel),
            ViReal64(estimate),
            ViReal64(resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePhase(self, vi, MeasurementChannel, ReferenceChannel, FrequencyEstimate, Resolution):
        status = self.dll.ag5313xni_ConfigurePhase(
            ViSession(vi),
            ViConstString(MeasurementChannel),
            ViConstString(ReferenceChannel),
            ViReal64(FrequencyEstimate),
            ViReal64(Resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureContinuousTotalize(self, vi, channel):
        status = self.dll.ag5313xni_ConfigureContinuousTotalize(ViSession(vi), ViConstString(channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StartContinuousTotalize(self, vi):
        status = self.dll.ag5313xni_StartContinuousTotalize(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StopContinuousTotalize(self, vi):
        status = self.dll.ag5313xni_StopContinuousTotalize(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FetchContinuousTotalizeCount(self, vi):
        Measurement = ViInt32()
        status = self.dll.ag5313xni_FetchContinuousTotalizeCount(ViSession(vi), byref(Measurement))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Measurement.value)

    def ConfigureGatedTotalize(self, vi, channel, GateSource, GateSlope):
        status = self.dll.ag5313xni_ConfigureGatedTotalize(
            ViSession(vi),
            ViConstString(channel),
            ViConstString(GateSource),
            ViInt32(GateSlope),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTimedTotalize(self, vi, channel, GateTime):
        status = self.dll.ag5313xni_ConfigureTimedTotalize(ViSession(vi), ViConstString(channel), ViReal64(GateTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureStartArm(self, vi, type):
        status = self.dll.ag5313xni_ConfigureStartArm(ViSession(vi), ViInt32(type))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureStopArm(self, vi, type):
        status = self.dll.ag5313xni_ConfigureStopArm(ViSession(vi), ViInt32(type))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureExternalStartArm(self, vi, source, level, slope, delay):
        status = self.dll.ag5313xni_ConfigureExternalStartArm(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViInt32(slope),
            ViReal64(delay),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureExternalStopArm(self, vi, source, level, slope, delay):
        status = self.dll.ag5313xni_ConfigureExternalStopArm(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViInt32(slope),
            ViReal64(delay),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureVoltage(self, vi, channel, Function, Estimate, Resolution):
        status = self.dll.ag5313xni_ConfigureVoltage(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(Function),
            ViReal64(Estimate),
            ViReal64(Resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathEnabled(self, vi, enabled):
        status = self.dll.ag5313xni_ConfigureMathEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathAutoEnabled(self, vi, enabled):
        status = self.dll.ag5313xni_ConfigureMathAutoEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathScaleOffset(self, vi, scale, offset):
        status = self.dll.ag5313xni_ConfigureMathScaleOffset(ViSession(vi), ViReal64(scale), ViReal64(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLimitEnabled(self, vi, enabled):
        status = self.dll.ag5313xni_ConfigureLimitEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLimitAutoEnabled(self, vi, enabled):
        status = self.dll.ag5313xni_ConfigureLimitAutoEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureClearAutoEnabled(self, vi, enabled):
        status = self.dll.ag5313xni_ConfigureClearAutoEnabled(ViSession(vi), ViBoolean(enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLimit(self, vi, lower, upper):
        status = self.dll.ag5313xni_ConfigureLimit(ViSession(vi), ViReal64(lower), ViReal64(upper))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureStatistics(self, vi, statisticsEnabled, measurementCount):
        status = self.dll.ag5313xni_ConfigureStatistics(
            ViSession(vi), ViBoolean(statisticsEnabled), ViInt32(measurementCount)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureStatisticsLimit(self, vi, limitEnabled, lower, upper):
        status = self.dll.ag5313xni_ConfigureStatisticsLimit(
            ViSession(vi), ViBoolean(limitEnabled), ViReal64(lower), ViReal64(upper)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RecalculateMath(self, vi):
        status = self.dll.ag5313xni_RecalculateMath(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RecalculateLimits(self, vi):
        status = self.dll.ag5313xni_RecalculateLimits(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearLimitsResult(self, vi):
        status = self.dll.ag5313xni_ClearLimitsResult(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryLimitsTest(self, vi):
        failCountTotal = ViInt32()
        failCountLower = ViInt32()
        failCountUpper = ViInt32()
        passCountTotal = ViInt32()
        status = self.dll.ag5313xni_QueryLimitsTest(
            ViSession(vi),
            byref(failCountTotal),
            byref(failCountLower),
            byref(failCountUpper),
            byref(passCountTotal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        failCountTotal = int(failCountTotal.value)
        failCountLower = int(failCountLower.value)
        failCountUpper = int(failCountUpper.value)
        passCountTotal = int(passCountTotal.value)
        return failCountTotal, failCountLower, failCountUpper, passCountTotal

    def IsOutOfLimit(self, vi):
        status = ViBoolean()
        status = self.dll.ag5313xni_IsOutOfLimit(ViSession(vi), byref(status))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(status.value)

    def QueryStatisticsTest(self, vi, type):
        result = ViReal64()
        status = self.dll.ag5313xni_QueryStatisticsTest(ViSession(vi), ViInt32(type), byref(result))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(result.value)

    def GetCurrentStatisticsCount(self, vi):
        currentCount = ViInt32()
        status = self.dll.ag5313xni_GetCurrentStatisticsCount(ViSession(vi), byref(currentCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(currentCount.value)

    def ClearStatisticsResult(self, vi):
        status = self.dll.ag5313xni_ClearStatisticsResult(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        status = self.dll.ag5313xni_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        status = self.dll.ag5313xni_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(1024)
        status = self.dll.ag5313xni_GetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViInt32(bufSize),
            value,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        status = self.dll.ag5313xni_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        status = self.dll.ag5313xni_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        status = self.dll.ag5313xni_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        status = self.dll.ag5313xni_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        status = self.dll.ag5313xni_SetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        status = self.dll.ag5313xni_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        status = self.dll.ag5313xni_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        status = self.dll.ag5313xni_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        status = self.dll.ag5313xni_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        status = self.dll.ag5313xni_CheckAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        status = self.dll.ag5313xni_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        status = self.dll.ag5313xni_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
