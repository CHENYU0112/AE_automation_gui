from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .ag5313xni_dllwrap import *


class ag5313xni(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = ag5313xni_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def GetNextCoercionRecord(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def GetChannelName(self, index, bufferSize):
        """

        :param index:
        :type index:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, index, bufferSize)

    def GetError(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def GetNextInterchangeWarning(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def Initiate(self):
        """"""
        return self._dllwrap.Initiate(self._vi)

    def IsMeasurementComplete(self):
        """"""
        return self._dllwrap.IsMeasurementComplete(self._vi)

    def Fetch(self):
        """"""
        return self._dllwrap.Fetch(self._vi)

    def Read(self, maximumTime_ms):
        """

        :param maximumTime_ms:
        :type maximumTime_ms:
        """
        return self._dllwrap.Read(self._vi, maximumTime_ms)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def viWrite(self, buffer, count):
        """

        :param buffer:
        :type buffer:
        :param count:
        :type count:
        """
        return self._dllwrap.viWrite(self._vi, buffer, count)

    def viRead(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.viRead(self._vi, bufferSize)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """

        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def ConfigureChannel(self, channel, impedance, coupling, attenuation):
        """

        :param channel:
        :type channel:
        :param impedance:
        :type impedance:
        :param coupling:
        :type coupling:
        :param attenuation:
        :type attenuation:
        """
        return self._dllwrap.ConfigureChannel(self._vi, channel, impedance, coupling, attenuation)

    def ConfigureChannelFilterEnabled(self, channel, filterEnabled):
        """

        :param channel:
        :type channel:
        :param filterEnabled:
        :type filterEnabled:
        """
        return self._dllwrap.ConfigureChannelFilterEnabled(self._vi, channel, filterEnabled)

    def ConfigureChannelLevel(self, channel, level, hysteresis):
        """

        :param channel:
        :type channel:
        :param level:
        :type level:
        :param hysteresis:
        :type hysteresis:
        """
        return self._dllwrap.ConfigureChannelLevel(self._vi, channel, level, hysteresis)

    def ConfigureChannelSlope(self, channel, slope):
        """

        :param channel:
        :type channel:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureChannelSlope(self._vi, channel, slope)

    def ConfigureFrequencyManual(self, channel, estimate, resolution):
        """

        :param channel:
        :type channel:
        :param estimate:
        :type estimate:
        :param resolution:
        :type resolution:
        """
        return self._dllwrap.ConfigureFrequencyManual(self._vi, channel, estimate, resolution)

    def ConfigureFrequency(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.ConfigureFrequency(self._vi, channel)

    def ConfigureFrequencyWithApertureTime(self, channel, ApertureTime):
        """

        :param channel:
        :type channel:
        :param ApertureTime:
        :type ApertureTime:
        """
        return self._dllwrap.ConfigureFrequencyWithApertureTime(self._vi, channel, ApertureTime)

    def ConfigurePeriod(self, channel, estimate, resolution):
        """

        :param channel:
        :type channel:
        :param estimate:
        :type estimate:
        :param resolution:
        :type resolution:
        """
        return self._dllwrap.ConfigurePeriod(self._vi, channel, estimate, resolution)

    def ConfigurePeriodWithApertureTime(self, channel, ApertureTime):
        """

        :param channel:
        :type channel:
        :param ApertureTime:
        :type ApertureTime:
        """
        return self._dllwrap.ConfigurePeriodWithApertureTime(self._vi, channel, ApertureTime)

    def ConfigurePulseWidth(self, channel, estimate, resolution):
        """

        :param channel:
        :type channel:
        :param estimate:
        :type estimate:
        :param resolution:
        :type resolution:
        """
        return self._dllwrap.ConfigurePulseWidth(self._vi, channel, estimate, resolution)

    def ConfigureDutyCycle(self, channel, frequencyEstimate, resolution):
        """

        :param channel:
        :type channel:
        :param frequencyEstimate:
        :type frequencyEstimate:
        :param resolution:
        :type resolution:
        """
        return self._dllwrap.ConfigureDutyCycle(self._vi, channel, frequencyEstimate, resolution)

    def ConfigureEdgeTime(self, channel, estimate, resolution):
        """

        :param channel:
        :type channel:
        :param estimate:
        :type estimate:
        :param resolution:
        :type resolution:
        """
        return self._dllwrap.ConfigureEdgeTime(self._vi, channel, estimate, resolution)

    def ConfigureEdgeTimeReferenceLevels(
        self, channel, referenceType, estimate, resolution, highReference, lowReference
    ):
        """

        :param channel:
        :type channel:
        :param referenceType:
        :type referenceType:
        :param estimate:
        :type estimate:
        :param resolution:
        :type resolution:
        :param highReference:
        :type highReference:
        :param lowReference:
        :type lowReference:
        """
        return self._dllwrap.ConfigureEdgeTimeReferenceLevels(
            self._vi,
            channel,
            referenceType,
            estimate,
            resolution,
            highReference,
            lowReference,
        )

    def ConfigureFrequencyRatio(
        self,
        NumeratorChannel,
        DenominatorChannel,
        NumeratorFrequencyEstimate,
        Estimate,
        Resolution,
    ):
        """

        :param NumeratorChannel:
        :type NumeratorChannel:
        :param DenominatorChannel:
        :type DenominatorChannel:
        :param NumeratorFrequencyEstimate:
        :type NumeratorFrequencyEstimate:
        :param Estimate:
        :type Estimate:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureFrequencyRatio(
            self._vi,
            NumeratorChannel,
            DenominatorChannel,
            NumeratorFrequencyEstimate,
            Estimate,
            Resolution,
        )

    def ConfigureTimeInterval(self, startChannel, stopChannel, estimate, resolution):
        """

        :param startChannel:
        :type startChannel:
        :param stopChannel:
        :type stopChannel:
        :param estimate:
        :type estimate:
        :param resolution:
        :type resolution:
        """
        return self._dllwrap.ConfigureTimeInterval(self._vi, startChannel, stopChannel, estimate, resolution)

    def ConfigurePhase(self, MeasurementChannel, ReferenceChannel, FrequencyEstimate, Resolution):
        """

        :param MeasurementChannel:
        :type MeasurementChannel:
        :param ReferenceChannel:
        :type ReferenceChannel:
        :param FrequencyEstimate:
        :type FrequencyEstimate:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigurePhase(
            self._vi, MeasurementChannel, ReferenceChannel, FrequencyEstimate, Resolution
        )

    def ConfigureContinuousTotalize(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.ConfigureContinuousTotalize(self._vi, channel)

    def StartContinuousTotalize(self):
        """"""
        return self._dllwrap.StartContinuousTotalize(self._vi)

    def StopContinuousTotalize(self):
        """"""
        return self._dllwrap.StopContinuousTotalize(self._vi)

    def FetchContinuousTotalizeCount(self):
        """"""
        return self._dllwrap.FetchContinuousTotalizeCount(self._vi)

    def ConfigureGatedTotalize(self, channel, GateSource, GateSlope):
        """

        :param channel:
        :type channel:
        :param GateSource:
        :type GateSource:
        :param GateSlope:
        :type GateSlope:
        """
        return self._dllwrap.ConfigureGatedTotalize(self._vi, channel, GateSource, GateSlope)

    def ConfigureTimedTotalize(self, channel, GateTime):
        """

        :param channel:
        :type channel:
        :param GateTime:
        :type GateTime:
        """
        return self._dllwrap.ConfigureTimedTotalize(self._vi, channel, GateTime)

    def ConfigureStartArm(self, type):
        """

        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureStartArm(self._vi, type)

    def ConfigureStopArm(self, type):
        """

        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureStopArm(self._vi, type)

    def ConfigureExternalStartArm(self, source, level, slope, delay):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param slope:
        :type slope:
        :param delay:
        :type delay:
        """
        return self._dllwrap.ConfigureExternalStartArm(self._vi, source, level, slope, delay)

    def ConfigureExternalStopArm(self, source, level, slope, delay):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param slope:
        :type slope:
        :param delay:
        :type delay:
        """
        return self._dllwrap.ConfigureExternalStopArm(self._vi, source, level, slope, delay)

    def ConfigureVoltage(self, channel, Function, Estimate, Resolution):
        """

        :param channel:
        :type channel:
        :param Function:
        :type Function:
        :param Estimate:
        :type Estimate:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureVoltage(self._vi, channel, Function, Estimate, Resolution)

    def ConfigureMathEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMathEnabled(self._vi, enabled)

    def ConfigureMathAutoEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMathAutoEnabled(self._vi, enabled)

    def ConfigureMathScaleOffset(self, scale, offset):
        """

        :param scale:
        :type scale:
        :param offset:
        :type offset:
        """
        return self._dllwrap.ConfigureMathScaleOffset(self._vi, scale, offset)

    def ConfigureLimitEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureLimitEnabled(self._vi, enabled)

    def ConfigureLimitAutoEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureLimitAutoEnabled(self._vi, enabled)

    def ConfigureClearAutoEnabled(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureClearAutoEnabled(self._vi, enabled)

    def ConfigureLimit(self, lower, upper):
        """

        :param lower:
        :type lower:
        :param upper:
        :type upper:
        """
        return self._dllwrap.ConfigureLimit(self._vi, lower, upper)

    def ConfigureStatistics(self, statisticsEnabled, measurementCount):
        """

        :param statisticsEnabled:
        :type statisticsEnabled:
        :param measurementCount:
        :type measurementCount:
        """
        return self._dllwrap.ConfigureStatistics(self._vi, statisticsEnabled, measurementCount)

    def ConfigureStatisticsLimit(self, limitEnabled, lower, upper):
        """

        :param limitEnabled:
        :type limitEnabled:
        :param lower:
        :type lower:
        :param upper:
        :type upper:
        """
        return self._dllwrap.ConfigureStatisticsLimit(self._vi, limitEnabled, lower, upper)

    def RecalculateMath(self):
        """"""
        return self._dllwrap.RecalculateMath(self._vi)

    def RecalculateLimits(self):
        """"""
        return self._dllwrap.RecalculateLimits(self._vi)

    def ClearLimitsResult(self):
        """"""
        return self._dllwrap.ClearLimitsResult(self._vi)

    def QueryLimitsTest(self):
        """"""
        return self._dllwrap.QueryLimitsTest(self._vi)

    def IsOutOfLimit(self):
        """"""
        return self._dllwrap.IsOutOfLimit(self._vi)

    def QueryStatisticsTest(self, type):
        """

        :param type:
        :type type:
        """
        return self._dllwrap.QueryStatisticsTest(self._vi, type)

    def GetCurrentStatisticsCount(self):
        """"""
        return self._dllwrap.GetCurrentStatisticsCount(self._vi)

    def ClearStatisticsResult(self):
        """"""
        return self._dllwrap.ClearStatisticsResult(self._vi)

    def GetAttributeViInt32(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName, attribute, bufSize):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param bufSize:
        :type bufSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)
