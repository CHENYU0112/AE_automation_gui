#!/usr/bin/python
# ===========================================================================
# Name:        com_dpifgen2_api_testing.py
#
# Purpose:     Basic API for dpIFGen2 communication for SPI
#
# Author:      Aslam Faizan Muhammad (IFAG PMM SYS SWT SWI)
#                                        <Faizan.Aslam@infineon.com>
# Created:     02.06.2014
#
# Python Version: v2.7.2
#
# Dependency: lib_dpifgen2_commands_list, com_dpifgen2_api_basic
#
# ===========================================================================
# Copyright (C) 2014-2015 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#

""" This Documentation describes the .dp Interface Gen 2(dpIfGen2) board's
    basic API to communicate with the dp2x chip through the SPI interface.
    The API is meant to serve as an abstraction layer between the PC and the
    dp2x chip hiding the unnecessary details in the low level communication
    between the Interface board and the chip itself. The API has been
    partitioned into the following major command categories::

        1. Connection Commands
        2. Read Commands
        3. Write Commands
"""
from __future__ import annotations

import re

from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_basic import DpIfGen2APIBasic
from dpIfGen2lib.dpIfGen2API.lib_dpifgen2_commands_list import DpIfGen2Commands


class ShowDocumentation:
    @staticmethod
    def show(obj):
        print(obj.__doc__)


class DpIfGen2APITesting:
    """The Detailed API is as follows:

    Connection Commands:
        1. :func:`test_mode_set`

    Read Commands:
        1. :func:`test_register_read`

    Write Commands:
        1. :func:`test_register_write`

    """

    #: dpIfGen2 Testing API v1.0.1
    VERSION = "1.0.2"

    @staticmethod
    def list_of_functions():
        return [
            "test_mode_set()",
            "test_register_read()",
            "test_register_write()",
        ]

    @staticmethod
    def dict_of_api_functions():
        return {
            "C1_1:Set Test Mode": {
                "Name": "Set Test Mode",
                "Usage": "DpIfGen2APITesting.test_mode_set(mode, verbose=True, debug=False)",
                "Description": DpIfGen2APITesting.test_mode_set.__doc__,
                "Class": "Connection",
            },
            "C2_1:Read Test Register": {
                "Name": "Read Test Registers",
                "Usage": 'output_word = DpIfGen2APITesting.test_register_read("0012", "dec", '
                "verbose=True, debug=False)",
                "Description": DpIfGen2APITesting.test_register_read.__doc__,
                "Class": "Read",
            },
            "C3_1:Write Test Register": {
                "Name": "Write Test Registers",
                "Usage": 'DpIfGen2APITesting.test_register_write("8000", "BEEF", verbose=True, debug=False)',
                "Description": DpIfGen2APITesting.test_register_write.__doc__,
                "Class": "Write",
            },
        }

    @staticmethod
    def test_mode_set(mode, verbose=False, debug=False, parent=None):
        """Establishes connection with the dp2x chip through the SPI communication and
        sets the test mode.

        :param mode: Test mode to be configured
        :type verbose: int
        :param verbose: Prints execution information.
        :type verbose: bool
        :param debug: Prints additional debug information.
        :type debug: bool
        :param parent: Reference to the calling object.
        :type parent: object reference
        :returns:  none.


        There are 3 test modes supported:
            1. 0 = off - no SPI access possible
            2. 1 = open DP2x device (pull TESTEN high and issue 20 SCLK cycles)
            3. 2 = use either TESTEN or PLDEN as SPI-chip select signals)


        .. note::

           This module will be the only command you need to start communication
           with the chip if you do not have any special requirements.

        Example Usage:

        >>> DpIfGen2APITesting.test_mode_set(0)
        >>> DpIfGen2APITesting.test_mode_set(0, verbose=True)

        """

        # define the sequence
        if mode < 0 or mode > 2:
            raise Exception(
                "".join(
                    [
                        "The selected mode is not ",
                        "supported. ",
                        "Please enter a mode from 0 to 2 ",
                    ]
                )
            )

        mode = f"{mode:04X}"
        mode_endian = DpIfGen2APIBasic.convert_endian(mode)
        parameter = mode_endian

        exec_seq = {}
        exec_seq["Name"] = "Test Mode Set"
        exec_seq[0] = {
            "Step": "Test Mode Set",
            "Command": DpIfGen2Commands.SET_TEST_MODE_COMMAND,
            "Parameters": parameter,
            "Response": DpIfGen2Commands.ACK,
            "Timeout": 1,
        }

        DpIfGen2APIBasic.exec_config_seq(exec_seq, verbose, debug, parent)

    ##########################################################################
    ########################### Read Commands ################################
    ##########################################################################
    @staticmethod
    def test_register_read(address, out_format="hex", verbose=False, debug=False, parent=None):
        """Reads a test register location.

        :param address: 4 hexadecimal digit test register address
        :type address: str
        :param out_format: The format of the word read from the test register location
        :type out_format: str
        :param verbose: Prints execution information.
        :type verbose: bool
        :param debug: Prints additional debug information.
        :type debug: bool
        :param parent: Reference to the calling object.
        :type parent: object reference
        :returns: word

        This command is used to read one word from the specified test register address.

        .. note::

            The read word is returned in hexdecimal format by default.
            Supported return formats are:

                * **dec**: Decimal format
                * **hex**: Hexadecimal format

        .. warning::

           The address range is not checked in the command.

        Example Usage:

        >>> output_word = DpIfGen2APITesting.test_register_read("0012")
        >>> output_word = DpIfGen2APITesting.test_register_read("0012", "dec", verbose=True)
        """
        address_chk = re.match(r"([0-9a-fA-F]{4})", address)
        if not address_chk:
            msg = "Address is not in correct format. Please enter a 4 Hexadecimal digit Address"
            raise Exception(msg)

        address_endian = DpIfGen2APIBasic.convert_endian(address)
        valid_fmt = ["hex", "dec"]
        if out_format not in valid_fmt:
            raise Exception(
                "".join(
                    [
                        "Format is not valid. ",
                        "Please specify a valid format ",
                        "from the following: ",
                        str(valid_fmt),
                    ]
                )
            )

        # define the sequence
        exec_seq = {}
        exec_seq["Name"] = "Read Word"
        exec_seq[0] = {
            "Step": "Read Single Word",
            "CommandData": DpIfGen2Commands.TEST_REG_READ_COMMAND,
            "Parameters": "".join([address_endian]),
            "Response": DpIfGen2Commands.ACK,
            "Timeout": 2,
        }

        word = DpIfGen2APIBasic.exec_config_seq(exec_seq, verbose, debug, parent)
        if out_format == "dec":
            return word
        elif out_format == "hex":
            return f"{word:04X}"
        return None

    ##########################################################################
    ########################### Write Commands ###############################
    ##########################################################################
    @staticmethod
    def test_register_write(address, value, verbose=False, debug=False, parent=None):
        """Write a word value to the specified test register location.

        :param address: 4 hexadecimal digit test register address
        :type address: str
        :param value: 4 hexadecimal digit value
        :type value: str
        :param verbose: Prints execution information.
        :type verbose: bool
        :param debug: Prints additional debug information.
        :type debug: bool
        :param parent: Reference to the calling object.
        :type parent: object reference
        :returns: none

        This command is used to write one word to the specified test register location.

        .. warning::

            The address range is not checked in the command.

        Example Usage:

        >>> DpIfGen2APITesting.test_register_write("0012", "BEEF")
        >>> DpIfGen2APITesting.test_register_write("0012", "BEEF", verbose=True)

        """
        address_chk = re.match(r"([0-9a-fA-F]{4})", address)
        if not address_chk:
            msg = "Address is not in correct format. Please enter a 4 Hexadecimal digit Address"
            raise Exception(msg)
        value_chk = re.match(r"([0-9a-fA-F]{4})", value)
        if not value_chk:
            msg = "Value is not in correct format. Please enter a 4 Hexadecimal digit Value"
            raise Exception(msg)

        address_endian = DpIfGen2APIBasic.convert_endian(address)
        value_endian = DpIfGen2APIBasic.convert_endian(value)

        parameter = "".join([address_endian, value_endian])

        # define the sequence
        exec_seq = {}
        exec_seq["Name"] = "Write Test Register"
        exec_seq[0] = {
            "Step": "Write Test Register",
            "Command": DpIfGen2Commands.TEST_REG_WRITE_COMMAND,
            "Parameters": parameter,
            "Response": DpIfGen2Commands.ACK,
            "Timeout": 1,
        }

        DpIfGen2APIBasic.exec_config_seq(exec_seq, verbose, debug, parent)


def main():
    print("This script is not executable. It contains library functions only.")
    print("Version", DpIfGen2APITesting.VERSION)

    DpIfGen2APITesting.test_mode_set(1)
    DpIfGen2APITesting.test_register_read("0012", "hex", True)
    DpIfGen2APITesting.test_register_write("0012", "1234", True)


if __name__ == "__main__":
    main()

# --- End of File ------------------------------------------------
