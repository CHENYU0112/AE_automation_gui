from __future__ import annotations

from dpIfGen2lib.dpIfGen3API.com_dpifgen3_api_basic_class import DpIfGen2APIBasicDp3Class


class DpIfGen2APIBasicDp3Static:
    VERSION = DpIfGen2APIBasicDp3Class.VERSION

    MIN_DPIFGEN2_FW_VERSION = DpIfGen2APIBasicDp3Class.MIN_DPIFGEN2_FW_VERSION
    MAX_DPIFGEN2_FW_VERSION = DpIfGen2APIBasicDp3Class.MAX_DPIFGEN2_FW_VERSION

    list_of_functions = staticmethod(DpIfGen2APIBasicDp3Class.list_of_functions)
    dict_of_api_functions = staticmethod(DpIfGen2APIBasicDp3Class.dict_of_api_functions)

    def __init__(self):
        """

        Returns
        -------
        DpIfGen2APIBasicDp3Class
        """
        functions = [x[:-2] for x in DpIfGen2APIBasicDp3Class.list_of_functions()]

        def factory(fname):
            # A common static decorator that creates an instance of the api class for calling the functions
            def staticfunc(*args, **kwargs):
                cls = DpIfGen2APIBasicDp3Class()
                classfunc = getattr(cls, fname, None)
                if callable(classfunc):
                    cls.open()
                    try:
                        return classfunc(*args, **kwargs)
                    finally:
                        cls.close()
                return None

            # Copy function doc to new object
            classfunc = getattr(DpIfGen2APIBasicDp3Class, fname, None)
            if hasattr(classfunc, "__doc__"):
                staticfunc.__doc__ = classfunc.__doc__
            # Return wrapped static function
            return staticfunc

        for f in functions:
            if f not in ["list_of_functions"]:
                setattr(self, f, factory(f))


DpIfGen2APIBasicDp3 = DpIfGen2APIBasicDp3Static()


if __name__ == "__main__":
    print("This script is not executable. It contains library functions only.")
    print("Version", DpIfGen2APIBasicDp3.VERSION)
    # print(dir(DpIfGen2APIBasicDp3))
    list1 = DpIfGen2APIBasicDp3.list_of_functions()
    for item in list1:
        print(item)

# --- End of File ------------------------------------------------
