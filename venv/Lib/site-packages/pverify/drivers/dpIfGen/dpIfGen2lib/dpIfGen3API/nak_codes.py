# This file is generated automatically.
# DO NOT EDIT.
from __future__ import annotations

nak_codes_dict = {
    511: {
        "action": "Check load, check the capacitor on VDD, check USB connection (e.g. do not use a hub or too long cable); start again.",
        "name": "NAK_VDD_SHORTED",
        "description": "DpIfGen2 could not reach desired VDD. There are several possible root causes: impedance of load < 40R or there is a too big supply capacitor on the .dp supply or the USB side cannot provide enough power.",
    },
    767: {
        "action": "No action required.",
        "name": "NAK_EXTERNAL_SUPPLY",
        "description": "An external supply is attached or the .dp device generates its own supply. DpIfGen2 does not provide any supply to the .dp device.",
    },
    1023: {
        "action": "Change the .dp device.",
        "name": "NAK_VOLATGE_LEVEL_NOT_REACHED",
        "description": "The .dp device supply generated by DpIfGen2 could not reach the desired level. The current which is drawn by the .dp device could be too high.",
    },
    1162: {
        "action": "Check users manual",
        "name": "NAK_WRONG_CALIBRATION_AGUMENT",
        "description": "Argument other than up/down/get/test (1,2,4,5) send",
    },
    1163: {
        "action": "Please calibrate dpIfgen2 using dpCalibrator",
        "name": "NAK_NOT_CALIBRATED",
        "description": "dpIfGen2 HW is not calibrated (7V5 +/- 100mV)",
    },
    1242: {
        "action": "If supply still out of range, get new dpIfgen2 hardware",
        "name": "NAK_CALIBRATION_MAXIMUM_REACHED",
        "description": "Upper or lower limit of calibration reached",
    },
    1279: {
        "action": "Check the allowed voltage range of the set-voltage command. Hint: the definition is done (value x 10) to achieve a resolution of 100mV. Thus 5v would be 50d -> 0x32",
        "name": "NAK_VOLTAGE_DEFINITION_OUT_OF_RANGE",
        "description": "The set-voltage command has been used with a voltage value outside the allowed range.",
    },
    1535: {
        "action": "Make sure that a set-voltage command (typically setting to 12V) has been executed before.",
        "name": "NAK_POWER_OFF",
        "description": "Trying to execute a .dp related command (other as sync) without having used set-voltage before.",
    },
    1791: {
        "action": "Make sure that a sync command  has been executed before.",
        "name": "NAK_NOT_SYNCED",
        "description": "Trying to execute a .dp related command without having used sync before.",
    },
    2047: {
        "action": "Try again, if error persists exchange DpIfGen2 hardware.",
        "name": "NAK_EEPROM_VERIFY_ERROR",
        "description": "Trying to write data to the EEPROM (of DpIfGen2) has failed. The EEPROM is used to store serial number (S/N), hardware ID and boot string.",
    },
    2303: {
        "action": "Turn power off and on again and try again. If error persists exchange DpIfGen2 hardware.",
        "name": "NAK_EEPROM_WRITE_ERROR",
        "description": "Trying to do a write when the prior write command has not finished yet.",
    },
    2559: {
        "action": "Set string size according to definition.",
        "name": "NAK_EEPROM_STRING_ERROR",
        "description": "The string size  is out of range. It should be at least one byte and maximal 32 bytes.",
    },
    2815: {
        "action": "Check connection, supply and if correct .dp device is attached.",
        "name": "NAK_UART_TIMEOUT",
        "description": "A timeout took place when communicating with the .dp device. All actions from DpIfGen2 to .dp device will be supervised by a timeout.",
    },
    3071: {
        "action": "Check .dp device.",
        "name": "NAK_UNEXPECTED",
        "description": "An unexpected value has been echoed on sync command.",
    },
    3327: {
        "action": "Check UART if other device is connected other then .dp device.",
        "name": "NAK_DATA_COLLISION",
        "description": "DpIfGen2 tries to send a byte on UART while another device is sending on the same UART wire, too.",
    },
    3583: {
        "action": "Try again.",
        "name": "NAK_UART_INTERFACE_ERROR",
        "description": "The UART module discovered a signal error like frame-error or an override-error of bytes in the receive buffer.",
    },
    3839: {
        "action": "Check UART connection. Hint: a short for longer than 10bits to gnd (on UART) will automatically turn off UART",
        "name": "NAK_UART_INACTIVE",
        "description": "The UART module was turned off",
    },
    4095: {
        "action": "Turn power off and repeat action",
        "name": "NAK_POWER_ON",
        "description": "The power is turned on and was expected to be off",
    },
    4351: {
        "action": "Only use 32 < character < 126 for string. Characters \r and \n are allowed, too.",
        "name": "NAK_INVALID_STRING_VALUE",
        "description": "The string contains a a non ASCII  character.",
    },
    4607: {
        "action": "Check command ID.",
        "name": "NAK_COMMAND_NOT_REGISTERD",
        "description": "An unknown command has been sent to DpIFGen2.",
    },
    4863: {
        "action": "Check number and consistency of arguments. For write command the number of bytes is included.",
        "name": "NAK_COMMAND_ERROR",
        "description": "An invalid command has been sent to DpIfGen2.",
    },
    5119: {
        "action": "Refer to documentation and check command.",
        "name": "NAK_WRONG_ARGUMENT",
        "description": "The command for setting  a wrong parameter value.",
    },
    5375: {
        "action": "Replace .dp device or use board with .dp3",
        "name": "NAK_VINTAGE_DEVICE",
        "description": "An old .dp device (dp2a, dp2b) has been detected. Those devices are not supported yet.",
    },
    5631: {
        "action": "MEMORY READ:Reduce size of data or split transmission in smaller blocks. MEMORY WRITE:Check host command and data transmission.",
        "name": "NAK_DATASIZE_MISSMATCH",
        "description": "MEMORY READ:Size of data to transmit is 0 or bigger than the available buffer size of DpIfGen2. MEMORY WRITE:Size of data does not match the number of data bytes received.",
    },
    5887: {
        "action": "Bit error on transmission? Try again.",
        "name": "NAK_CRC_MISSMATCH",
        "description": "CRC of data received on a UART read command is wrong.",
    },
    6143: {
        "action": "Bit error on transmission? Try again.",
        "name": "NAK_CS_IN_ACK_FRAME_MISSMATCH",
        "description": "Checksum of an UART ACK frame is not correct.",
    },
    6399: {
        "action": "Before tristate VCC you have to turn on power. Before tristate uart you have to sync first.",
        "name": "NAK_NOT_ALLOWED_IN_THIS_CONTEXT",
        "description": "You tried to tristate VCC or UART having not used this device before",
    },
    6655: {
        "action": "Read user manual about usage of commands.",
        "name": "NAK_WRONG_FRAME_CONTEXT",
        "description": "The frame just sent to DpIfGen2 is not expected in the command flow.",
    },
    6911: {
        "action": "Reduce data size.",
        "name": "NAK_HOST_BUFFER_OVERRUN",
        "description": "Amount of data sent to DpIfGen2 exceeds limit.",
    },
    7167: {
        "action": "Send VCC_UART_STATUS_CONTROL (CMD68) to release tristate",
        "name": "NAK_RELEASE_TRISTAE_FIRST",
        "description": "UART or VCC has been set to tristate(blinking LED)",
    },
    7423: {
        "action": "Read user manual about usage of commands.",
        "name": "NAK_NO_DATA_AND_END_RECIVED",
        "description": "A DAT frame or END frame (DAT\0) was expected but a different frame was sent to DpIfGen2.",
    },
    7679: {
        "action": "Only use transparent write command in formatted way. Please refer to user manual of DpIfGen2.",
        "name": "NAK_NO_TRANSPARENT_UNFORMATED_WRITE_POSSIBLE",
        "description": "Transparent write can only be done in a formatted way.",
    },
    7935: {
        "action": "Check PC GUI or script. Should never occur in normal usage (this command should have never been sent).",
        "name": "NAK_BUFFER_COMPARE_MISSMATCH",
        "description": "Doing a memory write/read stress test was terminated with compare errors.",
    },
    8191: {
        "action": "Check PC GUI or script. Should never occur in normal usage (this command should have never been sent).",
        "name": "NAK_BUFFER_SIZE_MISSMATCH",
        "description": "Doing a memory write/read stress test was terminated with write size is not equal to read size.",
    },
    8447: {
        "action": "",
        "name": "NAK_USER_CAP_DISCHARGE_DISABLE",
        "description": "This is a test for obtaining if the user cap discharge jumper is set",
    },
    65535: {
        "action": "",
        "name": "NAK_DUMMY",
        "description": "",
    },
}


class NakCodes:
    def __init__(self):
        self.codes = nak_codes_dict

    def _has_value(self, value):
        return value in self.codes

    def get_name(self, value):
        if self._has_value(value):
            return self.codes[value]["name"]
        else:
            return "NA"

    def get_description(self, value):
        if self._has_value(value):
            return self.codes[value]["description"]
        else:
            return "NA"

    def get_action(self, value):
        if self._has_value(value):
            return self.codes[value]["action"]
        else:
            return "NA"
