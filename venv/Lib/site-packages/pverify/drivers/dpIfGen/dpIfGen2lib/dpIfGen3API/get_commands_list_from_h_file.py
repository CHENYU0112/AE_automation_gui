# !/usr/bin/python
# ===========================================================================
# Name:        flow_get_define_from_file.py
#
# Purpose:     Gets a specified define from a specified file
#
# Author:      Richard Langaschek (IFAG PMM APS SWI)
#                                        <richard.langaschek@infineon.com>
# Created:     14.04.2015
#
# Python Version: v2.7.2
#
# Dependency:
#
# ===========================================================================
# Copyright (C) 2014-2015 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
from __future__ import annotations

import argparse
import re


class GetDefine:
    """
    Gets a define from a file.
    """

    VERSION = "1.0.0"
    """
    History:
    1.0.0: initial version
    """

    def __init__(self, parent=None):
        """
        Initialization of the class. Call the __init__ for the super class
        """
        self.parent = parent
        self.verbose = False
        self.debug = False
        self.print_out = False
        self.print_cmd = False
        self.string = ""

    def parse_arguments(self):
        parser = argparse.ArgumentParser(description=self.__doc__)

        groupBasic = parser.add_argument_group("Options")

        groupBasic.add_argument("-f", "--input_file", help="Input file", required=True)
        groupBasic.add_argument("-fo", "--output_file", help="Output file", required=True)
        groupBasic.add_argument(
            "-v",
            "--verbose",
            help="Provide additional printout",
            action="store_true",
            required=False,
        )
        groupBasic.add_argument(
            "-d",
            "--debug",
            help="Provide debug information",
            action="store_true",
            required=False,
        )
        groupBasic.add_argument("-V", "--version", help="Print version", action="store_true", required=False)

        self.args = parser.parse_args()
        # assign argument values to class variables ##

        self.input_file = self.args.input_file
        self.ouput_file = self.args.output_file

        if self.args.verbose:
            self.verbose = self.args.verbose
        if self.args.debug:
            self.debug = self.args.debug

        # special handler for version information
        if self.args.version:
            # show the version and exit
            print("Version: %s", self.VERSION)
            exit()

        # show values ##
        if self.verbose:
            print("           Input File: %s" % self.input_file)
            print("         Verbose mode: %s" % self.verbose)
            print("           Debug mode: %s" % self.debug)
            print("              Version: %s" % self.VERSION)

        if self.debug:
            self.print_cmd = True
            self.print_out = True

    @property
    def get_define_from_file(self):
        with open(self.input_file, "rb") as fp:
            line_list = fp.readlines()
            result_list = []
            search_string = r"\s([A-Z,_]*)\s*\=\s0x([0-9,A-F,a-f]*),\s*"  # "^\s*#define\s+(.*)\s([0-9]+)"  # "^\s*#define\s+(.*)\s+(.*)"
            for line in line_list:
                # get definition of command and the HID command number
                result = re.search(search_string, line)
                # save the Name and the command nummber in a list
                if result:
                    # split string
                    print(result.group(1))
                    print(result.group(2))
                    command = ["", ""]
                    command[0] = result.group(1)
                    command[1] = result.group(2)
                    command[1] = "CMD" + str(command[1]).zfill(2)
                    result_list.append(command)

            fp.close()
            return result_list

    # modify the com_dpifgen3_commands_list.py file change the names and die command numbers
    def create_commands_list(self, commands):
        file = []
        with open(self.ouput_file) as fp:  # open file in default read mode
            line_list = fp.readlines()
            fp.close()
            commands_list_beginn = False
            start_string = r"(#\s{1}Commands\s{1}list\s{1}beginn.)"
            end_string = r"(#\s{1}Commands\s{1}list\s{1}end.)"
            i = 0
            # delete old commands
            while i < len(line_list):
                if re.search(start_string, line_list[i]):
                    commands_list_beginn = True
                    file.append(line_list[i])
                if re.search(end_string, line_list[i]):
                    commands_list_beginn = False
                if not commands_list_beginn:
                    file.append(line_list[i])
                i += 1

            # search the first line of the Commands list
            i = 0
            first_line = 0
            while i < len(file):
                if re.search(start_string, file[i]):
                    first_line = i + 1
                    break
                i += 1

            # add line to the File
            for line_count, item in enumerate(commands):
                file.append(file[len(file) - 1])
                j = len(file) - 1
                while j > (first_line + line_count):
                    file[j] = file[j - 1]
                    j -= 1
                file[first_line + line_count] = "    " + item[0] + ' = "' + item[1] + '"' + "\n\n"

        # write the commands to the the file
        with open(self.ouput_file, "w") as fp:
            for line in file:
                fp.write(line)
            fp.close()


def main():
    the_instance = GetDefine()
    the_instance.parse_arguments()
    result = the_instance.get_define_from_file
    print(result)
    the_instance.create_commands_list(result)


if __name__ == "__main__":
    main()

# --- End of File ------------------------------------------------
