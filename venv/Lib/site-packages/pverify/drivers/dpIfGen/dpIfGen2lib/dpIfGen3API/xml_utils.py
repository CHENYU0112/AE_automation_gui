from __future__ import annotations


def hex_to_int(hex_string):
    return int(hex_string, 16) if hex_string.startswith("0x") else int(hex_string)


class Param:
    def __init__(self):
        self.name = None
        self.bit_size = 0
        self.value = None

    def is_padding(self):
        return self.name == "padding"

    def set_property_name(self, name):
        self.name = name

    def set_property_bit_size(self, bit_size):
        self.bit_size = int(bit_size)

    def set_property_value(self, value):
        if value != "NA":
            self.value = hex_to_int(value)

    def size_in_bytes_get(self):
        return self.bit_size >> 3


class Parameters:
    def __init__(self):
        self.params = []

    def add(self, param):
        """
        :type param: Param
        """
        self.params.append(param)

    def size_in_bytes_get(self):
        total_size = 0
        for item in self.params:
            total_size += item.size_in_bytes_get()
        return total_size

    def _fill(self, size, pattern=0):
        byte_list = []
        for _i in range(size >> 3):
            byte_list.append(pattern)
        return byte_list

    def _convert(self, param):
        """
        :type param: Param
        """
        byte_list = []
        if param.value is not None:
            value_mod = param.value
            for _i in range(param.bit_size >> 3):
                byte_list.append(value_mod & 0xFF)
                value_mod = value_mod >> 8
        else:
            msg = "Error: invalid parameter value"
            raise Exception(msg)
            # byte_list.extend(self._fill(param.bit_size, -1))
        return byte_list

    def byte_list_get(self):
        byte_list = []
        for item in self.params:
            if item.is_padding():
                byte_list.extend(self._fill(item.bit_size))
            elif item.bit_size in [8, 16, 32, 64]:
                byte_list.extend(self._convert(item))
            else:
                msg = "Error: invalid parameter size"
                raise Exception(msg)
        return byte_list


class XML_reader:
    def __init__(self, filename, record):
        self.params = Parameters()
        self.record_type = None
        self.read_file(filename, record)

    def read_file(self, filename, record):
        from xml.etree.ElementTree import parse

        e = parse(filename).getroot()
        for item in e.findall("LayoutGroup"):
            found_record_type = hex_to_int(item.get("RecordTypeID"))
            if found_record_type == record:
                self.record_type = found_record_type
                for p in item.findall("Parameter"):
                    parameter = Param()
                    parameter.set_property_bit_size(p.get("bit_size"))
                    parameter.set_property_name(p.get("name"))
                    parameter.set_property_value(p.get("value"))
                    self.params.add(parameter)
                return
        for item in e.findall("PayloadGroup"):
            found_record_type = hex_to_int(item.get("RecordTypeID"))
            if found_record_type == record:
                self.record_type = found_record_type
                for p in item.findall("Parameter"):
                    parameter = Param()
                    parameter.set_property_bit_size("8")
                    parameter.set_property_name("dummy")
                    parameter.set_property_value(p.get("value"))
                    self.params.add(parameter)
                return

    def get_data(self):
        return self.params.byte_list_get()

    def get_record_type(self):
        return self.record_type
