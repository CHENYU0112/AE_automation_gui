from __future__ import annotations

import glob
import sys
import unittest
from os.path import abspath, basename, dirname, normpath, splitext

# test_dir = [__file__, '..', 'test']
# test_dir = os.path.normpath('/'.join(test_dir))
# sys.path.insert(0, test_dir)

if len(sys.argv) < 2:
    # scan for all tests
    test_file_pattern = "test/test*.py"
else:
    test_file_pattern = sys.argv[1]


class TestRunner:
    def __init__(self, pattern):
        self.base_path = dirname(abspath(__file__))
        self.root_path = dirname(dirname(abspath(__file__)))
        self._add_sys_path(self.root_path)
        self.test_file_pattern = pattern

    def _print(self, msg):
        print(msg)
        print("=" * len(msg))
        sys.stdout.flush()

    def _add_sys_path(self, full_path):
        if full_path not in sys.path:
            sys.path.insert(0, full_path)

    def _add_sys_path_local(self, local_path):
        full_path = normpath("/".join([self.base_path, local_path]))
        self._add_sys_path(full_path)
        return full_path

    def print_path(self):
        for item in sys.path:
            print(item)
            sys.stdout.flush()

    def run(self, local_path):
        full_path = self._add_sys_path_local(local_path)

        unsuccessful_test_count = 0
        self._print(f"Run tests in {full_path:s}")
        glob_pattern = "/".join([full_path, self.test_file_pattern])
        test_files = glob.glob(glob_pattern)
        test_filenames = [basename(test_file) for test_file in test_files]
        test_modules = [splitext(test_file)[0] for test_file in test_filenames]

        verbosity = 2

        if len(test_modules):
            # load the tests from the files as unittest to the testsuit that the testsuite can start them
            test_suite = unittest.defaultTestLoader.loadTestsFromNames(test_modules)

            # calling the run method in suite.py (line 88) there is a loop were every single test will be started
            result = unittest.TextTestRunner(sys.stderr, True, verbosity).run(test_suite)
            unsuccessful_test_count = len(result.errors) + len(result.failures)
        else:
            self._print("No tests found")

        return unsuccessful_test_count


def main():
    obj = TestRunner("test*.py")
    directory = sys.argv[1]
    result = obj.run(directory)
    sys.exit(result)


if __name__ == "__main__":
    main()
