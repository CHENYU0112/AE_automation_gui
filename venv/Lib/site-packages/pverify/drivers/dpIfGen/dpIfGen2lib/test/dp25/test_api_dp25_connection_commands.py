from __future__ import annotations

import os
import unittest

from dpIfGen2lib.test.dp25.support.interface_box_persistent import IFP

# set an environment variable to bring API into test mode
os.environ["TEST_ENV_DP_TOOLS_2016-04-15"] = "true"
os.environ["INTERFACE_BOX"] = "dp25"

from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_basic_dp25 import DpIfGen2APIBasicDp25

IFP.set_firmware_id(["0000", "0000", "0000", "0000"])


class TestApi25ConnectionCommands(unittest.TestCase):
    IFP.set_voltage_cycle_executed(False)

    def setUp(self):
        self.api = DpIfGen2APIBasicDp25()

    # Connection Commands:
    # 1. :func:'connection_establish
    def test_connection_establish(self):
        self.api.connection_establish()
        assert True is IFP.is_synchronized()

    # 2. :func:'baudrate_set'
    def test_invalid_baud_rate(self):
        self.assertRaises(Exception, self.api.baudrate_set, "9601")

    def test_set_baud_rate(self):
        self.api.connection_establish()
        baudrate = 9600
        self.api.baudrate_set(str(baudrate))
        assert baudrate == IFP.get_baudrate()

    # 3. :func:'sync_set'
    def test_sync_on_unpowered_device(self):
        IFP.set_voltage_cycle_executed(False)

        self.assertRaises(Exception, self.api.sync_set, 3)

    def test_sync(self):
        IFP.set_voltage_cycle_executed(True)

        self.api.sync_set()
        assert True is IFP.is_voltage_cycle_executed()

    # 4. :func:'chip_identify'
    def test_identify_chip(self):
        assert self.api.chip_identify() == "dp25"

    # 5. :func:'interface_fw_id_read'
    def test_read_firmware_id(self):
        fw_id = ["1234", "5678", "9abc", "def0"]
        IFP.set_firmware_id(fw_id)
        fw_id_str = ""
        # necessary because the get_single_info command returns a other format as the read firmware id command
        for item in fw_id:
            fw_id_str += item
        assert self.api.interface_fw_id_read() == fw_id_str

    # 6. :func:'voltage_level_set'
    def test_set_voltage(self):
        self.api.voltage_level_set(22)
        assert IFP.get_voltage_level() == 220

    def test_set_invalid_voltage(self):
        self.assertRaises(Exception, self.api.voltage_level_set, 30)

    # 7. :func:'voltage_cycle_execute'
    def test_voltage_cycle_execute(self):
        self.api.voltage_cycle_execute(22, 7.5)
        assert IFP.get_voltage_level() == 75

    # 8. :func:'dp25_chip_connect'
    def test_chip_connect(self):
        assert True is IFP.get_chip_is_connected()

    # 9. :func:'dp25_chip_disconnect'
    def test_chip_disconnect(self):
        self.api.dp25_chip_disconnect()
        assert False is IFP.get_chip_is_connected()
        self.api.dp25_chip_connect()
        assert True is IFP.get_chip_is_connected()
