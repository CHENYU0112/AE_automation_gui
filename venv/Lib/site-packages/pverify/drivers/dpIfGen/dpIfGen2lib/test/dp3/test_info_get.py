from __future__ import annotations

import os
import unittest

from dpIfGen2lib.dpIfGen3API.info_get import InfoGet
from dpIfGen2lib.test.dp3.support.interface_box_persistent import IFP

# set an environment variable to bring API into test mode
os.environ["TEST_ENV_DP_TOOLS_2016-04-15"] = "true"
os.environ["INTERFACE_BOX"] = "dp3"

from dpIfGen2lib.dpIfGen3API.com_dpifgen3_api_basic import DpIfGen2APIBasicDp3
from dpIfGen2lib.dpIfGen3API.com_dpifgen3_commands_list import DpIfGen3Commands as Cmds

IFP.set_firmware_id(["0000", "0000", "0000", "0000"])


class TestInfoGet(unittest.TestCase):
    def setUp(self):
        self.api = DpIfGen2APIBasicDp3
        self.api.voltage_level_set(0)
        self.api.voltage_level_set(12)
        self.api.sync_set()

    def test_info_get_basic(self):
        inst = InfoGet()
        for value in Cmds.INFO_TYPES.get_values():
            desc = Cmds.INFO_TYPES.get_description_by_value(value)
            name = Cmds.INFO_TYPES.get_name_by_value(value)
            inst.add_info(name, desc, value)
        assert "CMDH_CMD_INFO_GET_PATCH_VERSION" in inst.get_info_names()

    def test_info_get_no_double_description(self):
        # make sure no description appears twice
        description_list = []
        result = True
        for value in Cmds.INFO_TYPES.get_values():
            desc = Cmds.INFO_TYPES.get_description_by_value(value)
            if desc in description_list:
                result = False
                break
            description_list.append(desc)
        assert result

    def test_info_get(self):
        inst = InfoGet()

        inst.add_info(
            "CMDH_CMD_INFO_GET_PATCH_VERSION",
            Cmds.INFO_TYPES.get_value_by_name("CMDH_CMD_INFO_GET_PATCH_VERSION"),
            "Chip Patch ID",
        )
        assert ["CMDH_CMD_INFO_GET_PATCH_VERSION"] == inst.get_info_names()

        assert Cmds.INFO_TYPES.get_value_by_name("CMDH_CMD_INFO_GET_PATCH_VERSION") == inst.info_code_get(
            "CMDH_CMD_INFO_GET_PATCH_VERSION"
        )
        assert None is inst.info_code_get("This entry does not exist")

        result = self.api.chip_info_get_single(inst.info_code_get("CMDH_CMD_INFO_GET_PATCH_VERSION"))
        inst.result_set("CMDH_CMD_INFO_GET_PATCH_VERSION", result)
        assert inst.result_get("CMDH_CMD_INFO_GET_PATCH_VERSION") == "0000000000000000"

    def tearDown(self):
        pass


if __name__ == "__main__":
    unittest.main()
