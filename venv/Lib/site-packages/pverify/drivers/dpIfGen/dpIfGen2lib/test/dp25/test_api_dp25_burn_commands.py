from __future__ import annotations

import os
import unittest

from dpIfGen2lib.test.dp25.support.interface_box_persistent import IFP
from dpIfGen2lib.test.dp25.support.memory import MEMORY

# set an environment variable to bring API into test mode
os.environ["TEST_ENV_DP_TOOLS_2016-04-15"] = "true"
os.environ["INTERFACE_BOX"] = "dp25"

from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_basic_dp25 import DpIfGen2APIBasicDp25

IFP.set_firmware_id(["0000", "0000", "0000", "0000"])


class TestAPI25(unittest.TestCase):
    IFP.set_voltage_cycle_executed(False)

    def setUp(self):
        self.api = DpIfGen2APIBasicDp25()
        self.api.connection_establish()
        MEMORY.memory_clear_all()

    # Burn Commands:
    # 1. :func:`memory_burn`

    def test_memory_burn(self):
        address = "C001"
        value = "ABCD"
        self.api.memory_burn(address, value)
        self.api.memory_write(address, "BCDE")
        self.api.connection_establish()
        assert value == self.api.memory_read(address)

    # 2. :func:'memory_block_burn'

    def test_memory_block_burn(self):
        address = "C002"
        data = ["A3B4", "B2A1"]
        self.api.memory_block_burn(address, data)
        self.api.memory_write(address, "1234")
        self.api.connection_establish()
        self.assertListEqual(data, self.api.memory_block_read(address, len(data)))

    # 3. :func:`ahex_file_burn`

    def test_ahex_file_burn(self):
        file_path = os.path.join(os.path.dirname(__file__), "./support/example.ahex")
        self.api.ahex_file_burn(r"%s" % file_path)
        # read file
        input_file = file_path
        with open(input_file) as f:
            ahex = [line.strip().split(":") for line in f]
        # separate data from ahex_file
        values = []
        for i in range(len(ahex)):
            values.append(ahex[i][1])
        memory_dump = self.api.memory_block_read(ahex[0][0], len(ahex))
        # make write command to check that no changes can be done
        self.api.memory_write("C01A", "C30E")
        self.assertListEqual(values, memory_dump)

    # 4. :func:`aparam_burn`

    def test_aparam_burn(self):
        address = "002B"
        value = "BEFF"
        self.api.aparam_burn(address, value)
        self.api.aparam_write(address, "BFF1")
        assert value == self.api.aparam_read(address)

    # 5. :func:`aparam_block_burn`

    def test_aparam_block_burn(self):
        address = "002A"
        data = ["0010", "0089", "0123", "0020", "0049", "5123"]
        length = len(data)
        self.api.aparam_block_burn(address, data)
        self.api.aparam_write("002B", "0000")
        assert data == self.api.aparam_block_read(address, length)

    # 6. :func:`aparam_ahex_file_burn`

    def test_aparam_ahex_file_burn(self):
        file_path = os.path.join(os.path.dirname(__file__), "./support/example_aparam.ahex")
        self.api.aparam_ahex_file_burn(r"%s" % file_path)
        # read file
        input_file = file_path
        with open(input_file) as f:
            ahex = [line.strip().split(":") for line in f]
        # separate data from ahex_file
        values = []
        for i in range(len(ahex)):
            values.append(ahex[i][1])
        memory_dump = self.api.aparam_block_read(ahex[0][0], len(ahex))
        # make write command to check that no changes can be done
        self.api.aparam_write("0003", "C30E")
        self.assertListEqual(values, memory_dump)

    # 7. :func:`fw_patch_burn`

    def test_fw_patch_burn(self):
        address = "812A"
        value = "BCDF"
        self.api.fw_patch_burn(address, value)
        self.api.memory_write(address, "BCD0")
        assert value == self.api.memory_read(address)

    # 8. :func:`fw_patch_block_burn`

    def test_fw_patch_block_burn(self):
        address = "812A"
        data = ["0010", "0089", "0123", "0020", "0049", "5123"]
        length = len(data)
        self.api.fw_patch_block_burn(address, data)
        self.api.aparam_write("812B", "0000")
        assert data == self.api.memory_block_read(address, length)

    # 9. :func:`fw_patch_ahex_file_burn`
