from __future__ import annotations

import os
import unittest

# set an environment variable to bring API into test mode
os.environ["TEST_ENV_DP_TOOLS_2016-04-15"] = "true"

from dpIfGen2lib.dpIfGen3API.com_dpifgen3_lld import DpIfGen3LLD
from dpIfGen2lib.support.config_dpifgen2_api import PrintConfigAPI
from dpIfGen2lib.test.dp3.support.fake_com_hid_communication import HIDCommunication


class TestHIDCommunication(unittest.TestCase):
    def test_hid_communication_fake_class(self):
        # HIDCommunication is the base class
        hid = HIDCommunication()
        hid.open_hid_device()
        assert True is hid._device.is_opened()

        hid.rx_handler([0, 1, 2])
        hid.close_hid_device()
        assert False is hid._device.is_opened()

    def test_lld(self):
        # DpIfGen3LLD is derived from HIDCommunication
        lld = DpIfGen3LLD()
        lld.open_hid_device()
        lld.rx_handler([10, 11, 12])

    def test_lld_wire_dump(self):
        lld = DpIfGen3LLD()
        assert not lld._wire_dump
        PrintConfigAPI.instance()._enable_wire_dumping()
        assert lld._wire_dump
        PrintConfigAPI.instance()._disable_wire_dumping()

    def test_lld_no_expected_response(self):
        lld = DpIfGen3LLD()
        lld._raw_data = [0, ord("a"), ord("b"), ord("c")]
        assert lld.check_response("")

    def test_lld_ACK_response(self):
        # DpIfGen3LLD is derived from HIDCommunication
        lld = DpIfGen3LLD()
        # PrintConfigAPI.instance()._enable_wire_dumping()
        lld._raw_data = [0, ord("A"), ord("C"), ord("K")]
        assert lld.check_response("ACK")
        # check if bytes after the expected string are ignored
        lld._raw_data = [0, ord("A"), ord("C"), ord("K"), 4, 5, 6]
        assert lld.check_response("ACK")

        lld._raw_data = [0, ord("a"), ord("c"), ord("k")]
        assert lld.check_response("ACK")

    def test_lld_query_timeout(self):
        lld = DpIfGen3LLD()
        lld.open_hid_device()
        lld.set_receive_handle()
        result = lld.command_query("CMDFF", "NAK", 2)
        # todo we should return True or False but not None!
        assert result is None

    def test_lld_query_unknown_command(self):
        lld = DpIfGen3LLD()
        lld.open_hid_device()
        lld.set_receive_handle()
        # PrintConfigAPI.instance()._enable_wire_dumping()
        result = lld.command_query("CMDF2", "NAK", 2)
        assert result

    def test_lld_error_msg(self):
        lld = DpIfGen3LLD()
        assert lld.get_error_msg() == ""

    def test_empty_raw_data(self):
        lld = DpIfGen3LLD()
        assert [] == lld.get_raw_data()

    def test_short_raw_data(self):
        lld = DpIfGen3LLD()
        lld._raw_data = [2]
        assert [] == lld.get_raw_data()

    def test_empty_command(self):
        lld = DpIfGen3LLD()
        lld.open_hid_device()
        lld.set_receive_handle()
        result = lld.command_query("", "", 2)
        assert result


if __name__ == "__main__":
    unittest.main()
