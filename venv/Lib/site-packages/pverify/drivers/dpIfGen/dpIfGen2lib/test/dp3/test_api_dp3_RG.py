from __future__ import annotations

import os
import time
import unittest

from dpIfGen2lib.test.dp3.support.interface_box_persistent import IFP

# set an environment variable to bring API into test mode
# os.environ["TEST_ENV_DP_TOOLS_2016-04-15"] = "true"
os.environ["INTERFACE_BOX"] = "dp3"

from random import randrange

from dpIfGen2lib.dpIfGen3API.com_dpifgen3_api_basic import DpIfGen2APIBasicDp3

IFP.set_firmware_id(["0000", "0000", "0000", "0000"])


class TestAPI3RG(unittest.TestCase):
    def setUp(self):
        self.api = DpIfGen2APIBasicDp3
        self.api.voltage_level_set(0)
        self.api.voltage_level_set(12)

    def test_voltage_level_set_to_invalid_value(self):
        self.assertRaises(Exception, self.api.voltage_level_set, 31)

    def test_voltage_level_set_to_valid_value(self):
        self.api.voltage_level_set(20)

    def blupp(self):
        self.api.voltage_level_set(12)
        self.api.sync_set()

    if 0:

        def test_power_on(self):
            i = 100
            while i > 0:
                self.api.connection_establish()
                time.sleep(1)
                self.api.sync_set()
                self.api.voltage_level_set(0)
                i -= 1

    if 0:

        def test_write_read(self):
            i = 100
            self.api.connection_establish()
            time.sleep(1)
            self.api.sync_set()
            self.api.voltage_level_set(0)
            i -= 1

    def _test_write_read_stress(self):
        self.api.wire_dump_enable()
        self.api.connection_establish()
        data = []
        adrstart = randrange(0x2000, 0x9FFF)
        adrlen = randrange(1, 4000)
        if adrstart + adrlen > 0x9FFF:
            adrlen = 0x9FFF - adrstart

        adr = 0x20000000 + adrstart
        print("adr: %08x" % adr)
        for _i in range(adrlen):
            data.append(randrange(0, 255))
        self.api.write_memory(adr, data)
        assert data == self.api.read_memory(adr, adrlen)

    def _test_write_read(self):
        self.api.wire_dump_enable()
        i = 100
        self.api.connection_establish()
        # self.assertEqual("0003", self.api.protocol_id_get())
        data = [0x65, 0x31, 0]
        record = [0xAB, 0x23, 0x12]
        adr = 0x20000000
        type = 0
        while i > 0:
            data[2] = i
            # self.api.write_memory(adr, data)
            # self.assertEqual(self.api.chip_info_get_single(0x12), 0x01)
            self.api.record_write(type, record)
            # self.api.sync_set()
            assert self.api.read_memory(adr, 3) == data
            assert self.api.record_read(type) == record
            self.api.write_memory(adr, [255, 255, 255])
            time.sleep(1)
            i -= 1

    # will pass when the api is configuration to the new firmware version of the interfaceboard
    # (little and big endian problem)

    def test_voltage_level_set(self):
        voltage_level_device = 12
        self.api.voltage_level_set(voltage_level_device)
        # self.assertEqual(IFP.get_voltage_level(), voltage_level_device)

    def test_sync_interface_box(self):
        self.api.sync_set()

    def test_read_if_serial_number(self):
        assert self.api.read_if_serial_number() == "04110078"

    def test_write_if_serial_number(self):
        serial_number = self.api.read_if_serial_number()
        self.api.write_if_serial_number("03110078")
        assert self.api.read_if_serial_number() == "03110078"
        self.api.write_if_serial_number(serial_number)

    def test_read_if_hardware_version(self):
        version = self.api.read_if_hardware_version()
        assert version.startswith("DPIFGEN2-V1.1")

    def test_write_if_hardware_version(self):
        self.api.write_if_hardware_version("DPIFGEN2-V1.1")
        assert self.api.read_if_hardware_version() == "DPIFGEN2-V1.1"

    def test_read_if_firmware_version(self):
        version = self.api.read_if_firmware_version()
        assert version.startswith("dpIfGen2_V3")

    def test_set_baud_rate(self):
        self.api.sync_set()
        self.api.set_baud_rate(9600)
        self.assertRaises(Exception, self.api.set_baud_rate, 2)

    def test_chip_info_get(self):
        self.api.sync_set()
        info_dict = self.api.chip_info_get()
        rom_id = info_dict["Chip ROM ID"]
        assert rom_id.startswith("3B")
        if 0:
            self.assertDictEqual(
                self.api.chip_info_get(),
                {
                    "Chip Patch ID": "Read Patch ID",
                    "Chip ID": "Read Chip ID",
                    "Chip available OTP size": "OTP size",
                    "Chip ROM ID": "ROM ID",
                },
            )

    def test_write_read_memory(self):
        self.api.sync_set()
        self.api.write_memory(0x20001FF0, [123, 200, 222])
        # self.api.write_memory(0x0, [123, 200, 38])
        assert self.api.read_memory(536879088, 3) == [123, 200, 222]
        # self.assertEqual(self.api.read_memory(0x0, 3), [123, 200, 38])

    def test_protocol_id_get(self):
        self.api.sync_set()
        assert self.api.protocol_id_get() == "0003"

    def test_record_write_read(self):
        self.api.sync_set()
        data = [0xAB, 0x23, 0x12]
        type = 0
        self.api.record_write(type, data)
        assert self.api.record_read(type) == data

    def test_record_burn_read(self):
        self.api.sync_set()
        data = [0xAB, 0x23, 0x12]
        type = 0
        self.api.record_burn(type, data)
        assert self.api.record_read(type) == data

    def test_stress_dp3(self):
        self.api.sync_set()
        status = self.api.stress_write_read()
        assert status

    def tearDown(self):
        self.api.voltage_level_set(0)
        # tearDown method is called at the end


if __name__ == "__main__":
    unittest.main()
