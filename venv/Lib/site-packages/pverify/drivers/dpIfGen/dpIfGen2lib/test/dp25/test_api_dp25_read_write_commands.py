from __future__ import annotations

import os
import unittest

from dpIfGen2lib.test.dp25.support.interface_box_persistent import IFP
from dpIfGen2lib.test.dp25.support.memory import MEMORY

# set an environment variable to bring api into test mode
os.environ["TEST_ENV_DP_TOOLS_2016-04-15"] = "true"
os.environ["INTERFACE_BOX"] = "dp25"

from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_basic_dp25 import DpIfGen2APIBasicDp25

IFP.set_firmware_id(["0000", "0000", "0000", "0000"])


class TestAPI25(unittest.TestCase):
    IFP.set_voltage_cycle_executed(False)

    def setUp(self):
        self.api = DpIfGen2APIBasicDp25()
        self.api.connection_establish()
        MEMORY.memory_clear_all()

    # Read and Write Commands:

    # 1. :func:'memory_read'
    # 1. :func:'memory_write'
    def test_memory_write_and_read_works(self):
        self.api.memory_write("8000", "1234")
        assert self.api.memory_read("8000") == "1234"

    # 2. :func:'memory_block_read'
    # 2. :func:'memory_block_write'
    def test_memory_block_write_read(self):
        self.api.memory_block_write("8000", ["1234", "2345"])
        result = self.api.memory_block_read("8000", "0002")
        self.assertListEqual(result, ["1234", "2345"])

    # 3. :func:'dmem_read'
    # 4. :func:'dmem_write'
    def test_dmem_read_write(self):
        address = "0002"
        value = "ABEE"
        self.api.dmem_write(address, value)
        assert value == self.api.dmem_read(address)

    # 3. :func:`ahex_file_write`
    def test_ahex_file_write(self):
        file_path = os.path.join(os.path.dirname(__file__), "./support/example.ahex")
        self.api.ahex_file_write(r"%s" % file_path)
        # read file
        input_file = file_path
        with open(input_file) as f:
            ahex = [line.strip().split(":") for line in f]
        # separate data from ahex_file
        values = []
        for i in range(len(ahex)):
            values.append(ahex[i][1])
        memory_dump = self.api.memory_block_read(ahex[0][0], len(ahex))
        self.assertListEqual(values, memory_dump)

    # 4. :func:'aparam_read'
    # 4. :func:'aparam_write'
    def test_aparam_read_write(self):
        address = "002B"
        value = "AEEF"
        self.api.aparam_write(address, value)
        assert value == self.api.aparam_read(address)

    # 5. :func:`aparam_block_read`
    # 6. :func:`aparam_block_write`

    def test_aparam_block_write_read(self):
        address = "002A"
        values = ["1234", "2345"]
        self.api.aparam_block_write(address, values)
        self.assertListEqual(values, self.api.aparam_block_read(address, "0002"))

    # 7. :func:`aparam_ahex_file_write`

    def test_aparam_ahex_file_write(self):
        file_path = os.path.join(os.path.dirname(__file__), "./support/example_aparam.ahex")
        self.api.aparam_ahex_file_write(r"%s" % file_path)
        # read file
        input_file = file_path
        with open(input_file) as f:
            ahex = [line.strip().split(":") for line in f]
        # separate data from ahex_file
        values = []
        for i in range(len(ahex)):
            values.append(ahex[i][1])
        memory_dump = self.api.memory_block_read(ahex[0][0], len(ahex))
        self.assertListEqual(values, memory_dump)
