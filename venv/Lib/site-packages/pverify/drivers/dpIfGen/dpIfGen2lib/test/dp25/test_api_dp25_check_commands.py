from __future__ import annotations

import os
import unittest

from dpIfGen2lib.test.dp25.support.interface_box_persistent import IFP
from dpIfGen2lib.test.dp25.support.memory import MEMORY

# set an environment variable to bring API into test mode
os.environ["TEST_ENV_DP_TOOLS_2016-04-15"] = "true"
os.environ["INTERFACE_BOX"] = "dp25"

from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_basic_dp25 import DpIfGen2APIBasicDp25

IFP.set_firmware_id(["0000", "0000", "0000", "0000"])


class TestAPI25(unittest.TestCase):
    IFP.set_voltage_cycle_executed(False)

    def setUp(self):
        self.api = DpIfGen2APIBasicDp25()
        self.api.connection_establish()
        MEMORY.memory_clear_all()

    # Check Commands
    # 1. :func:`memory_block_check_blank`

    def test_memory_block_check_blank(self):
        address = "F000"  # take care that no other test write this address space
        length = "0010"
        assert True is self.api.memory_block_check_blank(address, length)
        self.api.memory_write("F003", "ABCD")
        assert False is self.api.memory_block_check_blank(address, length)

    # 2. :func:`memory_crc_get`

    def test_memory_crc_get(self):
        address = "C000"
        data = ["0010", "0089", "0123", "0020", "0049", "5123"]
        length = len(data)
        self.api.memory_block_write(address, data)
        crc = "64D7"
        assert crc == self.api.memory_crc_get(address, length)

    # 3. :func:`otp_crc_get`

    def test_otp_crc_get(self):
        address = "C000"
        data = ["0010", "0089", "0123", "0020", "0049", "5123"]
        self.api.memory_block_burn(address, data)
        length = len(data)
        crc = "64D7"
        assert crc == self.api.otp_crc_get(address, length)

    # 4. :func:`aparam_crc_get`

    def test_aparam_crc_get(self):
        address = "C000"
        data = ["0010", "0089", "0123", "0020", "0049", "5123"]
        self.api.aparam_block_write(address, data)
        length = len(data)
        crc = "64D7"
        assert crc == self.api.aparam_crc_get(address, length)
