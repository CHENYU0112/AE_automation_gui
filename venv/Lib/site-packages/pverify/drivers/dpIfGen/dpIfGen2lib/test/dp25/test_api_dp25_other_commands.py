from __future__ import annotations

import os
import unittest

from dpIfGen2lib.test.dp25.support.interface_box_persistent import IFP
from dpIfGen2lib.test.dp25.support.memory import MEMORY

# set an environment variable to bring API into test mode
os.environ["TEST_ENV_DP_TOOLS_2016-04-15"] = "true"
os.environ["INTERFACE_BOX"] = "dp25"

from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_basic_dp25 import DpIfGen2APIBasicDp25

IFP.set_firmware_id(["0000", "0000", "0000", "0000"])


class TestAPI25(unittest.TestCase):
    IFP.set_voltage_cycle_executed(False)

    def setUp(self):
        self.api = DpIfGen2APIBasicDp25()
        self.api.connection_establish()
        MEMORY.memory_clear_all()

    # Other Commands
    # 1. :func:`jump_execute`
    # todo add test

    # 2. :func:`call_execute`
    # todo add test

    # 3. :func:`info_get`
    def test_info_get(self):
        self.api.info_get()

    # todo add test

    # 4. :func:`info_get_single`
    def test_get_single_device_id(self):
        device_id = ["2345", "1234"]
        IFP.set_device_id(device_id)
        assert device_id == self.api.info_get_single("0000", 2)

    def test_get_singe_fw_id(self):
        firmware_id = ["1234", "5678", "1234", "5678"]
        IFP.set_firmware_id(firmware_id)
        assert firmware_id == self.api.info_get_single("0100", 4)

    def test_get_single_customer_id(self):
        customer_id = ["ABCD", "EF12"]
        IFP.set_customer_id(customer_id)
        assert customer_id == self.api.info_get_single("0200", 2)

    def test_get_single_patch_id(self):
        patch_id = ["AB12"]
        IFP.set_patch_id(patch_id)
        assert patch_id == self.api.info_get_single("0300", 1)

    def test_get_single_aparam_id(self):
        aparm_id = ["12AB"]
        IFP.set_aparam_id(aparm_id)
        assert aparm_id == self.api.info_get_single("1000", 1)

    def test_get_single_rom_id(self):
        rom_id = ["1234"]
        IFP.set_rom_id(rom_id)
        assert self.api.info_get_single("1100", 1) == rom_id

    # 5. :func:`application_start`
    def test_application_start(self):
        self.api.application_start()
        self.assertRaises(Exception, self.api.application_start)

    # 6. :func:`application_stop`
    def test_application_stop(self):
        self.api.application_start()
        self.api.application_stop()
        self.assertRaises(Exception, self.api.application_stop)

    # 7. :func:`auto_start_set`
    # 8. :func:`auto_start_get`
    def test_auto_start_set_get(self):
        auto_start = "0101"
        self.api.auto_start_set(auto_start)
        assert auto_start == self.api.auto_start_get()

    # 9. :func:`boot_status_get`
    def test_boot_status_get(self):
        self.api.boot_status_get()
        # todo test the NAK case

    # 10. :func:`aparam_api_lock`
    def test_aparam_api_lock(self):
        self.api.aparam_api_lock("write")
        self.assertRaises(Exception, self.api.aparam_api_lock, "5")

    # 11. :func:`aparam_apply`
    def test_aparam_apply(self):
        self.api.aparam_apply()

    # 12. :func:`fw_patch_apply`
    def test_fw_patch_apply(self):
        self.api.fw_patch_apply()

    # 13. :func:`dp25_chip_lock`
    def test_d25_chip_lock(self):
        password = "ABCD1234"  # Password is hardcoded in interface_box_persistent.py
        self.api.dp25_chip_lock(password)
        self.assertRaises(Exception, self.api.dp25_chip_lock, "1234ABCD")

    # 14. :func:`dp25_chip_unlock`
    def test_dp25_chip_unlock(self):
        password = "ABCD1234"  # Password is hardcoded in interface_box_persistent.py
        self.api.dp25_chip_unlock(password)
        self.assertRaises(Exception, self.api.dp25_chip_unlock, "1234ABCD")

    # 15. :func:`protocol_id_get`
    def test_protocol_id_get(self):
        protocol_version = "0100"
        IFP.set_protocol_version(protocol_version)
        assert self.api.protocol_id_get() == protocol_version

    # todo add test
