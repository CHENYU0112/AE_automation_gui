#!/usr/bin/python
from __future__ import annotations

from dpIfGen2lib.test.dp3.support.interface_box_dp3 import InterfaceBox


class Report:
    def __init__(self):
        self.rx_handler = None
        self.interface_box = None

    def send(self, data_buffer):
        self.interface_box.receive(data_buffer)

    def add_rx_handler(self, rx_handler):
        self.rx_handler = rx_handler
        self.interface_box = InterfaceBox(self.rx_handler)


class Device:
    def __init__(self):
        self.open = True
        self.rx_handler = None
        self.reports = [Report()]
        self.version_id = None

    def is_opened(self):
        return self.open

    def set_raw_data_handler(self, rx_handler):
        self.rx_handler = rx_handler
        self.reports[0].add_rx_handler(self.rx_handler)

    def find_output_reports(self):
        return self.reports

    def close(self):
        self.open = False

    def version_set(self, version):
        self.version_id = version

    def version_get(self):
        return self.version_id


class HIDCommunication:
    VERSION = "1.0.1"

    #: Buffer Size of HID communication packet
    BUFFER_SIZE = 64

    def __init__(self):
        """Initialize the class. Default values for the HID variables."""
        self._vendor_id = 0x058B
        self._product_id = 0x0220
        self._device_open = False
        self._device = None
        self._verbose = False
        self._debug = False

    def open_hid_device(self, index=0):
        self._device_open = True
        self._device = Device()

    def is_open(self):
        return self._device_open

    def set_receive_handle(self):
        if self._device is None:
            msg = "Error: Device has not been opened yet"
            raise Exception(msg)
        self._device.set_raw_data_handler(self.rx_handler)

    # handler called when a report is received
    def rx_handler(self, data):
        data_hex = [f"{item:02X}" for item in data]
        if 0:
            print("::fake_com_hid_communication::rx_handler")
            print("fake_recv: ", data_hex)
            print("fake_Received length %s " % len(data))

    def send_data_buffer(self, data_buffer):
        if self._device is None:
            msg = "Error: Device has not been opened yet"
            raise Exception(msg)
        report = self._device.find_output_reports()[0]
        report.send(data_buffer)

    def close_hid_device(self):
        if self._device and self._device.is_opened():
            self._device.close()
            self._device_open = False

    def scan_devices(self):
        pass


if __name__ == "__main__":
    pass

# --- End of File ------------------------------------------------
