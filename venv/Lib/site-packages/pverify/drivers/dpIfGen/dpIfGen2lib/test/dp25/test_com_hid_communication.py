from __future__ import annotations

import os
import unittest

# set an environment variable to bring API into test mode
os.environ["TEST_ENV_DP_TOOLS_2016-04-15"] = "true"
os.environ["INTERFACE_BOX"] = "dp25"

from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_basic_pverify import DpIfGen2APIBasicpVerify
from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_executer_basic import DpIfGen2APIExecuterBasic
from dpIfGen2lib.dpIfGen2API.com_dpifgen2_lld import DpIfGen2LLD
from dpIfGen2lib.test.dp25.support.fake_com_hid_communication import HIDCommunication


class TestHIDCommunication(unittest.TestCase):
    def test_hid_communication_fake_class(self):
        # HIDCommunication is the base class
        hid = HIDCommunication()
        hid.open_hid_device()
        assert True is hid._device.is_opened()

        hid.rx_handler([0, 1, 2])
        hid.close_hid_device()
        assert False is hid._device.is_opened()

    def test_lld(self):
        # DpIfGen2LLD is derived from HIDCommunication
        lld = DpIfGen2LLD()
        lld.open_hid_device()
        lld.rx_handler([10, 11, 12])

    def test_exeuter_basic(self):
        # DpIfGen2APIExecuterBasic is derived from DpIfGen2LLD
        eb = DpIfGen2APIExecuterBasic()
        eb.open_hid_device()

    def test_basic_pverify_open_close(self):
        # test open close check_reopen
        dp = DpIfGen2APIBasicpVerify()
        dp.open()
        assert True is dp.is_opened()
        dp.close()
        assert False is dp.executer._device.is_opened()
        dp.check_reopen()
        assert True is dp.executer._device.is_opened()
        dp.close()

    def test_basic_pverify_connection(self):
        dp = DpIfGen2APIBasicpVerify()
        dp.open()
        dp.connection_establish()

    def test_basic_pverify_chip_id(self):
        dp = DpIfGen2APIBasicpVerify()
        dp.open()
        dp.connection_establish()
        dp.chip_identify()
        # print(chip_id)


if __name__ == "__main__":
    unittest.main()
