from __future__ import annotations

import unittest
from os.path import abspath, dirname, normpath

from dpIfGen2lib.dpIfGen3API.nak_codes import NakCodes
from dpIfGen2lib.support.flow_nak_msgs_to_dict import NakInfoParser


class TestNakExtraction(unittest.TestCase):
    def setUp(self):
        # .h file extracted from:
        # repo: pmm/dp3_tools
        # commit: 59e58e23d33a95cc96566957d966af18ae1e3517
        self.this_path = dirname(abspath(__file__))
        filename = normpath("".join([self.this_path, "./support/nack_codes.h"]))
        self.obj = NakInfoParser(filename)

    def test_number_of_nak_descriptions(self):
        # get number of documented elements
        # only complete described elements are counted
        count = self.obj.get_size()
        assert count == 34

    def test_no_none_allowed(self):
        has_none = False
        for item in self.obj.infos.infos:
            if item.get_value() is None:
                has_none = True
                break
        assert not has_none

    def test_value_of_specific_code(self):
        value = self.obj.get_value("NAK_VDD_SHORTED")
        assert value == 511

    def test_get_name(self):
        name = self.obj.get_name(511)
        assert name == "NAK_VDD_SHORTED"

    def test_get_description(self):
        desc = self.obj.get_desc(1163)
        expected = "dpIfGen2 HW is not calibrated (7V5 +/- 100mV)"
        assert expected == desc

    def test_get_action(self):
        desc = self.obj.get_action(1163)
        expected = "Please calibrate dpIfgen2 using dpCalibrator"
        assert expected == desc

    def test_save_file(self):
        self.obj.infos.save(f"{self.this_path:s}/nak_codes.py")
        # todo add some assertion to check the file content

    def test_save_xml_file(self):
        self.obj.infos.save_xml(f"{self.this_path:s}/nakCodes.xml")
        # todo add some assertion to check the file content

    def test_zz_generated_module(self):
        # this is the last test of the test suite and should test the generated script
        obj = NakCodes()
        assert obj.get_name(511) == "NAK_VDD_SHORTED"

        expected = "Please calibrate dpIfgen2 using dpCalibrator"
        assert expected == obj.get_action(1163)

        expected = "dpIfGen2 HW is not calibrated (7V5 +/- 100mV)"
        assert expected == obj.get_description(1163)
