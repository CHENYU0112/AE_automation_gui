from __future__ import annotations

import os
import unittest

# set an environment variable to bring API into test mode
os.environ["TEST_ENV_DP_TOOLS_2016-04-15"] = "true"
os.environ["INTERFACE_BOX"] = "dp3"

from dpIfGen2lib.dpIfGen3API.com_dpifgen3_commands_list import DpIfGen3Commands as Cmd
from dpIfGen2lib.dpIfGen3API.com_dpifgen3_executor import CmdDataRead, CmdDataWrite, CmdSingle, CommandBasic, Telegram
from dpIfGen2lib.test.dp3.support.interface_box_persistent import IFP


class TestExecutor(unittest.TestCase):
    def setUp(self):
        # configure the interface box model such that communication is possible
        IFP.set_voltage_level(120)
        IFP.set_synchronized(True)

    def test_memory_read_combo(self):
        cmd = CmdDataRead()
        cmd.set_command_string("CMD22")
        cmd.add_32bit_parameter(0x20002000)
        cmd.add_16bit_parameter(4)
        cmd.execute()
        assert [0, 0, 0, 0] == cmd.requested_data

    def test_memory_read_combo_max_size(self):
        cmd = CmdDataRead()
        cmd.set_command_string("CMD22")
        cmd.add_32bit_parameter(0x20002000)
        cmd.add_16bit_parameter(54)
        cmd.execute()
        assert [0] * 54 == cmd.requested_data

    def test_single_command_success(self):
        cmd = CmdSingle()
        cmd.set_command_string(Cmd.SET_VOLTAGE_LEVEL)
        cmd.add_16bit_parameter(220)
        cmd.set_timeout(1)
        assert cmd.get_command_string() == "CMD1ADC00"
        result = cmd.execute()
        assert result

    def test_single_command_fail(self):
        cmd = CmdSingle()
        # send a command which (hopefully) does not exist
        cmd.set_command_string("CMD00")
        cmd.set_timeout(1)
        assert not cmd.execute()
        assert cmd.get_data_as_string().startswith("NAKUnknown")

    def test_single_command_response_including_data(self):
        cmd = CmdSingle()
        cmd.set_command_string(Cmd.READ_SERIALNUMBER)
        cmd.set_timeout(1)
        cmd.execute()
        assert cmd.get_data_as_string() == "04110078"  # data fix coded in IFP

    def test_single_command_response_with_data_on_second_telegram(self):
        cmd = CmdSingle()
        cmd.set_command_string("CMD66")
        cmd.set_timeout(1)
        cmd.execute(True)
        assert cmd.get_data_as_string() == "OldWayWithSecondTelegram"

    def test_valid_id(self):
        cmd = CommandBasic()

        # test valid command string
        cmd.set_command_string("CMD1A")
        assert cmd.get_command_string() == "CMD1A"

        # id must have a length of 5
        self.assertRaises(Exception, cmd.set_command_string, "CMD1")

        # id must have a length of 5
        self.assertRaises(Exception, cmd.set_command_string, "CMD1F0")

        # id must start with CMD
        self.assertRaises(Exception, cmd.set_command_string, "XMD1F")

        # id must have two digits at end
        self.assertRaises(Exception, cmd.set_command_string, "CMD1G")

    def test_valid_parameters(self):
        cmd = CommandBasic()

        cmd.set_command_string("CMD1A")
        cmd.add_16bit_parameter(0x1234)
        cmd.add_16bit_parameter(0x5678)

        assert cmd.get_command_string() == "CMD1A34127856"

    def test_data_telegram_cration(self):
        # use data such that more than one telegram is created
        data = [0x12, 0xCD, 0x12]
        data.extend(list(range(150)))

        cmd = CmdDataWrite()
        cmd.set_command_string(Cmd.MEMORY_WRITE)
        cmd.add_data(data)
        assert data == cmd.get_data()

        cmd.create_telegrams()
        t0 = cmd.get_data_telegram(0)
        # each data telegram starts with 'DAT' followed by the size followed by the data junk
        expected = [ord("D"), ord("A"), ord("T"), cmd.TELEGRAM_DATA_LENGTH]
        expected.extend(data[0 : cmd.TELEGRAM_DATA_LENGTH])
        assert expected == t0.get_telegram()

        t1 = cmd.get_data_telegram(1)
        # each data telegram starts with 'DAT' followed by the size followed by the data junk
        expected = [ord("D"), ord("A"), ord("T"), cmd.TELEGRAM_DATA_LENGTH]
        expected.extend(data[cmd.TELEGRAM_DATA_LENGTH : 2 * cmd.TELEGRAM_DATA_LENGTH])
        assert expected == t1.get_telegram()

        t2 = cmd.get_data_telegram(2)
        # each data telegram starts with 'DAT' followed by the size followed by the data junk
        remaining_size = len(data) - 2 * cmd.TELEGRAM_DATA_LENGTH
        expected = [ord("D"), ord("A"), ord("T"), remaining_size]
        expected.extend(data[2 * cmd.TELEGRAM_DATA_LENGTH :])
        expected.extend([0] * (cmd.TELEGRAM_DATA_LENGTH - remaining_size))
        assert expected == t2.get_telegram()

    def test_add_data_partitioned(self):
        data1 = [0x01, 0x02, 0x03]
        data2 = [0x04, 0x05, 0x06]
        cmd = CmdDataWrite()
        cmd.set_command_string(Cmd.MEMORY_WRITE)
        cmd.add_data(data1)
        cmd.add_data(data2)
        expected = []
        expected.extend(data1)
        expected.extend(data2)
        assert expected == cmd.get_data()

    def test_calculate_check_sum(self):
        cmd = CommandBasic()
        assert cmd.calculate_check_sum([48, 50, 48, 48, 51, 57, 53, 55, 54, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) is True

    def test_data_write_short(self):
        data = [1, 2, 3]
        cmd = CmdDataWrite()
        cmd.set_command_string(Cmd.MEMORY_WRITE)
        cmd.set_timeout(1)
        cmd.add_32bit_parameter(0x20001FF0)
        cmd.add_16bit_parameter(len(data))
        cmd.add_data(data)
        cmd.execute()
        assert "CMD81f01f00200300".upper() == cmd.command_string

    def test_telegram(self):
        t = Telegram(64)
        assert t.get_max_size() == 64
        # default telegram contains zeros
        assert [0] * 64 == t.get_telegram()
        t._add_string("CMD")
        assert [ord("C"), ord("M"), ord("D")] == t.get_telegram()[0:3]
        t._add_bytes([1, 2, 3])
        assert [ord("C"), ord("M"), ord("D"), 1, 2, 3] == t.get_telegram()[0:6]
        self.assertRaises(Exception, t._add_bytes, [0] * 100)

    def test_telegram_dat(self):
        t = Telegram(64)
        t.add_data([])
        assert t.is_dat0()
        assert not t.has_command
        assert t.has_data
        assert [ord("D"), ord("A"), ord("T"), 0] == t.get_telegram()[0:4]

    def test_telegram_cmd(self):
        t = Telegram(64)
        t.add_command("CMD12")
        assert t.is_cmd()
        assert t.has_command
        assert not t.has_data
        assert [ord("C"), ord("M"), ord("D"), ord("1"), ord("2"), 0] == t.get_telegram()[0:6]
        assert t.write_offset == 5

    def test_telegram_combo(self):
        t = Telegram(64)
        t.add_command("CMD12")
        t.add_data([1, 2])
        assert t.is_cmd()
        assert t.has_command
        assert t.has_data
        assert t.is_combo()
        assert [
            ord("C"),
            ord("M"),
            ord("D"),
            ord("1"),
            ord("2"),
            0,
            ord("D"),
            ord("A"),
            ord("T"),
            2,
            1,
            2,
        ] == t.get_telegram()[0:12]

    def test_crc_calculate(self):
        cmd = CommandBasic()
        assert cmd.calculate_crc([64, 80]) == 18998
