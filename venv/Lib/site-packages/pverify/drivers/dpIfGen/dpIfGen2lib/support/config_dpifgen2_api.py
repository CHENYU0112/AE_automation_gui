#!/usr/bin/python
# ===========================================================================
# Name:        config_dpifgen2_api.py
#
# Purpose:     Configures the global API settings
#
# Author:      Aslam Faizan Muhammad (IFAG PMM SYS SWT SWI) <faizan.aslam@infineon.com>
#              Langaschek Richard (IFAG PMM SYS SWT SWI) <Richard.Langaschek@infineon.com>
#
# Created:     04.08.2015
#
# Python Version: v2.7.2
#
# Dependency:
#
# ===========================================================================
# Copyright (C) 2014-2015 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
from __future__ import annotations


class APIConfig:
    """
    This singleton class is a central location which is used to configure the
    dpIfGen2 API globally.
    The configurations settings are supposed to be read-only for derived scripts.

    Following are the main configurations for the dpIfGen2 API:
        1. API Selection
        2. HID Configuration
        3. Print Configuration
    """

    #: dpIfGen2 API Config Version v1.0.1
    VERSION = "1.0.2"

    @classmethod
    def instance(cls):
        if not hasattr(cls, "_instance"):
            cls._instance = cls()
        return cls._instance


class PrintConfigAPI(APIConfig):
    """
    This class configures the detail of information displayed to the user while
    using dpIfGen2 API. The user can globally configure the detail level that is
    used for displaying.
    """

    def __init__(self):
        self._wire_dumping = False
        self._use_combo = False

    def _enable_wire_dumping(self):
        """
        Enables display of wire communication between PC and the dpIfGen2 board.

        :return: None
        """
        self._wire_dumping = True

    def _disable_wire_dumping(self):
        """
        Disables display of wire communication between PC and the dpIfGen2 board.

        :return: None
        """
        self._wire_dumping = False

    def is_wire_dumping_enabled(self):
        """
        Returns status of displaying wire communication between PC and the dpIfGen2 board.

        :return: bool
        """
        return self._wire_dumping

    def combo_enable(self):
        self._use_combo = True

    def combo_disable(self):
        self._use_combo = False

    def is_combo_enabled(self):
        return self._use_combo


class HIDConfigAPI(APIConfig):
    """
    This class configures the product and vendor ID of the HID Device.
    The use case is to support various devices with different vendor and product ids
    without changing the upper or lower layer of the API.
    """

    def __init__(self):
        self._vendor_id = None
        self._product_id = None

    def _set_vendor_id(self, vid):
        """
        Sets the vendor ID of the HID device.

        :param vid: The Vendor ID of the HID device
        :type vid: int
        :return: None
        """
        self._vendor_id = vid

    def _set_product_id(self, pid):
        """
        Sets the product ID of the HID device.

        :param pid: The Product ID of the HID device
        :type pid: int
        :return: None
        """
        self._product_id = pid

    def get_vendor_id(self):
        """
        Retrieves the currently set vendor ID of the HID device.
        If no Vendor ID is set None is returned.

        :return: int/None
        """
        return self._vendor_id

    def get_product_id(self):
        """
        Retrieves the currently set product ID of the HID device.
        If no Product ID is set None is returned.

        :return: int/None
        """
        return self._product_id


class SelectAPI(APIConfig):
    """
    This class selects the API corresponding to the chip types.
    """

    def __init__(self):
        self._api = None

    def _set_API(self, api):
        """
        Set the API to one of the following supported APIs:
            1. dp2a
            2. dp2b
            3. dp25
            4. dp3

        :param api: The api to be used
        :type api: str
        :return: None
        """
        from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_basic import DpIfGen2APIBasic as v_dp2a
        from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_basic_dp25 import DpIfGen2APIBasicDp25 as v_dp25
        from dpIfGen2lib.dpIfGen3API.com_dpifgen3_api_basic_class import DpIfGen2APIBasicDp3Class as v_dp3

        allowed_apis = {
            "dp2a": {
                "Name": "DP2A",
                "MinDpIfGen2FWVersion": v_dp2a.MIN_DPIFGEN2_FW_VERSION,
            },
            "dp2b": {
                "Name": "DP2B",
                "MinDpIfGen2FWVersion": v_dp2a.MIN_DPIFGEN2_FW_VERSION,
            },
            "dp25": {
                "Name": "DP2.5",
                "MinDpIfGen2FWVersion": v_dp25.MIN_DPIFGEN2_FW_VERSION,
            },
            "dp2x": {
                "Name": "DPX",
                "MinDpIfGen2FWVersion": v_dp25.MIN_DPIFGEN2_FW_VERSION,
            },
            "dp3": {"Name": "DP3", "MinDpIfGen2FWVersion": v_dp3.MIN_DPIFGEN2_FW_VERSION},
        }
        if api in allowed_apis:
            self._api = allowed_apis.get(api)
        else:
            raise Exception(
                "".join(
                    [
                        "The selected API is not ",
                        "supported. ",
                        "Please enter an API from the ",
                        "following values: ",
                        str(allowed_apis.keys()),
                    ]
                )
            )

    def get_API(self):
        """
        Gets the currently set version of the API.
        If no API is set None is returned.

        :return: str/None
        """
        return self._api


def main():
    print(PrintConfigAPI.instance().is_wire_dumping_enabled())
    PrintConfigAPI.instance()._enable_wire_dumping()
    print(PrintConfigAPI.instance().is_wire_dumping_enabled())


if __name__ == "__main__":
    main()

# --- End of File ------------------------------------------------
