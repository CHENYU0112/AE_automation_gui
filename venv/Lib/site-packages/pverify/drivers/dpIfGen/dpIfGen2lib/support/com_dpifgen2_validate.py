#!/usr/bin/python
# ===========================================================================
# Name:        com_dpifgen2_validate.py
#
# Purpose:     Validate if the dpIFGen2 tool is suitable to be used in
#               the application
#
# Author:      Aslam Faizan Muhammad (IFAG PMM SYS SWT SWI) <Faizan.Aslam@infineon.com>
#              Langaschek Richard (IFAG PMM SYS SWT SWI) <Richard.Langaschek@infineon.com>
#
# Created:     28.10.2014
#
# Python Version: v2.7.2
#
# ===========================================================================
# Copyright (C) 2014-2015 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
from __future__ import annotations

from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_basic import DpIfGen2APIBasic
from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_basic_dp25 import DpIfGen2APIBasicDp25
from dpIfGen2lib.dpIfGen2API.lib_dpifgen2_commands_list import DpIfGen2Commands
from dpIfGen2lib.dpIfGen3API.com_dpifgen3_api_basic import DpIfGen2APIBasicDp3
from dpIfGen2lib.support.com_dpifgen2_validator import Validator
from dpIfGen2lib.support.config_dpifgen2_api import SelectAPI


class DpIfGen2Validate:
    """
    This is a library class which provides validation functionality for
    the dpIfGen2 board. Such validation checks are necessary while using
    the APIs to make sure the correct versions of the APIs are used.
    Such validation checks should be inserted for all sequence scripts
    to ensure compatibility.

    Following validation functionality is supported::

        * dpIFGen2 FW version is up to date
        * dpIFGen2 FW is calibrated
        * verifies the setup
    """

    #: VERSION v1.0.2
    VERSION = "1.0.2"
    """
        v1.0.2: updated regex to handle multiple digit FW versions.
    """

    @staticmethod
    def dpifgen2_fw_version_validate(criteria, fw_version):
        """Validate a FW version against a certain criteria.

        :param criteria: the comparison criteria
        :type criteria: str
        :param fw_version: FW version to compare against.
        :type fw_version: str
        :returns: bool

        This command is used to perform dpIfGen2 board Firmware validation.
        The Firmware version read from the board is tested against a reference
        Firmware version with the given criteria. If the criteria is satisfied
        the function returns a True, if the criteria fails a False is return.
        Valid values for criteria include:

            * >
            * <
            * >=
            * <=
            * ==
            * !=

        Example Usage:

        >>> result = DpIfGen2Validate.dpifgen2_fw_version_validate(">=", '1.7.0')
        """
        if 0:
            from dpIfGen2lib.support.config_dpifgen2_api import PrintConfigAPI

            PrintConfigAPI.instance()._enable_wire_dumping()
        # allowed criteria
        api = SelectAPI.instance().get_API().get("Name")
        if api == "DP3":
            # DpIfGen2APIBasicDp3.wire_dump_enable()
            fw_version_read = DpIfGen2APIBasicDp3.read_if_firmware_version()
        elif api in ["DP2.5", "DPX"]:
            fw_version_read = DpIfGen2APIBasicDp25.interface_fw_id_read()
        else:
            fw_version_read = DpIfGen2APIBasic.interface_fw_id_read()

        validator = Validator(fw_version_read)
        if not validator.is_valid():
            raise Exception("Firmware version could not be retrieved from: %s" % fw_version_read)

        result = DpIfGen2Validate._perform_comparison(validator, criteria, fw_version)
        if not result:
            raise Exception("Validation failed. Read version: %s" % validator)

        return True

    @staticmethod
    def _perform_comparison(validator, criterion, fw_version_compare):
        """
        We assume all the three parameters are correct here.
        :param fw_version_compare: version number to compare with x.y.z
        :type fw_version_compare: str
        :param criterion: on of ['>', '<', '>=', '<=', '==', '!=']
        :type criterion: str
        :type validator: Validator
        """
        allowed_criteria = [">", "<", ">=", "<=", "==", "!="]
        if criterion in allowed_criteria:
            if criterion == "==":
                return validator.validate_equal(fw_version_compare)
            elif criterion == ">":
                return validator.validate_greater(fw_version_compare)
            elif criterion == "<":
                return validator.validate_less(fw_version_compare)
            elif criterion == ">=":
                return validator.validate_greater_equal(fw_version_compare)
            elif criterion == "<=":
                return validator.validate_less_equal(fw_version_compare)
            elif criterion == "!=":
                return not validator.validate_equal(fw_version_compare)
            return None
        else:
            raise Exception("Criterion not in allowed range: %s" % allowed_criteria)

    @staticmethod
    def dpifgen2_board_is_calibrated(verbose=False, debug=False, parent=None):
        """
        :param verbose: Prints execution information.
        :type verbose: bool
        :param debug: Prints additional debug information.
        :type debug: bool
        :param parent: Reference to the calling object.
        :type parent: object reference
        :returns: bool

        This command is used to check whether calibration has been
        performed on dpIfGen2 board. The calibration status is returned
        as a boolean.

        Example Usage:

        >>> calibration_done = DpIfGen2Validate.dpifgen2_board_is_calibrated()
        """
        # defining sequence
        # read calibration status
        parameter1 = "0400"
        # define the sequence
        exec_seq = {}
        exec_seq["Name"] = "Checking Calibration"
        exec_seq[0] = {
            "Step": "Checking Calibration",
            "Command": DpIfGen2Commands.DPIFGEN2_CALIBRATE_COMMAND,
            "Parameters": parameter1,
            "Response": DpIfGen2Commands.ACK,
            "Timeout": 1,
        }
        try:
            if SelectAPI.instance().get_API().get("Name") != "DP3":
                DpIfGen2APIBasic.exec_config_seq(exec_seq, verbose, debug, parent)
            else:
                return True  # todo implement if it is implemented in API
            return True
        except Exception as e:
            if debug:
                DpIfGen2APIBasic.display_msg(str(e))
            return False

    @staticmethod
    def setup_verify(verbose=False, debug=False, parent=None):
        """Verify if the setup between PC, dpIfGen2 and the chip is correct.

        :param verbose: Prints execution information.
        :type verbose: bool
        :param debug: Prints additional debug information.
        :type debug: bool
        :param parent: Reference to the calling object.
        :type parent: object reference
        :returns: bool

        This command is used to verify if the setup is correct. The correct setup means the correct
        dpIfGen2 version is used with the correct chip.

        .. warning::

            This command requires the function :func:`connection_establish` to be called first.

        Example Usage:

        >>> chip_id = DpIfGen2Validate.setup_verify()
        """
        api = SelectAPI.instance().get_API()
        min_fw_version = api.get("MinDpIfGen2FWVersion")
        if api:
            if api.get("Name") in ["DP2A", "DP2B"]:
                cur_fw_version = DpIfGen2APIBasic.interface_fw_id_read()
                # min_fw_version = DpIfGen2APIBasic.MIN_DPIFGEN2_FW_VERSION
                max_fw_version = DpIfGen2APIBasic.MAX_DPIFGEN2_FW_VERSION
                chip_id = DpIfGen2APIBasic.chip_identify(verbose, debug, parent)
            elif api.get("Name") in ["DP2.5", "DP2X"]:
                cur_fw_version = DpIfGen2APIBasicDp25.interface_fw_id_read()
                # min_fw_version = DpIfGen2APIBasicDp25.MIN_DPIFGEN2_FW_VERSION
                max_fw_version = DpIfGen2APIBasicDp25.MAX_DPIFGEN2_FW_VERSION
                chip_id = DpIfGen2APIBasicDp25.chip_identify(verbose, debug, parent)
            elif api.get("Name") in ["DP3"]:
                cur_fw_version = DpIfGen2APIBasicDp3.read_if_firmware_version()
                # min_fw_version = DpIfGen2APIBasicDp3.MIN_DPIFGEN2_FW_VERSION
                max_fw_version = DpIfGen2APIBasicDp3.MAX_DPIFGEN2_FW_VERSION
                chip_id = "dp3"
            else:
                return False

            min_fw_cond = DpIfGen2Validate.dpifgen2_fw_version_validate(">=", min_fw_version)
            max_fw_cond = DpIfGen2Validate.dpifgen2_fw_version_validate("<", max_fw_version)

            if not min_fw_cond:
                raise Exception(
                    "".join(
                        [
                            "Error: Minimum dpIfGen2 FW version criteria not satisfied. \n",
                            "The minimum FW version required is ",
                            min_fw_version,
                            "Current dpIfGen2 FW version is: ",
                            cur_fw_version,
                            "\n",
                            "Please upgrade the dpIfGen2 FW. ",
                        ]
                    )
                )

            if not max_fw_cond:
                raise Exception(
                    "".join(
                        [
                            "Error: Maximum dpIfGen2 FW version criteria not satisfied. \n",
                            "The maximum dpIfGen2 FW version supported is ",
                            max_fw_version,
                            "\n",
                            "Current dpIfGen2 FW version is: ",
                            cur_fw_version,
                            "\n",
                            "Please use a compatible version of the dpIfGen2 FW. ",
                        ]
                    )
                )

            calibrated = DpIfGen2Validate.dpifgen2_board_is_calibrated(verbose, debug, parent)
            if not calibrated:
                raise Exception(
                    "".join(
                        [
                            "Error: dpIfGen2 Board is not calibrated. \n",
                            "Please calibrate the dpIfGen2 board first. ",
                        ]
                    )
                )

            supported_chip_ids = ["dp2a", "dp2b", "dp2", "dp25", "dp3"]
            if chip_id not in supported_chip_ids:
                raise Exception(
                    "".join(
                        [
                            "Error: This setup configuration is not correct. \n",
                            "Please validate if correct chip is being used with the correct "
                            "dpIfGen2 FW version. \n\n",
                            "Supported Configurations: \n",
                            "Supported Chip Types: ",
                            str(supported_chip_ids),
                            "\nSupported dpIfGen2FW version: ",
                            min_fw_version,
                            " <= dpIfGen2 FW < ",
                            max_fw_version,
                            "\n\n",
                            "Current Configuration: \n",
                            "Chip Type: ",
                            chip_id,
                            "\n",
                            "dpIfGen2 FW version",
                            cur_fw_version,
                        ]
                    )
                )

            return True
        else:
            raise Exception(
                "".join(
                    [
                        "No Valid API is selected for this widget. ",
                        "Please select a valid API and try ",
                        "again ",
                    ]
                )
            )


def main():
    print("This script is not executable. It contains library functions only.")
    print("Version", DpIfGen2Validate.VERSION)

    # status = DpIfGen2Validate.dpifgen2_fw_version_validate(">=", '1.7.0', True)
    ##    status = DpIfGen2Validate.perform_comparison("1.6.9", "==", "1.7.1",  True)
    # status2 = DpIfGen2Validate.dpifgen2_board_is_calibrated(True, True)
    selected_api = SelectAPI.instance()
    selected_api._set_API("dp3")
    DpIfGen2APIBasic.connection_establish()
    DpIfGen2Validate.setup_verify(True, False)
    # print(status, status2)


if __name__ == "__main__":
    main()

# --- End of File ------------------------------------------------
