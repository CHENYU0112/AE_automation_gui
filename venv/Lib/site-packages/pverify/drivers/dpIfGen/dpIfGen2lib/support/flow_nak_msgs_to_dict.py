#!/usr/bin/python
# ===========================================================================
# Name:        flow_nak_msgs_to_dict.py
#
# Purpose:     Extract useful information from the nak.h file from dpifgen2
#              FW to form a Python dictionary.
#
# Author:      Aslam Faizan Muhammad (IFAG PMM SYS SWT SWI)
#                                       <Faizan.Aslam@infineon.com>
# Created:     14.07.2015
#
# Python Version: v2.7.2
#
# Dependency:
#
# ===========================================================================
# Copyright (C) 2014-2015 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
from __future__ import annotations

import re

"""Converts the NAK messages and saves it as a dictionary"""


class InfoElement:
    def __init__(self, name):
        self.name = name
        self.description = ""
        self.action = ""
        self.value = None

    def add_value(self, value):
        if value.startswith("0x"):
            self.value = int(value, 16)
        else:
            self.value = int(value)

    def add_description(self, text):
        self.description = text

    def add_action(self, text):
        self.action = text

    def get_name(self):
        return self.name

    def get_description(self):
        return self.description

    def get_action(self):
        return self.action

    def get_value(self):
        return self.value

    def is_name(self, name):
        return self.name == name

    def is_value(self, value):
        return self.value == value

    def is_complete(self):
        if len(self.name) == 0:
            return False
        if len(self.description) == 0:
            return False
        if len(self.action) == 0:
            return False
        if self.value is None:
            return False
        return True

    def __str__(self):
        print(self.value)
        return "name: {:s}\ndescription: {:s}\naction: {:s}\nvalue: 0x{:04x}".format(
            self.name, self.description, self.action, self.value
        )


class Infos:
    def __init__(self):
        self.infos = []

    def add_info(self, info):
        """
        :type info: InfoElement
        """
        found = False
        for item in self.infos:
            if item.is_name(info.get_name()):
                item.add_description(info.get_description())
                item.add_action(info.get_action())
                found = True

        if not found:
            self.infos.append(info)

    def get_value(self, name):
        for item in self.infos:
            if item.is_name(name):
                return item.get_value()
        return None

    def get_description(self, value):
        for item in self.infos:
            if item.is_value(value):
                return item.get_description()
        return None

    def get_name(self, value):
        for item in self.infos:
            if item.is_value(value):
                return item.get_name()
        return None

    def get_action(self, value):
        for item in self.infos:
            if item.is_value(value):
                return item.get_action()
        return None

    def get_number_of_complete_items(self):
        count = 0
        for item in self.infos:
            if item.is_complete():
                count += 1
        return count

    def save_xml(self, file_name):
        with open(file_name, "w") as of:
            of.write("<!-- This file is generated automatically.-->\n")
            of.write("<!-- DO NOT EDIT.-->\n")
            of.write("<Messages>\n")
            of.write('    <NakCodes name="Interface board NAK Codes">\n')
            value_list = []
            for info in self.infos:
                value_list.append(info.get_value())
            value_list = sorted(value_list)
            for value in value_list:
                of.write('        <NakCode code="NAK%04X" ' % (value))
                of.write('name="%s" ' % self.get_name(value))
                of.write("\n                 ")
                of.write('description="%s" ' % self._convert_string_to_xml(self.get_description(value)))
                of.write("\n                 ")
                of.write('action="%s" ' % self._convert_string_to_xml(self.get_action(value)))
                of.write("/>\n")
            of.write("    </NakCodes>\n")
            of.write("</Messages>\n")

    def _convert_string_to_xml(self, text):
        result = str(text)
        result = result.replace("<", "&lt;")
        result = result.replace(">", "&gt;")
        return result.replace('"', "&quot;")

    def save(self, file_name):
        with open(file_name, "w") as of:
            of.write("# This file is generated automatically.\n")
            of.write("# DO NOT EDIT.\n\n")
            the_dict = {}
            for item in self.infos:
                the_sub_dict = {}
                value = item.get_value()
                the_sub_dict["name"] = item.get_name()
                the_sub_dict["description"] = item.get_description()
                the_sub_dict["action"] = item.get_action()
                the_dict[value] = the_sub_dict

            if 0:
                of.write("nak_codes_dict = %s\n\n\n" % str(the_dict))
            else:
                the_dict_string = "nak_codes_dict = {"
                length1 = len(the_dict_string)
                keys = sorted(the_dict.keys())
                for key in keys:
                    value_string = "%i: {" % key
                    length2 = len(value_string)
                    the_dict_string += value_string
                    for key2 in the_dict[key]:
                        the_dict_string += f"'{key2}': '{the_dict[key][key2]}',\n"
                        for _c in range(length1 + length2):
                            the_dict_string += " "
                    the_dict_string = the_dict_string[0 : len(the_dict_string) - 1]
                    the_dict_string += "},\n"
                    for _c in range(length1):
                        the_dict_string += " "
                the_dict_string = the_dict_string[0 : len(the_dict_string) - 1]
                the_dict_string += "}\n"

                of.write("%s\n\n\n" % the_dict_string)

            text = """class NakCodes(object):
    def __init__(self):
        self.codes = nak_codes_dict

    def _has_value(self, value):
        if value in self.codes:
            return True
        else:
            return False

    def get_name(self, value):
        if self._has_value(value):
            return self.codes[value]['name']
        else:
            return 'NA'

    def get_description(self, value):
        if self._has_value(value):
            return self.codes[value]['description']
        else:
            return 'NA'

    def get_action(self, value):
        if self._has_value(value):
            return self.codes[value]['action']
        else:
            return 'NA'
"""
            of.write(text)


class NakInfoParser:
    """Extract useful information from the nak.h file from dpifgen2
    FW to form a Python dictionary.

    The NAK responses from the dpIfGen2 board are hex words which must be decoded
    and presented to the end user in a human readable form. The comments and the
    declaration are extracted directly from the source file of the dpIfGen2 FW.

    The script must be run in order to update the list in lib_dpifgen2_commands_list.py
    with every new FW release.
    """

    #: Version: v1.0.1
    VERSION = "1.0.1"

    def __init__(self, filename):
        self.filename = filename
        self.nak_dict = None
        self.out_file = None
        self.file_data = self._read_file(self.filename)
        self.infos = self._parse_codes(self.file_data)
        self._parse_doc(self.file_data)

    def _read_file(self, filename):
        with open(filename) as f:
            return f.read()

    def _parse_codes(self, data):
        pattern = re.compile(r"(NAK_[A-Z_]+)\s*=\s*([0-9a-fA-Fx]+)")
        infos = Infos()
        for line in data.split("\n"):
            l = line.strip()
            result = pattern.search(l)
            if result:
                tag = result.group(1)
                value = result.group(2)
                obj = InfoElement(tag)
                obj.add_value(value)
                infos.add_info(obj)
        return infos

    def _parse_doc(self, data):
        # get all block comments from file data
        block_comment_pattern = re.compile("(/\\*(.|\n)*?\\*/)+", re.MULTILINE)
        block_comment_result = block_comment_pattern.findall(data)
        if block_comment_result:
            for comment in block_comment_result:
                text = comment[0]
                if self._has_tag(text, "@@NAME:"):
                    name = self._extract_info(text, "@@NAME:")
                    desc = self._extract_info(text, "@@DESCRIPTION:")
                    action = self._extract_info(text, "@@ACTION:")
                    obj = InfoElement(name)
                    obj.add_description(desc)
                    obj.add_action(action)
                    self.infos.add_info(obj)

    def _extract_info(self, text, tag):
        pattern = re.compile("%s\\s*((.|\n)*?)(@@|\\*/)" % tag)
        result = pattern.search(text)
        new_text = ""
        if result:
            desc = result.group(1)
            for line in desc.split("\n"):
                l = line.strip()
                l = l.lstrip("*")
                l = l.strip()
                if len(l):
                    new_text = " ".join([new_text, l])
        return new_text.strip()

    def _has_tag(self, text, tag):
        # check if text contains the given tag
        pattern = re.compile(tag)
        result = pattern.search(text)
        return bool(result)

    def get_value(self, name):
        return self.infos.get_value(name)

    def get_desc(self, value):
        return self.infos.get_description(value)

    def get_action(self, value):
        return self.infos.get_action(value)

    def get_name(self, value):
        return self.infos.get_name(value)

    def get_size(self):
        return self.infos.get_number_of_complete_items()


def main():
    # create an instance of the class
    nak_converter = NakInfoParser()
    # nak_converter.filename = "nak_msgs_dp25.txt"
    nak_converter.filename = "nak_msgs_dp2a_dp2b.txt"
    nak_converter.out_file = "nak_dict.txt"
    # nak_converter.write_nak_dict()


if __name__ == "__main__":
    main()

# --- End of File ------------------------------------------------
