#!/usr/bin/python
# ===========================================================================
# Name:        lib_etree_helper.py
#
# Purpose:     Helper file to generate a dict obj from a tree
#
# Author:      Aslam Faizan Muhammad (IFAG PMM SYS SWT SWI)
#                                       <Faizan.Aslam@infineon.com>
# Created:     26.06.2014
#
# Python Version: v2.7.2
#
# Dependency: collections, xml, pprint
#
# ===========================================================================
# Copyright (C) 2014-2015 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#

"""Class to support Etree operations """
from __future__ import annotations

from collections import defaultdict

# from pprint(import pprint)
from xml.dom import minidom
from xml.etree import ElementTree as ET


class EtreeHelper:
    """
    Helper class to perform conversions between the tree generated from xml file and
    a Python dictionary.
    """

    #: Version: v1.0.1
    VERSION = "1.0.1"

    @staticmethod
    def etree_to_dict(t):
        """Reads and extracts xml content and returns a Python dictionary

        :param t: etree extracted from xml file
        :return: Python dictionary
        """
        d = {t.tag: {} if t.attrib else None}
        children = list(t)
        if children:
            dd = defaultdict(list)
            for dc in map(EtreeHelper.etree_to_dict, children):
                for k, v in dc.iteritems():
                    dd[k].append(v)
            d = {t.tag: {k: v[0] if len(v) == 1 else v for k, v in dd.iteritems()}}
        if t.attrib:
            d[t.tag].update(("@" + k, v) for k, v in t.attrib.iteritems())
        if t.text:
            text = t.text.strip()
            if children or t.attrib:
                if text:
                    d[t.tag]["#text"] = text
            else:
                d[t.tag] = text
        return d

    @staticmethod
    def dict_to_etree(d):
        """Construct an etree out of a Python dictionary

        :param d: Python dictionary
        :return: etree extracted from xml file
        """

        def _to_etree(d, root):
            try:
                basestring
            except NameError:  # python3
                basestring = str
            if not d:
                pass
            elif isinstance(d, basestring):
                root.text = d
            elif isinstance(d, dict):
                for k, v in d.items():
                    assert isinstance(k, basestring)
                    if k.startswith("#"):
                        assert k == "#text"
                        assert isinstance(v, basestring)
                        root.text = v
                    elif k.startswith("@"):
                        assert isinstance(v, basestring)
                        root.set(k[1:], v)
                    elif isinstance(v, list):
                        for e in v:
                            _to_etree(e, ET.SubElement(root, k))
                    else:
                        _to_etree(v, ET.SubElement(root, k))
            else:
                assert d == "invalid type"

        assert isinstance(d, dict)
        assert len(d) == 1
        tag, body = next(iter(d.items()))
        node = ET.Element(tag)
        _to_etree(body, node)
        # return ET.tostring(node)
        return node

    # @staticmethod
    # def write_dict_to_xml():
    #     # write to xml file
    #     # wrap it in an ElementTree instance, and save as XML
    #     root_xml = dict_to_etree(dict_xml)
    #     tree_xml = ET.ElementTree(root_xml)
    #
    #     tree_xml.write(self.output_file,
    #                    xml_declaration=True,
    #                    encoding='utf-8',
    #                    method="xml"
    #                    )
    #
    #     print("root xml contains:")
    #     pprint(root_xml.getchildren())

    @staticmethod
    def prettify(elem):
        """
        Return a pretty-printed XML string for the Element.
        Tabs are inserted for better visual outlook of the xml file.

        :param elem: etree node extracted from xml file
        :return: etree node with visual formatting
        """
        rough_string = ET.tostring(elem, encoding="utf-8")
        reparsed = minidom.parseString(rough_string)
        return reparsed.toprettyxml(indent="    ", encoding="utf-8")


def main():
    print("This is a helper class for Etree operations")


if __name__ == "__main__":
    main()

# --- End of File ------------------------------------------------
