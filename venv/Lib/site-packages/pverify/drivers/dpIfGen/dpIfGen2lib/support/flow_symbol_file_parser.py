#!/usr/bin/python
# ===========================================================================
# Name:        flow_symbol_file_parser.py
#
# Purpose:     This script parses the .symb file defined in a specified
#              format.
#
# Author:      Aslam Faizan Muhammad (IFAG PMM SYS SWT SWI)
#                                       <Faizan.Aslam@infineon.com>
# Created:     26.06.2014
#
# Python Version: v2.7.2
#
# Dependency: argparse
#
# ===========================================================================
# Copyright (C) 2014-2015 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
from __future__ import annotations

import argparse


class SymbolFileParser:
    """
    This script reads a symbol file and return the contents of the symbol
    file as a dictionary. The symbol file format is as follows:

    **<SYMBOL> EQU <DATA>H** *; Comments*

    .. note::

            The bold part is mandatory whereas the italics part is optional.

    Example::

        ADC_CHCTR2__ADR EQU 4212H
        BM_TMAX_SEQ00 equ 8021H ;  (C) Burstmode 1st pulse TMAX

    .. warning::

            This symbol file format is not universal and is only used by a specific
            number of projects. Once a standard symbol file format is established,
            the scripts needs to be extended to support it.


    This script can either be used by another script or it can be run from
    the command line using the arguments.

    The following arguments from the command line are supported:
        1. **-f/- -filename** Input symbol file to be processed
        2. **-v/- -verbose** Displays additional information during execution of the script.
        3. **-V/- -version** Displays the current version of the script.


    Example Usage:

        >>> flow_symbol_file.py -f "filename.symb"
        >>> flow_symbol_file.py -f "filename.symb" -v

    """

    #: Version: v1.0.1
    VERSION = "1.0.1"

    def __init__(self):
        """Initialize the class. Default values for the symbol class."""
        self.filename = None
        self.verbose = False

    def parse_arguments(self):
        parser = argparse.ArgumentParser(description="Parse the hid variables")
        # Parsing for two arguments from the command line
        group_basic = parser.add_argument_group("Options")
        group_basic.add_argument("-f", "--filename", help="Symbol file", required=True)
        group_basic.add_argument(
            "-v",
            "--verbose",
            help="provide additional printout",
            action="store_true",
            required=False,
        )
        group_basic.add_argument("-V", "--version", help="print(version", action="store_true", required=False)

        args = parser.parse_args()

        self.filename = args.filename
        # assign argument values to class variables ##
        # if the user provided example argument
        if args.verbose:
            self.verbose = args.verbose

        if self.verbose:
            # print(the values of the parameters to be used in the script##)
            print("Symbol File: ", self.filename)
            print("Verbose Mode: ", self.verbose)
        if args.version:
            # show the version and exit
            print("Version: ", self.VERSION)
            exit()

    def extract_info(self):
        if self.verbose:
            print("Extracting information from Symbol file.")
        try:
            self.symbol_dict = {}
            with open(self.filename) as f:
                for row in f.readlines():
                    if row.startswith(";"):
                        continue
                    # Each row in the symbol file is divided into two parts
                    # The first part contains the address information
                    # Whereas the second part comprise description if it exist
                    symbol_info = row.split(";")
                    # print(symbol_info)
                    symbol_address_info = symbol_info[0].upper().split(" EQU ")
                    symbol_name = symbol_address_info[0]
                    symbol_address = symbol_address_info[1]
                    # process symbol address for consistency
                    symbol_address = symbol_address.replace("\n", "")
                    symbol_address = symbol_address.replace(" ", "")
                    symbol_address = symbol_address.replace("H", "")
                    symbol_address_dec = int(symbol_address, 16)
                    symbol_address = f"{symbol_address_dec:04X}"

                    ##                    self.symbol_dict[symbol_name] = {}
                    ##                    self.symbol_dict[symbol_name]["Address"] = symbol_address
                    ##
                    ##                    try:
                    ##                        symbol_description = symbol_info[1]
                    ##                        self.symbol_dict[symbol_name]["Description"] = symbol_description
                    ##                    except Exception:
                    ##                        self.symbol_dict[symbol_name]["Description"] = " "

                    self.symbol_dict[symbol_name] = []
                    self.symbol_dict[symbol_name].append(symbol_name)
                    self.symbol_dict[symbol_name].append(symbol_address)

                    try:
                        symbol_description = symbol_info[1]
                        self.symbol_dict[symbol_name].append(symbol_description)
                    except Exception:
                        self.symbol_dict[symbol_name].append(" ")

            if self.verbose:
                print(self.symbol_dict)
            return self.symbol_dict
        except Exception as e:
            print("An exception occurred while parsing the symbol file")
            print(str(e))


def main():
    # create an instance of the class
    symbol_file_parser = SymbolFileParser()
    # parse the arguments
    symbol_file_parser.parse_arguments()
    # read the symbol file
    symbol_file_parser.extract_info()


if __name__ == "__main__":
    main()

# --- End of File ------------------------------------------------
