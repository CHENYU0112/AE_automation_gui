from __future__ import annotations

import re


class DocCreator:
    def __init__(self, filename):
        self.filename = filename
        self.file_descriptor = None
        self.class_name = ""

    def open(self):
        self.file_descriptor = open(self.filename, "w")

    def close(self):
        self.file_descriptor.close()

    def set_class_name(self, class_name):
        self.class_name = class_name

    def add_heading1(self, text):
        self.file_descriptor.write(text)
        self.file_descriptor.write("\n")
        self.file_descriptor.write("=" * len(text))
        self.file_descriptor.write("\n")

    def add_heading2(self, text):
        self.file_descriptor.write("\n")
        self.file_descriptor.write(text)
        self.file_descriptor.write("\n")
        self.file_descriptor.write("-" * len(text))
        self.file_descriptor.write("\n")

    def add_heading3(self, text):
        self.file_descriptor.write("\n")
        self.file_descriptor.write(text)
        self.file_descriptor.write("\n")
        self.file_descriptor.write("+" * len(text))
        self.file_descriptor.write("\n")

    def add_autoattribute(self, text):
        # documentation of a module i.e. 'text' must be the name of an attribute
        self.file_descriptor.write(".. autoattribute:: ")
        self.file_descriptor.write(self.class_name)
        self.file_descriptor.write(".")
        self.file_descriptor.write(text)
        self.file_descriptor.write("\n")
        if 0:
            self.file_descriptor.write("   :annotation:")
            self.file_descriptor.write("\n")

    def add_automodule(self, text):
        # documentation of a module i.e. 'text' must be the name of a module
        self.file_descriptor.write(".. automodule:: ")
        self.file_descriptor.write(text)
        self.file_descriptor.write("\n")
        if 1:
            self.file_descriptor.write("   :show-inheritance:")
            self.file_descriptor.write("\n")

    def add_autoclass(self):
        # documentation of a class
        self.file_descriptor.write(".. autoclass:: ")
        self.file_descriptor.write(self.class_name)
        self.file_descriptor.write("\n")

    def add_automethod(self, text):
        # documentation of a method i.e. 'text' must be the name of a method
        self.file_descriptor.write(".. automethod:: ")
        self.file_descriptor.write(self.class_name)
        self.file_descriptor.write(".")
        self.file_descriptor.write(text)
        self.file_descriptor.write("\n")

    def add_inheritance(self, text):
        self.file_descriptor.write(".. inheritance-diagram:: ")
        self.file_descriptor.write(text)
        self.file_descriptor.write("\n")
        if 0:
            self.file_descriptor.write("   :parts: 1")
            self.file_descriptor.write("\n")

    def add_body(self, text):
        self.file_descriptor.write(text)
        self.file_descriptor.write("\n")

    def add_blank(self):
        self.file_descriptor.write("\n")

    def get_class(self, doc_string):
        # extract class tag from text
        pattern = re.compile("@@Class:\\s(.+)\n", re.MULTILINE)
        result = pattern.search(doc_string)
        if result:
            return result.group(1)
        return "class"


class Attribs:
    def __init__(self, inst, class_list):
        self.class_list = class_list
        self.class_instance = inst

        # generate a dictionary out of the function documentation
        self.dict_list = []
        for item in dir(self.class_instance):
            if not item.startswith("_"):
                attrib = getattr(self.class_instance, item)
                if callable(attrib):
                    item_dict = {}
                    item_dict["Method"] = item
                    docu = attrib.__doc__
                    if docu is not None:
                        brief = self._get_brief(docu)
                        Class = self._get_class(docu)
                        description = self._remove_attribute(docu)
                        item_dict["Name"] = brief
                        item_dict["Usage"] = "DpIfGen2APIBasicDp3.%s()" % item
                        item_dict["Description"] = description
                        item_dict["Class"] = Class
                        # Todo add attribute for color
                        self.dict_list.append(item_dict)
        self.function_dict = self._sort(self.dict_list)

    def get_data(self):
        return self.function_dict

    def get_functions_by_class(self, Class):
        result = []
        for item in self.dict_list:
            if item["Class"] == Class:
                result.append(item["Method"])
        return result

    def _get_brief(self, text):
        # extract first line of text
        line_list = text.split("\n") if text is not None else ["empty"]
        return line_list[0]

    def _get_class(self, text):
        # extract class tag from text
        pattern = re.compile("@@Class:\\s(.+)\n", re.MULTILINE)
        result = pattern.search(text)
        if result:
            return result.group(1)
        return "class"

    def _remove_attribute(self, text):
        t_list = text.splitlines(True)
        result = []
        for item in t_list:
            line = item.strip()
            if not line.startswith("@@"):
                result.append(item)
        return "".join(result)

    def _sort(self, dict_list):
        result_dict = {}
        index = 1
        for Class in self.class_list:
            List = []
            for item in dict_list:
                if item["Class"] == Class:
                    List.append(item)
            newlist = sorted(List, key=lambda k: k["Name"])
            index2 = 1
            for item in newlist:
                name = "C{}_{}:{}".format(index, index2, item["Name"])
                result_dict[name] = item
                index2 += 1
            index += 1

        return result_dict


def create_dp3_docu():
    from dpIfGen2lib.dpIfGen3API.com_dpifgen3_api_basic_class import DpIfGen2APIBasicDp3Class

    class_list = ["Connection", "Read", "Write", "Burn", "Interface", "EEPROM", "Others"]
    att = Attribs(DpIfGen2APIBasicDp3Class, class_list)

    instance = DocCreator("../doc/doc_dpIfGen2lib/source/dpifgen2_dp3_api.rst")
    instance.set_class_name("dpIfGen3API.com_dpifgen3_api_basic.DpIfGen2APIBasicDp3")

    instance.open()
    instance.add_heading1("dpIfGen2 Board Dp3 API Documentation")
    instance.add_autoattribute("VERSION")
    instance.add_automodule("dpIfGen3API.com_dpifgen3_api_basic")

    instance.add_heading2("Inheritance Diagram")
    instance.add_inheritance("dpIfGen2lib.dpIfGen3API.com_dpifgen3_api_basic_class.DpIfGen2APIBasicDp3Class")

    instance.add_heading3("Dp3 API List")
    instance.add_autoclass()

    instance.add_heading2("Interface Box Commands")
    instance.add_body("Following **Interface Box** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("Interface"):
        instance.add_automethod(item)

    instance.add_heading2("Connection Commands")
    instance.add_body("Following **Connection** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("Connection"):
        instance.add_automethod(item)

    instance.add_heading2("Read Commands")
    instance.add_body("Following **Read** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("Read"):
        instance.add_automethod(item)

    instance.add_heading2("Write Commands")
    instance.add_body("Following **Write** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("Write"):
        instance.add_automethod(item)

    instance.add_heading2("Burn Commands")
    instance.add_body("Following **Burn** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("Burn"):
        instance.add_automethod(item)

    instance.add_heading2("EEPROM Commands")
    instance.add_body("Following **EEPROM** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("EEPROM"):
        instance.add_automethod(item)

    instance.add_heading2("Other Commands")
    instance.add_body("Following **Other** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("Others"):
        instance.add_automethod(item)

    instance.close()


def create_dp25_docu():
    from dpIfGen2lib.dpIfGen2API.com_dpifgen2_api_basic_dp25 import DpIfGen2APIBasicDp25

    class_list = ["Connection", "Read", "Write", "Burn", "Check", "Others"]
    att = Attribs(DpIfGen2APIBasicDp25, class_list)

    instance = DocCreator("../doc/doc_dpIfGen2lib/source/dpifgen2_dp25_api.rst")
    instance.set_class_name("dpIfGen2API.com_dpifgen2_api_basic_dp25.DpIfGen2APIBasicDp25")

    instance.open()
    instance.add_heading1("dpIfGen2 Board Dp2.5 API Documentation")
    instance.add_autoattribute("VERSION")
    instance.add_automodule("dpIfGen2API.com_dpifgen2_api_basic_dp25")

    instance.add_heading2("Inheritance Diagram")
    instance.add_inheritance("dpIfGen2API.com_dpifgen2_api_basic_dp25.DpIfGen2APIBasicDp25")

    instance.add_heading3("Dp2.5 API List")
    instance.add_autoclass()

    instance.add_heading2("Connection Commands")
    instance.add_body("Following **Connection** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("Connection"):
        instance.add_automethod(item)

    instance.add_heading2("Read Commands")
    instance.add_body("Following **Read** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("Read"):
        instance.add_automethod(item)

    instance.add_heading2("Write Commands")
    instance.add_body("Following **Write** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("Write"):
        instance.add_automethod(item)

    instance.add_heading2("Burn Commands")
    instance.add_body("Following **Burn** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("Burn"):
        instance.add_automethod(item)

    instance.add_heading2("Check Commands")
    instance.add_body("Following **Check** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("Check"):
        instance.add_automethod(item)

    instance.add_heading2("Other Commands")
    instance.add_body("Following **Other** commands are available:")
    instance.add_blank()
    for item in att.get_functions_by_class("Others"):
        instance.add_automethod(item)

    instance.close()


def main():
    create_dp3_docu()
    create_dp25_docu()


if __name__ == "__main__":
    main()
