from __future__ import annotations

import re


class Validator:
    """
    This class helps to check if a given version is correct.
    """

    def __init__(self, version):
        """
        The provided version string must contain a field of form x.y.z

        :type version: str
        """
        self.version_string = version
        # format [major, minor, step]
        self.version_list = self._parse_version(version)

    def is_valid(self):
        if self.version_list == [0, 0, 0]:
            return False
        return True

    def _parse_version(self, version):
        major = 0
        minor = 0
        step = 0
        result = re.search(r"([0-9]+)\.([0-9]+)\.([0-9]+)", version)
        if result:
            major = int(result.group(1))
            minor = int(result.group(2))
            step = int(result.group(3))
        return [major, minor, step]

    def validate_equal(self, version):
        version_list = self._parse_version(version)
        # all elements of the lists are checked!
        if version_list == self.version_list:
            return True
        return False

    def validate_less(self, version):
        version_list = self._parse_version(version)
        for index in range(len(self.version_list)):
            if self.version_list[index] < version_list[index]:
                return True
            if self.version_list[index] > version_list[index]:
                return False

        # we are here if all numbers are equal
        return False

    def validate_less_equal(self, version):
        if self.validate_equal(version):
            return True
        return self.validate_less(version)

    def validate_greater(self, version):
        version_list = self._parse_version(version)
        for index in range(len(self.version_list)):
            if self.version_list[index] > version_list[index]:
                return True
            if self.version_list[index] < version_list[index]:
                return False

        # we are here if all numbers are equal
        return False

    def validate_greater_equal(self, version):
        if self.validate_equal(version):
            return True
        return self.validate_greater(version)

    def __str__(self):
        return ".".join(list(map(str, self.version_list)))
