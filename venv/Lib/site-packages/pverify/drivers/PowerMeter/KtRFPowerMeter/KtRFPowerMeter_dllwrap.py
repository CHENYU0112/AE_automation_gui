from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import KtRFPowerMeter_const as const
from .KtRFPowerMeter_const import *


class KtRFPowerMeter_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("KtRFPowerMeter.dll", "KtRFPowerMeter_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "KtRFPowerMeter"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.KtRFPowerMeter_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.KtRFPowerMeter_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.KtRFPowerMeter_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.KtRFPowerMeter_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.KtRFPowerMeter_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        status = self.dll.KtRFPowerMeter_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.KtRFPowerMeter_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, Vi):
        status = self.dll.KtRFPowerMeter_ClearInterchangeWarnings(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        status = self.dll.KtRFPowerMeter_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(InterchangeWarningBufferSize)
        status = self.dll.KtRFPowerMeter_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.KtRFPowerMeter_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetInterchangeCheck(self, Vi):
        status = self.dll.KtRFPowerMeter_ResetInterchangeCheck(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.KtRFPowerMeter_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.KtRFPowerMeter_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.KtRFPowerMeter_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.KtRFPowerMeter_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.KtRFPowerMeter_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.KtRFPowerMeter_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.KtRFPowerMeter_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.KtRFPowerMeter_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.KtRFPowerMeter_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.KtRFPowerMeter_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.KtRFPowerMeter_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        status = self.dll.KtRFPowerMeter_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.KtRFPowerMeter_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.KtRFPowerMeter_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.KtRFPowerMeter_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.KtRFPowerMeter_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.KtRFPowerMeter_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        status = self.dll.KtRFPowerMeter_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWait(self, Vi):
        status = self.dll.KtRFPowerMeter_SystemWait(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemClearIO(self, Vi):
        status = self.dll.KtRFPowerMeter_SystemClearIO(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRecallState(self, Vi, Identifier):
        status = self.dll.KtRFPowerMeter_SystemRecallState(ViSession(Vi), ViInt32(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemSaveState(self, Vi, Identifier):
        status = self.dll.KtRFPowerMeter_SystemSaveState(ViSession(Vi), ViReal64(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemPreset(self, Vi):
        status = self.dll.KtRFPowerMeter_SystemPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def viWrite(self, Vi, Count, Buffer):
        ReturnCount = ViInt64()
        status = self.dll.KtRFPowerMeter_viWrite(
            ViSession(Vi), ViInt64(Count), ViConstString(Buffer), byref(ReturnCount)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ReturnCount.value)

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViChar(BufferSize)
        ReturnCount = ViInt64()
        status = self.dll.KtRFPowerMeter_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Buffer = decode(Buffer)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def SystemWriteString(self, Vi, Data):
        status = self.dll.KtRFPowerMeter_SystemWriteString(ViSession(Vi), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.KtRFPowerMeter_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def StatusClear(self, Vi):
        status = self.dll.KtRFPowerMeter_StatusClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusGetRegister(self, Vi, Register):
        Val = ViInt16()
        status = self.dll.KtRFPowerMeter_StatusGetRegister(ViSession(Vi), ViInt32(Register), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def StatusPreset(self, Vi):
        status = self.dll.KtRFPowerMeter_StatusPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusSerialPoll(self, Vi):
        Val = ViChar()
        status = self.dll.KtRFPowerMeter_StatusSerialPoll(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Val

    def StatusSetRegister(self, Vi, Register, Value):
        status = self.dll.KtRFPowerMeter_StatusSetRegister(ViSession(Vi), ViInt32(Register), ViInt16(Value))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelIsCalibrationComplete(self, Vi):
        Val = ViInt32()
        status = self.dll.KtRFPowerMeter_ChannelIsCalibrationComplete(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def ChannelIsZeroComplete(self, Vi):
        Val = ViInt32()
        status = self.dll.KtRFPowerMeter_ChannelIsZeroComplete(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def ChannelsZero(self, Vi):
        status = self.dll.KtRFPowerMeter_ChannelsZero(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelQueryZeroNormal(self, Vi, Channel):
        Val = ViBoolean()
        status = self.dll.KtRFPowerMeter_ChannelQueryZeroNormal(ViSession(Vi), ViConstString(Channel), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def ChanneslItemConfigureVideoBandwidth(self, Vi, Channel, VideoBandwidthEnabled, VideoBandwidth):
        status = self.dll.KtRFPowerMeter_ChanneslItemConfigureVideoBandwidth(
            ViSession(Vi),
            ViConstString(Channel),
            ViBoolean(VideoBandwidthEnabled),
            ViInt32(VideoBandwidth),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemCalibrate(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChanneslItemCalibrate(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemConfigureRange(self, Vi, Channel, AutoRange, UpperPower):
        status = self.dll.KtRFPowerMeter_ChanneslItemConfigureRange(
            ViSession(Vi),
            ViConstString(Channel),
            ViBoolean(AutoRange),
            ViReal64(UpperPower),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemCalibrateAll(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChanneslItemCalibrateAll(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTimeGatesItemGetTimeGateName(self, Vi, Channel, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.KtRFPowerMeter_ChanneslItemTimeGatesItemGetTimeGateName(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Index),
            ViInt32(NameBufferSize),
            Name,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def ChanneslItemTimeGatesItemConfigure(self, Vi, TimeGate, Start, Length):
        status = self.dll.KtRFPowerMeter_ChanneslItemTimeGatesItemConfigure(
            ViSession(Vi), ViConstString(TimeGate), ViReal64(Start), ViReal64(Length)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTimeGatesItemGetAutoGatingMarker(self, Vi, TimeGate, MarkerReference):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_ChanneslItemTimeGatesItemGetAutoGatingMarker(
            ViSession(Vi), ViConstString(TimeGate), ViInt32(MarkerReference), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ChanneslItemTimeGatesItemSetAutoGatingMarker(self, Vi, TimeGate, MarkerReference, RVal):
        status = self.dll.KtRFPowerMeter_ChanneslItemTimeGatesItemSetAutoGatingMarker(
            ViSession(Vi),
            ViConstString(TimeGate),
            ViInt32(MarkerReference),
            ViReal64(RVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAperture(self, Vi, TimeGate, ApertureLevel):
        status = self.dll.KtRFPowerMeter_SetAperture(ViSession(Vi), ViConstString(TimeGate), ViInt32(ApertureLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemAveragingConfigure(self, Vi, Channel, Enabled, Mode):
        status = self.dll.KtRFPowerMeter_ChanneslItemAveragingConfigure(
            ViSession(Vi), ViConstString(Channel), ViBoolean(Enabled), ViInt32(Mode)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemAveragingConfigureVideoAveraging(self, Vi, Channel, Enabled, Count):
        status = self.dll.KtRFPowerMeter_ChanneslItemAveragingConfigureVideoAveraging(
            ViSession(Vi), ViConstString(Channel), ViBoolean(Enabled), ViInt32(Count)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelZero(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChannelZero(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ZeroNormal(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ZeroNormal(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemAveragingReset(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChanneslItemAveragingReset(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTraceConfigure(self, Vi, Channel, Enabled, Start, Length, Unit):
        status = self.dll.KtRFPowerMeter_ChanneslItemTraceConfigure(
            ViSession(Vi),
            ViConstString(Channel),
            ViBoolean(Enabled),
            ViReal64(Start),
            ViReal64(Length),
            ViInt32(Unit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTraceGetTrace(self, Vi, Channel, Resolution, ValBufferSize):
        Val = ARRAY_ViReal32(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ChanneslItemTraceGetTrace(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Resolution),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ChanneslItemTraceGetInstances(self, Vi, Channel, RefLevel, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ChanneslItemTraceGetInstances(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(RefLevel),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ChanneslItemTraceGetTransitionReferences(self, Vi, Channel, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ChanneslItemTraceGetTransitionReferences(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ChanneslItemTraceSetTransitionReferences(self, Vi, Channel, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ChanneslItemTraceSetTransitionReferences(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ChanneslItemTraceSetTransitionReferencesDefault(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChanneslItemTraceSetTransitionReferencesDefault(
            ViSession(Vi), ViConstString(Channel)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTraceAutoScale(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChanneslItemTraceAutoScale(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTracePulseDurationReferenceDefault(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChanneslItemTracePulseDurationReferenceDefault(
            ViSession(Vi), ViConstString(Channel)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequency(self, Vi, Channel, Pulse):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetFrequency(ViSession(Vi), ViConstString(Channel), ViInt32(Pulse), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def GetPeriod(self, Vi, Channel, Pulse):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetPeriod(ViSession(Vi), ViConstString(Channel), ViInt32(Pulse), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def GetSeparation(self, Vi, Channel, Pulse):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetSeparation(
            ViSession(Vi), ViConstString(Channel), ViInt32(Pulse), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def GetDuration(self, Vi, Channel, Pulse):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetDuration(ViSession(Vi), ViConstString(Channel), ViInt32(Pulse), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def GetDutyCycle(self, Vi, Channel, Pulse):
        Val = ViInt16()
        status = self.dll.KtRFPowerMeter_GetDutyCycle(ViSession(Vi), ViConstString(Channel), ViInt32(Pulse), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def SetScale(self, Vi, Channel, KtRFPowermeterTraceScaleEnum, Value):
        status = self.dll.KtRFPowerMeter_SetScale(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(KtRFPowermeterTraceScaleEnum),
            ViReal64(Value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetScale(self, Vi, Channel, KtRFPowermeterTraceScaleEnum):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetScale(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(KtRFPowermeterTraceScaleEnum),
            byref(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def GetTransitionNegativeDuration(self, Vi, Channel, Transition):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetTransitionNegativeDuration(
            ViSession(Vi), ViConstString(Channel), ViInt32(Transition), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def GetTransitionNegativeOccurrence(self, Vi, Channel, Transition):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetTransitionNegativeOccurrence(
            ViSession(Vi), ViConstString(Channel), ViInt32(Transition), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def GetTransitionPositiveDuration(self, Vi, Channel, Transition):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetTransitionPositiveDuration(
            ViSession(Vi), ViConstString(Channel), ViInt32(Transition), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def GetTransitionPositiveOccurrence(self, Vi, Channel, Transition):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetTransitionPositiveOccurrence(
            ViSession(Vi), ViConstString(Channel), ViInt32(Transition), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ChanneslItemTriggerConfigure(self, Vi, Channel, Source, AutoDelayEnabled, ContinuousEnabled):
        status = self.dll.KtRFPowerMeter_ChanneslItemTriggerConfigure(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Source),
            ViBoolean(AutoDelayEnabled),
            ViBoolean(ContinuousEnabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTriggerInitiate(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChanneslItemTriggerInitiate(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTriggerAbort(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChanneslItemTriggerAbort(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTriggerInitiateAll(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChanneslItemTriggerInitiateAll(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTriggerImmediate(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChanneslItemTriggerImmediate(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTriggerWaitForTrigger(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChanneslItemTriggerWaitForTrigger(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetReferencePowerLevel(self, Vi, Channel, ReferenceLevel):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetReferencePowerLevel(
            ViSession(Vi), ViConstString(Channel), ViReal64(ReferenceLevel), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ChanneslItemCorrectionConfigureCalFactorTable(self, Vi, Channel, Enabled, TableName):
        status = self.dll.KtRFPowerMeter_ChanneslItemCorrectionConfigureCalFactorTable(
            ViSession(Vi),
            ViConstString(Channel),
            ViBoolean(Enabled),
            ViConstString(TableName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemCorrectionConfigureOffset(self, Vi, Channel, Enabled, Offset):
        status = self.dll.KtRFPowerMeter_ChanneslItemCorrectionConfigureOffset(
            ViSession(Vi), ViConstString(Channel), ViBoolean(Enabled), ViReal64(Offset)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemCorrectionDutyCycleConfigure(self, Vi, Channel, Enabled, Value):
        status = self.dll.KtRFPowerMeter_ChanneslItemCorrectionDutyCycleConfigure(
            ViSession(Vi), ViConstString(Channel), ViBoolean(Enabled), ViReal64(Value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemCorrectionFrequencyConfigureFreqDepOffsetTable(
        self, Vi, Channel, Enabled, TableNameBufferSize, TableName
    ):
        status = self.dll.KtRFPowerMeter_ChanneslItemCorrectionFrequencyConfigureFreqDepOffsetTable(
            ViSession(Vi),
            ViConstString(Channel),
            ViBoolean(Enabled),
            ViInt32(TableNameBufferSize),
            ViConstString(TableName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemCorrectionGammaGetMagnitudePhasePairs(self, Vi, Channel, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ChanneslItemCorrectionGammaGetMagnitudePhasePairs(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ChanneslItemCorrectionSparameterGetMagnitudePhasePairs(self, Vi, Channel, SParameter, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ChanneslItemCorrectionSparameterGetMagnitudePhasePairs(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(SParameter),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SetStartvalue(self, Vi, Channel, FrequencyMode, Value):
        status = self.dll.KtRFPowerMeter_SetStartvalue(
            ViSession(Vi), ViConstString(Channel), ViInt32(FrequencyMode), ViReal64(Value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetStartValue(self, Vi, Channel, FrequencyMode):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetStartValue(
            ViSession(Vi), ViConstString(Channel), ViInt32(FrequencyMode), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def SetStopValue(self, Vi, Channel, FrequencyMode, Value):
        status = self.dll.KtRFPowerMeter_SetStopValue(
            ViSession(Vi), ViConstString(Channel), ViInt32(FrequencyMode), ViReal64(Value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetStopvalue(self, Vi, Channel, FrequencyMode):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetStopvalue(
            ViSession(Vi), ViConstString(Channel), ViInt32(FrequencyMode), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def SetStepSize(self, Vi, Channel, FrequencyMode, Value):
        status = self.dll.KtRFPowerMeter_SetStepSize(
            ViSession(Vi), ViConstString(Channel), ViInt32(FrequencyMode), ViReal64(Value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetStepSize(self, Vi, Channel, FrequencyMode):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetStepSize(
            ViSession(Vi), ViConstString(Channel), ViInt32(FrequencyMode), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ChanneslItemStatisticsCCDFGetData(self, Vi, Channel, ValBufferSize):
        Val = ARRAY_ViReal32(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFGetData(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ChanneslItemStatisticsCCDFGetTable(self, Vi, Channel, ValBufferSize):
        Val = ARRAY_ViReal32(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFGetTable(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ChanneslItemStatisticsCCDFGetDeltaMarker(self, Vi, Channel):
        Power = ViReal64()
        Prob = ViReal64()
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFGetDeltaMarker(
            ViSession(Vi), ViConstString(Channel), byref(Power), byref(Prob)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Power = float(Power.value)
        Prob = float(Prob.value)
        return Power, Prob

    def ChanneslItemStatisticsCCDFGetMarkerData(self, Vi, Channel, MarkerRef):
        Power = ViReal64()
        Prob = ViReal64()
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFGetMarkerData(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(MarkerRef),
            byref(Power),
            byref(Prob),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Power = float(Power.value)
        Prob = float(Prob.value)
        return Power, Prob

    def ChanneslItemStatisticsCCDFGetReferenceTraceData(self, Vi, Channel, ValBufferSize):
        Val = ARRAY_ViReal32(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFGetReferenceTraceData(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ChanneslItemStatisticsCCDFReferenceTraceEnabled(self, Vi, Channel):
        Val = ViBoolean()
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFReferenceTraceEnabled(
            ViSession(Vi), ViConstString(Channel), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def ChanneslItemStatisticsCCDFSaveReferenceTrace(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFSaveReferenceTrace(
            ViSession(Vi), ViConstString(Channel)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemStatisticsCCDFGetGaussianMarker(self, Vi, Channel, MarkerRef):
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFGetGaussianMarker(
            ViSession(Vi), ViConstString(Channel), ViInt32(MarkerRef)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemStatisticsCCDFSetMarkerX(self, Vi, Channel, Power, MarkerRef):
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFSetMarkerX(
            ViSession(Vi), ViConstString(Channel), ViReal64(Power), ViInt32(MarkerRef)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemStatisticsCCDFSetMarkerY(self, Vi, Channel, Power, MarkerRef):
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFSetMarkerY(
            ViSession(Vi), ViConstString(Channel), ViReal64(Power), ViInt32(MarkerRef)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemStatisticsCCDFSetReferenceMarker(self, Vi, Channel, MarkerRef):
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFSetReferenceMarker(
            ViSession(Vi), ViConstString(Channel), ViInt32(MarkerRef)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemStatisticsCCDFSetTraceMarker(self, Vi, Channel, MarkerRef):
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFSetTraceMarker(
            ViSession(Vi), ViConstString(Channel), ViInt32(MarkerRef)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemStatisticsCCDFConfigureTimeGate(self, Vi, Channel, Enabled, Start, Length):
        status = self.dll.KtRFPowerMeter_ChanneslItemStatisticsCCDFConfigureTimeGate(
            ViSession(Vi),
            ViConstString(Channel),
            ViBoolean(Enabled),
            ViReal64(Start),
            ViReal64(Length),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetValue(self, Vi, Channel, Probability):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetValue(
            ViSession(Vi), ViConstString(Channel), ViReal64(Probability), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def GetProbability(self, Vi, Channel, Power):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetProbability(
            ViSession(Vi), ViConstString(Channel), ViReal64(Power), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ChanneslItemTemperatureExternalSetRiseCoefficient(self, Vi, Channel, Coef1, Coef2, Coef3, Coef4):
        status = self.dll.KtRFPowerMeter_ChanneslItemTemperatureExternalSetRiseCoefficient(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(Coef1),
            ViReal64(Coef2),
            ViReal64(Coef3),
            ViReal64(Coef4),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTemperatureExternalSetFallCoefficient(self, Vi, Channel, Coef1, Coef2, Coef3, Coef4):
        status = self.dll.KtRFPowerMeter_ChanneslItemTemperatureExternalSetFallCoefficient(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(Coef1),
            ViReal64(Coef2),
            ViReal64(Coef3),
            ViReal64(Coef4),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTemperatureExternalGetRiseCoefficient(self, Vi, Channel, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ChanneslItemTemperatureExternalGetRiseCoefficient(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ChanneslItemTemperatureExternalGetFallCoefficient(self, Vi, Channel, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ChanneslItemTemperatureExternalGetFallCoefficient(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ChanneslItemTemperatureInternalSetCoefficient(self, Vi, Channel, Coef1, Coef2):
        status = self.dll.KtRFPowerMeter_ChanneslItemTemperatureInternalSetCoefficient(
            ViSession(Vi), ViConstString(Channel), ViReal64(Coef1), ViReal64(Coef2)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChanneslItemTemperatureInternalGetCoefficient(self, Vi, Channel, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ChanneslItemTemperatureInternalGetCoefficient(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def MeasurementsItemGetMeasurementName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.KtRFPowerMeter_MeasurementsItemGetMeasurementName(
            ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def MeasurementsItemConfigure(self, Vi, Measurement, Feed1Type, Feed2Type, Feed1Channel, Feed2Channel, Operation):
        status = self.dll.KtRFPowerMeter_MeasurementsItemConfigure(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(Feed1Type),
            ViInt32(Feed2Type),
            ViInt32(Feed1Channel),
            ViInt32(Feed2Channel),
            ViInt32(Operation),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemAbort(self, Vi):
        status = self.dll.KtRFPowerMeter_MeasurementsItemAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemInitiate(self, Vi):
        status = self.dll.KtRFPowerMeter_MeasurementsItemInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementIsOperationComplete(self, Vi):
        status = self.dll.KtRFPowerMeter_MeasurementIsOperationComplete(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemClearLimitFails(self, Vi, Measurement):
        status = self.dll.KtRFPowerMeter_MeasurementsItemClearLimitFails(ViSession(Vi), ViConstString(Measurement))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemConfigureAnalogOutput(self, Vi, Measurement, AnalogOutput, UpperValue, LowerValue):
        status = self.dll.KtRFPowerMeter_MeasurementsItemConfigureAnalogOutput(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(AnalogOutput),
            ViReal64(UpperValue),
            ViReal64(LowerValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemConfigureLimits(self, Vi, Measurement, Upper, Lower, Enabled, AutoClear):
        status = self.dll.KtRFPowerMeter_MeasurementsItemConfigureLimits(
            ViSession(Vi),
            ViConstString(Measurement),
            ViReal64(Upper),
            ViReal64(Lower),
            ViBoolean(Enabled),
            ViInt32(AutoClear),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemConfigureOffset(self, Vi, Measurement, Enabled, Value):
        status = self.dll.KtRFPowerMeter_MeasurementsItemConfigureOffset(
            ViSession(Vi), ViConstString(Measurement), ViBoolean(Enabled), ViReal64(Value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemConfigureRelative(self, Vi, Measurement, Enabled, SetValue):
        status = self.dll.KtRFPowerMeter_MeasurementsItemConfigureRelative(
            ViSession(Vi),
            ViConstString(Measurement),
            ViBoolean(Enabled),
            ViBoolean(SetValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemConfigureTimeGated(
        self,
        Vi,
        Measurement,
        Feed1Gate,
        Feed2Gate,
        Feed1Type,
        Feed2Type,
        Feed1Channel,
        Feed2Channel,
        Operation,
    ):
        status = self.dll.KtRFPowerMeter_MeasurementsItemConfigureTimeGated(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(Feed1Gate),
            ViInt32(Feed2Gate),
            ViInt32(Feed1Type),
            ViInt32(Feed2Type),
            ViInt32(Feed1Channel),
            ViInt32(Feed2Channel),
            ViInt32(Operation),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemConfigureTTLOutput(self, Vi, Measurement, Output, Limit, Sense):
        status = self.dll.KtRFPowerMeter_MeasurementsItemConfigureTTLOutput(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(Output),
            ViInt32(Limit),
            ViInt32(Sense),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemEnableAnalogOutput(self, Vi, Measurement, AnalogOutput, Enabled):
        status = self.dll.KtRFPowerMeter_MeasurementsItemEnableAnalogOutput(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(AnalogOutput),
            ViBoolean(Enabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemEnableTTLOutput(self, Vi, Measurement, Enabled, Output):
        status = self.dll.KtRFPowerMeter_MeasurementsItemEnableTTLOutput(
            ViSession(Vi), ViConstString(Measurement), ViBoolean(Enabled), ViInt32(Output)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemFetch(self, Vi, Measurement, MaxTime):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_MeasurementsItemFetch(
            ViSession(Vi), ViConstString(Measurement), ViInt32(MaxTime), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def MeasurementsItemMeasure(self, Vi, Measurement, MaxTime):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_MeasurementsItemMeasure(
            ViSession(Vi), ViConstString(Measurement), ViInt32(MaxTime), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def MeasurementsItemRead(self, Vi, Measurement, MaxTime):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_MeasurementsItemRead(
            ViSession(Vi), ViConstString(Measurement), ViInt32(MaxTime), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def MeasurementsItemConfigureScalarPower(self, Vi, Measurement, MaxTime):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_MeasurementsItemConfigureScalarPower(
            ViSession(Vi), ViConstString(Measurement), ViInt32(MaxTime), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def MeasurementsItemFetchVoltage(self, Vi, Measurement, VoltType):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_MeasurementsItemFetchVoltage(
            ViSession(Vi), ViConstString(Measurement), ViInt32(VoltType), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def MeasurementsItemFetchBuffer(self, Vi, Measurement, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_MeasurementsItemFetchBuffer(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def MeasurementsItemReadBuffer(self, Vi, Measurement, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_MeasurementsItemReadBuffer(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ClearPeakHoldValue(self, Vi, Measurement):
        status = self.dll.KtRFPowerMeter_ClearPeakHoldValue(ViSession(Vi), ViConstString(Measurement))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetTilt(self, Vi, Measurement, Index):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetTilt(ViSession(Vi), ViConstString(Measurement), ViReal64(Index), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def SetMeasurementType(self, Vi, Measurement, Mode, Value):
        status = self.dll.KtRFPowerMeter_SetMeasurementType(
            ViSession(Vi), ViConstString(Measurement), ViInt32(Mode), ViReal64(Value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetMeasurementType(self, Vi, Measurement, Mode):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetMeasurementType(
            ViSession(Vi), ViConstString(Measurement), ViInt32(Mode), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def DisplayConfigure(self, Vi, Enabled, Format):
        status = self.dll.KtRFPowerMeter_DisplayConfigure(ViSession(Vi), ViBoolean(Enabled), ViInt32(Format))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayWindowGetWindowName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.KtRFPowerMeter_DisplayWindowGetWindowName(
            ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def DisplayWindowConfigure(self, Vi, Window, Format, SelectedMeasurement):
        status = self.dll.KtRFPowerMeter_DisplayWindowConfigure(
            ViSession(Vi),
            ViConstString(Window),
            ViInt32(Format),
            ViInt32(SelectedMeasurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayWindowConfigureMeter(self, Vi, Window, MeterUpper, MeterLower, SelectedMeasurement):
        status = self.dll.KtRFPowerMeter_DisplayWindowConfigureMeter(
            ViSession(Vi),
            ViConstString(Window),
            ViReal64(MeterUpper),
            ViReal64(MeterLower),
            ViInt32(SelectedMeasurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyOffsetTableConfigure(self, Vi, FrequenciesBufferSize, OffsetsBufferSize):
        Frequencies = ARRAY_ViReal64(FrequenciesBufferSize)
        FrequenciesActualSize = ViInt32()
        Offsets = ARRAY_ViReal64(OffsetsBufferSize)
        OffsetsActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_FrequencyOffsetTableConfigure(
            ViSession(Vi),
            ViInt32(FrequenciesBufferSize),
            Frequencies,
            byref(FrequenciesActualSize),
            ViInt32(OffsetsBufferSize),
            Offsets,
            byref(OffsetsActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Frequencies = list(Frequencies)
        FrequenciesActualSize = int(FrequenciesActualSize.value)
        Offsets = list(Offsets)
        OffsetsActualSize = int(OffsetsActualSize.value)
        return Frequencies, FrequenciesActualSize, Offsets, OffsetsActualSize

    def FrequencyOffsetTableGetFrequencies(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_FrequencyOffsetTableGetFrequencies(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def FrequencyOffsetTableGetOffsets(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_FrequencyOffsetTableGetOffsets(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def FrequencyOffsetTableRename(self, Vi, OldName, NewName):
        status = self.dll.KtRFPowerMeter_FrequencyOffsetTableRename(
            ViSession(Vi), ViConstString(OldName), ViConstString(NewName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyOffsetTableSetFrequencies(self, Vi, ValueBufferSize):
        Value = ARRAY_ViReal64(ValueBufferSize)
        status = self.dll.KtRFPowerMeter_FrequencyOffsetTableSetFrequencies(
            ViSession(Vi), ViInt32(ValueBufferSize), Value
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Value)

    def FrequencyOffsetTableSetOffsets(self, Vi, ValueBufferSize):
        Value = ARRAY_ViReal64(ValueBufferSize)
        ValueActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_FrequencyOffsetTableSetOffsets(
            ViSession(Vi), ViInt32(ValueBufferSize), Value, byref(ValueActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Value = list(Value)
        ValueActualSize = int(ValueActualSize.value)
        return Value, ValueActualSize

    def FrequencyOffsetTableGetGain(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_FrequencyOffsetTableGetGain(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def FrequencyOffsetTableSetGain(self, Vi, ValueBufferSize):
        Value = ARRAY_ViReal64(ValueBufferSize)
        ValueActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_FrequencyOffsetTableSetGain(
            ViSession(Vi), ViInt32(ValueBufferSize), Value, byref(ValueActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Value = list(Value)
        ValueActualSize = int(ValueActualSize.value)
        return Value, ValueActualSize

    def GetFreqPoints(self, Vi):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetFreqPoints(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def GetGainPoints(self, Vi):
        Val = ViInt32()
        status = self.dll.KtRFPowerMeter_GetGainPoints(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def SelectTable(self, Vi, Name):
        status = self.dll.KtRFPowerMeter_SelectTable(ViSession(Vi), ViConstString(Name))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSelectedTable(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.KtRFPowerMeter_GetSelectedTable(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def SensorCalibrationTableConfigure(self, Vi, FrequenciesBufferSize, GainsBufferSize):
        Frequencies = ARRAY_ViReal64(FrequenciesBufferSize)
        FrequenciesActualSize = ViInt32()
        Gains = ARRAY_ViReal64(GainsBufferSize)
        GainsActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_SensorCalibrationTableConfigure(
            ViSession(Vi),
            ViInt32(FrequenciesBufferSize),
            Frequencies,
            byref(FrequenciesActualSize),
            ViInt32(GainsBufferSize),
            Gains,
            byref(GainsActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Frequencies = list(Frequencies)
        FrequenciesActualSize = int(FrequenciesActualSize.value)
        Gains = list(Gains)
        GainsActualSize = int(GainsActualSize.value)
        return Frequencies, FrequenciesActualSize, Gains, GainsActualSize

    def SensorCalibrationTableGetFrequencies(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_SensorCalibrationTableGetFrequencies(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SensorCalibrationTableGetOffsets(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_SensorCalibrationTableGetOffsets(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SensorCalibrationTableRename(self, Vi, OldName, NewName):
        status = self.dll.KtRFPowerMeter_SensorCalibrationTableRename(
            ViSession(Vi), ViConstString(OldName), ViConstString(NewName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SensorCalibrationTableSetFrequencies(self, Vi, ValueBufferSize):
        Value = ARRAY_ViReal64(ValueBufferSize)
        ValueActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_SensorCalibrationTableSetFrequencies(
            ViSession(Vi), ViInt32(ValueBufferSize), Value, byref(ValueActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Value = list(Value)
        ValueActualSize = int(ValueActualSize.value)
        return Value, ValueActualSize

    def SensorCalibrationTableSetOffsets(self, Vi, ValueBufferSize):
        Value = ARRAY_ViReal64(ValueBufferSize)
        status = self.dll.KtRFPowerMeter_SensorCalibrationTableSetOffsets(
            ViSession(Vi), ViInt32(ValueBufferSize), Value
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Value)

    def TriggerConfigure(
        self,
        Vi,
        AutoLevelEnabled,
        Delay,
        HoldOff,
        Hysteresis,
        Level,
        OutputEnabled,
        Slope,
    ):
        status = self.dll.KtRFPowerMeter_TriggerConfigure(
            ViSession(Vi),
            ViBoolean(AutoLevelEnabled),
            ViReal64(Delay),
            ViReal64(HoldOff),
            ViReal64(Hysteresis),
            ViReal64(Level),
            ViBoolean(OutputEnabled),
            ViInt32(Slope),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryAssignName(self, Vi, RegisterName, RegisterNo):
        status = self.dll.KtRFPowerMeter_MemoryAssignName(
            ViSession(Vi), ViConstString(RegisterName), ViInt16(RegisterNo)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryGetFreeMemory(self, Vi, CatalogType, ValBufferSize):
        Val = ARRAY_ViInt32(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_MemoryGetFreeMemory(
            ViSession(Vi),
            ViInt32(CatalogType),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def MemoryGetRegisterNumber(self, Vi, RegisterName):
        Val = ViInt16()
        status = self.dll.KtRFPowerMeter_MemoryGetRegisterNumber(ViSession(Vi), ViConstString(RegisterName), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def MemoryClearContents(self, Vi, RegisterName):
        status = self.dll.KtRFPowerMeter_MemoryClearContents(ViSession(Vi), ViConstString(RegisterName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryClearTableContents(self, Vi, Device):
        status = self.dll.KtRFPowerMeter_MemoryClearTableContents(ViSession(Vi), ViInt32(Device))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryGetGammaTableMagnitudePhasePairsCount(self, Vi):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_MemoryGetGammaTableMagnitudePhasePairsCount(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def MemoryGetSParameterTypeMagnitudePhasePairsCount(self, Vi, SParameter):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_MemoryGetSParameterTypeMagnitudePhasePairsCount(
            ViSession(Vi), ViInt32(SParameter), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def MemoryGetSParameterTypeMagnitudePhasePairs(self, Vi, SParameter, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_MemoryGetSParameterTypeMagnitudePhasePairs(
            ViSession(Vi),
            ViInt32(SParameter),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def MemoryGetGammaTableMagnitudePhasePairs(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_MemoryGetGammaTableMagnitudePhasePairs(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def MemorySetGammaTableMagnitudePhasePairs(self, Vi, ValueBufferSize):
        Value = ARRAY_ViReal64(ValueBufferSize)
        status = self.dll.KtRFPowerMeter_MemorySetGammaTableMagnitudePhasePairs(
            ViSession(Vi), ViInt32(ValueBufferSize), Value
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Value)

    def MemorySetSParameterTypeMagnitudePhasePairs(self, Vi, SParameter, ValueBufferSize):
        Value = ARRAY_ViReal64(ValueBufferSize)
        status = self.dll.KtRFPowerMeter_MemorySetSParameterTypeMagnitudePhasePairs(
            ViSession(Vi), ViInt32(SParameter), ViInt32(ValueBufferSize), Value
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Value)

    def GetSaveRecallRegisterList(self, Vi, Device, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.KtRFPowerMeter_GetSaveRecallRegisterList(
            ViSession(Vi), ViInt32(Device), ViInt32(ValBufferSize), Val
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def GetSaveRecallRegisterAvailable(self, Vi, Device):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetSaveRecallRegisterAvailable(ViSession(Vi), ViInt32(Device), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ServiceGetAverageZero(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ServiceGetAverageZero(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ServiceGetZeroOffset(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ServiceGetZeroOffset(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ServiceSetZero(self, Vi):
        status = self.dll.KtRFPowerMeter_ServiceSetZero(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ServiceBISTGetLinearityTestError(self, Vi):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_ServiceBISTGetLinearityTestError(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ServiceBISTLinearityTest(self, Vi):
        status = self.dll.KtRFPowerMeter_ServiceBISTLinearityTest(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetTestVoltage(self, Vi, Mode):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetTestVoltage(ViSession(Vi), ViInt32(Mode), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def InitiateVoltageTest(self, Vi, Mode, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.KtRFPowerMeter_InitiateVoltageTest(ViSession(Vi), ViInt32(Mode), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def GetVoltageTestUpperLimit(self, Vi, Mode):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetVoltageTestUpperLimit(ViSession(Vi), ViInt32(Mode), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def GetVoltageTestLowerLimit(self, Vi, Mode):
        Val = ViReal64()
        status = self.dll.KtRFPowerMeter_GetVoltageTestLowerLimit(ViSession(Vi), ViInt32(Mode), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ServiceFirmwareEraseMemory(self, Vi):
        status = self.dll.KtRFPowerMeter_ServiceFirmwareEraseMemory(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ServiceFirmwareClearMemory(self, Vi):
        status = self.dll.KtRFPowerMeter_ServiceFirmwareClearMemory(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ServiceFirmwareClearError(self, Vi):
        status = self.dll.KtRFPowerMeter_ServiceFirmwareClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ServiceFirmwareGetError(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.KtRFPowerMeter_ServiceFirmwareGetError(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def ServiceFirmwareFlashUpdate(self, Vi):
        status = self.dll.KtRFPowerMeter_ServiceFirmwareFlashUpdate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ServiceADCGetStdDev(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ServiceADCGetStdDev(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ServiceADCGetADCData1(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ServiceADCGetADCData1(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ServiceADCGetADCData(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ServiceADCGetADCData(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ServiceADCGetUncorrectedAvg(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ServiceADCGetUncorrectedAvg(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ServiceADCGetRawZeroAvgOffset(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ServiceADCGetRawZeroAvgOffset(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ServiceADCGetAverageAll(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.KtRFPowerMeter_ServiceADCGetAverageAll(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ServiceADCStartADC(self, Vi):
        status = self.dll.KtRFPowerMeter_ServiceADCStartADC(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAveragingAutoEnabled(self, Vi, Channel, AveragingAutoEnabled):
        status = self.dll.KtRFPowerMeter_ConfigureAveragingAutoEnabled(
            ViSession(Vi), ViConstString(Channel), ViBoolean(AveragingAutoEnabled)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCorrectionFrequency(self, Vi, Channel, CorrectionFrequency):
        status = self.dll.KtRFPowerMeter_ConfigureCorrectionFrequency(
            ViSession(Vi), ViConstString(Channel), ViReal64(CorrectionFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOffset(self, Vi, Channel, Offset):
        status = self.dll.KtRFPowerMeter_ConfigureOffset(ViSession(Vi), ViConstString(Channel), ViReal64(Offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRangeAutoEnabled(self, Vi, Channel, RangeAutoEnabled):
        status = self.dll.KtRFPowerMeter_ConfigureRangeAutoEnabled(
            ViSession(Vi), ViConstString(Channel), ViBoolean(RangeAutoEnabled)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureUnits(self, Vi, Units):
        status = self.dll.KtRFPowerMeter_ConfigureUnits(ViSession(Vi), ViInt32(Units))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasurement(self, Vi, Operator, Operand1, Operand2):
        status = self.dll.KtRFPowerMeter_ConfigureMeasurement(
            ViSession(Vi),
            ViInt32(Operator),
            ViConstString(Operand1),
            ViConstString(Operand2),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.KtRFPowerMeter_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def ConfigureChannelEnabled(self, Vi, Channel, ChannelEnabled):
        status = self.dll.KtRFPowerMeter_ConfigureChannelEnabled(
            ViSession(Vi), ViConstString(Channel), ViBoolean(ChannelEnabled)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerSource(self, Vi, TriggerSource):
        status = self.dll.KtRFPowerMeter_ConfigureTriggerSource(ViSession(Vi), ViInt32(TriggerSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInternalTriggerLevel(self, Vi, TriggerLevel):
        status = self.dll.KtRFPowerMeter_ConfigureInternalTriggerLevel(ViSession(Vi), ViReal64(TriggerLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInternalTrigger(self, Vi, EventSource, Slope):
        status = self.dll.KtRFPowerMeter_ConfigureInternalTrigger(
            ViSession(Vi), ViConstString(EventSource), ViInt32(Slope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAveragingCount(self, Vi, Channel, Count):
        status = self.dll.KtRFPowerMeter_ConfigureAveragingCount(ViSession(Vi), ViConstString(Channel), ViInt32(Count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefOscillatorEnabled(self, Vi, RefOscillatorEnabled):
        status = self.dll.KtRFPowerMeter_ConfigureRefOscillatorEnabled(ViSession(Vi), ViBoolean(RefOscillatorEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefOscillator(self, Vi, Frequency, Level):
        status = self.dll.KtRFPowerMeter_ConfigureRefOscillator(ViSession(Vi), ViReal64(Frequency), ViReal64(Level))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRange(self, Vi, Channel, RangeLower, RangeUpper):
        status = self.dll.KtRFPowerMeter_ConfigureRange(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(RangeLower),
            ViReal64(RangeUpper),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Calibrate(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_Calibrate(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsCalibrationComplete(self, Vi):
        Status = ViInt32()
        status = self.dll.KtRFPowerMeter_IsCalibrationComplete(ViSession(Vi), byref(Status))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Status.value)

    def Zero(self, Vi, Channel):
        status = self.dll.KtRFPowerMeter_Zero(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsZeroComplete(self, Vi):
        Status = ViInt32()
        status = self.dll.KtRFPowerMeter_IsZeroComplete(ViSession(Vi), byref(Status))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Status.value)

    def ZeroAllChannels(self, Vi):
        status = self.dll.KtRFPowerMeter_ZeroAllChannels(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDutyCycleCorrection(self, Vi, Channel, CorrectionEnabled, Correction):
        status = self.dll.KtRFPowerMeter_ConfigureDutyCycleCorrection(
            ViSession(Vi),
            ViConstString(Channel),
            ViBoolean(CorrectionEnabled),
            ViReal64(Correction),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Read(self, Vi, MaxTimeMilliseconds):
        Result = ViReal64()
        status = self.dll.KtRFPowerMeter_Read(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Result))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Result.value)

    def ReadChannel(self, Vi, Channel, MaxTimeMilliseconds):
        Result = ViReal64()
        status = self.dll.KtRFPowerMeter_ReadChannel(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(MaxTimeMilliseconds),
            byref(Result),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Result.value)

    def Abort(self, Vi):
        status = self.dll.KtRFPowerMeter_Abort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Fetch(self, Vi):
        Result = ViReal64()
        status = self.dll.KtRFPowerMeter_Fetch(ViSession(Vi), byref(Result))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Result.value)

    def FetchChannel(self, Vi, Channel):
        Result = ViReal64()
        status = self.dll.KtRFPowerMeter_FetchChannel(ViSession(Vi), ViConstString(Channel), byref(Result))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Result.value)

    def Initiate(self, Vi):
        status = self.dll.KtRFPowerMeter_Initiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsMeasurementComplete(self, Vi):
        Status = ViInt32()
        status = self.dll.KtRFPowerMeter_IsMeasurementComplete(ViSession(Vi), byref(Status))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Status.value)

    def QueryResultRangeType(self, Vi, MeasurementValue):
        RangeType = ViInt32()
        status = self.dll.KtRFPowerMeter_QueryResultRangeType(
            ViSession(Vi), ViReal64(MeasurementValue), byref(RangeType)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RangeType.value)

    def SendSoftwareTrigger(self, Vi):
        status = self.dll.KtRFPowerMeter_SendSoftwareTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
