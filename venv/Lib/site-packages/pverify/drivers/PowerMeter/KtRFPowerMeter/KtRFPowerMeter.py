from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .KtRFPowerMeter_dllwrap import *


class KtRFPowerMeter(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = KtRFPowerMeter_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SystemWaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.SystemWaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def SystemWait(self):
        """"""
        return self._dllwrap.SystemWait(self._vi)

    def SystemClearIO(self):
        """"""
        return self._dllwrap.SystemClearIO(self._vi)

    def SystemRecallState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemRecallState(self._vi, Identifier)

    def SystemSaveState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemSaveState(self._vi, Identifier)

    def SystemPreset(self):
        """"""
        return self._dllwrap.SystemPreset(self._vi)

    def viWrite(self, Count, Buffer):
        """

        :param Count:
        :type Count:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.viWrite(self._vi, Count, Buffer)

    def viRead(self, BufferSize):
        """

        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.viRead(self._vi, BufferSize)

    def SystemWriteString(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, Data)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def StatusClear(self):
        """"""
        return self._dllwrap.StatusClear(self._vi)

    def StatusGetRegister(self, Register):
        """

        :param Register:
        :type Register:
        """
        return self._dllwrap.StatusGetRegister(self._vi, Register)

    def StatusPreset(self):
        """"""
        return self._dllwrap.StatusPreset(self._vi)

    def StatusSerialPoll(self):
        """"""
        return self._dllwrap.StatusSerialPoll(self._vi)

    def StatusSetRegister(self, Register, Value):
        """

        :param Register:
        :type Register:
        :param Value:
        :type Value:
        """
        return self._dllwrap.StatusSetRegister(self._vi, Register, Value)

    def ChannelIsCalibrationComplete(self):
        """"""
        return self._dllwrap.ChannelIsCalibrationComplete(self._vi)

    def ChannelIsZeroComplete(self):
        """"""
        return self._dllwrap.ChannelIsZeroComplete(self._vi)

    def ChannelsZero(self):
        """"""
        return self._dllwrap.ChannelsZero(self._vi)

    def ChannelQueryZeroNormal(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChannelQueryZeroNormal(self._vi, Channel)

    def ChanneslItemConfigureVideoBandwidth(self, Channel, VideoBandwidthEnabled, VideoBandwidth):
        """

        :param Channel:
        :type Channel:
        :param VideoBandwidthEnabled:
        :type VideoBandwidthEnabled:
        :param VideoBandwidth:
        :type VideoBandwidth:
        """
        return self._dllwrap.ChanneslItemConfigureVideoBandwidth(
            self._vi, Channel, VideoBandwidthEnabled, VideoBandwidth
        )

    def ChanneslItemCalibrate(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemCalibrate(self._vi, Channel)

    def ChanneslItemConfigureRange(self, Channel, AutoRange, UpperPower):
        """

        :param Channel:
        :type Channel:
        :param AutoRange:
        :type AutoRange:
        :param UpperPower:
        :type UpperPower:
        """
        return self._dllwrap.ChanneslItemConfigureRange(self._vi, Channel, AutoRange, UpperPower)

    def ChanneslItemCalibrateAll(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemCalibrateAll(self._vi, Channel)

    def ChanneslItemTimeGatesItemGetTimeGateName(self, Channel, Index, NameBufferSize):
        """

        :param Channel:
        :type Channel:
        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.ChanneslItemTimeGatesItemGetTimeGateName(self._vi, Channel, Index, NameBufferSize)

    def ChanneslItemTimeGatesItemConfigure(self, TimeGate, Start, Length):
        """

        :param TimeGate:
        :type TimeGate:
        :param Start:
        :type Start:
        :param Length:
        :type Length:
        """
        return self._dllwrap.ChanneslItemTimeGatesItemConfigure(self._vi, TimeGate, Start, Length)

    def ChanneslItemTimeGatesItemGetAutoGatingMarker(self, TimeGate, MarkerReference):
        """

        :param TimeGate:
        :type TimeGate:
        :param MarkerReference:
        :type MarkerReference:
        """
        return self._dllwrap.ChanneslItemTimeGatesItemGetAutoGatingMarker(self._vi, TimeGate, MarkerReference)

    def ChanneslItemTimeGatesItemSetAutoGatingMarker(self, TimeGate, MarkerReference, RVal):
        """

        :param TimeGate:
        :type TimeGate:
        :param MarkerReference:
        :type MarkerReference:
        :param RVal:
        :type RVal:
        """
        return self._dllwrap.ChanneslItemTimeGatesItemSetAutoGatingMarker(self._vi, TimeGate, MarkerReference, RVal)

    def SetAperture(self, TimeGate, ApertureLevel):
        """

        :param TimeGate:
        :type TimeGate:
        :param ApertureLevel:
        :type ApertureLevel:
        """
        return self._dllwrap.SetAperture(self._vi, TimeGate, ApertureLevel)

    def ChanneslItemAveragingConfigure(self, Channel, Enabled, Mode):
        """

        :param Channel:
        :type Channel:
        :param Enabled:
        :type Enabled:
        :param Mode:
        :type Mode:
        """
        return self._dllwrap.ChanneslItemAveragingConfigure(self._vi, Channel, Enabled, Mode)

    def ChanneslItemAveragingConfigureVideoAveraging(self, Channel, Enabled, Count):
        """

        :param Channel:
        :type Channel:
        :param Enabled:
        :type Enabled:
        :param Count:
        :type Count:
        """
        return self._dllwrap.ChanneslItemAveragingConfigureVideoAveraging(self._vi, Channel, Enabled, Count)

    def ChannelZero(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChannelZero(self._vi, Channel)

    def ZeroNormal(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ZeroNormal(self._vi, Channel)

    def ChanneslItemAveragingReset(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemAveragingReset(self._vi, Channel)

    def ChanneslItemTraceConfigure(self, Channel, Enabled, Start, Length, Unit):
        """

        :param Channel:
        :type Channel:
        :param Enabled:
        :type Enabled:
        :param Start:
        :type Start:
        :param Length:
        :type Length:
        :param Unit:
        :type Unit:
        """
        return self._dllwrap.ChanneslItemTraceConfigure(self._vi, Channel, Enabled, Start, Length, Unit)

    def ChanneslItemTraceGetTrace(self, Channel, Resolution, ValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param Resolution:
        :type Resolution:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChanneslItemTraceGetTrace(self._vi, Channel, Resolution, ValBufferSize)

    def ChanneslItemTraceGetInstances(self, Channel, RefLevel, ValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param RefLevel:
        :type RefLevel:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChanneslItemTraceGetInstances(self._vi, Channel, RefLevel, ValBufferSize)

    def ChanneslItemTraceGetTransitionReferences(self, Channel, ValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChanneslItemTraceGetTransitionReferences(self._vi, Channel, ValBufferSize)

    def ChanneslItemTraceSetTransitionReferences(self, Channel, ValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChanneslItemTraceSetTransitionReferences(self._vi, Channel, ValBufferSize)

    def ChanneslItemTraceSetTransitionReferencesDefault(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemTraceSetTransitionReferencesDefault(self._vi, Channel)

    def ChanneslItemTraceAutoScale(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemTraceAutoScale(self._vi, Channel)

    def ChanneslItemTracePulseDurationReferenceDefault(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemTracePulseDurationReferenceDefault(self._vi, Channel)

    def GetFrequency(self, Channel, Pulse):
        """

        :param Channel:
        :type Channel:
        :param Pulse:
        :type Pulse:
        """
        return self._dllwrap.GetFrequency(self._vi, Channel, Pulse)

    def GetPeriod(self, Channel, Pulse):
        """

        :param Channel:
        :type Channel:
        :param Pulse:
        :type Pulse:
        """
        return self._dllwrap.GetPeriod(self._vi, Channel, Pulse)

    def GetSeparation(self, Channel, Pulse):
        """

        :param Channel:
        :type Channel:
        :param Pulse:
        :type Pulse:
        """
        return self._dllwrap.GetSeparation(self._vi, Channel, Pulse)

    def GetDuration(self, Channel, Pulse):
        """

        :param Channel:
        :type Channel:
        :param Pulse:
        :type Pulse:
        """
        return self._dllwrap.GetDuration(self._vi, Channel, Pulse)

    def GetDutyCycle(self, Channel, Pulse):
        """

        :param Channel:
        :type Channel:
        :param Pulse:
        :type Pulse:
        """
        return self._dllwrap.GetDutyCycle(self._vi, Channel, Pulse)

    def SetScale(self, Channel, KtRFPowermeterTraceScaleEnum, Value):
        """

        :param Channel:
        :type Channel:
        :param KtRFPowermeterTraceScaleEnum:
        :type KtRFPowermeterTraceScaleEnum:
        :param Value:
        :type Value:
        """
        return self._dllwrap.SetScale(self._vi, Channel, KtRFPowermeterTraceScaleEnum, Value)

    def GetScale(self, Channel, KtRFPowermeterTraceScaleEnum):
        """

        :param Channel:
        :type Channel:
        :param KtRFPowermeterTraceScaleEnum:
        :type KtRFPowermeterTraceScaleEnum:
        """
        return self._dllwrap.GetScale(self._vi, Channel, KtRFPowermeterTraceScaleEnum)

    def GetTransitionNegativeDuration(self, Channel, Transition):
        """

        :param Channel:
        :type Channel:
        :param Transition:
        :type Transition:
        """
        return self._dllwrap.GetTransitionNegativeDuration(self._vi, Channel, Transition)

    def GetTransitionNegativeOccurrence(self, Channel, Transition):
        """

        :param Channel:
        :type Channel:
        :param Transition:
        :type Transition:
        """
        return self._dllwrap.GetTransitionNegativeOccurrence(self._vi, Channel, Transition)

    def GetTransitionPositiveDuration(self, Channel, Transition):
        """

        :param Channel:
        :type Channel:
        :param Transition:
        :type Transition:
        """
        return self._dllwrap.GetTransitionPositiveDuration(self._vi, Channel, Transition)

    def GetTransitionPositiveOccurrence(self, Channel, Transition):
        """

        :param Channel:
        :type Channel:
        :param Transition:
        :type Transition:
        """
        return self._dllwrap.GetTransitionPositiveOccurrence(self._vi, Channel, Transition)

    def ChanneslItemTriggerConfigure(self, Channel, Source, AutoDelayEnabled, ContinuousEnabled):
        """

        :param Channel:
        :type Channel:
        :param Source:
        :type Source:
        :param AutoDelayEnabled:
        :type AutoDelayEnabled:
        :param ContinuousEnabled:
        :type ContinuousEnabled:
        """
        return self._dllwrap.ChanneslItemTriggerConfigure(
            self._vi, Channel, Source, AutoDelayEnabled, ContinuousEnabled
        )

    def ChanneslItemTriggerInitiate(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemTriggerInitiate(self._vi, Channel)

    def ChanneslItemTriggerAbort(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemTriggerAbort(self._vi, Channel)

    def ChanneslItemTriggerInitiateAll(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemTriggerInitiateAll(self._vi, Channel)

    def ChanneslItemTriggerImmediate(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemTriggerImmediate(self._vi, Channel)

    def ChanneslItemTriggerWaitForTrigger(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemTriggerWaitForTrigger(self._vi, Channel)

    def GetReferencePowerLevel(self, Channel, ReferenceLevel):
        """

        :param Channel:
        :type Channel:
        :param ReferenceLevel:
        :type ReferenceLevel:
        """
        return self._dllwrap.GetReferencePowerLevel(self._vi, Channel, ReferenceLevel)

    def ChanneslItemCorrectionConfigureCalFactorTable(self, Channel, Enabled, TableName):
        """

        :param Channel:
        :type Channel:
        :param Enabled:
        :type Enabled:
        :param TableName:
        :type TableName:
        """
        return self._dllwrap.ChanneslItemCorrectionConfigureCalFactorTable(self._vi, Channel, Enabled, TableName)

    def ChanneslItemCorrectionConfigureOffset(self, Channel, Enabled, Offset):
        """

        :param Channel:
        :type Channel:
        :param Enabled:
        :type Enabled:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ChanneslItemCorrectionConfigureOffset(self._vi, Channel, Enabled, Offset)

    def ChanneslItemCorrectionDutyCycleConfigure(self, Channel, Enabled, Value):
        """

        :param Channel:
        :type Channel:
        :param Enabled:
        :type Enabled:
        :param Value:
        :type Value:
        """
        return self._dllwrap.ChanneslItemCorrectionDutyCycleConfigure(self._vi, Channel, Enabled, Value)

    def ChanneslItemCorrectionFrequencyConfigureFreqDepOffsetTable(
        self, Channel, Enabled, TableNameBufferSize, TableName
    ):
        """

        :param Channel:
        :type Channel:
        :param Enabled:
        :type Enabled:
        :param TableNameBufferSize:
        :type TableNameBufferSize:
        :param TableName:
        :type TableName:
        """
        return self._dllwrap.ChanneslItemCorrectionFrequencyConfigureFreqDepOffsetTable(
            self._vi, Channel, Enabled, TableNameBufferSize, TableName
        )

    def ChanneslItemCorrectionGammaGetMagnitudePhasePairs(self, Channel, ValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChanneslItemCorrectionGammaGetMagnitudePhasePairs(self._vi, Channel, ValBufferSize)

    def ChanneslItemCorrectionSparameterGetMagnitudePhasePairs(self, Channel, SParameter, ValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param SParameter:
        :type SParameter:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChanneslItemCorrectionSparameterGetMagnitudePhasePairs(
            self._vi, Channel, SParameter, ValBufferSize
        )

    def SetStartvalue(self, Channel, FrequencyMode, Value):
        """

        :param Channel:
        :type Channel:
        :param FrequencyMode:
        :type FrequencyMode:
        :param Value:
        :type Value:
        """
        return self._dllwrap.SetStartvalue(self._vi, Channel, FrequencyMode, Value)

    def GetStartValue(self, Channel, FrequencyMode):
        """

        :param Channel:
        :type Channel:
        :param FrequencyMode:
        :type FrequencyMode:
        """
        return self._dllwrap.GetStartValue(self._vi, Channel, FrequencyMode)

    def SetStopValue(self, Channel, FrequencyMode, Value):
        """

        :param Channel:
        :type Channel:
        :param FrequencyMode:
        :type FrequencyMode:
        :param Value:
        :type Value:
        """
        return self._dllwrap.SetStopValue(self._vi, Channel, FrequencyMode, Value)

    def GetStopvalue(self, Channel, FrequencyMode):
        """

        :param Channel:
        :type Channel:
        :param FrequencyMode:
        :type FrequencyMode:
        """
        return self._dllwrap.GetStopvalue(self._vi, Channel, FrequencyMode)

    def SetStepSize(self, Channel, FrequencyMode, Value):
        """

        :param Channel:
        :type Channel:
        :param FrequencyMode:
        :type FrequencyMode:
        :param Value:
        :type Value:
        """
        return self._dllwrap.SetStepSize(self._vi, Channel, FrequencyMode, Value)

    def GetStepSize(self, Channel, FrequencyMode):
        """

        :param Channel:
        :type Channel:
        :param FrequencyMode:
        :type FrequencyMode:
        """
        return self._dllwrap.GetStepSize(self._vi, Channel, FrequencyMode)

    def ChanneslItemStatisticsCCDFGetData(self, Channel, ValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFGetData(self._vi, Channel, ValBufferSize)

    def ChanneslItemStatisticsCCDFGetTable(self, Channel, ValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFGetTable(self._vi, Channel, ValBufferSize)

    def ChanneslItemStatisticsCCDFGetDeltaMarker(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFGetDeltaMarker(self._vi, Channel)

    def ChanneslItemStatisticsCCDFGetMarkerData(self, Channel, MarkerRef):
        """

        :param Channel:
        :type Channel:
        :param MarkerRef:
        :type MarkerRef:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFGetMarkerData(self._vi, Channel, MarkerRef)

    def ChanneslItemStatisticsCCDFGetReferenceTraceData(self, Channel, ValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFGetReferenceTraceData(self._vi, Channel, ValBufferSize)

    def ChanneslItemStatisticsCCDFReferenceTraceEnabled(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFReferenceTraceEnabled(self._vi, Channel)

    def ChanneslItemStatisticsCCDFSaveReferenceTrace(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFSaveReferenceTrace(self._vi, Channel)

    def ChanneslItemStatisticsCCDFGetGaussianMarker(self, Channel, MarkerRef):
        """

        :param Channel:
        :type Channel:
        :param MarkerRef:
        :type MarkerRef:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFGetGaussianMarker(self._vi, Channel, MarkerRef)

    def ChanneslItemStatisticsCCDFSetMarkerX(self, Channel, Power, MarkerRef):
        """

        :param Channel:
        :type Channel:
        :param Power:
        :type Power:
        :param MarkerRef:
        :type MarkerRef:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFSetMarkerX(self._vi, Channel, Power, MarkerRef)

    def ChanneslItemStatisticsCCDFSetMarkerY(self, Channel, Power, MarkerRef):
        """

        :param Channel:
        :type Channel:
        :param Power:
        :type Power:
        :param MarkerRef:
        :type MarkerRef:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFSetMarkerY(self._vi, Channel, Power, MarkerRef)

    def ChanneslItemStatisticsCCDFSetReferenceMarker(self, Channel, MarkerRef):
        """

        :param Channel:
        :type Channel:
        :param MarkerRef:
        :type MarkerRef:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFSetReferenceMarker(self._vi, Channel, MarkerRef)

    def ChanneslItemStatisticsCCDFSetTraceMarker(self, Channel, MarkerRef):
        """

        :param Channel:
        :type Channel:
        :param MarkerRef:
        :type MarkerRef:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFSetTraceMarker(self._vi, Channel, MarkerRef)

    def ChanneslItemStatisticsCCDFConfigureTimeGate(self, Channel, Enabled, Start, Length):
        """

        :param Channel:
        :type Channel:
        :param Enabled:
        :type Enabled:
        :param Start:
        :type Start:
        :param Length:
        :type Length:
        """
        return self._dllwrap.ChanneslItemStatisticsCCDFConfigureTimeGate(self._vi, Channel, Enabled, Start, Length)

    def GetValue(self, Channel, Probability):
        """

        :param Channel:
        :type Channel:
        :param Probability:
        :type Probability:
        """
        return self._dllwrap.GetValue(self._vi, Channel, Probability)

    def GetProbability(self, Channel, Power):
        """

        :param Channel:
        :type Channel:
        :param Power:
        :type Power:
        """
        return self._dllwrap.GetProbability(self._vi, Channel, Power)

    def ChanneslItemTemperatureExternalSetRiseCoefficient(self, Channel, Coef1, Coef2, Coef3, Coef4):
        """

        :param Channel:
        :type Channel:
        :param Coef1:
        :type Coef1:
        :param Coef2:
        :type Coef2:
        :param Coef3:
        :type Coef3:
        :param Coef4:
        :type Coef4:
        """
        return self._dllwrap.ChanneslItemTemperatureExternalSetRiseCoefficient(
            self._vi, Channel, Coef1, Coef2, Coef3, Coef4
        )

    def ChanneslItemTemperatureExternalSetFallCoefficient(self, Channel, Coef1, Coef2, Coef3, Coef4):
        """

        :param Channel:
        :type Channel:
        :param Coef1:
        :type Coef1:
        :param Coef2:
        :type Coef2:
        :param Coef3:
        :type Coef3:
        :param Coef4:
        :type Coef4:
        """
        return self._dllwrap.ChanneslItemTemperatureExternalSetFallCoefficient(
            self._vi, Channel, Coef1, Coef2, Coef3, Coef4
        )

    def ChanneslItemTemperatureExternalGetRiseCoefficient(self, Channel, ValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChanneslItemTemperatureExternalGetRiseCoefficient(self._vi, Channel, ValBufferSize)

    def ChanneslItemTemperatureExternalGetFallCoefficient(self, Channel, ValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChanneslItemTemperatureExternalGetFallCoefficient(self._vi, Channel, ValBufferSize)

    def ChanneslItemTemperatureInternalSetCoefficient(self, Channel, Coef1, Coef2):
        """

        :param Channel:
        :type Channel:
        :param Coef1:
        :type Coef1:
        :param Coef2:
        :type Coef2:
        """
        return self._dllwrap.ChanneslItemTemperatureInternalSetCoefficient(self._vi, Channel, Coef1, Coef2)

    def ChanneslItemTemperatureInternalGetCoefficient(self, Channel, ValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChanneslItemTemperatureInternalGetCoefficient(self._vi, Channel, ValBufferSize)

    def MeasurementsItemGetMeasurementName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.MeasurementsItemGetMeasurementName(self._vi, Index, NameBufferSize)

    def MeasurementsItemConfigure(self, Measurement, Feed1Type, Feed2Type, Feed1Channel, Feed2Channel, Operation):
        """

        :param Measurement:
        :type Measurement:
        :param Feed1Type:
        :type Feed1Type:
        :param Feed2Type:
        :type Feed2Type:
        :param Feed1Channel:
        :type Feed1Channel:
        :param Feed2Channel:
        :type Feed2Channel:
        :param Operation:
        :type Operation:
        """
        return self._dllwrap.MeasurementsItemConfigure(
            self._vi,
            Measurement,
            Feed1Type,
            Feed2Type,
            Feed1Channel,
            Feed2Channel,
            Operation,
        )

    def MeasurementsItemAbort(self):
        """"""
        return self._dllwrap.MeasurementsItemAbort(self._vi)

    def MeasurementsItemInitiate(self):
        """"""
        return self._dllwrap.MeasurementsItemInitiate(self._vi)

    def MeasurementIsOperationComplete(self):
        """"""
        return self._dllwrap.MeasurementIsOperationComplete(self._vi)

    def MeasurementsItemClearLimitFails(self, Measurement):
        """

        :param Measurement:
        :type Measurement:
        """
        return self._dllwrap.MeasurementsItemClearLimitFails(self._vi, Measurement)

    def MeasurementsItemConfigureAnalogOutput(self, Measurement, AnalogOutput, UpperValue, LowerValue):
        """

        :param Measurement:
        :type Measurement:
        :param AnalogOutput:
        :type AnalogOutput:
        :param UpperValue:
        :type UpperValue:
        :param LowerValue:
        :type LowerValue:
        """
        return self._dllwrap.MeasurementsItemConfigureAnalogOutput(
            self._vi, Measurement, AnalogOutput, UpperValue, LowerValue
        )

    def MeasurementsItemConfigureLimits(self, Measurement, Upper, Lower, Enabled, AutoClear):
        """

        :param Measurement:
        :type Measurement:
        :param Upper:
        :type Upper:
        :param Lower:
        :type Lower:
        :param Enabled:
        :type Enabled:
        :param AutoClear:
        :type AutoClear:
        """
        return self._dllwrap.MeasurementsItemConfigureLimits(self._vi, Measurement, Upper, Lower, Enabled, AutoClear)

    def MeasurementsItemConfigureOffset(self, Measurement, Enabled, Value):
        """

        :param Measurement:
        :type Measurement:
        :param Enabled:
        :type Enabled:
        :param Value:
        :type Value:
        """
        return self._dllwrap.MeasurementsItemConfigureOffset(self._vi, Measurement, Enabled, Value)

    def MeasurementsItemConfigureRelative(self, Measurement, Enabled, SetValue):
        """

        :param Measurement:
        :type Measurement:
        :param Enabled:
        :type Enabled:
        :param SetValue:
        :type SetValue:
        """
        return self._dllwrap.MeasurementsItemConfigureRelative(self._vi, Measurement, Enabled, SetValue)

    def MeasurementsItemConfigureTimeGated(
        self,
        Measurement,
        Feed1Gate,
        Feed2Gate,
        Feed1Type,
        Feed2Type,
        Feed1Channel,
        Feed2Channel,
        Operation,
    ):
        """

        :param Measurement:
        :type Measurement:
        :param Feed1Gate:
        :type Feed1Gate:
        :param Feed2Gate:
        :type Feed2Gate:
        :param Feed1Type:
        :type Feed1Type:
        :param Feed2Type:
        :type Feed2Type:
        :param Feed1Channel:
        :type Feed1Channel:
        :param Feed2Channel:
        :type Feed2Channel:
        :param Operation:
        :type Operation:
        """
        return self._dllwrap.MeasurementsItemConfigureTimeGated(
            self._vi,
            Measurement,
            Feed1Gate,
            Feed2Gate,
            Feed1Type,
            Feed2Type,
            Feed1Channel,
            Feed2Channel,
            Operation,
        )

    def MeasurementsItemConfigureTTLOutput(self, Measurement, Output, Limit, Sense):
        """

        :param Measurement:
        :type Measurement:
        :param Output:
        :type Output:
        :param Limit:
        :type Limit:
        :param Sense:
        :type Sense:
        """
        return self._dllwrap.MeasurementsItemConfigureTTLOutput(self._vi, Measurement, Output, Limit, Sense)

    def MeasurementsItemEnableAnalogOutput(self, Measurement, AnalogOutput, Enabled):
        """

        :param Measurement:
        :type Measurement:
        :param AnalogOutput:
        :type AnalogOutput:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.MeasurementsItemEnableAnalogOutput(self._vi, Measurement, AnalogOutput, Enabled)

    def MeasurementsItemEnableTTLOutput(self, Measurement, Enabled, Output):
        """

        :param Measurement:
        :type Measurement:
        :param Enabled:
        :type Enabled:
        :param Output:
        :type Output:
        """
        return self._dllwrap.MeasurementsItemEnableTTLOutput(self._vi, Measurement, Enabled, Output)

    def MeasurementsItemFetch(self, Measurement, MaxTime):
        """

        :param Measurement:
        :type Measurement:
        :param MaxTime:
        :type MaxTime:
        """
        return self._dllwrap.MeasurementsItemFetch(self._vi, Measurement, MaxTime)

    def MeasurementsItemMeasure(self, Measurement, MaxTime):
        """

        :param Measurement:
        :type Measurement:
        :param MaxTime:
        :type MaxTime:
        """
        return self._dllwrap.MeasurementsItemMeasure(self._vi, Measurement, MaxTime)

    def MeasurementsItemRead(self, Measurement, MaxTime):
        """

        :param Measurement:
        :type Measurement:
        :param MaxTime:
        :type MaxTime:
        """
        return self._dllwrap.MeasurementsItemRead(self._vi, Measurement, MaxTime)

    def MeasurementsItemConfigureScalarPower(self, Measurement, MaxTime):
        """

        :param Measurement:
        :type Measurement:
        :param MaxTime:
        :type MaxTime:
        """
        return self._dllwrap.MeasurementsItemConfigureScalarPower(self._vi, Measurement, MaxTime)

    def MeasurementsItemFetchVoltage(self, Measurement, VoltType):
        """

        :param Measurement:
        :type Measurement:
        :param VoltType:
        :type VoltType:
        """
        return self._dllwrap.MeasurementsItemFetchVoltage(self._vi, Measurement, VoltType)

    def MeasurementsItemFetchBuffer(self, Measurement, ValBufferSize):
        """

        :param Measurement:
        :type Measurement:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.MeasurementsItemFetchBuffer(self._vi, Measurement, ValBufferSize)

    def MeasurementsItemReadBuffer(self, Measurement, ValBufferSize):
        """

        :param Measurement:
        :type Measurement:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.MeasurementsItemReadBuffer(self._vi, Measurement, ValBufferSize)

    def ClearPeakHoldValue(self, Measurement):
        """

        :param Measurement:
        :type Measurement:
        """
        return self._dllwrap.ClearPeakHoldValue(self._vi, Measurement)

    def GetTilt(self, Measurement, Index):
        """

        :param Measurement:
        :type Measurement:
        :param Index:
        :type Index:
        """
        return self._dllwrap.GetTilt(self._vi, Measurement, Index)

    def SetMeasurementType(self, Measurement, Mode, Value):
        """

        :param Measurement:
        :type Measurement:
        :param Mode:
        :type Mode:
        :param Value:
        :type Value:
        """
        return self._dllwrap.SetMeasurementType(self._vi, Measurement, Mode, Value)

    def GetMeasurementType(self, Measurement, Mode):
        """

        :param Measurement:
        :type Measurement:
        :param Mode:
        :type Mode:
        """
        return self._dllwrap.GetMeasurementType(self._vi, Measurement, Mode)

    def DisplayConfigure(self, Enabled, Format):
        """

        :param Enabled:
        :type Enabled:
        :param Format:
        :type Format:
        """
        return self._dllwrap.DisplayConfigure(self._vi, Enabled, Format)

    def DisplayWindowGetWindowName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.DisplayWindowGetWindowName(self._vi, Index, NameBufferSize)

    def DisplayWindowConfigure(self, Window, Format, SelectedMeasurement):
        """

        :param Window:
        :type Window:
        :param Format:
        :type Format:
        :param SelectedMeasurement:
        :type SelectedMeasurement:
        """
        return self._dllwrap.DisplayWindowConfigure(self._vi, Window, Format, SelectedMeasurement)

    def DisplayWindowConfigureMeter(self, Window, MeterUpper, MeterLower, SelectedMeasurement):
        """

        :param Window:
        :type Window:
        :param MeterUpper:
        :type MeterUpper:
        :param MeterLower:
        :type MeterLower:
        :param SelectedMeasurement:
        :type SelectedMeasurement:
        """
        return self._dllwrap.DisplayWindowConfigureMeter(self._vi, Window, MeterUpper, MeterLower, SelectedMeasurement)

    def FrequencyOffsetTableConfigure(self, FrequenciesBufferSize, OffsetsBufferSize):
        """

        :param FrequenciesBufferSize:
        :type FrequenciesBufferSize:
        :param OffsetsBufferSize:
        :type OffsetsBufferSize:
        """
        return self._dllwrap.FrequencyOffsetTableConfigure(self._vi, FrequenciesBufferSize, OffsetsBufferSize)

    def FrequencyOffsetTableGetFrequencies(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.FrequencyOffsetTableGetFrequencies(self._vi, ValBufferSize)

    def FrequencyOffsetTableGetOffsets(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.FrequencyOffsetTableGetOffsets(self._vi, ValBufferSize)

    def FrequencyOffsetTableRename(self, OldName, NewName):
        """

        :param OldName:
        :type OldName:
        :param NewName:
        :type NewName:
        """
        return self._dllwrap.FrequencyOffsetTableRename(self._vi, OldName, NewName)

    def FrequencyOffsetTableSetFrequencies(self, ValueBufferSize):
        """

        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.FrequencyOffsetTableSetFrequencies(self._vi, ValueBufferSize)

    def FrequencyOffsetTableSetOffsets(self, ValueBufferSize):
        """

        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.FrequencyOffsetTableSetOffsets(self._vi, ValueBufferSize)

    def FrequencyOffsetTableGetGain(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.FrequencyOffsetTableGetGain(self._vi, ValBufferSize)

    def FrequencyOffsetTableSetGain(self, ValueBufferSize):
        """

        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.FrequencyOffsetTableSetGain(self._vi, ValueBufferSize)

    def GetFreqPoints(self):
        """"""
        return self._dllwrap.GetFreqPoints(self._vi)

    def GetGainPoints(self):
        """"""
        return self._dllwrap.GetGainPoints(self._vi)

    def SelectTable(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.SelectTable(self._vi, Name)

    def GetSelectedTable(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.GetSelectedTable(self._vi, ValBufferSize)

    def SensorCalibrationTableConfigure(self, FrequenciesBufferSize, GainsBufferSize):
        """

        :param FrequenciesBufferSize:
        :type FrequenciesBufferSize:
        :param GainsBufferSize:
        :type GainsBufferSize:
        """
        return self._dllwrap.SensorCalibrationTableConfigure(self._vi, FrequenciesBufferSize, GainsBufferSize)

    def SensorCalibrationTableGetFrequencies(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SensorCalibrationTableGetFrequencies(self._vi, ValBufferSize)

    def SensorCalibrationTableGetOffsets(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SensorCalibrationTableGetOffsets(self._vi, ValBufferSize)

    def SensorCalibrationTableRename(self, OldName, NewName):
        """

        :param OldName:
        :type OldName:
        :param NewName:
        :type NewName:
        """
        return self._dllwrap.SensorCalibrationTableRename(self._vi, OldName, NewName)

    def SensorCalibrationTableSetFrequencies(self, ValueBufferSize):
        """

        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.SensorCalibrationTableSetFrequencies(self._vi, ValueBufferSize)

    def SensorCalibrationTableSetOffsets(self, ValueBufferSize):
        """

        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.SensorCalibrationTableSetOffsets(self._vi, ValueBufferSize)

    def TriggerConfigure(self, AutoLevelEnabled, Delay, HoldOff, Hysteresis, Level, OutputEnabled, Slope):
        """

        :param AutoLevelEnabled:
        :type AutoLevelEnabled:
        :param Delay:
        :type Delay:
        :param HoldOff:
        :type HoldOff:
        :param Hysteresis:
        :type Hysteresis:
        :param Level:
        :type Level:
        :param OutputEnabled:
        :type OutputEnabled:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.TriggerConfigure(
            self._vi,
            AutoLevelEnabled,
            Delay,
            HoldOff,
            Hysteresis,
            Level,
            OutputEnabled,
            Slope,
        )

    def MemoryAssignName(self, RegisterName, RegisterNo):
        """

        :param RegisterName:
        :type RegisterName:
        :param RegisterNo:
        :type RegisterNo:
        """
        return self._dllwrap.MemoryAssignName(self._vi, RegisterName, RegisterNo)

    def MemoryGetFreeMemory(self, CatalogType, ValBufferSize):
        """

        :param CatalogType:
        :type CatalogType:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.MemoryGetFreeMemory(self._vi, CatalogType, ValBufferSize)

    def MemoryGetRegisterNumber(self, RegisterName):
        """

        :param RegisterName:
        :type RegisterName:
        """
        return self._dllwrap.MemoryGetRegisterNumber(self._vi, RegisterName)

    def MemoryClearContents(self, RegisterName):
        """

        :param RegisterName:
        :type RegisterName:
        """
        return self._dllwrap.MemoryClearContents(self._vi, RegisterName)

    def MemoryClearTableContents(self, Device):
        """

        :param Device:
        :type Device:
        """
        return self._dllwrap.MemoryClearTableContents(self._vi, Device)

    def MemoryGetGammaTableMagnitudePhasePairsCount(self):
        """"""
        return self._dllwrap.MemoryGetGammaTableMagnitudePhasePairsCount(self._vi)

    def MemoryGetSParameterTypeMagnitudePhasePairsCount(self, SParameter):
        """

        :param SParameter:
        :type SParameter:
        """
        return self._dllwrap.MemoryGetSParameterTypeMagnitudePhasePairsCount(self._vi, SParameter)

    def MemoryGetSParameterTypeMagnitudePhasePairs(self, SParameter, ValBufferSize):
        """

        :param SParameter:
        :type SParameter:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.MemoryGetSParameterTypeMagnitudePhasePairs(self._vi, SParameter, ValBufferSize)

    def MemoryGetGammaTableMagnitudePhasePairs(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.MemoryGetGammaTableMagnitudePhasePairs(self._vi, ValBufferSize)

    def MemorySetGammaTableMagnitudePhasePairs(self, ValueBufferSize):
        """

        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.MemorySetGammaTableMagnitudePhasePairs(self._vi, ValueBufferSize)

    def MemorySetSParameterTypeMagnitudePhasePairs(self, SParameter, ValueBufferSize):
        """

        :param SParameter:
        :type SParameter:
        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.MemorySetSParameterTypeMagnitudePhasePairs(self._vi, SParameter, ValueBufferSize)

    def GetSaveRecallRegisterList(self, Device, ValBufferSize):
        """

        :param Device:
        :type Device:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.GetSaveRecallRegisterList(self._vi, Device, ValBufferSize)

    def GetSaveRecallRegisterAvailable(self, Device):
        """

        :param Device:
        :type Device:
        """
        return self._dllwrap.GetSaveRecallRegisterAvailable(self._vi, Device)

    def ServiceGetAverageZero(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ServiceGetAverageZero(self._vi, ValBufferSize)

    def ServiceGetZeroOffset(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ServiceGetZeroOffset(self._vi, ValBufferSize)

    def ServiceSetZero(self):
        """"""
        return self._dllwrap.ServiceSetZero(self._vi)

    def ServiceBISTGetLinearityTestError(self):
        """"""
        return self._dllwrap.ServiceBISTGetLinearityTestError(self._vi)

    def ServiceBISTLinearityTest(self):
        """"""
        return self._dllwrap.ServiceBISTLinearityTest(self._vi)

    def GetTestVoltage(self, Mode):
        """

        :param Mode:
        :type Mode:
        """
        return self._dllwrap.GetTestVoltage(self._vi, Mode)

    def InitiateVoltageTest(self, Mode, ValBufferSize):
        """

        :param Mode:
        :type Mode:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.InitiateVoltageTest(self._vi, Mode, ValBufferSize)

    def GetVoltageTestUpperLimit(self, Mode):
        """

        :param Mode:
        :type Mode:
        """
        return self._dllwrap.GetVoltageTestUpperLimit(self._vi, Mode)

    def GetVoltageTestLowerLimit(self, Mode):
        """

        :param Mode:
        :type Mode:
        """
        return self._dllwrap.GetVoltageTestLowerLimit(self._vi, Mode)

    def ServiceFirmwareEraseMemory(self):
        """"""
        return self._dllwrap.ServiceFirmwareEraseMemory(self._vi)

    def ServiceFirmwareClearMemory(self):
        """"""
        return self._dllwrap.ServiceFirmwareClearMemory(self._vi)

    def ServiceFirmwareClearError(self):
        """"""
        return self._dllwrap.ServiceFirmwareClearError(self._vi)

    def ServiceFirmwareGetError(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ServiceFirmwareGetError(self._vi, ValBufferSize)

    def ServiceFirmwareFlashUpdate(self):
        """"""
        return self._dllwrap.ServiceFirmwareFlashUpdate(self._vi)

    def ServiceADCGetStdDev(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ServiceADCGetStdDev(self._vi, ValBufferSize)

    def ServiceADCGetADCData1(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ServiceADCGetADCData1(self._vi, ValBufferSize)

    def ServiceADCGetADCData(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ServiceADCGetADCData(self._vi, ValBufferSize)

    def ServiceADCGetUncorrectedAvg(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ServiceADCGetUncorrectedAvg(self._vi, ValBufferSize)

    def ServiceADCGetRawZeroAvgOffset(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ServiceADCGetRawZeroAvgOffset(self._vi, ValBufferSize)

    def ServiceADCGetAverageAll(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ServiceADCGetAverageAll(self._vi, ValBufferSize)

    def ServiceADCStartADC(self):
        """"""
        return self._dllwrap.ServiceADCStartADC(self._vi)

    def ConfigureAveragingAutoEnabled(self, Channel, AveragingAutoEnabled):
        """

        :param Channel:
        :type Channel:
        :param AveragingAutoEnabled:
        :type AveragingAutoEnabled:
        """
        return self._dllwrap.ConfigureAveragingAutoEnabled(self._vi, Channel, AveragingAutoEnabled)

    def ConfigureCorrectionFrequency(self, Channel, CorrectionFrequency):
        """

        :param Channel:
        :type Channel:
        :param CorrectionFrequency:
        :type CorrectionFrequency:
        """
        return self._dllwrap.ConfigureCorrectionFrequency(self._vi, Channel, CorrectionFrequency)

    def ConfigureOffset(self, Channel, Offset):
        """

        :param Channel:
        :type Channel:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ConfigureOffset(self._vi, Channel, Offset)

    def ConfigureRangeAutoEnabled(self, Channel, RangeAutoEnabled):
        """

        :param Channel:
        :type Channel:
        :param RangeAutoEnabled:
        :type RangeAutoEnabled:
        """
        return self._dllwrap.ConfigureRangeAutoEnabled(self._vi, Channel, RangeAutoEnabled)

    def ConfigureUnits(self, Units):
        """

        :param Units:
        :type Units:
        """
        return self._dllwrap.ConfigureUnits(self._vi, Units)

    def ConfigureMeasurement(self, Operator, Operand1, Operand2):
        """

        :param Operator:
        :type Operator:
        :param Operand1:
        :type Operand1:
        :param Operand2:
        :type Operand2:
        """
        return self._dllwrap.ConfigureMeasurement(self._vi, Operator, Operand1, Operand2)

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def ConfigureChannelEnabled(self, Channel, ChannelEnabled):
        """

        :param Channel:
        :type Channel:
        :param ChannelEnabled:
        :type ChannelEnabled:
        """
        return self._dllwrap.ConfigureChannelEnabled(self._vi, Channel, ChannelEnabled)

    def ConfigureTriggerSource(self, TriggerSource):
        """

        :param TriggerSource:
        :type TriggerSource:
        """
        return self._dllwrap.ConfigureTriggerSource(self._vi, TriggerSource)

    def ConfigureInternalTriggerLevel(self, TriggerLevel):
        """

        :param TriggerLevel:
        :type TriggerLevel:
        """
        return self._dllwrap.ConfigureInternalTriggerLevel(self._vi, TriggerLevel)

    def ConfigureInternalTrigger(self, EventSource, Slope):
        """

        :param EventSource:
        :type EventSource:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.ConfigureInternalTrigger(self._vi, EventSource, Slope)

    def ConfigureAveragingCount(self, Channel, Count):
        """

        :param Channel:
        :type Channel:
        :param Count:
        :type Count:
        """
        return self._dllwrap.ConfigureAveragingCount(self._vi, Channel, Count)

    def ConfigureRefOscillatorEnabled(self, RefOscillatorEnabled):
        """

        :param RefOscillatorEnabled:
        :type RefOscillatorEnabled:
        """
        return self._dllwrap.ConfigureRefOscillatorEnabled(self._vi, RefOscillatorEnabled)

    def ConfigureRefOscillator(self, Frequency, Level):
        """

        :param Frequency:
        :type Frequency:
        :param Level:
        :type Level:
        """
        return self._dllwrap.ConfigureRefOscillator(self._vi, Frequency, Level)

    def ConfigureRange(self, Channel, RangeLower, RangeUpper):
        """

        :param Channel:
        :type Channel:
        :param RangeLower:
        :type RangeLower:
        :param RangeUpper:
        :type RangeUpper:
        """
        return self._dllwrap.ConfigureRange(self._vi, Channel, RangeLower, RangeUpper)

    def Calibrate(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.Calibrate(self._vi, Channel)

    def IsCalibrationComplete(self):
        """"""
        return self._dllwrap.IsCalibrationComplete(self._vi)

    def Zero(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.Zero(self._vi, Channel)

    def IsZeroComplete(self):
        """"""
        return self._dllwrap.IsZeroComplete(self._vi)

    def ZeroAllChannels(self):
        """"""
        return self._dllwrap.ZeroAllChannels(self._vi)

    def ConfigureDutyCycleCorrection(self, Channel, CorrectionEnabled, Correction):
        """

        :param Channel:
        :type Channel:
        :param CorrectionEnabled:
        :type CorrectionEnabled:
        :param Correction:
        :type Correction:
        """
        return self._dllwrap.ConfigureDutyCycleCorrection(self._vi, Channel, CorrectionEnabled, Correction)

    def Read(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Read(self._vi, MaxTimeMilliseconds)

    def ReadChannel(self, Channel, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadChannel(self._vi, Channel, MaxTimeMilliseconds)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def Fetch(self):
        """"""
        return self._dllwrap.Fetch(self._vi)

    def FetchChannel(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.FetchChannel(self._vi, Channel)

    def Initiate(self):
        """"""
        return self._dllwrap.Initiate(self._vi)

    def IsMeasurementComplete(self):
        """"""
        return self._dllwrap.IsMeasurementComplete(self._vi)

    def QueryResultRangeType(self, MeasurementValue):
        """

        :param MeasurementValue:
        :type MeasurementValue:
        """
        return self._dllwrap.QueryResultRangeType(self._vi, MeasurementValue)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)
