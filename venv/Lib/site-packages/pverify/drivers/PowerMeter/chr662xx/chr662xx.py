from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .chr662xx_dllwrap import *


class chr662xx(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = chr662xx_dllwrap()
        self._vi: int = None
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self) -> bool:
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self) -> str:
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName: str, IdQuery: bool, Reset: bool, OptionString: str = ""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :param Reset: Specifies whether to reset the instrument.
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def GetNextInterchangeWarning(self, bufferSize: int) -> str:
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def init(self, resourceName: str, IDQuery: bool, resetDevice: bool) -> int:
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def GetNextCoercionRecord(self, bufferSize: int) -> str:
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def LockSession(self) -> bool:
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self) -> bool:
        return self._dllwrap.UnlockSession(self._vi)

    def error_query(self) -> tuple[int, str]:
        return self._dllwrap.error_query(self._vi)

    def ResetWithDefaults(self):
        return self._dllwrap.ResetWithDefaults(self._vi)

    def InvalidateAllAttributes(self):
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def Disable(self):
        return self._dllwrap.Disable(self._vi)

    def GetErrorInfo(self) -> tuple[int, int, str]:
        return self._dllwrap.GetErrorInfo(self._vi)

    def ClearError(self):
        return self._dllwrap.ClearError(self._vi)

    def ClearErrorInfo(self):
        return self._dllwrap.ClearErrorInfo(self._vi)

    def GetError(self, bufferSize: int) -> tuple[int, str]:
        return self._dllwrap.GetError(self._vi, bufferSize)

    def error_message(self, errorCode: int) -> str:
        return self._dllwrap.error_message(self._vi, errorCode)

    def MeasureVoltage(self, measureFetch: bool, type: int) -> float:
        return self._dllwrap.MeasureVoltage(self._vi, measureFetch, type)

    def MeasureCurrent(self, measureFetch: bool, type: int) -> float:
        return self._dllwrap.MeasureCurrent(self._vi, measureFetch, type)

    def MeasurePower(self, measureFetch: bool, type: int) -> float:
        return self._dllwrap.MeasurePower(self._vi, measureFetch, type)

    def MeasureFreq(self, measureFetch: bool) -> float:
        return self._dllwrap.MeasureFreq(self._vi, measureFetch)

    def SetCurrentShunt(self, shuntRange: int):
        return self._dllwrap.SetCurrentShunt(self._vi, shuntRange)

    def SetCurrentRange(self, currentRange: int):
        return self._dllwrap.SetCurrentRange(self._vi, currentRange)

    def SetInrush(self, level: int, time: int, delay: int):
        return self._dllwrap.SetInrush(self._vi, level, time, delay)

    def SetVoltageRange(self, voltageRange: int):
        return self._dllwrap.SetVoltageRange(self._vi, voltageRange)

    def SetPowerIntegrate(self, powerIntegrate: int):
        return self._dllwrap.SetPowerIntegrate(self._vi, powerIntegrate)

    def SetFilter(self, filter: bool):
        return self._dllwrap.SetFilter(self._vi, filter)

    def SetMeasMode(self, measureMode: bool, windowTime: float, average: int):
        return self._dllwrap.SetMeasMode(self._vi, measureMode, windowTime, average)

    def SetEnergy(self, Mode: bool, Time: int):
        return self._dllwrap.SetEnergy(self._vi, Mode, Time)

    def SetTHD(self, THDMode: bool, order: int):
        return self._dllwrap.SetTHD(self._vi, THDMode, order)

    def ClearProtection(self):
        return self._dllwrap.ClearProtection(self._vi)

    def AutoCalib(self):
        return self._dllwrap.AutoCalib(self._vi)

    def SetTrigger(self, trigger: bool):
        return self._dllwrap.SetTrigger(self._vi, trigger)

    def SetTriggerMode(self, mode: int):
        return self._dllwrap.SetTriggerMode(self._vi, mode)

    def QueryTriggerState(self) -> str:
        return self._dllwrap.QueryTriggerState(self._vi)

    def WaveCap(self):
        return self._dllwrap.WaveCap(self._vi)

    def GetWave(self, waveform: bool) -> tuple[list[float], int]:
        return self._dllwrap.GetWave(self._vi, waveform)

    def SetComparator(self, comparator: bool, comparatorTime: int):
        return self._dllwrap.SetComparator(self._vi, comparator, comparatorTime)

    def QueryComparatorResult(self) -> str:
        return self._dllwrap.QueryComparatorResult(self._vi)

    def QueryComparatorFailItem(self) -> str:
        return self._dllwrap.QueryComparatorFailItem(self._vi)

    def SetComparatorItem(self, comparatorItemFlag: int):
        return self._dllwrap.SetComparatorItem(self._vi, comparatorItemFlag)

    def QueryComparatorItem(self) -> str:
        return self._dllwrap.QueryComparatorItem(self._vi)

    def SetCompLimVolt(
        self,
        vLOW: float,
        vHIGH: float,
        VPK_P_LOW: float,
        VPK_P_HIGH: float,
        VPK_M_LOW: float,
        VPK_M_HIGH: float,
        v_THDLOW: float,
        v_THDHIGH: float,
    ):
        return self._dllwrap.SetCompLimVolt(
            self._vi, vLOW, vHIGH, VPK_P_LOW, VPK_P_HIGH, VPK_M_LOW, VPK_M_HIGH, v_THDLOW, v_THDHIGH
        )

    def SetCompLimPower(
        self,
        wLOW: float,
        wHIGH: float,
        PFLOW: float,
        PFHIGH: float,
        VALOW: float,
        VAHIGH: float,
        VARLOW: float,
        VARHIGH: float,
        ENERGYLOW: int,
        ENERGYHIGH: int,
    ):
        return self._dllwrap.SetCompLimPower(
            self._vi, wLOW, wHIGH, PFLOW, PFHIGH, VALOW, VAHIGH, VARLOW, VARHIGH, ENERGYLOW, ENERGYHIGH
        )

    def SetCompLimFreq(self, FREQUENCYLOW: int, FREQUENCYHIGH: int):
        return self._dllwrap.SetCompLimFreq(self._vi, FREQUENCYLOW, FREQUENCYHIGH)

    def SetCompLimCurr(
        self,
        iLOW: float,
        iHIGH: float,
        IPK_P_LOW: float,
        IPK_P_HIGH: float,
        IPK_M_LOW: float,
        IPK_M_HIGH: float,
        ISLOW: float,
        ISHIGH: float,
        CFLOW: float,
        CFHIGH: float,
        i_THDLOW: float,
        i_THDHIGH: float,
    ):
        return self._dllwrap.SetCompLimCurr(
            self._vi,
            iLOW,
            iHIGH,
            IPK_P_LOW,
            IPK_P_HIGH,
            IPK_M_LOW,
            IPK_M_HIGH,
            ISLOW,
            ISHIGH,
            CFLOW,
            CFHIGH,
            i_THDLOW,
            i_THDHIGH,
        )

    def SetCLS(self):
        return self._dllwrap.SetCLS(self._vi)

    def SetESE(self, enableRegister: int):
        return self._dllwrap.SetESE(self._vi, enableRegister)

    def MeasureVoltHarm(self, measureFetch: bool, type: bool) -> str:
        return self._dllwrap.MeasureVoltHarm(self._vi, measureFetch, type)

    def MeasureCurrHarm(self, measureFetch: bool, type: bool) -> str:
        return self._dllwrap.MeasureCurrHarm(self._vi, measureFetch, type)

    def QueryESR(self) -> int:
        return self._dllwrap.QueryESR(self._vi)

    def SetSRE(self, enableRegister: int):
        return self._dllwrap.SetSRE(self._vi, enableRegister)

    def QuerySTB(self) -> int:
        return self._dllwrap.QuerySTB(self._vi)

    def QueryTST(self) -> int:
        return self._dllwrap.QueryTST(self._vi)

    def Save(self):
        return self._dllwrap.Save(self._vi)

    def QueryOperStatusRegister(self) -> int:
        return self._dllwrap.QueryOperStatusRegister(self._vi)

    def SetOperStatusEnableReg(self, operatonStatusEnableRegister: int):
        return self._dllwrap.SetOperStatusEnableReg(self._vi, operatonStatusEnableRegister)

    def QueryQuestEventReg(self) -> int:
        return self._dllwrap.QueryQuestEventReg(self._vi)

    def QueryQuestCondReg(self) -> int:
        return self._dllwrap.QueryQuestCondReg(self._vi)

    def SetQuestEnableReg(self, questionableEnableRegister: int):
        return self._dllwrap.SetQuestEnableReg(self._vi, questionableEnableRegister)

    def SetQuestNTRReg(self, questionableNTRRegister: int):
        return self._dllwrap.SetQuestNTRReg(self._vi, questionableNTRRegister)

    def SetQuestPTRReg(self, questionablePTRRegister: int):
        return self._dllwrap.SetQuestPTRReg(self._vi, questionablePTRRegister)

    def PresetStatus(self):
        return self._dllwrap.PresetStatus(self._vi)

    def MeasureAll(self, measureFetch: bool) -> str:
        return self._dllwrap.MeasureAll(self._vi, measureFetch)

    def reset(self):
        return self._dllwrap.reset(self._vi)

    def self_test(self) -> tuple[int, str]:
        return self._dllwrap.self_test(self._vi)

    def revision_query(self) -> tuple[str, str]:
        return self._dllwrap.revision_query(self._vi)

    def WriteInstrData(self, writeBuffer: str):
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes: int) -> tuple[str, int]:
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def GetAttributeViInt32(self, channelName: str, attribute: int) -> int:
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName: str, attribute: int) -> float:
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName: str, attribute: int, bufSize: int) -> str:
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName: str, attribute: int) -> int:
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName: str, attribute: int) -> bool:
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetAttributeViInt32(self, channelName: str, attribute: int, value: int):
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName: str, attribute: int, value: float):
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName: str, attribute: int, value: str):
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName: str, attribute: int, value: int):
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName: str, attribute: int, value: bool):
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName: str, attribute: int, value: int):
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName: str, attribute: int, value: float):
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName: str, attribute: int, value: str):
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName: str, attribute: int, value: int):
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName: str, attribute: int, value: bool):
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)

    def IviInit(self, resourceName: str, IDQuery: bool, reset: bool, vi: int):
        return self._dllwrap.IviInit(resourceName, IDQuery, reset, vi)

    def IviClose(self):
        return self._dllwrap.IviClose(self._vi)
