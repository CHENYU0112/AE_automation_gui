from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.visatype import (
    ARRAY_float,
    ARRAY_ViChar,
    ViAttr,
    ViBoolean,
    ViConstString,
    ViInt16,
    ViInt32,
    ViReal64,
    ViRsrc,
    ViSession,
    ViStatus,
    ViString,
)
from pverify.core.lab.ivi.helper import InstrumentError, InstrumentWarning, decode, load_dll
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import chr662xx_const as const


class chr662xx_dllwrap(IVICDriverWrapper):
    BUFSIZE = 1024

    def __init__(self):
        super().__init__()
        self._dll = load_dll("chr66200_32.dll", "chr66200_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "chr662xx"

    @property
    def const(self):
        return const

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(bufferSize)
        _status = self.dll.chr66200_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        _status = self.dll.chr66200_ResetInterchangeCheck(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearInterchangeWarnings(self, vi):
        _status = self.dll.chr66200_ClearInterchangeWarnings(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        _status = self.dll.chr66200_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        _status = self.dll.chr66200_InitWithOptions(
            ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), ViString(optionString), byref(newVi)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(newVi.value)

    def close(self, vi):
        _status = self.dll.chr66200_close(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(bufferSize)
        _status = self.dll.chr66200_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.chr66200_LockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.chr66200_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr66200_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def ResetWithDefaults(self, vi):
        _status = self.dll.chr66200_ResetWithDefaults(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InvalidateAllAttributes(self, vi):
        _status = self.dll.chr66200_InvalidateAllAttributes(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Disable(self, vi):
        _status = self.dll.chr66200_Disable(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetErrorInfo(self, vi):
        primaryError = ViStatus()
        secondaryError = ViStatus()
        errorElaboration = ARRAY_ViChar(256)
        _status = self.dll.chr66200_GetErrorInfo(
            ViSession(vi), byref(primaryError), byref(secondaryError), errorElaboration
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorElaboration = decode(errorElaboration)
        return primaryError, secondaryError, errorElaboration

    def ClearError(self, vi):
        _status = self.dll.chr66200_ClearError(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearErrorInfo(self, vi):
        _status = self.dll.chr66200_ClearErrorInfo(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetError(self, vi, bufferSize):
        errorCode = ViStatus()
        description = ARRAY_ViChar(bufferSize)
        _status = self.dll.chr66200_GetError(ViSession(vi), byref(errorCode), ViInt32(bufferSize), description)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        description = decode(description)
        return errorCode, description

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        _status = self.dll.chr66200_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(errorMessage)

    def MeasureVoltage(self, vi, measureFetch, type):
        readValue = ViReal64()
        _status = self.dll.chr66200_MeasureVoltage(
            ViSession(vi), ViBoolean(measureFetch), ViInt32(type), byref(readValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(readValue.value)

    def MeasureCurrent(self, vi, measureFetch, type):
        readValue = ViReal64()
        _status = self.dll.chr66200_MeasureCurrent(
            ViSession(vi), ViBoolean(measureFetch), ViInt32(type), byref(readValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(readValue.value)

    def MeasurePower(self, vi, measureFetch, type):
        readValue = ViReal64()
        _status = self.dll.chr66200_MeasurePower(
            ViSession(vi), ViBoolean(measureFetch), ViInt32(type), byref(readValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(readValue.value)

    def MeasureFreq(self, vi, measureFetch):
        readValue = ViReal64()
        _status = self.dll.chr66200_MeasureFreq(ViSession(vi), ViBoolean(measureFetch), byref(readValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(readValue.value)

    def SetCurrentShunt(self, vi, shuntRange):
        _status = self.dll.chr66200_SetCurrentShunt(ViSession(vi), ViInt32(shuntRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCurrentRange(self, vi, currentRange):
        _status = self.dll.chr66200_SetCurrentRange(ViSession(vi), ViInt32(currentRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetInrush(self, vi, level, time, delay):
        _status = self.dll.chr66200_SetInrush(ViSession(vi), ViInt32(level), ViInt32(time), ViInt32(delay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetVoltageRange(self, vi, voltageRange):
        _status = self.dll.chr66200_SetVoltageRange(ViSession(vi), ViInt32(voltageRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetPowerIntegrate(self, vi, powerIntegrate):
        _status = self.dll.chr66200_SetPowerIntegrate(ViSession(vi), ViInt32(powerIntegrate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetFilter(self, vi, filter):
        _status = self.dll.chr66200_SetFilter(ViSession(vi), ViBoolean(filter))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetMeasMode(self, vi, measureMode, windowTime, average):
        _status = self.dll.chr66200_SetMeasMode(
            ViSession(vi), ViBoolean(measureMode), ViReal64(windowTime), ViInt32(average)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetEnergy(self, vi, Mode, Time):
        _status = self.dll.chr66200_SetEnergy(ViSession(vi), ViBoolean(Mode), ViInt32(Time))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetTHD(self, vi, THDMode, order):
        _status = self.dll.chr66200_SetTHD(ViSession(vi), ViBoolean(THDMode), ViInt32(order))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearProtection(self, vi):
        _status = self.dll.chr66200_ClearProtection(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutoCalib(self, vi):
        _status = self.dll.chr66200_AutoCalib(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetTrigger(self, vi, trigger):
        _status = self.dll.chr66200_SetTrigger(ViSession(vi), ViBoolean(trigger))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetTriggerMode(self, vi, mode):
        _status = self.dll.chr66200_SetTriggerMode(ViSession(vi), ViInt32(mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryTriggerState(self, vi):
        state = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr66200_QueryTriggerState(ViSession(vi), state)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(state)

    def WaveCap(self, vi):
        _status = self.dll.chr66200_WaveCap(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetWave(self, vi, waveform):
        # according to the description of ``[SOURce:]WAVeform:DATA?`` in the manual,
        # the returned waveform consists of 2048 float32 values.
        returnedData = ARRAY_float(2048)
        returnedCount = ViInt32()
        _status = self.dll.chr66200_GetWave(ViSession(vi), ViBoolean(waveform), returnedData, byref(returnedCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedData = list(returnedData)
        returnedCount = int(returnedCount.value)
        return returnedData, returnedCount

    def SetComparator(self, vi, comparator, comparatorTime):
        _status = self.dll.chr66200_SetComparator(ViSession(vi), ViBoolean(comparator), ViInt32(comparatorTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryComparatorResult(self, vi):
        result = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr66200_QueryComparatorResult(ViSession(vi), result)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(result)

    def QueryComparatorFailItem(self, vi):
        failItem = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr66200_QueryComparatorFailItem(ViSession(vi), failItem)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(failItem)

    def SetComparatorItem(self, vi, comparatorItemFlag):
        _status = self.dll.chr66200_SetComparatorItem(ViSession(vi), ViInt32(comparatorItemFlag))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryComparatorItem(self, vi):
        comparatorItem = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr66200_QueryComparatorItem(ViSession(vi), comparatorItem)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(comparatorItem)

    def SetCompLimVolt(self, vi, vLOW, vHIGH, VPK_P_LOW, VPK_P_HIGH, VPK_M_LOW, VPK_M_HIGH, v_THDLOW, v_THDHIGH):
        _status = self.dll.chr66200_SetCompLimVolt(
            ViSession(vi),
            ViReal64(vLOW),
            ViReal64(vHIGH),
            ViReal64(VPK_P_LOW),
            ViReal64(VPK_P_HIGH),
            ViReal64(VPK_M_LOW),
            ViReal64(VPK_M_HIGH),
            ViReal64(v_THDLOW),
            ViReal64(v_THDHIGH),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCompLimPower(self, vi, wLOW, wHIGH, PFLOW, PFHIGH, VALOW, VAHIGH, VARLOW, VARHIGH, ENERGYLOW, ENERGYHIGH):
        _status = self.dll.chr66200_SetCompLimPower(
            ViSession(vi),
            ViReal64(wLOW),
            ViReal64(wHIGH),
            ViReal64(PFLOW),
            ViReal64(PFHIGH),
            ViReal64(VALOW),
            ViReal64(VAHIGH),
            ViReal64(VARLOW),
            ViReal64(VARHIGH),
            ViInt32(ENERGYLOW),
            ViInt32(ENERGYHIGH),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCompLimFreq(self, vi, FREQUENCYLOW, FREQUENCYHIGH):
        _status = self.dll.chr66200_SetCompLimFreq(ViSession(vi), ViInt32(FREQUENCYLOW), ViInt32(FREQUENCYHIGH))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCompLimCurr(
        self,
        vi,
        iLOW,
        iHIGH,
        IPK_P_LOW,
        IPK_P_HIGH,
        IPK_M_LOW,
        IPK_M_HIGH,
        ISLOW,
        ISHIGH,
        CFLOW,
        CFHIGH,
        i_THDLOW,
        i_THDHIGH,
    ):
        _status = self.dll.chr66200_SetCompLimCurr(
            ViSession(vi),
            ViReal64(iLOW),
            ViReal64(iHIGH),
            ViReal64(IPK_P_LOW),
            ViReal64(IPK_P_HIGH),
            ViReal64(IPK_M_LOW),
            ViReal64(IPK_M_HIGH),
            ViReal64(ISLOW),
            ViReal64(ISHIGH),
            ViReal64(CFLOW),
            ViReal64(CFHIGH),
            ViReal64(i_THDLOW),
            ViReal64(i_THDHIGH),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCLS(self, vi):
        _status = self.dll.chr66200_SetCLS(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetESE(self, vi, enableRegister):
        _status = self.dll.chr66200_SetESE(ViSession(vi), ViInt32(enableRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MeasureVoltHarm(self, vi, measureFetch, type):
        returnedData = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr66200_MeasureVoltHarm(
            ViSession(vi), ViBoolean(measureFetch), ViBoolean(type), returnedData
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(returnedData)

    def MeasureCurrHarm(self, vi, measureFetch, type):
        returnedData = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr66200_MeasureCurrHarm(
            ViSession(vi), ViBoolean(measureFetch), ViBoolean(type), returnedData
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(returnedData)

    def QueryESR(self, vi):
        statusRegister = ViInt32()
        _status = self.dll.chr66200_QueryESR(ViSession(vi), byref(statusRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(statusRegister.value)

    def SetSRE(self, vi, enableRegister):
        _status = self.dll.chr66200_SetSRE(ViSession(vi), ViInt32(enableRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySTB(self, vi):
        statusByte = ViInt32()
        _status = self.dll.chr66200_QuerySTB(ViSession(vi), byref(statusByte))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(statusByte.value)

    def QueryTST(self, vi):
        self_test_result = ViInt32()
        _status = self.dll.chr66200_QueryTST(ViSession(vi), byref(self_test_result))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(self_test_result.value)

    def Save(self, vi):
        _status = self.dll.chr66200_Save(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryOperStatusRegister(self, vi):
        operationStatusRegister = ViInt32()
        _status = self.dll.chr66200_QueryOperStatusRegister(ViSession(vi), byref(operationStatusRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(operationStatusRegister.value)

    def SetOperStatusEnableReg(self, vi, operatonStatusEnableRegister):
        _status = self.dll.chr66200_SetOperStatusEnableReg(ViSession(vi), ViInt32(operatonStatusEnableRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryQuestEventReg(self, vi):
        questionableEventRegister = ViInt32()
        _status = self.dll.chr66200_QueryQuestEventReg(ViSession(vi), byref(questionableEventRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(questionableEventRegister.value)

    def QueryQuestCondReg(self, vi):
        questionableConditionRegister = ViInt32()
        _status = self.dll.chr66200_QueryQuestCondReg(ViSession(vi), byref(questionableConditionRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(questionableConditionRegister.value)

    def SetQuestEnableReg(self, vi, questionableEnableRegister):
        _status = self.dll.chr66200_SetQuestEnableReg(ViSession(vi), ViInt32(questionableEnableRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetQuestNTRReg(self, vi, questionableNTRRegister):
        _status = self.dll.chr66200_SetQuestNTRReg(ViSession(vi), ViInt32(questionableNTRRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetQuestPTRReg(self, vi, questionablePTRRegister):
        _status = self.dll.chr66200_SetQuestPTRReg(ViSession(vi), ViInt32(questionablePTRRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PresetStatus(self, vi):
        _status = self.dll.chr66200_PresetStatus(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MeasureAll(self, vi, measureFetch):
        returnedData = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr66200_MeasureAll(ViSession(vi), ViBoolean(measureFetch), returnedData)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(returnedData)

    def reset(self, vi):
        _status = self.dll.chr66200_reset(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr66200_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(self.BUFSIZE)
        firmwareRevision = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr66200_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def WriteInstrData(self, vi, writeBuffer):
        _status = self.dll.chr66200_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(self.BUFSIZE)
        bytesRead = ViInt32()
        _status = self.dll.chr66200_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        _status = self.dll.chr66200_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        _status = self.dll.chr66200_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(bufSize)
        _status = self.dll.chr66200_GetAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(bufSize), value
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        _status = self.dll.chr66200_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        _status = self.dll.chr66200_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.chr66200_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.chr66200_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.chr66200_SetAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViConstString(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.chr66200_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.chr66200_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.chr66200_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.chr66200_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.chr66200_CheckAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViConstString(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.chr66200_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.chr66200_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IviInit(self, resourceName, IDQuery, reset, vi):
        _status = self.dll.chr66200_IviInit(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(reset), ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IviClose(self, vi):
        _status = self.dll.chr66200_IviClose(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
