{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Init"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import sys\n",
    "import os\n",
    "import pandas as pd\n",
    "import math\n",
    "from time import sleep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "import logging\n",
    "logging.basicConfig(stream=sys.stdout, level=logging.INFO,\n",
    "                    format=\"[%(name)s:%(levelname)-8s] -> %(message)s\")\n",
    "logger = logging.getLogger()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "pvpath = r\"C:\\UserData\\PycharmProjects\\pycat\\trunk\"\n",
    "if os.path.exists(pvpath):\n",
    "    sys.path.insert(0, pvpath)\n",
    "import pycat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "from instruments.thermal.tsr2252 import tsr2252"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo = tsr2252(logger=logger)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo._statecache #before the initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo.Initialize(\"GPIB0::4::INSTR\", 1, 1,\"\")   #gpib\n",
    "#thermo.Initialize(\"ASRL5::INSTR\", 1, \"\")      #usb\n",
    "#thermo.Initialize(\"ASRL8::INSTR\", 1, \"\")       #serial\n",
    "#thermo.Initialize(\"TCPIP0::192.168.0.63::3456::SOCKET\", 1, 1, \"simulate=True\")\n",
    "#thermo.Initialize(\"TCPIP0::192.168.0.63::3456::SOCKET\", 1, 1, \"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo._statecache #statecache after the initialization with the actual state of the machine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "logger.info(thermo)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Identity Feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "logger.info(\"IDN:     \" + thermo.Identity.Identifier)\n",
    "logger.info(\"FW REV:  \" + thermo.Identity.InstrumentFirmwareRevision)\n",
    "logger.info(\"DRV REV: \" + thermo.Identity.Revision)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Temperature Logger"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "logpath = r\"C:\\temp\\templog.csv\"\n",
    "thermo.Templogger.config(logpath, 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo.Templogger.start()\n",
    "sleep(1)\n",
    "thermo.Templogger.pause()\n",
    "sleep(0.5)\n",
    "thermo.Templogger.start()\n",
    "sleep(1)\n",
    "thermo.Templogger.stop()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo.Templogger.as_dataframe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "df = thermo.Templogger.as_dataframe()\n",
    "df.plot(style=dict(AirTemp=\"bo-\", DutTemp=\"ro-\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Properties"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# MODE\n",
    "    \n",
    "thermo.parameter.Mode = thermo.Enums.MODE.DUT_CTRL\n",
    "mode2 = thermo.parameter.Mode\n",
    "logger.info(mode2)\n",
    "assert mode2 == thermo.Enums.MODE.DUT_CTRL\n",
    "\n",
    "thermo.parameter.Mode = thermo.Enums.MODE.AIR_CTRL\n",
    "mode1 = thermo.parameter.Mode\n",
    "logger.info(mode1)\n",
    "assert mode1 == thermo.Enums.MODE.AIR_CTRL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Temperature\n",
    "\n",
    "logger.info(\"Dut Temperature: %.2f\" % thermo.parameter.DutTemp)\n",
    "logger.info(\"Air Temperature: %.2f\" % thermo.parameter.AirTemp)\n",
    "\n",
    "thermo.parameter.Mode = thermo.Enums.MODE.DUT_CTRL\n",
    "logger.info(\"Dut Temperature: %.2f\" % thermo.parameter.Temp)\n",
    "thermo.parameter.Mode = thermo.Enums.MODE.AIR_CTRL\n",
    "logger.info(\"Air Temperature: %.2f\" % thermo.parameter.Temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Setpoint\n",
    "\n",
    "thermo.parameter.SetPoint = 28\n",
    "rb = thermo.parameter.SetPoint\n",
    "logger.info(rb)\n",
    "assert rb == 28"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Window\n",
    "\n",
    "thermo.parameter.Window = 2\n",
    "rb = thermo.parameter.Window\n",
    "logger.info(rb)\n",
    "assert rb == 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# RampRate - Can be set only if the head is lowered\n",
    "\n",
    "thermo.parameter.RampRate = 10\n",
    "rb = thermo.parameter.RampRate\n",
    "logger.info(rb)\n",
    "assert rb == 10\n",
    "\n",
    "thermo.parameter.RampRate = 9999  # As fast as possible\n",
    "rb = thermo.parameter.RampRate\n",
    "logger.info(rb)\n",
    "assert rb == 9999"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# FlowRate\n",
    "thermo.parameter.HeadPosition = thermo.Enums.HEAD_POS.DOWN\n",
    "sleep(0.3)\n",
    "thermo.parameter.FlowState = True\n",
    "try:\n",
    "    thermo.parameter.FlowRate = 5\n",
    "    sleep(3)\n",
    "except NotImplementedError as e:\n",
    "    logger.info(e, exc_info=False)\n",
    "else:\n",
    "    rb = thermo.parameter.FlowRate\n",
    "    logger.info(rb)\n",
    "    assert math.ceil(rb) == 5\n",
    "thermo.parameter.FlowState = False\n",
    "thermo.parameter.HeadPosition = thermo.Enums.HEAD_POS.UP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# HeadLock\n",
    "\n",
    "try:\n",
    "    thermo.parameter.HeadLock = True\n",
    "except NotImplementedError as e:\n",
    "    logger.info(e, exc_info=False)\n",
    "else:\n",
    "    rb = thermo.parameter.HeadLock\n",
    "    logger.info(rb)\n",
    "    assert rb == True\n",
    "\n",
    "    thermo.parameter.HeadLock = False\n",
    "    rb = thermo.parameter.HeadLock\n",
    "    logger.info(rb)\n",
    "    assert rb == False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# HeadPosition\n",
    "\n",
    "thermo.parameter.HeadPosition = thermo.Enums.HEAD_POS.UP\n",
    "rb = thermo.parameter.HeadPosition\n",
    "logger.info(rb)\n",
    "assert rb == thermo.Enums.HEAD_POS.UP\n",
    "\n",
    "thermo.parameter.HeadPosition = thermo.Enums.HEAD_POS.DOWN\n",
    "rb = thermo.parameter.HeadPosition\n",
    "logger.info(rb)\n",
    "assert rb == thermo.Enums.HEAD_POS.DOWN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# FlowState\n",
    "\n",
    "thermo.parameter.FlowState = True\n",
    "rb = thermo.parameter.FlowState\n",
    "logger.info(rb)\n",
    "assert rb == True\n",
    "thermo.parameter.FlowState = False\n",
    "rb = thermo.parameter.FlowState\n",
    "logger.info(rb)\n",
    "assert rb == False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# CompressorState\n",
    "\n",
    "thermo.parameter.CompressorState = True\n",
    "rb = thermo.parameter.CompressorState\n",
    "logger.info(rb)\n",
    "assert rb == True\n",
    "\n",
    "thermo.parameter.CompressorState = False\n",
    "rb = thermo.parameter.CompressorState\n",
    "logger.info(rb)\n",
    "assert rb == False\n",
    "\n",
    "thermo.parameter.CompressorState = True\n",
    "rb = thermo.parameter.CompressorState\n",
    "logger.info(rb)\n",
    "assert rb == True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# CompressorTimer\n",
    "\n",
    "try:\n",
    "    thermo.parameter.CompressorTimer = 15\n",
    "except NotImplementedError as e:\n",
    "    logger.info(e, exc_info=False)\n",
    "else:\n",
    "    rb = thermo.parameter.CompressorTimer\n",
    "    logger.info(rb)\n",
    "    assert rb == 14 or rb == 15\n",
    "\n",
    "    thermo.parameter.CompressorTimer = 0\n",
    "    rb = thermo.parameter.CompressorTimer\n",
    "    logger.info(rb)\n",
    "    assert rb == 0\n",
    "\n",
    "    logger.info(thermo.parameter.CompressorTimerRemaining)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Wait until temperature settled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# Cannot be simulated\n",
    "thermo.parameter.Mode = thermo.Enums.MODE.DUT_CTRL\n",
    "thermo.parameter.HeadPosition = thermo.Enums.HEAD_POS.DOWN\n",
    "thermo.Templogger.config(logpath, 0.1)\n",
    "thermo.Templogger.start()\n",
    "try:\n",
    "    thermo.WaitForTemp(timeout_s=600, target=110., window_k=3, flowrate=6., soaktime_m=1, disable_exception=False)\n",
    "except Exception as e:\n",
    "    logger.exception(e)\n",
    "finally:\n",
    "    thermo.Templogger.stop()\n",
    "    thermo.parameter.FlowState = False\n",
    "    df = thermo.Templogger.as_dataframe()\n",
    "    df.plot(style=dict(AirTemp=\"bo-\", DutTemp=\"ro-\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Close"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo.Close()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2018-03-08T15:07:21.235486Z",
     "start_time": "2018-03-08T15:07:18.705435Z"
    },
    "collapsed": true
   },
   "source": [
    "# Dev area"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo.configure(thermo.Enums.MODE.AIR_CTRL, temp=60, window_k=4, flowrate=4.5) #check if flowrate is set even tho the flow state is false"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo.parameter.HeadPosition = thermo.Enums.HEAD_POS.UP\n",
    "#thermo.parameter.FlowState = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo.parameter.FlowState = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# FlowState TESTING\n",
    "\n",
    "thermo.parameter.FlowState = True\n",
    "sleep(0.2)\n",
    "rb = thermo.parameter.FlowState\n",
    "sleep(0.2)\n",
    "logger.info(rb)\n",
    "assert rb == True\n",
    "sleep(2)\n",
    "thermo.parameter.FlowState = False\n",
    "sleep(0.2)\n",
    "rb = thermo.parameter.FlowState\n",
    "logger.info(rb)\n",
    "assert rb == False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#thermo.parameter.HeadPosition = thermo.Enums.HEAD_POS.UP\n",
    "#thermo.configure(thermo.Enums.MODE.AIR_CTRL, temp=40, ramprate=9999)\n",
    "print(thermo.parameter.RampRate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "#thermo.parameter.Mode = thermo.Enums.MODE.DUT_CTRL\n",
    "thermo.parameter.HeadPosition = thermo.Enums.HEAD_POS.DOWN\n",
    "thermo.parameter.RampRate = 100\n",
    "thermo.Templogger.config(logpath, 0.1)\n",
    "thermo.Templogger.start()\n",
    "try:\n",
    "    thermo.WaitForTemp(timeout_s=600, target=60, window_k=2, flowrate=4., soaktime_m=0.5, disable_exception=False)\n",
    "except Exception as e:\n",
    "    logger.exception(e)\n",
    "finally:\n",
    "    thermo.Templogger.stop()\n",
    "    thermo.parameter.FlowState = False\n",
    "    df = thermo.Templogger.as_dataframe()\n",
    "    df.plot(style=dict(AirTemp=\"bo-\", DutTemp=\"ro-\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "print(thermo.parameter.HeadPosition)\n",
    "thermo.parameter.RampRate = 12\n",
    "thermo.parameter.RampRate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo.parameter.CompressorState"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo._statecache"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo.parameter.HeadPosition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo._write('*RST')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo._query('TECR?')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "thermo.CheckError()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
