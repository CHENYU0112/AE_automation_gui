from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import TP04310_const as const
from .TP04310_const import *


class TP04310_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("TP04310_32.dll", "TP04310_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "TP04310"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice, baudRate, parity, timeoutmSec):
        instrSession = ViSession()
        _status = self.dll.TP04310_init(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViInt32(baudRate),
            ViInt16(parity),
            ViInt32(timeoutmSec),
            byref(instrSession),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(instrSession.value)

    def write_config_parameter(self, vi, configParamID, configParamValue):
        _status = self.dll.TP04310_write_config_parameter(
            ViSession(vi), ViInt16(configParamID), ViInt16(configParamValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def read_config_parameter(self, vi, configParamID):
        configParamValue = ViInt16()
        _status = self.dll.TP04310_read_config_parameter(ViSession(vi), ViInt16(configParamID), byref(configParamValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(configParamValue.value)

    def write_setpoint_info(self, vi, setpNumber, setpTemperature, setpWindow, setpSoakTime, setpRampRate):
        _status = self.dll.TP04310_write_setpoint_info(
            ViSession(vi),
            ViInt16(setpNumber),
            ViReal64(setpTemperature),
            ViReal64(setpWindow),
            ViInt16(setpSoakTime),
            ViReal64(setpRampRate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def read_setpoint_info(self, vi):
        setpNumber = ViInt16()
        setpTemperature = ViReal64()
        setpWindow = ViReal64()
        setpSoakTime = ViInt16()
        setpointRampRate = ViReal64()
        _status = self.dll.TP04310_read_setpoint_info(
            ViSession(vi),
            byref(setpNumber),
            byref(setpTemperature),
            byref(setpWindow),
            byref(setpSoakTime),
            byref(setpointRampRate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        setpNumber = int(setpNumber.value)
        setpTemperature = float(setpTemperature.value)
        setpWindow = float(setpWindow.value)
        setpSoakTime = int(setpSoakTime.value)
        setpointRampRate = float(setpointRampRate.value)
        return setpNumber, setpTemperature, setpWindow, setpSoakTime, setpointRampRate

    def write_setpoint_number(self, vi, setpNumber):
        _status = self.dll.TP04310_write_setpoint_number(ViSession(vi), ViInt16(setpNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def read_setpoint_number(self, vi):
        setpNumber = ViInt16()
        _status = self.dll.TP04310_read_setpoint_number(ViSession(vi), byref(setpNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(setpNumber.value)

    def write_setpoint_temperature(self, vi, setpTemperature):
        _status = self.dll.TP04310_write_setpoint_temperature(ViSession(vi), ViReal64(setpTemperature))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def read_setpoint_temperature(self, vi):
        setpTemperature = ViReal64()
        _status = self.dll.TP04310_read_setpoint_temperature(ViSession(vi), byref(setpTemperature))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(setpTemperature.value)

    def write_setpoint_window(self, vi, setpWindow):
        _status = self.dll.TP04310_write_setpoint_window(ViSession(vi), ViReal64(setpWindow))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def read_setpoint_window(self, vi):
        setpointWindow = ViReal64()
        _status = self.dll.TP04310_read_setpoint_window(ViSession(vi), byref(setpointWindow))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(setpointWindow.value)

    def write_setpoint_soak(self, vi, setpSoak):
        _status = self.dll.TP04310_write_setpoint_soak(ViSession(vi), ViInt16(setpSoak))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def read_setpoint_soak(self, vi):
        setpSoak = ViInt16()
        _status = self.dll.TP04310_read_setpoint_soak(ViSession(vi), byref(setpSoak))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(setpSoak.value)

    def write_setpoint_ramp(self, vi, setpRamp):
        _status = self.dll.TP04310_write_setpoint_ramp(ViSession(vi), ViReal64(setpRamp))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def read_setpoint_ramp(self, vi):
        setpRamp = ViReal64()
        _status = self.dll.TP04310_read_setpoint_ramp(ViSession(vi), byref(setpRamp))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(setpRamp.value)

    def load_setup_file(self, vi, setupFile):
        _status = self.dll.TP04310_load_setup_file(ViSession(vi), ViInt16(setupFile))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def save_setup(self, vi, setupFile):
        _status = self.dll.TP04310_save_setup(ViSession(vi), ViInt16(setupFile))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def read_SRE(self, vi):
        SRE_register = ViInt16()
        _status = self.dll.TP04310_read_SRE(ViSession(vi), byref(SRE_register))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(SRE_register.value)

    def write_SRE(self, vi, SRE_register):
        _status = self.dll.TP04310_write_SRE(ViSession(vi), ViInt16(SRE_register))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def read_TESE(self, vi):
        TESE_register = ViInt16()
        _status = self.dll.TP04310_read_TESE(ViSession(vi), byref(TESE_register))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(TESE_register.value)

    def write_TESE(self, vi, TESE_register):
        _status = self.dll.TP04310_write_TESE(ViSession(vi), ViInt16(TESE_register))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def read_ESE(self, vi):
        ESE_register = ViInt16()
        _status = self.dll.TP04310_read_ESE(ViSession(vi), byref(ESE_register))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(ESE_register.value)

    def write_ESE(self, vi, ESE_register):
        _status = self.dll.TP04310_write_ESE(ViSession(vi), ViInt16(ESE_register))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def cycle(self, vi, startStopCycling):
        _status = self.dll.TP04310_cycle(ViSession(vi), ViInt16(startStopCycling))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def cycle_query(self, vi):
        cyclingStatus = ViInt16()
        _status = self.dll.TP04310_cycle_query(ViSession(vi), byref(cyclingStatus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(cyclingStatus.value)

    def next_setpoint(self, vi):
        _status = self.dll.TP04310_next_setpoint(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def read_STB(self, vi):
        status_byte = ViInt16()
        _status = self.dll.TP04310_read_STB(ViSession(vi), byref(status_byte))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(status_byte.value)

    def read_ESR(self, vi):
        ESR_register = ViInt16()
        _status = self.dll.TP04310_read_ESR(ViSession(vi), byref(ESR_register))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(ESR_register.value)

    def read_TESR(self, vi):
        TESR_register = ViInt16()
        _status = self.dll.TP04310_read_TESR(ViSession(vi), byref(TESR_register))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(TESR_register.value)

    def read_TECR(self, vi):
        TECR_register = ViInt16()
        _status = self.dll.TP04310_read_TECR(ViSession(vi), byref(TECR_register))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(TECR_register.value)

    def read_AUXC(self, vi):
        auxc_register = ViInt16()
        _status = self.dll.TP04310_read_AUXC(ViSession(vi), byref(auxc_register))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(auxc_register.value)

    def read_air_flow_scfm(self, vi):
        currentAirFlow_scfm = ViReal64()
        _status = self.dll.TP04310_read_air_flow_scfm(ViSession(vi), byref(currentAirFlow_scfm))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(currentAirFlow_scfm.value)

    def read_air_flow_lites_per_sec(self, vi):
        currentAirFlow_l_s = ViReal64()
        _status = self.dll.TP04310_read_air_flow_lites_per_sec(ViSession(vi), byref(currentAirFlow_l_s))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(currentAirFlow_l_s.value)

    def read_dynamic_setpoint(self, vi):
        dynamicSetpoint = ViReal64()
        _status = self.dll.TP04310_read_dynamic_setpoint(ViSession(vi), byref(dynamicSetpoint))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(dynamicSetpoint.value)

    def read_control_temperature(self, vi):
        controlTemperature = ViReal64()
        _status = self.dll.TP04310_read_control_temperature(ViSession(vi), byref(controlTemperature))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(controlTemperature.value)

    def read_air_temperature(self, vi):
        airTemperature = ViReal64()
        _status = self.dll.TP04310_read_air_temperature(ViSession(vi), byref(airTemperature))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(airTemperature.value)

    def read_DUT_temperature(self, vi):
        DUTTemperature = ViReal64()
        _status = self.dll.TP04310_read_DUT_temperature(ViSession(vi), byref(DUTTemperature))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(DUTTemperature.value)

    def writeInstrData(self, vi, writeBuffer):
        _status = self.dll.TP04310_writeInstrData(ViSession(vi), ViString(writeBuffer))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def readInstrData(self, vi, numberBytesToRead):
        readBuffer = ARRAY_ViChar(1024)
        numBytesRead = ViInt32()
        _status = self.dll.TP04310_readInstrData(
            ViSession(vi), ViInt32(numberBytesToRead), readBuffer, byref(numBytesRead)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        readBuffer = decode(readBuffer)
        numBytesRead = int(numBytesRead.value)
        return readBuffer, numBytesRead

    def reset(self, vi):
        _status = self.dll.TP04310_reset(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def reset_op_screen(self, vi):
        _status = self.dll.TP04310_reset_op_screen(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def device_clear(self, vi):
        _status = self.dll.TP04310_device_clear(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def device_error_clear(self, vi):
        _status = self.dll.TP04310_device_error_clear(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def selfTest(self, instrSession):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        _status = self.dll.TP04310_selfTest(ViSession(instrSession), byref(selfTestResult), selfTestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def errorQuery(self, instrSession):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        _status = self.dll.TP04310_errorQuery(ViSession(instrSession), byref(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def errorMessage(self, instrSession, statusCode):
        message = ARRAY_ViChar(1024)
        _status = self.dll.TP04310_errorMessage(ViSession(instrSession), ViStatus(statusCode), message)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(message)

    def revisionQuery(self, instrSession):
        driverRev = ARRAY_ViChar(1024)
        instrRev = ARRAY_ViChar(1024)
        _status = self.dll.TP04310_revisionQuery(ViSession(instrSession), driverRev, instrRev)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        driverRev = decode(driverRev)
        instrRev = decode(instrRev)
        return driverRev, instrRev

    def reconfigInterface(self, vi, baudRate, parity, timeoutmSec):
        _status = self.dll.TP04310_reconfigInterface(
            ViSession(vi), ViInt32(baudRate), ViInt16(parity), ViInt32(timeoutmSec)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def write_device_command(self, vi, instrCmd, cmdArg):
        _status = self.dll.TP04310_write_device_command(ViSession(vi), ViInt16(instrCmd), ViInt16(cmdArg))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def read_device_state(self, vi, instrCmd):
        cmdArg = ViInt16()
        _status = self.dll.TP04310_read_device_state(ViSession(vi), ViInt16(instrCmd), byref(cmdArg))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(cmdArg.value)

    def close(self, instrSession):
        _status = self.dll.TP04310_close(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
