from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .TP04310_dllwrap import *


class TP04310(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = TP04310_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(
        self,
        ResourceName: str,
        IdQuery: bool,
        Reset: bool,
        BaudRate: int = 19200,
        Parity: int = 0,
        TimeoutMSec: int = 5000,
    ):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :param Reset: Specifies whether to reset the instrument.
        :param BaudRate:
        :param Parity:
        :param TimeoutMSec:
        """
        self._vi = self._dllwrap.init(ResourceName, IdQuery, Reset, BaudRate, Parity, TimeoutMSec)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice, baudRate, parity, timeoutmSec):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        :param baudRate:
        :type baudRate:
        :param parity:
        :type parity:
        :param timeoutmSec:
        :type timeoutmSec:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice, baudRate, parity, timeoutmSec)

    def write_config_parameter(self, configParamID, configParamValue):
        """

        :param configParamID:
        :type configParamID:
        :param configParamValue:
        :type configParamValue:
        """
        return self._dllwrap.write_config_parameter(self._vi, configParamID, configParamValue)

    def read_config_parameter(self, configParamID):
        """

        :param configParamID:
        :type configParamID:
        """
        return self._dllwrap.read_config_parameter(self._vi, configParamID)

    def write_setpoint_info(self, setpNumber, setpTemperature, setpWindow, setpSoakTime, setpRampRate):
        """

        :param setpNumber:
        :type setpNumber:
        :param setpTemperature:
        :type setpTemperature:
        :param setpWindow:
        :type setpWindow:
        :param setpSoakTime:
        :type setpSoakTime:
        :param setpRampRate:
        :type setpRampRate:
        """
        return self._dllwrap.write_setpoint_info(
            self._vi, setpNumber, setpTemperature, setpWindow, setpSoakTime, setpRampRate
        )

    def read_setpoint_info(self):
        """"""
        return self._dllwrap.read_setpoint_info(self._vi)

    def write_setpoint_number(self, setpNumber):
        """

        :param setpNumber:
        :type setpNumber:
        """
        return self._dllwrap.write_setpoint_number(self._vi, setpNumber)

    def read_setpoint_number(self):
        """"""
        return self._dllwrap.read_setpoint_number(self._vi)

    def write_setpoint_temperature(self, setpTemperature):
        """

        :param setpTemperature:
        :type setpTemperature:
        """
        return self._dllwrap.write_setpoint_temperature(self._vi, setpTemperature)

    def read_setpoint_temperature(self):
        """"""
        return self._dllwrap.read_setpoint_temperature(self._vi)

    def write_setpoint_window(self, setpWindow):
        """

        :param setpWindow:
        :type setpWindow:
        """
        return self._dllwrap.write_setpoint_window(self._vi, setpWindow)

    def read_setpoint_window(self):
        """"""
        return self._dllwrap.read_setpoint_window(self._vi)

    def write_setpoint_soak(self, setpSoak):
        """

        :param setpSoak:
        :type setpSoak:
        """
        return self._dllwrap.write_setpoint_soak(self._vi, setpSoak)

    def read_setpoint_soak(self):
        """"""
        return self._dllwrap.read_setpoint_soak(self._vi)

    def write_setpoint_ramp(self, setpRamp):
        """

        :param setpRamp:
        :type setpRamp:
        """
        return self._dllwrap.write_setpoint_ramp(self._vi, setpRamp)

    def read_setpoint_ramp(self):
        """"""
        return self._dllwrap.read_setpoint_ramp(self._vi)

    def load_setup_file(self, setupFile):
        """

        :param setupFile:
        :type setupFile:
        """
        return self._dllwrap.load_setup_file(self._vi, setupFile)

    def save_setup(self, setupFile):
        """

        :param setupFile:
        :type setupFile:
        """
        return self._dllwrap.save_setup(self._vi, setupFile)

    def read_SRE(self):
        """"""
        return self._dllwrap.read_SRE(self._vi)

    def write_SRE(self, SRE_register):
        """

        :param SRE_register:
        :type SRE_register:
        """
        return self._dllwrap.write_SRE(self._vi, SRE_register)

    def read_TESE(self):
        """"""
        return self._dllwrap.read_TESE(self._vi)

    def write_TESE(self, TESE_register):
        """

        :param TESE_register:
        :type TESE_register:
        """
        return self._dllwrap.write_TESE(self._vi, TESE_register)

    def read_ESE(self):
        """"""
        return self._dllwrap.read_ESE(self._vi)

    def write_ESE(self, ESE_register):
        """

        :param ESE_register:
        :type ESE_register:
        """
        return self._dllwrap.write_ESE(self._vi, ESE_register)

    def cycle(self, startStopCycling):
        """

        :param startStopCycling:
        :type startStopCycling:
        """
        return self._dllwrap.cycle(self._vi, startStopCycling)

    def cycle_query(self):
        """"""
        return self._dllwrap.cycle_query(self._vi)

    def next_setpoint(self):
        """"""
        return self._dllwrap.next_setpoint(self._vi)

    def read_STB(self):
        """"""
        return self._dllwrap.read_STB(self._vi)

    def read_ESR(self):
        """"""
        return self._dllwrap.read_ESR(self._vi)

    def read_TESR(self):
        """"""
        return self._dllwrap.read_TESR(self._vi)

    def read_TECR(self):
        """"""
        return self._dllwrap.read_TECR(self._vi)

    def read_AUXC(self):
        """"""
        return self._dllwrap.read_AUXC(self._vi)

    def read_air_flow_scfm(self):
        """"""
        return self._dllwrap.read_air_flow_scfm(self._vi)

    def read_air_flow_lites_per_sec(self):
        """"""
        return self._dllwrap.read_air_flow_lites_per_sec(self._vi)

    def read_dynamic_setpoint(self):
        """"""
        return self._dllwrap.read_dynamic_setpoint(self._vi)

    def read_control_temperature(self):
        """"""
        return self._dllwrap.read_control_temperature(self._vi)

    def read_air_temperature(self):
        """"""
        return self._dllwrap.read_air_temperature(self._vi)

    def read_DUT_temperature(self):
        """"""
        return self._dllwrap.read_DUT_temperature(self._vi)

    def writeInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.writeInstrData(self._vi, writeBuffer)

    def readInstrData(self, numberBytesToRead):
        """

        :param numberBytesToRead:
        :type numberBytesToRead:
        """
        return self._dllwrap.readInstrData(self._vi, numberBytesToRead)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def reset_op_screen(self):
        """"""
        return self._dllwrap.reset_op_screen(self._vi)

    def device_clear(self):
        """"""
        return self._dllwrap.device_clear(self._vi)

    def device_error_clear(self):
        """"""
        return self._dllwrap.device_error_clear(self._vi)

    def selfTest(self):
        """"""
        return self._dllwrap.selfTest(self._vi)

    def errorQuery(self):
        """"""
        return self._dllwrap.errorQuery(self._vi)

    def errorMessage(self, statusCode):
        """

        :param statusCode:
        :type statusCode:
        """
        return self._dllwrap.errorMessage(self._vi, statusCode)

    def revisionQuery(self):
        """"""
        return self._dllwrap.revisionQuery(self._vi)

    def reconfigInterface(self, baudRate, parity, timeoutmSec):
        """

        :param baudRate:
        :type baudRate:
        :param parity:
        :type parity:
        :param timeoutmSec:
        :type timeoutmSec:
        """
        return self._dllwrap.reconfigInterface(self._vi, baudRate, parity, timeoutmSec)

    def write_device_command(self, instrCmd, cmdArg):
        """

        :param instrCmd:
        :type instrCmd:
        :param cmdArg:
        :type cmdArg:
        """
        return self._dllwrap.write_device_command(self._vi, instrCmd, cmdArg)

    def read_device_state(self, instrCmd):
        """

        :param instrCmd:
        :type instrCmd:
        """
        return self._dllwrap.read_device_state(self._vi, instrCmd)
