from __future__ import annotations

from time import sleep

import arrow

from pverify.core.lab.driver_identity import IdentityBasic
from pverify.drivers.BaseInstrument import BaseVisaInstrument


class ESpecJ:
    def __init__(self):
        self.drivername = "ESpecJ"
        self.__Initialized = False
        self.__Identity = IdentityBasic(
            fct_idn=lambda: "ESpecJ",
            fct_drv_rev=lambda: "unknown",
            fct_fw_rev=lambda: "unknown",
        )

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    def Initialize(self, ResourceName, IdQuery=1, Reset=0, **kwargs):
        self.visa = BaseVisaInstrument()
        self.visa.ResourceName = ResourceName
        self.visa.vi_open()
        self.visa.vi_setTimeout(3000)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self.visa.vi_close()
        self.__Initialized = False

    def SettingCmd(self, cmd):
        ret = self.visa.vi_query(cmd)
        if not ret.lower().startswith("ok"):
            raise Exception("Setting command error: " + ret)

    def MonitorCmd(self, cmd):
        ret = self.visa.vi_query(cmd)
        if ret.lower().startswith("na"):
            raise Exception("Monitor command error: " + ret)
        else:
            return ret

    def Start(self):
        """
        Switches on the installation.
        """
        self.SettingCmd("MODE, CONSTANT")

    def Stop(self):
        """
        Switches off the installation.
        """
        self.SettingCmd("MODE, STANDBY")

    def Reset(self):
        """
        Stops the heating/cooling and resets the temperature gradient to maximum 999.9.
        """
        self.Stop()

    def getTemperature(self):
        """
        Returns the current temperature in the chamber.
        """
        ret = self.MonitorCmd("TEMP?")
        act_temp, target_point, ul_alarm_val, ll_alarm_val = (float(x) for x in ret.split(","))
        return act_temp

    def setTemperature(self, target_temp, gradient=999.9, wait_for_settle=True, margin=1.0, timeout=-1):
        """
        Sets a target temperature and starts heating/cooling.
        If activated the function waits for the temperature to be settled within a specific margin.

        :param target_temp: The target temperature.
        :param gradient: Not supported
        :param wait_for_settle: If True the method waits for be settled within a specific margin
        :param margin: The difference between measured temperate and target temperature that is accepted for the
                       settling to be finished.
        :param timeout: The maximum time in seconds the function waits (if activated) for setting the temperature.
        :return: None
        """
        self.SettingCmd(f"TEMP, S{target_temp:.1f}")
        self.Start()
        sleep(1)
        starttime = arrow.now()
        if wait_for_settle:
            while 1:
                curtemp = self.getTemperature()
                if (target_temp - margin) <= curtemp <= (target_temp + margin):
                    break
                sleep(10.0)
                elapsed = (arrow.now() - starttime).total_seconds()
                if timeout > 0 and elapsed >= timeout:
                    break

    def setTemperatureGradient(self, gradient):
        """
        Not supported
        """
