from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import chr632xxa_const as const
from .chr632xxa_const import *


class chr632xxa_dllwrap(IVICDriverWrapper):
    BUFSIZE = 1024

    def __init__(self):
        super().__init__()
        self._dll = load_dll("chr63200A_32.dll", "chr63200A_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "chr632xxa"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        _status = self.dll.chr63200A_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        _status = self.dll.chr63200A_InitWithOptions(
            ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), ViString(optionString), byref(newVi)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(newVi.value)

    def close(self, vi):
        _status = self.dll.chr63200A_close(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(bufferSize)
        _status = self.dll.chr63200A_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.chr63200A_LockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.chr63200A_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr63200A_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def GetError(self, vi, bufferSize):
        code = ViStatus()
        description = ARRAY_ViChar(bufferSize)
        _status = self.dll.chr63200A_GetError(ViSession(vi), byref(code), ViInt32(bufferSize), description)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        description = decode(description)
        return code, description

    def ClearError(self, vi):
        _status = self.dll.chr63200A_ClearError(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        _status = self.dll.chr63200A_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(errorMessage)

    def GetErrorInfo(self, vi):
        primaryError = ViStatus()
        secondaryError = ViStatus()
        errorElaboration = ARRAY_ViChar(256)
        _status = self.dll.chr63200A_GetErrorInfo(
            ViSession(vi), byref(primaryError), byref(secondaryError), errorElaboration
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorElaboration = decode(errorElaboration)
        return primaryError, secondaryError, errorElaboration

    def ClearErrorInfo(self, vi):
        _status = self.dll.chr63200A_ClearErrorInfo(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(bufferSize)
        _status = self.dll.chr63200A_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        _status = self.dll.chr63200A_ResetInterchangeCheck(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearInterchangeWarnings(self, vi):
        _status = self.dll.chr63200A_ClearInterchangeWarnings(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InvalidateAllAttributes(self, vi):
        _status = self.dll.chr63200A_InvalidateAllAttributes(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def reset(self, vi):
        _status = self.dll.chr63200A_reset(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetWithDefaults(self, vi):
        _status = self.dll.chr63200A_ResetWithDefaults(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr63200A_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(self.BUFSIZE)
        firmwareRevision = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr63200A_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def Disable(self, vi):
        _status = self.dll.chr63200A_Disable(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WriteInstrData(self, vi, writeBuffer):
        _status = self.dll.chr63200A_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(self.BUFSIZE)
        bytesRead = ViInt32()
        _status = self.dll.chr63200A_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        _status = self.dll.chr63200A_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        _status = self.dll.chr63200A_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(bufSize)
        _status = self.dll.chr63200A_GetAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(bufSize), value
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        _status = self.dll.chr63200A_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        _status = self.dll.chr63200A_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.chr63200A_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.chr63200A_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.chr63200A_SetAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViConstString(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.chr63200A_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.chr63200A_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.chr63200A_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.chr63200A_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.chr63200A_CheckAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViConstString(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.chr63200A_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.chr63200A_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Abort(self, vi):
        _status = self.dll.chr63200A_Abort(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Fetch(self, vi, item):
        result = ViReal64()
        _status = self.dll.chr63200A_Fetch(ViSession(vi), ViInt32(item), byref(result))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(result.value)

    def ElectronicLoadState(self, vi, trigger, shortState, clear):
        loadStatus = ARRAY_ViBoolean(self.BUFSIZE)
        _status = self.dll.chr63200A_ElectronicLoadState(
            ViSession(vi), ViBoolean(trigger), ViBoolean(shortState), loadStatus, ViBoolean(clear)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return list(loadStatus)

    def SynchronousRun(self, vi, run):
        _status = self.dll.chr63200A_SynchronousRun(ViSession(vi), ViBoolean(run))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Measure(self, vi, inputPort, item):
        response = ViReal64()
        _status = self.dll.chr63200A_Measure(ViSession(vi), ViInt32(inputPort), ViInt32(item), byref(response))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(response.value)

    def ProtectionTestResult(self, vi, item):
        testResult = ViInt32()
        testValue = ViReal64()
        maximumPower = ViReal64()
        _status = self.dll.chr63200A_ProtectionTestResult(
            ViSession(vi), byref(testResult), byref(testValue), byref(maximumPower), ViInt32(item)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        testResult = int(testResult.value)
        testValue = float(testValue.value)
        maximumPower = float(maximumPower.value)
        return testResult, testValue, maximumPower

    def OperatingMode(self, vi, mode, level):
        _status = self.dll.chr63200A_OperatingMode(ViSession(vi), ViInt32(mode), ViInt32(level))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SpecificationJudgment(self, vi, item):
        testResult = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr63200A_SpecificationJudgment(ViSession(vi), ViInt32(item), testResult)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(testResult)

    def DigitizingInitiate(self, vi):
        _status = self.dll.chr63200A_DigitizingInitiate(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitizingAbort(self, vi):
        _status = self.dll.chr63200A_DigitizingAbort(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitizingSamplingTime(self, vi, time):
        _status = self.dll.chr63200A_DigitizingSamplingTime(ViSession(vi), ViReal64(time))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitizingSamplingPoint(self, vi, point):
        _status = self.dll.chr63200A_DigitizingSamplingPoint(ViSession(vi), ViInt32(point))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitizingTrigger(self, vi, state):
        _status = self.dll.chr63200A_DigitizingTrigger(ViSession(vi), ViInt32(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitizingTriggerPoint(self, vi, point):
        _status = self.dll.chr63200A_DigitizingTriggerPoint(ViSession(vi), ViInt32(point))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitizingTriggerSource(self, vi, source):
        _status = self.dll.chr63200A_DigitizingTriggerSource(ViSession(vi), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitizingTriggerStatus(self, vi):
        status = ViInt32()
        _status = self.dll.chr63200A_DigitizingTriggerStatus(ViSession(vi), byref(status))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(status.value)

    def DigitizingWaveform(self, vi, returnItem):
        dataResponse = ARRAY_ViReal64(self.BUFSIZE)
        _status = self.dll.chr63200A_DigitizingWaveform(ViSession(vi), dataResponse, ViInt32(returnItem))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return list(dataResponse)

    def ConfigureCCModeMeasureRange(self, vi, measureRange):
        _status = self.dll.chr63200A_ConfigureCCModeMeasureRange(ViSession(vi), ViInt32(measureRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCCModeLoadValue(self, vi, loadValue):
        _status = self.dll.chr63200A_ConfigureCCModeLoadValue(ViSession(vi), ViReal64(loadValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCCModeSlewRate(self, vi, fallingSlewRate, risingSlewRate):
        _status = self.dll.chr63200A_ConfigureCCModeSlewRate(
            ViSession(vi), ViReal64(fallingSlewRate), ViReal64(risingSlewRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCRModeMeasureRange(self, vi, measureRange):
        _status = self.dll.chr63200A_ConfigureCRModeMeasureRange(ViSession(vi), ViInt32(measureRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCRModeLoadValue(self, vi, loadValue):
        _status = self.dll.chr63200A_ConfigureCRModeLoadValue(ViSession(vi), ViReal64(loadValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCRModeSlewRate(self, vi, fallingSlewRate, risingSlewRate):
        _status = self.dll.chr63200A_ConfigureCRModeSlewRate(
            ViSession(vi), ViReal64(fallingSlewRate), ViReal64(risingSlewRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCVModeMeasureRange(self, vi, measureRange):
        _status = self.dll.chr63200A_ConfigureCVModeMeasureRange(ViSession(vi), ViInt32(measureRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCVModeLoadValue(self, vi, loadValue):
        _status = self.dll.chr63200A_ConfigureCVModeLoadValue(ViSession(vi), ViReal64(loadValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCVModeCurrentLimit(self, vi, currentLimit):
        _status = self.dll.chr63200A_ConfigureCVModeCurrentLimit(ViSession(vi), ViReal64(currentLimit))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCVModeResponseSpeed(self, vi, responseSpeed):
        _status = self.dll.chr63200A_ConfigureCVModeResponseSpeed(ViSession(vi), ViInt32(responseSpeed))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCPModeMeasureRange(self, vi, measureRange):
        _status = self.dll.chr63200A_ConfigureCPModeMeasureRange(ViSession(vi), ViInt32(measureRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCPModeLoadValue(self, vi, loadValue):
        _status = self.dll.chr63200A_ConfigureCPModeLoadValue(ViSession(vi), ViReal64(loadValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCPModeSlewRate(self, vi, fallingSlewRate, risingSlewRate):
        _status = self.dll.chr63200A_ConfigureCPModeSlewRate(
            ViSession(vi), ViReal64(fallingSlewRate), ViReal64(risingSlewRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCCDModeMeasureRange(self, vi, measureRange):
        _status = self.dll.chr63200A_ConfigureCCDModeMeasureRange(ViSession(vi), ViInt32(measureRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCCDModeRepeat(self, vi, repeat):
        _status = self.dll.chr63200A_ConfigureCCDModeRepeat(ViSession(vi), ViInt32(repeat))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCCDModeSlewRate(self, vi, fallingSlewRate, risingSlewRate):
        _status = self.dll.chr63200A_ConfigureCCDModeSlewRate(
            ViSession(vi), ViReal64(fallingSlewRate), ViReal64(risingSlewRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCCDModeLoadValue(self, vi, l1, l2):
        _status = self.dll.chr63200A_ConfigureCCDModeLoadValue(ViSession(vi), ViReal64(l1), ViReal64(l2))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCCDModeTime(self, vi, t1, t2):
        _status = self.dll.chr63200A_ConfigureCCDModeTime(ViSession(vi), ViReal64(t1), ViReal64(t2))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCRDModeMeasureRange(self, vi, measureRange):
        _status = self.dll.chr63200A_ConfigureCRDModeMeasureRange(ViSession(vi), ViInt32(measureRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCRDModeRepeat(self, vi, repeat):
        _status = self.dll.chr63200A_ConfigureCRDModeRepeat(ViSession(vi), ViInt32(repeat))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCRDModeSlewRate(self, vi, fallingSlewRate, risingSlewRate):
        _status = self.dll.chr63200A_ConfigureCRDModeSlewRate(
            ViSession(vi), ViReal64(fallingSlewRate), ViReal64(risingSlewRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCRDModeLoadValue(self, vi, l1, l2):
        _status = self.dll.chr63200A_ConfigureCRDModeLoadValue(ViSession(vi), ViReal64(l1), ViReal64(l2))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCRDModeTime(self, vi, t1, t2):
        _status = self.dll.chr63200A_ConfigureCRDModeTime(ViSession(vi), ViReal64(t1), ViReal64(t2))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAutoModeVoltage(self, vi, voltage):
        _status = self.dll.chr63200A_ConfigureAutoModeVoltage(ViSession(vi), ViReal64(voltage))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAutoModeResistance(self, vi, resistance):
        _status = self.dll.chr63200A_ConfigureAutoModeResistance(ViSession(vi), ViReal64(resistance))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAutoModeCurrent(self, vi, current):
        _status = self.dll.chr63200A_ConfigureAutoModeCurrent(ViSession(vi), ViReal64(current))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAutoModePower(self, vi, power):
        _status = self.dll.chr63200A_ConfigureAutoModePower(ViSession(vi), ViReal64(power))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBatteryModeRunMode(self, vi, mode):
        _status = self.dll.chr63200A_ConfigureBatteryModeRunMode(ViSession(vi), ViInt32(mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBatteryModeLoadValue(self, vi, loadValue):
        _status = self.dll.chr63200A_ConfigureBatteryModeLoadValue(ViSession(vi), ViReal64(loadValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBatteryModeSlewRate(self, vi, fallingSlewRate, risingSlewRate):
        _status = self.dll.chr63200A_ConfigureBatteryModeSlewRate(
            ViSession(vi), ViReal64(fallingSlewRate), ViReal64(risingSlewRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBatteryModeEndVoltage(self, vi, endVoltage):
        _status = self.dll.chr63200A_ConfigureBatteryModeEndVoltage(ViSession(vi), ViReal64(endVoltage))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBatteryModeTimeout(self, vi, timeout):
        _status = self.dll.chr63200A_ConfigureBatteryModeTimeout(ViSession(vi), ViReal64(timeout))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBatteryModeMeasureRange(self, vi, measureRange):
        _status = self.dll.chr63200A_ConfigureBatteryModeMeasureRange(ViSession(vi), ViInt32(measureRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SelectProgram(self, vi, programNumber):
        _status = self.dll.chr63200A_SelectProgram(ViSession(vi), ViInt32(programNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProgramType(self, vi, type, chain, repeat, sequence):
        _status = self.dll.chr63200A_ConfigureProgramType(
            ViSession(vi), ViInt32(type), ViInt32(chain), ViInt32(repeat), ViInt32(sequence)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SelectSequence(self, vi, sequenceIndex):
        _status = self.dll.chr63200A_SelectSequence(ViSession(vi), ViInt32(sequenceIndex))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProgramTriggerMode(self, vi, triggerMode):
        _status = self.dll.chr63200A_ConfigureProgramTriggerMode(ViSession(vi), ViInt32(triggerMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProgramRunMode(self, vi, runMode, modeRange):
        _status = self.dll.chr63200A_ConfigureProgramRunMode(ViSession(vi), ViInt32(runMode), ViInt32(modeRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProgramListValue(self, vi, loadValue):
        _status = self.dll.chr63200A_ConfigureProgramListValue(ViSession(vi), ViReal64(loadValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProgramStepValue(self, vi, startValue, endValue):
        _status = self.dll.chr63200A_ConfigureProgramStepValue(ViSession(vi), ViReal64(startValue), ViReal64(endValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProgramSlewRate(self, vi, risingSlewRate, fallingSlewRate):
        _status = self.dll.chr63200A_ConfigureProgramSlewRate(
            ViSession(vi), ViReal64(risingSlewRate), ViReal64(fallingSlewRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProgramDwellTime(self, vi, dwellTime):
        _status = self.dll.chr63200A_ConfigureProgramDwellTime(ViSession(vi), ViReal64(dwellTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProgramSpecification(self, vi, VH, VL, IH, IL, PH, PL):
        _status = self.dll.chr63200A_ConfigureProgramSpecification(
            ViSession(vi), ViReal64(VH), ViReal64(VL), ViReal64(IH), ViReal64(IL), ViReal64(PH), ViReal64(PL)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProgramDelayTime(self, vi, delayTime):
        _status = self.dll.chr63200A_ConfigureProgramDelayTime(ViSession(vi), ViReal64(delayTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SaveProgram(self, vi):
        _status = self.dll.chr63200A_SaveProgram(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetProgramStates(self, vi):
        programNumber = ViInt32()
        sequnceNumber = ViInt32()
        loadMode = ViInt32()
        executionState = ViInt32()
        _status = self.dll.chr63200A_GetProgramStates(
            ViSession(vi), byref(programNumber), byref(sequnceNumber), byref(loadMode), byref(executionState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        programNumber = int(programNumber.value)
        sequnceNumber = int(sequnceNumber.value)
        loadMode = int(loadMode.value)
        executionState = int(executionState.value)
        return programNumber, sequnceNumber, loadMode, executionState

    def ClearSequence(self, vi):
        _status = self.dll.chr63200A_ClearSequence(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FailOfSequence(self, vi):
        result = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr63200A_FailOfSequence(ViSession(vi), result)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(result)

    def RemainSequence(self, vi):
        result = ViInt32()
        _status = self.dll.chr63200A_RemainSequence(ViSession(vi), byref(result))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(result.value)

    def SpecificationOfSequence(self, vi, parameter):
        result = ARRAY_ViReal64(self.BUFSIZE)
        _status = self.dll.chr63200A_SpecificationOfSequence(ViSession(vi), result, ViInt32(parameter))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return list(result)

    def StartSpecificationTest(self, vi, enable, unit):
        _status = self.dll.chr63200A_StartSpecificationTest(ViSession(vi), ViBoolean(enable), ViInt32(unit))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCVCCModeResponse(self, vi, response):
        _status = self.dll.chr63200A_ConfigureCVCCModeResponse(ViSession(vi), ViInt32(response))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCVCCModeVoltage(self, vi, voltage):
        _status = self.dll.chr63200A_ConfigureCVCCModeVoltage(ViSession(vi), ViReal64(voltage))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCVCCModeCurrent(self, vi, current):
        _status = self.dll.chr63200A_ConfigureCVCCModeCurrent(ViSession(vi), ViReal64(current))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCRCCModeResistance(self, vi, resistance):
        _status = self.dll.chr63200A_ConfigureCRCCModeResistance(ViSession(vi), ViReal64(resistance))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCRCCModeCurrent(self, vi, current):
        _status = self.dll.chr63200A_ConfigureCRCCModeCurrent(ViSession(vi), ViReal64(current))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCVCRModeResistance(self, vi, resistance):
        _status = self.dll.chr63200A_ConfigureCVCRModeResistance(ViSession(vi), ViReal64(resistance))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCVCRModeVoltage(self, vi, voltage):
        _status = self.dll.chr63200A_ConfigureCVCRModeVoltage(ViSession(vi), ViReal64(voltage))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOCPModeLatch(self, vi, latch):
        _status = self.dll.chr63200A_ConfigureOCPModeLatch(ViSession(vi), ViInt32(latch))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOCPModeStep(self, vi, step):
        _status = self.dll.chr63200A_ConfigureOCPModeStep(ViSession(vi), ViInt32(step))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOCPModeLoadValue(self, vi, startValue, endValue):
        _status = self.dll.chr63200A_ConfigureOCPModeLoadValue(ViSession(vi), ViReal64(startValue), ViReal64(endValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOCPModeDwellTime(self, vi, dwellTime):
        _status = self.dll.chr63200A_ConfigureOCPModeDwellTime(ViSession(vi), ViReal64(dwellTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOCPModeTriggerVoltage(self, vi, triggerVoltage):
        _status = self.dll.chr63200A_ConfigureOCPModeTriggerVoltage(ViSession(vi), ViReal64(triggerVoltage))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOCPModeSpecification(self, vi, highLevelCurrent, lowLevelCurrent):
        _status = self.dll.chr63200A_ConfigureOCPModeSpecification(
            ViSession(vi), ViReal64(highLevelCurrent), ViReal64(lowLevelCurrent)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOPPModeLatch(self, vi, latch):
        _status = self.dll.chr63200A_ConfigureOPPModeLatch(ViSession(vi), ViInt32(latch))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOPPModeStep(self, vi, step):
        _status = self.dll.chr63200A_ConfigureOPPModeStep(ViSession(vi), ViInt32(step))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOPPModeLoadValue(self, vi, startValue, endValue):
        _status = self.dll.chr63200A_ConfigureOPPModeLoadValue(ViSession(vi), ViReal64(startValue), ViReal64(endValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOPPModeDwellTime(self, vi, dwellTime):
        _status = self.dll.chr63200A_ConfigureOPPModeDwellTime(ViSession(vi), ViReal64(dwellTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOPPModeTriggerVoltage(self, vi, triggerVoltage):
        _status = self.dll.chr63200A_ConfigureOPPModeTriggerVoltage(ViSession(vi), ViReal64(triggerVoltage))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOPPModeSpecification(self, vi, highLevelPower, lowLevelPower):
        _status = self.dll.chr63200A_ConfigureOPPModeSpecification(
            ViSession(vi), ViReal64(highLevelPower), ViReal64(lowLevelPower)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSWDModeDCCurrent(self, vi, DCCurrent):
        _status = self.dll.chr63200A_ConfigureSWDModeDCCurrent(ViSession(vi), ViReal64(DCCurrent))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSWDModeACCurrent(self, vi, ACCurrent):
        _status = self.dll.chr63200A_ConfigureSWDModeACCurrent(ViSession(vi), ViReal64(ACCurrent))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSWDModeFrequency(self, vi, frequency):
        _status = self.dll.chr63200A_ConfigureSWDModeFrequency(ViSession(vi), ViReal64(frequency))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSWDModeMeasureRange(self, vi, measureRange):
        _status = self.dll.chr63200A_ConfigureSWDModeMeasureRange(ViSession(vi), ViInt32(measureRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSweepModeCurrent(self, vi, maxCurrent, minCurrent):
        _status = self.dll.chr63200A_ConfigureSweepModeCurrent(
            ViSession(vi), ViReal64(maxCurrent), ViReal64(minCurrent)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSweepModeFrequency(self, vi, startFrequency, endFrequency, stepFrequency):
        _status = self.dll.chr63200A_ConfigureSweepModeFrequency(
            ViSession(vi), ViReal64(startFrequency), ViReal64(endFrequency), ViReal64(stepFrequency)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSweepModeDwellTime(self, vi, dwellTime):
        _status = self.dll.chr63200A_ConfigureSweepModeDwellTime(ViSession(vi), ViReal64(dwellTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSweepModeDuty(self, vi, duty):
        _status = self.dll.chr63200A_ConfigureSweepModeDuty(ViSession(vi), ViReal64(duty))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSweepModeSlewRate(self, vi, fallingSlewRate, risingSlewRate):
        _status = self.dll.chr63200A_ConfigureSweepModeSlewRate(
            ViSession(vi), ViReal64(fallingSlewRate), ViReal64(risingSlewRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSweepModeMeasureRange(self, vi, measureRange):
        _status = self.dll.chr63200A_ConfigureSweepModeMeasureRange(ViSession(vi), ViInt32(measureRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCZMode(self, instrumentHandle, item, itemValue):
        _status = self.dll.chr63200A_ConfigureCZMode(ViSession(instrumentHandle), ViInt32(item), ViReal64(itemValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEXTWMode(self, instrumentHandle, mode, measureRange):
        _status = self.dll.chr63200A_ConfigureEXTWMode(
            ViSession(instrumentHandle), ViInt32(mode), ViInt32(measureRange)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SelectUserWaveform(self, vi, number):
        _status = self.dll.chr63200A_SelectUserWaveform(ViSession(vi), ViInt32(number))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUserWaveformData(self, vi, interval, repeat, chain, interpolation):
        _status = self.dll.chr63200A_ConfigureUserWaveformData(
            ViSession(vi), ViReal64(interval), ViInt32(repeat), ViInt32(chain), ViInt32(interpolation)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUserWaveformPoint(self, vi):
        point = ARRAY_ViChar(self.BUFSIZE)
        _status = self.dll.chr63200A_ConfigureUserWaveformPoint(ViSession(vi), point)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(point)

    def GetUserWaveformRemainPoint(self, vi):
        remain = ViInt32()
        _status = self.dll.chr63200A_GetUserWaveformRemainPoint(ViSession(vi), byref(remain))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(remain.value)

    def GetUserWaveformStatus(self, vi):
        dataStatus = ViInt32()
        executeStatus = ViInt32()
        _status = self.dll.chr63200A_GetUserWaveformStatus(ViSession(vi), byref(dataStatus), byref(executeStatus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        dataStatus = int(dataStatus.value)
        executeStatus = int(executeStatus.value)
        return dataStatus, executeStatus

    def ClearUserWaveform(self, vi):
        clearStatus = ViInt32()
        _status = self.dll.chr63200A_ClearUserWaveform(ViSession(vi), byref(clearStatus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(clearStatus.value)

    def ConfigureVoltageSpecification(self, vi, lowLevelVoltage, centerLevelVoltage, highLevelVoltage):
        _status = self.dll.chr63200A_ConfigureVoltageSpecification(
            ViSession(vi), ViReal64(lowLevelVoltage), ViReal64(centerLevelVoltage), ViReal64(highLevelVoltage)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCurrentSpecification(self, vi, lowLevelCurrent, centerLevelCurrent, highLevelCurrent):
        _status = self.dll.chr63200A_ConfigureCurrentSpecification(
            ViSession(vi), ViReal64(lowLevelCurrent), ViReal64(centerLevelCurrent), ViReal64(highLevelCurrent)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePowerSpecification(self, vi, lowLevelPower, centerLevelPower, highLevelPower):
        _status = self.dll.chr63200A_ConfigurePowerSpecification(
            ViSession(vi), ViReal64(lowLevelPower), ViReal64(centerLevelPower), ViReal64(highLevelPower)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ParallelAndSynchronous(self, vi, enableParallel, parallelType, syncType):
        _status = self.dll.chr63200A_ParallelAndSynchronous(
            ViSession(vi), ViInt32(enableParallel), ViInt32(parallelType), ViInt32(syncType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemSetup(self, vi, sound, enterKey):
        _status = self.dll.chr63200A_SystemSetup(ViSession(vi), ViInt32(sound), ViInt32(enterKey))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LoadSetup(self, vi, latchReset, latch, von, voff, shortKey, autoOn):
        _status = self.dll.chr63200A_LoadSetup(
            ViSession(vi),
            ViInt32(latchReset),
            ViInt32(latch),
            ViReal64(von),
            ViReal64(voff),
            ViInt32(shortKey),
            ViInt32(autoOn),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MeasurementSetting(self, vi, sign, windowTime):
        _status = self.dll.chr63200A_MeasurementSetting(ViSession(vi), ViInt32(sign), ViReal64(windowTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DIO(self, vi, DI1Type, DO1Type, DO1, DI2Type, DO2Type, DO2):
        _status = self.dll.chr63200A_DIO(
            ViSession(vi),
            ViInt32(DI1Type),
            ViInt32(DO1Type),
            ViBoolean(DO1),
            ViInt32(DI2Type),
            ViInt32(DO2Type),
            ViBoolean(DO2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
