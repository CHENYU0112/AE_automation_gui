from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .chr632xxa_dllwrap import *


class chr632xxa(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = chr632xxa_dllwrap()
        self._vi: int = None
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self) -> bool:
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self) -> str:
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName: str, IdQuery: bool, Reset: bool, OptionString: str = ""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :param Reset: Specifies whether to reset the instrument.
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName: str, IDQuery: bool, resetDevice: bool) -> int:
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def GetNextCoercionRecord(self, bufferSize: int) -> str:
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def LockSession(self) -> bool:
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self) -> bool:
        return self._dllwrap.UnlockSession(self._vi)

    def error_query(self) -> tuple[int, str]:
        return self._dllwrap.error_query(self._vi)

    def GetError(self, bufferSize: int) -> tuple[int, str]:
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        return self._dllwrap.ClearError(self._vi)

    def error_message(self, errorCode: int) -> str:
        return self._dllwrap.error_message(self._vi, errorCode)

    def GetErrorInfo(self) -> tuple[int, int, str]:
        return self._dllwrap.GetErrorInfo(self._vi)

    def ClearErrorInfo(self):
        return self._dllwrap.ClearErrorInfo(self._vi)

    def GetNextInterchangeWarning(self, bufferSize: int) -> str:
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def InvalidateAllAttributes(self):
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def reset(self):
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self) -> tuple[int, str]:
        return self._dllwrap.self_test(self._vi)

    def revision_query(self) -> tuple[str, str]:
        return self._dllwrap.revision_query(self._vi)

    def Disable(self):
        return self._dllwrap.Disable(self._vi)

    def WriteInstrData(self, writeBuffer: str):
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes: int) -> tuple[str, int]:
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def GetAttributeViInt32(self, channelName: str, attribute: int) -> int:
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName: str, attribute: int) -> float:
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName: str, attribute: int, bufSize: int) -> str:
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName: str, attribute: int) -> int:
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName: str, attribute: int) -> bool:
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetAttributeViInt32(self, channelName: str, attribute: int, value: int):
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName: str, attribute: int, value: float):
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName: str, attribute: int, value: str):
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName: str, attribute: int, value: int):
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName: str, attribute: int, value: bool):
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName: str, attribute: int, value: int):
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName: str, attribute: int, value: float):
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName: str, attribute: int, value: str):
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName: str, attribute: int, value: int):
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName: str, attribute: int, value: bool):
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)

    def Abort(self):
        return self._dllwrap.Abort(self._vi)

    def Fetch(self, item: int) -> float:
        return self._dllwrap.Fetch(self._vi, item)

    def ElectronicLoadState(self, trigger: bool, shortState: bool, clear: bool) -> list[bool]:
        return self._dllwrap.ElectronicLoadState(self._vi, trigger, shortState, clear)

    def SynchronousRun(self, run: bool):
        return self._dllwrap.SynchronousRun(self._vi, run)

    def Measure(self, inputPort: int, item: int) -> float:
        return self._dllwrap.Measure(self._vi, inputPort, item)

    def ProtectionTestResult(self, item: int) -> tuple[int, float, float]:
        return self._dllwrap.ProtectionTestResult(self._vi, item)

    def OperatingMode(self, mode: int, level: int):
        return self._dllwrap.OperatingMode(self._vi, mode, level)

    def SpecificationJudgment(self, item: int) -> str:
        return self._dllwrap.SpecificationJudgment(self._vi, item)

    def DigitizingInitiate(self):
        return self._dllwrap.DigitizingInitiate(self._vi)

    def DigitizingAbort(self):
        return self._dllwrap.DigitizingAbort(self._vi)

    def DigitizingSamplingTime(self, time: float):
        return self._dllwrap.DigitizingSamplingTime(self._vi, time)

    def DigitizingSamplingPoint(self, point: int):
        return self._dllwrap.DigitizingSamplingPoint(self._vi, point)

    def DigitizingTrigger(self, state: int):
        return self._dllwrap.DigitizingTrigger(self._vi, state)

    def DigitizingTriggerPoint(self, point: int):
        return self._dllwrap.DigitizingTriggerPoint(self._vi, point)

    def DigitizingTriggerSource(self, source: int):
        return self._dllwrap.DigitizingTriggerSource(self._vi, source)

    def DigitizingTriggerStatus(self) -> int:
        return self._dllwrap.DigitizingTriggerStatus(self._vi)

    def DigitizingWaveform(self, returnItem: int) -> list[float]:
        return self._dllwrap.DigitizingWaveform(self._vi, returnItem)

    def ConfigureCCModeMeasureRange(self, measureRange: int):
        return self._dllwrap.ConfigureCCModeMeasureRange(self._vi, measureRange)

    def ConfigureCCModeLoadValue(self, loadValue: float):
        return self._dllwrap.ConfigureCCModeLoadValue(self._vi, loadValue)

    def ConfigureCCModeSlewRate(self, fallingSlewRate: float, risingSlewRate: float):
        return self._dllwrap.ConfigureCCModeSlewRate(self._vi, fallingSlewRate, risingSlewRate)

    def ConfigureCRModeMeasureRange(self, measureRange: int):
        return self._dllwrap.ConfigureCRModeMeasureRange(self._vi, measureRange)

    def ConfigureCRModeLoadValue(self, loadValue: float):
        return self._dllwrap.ConfigureCRModeLoadValue(self._vi, loadValue)

    def ConfigureCRModeSlewRate(self, fallingSlewRate: float, risingSlewRate: float):
        return self._dllwrap.ConfigureCRModeSlewRate(self._vi, fallingSlewRate, risingSlewRate)

    def ConfigureCVModeMeasureRange(self, measureRange: int):
        return self._dllwrap.ConfigureCVModeMeasureRange(self._vi, measureRange)

    def ConfigureCVModeLoadValue(self, loadValue: float):
        return self._dllwrap.ConfigureCVModeLoadValue(self._vi, loadValue)

    def ConfigureCVModeCurrentLimit(self, currentLimit: float):
        return self._dllwrap.ConfigureCVModeCurrentLimit(self._vi, currentLimit)

    def ConfigureCVModeResponseSpeed(self, responseSpeed: int):
        return self._dllwrap.ConfigureCVModeResponseSpeed(self._vi, responseSpeed)

    def ConfigureCPModeMeasureRange(self, measureRange: int):
        return self._dllwrap.ConfigureCPModeMeasureRange(self._vi, measureRange)

    def ConfigureCPModeLoadValue(self, loadValue: float):
        return self._dllwrap.ConfigureCPModeLoadValue(self._vi, loadValue)

    def ConfigureCPModeSlewRate(self, fallingSlewRate: float, risingSlewRate: float):
        return self._dllwrap.ConfigureCPModeSlewRate(self._vi, fallingSlewRate, risingSlewRate)

    def ConfigureCCDModeMeasureRange(self, measureRange: int):
        return self._dllwrap.ConfigureCCDModeMeasureRange(self._vi, measureRange)

    def ConfigureCCDModeRepeat(self, repeat: int):
        return self._dllwrap.ConfigureCCDModeRepeat(self._vi, repeat)

    def ConfigureCCDModeSlewRate(self, fallingSlewRate: float, risingSlewRate: float):
        return self._dllwrap.ConfigureCCDModeSlewRate(self._vi, fallingSlewRate, risingSlewRate)

    def ConfigureCCDModeLoadValue(self, l1: float, l2: float):
        return self._dllwrap.ConfigureCCDModeLoadValue(self._vi, l1, l2)

    def ConfigureCCDModeTime(self, t1: float, t2: float):
        return self._dllwrap.ConfigureCCDModeTime(self._vi, t1, t2)

    def ConfigureCRDModeMeasureRange(self, measureRange: int):
        return self._dllwrap.ConfigureCRDModeMeasureRange(self._vi, measureRange)

    def ConfigureCRDModeRepeat(self, repeat: int):
        return self._dllwrap.ConfigureCRDModeRepeat(self._vi, repeat)

    def ConfigureCRDModeSlewRate(self, fallingSlewRate: float, risingSlewRate: float):
        return self._dllwrap.ConfigureCRDModeSlewRate(self._vi, fallingSlewRate, risingSlewRate)

    def ConfigureCRDModeLoadValue(self, l1: float, l2: float):
        return self._dllwrap.ConfigureCRDModeLoadValue(self._vi, l1, l2)

    def ConfigureCRDModeTime(self, t1: float, t2: float):
        return self._dllwrap.ConfigureCRDModeTime(self._vi, t1, t2)

    def ConfigureAutoModeVoltage(self, voltage: float):
        return self._dllwrap.ConfigureAutoModeVoltage(self._vi, voltage)

    def ConfigureAutoModeResistance(self, resistance: float):
        return self._dllwrap.ConfigureAutoModeResistance(self._vi, resistance)

    def ConfigureAutoModeCurrent(self, current: float):
        return self._dllwrap.ConfigureAutoModeCurrent(self._vi, current)

    def ConfigureAutoModePower(self, power: float):
        return self._dllwrap.ConfigureAutoModePower(self._vi, power)

    def ConfigureBatteryModeRunMode(self, mode: int):
        return self._dllwrap.ConfigureBatteryModeRunMode(self._vi, mode)

    def ConfigureBatteryModeLoadValue(self, loadValue: float):
        return self._dllwrap.ConfigureBatteryModeLoadValue(self._vi, loadValue)

    def ConfigureBatteryModeSlewRate(self, fallingSlewRate: float, risingSlewRate: float):
        return self._dllwrap.ConfigureBatteryModeSlewRate(self._vi, fallingSlewRate, risingSlewRate)

    def ConfigureBatteryModeEndVoltage(self, endVoltage: float):
        return self._dllwrap.ConfigureBatteryModeEndVoltage(self._vi, endVoltage)

    def ConfigureBatteryModeTimeout(self, timeout: float):
        return self._dllwrap.ConfigureBatteryModeTimeout(self._vi, timeout)

    def ConfigureBatteryModeMeasureRange(self, measureRange: int):
        return self._dllwrap.ConfigureBatteryModeMeasureRange(self._vi, measureRange)

    def SelectProgram(self, programNumber: int):
        return self._dllwrap.SelectProgram(self._vi, programNumber)

    def ConfigureProgramType(self, type: int, chain: int, repeat: int, sequence: int):
        return self._dllwrap.ConfigureProgramType(self._vi, type, chain, repeat, sequence)

    def SelectSequence(self, sequenceIndex: int):
        return self._dllwrap.SelectSequence(self._vi, sequenceIndex)

    def ConfigureProgramTriggerMode(self, triggerMode: int):
        return self._dllwrap.ConfigureProgramTriggerMode(self._vi, triggerMode)

    def ConfigureProgramRunMode(self, runMode: int, modeRange: int):
        return self._dllwrap.ConfigureProgramRunMode(self._vi, runMode, modeRange)

    def ConfigureProgramListValue(self, loadValue: float):
        return self._dllwrap.ConfigureProgramListValue(self._vi, loadValue)

    def ConfigureProgramStepValue(self, startValue: float, endValue: float):
        return self._dllwrap.ConfigureProgramStepValue(self._vi, startValue, endValue)

    def ConfigureProgramSlewRate(self, risingSlewRate: float, fallingSlewRate: float):
        return self._dllwrap.ConfigureProgramSlewRate(self._vi, risingSlewRate, fallingSlewRate)

    def ConfigureProgramDwellTime(self, dwellTime: float):
        return self._dllwrap.ConfigureProgramDwellTime(self._vi, dwellTime)

    def ConfigureProgramSpecification(self, VH: float, VL: float, IH: float, IL: float, PH: float, PL: float):
        return self._dllwrap.ConfigureProgramSpecification(self._vi, VH, VL, IH, IL, PH, PL)

    def ConfigureProgramDelayTime(self, delayTime: float):
        return self._dllwrap.ConfigureProgramDelayTime(self._vi, delayTime)

    def SaveProgram(self):
        return self._dllwrap.SaveProgram(self._vi)

    def GetProgramStates(self) -> tuple[int, int, int, int]:
        return self._dllwrap.GetProgramStates(self._vi)

    def ClearSequence(self):
        return self._dllwrap.ClearSequence(self._vi)

    def FailOfSequence(self) -> str:
        return self._dllwrap.FailOfSequence(self._vi)

    def RemainSequence(self) -> int:
        return self._dllwrap.RemainSequence(self._vi)

    def SpecificationOfSequence(self, parameter: int) -> list[float]:
        return self._dllwrap.SpecificationOfSequence(self._vi, parameter)

    def StartSpecificationTest(self, enable: bool, unit: int):
        return self._dllwrap.StartSpecificationTest(self._vi, enable, unit)

    def ConfigureCVCCModeResponse(self, response: int):
        return self._dllwrap.ConfigureCVCCModeResponse(self._vi, response)

    def ConfigureCVCCModeVoltage(self, voltage: float):
        return self._dllwrap.ConfigureCVCCModeVoltage(self._vi, voltage)

    def ConfigureCVCCModeCurrent(self, current: float):
        return self._dllwrap.ConfigureCVCCModeCurrent(self._vi, current)

    def ConfigureCRCCModeResistance(self, resistance: float):
        return self._dllwrap.ConfigureCRCCModeResistance(self._vi, resistance)

    def ConfigureCRCCModeCurrent(self, current: float):
        return self._dllwrap.ConfigureCRCCModeCurrent(self._vi, current)

    def ConfigureCVCRModeResistance(self, resistance: float):
        return self._dllwrap.ConfigureCVCRModeResistance(self._vi, resistance)

    def ConfigureCVCRModeVoltage(self, voltage: float):
        return self._dllwrap.ConfigureCVCRModeVoltage(self._vi, voltage)

    def ConfigureOCPModeLatch(self, latch: int):
        return self._dllwrap.ConfigureOCPModeLatch(self._vi, latch)

    def ConfigureOCPModeStep(self, step: int):
        return self._dllwrap.ConfigureOCPModeStep(self._vi, step)

    def ConfigureOCPModeLoadValue(self, startValue: float, endValue: float):
        return self._dllwrap.ConfigureOCPModeLoadValue(self._vi, startValue, endValue)

    def ConfigureOCPModeDwellTime(self, dwellTime: float):
        return self._dllwrap.ConfigureOCPModeDwellTime(self._vi, dwellTime)

    def ConfigureOCPModeTriggerVoltage(self, triggerVoltage: float):
        return self._dllwrap.ConfigureOCPModeTriggerVoltage(self._vi, triggerVoltage)

    def ConfigureOCPModeSpecification(self, highLevelCurrent: float, lowLevelCurrent: float):
        return self._dllwrap.ConfigureOCPModeSpecification(self._vi, highLevelCurrent, lowLevelCurrent)

    def ConfigureOPPModeLatch(self, latch: int):
        return self._dllwrap.ConfigureOPPModeLatch(self._vi, latch)

    def ConfigureOPPModeStep(self, step: int):
        return self._dllwrap.ConfigureOPPModeStep(self._vi, step)

    def ConfigureOPPModeLoadValue(self, startValue: float, endValue: float):
        return self._dllwrap.ConfigureOPPModeLoadValue(self._vi, startValue, endValue)

    def ConfigureOPPModeDwellTime(self, dwellTime: float):
        return self._dllwrap.ConfigureOPPModeDwellTime(self._vi, dwellTime)

    def ConfigureOPPModeTriggerVoltage(self, triggerVoltage: float):
        return self._dllwrap.ConfigureOPPModeTriggerVoltage(self._vi, triggerVoltage)

    def ConfigureOPPModeSpecification(self, highLevelPower: float, lowLevelPower: float):
        return self._dllwrap.ConfigureOPPModeSpecification(self._vi, highLevelPower, lowLevelPower)

    def ConfigureSWDModeDCCurrent(self, DCCurrent: float):
        return self._dllwrap.ConfigureSWDModeDCCurrent(self._vi, DCCurrent)

    def ConfigureSWDModeACCurrent(self, ACCurrent: float):
        return self._dllwrap.ConfigureSWDModeACCurrent(self._vi, ACCurrent)

    def ConfigureSWDModeFrequency(self, frequency: float):
        return self._dllwrap.ConfigureSWDModeFrequency(self._vi, frequency)

    def ConfigureSWDModeMeasureRange(self, measureRange: int):
        return self._dllwrap.ConfigureSWDModeMeasureRange(self._vi, measureRange)

    def ConfigureSweepModeCurrent(self, maxCurrent: float, minCurrent: float):
        return self._dllwrap.ConfigureSweepModeCurrent(self._vi, maxCurrent, minCurrent)

    def ConfigureSweepModeFrequency(self, startFrequency: float, endFrequency: float, stepFrequency: float):
        return self._dllwrap.ConfigureSweepModeFrequency(self._vi, startFrequency, endFrequency, stepFrequency)

    def ConfigureSweepModeDwellTime(self, dwellTime: float):
        return self._dllwrap.ConfigureSweepModeDwellTime(self._vi, dwellTime)

    def ConfigureSweepModeDuty(self, duty: float):
        return self._dllwrap.ConfigureSweepModeDuty(self._vi, duty)

    def ConfigureSweepModeSlewRate(self, fallingSlewRate: float, risingSlewRate: float):
        return self._dllwrap.ConfigureSweepModeSlewRate(self._vi, fallingSlewRate, risingSlewRate)

    def ConfigureSweepModeMeasureRange(self, measureRange: int):
        return self._dllwrap.ConfigureSweepModeMeasureRange(self._vi, measureRange)

    def ConfigureCZMode(self, item: int, itemValue: float):
        return self._dllwrap.ConfigureCZMode(self._vi, item, itemValue)

    def ConfigureEXTWMode(self, mode: int, measureRange: int):
        return self._dllwrap.ConfigureEXTWMode(self._vi, mode, measureRange)

    def SelectUserWaveform(self, number: int):
        return self._dllwrap.SelectUserWaveform(self._vi, number)

    def ConfigureUserWaveformData(self, interval: float, repeat: int, chain: int, interpolation: int):
        return self._dllwrap.ConfigureUserWaveformData(self._vi, interval, repeat, chain, interpolation)

    def ConfigureUserWaveformPoint(self) -> str:
        return self._dllwrap.ConfigureUserWaveformPoint(self._vi)

    def GetUserWaveformRemainPoint(self) -> int:
        return self._dllwrap.GetUserWaveformRemainPoint(self._vi)

    def GetUserWaveformStatus(self) -> tuple[int, int]:
        return self._dllwrap.GetUserWaveformStatus(self._vi)

    def ClearUserWaveform(self) -> int:
        return self._dllwrap.ClearUserWaveform(self._vi)

    def ConfigureVoltageSpecification(self, lowLevelVoltage: float, centerLevelVoltage: float, highLevelVoltage: float):
        return self._dllwrap.ConfigureVoltageSpecification(
            self._vi, lowLevelVoltage, centerLevelVoltage, highLevelVoltage
        )

    def ConfigureCurrentSpecification(self, lowLevelCurrent: float, centerLevelCurrent: float, highLevelCurrent: float):
        return self._dllwrap.ConfigureCurrentSpecification(
            self._vi, lowLevelCurrent, centerLevelCurrent, highLevelCurrent
        )

    def ConfigurePowerSpecification(self, lowLevelPower: float, centerLevelPower: float, highLevelPower: float):
        return self._dllwrap.ConfigurePowerSpecification(self._vi, lowLevelPower, centerLevelPower, highLevelPower)

    def ParallelAndSynchronous(self, enableParallel: int, parallelType: int, syncType: int):
        return self._dllwrap.ParallelAndSynchronous(self._vi, enableParallel, parallelType, syncType)

    def SystemSetup(self, sound: int, enterKey: int):
        return self._dllwrap.SystemSetup(self._vi, sound, enterKey)

    def LoadSetup(self, latchReset: int, latch: int, von: float, voff: float, shortKey: int, autoOn: int):
        return self._dllwrap.LoadSetup(self._vi, latchReset, latch, von, voff, shortKey, autoOn)

    def MeasurementSetting(self, sign: int, windowTime: float):
        return self._dllwrap.MeasurementSetting(self._vi, sign, windowTime)

    def DIO(self, DI1Type: int, DO1Type: int, DO1: bool, DI2Type: int, DO2Type: int, DO2: bool):
        return self._dllwrap.DIO(self._vi, DI1Type, DO1Type, DO1, DI2Type, DO2Type, DO2)
