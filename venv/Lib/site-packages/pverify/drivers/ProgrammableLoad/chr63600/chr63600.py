from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .chr63600_dllwrap import *


class chr63600(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = chr63600_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def GetNextCoercionRecord(self, bufferSize):
        """
        This function enables the instrument driver user to obtain
        the coercion information associated with the IVI session.
        This function retrieves and clears the oldest instance in which
        the instrument driver coerced a value the instrument driver user
        specified to another value.
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def LockSession(self):
        """
        These functions enable the instrument driver user to lock the
        session around a sequence of driver calls during which other
        execution threads must not disturb the instrument state.
        """
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """
        These functions enable the instrument driver user to lock the
        session around a sequence of driver calls during which other
        execution threads must not disturb the instrument state.
        """
        return self._dllwrap.UnlockSession(self._vi)

    def error_query(self):
        """
        This function queries the instrument error queue and returns
        the result.
        """
        return self._dllwrap.error_query(self._vi)

    def GetError(self, bufferSize):
        """
        These functions enable the instrument driver user to
        get or clear the error information the driver associates with the
        IVI session.
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def GetErrorInfo(self):
        """
        These functions enable the instrument driver user to
        get or clear the error information the driver associates with the
        IVI session.
        """
        return self._dllwrap.GetErrorInfo(self._vi)

    def ClearErrorInfo(self):
        """
        These functions enable the instrument driver user to
        get or clear the error information the driver associates with the
        IVI session.
        """
        return self._dllwrap.ClearErrorInfo(self._vi)

    def error_message(self, errorCode):
        """
        This function translates the error codes returned by this
        instrument driver into user-readable strings.
        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def FetchVIPAll(self, v_I_PSelect):
        """
        This function returns the voltage, current or power measured at
        the input of all load modules.
        :param v_I_PSelect:
        :type v_I_PSelect:
        """
        return self._dllwrap.FetchVIPAll(self._vi, v_I_PSelect)

    def FetchTming(self, AHWHTIME):
        """
        This function returns the ampere-hour, watt-hour or time
        measured in timing mode.
        :param AHWHTIME:
        :type AHWHTIME:
        """
        return self._dllwrap.FetchTming(self._vi, AHWHTIME)

    def FetchStatus(self):
        """
        This function returns the real time status of the load module.
        """
        return self._dllwrap.FetchStatus(self._vi)

    def FetchReacRes(self, reactanceResistance):
        """
        This function returns the reactance or resistance measured in AC
        impedance mode.
        :param reactanceResistance:
        :type reactanceResistance:
        """
        return self._dllwrap.FetchReacRes(self._vi, reactanceResistance)

    def FetchFreqPara(self, freqParameters):
        """
        This function returns the frequency measured in frequency sweep
        mode or AC impedance mode.
        :param freqParameters:
        :type freqParameters:
        """
        return self._dllwrap.FetchFreqPara(self._vi, freqParameters)

    def FetchCurrPara(self, currentParameters):
        """
        This function returns the current or peak+ current reading.
        :param currentParameters:
        :type currentParameters:
        """
        return self._dllwrap.FetchCurrPara(self._vi, currentParameters)

    def FetchVoltPara(self, voltageParameters):
        """
        This function returns the V, Vmax, Vmin, Vpk+ or Vpk- reading.
        :param voltageParameters:
        :type voltageParameters:
        """
        return self._dllwrap.FetchVoltPara(self._vi, voltageParameters)

    def FetchPower(self):
        """
        This function returns the power measured at e-load input.
        """
        return self._dllwrap.FetchPower(self._vi)

    def MeasInput(self, input):
        """
        This function selects the input port of the e-load to measure
        voltage.
        :param input:
        :type input:
        """
        return self._dllwrap.MeasInput(self._vi, input)

    def MeasVIP(self, v_I_PSelect):
        """
        This function returns the real time voltage, current or power
        measured at the load module input.
        :param v_I_PSelect:
        :type v_I_PSelect:
        """
        return self._dllwrap.MeasVIP(self._vi, v_I_PSelect)

    def MeasVIPAll(self, v_I_PSelect):
        """
        This function returns the real time voltage, current or power
        measured at the input of all load modules.
        :param v_I_PSelect:
        :type v_I_PSelect:
        """
        return self._dllwrap.MeasVIPAll(self._vi, v_I_PSelect)

    def reset(self):
        """
        This function resets the instrument.
        """
        return self._dllwrap.reset(self._vi)

    def self_test(self):
        """
        This function executes the instrument self-test and returns the
        result.
        """
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """
        This function returns the driver and instrument revisions.
        """
        return self._dllwrap.revision_query(self._vi)

    def WriteInstrData(self, writeBuffer):
        """
        This functions enable the instrument driver user to
        write  commands directly to and from the instrument.
        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """
        This functions enable the instrument driver user to
        read  commands directly to and from the instrument.
        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def GetAttributeViInt32(self, channelName, attribute):
        """
        This functions enable the instrument driver user to get
        attribute values directly.  There are typesafe versions for
        ViInt32 attributes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName, attribute):
        """
        This functions enable the instrument driver user to get
        attribute values directly.  There are typesafe versions for
        ViReal64 attributes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName, attribute, bufSize):
        """
        This functions enable the instrument driver user to get
        attribute values directly.  There are typesafe versions for
        ViString attributes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName, attribute):
        """
        This functions enable the instrument driver user to get
        attribute values directly.  There are typesafe versions for
        ViSession attributes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName, attribute):
        """
        This functions enable the instrument driver user to get
        attribute values directly.  There are typesafe versions for
        ViBoolean attributes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetChannel(self, channel):
        """
        This function selects a channel of which the coming
        channel-specific command will be received and executed.
        :param channel:
        :type channel:
        """
        return self._dllwrap.SetChannel(self._vi, channel)

    def SetCC(self, currentLevel, risingSlewRate, fallingSlewRate):
        """
        This function sets CC parameters to the e-load.
        :param currentLevel:
        :type currentLevel:
        :param risingSlewRate:
        :type risingSlewRate:
        :param fallingSlewRate:
        :type fallingSlewRate:
        """
        return self._dllwrap.SetCC(self._vi, currentLevel, risingSlewRate, fallingSlewRate)

    def SetCR(self, resistanceLevel):
        """
        This function sets CR parameters to the e-load.
        :param resistanceLevel:
        :type resistanceLevel:
        """
        return self._dllwrap.SetCR(self._vi, resistanceLevel)

    def SetCV(self, voltageLevel, iLimit, response, CVType):
        """
        This function sets CV parameters to the e-load.
        :param voltageLevel:
        :type voltageLevel:
        :param iLimit:
        :type iLimit:
        :param response:
        :type response:
        :param CVType:
        :type CVType:
        """
        return self._dllwrap.SetCV(self._vi, voltageLevel, iLimit, response, CVType)

    def SetCP(self, powerLevel, risingSlewRate, fallingSlewRate):
        """
        This function sets CP parameters to the e-load.
        :param powerLevel:
        :type powerLevel:
        :param risingSlewRate:
        :type risingSlewRate:
        :param fallingSlewRate:
        :type fallingSlewRate:
        """
        return self._dllwrap.SetCP(self._vi, powerLevel, risingSlewRate, fallingSlewRate)

    def SetCZ(self, CL, RL, ls, rs):
        """
        This function sets CZ parameters to the e-load.
        :param CL:
        :type CL:
        :param RL:
        :type RL:
        :param ls:
        :type ls:
        :param rs:
        :type rs:
        """
        return self._dllwrap.SetCZ(self._vi, CL, RL, ls, rs)

    def SetCCD(
        self,
        currentLevel1,
        currentLevel2,
        t1,
        t2,
        risingSlewRate,
        fallingSlewRate,
        repeatTimes,
    ):
        """
        This function sets CCD parameters to the e-load.
        :param currentLevel1:
        :type currentLevel1:
        :param currentLevel2:
        :type currentLevel2:
        :param t1:
        :type t1:
        :param t2:
        :type t2:
        :param risingSlewRate:
        :type risingSlewRate:
        :param fallingSlewRate:
        :type fallingSlewRate:
        :param repeatTimes:
        :type repeatTimes:
        """
        return self._dllwrap.SetCCD(
            self._vi,
            currentLevel1,
            currentLevel2,
            t1,
            t2,
            risingSlewRate,
            fallingSlewRate,
            repeatTimes,
        )

    def SetCCFS(
        self,
        i_MAX,
        i_MIN,
        f_START,
        f_END,
        f_STEP,
        DWELL,
        dutyCycle,
        risingSlewRate,
        fallingSlewRate,
    ):
        """
        This function sets CCFS parameters to the e-load.
        :param i_MAX:
        :type i_MAX:
        :param i_MIN:
        :type i_MIN:
        :param f_START:
        :type f_START:
        :param f_END:
        :type f_END:
        :param f_STEP:
        :type f_STEP:
        :param DWELL:
        :type DWELL:
        :param dutyCycle:
        :type dutyCycle:
        :param risingSlewRate:
        :type risingSlewRate:
        :param fallingSlewRate:
        :type fallingSlewRate:
        """
        return self._dllwrap.SetCCFS(
            self._vi,
            i_MAX,
            i_MIN,
            f_START,
            f_END,
            f_STEP,
            DWELL,
            dutyCycle,
            risingSlewRate,
            fallingSlewRate,
        )

    def SetTIMING(
        self,
        mode,
        value,
        risingSlewRate,
        fallingSlewRate,
        triggerMode,
        v_TRG_START,
        v_TRG_END,
        END_V,
        timeOut,
    ):
        """
        This function sets TIMING parameters to the e-load.
        :param mode:
        :type mode:
        :param value:
        :type value:
        :param risingSlewRate:
        :type risingSlewRate:
        :param fallingSlewRate:
        :type fallingSlewRate:
        :param triggerMode:
        :type triggerMode:
        :param v_TRG_START:
        :type v_TRG_START:
        :param v_TRG_END:
        :type v_TRG_END:
        :param END_V:
        :type END_V:
        :param timeOut:
        :type timeOut:
        """
        return self._dllwrap.SetTIMING(
            self._vi,
            mode,
            value,
            risingSlewRate,
            fallingSlewRate,
            triggerMode,
            v_TRG_START,
            v_TRG_END,
            END_V,
            timeOut,
        )

    def SetOCP(self, startCurrent, endCurrent, step, dwell, triggerVoltage, spec_L, spec_H):
        """
        This function sets OCP parameters to the e-load.
        :param startCurrent:
        :type startCurrent:
        :param endCurrent:
        :type endCurrent:
        :param step:
        :type step:
        :param dwell:
        :type dwell:
        :param triggerVoltage:
        :type triggerVoltage:
        :param spec_L:
        :type spec_L:
        :param spec_H:
        :type spec_H:
        """
        return self._dllwrap.SetOCP(
            self._vi,
            startCurrent,
            endCurrent,
            step,
            dwell,
            triggerVoltage,
            spec_L,
            spec_H,
        )

    def SetAllRun(self, allRun):
        """
        This function sets the all run state to the e-load.
        :param allRun:
        :type allRun:
        """
        return self._dllwrap.SetAllRun(self._vi, allRun)

    def SetAutoON(self, autoLoadOn):
        """
        This function sets the load module to perform auto load on
        during power-on.
        :param autoLoadOn:
        :type autoLoadOn:
        """
        return self._dllwrap.SetAutoON(self._vi, autoLoadOn)

    def SetExtWave(self, externalWaveform):
        """
        This function sets the external waveform function on/off.
        :param externalWaveform:
        :type externalWaveform:
        """
        return self._dllwrap.SetExtWave(self._vi, externalWaveform)

    def SetSound(self, sound):
        """
        This function sets the buzzer on/off to the e-load.
        :param sound:
        :type sound:
        """
        return self._dllwrap.SetSound(self._vi, sound)

    def SetVonLatch(self, latch):
        """
        This function sets the action type of Von to the e-load.
        :param latch:
        :type latch:
        """
        return self._dllwrap.SetVonLatch(self._vi, latch)

    def SetSignV(self, sign_ofVoltage):
        """
        This function sets the sign of voltage measurement to Plus/Minus.
        :param sign_ofVoltage:
        :type sign_ofVoltage:
        """
        return self._dllwrap.SetSignV(self._vi, sign_ofVoltage)

    def SetWindowTime(self, windowTime):
        """
        This function sets the time of measure over which the window
        calculation is to be performed.
        :param windowTime:
        :type windowTime:
        """
        return self._dllwrap.SetWindowTime(self._vi, windowTime)

    def RstVonLatch(self):
        """
        This function resets the Von signal of e-load.
        """
        return self._dllwrap.RstVonLatch(self._vi)

    def SetIR(
        self,
        maximumCurrent,
        ONTime,
        OFFTime,
        repeat,
        samplingTime,
        samplingPoint,
        triggerPoint,
    ):
        """
        This function sets IR parameters to the e-load.
        :param maximumCurrent:
        :type maximumCurrent:
        :param ONTime:
        :type ONTime:
        :param OFFTime:
        :type OFFTime:
        :param repeat:
        :type repeat:
        :param samplingTime:
        :type samplingTime:
        :param samplingPoint:
        :type samplingPoint:
        :param triggerPoint:
        :type triggerPoint:
        """
        return self._dllwrap.SetIR(
            self._vi,
            maximumCurrent,
            ONTime,
            OFFTime,
            repeat,
            samplingTime,
            samplingPoint,
            triggerPoint,
        )

    def IRWaveCap(self):
        """
        This function starts waveform data transmit from module to frame
        for IR mode.
        """
        return self._dllwrap.IRWaveCap(self._vi)

    def OCPResult(self):
        """
        This function returns the result of OCP test function.
        """
        return self._dllwrap.OCPResult(self._vi)

    def ProgSEQRemain(self):
        """
        This function returns the remains sequence of unused.
        """
        return self._dllwrap.ProgSEQRemain(self._vi)

    def ProgSEQFail(self):
        """
        This function returns the sequence of fail in specification.
        """
        return self._dllwrap.ProgSEQFail(self._vi)

    def ProgSEQClear(self, programFile):
        """
        This function clear all sequence in program file what specified.
        :param programFile:
        :type programFile:
        """
        return self._dllwrap.ProgSEQClear(self._vi, programFile)

    def ProgState(self):
        """
        This function returns the information of program running.
        """
        return self._dllwrap.ProgState(self._vi)

    def ProgSave(self):
        """
        This function save the program settings.
        """
        return self._dllwrap.ProgSave(self._vi)

    def ProgSelect(self, programNumber):
        """
        This function selects the program number which to be executed.
        :param programNumber:
        :type programNumber:
        """
        return self._dllwrap.ProgSelect(self._vi, programNumber)

    def ProgData(self):
        """
        This function sets the program parameters.
        """
        return self._dllwrap.ProgData(self._vi)

    def ProgDataList(self):
        """
        This function sets the list parameters in program.
        """
        return self._dllwrap.ProgDataList(self._vi)

    def ProgDataStep(self):
        """
        This function sets the step parameters in program.
        """
        return self._dllwrap.ProgDataStep(self._vi)

    def SetSpecVolt(self, center, high, low):
        """
        This function sets specification of voltage to the e-load.
        :param center:
        :type center:
        :param high:
        :type high:
        :param low:
        :type low:
        """
        return self._dllwrap.SetSpecVolt(self._vi, center, high, low)

    def SelectUserWaveform(self, number):
        """

        :param number:
        :type number:
        """
        return self._dllwrap.SelectUserWaveform(self._vi, number)

    def ConfigureUserWaveformData(self, interval, repeat, chain, interpolation):
        """

        :param interval:
        :type interval:
        :param repeat:
        :type repeat:
        :param chain:
        :type chain:
        :param interpolation:
        :type interpolation:
        """
        return self._dllwrap.ConfigureUserWaveformData(self._vi, interval, repeat, chain, interpolation)

    def SetPointFromCSV(self):
        """"""
        return self._dllwrap.SetPointFromCSV(self._vi)

    def ConfigureUserWaveformPoint(self):
        """"""
        return self._dllwrap.ConfigureUserWaveformPoint(self._vi)

    def GetUserWaveformRemainPoint(self):
        """"""
        return self._dllwrap.GetUserWaveformRemainPoint(self._vi)

    def GetUserWaveformStatus(self):
        """"""
        return self._dllwrap.GetUserWaveformStatus(self._vi)

    def ClearUserWaveform(self):
        """"""
        return self._dllwrap.ClearUserWaveform(self._vi)

    def SetSpecCurr(self, center, high, low):
        """
        This function sets specification of current to the e-load.
        :param center:
        :type center:
        :param high:
        :type high:
        :param low:
        :type low:
        """
        return self._dllwrap.SetSpecCurr(self._vi, center, high, low)

    def SetSpecPwr(self, center, high, low):
        """
        This function sets specification of power to the e-load.
        :param center:
        :type center:
        :param high:
        :type high:
        :param low:
        :type low:
        """
        return self._dllwrap.SetSpecPwr(self._vi, center, high, low)

    def QuerySpecVIP(self, v_I_PSelect):
        """
        This function returns the GO-NG result reference to voltage,
        current or power specification.
        :param v_I_PSelect:
        :type v_I_PSelect:
        """
        return self._dllwrap.QuerySpecVIP(self._vi, v_I_PSelect)

    def QuerySpecAll(self):
        """
        This function returns the GO-NG result reference to all channels
        specifications.
        """
        return self._dllwrap.QuerySpecAll(self._vi)

    def SetSpecTest(self, ON_OFF):
        """
        This function start or close all channel specification test.
        :param ON_OFF:
        :type ON_OFF:
        """
        return self._dllwrap.SetSpecTest(self._vi, ON_OFF)

    def SetSpecUnit(self, unit):
        """
        This function sets the specific entry mode to the e-load.
        :param unit:
        :type unit:
        """
        return self._dllwrap.SetSpecUnit(self._vi, unit)

    def SetStatusCHANEnable(self, registerValue):
        """
        This function mask to select which bit in the Event register is
        allowed to be summed into the corresponding channel bit for the
        Channel Summary Event register.
        :param registerValue:
        :type registerValue:
        """
        return self._dllwrap.SetStatusCHANEnable(self._vi, registerValue)

    def SetStatusCHANPTR(self, registerValue):
        """
        This function set programmable filters that determine 0-to-1
        transition in the Condition register will set the corresponding
        bit of the Event register.
        :param registerValue:
        :type registerValue:
        """
        return self._dllwrap.SetStatusCHANPTR(self._vi, registerValue)

    def SetStatusCHANNTR(self, registerValue):
        """
        This function set programmable filters that determine 1-to-0
        transition in the Condition register will set the corresponding
        bit of the Event register.
        :param registerValue:
        :type registerValue:
        """
        return self._dllwrap.SetStatusCHANNTR(self._vi, registerValue)

    def SetStatusCSUMEnable(self, registerValue):
        """
        This function mask to select which bit in the Channel Event
        register is allowed to be summed into the CSUM (Channel Summary)
        bit for the Status Byte register.
        :param registerValue:
        :type registerValue:
        """
        return self._dllwrap.SetStatusCSUMEnable(self._vi, registerValue)

    def SetStatusQUESEnable(self, registerValue):
        """
        This function mask to select which bit on the Event register is
        allowed to be summed into the QUES bit for the Status Byte
        register.
        :param registerValue:
        :type registerValue:
        """
        return self._dllwrap.SetStatusQUESEnable(self._vi, registerValue)

    def SetStatusQUESPTR(self, registerValue):
        """
        This function set programmable filters determine 0-to-1
        transition in the Condition register will set the corresponding
        bit of the Event register.
        :param registerValue:
        :type registerValue:
        """
        return self._dllwrap.SetStatusQUESPTR(self._vi, registerValue)

    def SetStatusQUESNTR(self, registerValue):
        """
        This function set programmable filters determine 1-to-0
        transition in the Condition register will set the corresponding
        bit of the Event register.
        :param registerValue:
        :type registerValue:
        """
        return self._dllwrap.SetStatusQUESNTR(self._vi, registerValue)

    def QueryCHANCond(self):
        """
        This function returns the real time channel status.
        """
        return self._dllwrap.QueryCHANCond(self._vi)

    def QueryCHANEvnet(self):
        """
        This function record all channel events that have occurred since
        last time the register was read, and reset the Channel Event
        register.
        """
        return self._dllwrap.QueryCHANEvnet(self._vi)

    def QueryCSUMEvnet(self):
        """
        This function indicate all channels of which an enabled
        STAT:CHAN Event has occurred since last time the register was
        read.
        """
        return self._dllwrap.QueryCSUMEvnet(self._vi)

    def QueryQUESCond(self):
        """
        This function returns real-time ("live") recording of
        Questionable data.
        """
        return self._dllwrap.QueryQUESCond(self._vi)

    def QueryQUESEvent(self):
        """
        This function record all questionable conditions that have
        occurred since last time the register was read.
        """
        return self._dllwrap.QueryQUESEvent(self._vi)

    def SetCLS(self):
        """
        This function clear the status of e-load.
        """
        return self._dllwrap.SetCLS(self._vi)

    def SetESE(self, enableRegister):
        """
        This function sets the standard event status enable register.
        :param enableRegister:
        :type enableRegister:
        """
        return self._dllwrap.SetESE(self._vi, enableRegister)

    def SetSRE(self, enableRegister):
        """
        This function sets the condition of the Service Request Enable
        register.
        :param enableRegister:
        :type enableRegister:
        """
        return self._dllwrap.SetSRE(self._vi, enableRegister)

    def QueryESR(self):
        """
        This function returns the e-load's standard event status
        register.
        """
        return self._dllwrap.QueryESR(self._vi)

    def QuerySTB(self):
        """
        This function returns the e-load's status byte register.
        """
        return self._dllwrap.QuerySTB(self._vi)

    def SetOPC(self):
        """
        This function causes the interface to set the OPC bit (bit 0) of
        the Standard Event Status register when the e-load has completed
        all pending operations.
        """
        return self._dllwrap.SetOPC(self._vi)

    def QueryOPC(self):
        """
        This function returns the e-load's operation complete status.
        """
        return self._dllwrap.QueryOPC(self._vi)

    def QueryRDT(self):
        """
        This function returns the types of e-load.
        """
        return self._dllwrap.QueryRDT(self._vi)

    def SetChannelActive(self, ON_OFF):
        """
        This function enable or disable the load module.
        :param ON_OFF:
        :type ON_OFF:
        """
        return self._dllwrap.SetChannelActive(self._vi, ON_OFF)

    def QueryChanID(self):
        """
        This function returns a string that contains the
        model number or name of the module.
        """
        return self._dllwrap.QueryChanID(self._vi)

    def SetCCVRange(self, voltageRange):
        """
        This function sets voltage measurement range in CC mode
        to the e-load.
        :param voltageRange:
        :type voltageRange:
        """
        return self._dllwrap.SetCCVRange(self._vi, voltageRange)

    def SetVon(self, von):
        """
        This function sets voltage of start to sink current to the e-load.
        :param von:
        :type von:
        """
        return self._dllwrap.SetVon(self._vi, von)

    def SetVoff(self, voff):
        """
        This function sets the voltage of stop to sink current in timing
        mode to the e-load.
        :param voff:
        :type voff:
        """
        return self._dllwrap.SetVoff(self._vi, voff)

    def SetParalleType(self, type):
        """
        Set Parall type of channel.
        :param type:
        :type type:
        """
        return self._dllwrap.SetParalleType(self._vi, type)

    def SetParalleState(self, enable):
        """
        Set parallel state.
        :param enable:
        :type enable:
        """
        return self._dllwrap.SetParalleState(self._vi, enable)

    def SetSynchronousChannel(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.SetSynchronousChannel(self._vi, channel)

    def SetSynchronousType(self, type):
        """

        :param type:
        :type type:
        """
        return self._dllwrap.SetSynchronousType(self._vi, type)

    def SetSynchronousMode(self, mode):
        """

        :param mode:
        :type mode:
        """
        return self._dllwrap.SetSynchronousMode(self._vi, mode)

    def IRGetWave(self, waveform, channel):
        """
        This function returns voltage or current waveform data from the
        e-load in binary format.
        :param waveform:
        :type waveform:
        """
        return self._dllwrap.IRGetWave(self._vi, waveform, channel)

    def SetDIGI(self, samplingTime, samplingPoint, triggerSource, triggerPoint):
        """
        This function sets digitizing parameters to the e-load.
        :param samplingTime:
        :type samplingTime:
        :param samplingPoint:
        :type samplingPoint:
        :param triggerSource:
        :type triggerSource:
        :param triggerPoint:
        :type triggerPoint:
        """
        return self._dllwrap.SetDIGI(self._vi, samplingTime, samplingPoint, triggerSource, triggerPoint)

    def SetDIGIAbort(self):
        """
        This function abort the digitizing function.
        """
        return self._dllwrap.SetDIGIAbort(self._vi)

    def SetDIGIInit(self):
        """
        This function starts the digitizing function to wait trigger
        signal.
        """
        return self._dllwrap.SetDIGIInit(self._vi)

    def DIGIWaveCap(self):
        """
        This function starts waveform data transmit from module to frame
        for digitizing function.
        """
        return self._dllwrap.DIGIWaveCap(self._vi)

    def DIGIGetWave(self, waveform, channel):
        """
        This function returns voltage or current waveform data from the
        e-load in binary format.
        :param waveform:
        :type waveform:
        """
        return self._dllwrap.DIGIGetWave(self._vi, waveform, channel)

    def DIGISetTrig(self, triggerState):
        """
        This function sets software trigger for digitizing function.
        :param triggerState:
        :type triggerState:
        """
        return self._dllwrap.DIGISetTrig(self._vi, triggerState)

    def DIGIQueryTrig(self):
        """
        This function returns the software trigger state for digitizing
        function.
        """
        return self._dllwrap.DIGIQueryTrig(self._vi)

    def SetLoad(self, ON_OFF):
        """
        This function makes the e-load active/on or inactive/off.
        :param ON_OFF:
        :type ON_OFF:
        """
        return self._dllwrap.SetLoad(self._vi, ON_OFF)

    def QueryLoadState(self):
        """
        This function returns the load state.
        """
        return self._dllwrap.QueryLoadState(self._vi)

    def QueryLoadProt(self):
        """
        This function returns the protection status of e-load.
        """
        return self._dllwrap.QueryLoadProt(self._vi)

    def LoadProtClear(self):
        """
        This function resets the protection status of e-load.
        """
        return self._dllwrap.LoadProtClear(self._vi)

    def SetShort(self, ON_OFF):
        """
        This function activate or inactivate short-circuited simulation.
        :param ON_OFF:
        :type ON_OFF:
        """
        return self._dllwrap.SetShort(self._vi, ON_OFF)

    def SetShortKey(self, shortKey):
        """
        This function sets the mode of short key to the e-load.
        :param shortKey:
        :type shortKey:
        """
        return self._dllwrap.SetShortKey(self._vi, shortKey)

    def Run(self):
        """
        This function sets all e-load to "ON".
        """
        return self._dllwrap.Run(self._vi)

    def Abort(self):
        """
        This function sets all e-load to "OFF".
        """
        return self._dllwrap.Abort(self._vi)

    def SynchronousRun(self, run):
        """

        :param run:
        :type run:
        """
        return self._dllwrap.SynchronousRun(self._vi, run)

    def SetMode(self, mode):
        """
        This function sets the operational mode for the e-load.
        :param mode:
        :type mode:
        """
        return self._dllwrap.SetMode(self._vi, mode)

    def SavePara(self, memoryLocation):
        """
        This function stores the present state of the single e-load and
        all channel states of multiple loads in a specified memory
        location.
        :param memoryLocation:
        :type memoryLocation:
        """
        return self._dllwrap.SavePara(self._vi, memoryLocation)

    def RecallPara(self, memoryLocation):
        """
        This function restores the e-load to a state that was previously
        stored in memory location.
        :param memoryLocation:
        :type memoryLocation:
        """
        return self._dllwrap.RecallPara(self._vi, memoryLocation)

    def SetAttributeViInt32(self, channelName, attribute, value):
        """
        This functions enable the instrument driver user to set
        attribute values directly.  There are typesafe versions for
        ViInt32 datatypes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName, attribute, value):
        """
        This functions enable the instrument driver user to set
        attribute values directly.  There are typesafe versions for
        ViReal64 datatypes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName, attribute, value):
        """
        This functions enable the instrument driver user to set
        attribute values directly.  There are typesafe versions for
        ViString datatypes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName, attribute, value):
        """
        This functions enable the instrument driver user to set
        attribute values directly.  There are typesafe versions for
        ViSession datatypes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName, attribute, value):
        """
        This functions enable the instrument driver user to set
        attribute values directly.  There are typesafe versions for
        ViBoolean datatypes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName, attribute, value):
        """
        This function enable the instrument driver user to check
        attribute values directly.  These functions check the value you
        specify even if you set the CHR63600_ATTR_RANGE_CHECK
        attribute to VI_FALSE.  There are typesafe versions for ViInt32,
        datatypes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName, attribute, value):
        """
        This function enable the instrument driver user to check
        attribute values directly.  These functions check the value you
        specify even if you set the CHR63600_ATTR_RANGE_CHECK
        attribute to VI_FALSE.  There are typesafe versions for
        ViReal64 datatypes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName, attribute, value):
        """
        This function enable the instrument driver user to check
        attribute values directly.  These functions check the value you
        specify even if you set the CHR63600_ATTR_RANGE_CHECK
        attribute to VI_FALSE.  There are typesafe versions for
        ViString datatypes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName, attribute, value):
        """
        This function enable the instrument driver user to check
        attribute values directly.  These functions check the value you
        specify even if you set the CHR63600_ATTR_RANGE_CHECK
        attribute to VI_FALSE.  There are typesafe versions for
        ViSession datatypes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName, attribute, value):
        """
        This function enable the instrument driver user to check
        attribute values directly.  These functions check the value you
        specify even if you set the CHR63600_ATTR_RANGE_CHECK
        attribute to VI_FALSE.  There are typesafe versions for
        iBoolean datatypes.
        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)

    def IviInit(self, resourceName, IDQuery, reset, vi):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param reset:
        :type reset:
        :param vi:
        :type vi:
        """
        return self._dllwrap.IviInit(resourceName, IDQuery, reset, vi)

    def IviClose(self):
        """"""
        return self._dllwrap.IviClose(self._vi)
