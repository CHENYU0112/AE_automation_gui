from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import chr63600_const as const
from .chr63600_const import *


class chr63600_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("chr63600_32.dll", "chr63600_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "chr63600"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        _status = self.dll.chr63600_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        _status = self.dll.chr63600_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViString(optionString),
            byref(newVi),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(newVi.value)

    def close(self, vi):
        _status = self.dll.chr63600_close(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(bufferSize)
        _status = self.dll.chr63600_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.chr63600_LockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.chr63600_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def GetError(self, vi, bufferSize):
        code = ViStatus()
        description = ARRAY_ViChar(bufferSize)
        _status = self.dll.chr63600_GetError(ViSession(vi), byref(code), ViInt32(bufferSize), description)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        description = decode(description)
        return code, description

    def GetErrorInfo(self, vi):
        primaryError = ViStatus()
        secondaryError = ViStatus()
        errorElaboration = ARRAY_ViChar(256)
        _status = self.dll.chr63600_GetErrorInfo(
            ViSession(vi), byref(primaryError), byref(secondaryError), errorElaboration
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorElaboration = decode(errorElaboration)
        return primaryError, secondaryError, errorElaboration

    def ClearErrorInfo(self, vi):
        _status = self.dll.chr63600_ClearErrorInfo(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        _status = self.dll.chr63600_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(errorMessage)

    def FetchVIPAll(self, vi, v_I_PSelect):
        reading = ARRAY_ViChar(v_I_PSelect)
        _status = self.dll.chr63600_FetchVIPAll(ViSession(vi), ViInt32(v_I_PSelect), reading)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(reading)

    def FetchTming(self, vi, AHWHTIME):
        reading = ViReal64()
        _status = self.dll.chr63600_FetchTming(ViSession(vi), ViInt32(AHWHTIME), byref(reading))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(reading.value)

    def FetchStatus(self, vi):
        status = ViInt32()
        _status = self.dll.chr63600_FetchStatus(ViSession(vi), byref(status))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(status.value)

    def FetchReacRes(self, vi, reactanceResistance):
        reading = ViReal64()
        _status = self.dll.chr63600_FetchReacRes(ViSession(vi), ViInt32(reactanceResistance), byref(reading))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(reading.value)

    def FetchFreqPara(self, vi, freqParameters):
        reading = ViReal64()
        _status = self.dll.chr63600_FetchFreqPara(ViSession(vi), ViInt32(freqParameters), byref(reading))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(reading.value)

    def FetchCurrPara(self, vi, currentParameters):
        reading = ViReal64()
        _status = self.dll.chr63600_FetchCurrPara(ViSession(vi), ViInt32(currentParameters), byref(reading))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(reading.value)

    def FetchVoltPara(self, vi, voltageParameters):
        reading = ViReal64()
        _status = self.dll.chr63600_FetchVoltPara(ViSession(vi), ViInt32(voltageParameters), byref(reading))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(reading.value)

    def FetchPower(self, vi):
        reading = ViReal64()
        _status = self.dll.chr63600_FetchPower(ViSession(vi), byref(reading))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(reading.value)

    def MeasInput(self, vi, input):
        _status = self.dll.chr63600_MeasInput(ViSession(vi), ViBoolean(input))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MeasVIP(self, vi, v_I_PSelect):
        reading = ViReal64()
        _status = self.dll.chr63600_MeasVIP(ViSession(vi), ViInt32(v_I_PSelect), byref(reading))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(reading.value)

    def MeasVIPAll(self, vi, v_I_PSelect):
        reading = ARRAY_ViChar(v_I_PSelect)
        _status = self.dll.chr63600_MeasVIPAll(ViSession(vi), ViInt32(v_I_PSelect), reading)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(reading)

    def reset(self, vi):
        _status = self.dll.chr63600_reset(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def WriteInstrData(self, vi, writeBuffer):
        _status = self.dll.chr63600_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        _status = self.dll.chr63600_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        _status = self.dll.chr63600_GetAttributeViInt32(
            ViSession(vi),
            ViConstString(channelName),
            "CHR63600_ATTR_IR_SMP_TIME",
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        _status = self.dll.chr63600_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(bufSize)
        _status = self.dll.chr63600_GetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViInt32(bufSize),
            value,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        _status = self.dll.chr63600_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        _status = self.dll.chr63600_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(value.value)

    def SetChannel(self, vi, channel):
        _status = self.dll.chr63600_SetChannel(ViSession(vi), ViInt32(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCC(self, vi, currentLevel, risingSlewRate, fallingSlewRate):
        _status = self.dll.chr63600_SetCC(
            ViSession(vi),
            ViReal64(currentLevel),
            ViReal64(risingSlewRate),
            ViReal64(fallingSlewRate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCR(self, vi, resistanceLevel):
        _status = self.dll.chr63600_SetCR(ViSession(vi), ViReal64(resistanceLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCV(self, vi, voltageLevel, iLimit, response, CVType):
        _status = self.dll.chr63600_SetCV(
            ViSession(vi),
            ViReal64(voltageLevel),
            ViReal64(iLimit),
            ViInt32(response),
            ViBoolean(CVType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCP(self, vi, powerLevel, risingSlewRate, fallingSlewRate):
        _status = self.dll.chr63600_SetCP(
            ViSession(vi),
            ViReal64(powerLevel),
            ViReal64(risingSlewRate),
            ViReal64(fallingSlewRate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCZ(self, vi, CL, RL, ls, rs):
        _status = self.dll.chr63600_SetCZ(ViSession(vi), ViReal64(CL), ViReal64(RL), ViReal64(ls), ViReal64(rs))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCCD(
        self,
        vi,
        currentLevel1,
        currentLevel2,
        t1,
        t2,
        risingSlewRate,
        fallingSlewRate,
        repeatTimes,
    ):
        _status = self.dll.chr63600_SetCCD(
            ViSession(vi),
            ViReal64(currentLevel1),
            ViReal64(currentLevel2),
            ViReal64(t1),
            ViReal64(t2),
            ViReal64(risingSlewRate),
            ViReal64(fallingSlewRate),
            ViInt32(repeatTimes),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCCFS(
        self,
        vi,
        i_MAX,
        i_MIN,
        f_START,
        f_END,
        f_STEP,
        DWELL,
        dutyCycle,
        risingSlewRate,
        fallingSlewRate,
    ):
        _status = self.dll.chr63600_SetCCFS(
            ViSession(vi),
            ViReal64(i_MAX),
            ViReal64(i_MIN),
            ViReal64(f_START),
            ViReal64(f_END),
            ViReal64(f_STEP),
            ViReal64(DWELL),
            ViReal64(dutyCycle),
            ViReal64(risingSlewRate),
            ViReal64(fallingSlewRate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetTIMING(
        self,
        vi,
        mode,
        value,
        risingSlewRate,
        fallingSlewRate,
        triggerMode,
        v_TRG_START,
        v_TRG_END,
        END_V,
        timeOut,
    ):
        _status = self.dll.chr63600_SetTIMING(
            ViSession(vi),
            ViInt32(mode),
            ViReal64(value),
            ViReal64(risingSlewRate),
            ViReal64(fallingSlewRate),
            ViInt32(triggerMode),
            ViReal64(v_TRG_START),
            ViReal64(v_TRG_END),
            ViReal64(END_V),
            ViInt32(timeOut),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetOCP(self, vi, startCurrent, endCurrent, step, dwell, triggerVoltage, spec_L, spec_H):
        _status = self.dll.chr63600_SetOCP(
            ViSession(vi),
            ViReal64(startCurrent),
            ViReal64(endCurrent),
            ViInt32(step),
            ViReal64(dwell),
            ViReal64(triggerVoltage),
            ViReal64(spec_L),
            ViReal64(spec_H),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAllRun(self, vi, allRun):
        _status = self.dll.chr63600_SetAllRun(ViSession(vi), ViBoolean(allRun))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAutoON(self, vi, autoLoadOn):
        _status = self.dll.chr63600_SetAutoON(ViSession(vi), ViBoolean(autoLoadOn))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetExtWave(self, vi, externalWaveform):
        _status = self.dll.chr63600_SetExtWave(ViSession(vi), ViBoolean(externalWaveform))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetSound(self, vi, sound):
        _status = self.dll.chr63600_SetSound(ViSession(vi), ViBoolean(sound))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetVonLatch(self, vi, latch):
        _status = self.dll.chr63600_SetVonLatch(ViSession(vi), ViBoolean(latch))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetSignV(self, vi, sign_ofVoltage):
        _status = self.dll.chr63600_SetSignV(ViSession(vi), ViBoolean(sign_ofVoltage))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetWindowTime(self, vi, windowTime):
        _status = self.dll.chr63600_SetWindowTime(ViSession(vi), ViReal64(windowTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RstVonLatch(self, vi):
        _status = self.dll.chr63600_RstVonLatch(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetIR(
        self,
        vi,
        maximumCurrent,
        ONTime,
        OFFTime,
        repeat,
        samplingTime,
        samplingPoint,
        triggerPoint,
    ):
        _status = self.dll.chr63600_SetIR(
            ViSession(vi),
            ViReal64(maximumCurrent),
            ViReal64(ONTime),
            ViReal64(OFFTime),
            ViInt32(repeat),
            ViReal64(samplingTime),
            ViInt32(samplingPoint),
            ViInt32(triggerPoint),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IRWaveCap(self, vi):
        status = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_IRWaveCap(ViSession(vi), status)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(status)

    def OCPResult(self, vi):
        OCPResult = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_OCPResult(ViSession(vi), OCPResult)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(OCPResult)

    def ProgSEQRemain(self, vi):
        remain = ViInt32()
        _status = self.dll.chr63600_ProgSEQRemain(ViSession(vi), byref(remain))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(remain.value)

    def ProgSEQFail(self, vi):
        SEQ_ofFail = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_ProgSEQFail(ViSession(vi), SEQ_ofFail)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(SEQ_ofFail)

    def ProgSEQClear(self, vi, programFile):
        _status = self.dll.chr63600_ProgSEQClear(ViSession(vi), ViInt32(programFile))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProgState(self, vi):
        state = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_ProgState(ViSession(vi), state)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(state)

    def ProgSave(self, vi):
        _status = self.dll.chr63600_ProgSave(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProgSelect(self, vi, programNumber):
        _status = self.dll.chr63600_ProgSelect(ViSession(vi), ViInt32(programNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProgData(self, vi):
        programData = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_ProgData(ViSession(vi), programData)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(programData)

    def ProgDataList(self, vi):
        programDataList = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_ProgDataList(ViSession(vi), programDataList)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(programDataList)

    def ProgDataStep(self, vi):
        programDataStep = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_ProgDataStep(ViSession(vi), programDataStep)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(programDataStep)

    def SetSpecVolt(self, vi, center, high, low):
        _status = self.dll.chr63600_SetSpecVolt(ViSession(vi), ViReal64(center), ViReal64(high), ViReal64(low))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SelectUserWaveform(self, vi, number):
        _status = self.dll.chr63600_SelectUserWaveform(ViSession(vi), ViInt32(number))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUserWaveformData(self, vi, interval, repeat, chain, interpolation):
        _status = self.dll.chr63600_ConfigureUserWaveformData(
            ViSession(vi),
            ViReal64(interval),
            ViInt32(repeat),
            ViInt32(chain),
            ViInt32(interpolation),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetPointFromCSV(self, vi):
        path = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_SetPointFromCSV(ViSession(vi), path)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(path)

    def ConfigureUserWaveformPoint(self, vi):
        point = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_ConfigureUserWaveformPoint(ViSession(vi), point)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(point)

    def GetUserWaveformRemainPoint(self, vi):
        remain = ViInt32()
        _status = self.dll.chr63600_GetUserWaveformRemainPoint(ViSession(vi), byref(remain))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(remain.value)

    def GetUserWaveformStatus(self, vi):
        executeStatus = ViInt32()
        _status = self.dll.chr63600_GetUserWaveformStatus(ViSession(vi), byref(executeStatus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(executeStatus.value)

    def ClearUserWaveform(self, vi):
        clearStatus = ViInt32()
        _status = self.dll.chr63600_ClearUserWaveform(ViSession(vi), byref(clearStatus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(clearStatus.value)

    def SetSpecCurr(self, vi, center, high, low):
        _status = self.dll.chr63600_SetSpecCurr(ViSession(vi), ViReal64(center), ViReal64(high), ViReal64(low))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetSpecPwr(self, vi, center, high, low):
        _status = self.dll.chr63600_SetSpecPwr(ViSession(vi), ViReal64(center), ViReal64(high), ViReal64(low))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySpecVIP(self, vi, v_I_PSelect):
        result = ARRAY_ViChar(v_I_PSelect)
        _status = self.dll.chr63600_QuerySpecVIP(ViSession(vi), ViInt32(v_I_PSelect), result)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(result)

    def QuerySpecAll(self, vi):
        result = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_QuerySpecAll(ViSession(vi), result)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(result)

    def SetSpecTest(self, vi, ON_OFF):
        _status = self.dll.chr63600_SetSpecTest(ViSession(vi), ViBoolean(ON_OFF))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetSpecUnit(self, vi, unit):
        _status = self.dll.chr63600_SetSpecUnit(ViSession(vi), ViBoolean(unit))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetStatusCHANEnable(self, vi, registerValue):
        _status = self.dll.chr63600_SetStatusCHANEnable(ViSession(vi), ViInt32(registerValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetStatusCHANPTR(self, vi, registerValue):
        _status = self.dll.chr63600_SetStatusCHANPTR(ViSession(vi), ViInt32(registerValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetStatusCHANNTR(self, vi, registerValue):
        _status = self.dll.chr63600_SetStatusCHANNTR(ViSession(vi), ViInt32(registerValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetStatusCSUMEnable(self, vi, registerValue):
        _status = self.dll.chr63600_SetStatusCSUMEnable(ViSession(vi), ViInt32(registerValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetStatusQUESEnable(self, vi, registerValue):
        _status = self.dll.chr63600_SetStatusQUESEnable(ViSession(vi), ViInt32(registerValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetStatusQUESPTR(self, vi, registerValue):
        _status = self.dll.chr63600_SetStatusQUESPTR(ViSession(vi), ViInt32(registerValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetStatusQUESNTR(self, vi, registerValue):
        _status = self.dll.chr63600_SetStatusQUESNTR(ViSession(vi), ViInt32(registerValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryCHANCond(self, vi):
        returnValue = ViInt32()
        _status = self.dll.chr63600_QueryCHANCond(ViSession(vi), byref(returnValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(returnValue.value)

    def QueryCHANEvnet(self, vi):
        returnValue = ViInt32()
        _status = self.dll.chr63600_QueryCHANEvnet(ViSession(vi), byref(returnValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(returnValue.value)

    def QueryCSUMEvnet(self, vi):
        returnValue = ViInt32()
        _status = self.dll.chr63600_QueryCSUMEvnet(ViSession(vi), byref(returnValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(returnValue.value)

    def QueryQUESCond(self, vi):
        returnValue = ViInt32()
        _status = self.dll.chr63600_QueryQUESCond(ViSession(vi), byref(returnValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(returnValue.value)

    def QueryQUESEvent(self, vi):
        returnValue = ViInt32()
        _status = self.dll.chr63600_QueryQUESEvent(ViSession(vi), byref(returnValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(returnValue.value)

    def SetCLS(self, vi):
        _status = self.dll.chr63600_SetCLS(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetESE(self, vi, enableRegister):
        _status = self.dll.chr63600_SetESE(ViSession(vi), ViInt32(enableRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetSRE(self, vi, enableRegister):
        _status = self.dll.chr63600_SetSRE(ViSession(vi), ViInt32(enableRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryESR(self, vi):
        statusRegister = ViInt32()
        _status = self.dll.chr63600_QueryESR(ViSession(vi), byref(statusRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(statusRegister.value)

    def QuerySTB(self, vi):
        statusByteRegister = ViInt32()
        _status = self.dll.chr63600_QuerySTB(ViSession(vi), byref(statusByteRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(statusByteRegister.value)

    def SetOPC(self, vi):
        _status = self.dll.chr63600_SetOPC(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryOPC(self, vi):
        operationComplete = ViInt32()
        _status = self.dll.chr63600_QueryOPC(ViSession(vi), byref(operationComplete))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(operationComplete.value)

    def QueryRDT(self, vi):
        type = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_QueryRDT(ViSession(vi), type)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(type)

    def SetChannelActive(self, vi, ON_OFF):
        _status = self.dll.chr63600_SetChannelActive(ViSession(vi), ViBoolean(ON_OFF))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryChanID(self, vi):
        channelID = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_QueryChanID(ViSession(vi), channelID)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(channelID)

    def SetCCVRange(self, vi, voltageRange):
        _status = self.dll.chr63600_SetCCVRange(ViSession(vi), ViInt32(voltageRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetVon(self, vi, von):
        _status = self.dll.chr63600_SetVon(ViSession(vi), ViReal64(von))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetVoff(self, vi, voff):
        _status = self.dll.chr63600_SetVoff(ViSession(vi), ViReal64(voff))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetParalleType(self, vi, type):
        _status = self.dll.chr63600_SetParalleType(ViSession(vi), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetParalleState(self, vi, enable):
        _status = self.dll.chr63600_SetParalleState(ViSession(vi), ViBoolean(enable))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetSynchronousChannel(self, vi, channel):
        _status = self.dll.chr63600_SetSynchronousChannel(ViSession(vi), ViInt32(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetSynchronousType(self, vi, type):
        _status = self.dll.chr63600_SetSynchronousType(ViSession(vi), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetSynchronousMode(self, vi, mode):
        _status = self.dll.chr63600_SetSynchronousMode(ViSession(vi), ViInt32(mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IRGetWave(self, vi, waveform, channel):
        _samplingpoint = self.dll.chr63600_GetAttributeViInt32(
            ViSession(vi),
            ViConstString(channel),
            self.const.CHR63600_ATTR_DIGI_SMP_POINT,
            4096,
        )
        returnedData = ARRAY_ViReal64(_samplingpoint)
        returnedCount = ViInt32()
        _status = self.dll.chr63600_IRGetWave(ViSession(vi), ViBoolean(waveform), returnedData, byref(returnedCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedCount = int(returnedCount.value)
        return returnedData, returnedCount

    def SetDIGI(self, vi, samplingTime, samplingPoint, triggerSource, triggerPoint):
        _status = self.dll.chr63600_SetDIGI(
            ViSession(vi),
            ViReal64(samplingTime),
            ViInt32(samplingPoint),
            ViInt32(triggerSource),
            ViInt32(triggerPoint),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetDIGIAbort(self, vi):
        _status = self.dll.chr63600_SetDIGIAbort(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetDIGIInit(self, vi):
        _status = self.dll.chr63600_SetDIGIInit(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DIGIWaveCap(self, vi):
        status = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_DIGIWaveCap(ViSession(vi), status)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(status)

    def DIGIGetWave(self, vi, waveform, channel):
        _samplingpoint = self.dll.chr63600_GetAttributeViInt32(
            ViSession(vi),
            ViConstString(channel),
            self.const.CHR63600_ATTR_DIGI_SMP_POINT,
            4096,
        )
        returnedData = ARRAY_ViReal64(_samplingpoint)
        returnedCount = ViInt32()
        _status = self.dll.chr63600_DIGIGetWave(ViSession(vi), ViBoolean(waveform), returnedData, byref(returnedCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedCount = int(returnedCount.value)
        return returnedData, returnedCount

    def DIGISetTrig(self, vi, triggerState):
        _status = self.dll.chr63600_DIGISetTrig(ViSession(vi), ViBoolean(triggerState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DIGIQueryTrig(self, vi):
        triggerState = ARRAY_ViChar(1024)
        _status = self.dll.chr63600_DIGIQueryTrig(ViSession(vi), triggerState)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(triggerState)

    def SetLoad(self, vi, ON_OFF):
        _status = self.dll.chr63600_SetLoad(ViSession(vi), ViBoolean(ON_OFF))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryLoadState(self, vi):
        loadState = ViBoolean()
        _status = self.dll.chr63600_QueryLoadState(ViSession(vi), byref(loadState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(loadState.value)

    def QueryLoadProt(self, vi):
        loadProtection = ViInt32()
        _status = self.dll.chr63600_QueryLoadProt(ViSession(vi), byref(loadProtection))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(loadProtection.value)

    def LoadProtClear(self, vi):
        _status = self.dll.chr63600_LoadProtClear(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetShort(self, vi, ON_OFF):
        _status = self.dll.chr63600_SetShort(ViSession(vi), ViBoolean(ON_OFF))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetShortKey(self, vi, shortKey):
        _status = self.dll.chr63600_SetShortKey(ViSession(vi), ViBoolean(shortKey))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Run(self, vi):
        _status = self.dll.chr63600_Run(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Abort(self, vi):
        _status = self.dll.chr63600_Abort(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SynchronousRun(self, vi, run):
        _status = self.dll.chr63600_SynchronousRun(ViSession(vi), ViBoolean(run))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetMode(self, vi, mode):
        _status = self.dll.chr63600_SetMode(ViSession(vi), ViInt32(mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SavePara(self, vi, memoryLocation):
        _status = self.dll.chr63600_SavePara(ViSession(vi), ViInt32(memoryLocation))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RecallPara(self, vi, memoryLocation):
        _status = self.dll.chr63600_RecallPara(ViSession(vi), ViInt32(memoryLocation))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.chr63600_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.chr63600_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.chr63600_SetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.chr63600_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.chr63600_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.chr63600_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.chr63600_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.chr63600_CheckAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.chr63600_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.chr63600_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IviInit(self, resourceName, IDQuery, reset, vi):
        _status = self.dll.chr63600_IviInit(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(reset), ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IviClose(self, vi):
        _status = self.dll.chr63600_IviClose(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
