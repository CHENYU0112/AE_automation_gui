# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

import contextlib
from time import sleep

from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper
from pverify.drivers.BaseInstrument import BaseVisaInstrument
from pverify.drivers.ProgrammableLoad.chr6310 import IIfxELoadBase, IIfxELoadChannels


class IIfxELoad(IVICOMDriverWrapper, IIfxELoadBase.IIfxELoadBase):
    """IIfx ELoad class-compliant root interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:


    Methods:

    """

    def __init__(self):
        IVICOMDriverWrapper.__init__(self, ivi_compliant=False)
        self.IDN = ""
        self.interface = BaseVisaInstrument()
        IIfxELoadBase.IIfxELoadBase.__init__(self, self.interface)
        self.__Initialized = False

        self.Channels = IIfxELoadChannels.IIfxELoadChannels(self.interface)

        from .IIviDriverOperation import IIviDriverOperation

        self.DriverOperation = IIviDriverOperation(self)

        from .IIviDriverIdentity import IIviDriverIdentity

        self.Identity = IIviDriverIdentity(self)

        from .IIviDriverUtility import IIviDriverUtility

        self.Utility = IIviDriverUtility(self)

    # Read only dependent properties
    @property
    def Initialized(self):
        """
        Initialized is True between a successful call to the Initialize method
        and a successful call to the Close method, and False at all other
        times.
        """
        return self.__Initialized

    @property
    def drivername(self):
        return "CHR_6310A"

    # Methods
    def Initialize(self, ResourceName, IdQuery=1, Reset=1, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties
        that access the instrument are only accessible after Initialize is
        called. Initialize optionally performs a Reset and queries the
        instrument to validate the instrument model.

        :param ResourceName:
            An IVI logical name or an instrument specific string that identifies
            the address of the instrument, such as a VISA resource descriptor
            string.
        :type ResourceName: str

        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool

        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool

        :param OptionString:
            Provides additional functionality for the initialization process.
        :type OptionString: str

        """
        self.interface.ResourceName = ResourceName
        self.interface.vi_open()
        self.__Initialized = True

        if True:
            ret = self.interface.vi_query("*IDN?")
            ret = ret.strip()
            self.IDN = ret
            if ret.lower().find("chroma,631") == -1:
                self.__Initialized = False
                for i in [1, 2, 3, 4, 5, 6, 7, 8]:
                    self.interface.vi_write("CHAN %d" % i)
                    if self.interface.vi_query("CHAN?", rformat="%d") == i:
                        self.IDN += "\nC%d: %s" % (i, self.interface.vi_query("CHAN:ID?"))
                self.interface.vi_close()
                msg = "chr6310: Cant't find '{}' in the returned IDN string '{}'".format(ret, "Chroma,631")
                raise ValueError(msg)

            for i in range(1, 9, 1):
                self.interface.vi_write(":CHAN %d;:LOAD OFF;:CHAN:SYNC OFF" % i)
            self.interface.vi_write(":CONF:REM OFF")
            with contextlib.suppress(Exception):
                self.GetError()

        if Reset:
            self.interface.vi_write("*RST")
            self.interface.vi_write(":CONF:REM OFF")

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and
        properties that access the instrument are not accessible after Close
        is called.
        """
        if self.__Initialized:
            for i in range(1, 9, 1):
                self.interface.vi_write(":CHAN %d;:LOAD OFF;:CHAN:SYNC OFF" % i)
            self.interface.vi_write(":CONF:REM OFF")
            sleep(0.1)
            self.interface.vi_close()
            self.__Initialized = False
