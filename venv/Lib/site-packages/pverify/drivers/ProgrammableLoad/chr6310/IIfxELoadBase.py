# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

from pverify.drivers.BaseInstrument import InstrumentError
from pverify.drivers.ProgrammableLoad.chr6310 import IIfxELoadEnums


class IIfxELoadBase:
    """
    Common methods/properties for all interfaces
    """

    def __init__(self, interface):
        self.Enums = IIfxELoadEnums
        self.interface = interface

    def GetError(self):
        """
        Raises an error if a wrong behaviour of the load is recognized.

        :raise: InstrumentError
        """
        errMsg = ""
        ret = self.interface.vi_query(":FETC:STAT?", rformat="%d")
        if ret and 1:
            errMsg = "Over-current identified!"
        elif ret and 2:
            errMsg = "Over-voltage identified!"
        elif ret and 4:
            errMsg = "Over-power identified!"
        elif ret and 8:
            errMsg = "Reverse voltage identified!"
        elif ret and 16:
            errMsg = "Over-temperature identified!"
        if errMsg != "":
            self.interface._Log.error(errMsg)
            raise InstrumentError(errMsg)

    def Syncronize(self, enabled):
        if enabled:
            self.interface.vi_write(f":CHAN {self.channelNumber}")
            self.interface.vi_write(":CHAN:SYNC ON")
        else:
            self.interface.vi_write(f":CHAN {self.channelNumber}")
            self.interface.vi_write(":CHAN:SYNC OFF")
