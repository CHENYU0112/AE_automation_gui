# flake8: noqa
"""This is the PyTest for FlashLib package."""


"""Prerequiste to run this PyTest: Hardware must be connected with the apprpriate License."""

import copy
import os
from collections import OrderedDict

import FlashLib
import pytest
import serial.tools.list_ports as port_list
from flash import FlashLibError

bin_file = os.getcwd() + r"\IntTest_Mcu_Mcu_Config012_422_AURIX2G_TC389_Gnuc_SV_tc.hex"
cfg_dict = {
    "Connection": OrderedDict(
        [
            ("@id", "0"),
            (
                "Driver",
                OrderedDict(
                    [
                        ("@name", "flash.MemtoolExe"),
                        (
                            "MemtoolExe",
                            "C:/Program Files (x86)/Infineon/Memtool 4.7/IMTMemtool.exe",
                        ),
                        (
                            "MemtoolCli",
                            "C:/userdata/PTE_Tools/pls/UDE_4_08_04/MemtoolCli.exe",
                        ),
                    ]
                ),
            ),
            ("DAS_PORT", "0"),
            (
                "MEMTOOL_CFG",
                "C:/Users/SinghaAk/Documents/Infineon/IMT4.7/Targets/TriBoard_TC39xA_das.cfg",
            ),
        ]
    )
}

"""Ports will fetch all the Com Ports """
ports = list(port_list.comports())
obj = FlashLib.FlashLib(cfg_dict)

"""Running the Library to test import Driver if driver is not present in the package."""


def test_init_flash_import_module():
    cfg_dict_new = copy.deepcopy(cfg_dict)
    cfg_dict_new["Connection"]["Driver"]["@name"] = "flash"
    with pytest.raises(FlashLibError):
        assert FlashLib.FlashLib(cfg_dict_new)


"""Running the Library to test init_flash_lib if not input is provided."""


def test_init_flash_lib_without_arg():
    with pytest.raises(FlashLibError):
        assert obj.init_flash_lib()


"""Running the Library to test init_flash_lib if wrong input provided."""


def test_flash_lib_arg_mismatch():
    with pytest.raises(FlashLibError):
        assert obj.init_flash_lib(cfg_dict)


"""Running TestCase for MemtollExe."""
"""Runnig the Library to test the start_flash is supported with FlashLib or not."""


def test_start_flash():
    with pytest.raises(FlashLibError):
        assert obj.start_flash()


"""Running the Library to test init_flash_lib if input is provided."""


def test_init_flash_lib_verifed():
    obj.init_flash_lib(flash_cfg=cfg_dict)


"""Running the library to test erase flash is supported with MemtoolExe or not."""


def test_erase_flash_not_supported_MemtoolExe():
    with pytest.raises(FlashLibError):
        assert obj.erase_flash()


"""Running the library to test the program_flash if appropiate inputs provided."""


def test_program_flash_Exe():
    obj.program_flash(bin_file=bin_file)


"""Running the library to test the verify_flash if appropiate inputs provided."""


def test_verify_flash_Exe():
    obj.verify_flash(bin_file=bin_file)


"""Running the library to test the program_flash if wrong Memtool Path provided."""


def test_program_flash_WrongPath_Exe():
    cfg_dict_new = copy.deepcopy(cfg_dict)
    cfg_dict_new["Connection"]["Driver"]["MemtoolExe"] = r"C:\memtool.exe\ "
    obj = FlashLib.FlashLib(cfg_dict_new)
    with pytest.raises(FlashLibError):
        assert obj.program_flash(bin_file=bin_file)


"""Running the library to test the program_flash if no hex file provided."""


def test_program_flash_without_hex_Exe():
    with pytest.raises(FlashLibError):
        assert obj.program_flash()


"""Running the library to test the program_flash if Timeout happens."""


def test_program_flash_TimeOut_Exe():
    cfg_dict_new = copy.deepcopy(cfg_dict)
    cfg_dict_new["Connection"]["MEMTOOL_CFG"] = ""
    obj = FlashLib.FlashLib(cfg_dict_new)
    with pytest.raises(FlashLibError):
        assert obj.program_flash(bin_file=bin_file)


"""Running the library to test the program_flash if some other file provided then .hex."""


def test_program_flash_wrong_file_Exe():
    bin_file_new = [bin_file.split(".")[0] + ".txt"]
    with pytest.raises(FlashLibError):
        assert obj.program_flash(bin_file=bin_file_new)


cfg_dict_cli = copy.deepcopy(cfg_dict)
cfg_dict_cli["Connection"]["Driver"]["@name"] = "flash.MemtoolCli"
obj_cli = FlashLib.FlashLib(cfg_dict_cli)

"""Runnning TestCase for MemtollCLi."""
"""Running the Library to test init_flash_lib if input is provided."""


def test_init_flash_lib_verifed_cli():
    obj_cli.init_flash_lib(flash_cfg=cfg_dict_cli)


"""Running the library to test the program_flash if appropiate inputs provided."""


def test_program_flash_Cli():
    obj_cli.program_flash(bin_file=bin_file)


"""Running the library to test the verify_flash if appropiate inputs provided."""


def test_verify_flash_Cli():
    obj_cli.verify_flash(bin_file=bin_file)


"""Running the library to test the erase_flash."""


def test_erase_flash_Cli():
    obj_cli.erase_flash()


"""Running the library to test the program_flash if some other file provided then .hex."""


def test_program_flash_wrong_file_Cli():
    bin_file_new = bin_file.split(".")[0] + ".txt"
    with pytest.raises(FlashLibError):
        assert obj_cli.program_flash(bin_file=bin_file_new)


"""Running the library to test the program_flash if wrong Memtool Path provided."""


def test_program_flash_WrongPath_Cli():
    cfg_dict_new = copy.deepcopy(cfg_dict_cli)
    cfg_dict_new["Connection"]["Driver"]["MemtoolCli"] = r"C:\memtool.Cli\ "
    obj_cli = FlashLib.FlashLib(cfg_dict_new)
    with pytest.raises(FlashLibError):
        assert obj_cli.program_flash(bin_file=bin_file)
