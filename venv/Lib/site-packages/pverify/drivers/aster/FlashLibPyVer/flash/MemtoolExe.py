# Copyright (C) Infineon Technologies (2019)
#
# All rights reserved.
#
# This document contains proprietary information belonging to Infineon
# Technologies. Passing on and copying of this document, and communication
# of its contents is not permitted without prior written authorization.


""" This module provides the flash capabilities"""
from __future__ import annotations

import os
import subprocess

from . import FlashBase, FlashLibError


class MemtoolExe(FlashBase):
    """Flashing the target."""

    FLASH_TEMP_BATCHFILE = None
    FLASH_CFG_TEMP_FILE = None
    memtool_cfg = {}

    def __init__(self, cfg_dict=None):
        """Constructor for MemtoolExe"""
        # Call the parent constructor for forward compatibility
        super().__init__()
        if cfg_dict:
            self.memtool_cfg.update(cfg_dict)

    def init_flash_lib(self, flash_cfg=None):
        """Initialize Flash Lib"""
        if flash_cfg:
            self.memtool_cfg.update(flash_cfg)
        self.memtool_cfg["MEMTOOL_PATH"] = flash_cfg["Driver"]["MemtoolExe"]

    def command_flash(self, command=None, bin_file=None, sections=None, timeout=180):
        """Flash Utility"""

        memtool_path = self.memtool_cfg["MEMTOOL_PATH"]
        cfg_file = self.memtool_cfg["MEMTOOL_CFG"]
        das_port = self.memtool_cfg["DAS_PORT"]
        self.FLASH_TEMP_BATCHFILE = "tmpFlashBatchFile2G_" + das_port + ".mtb"
        # self.FLASH_CFG_TEMP_FILE = "tmpFlashCfgFile2G_" + das_port + ".cfg"
        mtb_file = self.FLASH_TEMP_BATCHFILE

        if not os.path.exists(memtool_path):
            msg = "Verify the Memtool path in configuration"
            raise FlashLibError(msg)

        if bin_file:
            if isinstance(bin_file, dict):
                hex_files = bin_file[".hex"]
            elif isinstance(bin_file, list):
                hex_files = bin_file
            else:
                hex_files = [bin_file]
        else:
            msg = "No Binary Provided!!"
            raise FlashLibError(msg)

        sections = "select_sections %s" % sections if sections else "select_all_sections"

        for hex_file in hex_files:
            if not hex_file.endswith(".hex"):
                msg = "No valid input binary file.                                    Memtool supports only hex files"
                raise FlashLibError(msg)
            file = open(mtb_file, "w")
            file_write = "connect\nopen_file {}\n{}\n" "add_selected_sections\n{}\n" "disconnect\nexit".format(
                hex_file,
                sections,
                command,
            )
            file.write(file_write)
            file.close()

            cmd = f"{memtool_path} {mtb_file} -c {cfg_file}"
            try:
                # TODO: Enhance to read stderr
                subprocess.check_output(cmd, timeout=timeout, stderr=subprocess.PIPE)
            except subprocess.TimeoutExpired:
                msg = (
                    "FlashLib: Flash failed. Timeout occurred.                                Please check your setup!"
                )
                raise FlashLibError(msg)

            os.remove(mtb_file)

    def program_flash(self, bin_file=None, sections=None, **kwargs):
        """Flash test suite using system command."""
        self.command_flash(command="program", bin_file=bin_file, sections=sections, **kwargs)

    def erase_flash(self):
        """Erase Flash"""
        msg = "FlashLib: Erase is not supported with                            memtool exe!!"
        raise FlashLibError(msg)

    def verify_flash(self, bin_file=None, sections=None):
        """Verify Flash"""
        self.command_flash(command="verify", bin_file=bin_file, sections=sections)
