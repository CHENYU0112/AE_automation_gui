# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

import contextlib

from pyvisa.constants import VI_ATTR_INTF_NUM

from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper
from pverify.drivers.ACPwr.chr615xx import IIviACPwrArbWaveform, IIviACPwrBase, IIviACPwrOutputPhases
from pverify.drivers.BaseInstrument import BaseVisaInstrument


class IIviACPwr(IVICOMDriverWrapper, IIviACPwrBase.IIviACPwrBase):
    """IVI ACPwr class-compliant root interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        ArbWaveform
            Pointer to the IIviACPwrArbWaveform interface.

        OutputPhases
            Pointer to the IIviACPwrOutputs interface.

        interface
            Specific for instrument connection via VISA.
            Provides interface for wrapped VISA library.

    Methods:
        Initialize(self, ResourceName, IdQuery=1, Reset=1, OptionString=''):
            Opens the I/O session to the instrument. Driver methods and properties
            that access the instrument are only accessible after Initialize is called.
            Initialize optionally performs a Reset and queries the instrument to
            validate the instrument model.

        Close()
            Closes the I/O session to the instrument.
            Driver methods and properties that access the
            instrument are not accessible after Close is called.
    """

    def __init__(self):
        IVICOMDriverWrapper.__init__(self, ivi_compliant=False)
        self.IDN = ""
        self.interface = BaseVisaInstrument()
        self.__Initialized = False
        IIviACPwrBase.IIviACPwrBase.__init__(self, self.interface)
        self.OutputPhases = IIviACPwrOutputPhases.IIviACPwrOutputPhases(self.interface, self)
        self.ArbWaveform = IIviACPwrArbWaveform.IIviACPwrArbWaveform(self.interface)

        from .IIviDriverOperation import IIviDriverOperation

        self.DriverOperation = IIviDriverOperation(self)

        from .IIviDriverIdentity import IIviDriverIdentity

        self.Identity = IIviDriverIdentity(self)

        from .IIviDriverUtility import IIviDriverUtility

        self.Utility = IIviDriverUtility(self)

    # Read only dependent properties
    @property
    def Initialized(self):
        """
        Initialized is True between a successful call to the Initialize method
        and a successful call to the Close method, and False at all other
        times.

        :rtype: bool
        """
        try:
            self.interface.get_visa_attribute(VI_ATTR_INTF_NUM)
            return True
        except Exception:
            return False

    @property
    def drivername(self):
        return "CHR_615XX"

    # Methods
    def Initialize(self, ResourceName, IdQuery=True, Reset=True, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties
        that access the instrument are only accessible after Initialize is
        called. Initialize optionally performs a Reset and queries the
        instrument to validate the instrument model.

        :param ResourceName:
            An IVI logical name or an instrument specific string that identifies
            the address of the instrument, such as a VISA resource descriptor string
        :type ResourceName: str

        :param IdQuery:
            Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool

        :param Reset:
            Specifies whether to reset the instrument.
        :type Reset: bool

        :param OptionString:
            The user can use the OptionsString parameter to specify the initial
            values of certain IVI inherent attributes for the session. The format
            of an assignment in the OptionsString parameteris "Name=Value",
            where Name is one of: RangeCheck, QuerytInstrStatus, Cache, Simulate,
            RecordCoercions, InterchangeCheck,or DriverSetup. Value is either
            true or false except for DriverSetup. If the Options String parameter
            contains an assignment for the Driver Setup attribute, the Initialize
            method assumes that everything following "DriverSetup=" is part of the
            assignment.
        :type OptionString: str
        """
        if not self.__Initialized:
            self.interface.ResourceName = ResourceName
            self.interface.vi_open()

        if True:
            ret = self.interface.vi_query("*IDN?")
            # ret = 'Chroma ATE,61504,000784,1.60,1.51,1.60\r\n'
            ret = ret.strip()
            self.IDN = ret
            if ret.find("Chroma ATE,615") == -1:
                msg = "chr615xx: Cant't find '{}' in the returned IDN string '{}'".format("Chroma ATE,615", ret)
                raise ValueError(msg)
            with contextlib.suppress(Exception):
                self.GetError()

        if Reset:
            self.Utility.Reset()

        if "OPT_HV_A615003" in OptionString.upper():
            self.interface.vi_write("OUTPUT:OPTI:HV A615003")

        if self.interface.vi_query(":OUTP:STAT?", "%s", "%s").upper() != "ON":
            self.interface.vi_write(":CONF:INH LIVE")

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and
        properties that access the instrument are not accessible after Close
        is called.
        """
        if self.__Initialized:
            self.interface.vi_write(":OUTP OFF")
            self.interface.vi_write(":SYST:LOC")
            self.interface.vi_close()
            self.__Initialized = False
