# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

from . import IIviACPwrBase


class IIviACPwrDCGeneration(IIviACPwrBase.IIviACPwrBase):
    """IVI ACPwr class-compliant DC Generation interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        DCVoltageLevel [float]
            The DC output voltage when the DC Generation Mode property is
            set to DC Only or the DC offset level when the DC Generation Mode
            property is set to AC Plus DC.

        Mode [str]
            Output voltage generation mode. This can be AC Only, DC Only or AC Plus DC.

        NumRanges [int]
            The number of DC voltage ranges supported by the power source.

        RangeMax [float]
            Returns the maximum DC voltage supported by the power source for
            the present range.

        RangeMin [float]
            Returns the minimum DC voltage supported by the power source for
            the present range.

    Methods:
        Configure (Mode, DCVoltageLevel):
            Configured the DC Generation Mode and the DCVoltageLevel poperties.

        ConfigureRange (Minimum, Maximum):
            Configures the DC voltage range of the power source. The driver sets
            the power source to the lowest range that supports the minimum and maximum
            voltages specified by the Minimum and Maximum parameters. It then updates the DC
            Range Min and DC Range Max properties.

        QueryCapabilities (Range, Minimum, Maximum):
            Returns the minimum and maximum DC voltage supported by the specified range.

    """

    def __init__(self, interface):
        IIviACPwrBase.IIviACPwrBase.__init__(self, interface)

    # Read only dependent properties
    @property
    def RangeMin(self):
        """
        Returns the minimum DC voltage supported by the power source for the
        present range.

        :rtype: float
        """
        answ = self.interface.vi_query(":SOUR:VOLT:LIM:DC:MIN?", "%s\n", "%f")
        self.GetError()
        return answ

    @property
    def NumRanges(self):
        """
        The number of DC voltage ranges supported by the power source.

        :rtype: int
        """
        return 2

    @property
    def RangeMax(self):
        """
        Returns the maximum DC voltage supported by the power source for the
        present range.

        :rtype: float
        """
        answ = self.interface.vi_query(":SOUR:VOLT:LIM:DC:PLUS?", "%s\n", "%f")
        self.GetError()
        return answ

    # Read-write dependent properties
    @property
    def Mode(self):
        """
        Output voltage generation mode. This can be AC Only, DC Only or AC
        Plus DC.

        :rtyp: IviACPwrDCGenerationModeEnum
        """
        ret = str(self.interface.vi_query(":OUTP:COUP?", rformat="%s\n")).upper()
        self.GetError()
        if ret == "AC":
            return self.Enums.IviACPwrDCGenerationModeEnum.IviACPwrDCGenerationModeACOnly
        elif ret == "DC":
            return self.Enums.IviACPwrDCGenerationModeEnum.IviACPwrDCGenerationModeDCOnly
        elif ret == "ACDC":
            return self.Enums.IviACPwrDCGenerationModeEnum.IviACPwrDCGenerationModeACPlusDC
        else:
            msg = f"Unknown return value '{ret}'"
            raise Exception(msg)

    @Mode.setter
    def Mode(self, value):
        """
        Output voltage generation mode. This can be AC Only, DC Only or AC
        Plus DC.

        :type value: IviACPwrDCGenerationModeEnum
        """
        if value == self.Enums.IviACPwrDCGenerationModeEnum.IviACPwrDCGenerationModeACOnly:
            self.interface.vi_write(":OUTP:COUP AC")
        elif value == self.Enums.IviACPwrDCGenerationModeEnum.IviACPwrDCGenerationModeDCOnly:
            self.interface.vi_write(":OUTP:COUP DC")
        elif value == self.Enums.IviACPwrDCGenerationModeEnum.IviACPwrDCGenerationModeACPlusDC:
            self.interface.vi_write(":OUTP:COUP ACDC")
        else:
            msg = "Unknown IviACPwrDCGenerationModeEnum value."
            raise Exception(msg)
        self.GetError()

    @property
    def DCVoltageLevel(self):
        """
        The DC output voltage when the DC Generation Mode property is set to
        DC Only or the DC offset level when the DC Generation Mode property is
        set to AC Plus DC.

        :rtype: float
        """
        answ = self.interface.vi_query(":VOLT:LEV:AMPL:DC?", "%s\n", "%f")
        self.GetError()
        return answ

    @DCVoltageLevel.setter
    def DCVoltageLevel(self, value):
        """
        The DC output voltage when the DC Generation Mode property is set to
        DC Only or the DC offset level when the DC Generation Mode property is
        set to AC Plus DC.

        :type value: float
        """
        self.interface.vi_write(f":VOLT:DC {value:.4f}")
        self.GetError()

    # Methods
    def Configure(self, Mode, DCVoltageLevel):
        """
        Configures the DC Generation Mode and DCVoltageLevel properties.

        :param Mode:
            Sets the DC Generation Mode property.
        :type Mode: str

        :param DCVoltageLevel:
            Sets the DC Generation DC Voltage Level property.
        :type DCVoltageLevel: float
        """
        self.Mode = Mode
        self.DCVoltageLevel = DCVoltageLevel
        return

    def QueryCapabilities(self, Range):
        """
        Returns the minimum and maximum DC voltage supported by the specified
        range.

        :param Range:
            The range to query. The Range parameter must be from 1 to the value of
            the Number of Ranges property.
        :type Range: int

        :return: list at Minimum, Maximum
        """
        if Range == 1:
            Minimum = -212.1
            Maximum = 212.1
        elif Range == 2:
            Minimum = -424.2
            Maximum = 424.2
        else:
            raise ValueError("chr615xx: The queried range '%d' does not exist" % Range)
        return Minimum, Maximum

    def ConfigureRange(self, Minimum, Maximum):
        """
        Configures the DC voltage range of the power source. The driver sets
        the power source to the lowest range that supports the minimum and
        maximum voltages specified by the Minimum and Maximum parameters. It
        then updates the DC Range Min and DC Range Max properties.

        :param Minimum:
            Requests a range that supports this minimum DC voltage.
        :type Minimum: float

        :param Maximum:
            Requests a range that supports this maximum DC voltage.
        :type Maximum: float
        """
        if (Maximum >= 0) and (Maximum <= 424.2) and (Minimum <= 0) and (Minimum >= -424.2):
            self.interface.vi_write(
                ":SOUR:VOLT:LIM:DC:PLUS {:.1f};:SOUR:VOLT:LIM:DC:MIN {:.1f}".format(*Maximum),
                Minimum,
            )
        self.GetError()
