# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

from . import IIviACPwrBase
from .IIviACPwrOutputPhase import IIviACPwrOutputPhase


class IIviACPwrOutputPhases(IIviACPwrBase.IIviACPwrBase):
    """IVI ACPwr class-compliant output Phases interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.


    Attributes:
        Count [int]
            The number of phases the power source is presently configured to output

        ExternalSync
            Extension group that configures external synchronization capabilities

        #Frequency [float]
            The frequency of all output phases.

        #FrequencyRampBusy [bool]
            Indicates if a frequency ramp is in progress.

        FrequencyRange [int]
            Configures the frequency range of the power source to support
            the specified maximum frequency.

        Item
            An interface reference pointer to the IIviACPwrOutput interface
            which is selected by the output name.

        Name [str]
            The output name for a given index.

        NumFrequencyRanges [int]
            The number of frequency ranges supported by the power source.

        NumPhases [int]
            The number of phases the power source is presently configured to output.

    Methods:
        AbortFrequencyRamp
            Aborts a frequency ramp.

        #InitiateMeasurement (Group):
            This method initiates a measurement of all measurement types for
            all phases of the specified group(s).

        QueryFrequencyRAngeCapabilities (Range, MinFrequency, MaxFrequency):
            Returns the minimum and maximum frequency supported by the specified range.

        #RampFrequency (StartFrequency, EndFrequency, Duration):
            Starts a linear ramp of the output frequency from a starting
            to ending frequency value for a specified duration.


    """

    def __init__(self, interface, parent):
        super().__init__(interface)
        self.__ch1 = IIviACPwrOutputPhase(self.interface, self)
        self._parent = parent
        if False:
            from .IIviACPwr import IIviACPwr

            self._parent = IIviACPwr()

        from .IIviACPwrExternalSync import IIviACPwrExternalSync

        self.ExternalSync = IIviACPwrExternalSync(interface)

        self.__measurements = {
            "VoltageRmsLN": -1,
            "CurrentRms": -1,
            "Frequency": -1,
            "VoltageDC": -1,
            "CurrentDC": -1,
            "PowerFactor": -1,
            "CrestFactor": -1,
            "CurrentPeak": -1,
            "PowerVA": -1,
            "PowerReal": -1,
            "PowerDC": -1,
            "PhaseAngle": -1,
            "VoltageRmsLL": -1,
            "CurrentOHD": -1,
            "CurrentEHD": -1,
            "CurrentTHD": -1,
            "VoltageOHD": -1,
            "VoltageEHD": -1,
            "VoltageTHD": -1,
        }

    # Read only dependent properties
    @property
    def NumPhases(self):
        """
        The number of phases the power source is presently configured to
        output.

        :rtype: int
        """
        return 1

    @property
    def NumFrequencyRanges(self):
        """
        The number of frequency ranges supported by the power source.

        :rtype: int
        """
        return 1

    @property
    def Count(self):
        """
        The number of phases the power source is presently configured to
        output.

        :rtype: int
        """
        return 1

    @property
    def FrequencyRampBusy(self):
        """
        Indicates if a frequency ramp is in progress.
        """
        raise NotImplementedError

    # Read-write dependent properties
    @property
    def Frequency(self):
        """
        Specifies the frequency.

        :rtype: float
        """
        answ = self.interface.vi_query(":FREQ?", "%s\n", "%f")
        self.GetError()
        return answ

    @Frequency.setter
    def Frequency(self, value):
        """
        Specifies the frequency.

        :type value: float
        """
        self.interface.vi_write(f":FREQ {value:.2f}")
        self.GetError()

    @property
    def FrequencyRange(self):
        """
        Configures the frequency range of the power source to support the
        specified maximum frequency.

        :rtype: int
        """
        return 1000 - 15

    @FrequencyRange.setter
    def FrequencyRange(self, value):
        """
        Configures the frequency range of the power source to support the
        specified maximum frequency.
        """
        raise NotImplementedError

    # Methods
    def QueryFrequencyRangeCapabilities(self, Range):
        """
        Returns the minimum and maximum frequency supported by the specified
        range.

        :param Range:
            The range to query. The Range parameter must be from 1 to the value of
            the Number of Frequency Ranges property.
        :type Range: int

        rtype: returns a list (MinFrequency, MaxFrequency)
        """
        MinFrequency = 15
        MaxFrequency = 1000
        return MinFrequency, MaxFrequency

    def InitiateMeasurement(self, Group):
        """
        This method initiates a measurement of all measurement types for all
        phases of the specified group(s).

        Parameter "Group"
            The group(s) you want to measure. You can specify any combination of
            values defined by IviACPwrMeasurementGroupEnum by ORing the values
            together. This method effectively initiates simultaneous measurements
            of all requested groups on the same output cycle.

        """
        if Group & self.Enums.IviACPwrMeasurementGroupEnum.IviACPwrMeasurementGroupBase:
            self.__measurements["VoltageRmsLN"] = self.interface.vi_query(":MEAS:VOLT:ACDC?", "%s\n", "%f")
            self.__measurements["CurrentRms"] = self.interface.vi_query(":MEAS:CURR:AC?", "%s\n", "%f")
            self.__measurements["Frequency"] = self.interface.vi_query(":MEAS:FREQ?", "%s\n", "%f")
            self.__measurements["VoltageDC"] = self.interface.vi_query(":MEAS:VOLT:DC?", "%s\n", "%f")
            self.__measurements["CurrentDC"] = self.interface.vi_query(":MEAS:CURR:DC?", "%s\n", "%f")
            self.__measurements["CrestFactor"] = self.interface.vi_query(":MEAS:CURR:CRES?", "%s\n", "%f")
            self.__measurements["PowerDC"] = self.__measurements["VoltageDC"] * self.__measurements["CurrentDC"]
            self.__measurements["CurrentPeak"] = self.interface.vi_query(":MEAS:CURR:AMPL:MAX?", "%s\n", "%f")

        if Group & self.Enums.IviACPwrMeasurementGroupEnum.IviACPwrMeasurementGroupDistortion:
            mode = self.interface.vi_query(":CONF:HARM:SOUR?", "%s\n", "%s")
            self.interface.vi_write(":CONF:HARM:SOUR CURR")
            self.__measurements["CurrentTHD"] = self.interface.vi_query(":MEAS:HARM:THD?", "%s\n", "%f")
            self.interface.vi_write(":CONF:HARM:SOUR VOLT")
            self.__measurements["VoltageTHD"] = self.interface.vi_query(":MEAS:HARM:THD?", "%s\n", "%f")
            self.interface.vi_write(":CONF:HARM:SOUR " + mode)

        if Group & self.Enums.IviACPwrMeasurementGroupEnum.IviACPwrMeasurementGroupHarmonic:
            self.__measurements["PowerFactor"] = self.interface.vi_query(":MEAS:POW:PFAC?", "%s\n", "%f")
            self.__measurements["PowerVA"] = self.interface.vi_query(":MEAS:POW:APP?", "%s\n", "%f")
            self.__measurements["PowerReal"] = self.interface.vi_query(":MEAS:POW:AC?", "%s\n", "%f")

        if Group & self.Enums.IviACPwrMeasurementGroupEnum.IviACPwrMeasurementGroupWaveform:
            pass

    def RampFrequency(self, StartFrequency, EndFrequency, Duration):
        """
        Starts a linear ramp of the output frequency from a starting to ending
        frequency value for a specified duration.

        Parameter "StartFrequency"
            The frequency ramp starting value in Hz.

        Parameter "EndFrequency"
            The frequency ramp ending value in Hz.

        Parameter "Duration"
            The ramp duration in seconds.

        """
        ph = self._parent.OutputPhases.Item()
        ac = ph.VoltageLevel
        mode = ph.DCGeneration.Mode
        if mode == self.Enums.IviACPwrDCGenerationModeEnum.IviACPwrDCGenerationModeACOnly:
            ac = ph.VoltageLevel
            dc = 0
        elif mode == self.Enums.IviACPwrDCGenerationModeEnum.IviACPwrDCGenerationModeDCOnly:
            ac = 0
            dc = ph.DCGeneration.DCVoltageLevel
        else:
            ac = ph.VoltageLevel
            dc = ph.DCGeneration.DCVoltageLevel

        self._parent.ArbWaveform.ArbitraryWaveform(
            DwellTimeList=[Duration * 1000],
            StartACVoltageList=[ac],
            EndACVoltageList=[ac],
            StartDCVoltageList=[dc],
            EndDCVoltageList=[dc],
            StartFrequencyList=[StartFrequency],
            EndFrequencyList=[EndFrequency],
            PhaseAngleList=[0],
            Count=1,
        )

    def AbortFrequencyRamp(self):
        """
        Aborts a frequency ramp.
        """
        self._parent.ArbWaveform.AbortArbitraryWaveform()

    def Item(self, Name=""):
        """
         An interface reference pointer to the IIviACPwrOutput interface which
         is selected by the output name.

        :param Name:
             The name of an output phase. It may be either a name returned by the
             Name property or a name mapped to a particular repeated capability in
             the session in the configuration store.
        :rtype: IIviACPwrOutputPhase
        """
        return self.__ch1

    def Name(self, Index=1):
        """
        The output name for a given index.

        :param Index:
            One based index into the collection of output phases.
        :rtype: IIviACPwrOutputPhase
        """
        return "P1"
