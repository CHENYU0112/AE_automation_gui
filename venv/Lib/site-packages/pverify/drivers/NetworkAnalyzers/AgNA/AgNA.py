from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .AgNA_dllwrap import *


class AgNA(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = AgNA_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ChannelsAbort(self):
        """"""
        return self._dllwrap.ChannelsAbort(self._vi)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def viWrite(self, Count):
        """

        :param Count:
        :type Count:
        """
        return self._dllwrap.viWrite(self._vi, Count)

    def SystemWriteString(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, Data)

    def viRead(self, BufferSize):
        """

        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.viRead(self._vi, BufferSize)

    def ChannelTriggerSweep(self, RepCapIdentifier, TimeoutVal):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param TimeoutVal:
        :type TimeoutVal:
        """
        return self._dllwrap.ChannelTriggerSweep(self._vi, RepCapIdentifier, TimeoutVal)

    def ChannelSetCorrectionArrays(self, RepCapIdentifier, ValBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChannelSetCorrectionArrays(self._vi, RepCapIdentifier, ValBufferSize)

    def ChannelGetCorrectionArrays(self, RepCapIdentifier, RetValBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ChannelGetCorrectionArrays(self._vi, RepCapIdentifier, RetValBufferSize)

    def ChannelClearAverage(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelClearAverage(self._vi, RepCapIdentifier)

    def ChannelAsynchronousTriggerSweep(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelAsynchronousTriggerSweep(self._vi, RepCapIdentifier)

    def ChannelGetPortExtension(self, RepCapIdentifier, PortNumVal):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param PortNumVal:
        :type PortNumVal:
        """
        return self._dllwrap.ChannelGetPortExtension(self._vi, RepCapIdentifier, PortNumVal)

    def ChannelSetPortExtension(self, RepCapIdentifier, PortNumVal, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param PortNumVal:
        :type PortNumVal:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ChannelSetPortExtension(self._vi, RepCapIdentifier, PortNumVal, Val)

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def ChannelMeasurementSetSParameter(self, RepCapIdentifier, NewReceiverPortVal, NewSourcePortVal):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param NewReceiverPortVal:
        :type NewReceiverPortVal:
        :param NewSourcePortVal:
        :type NewSourcePortVal:
        """
        return self._dllwrap.ChannelMeasurementSetSParameter(
            self._vi, RepCapIdentifier, NewReceiverPortVal, NewSourcePortVal
        )

    def ChannelMeasurementQueryStatistics(self, RepCapIdentifier, Type):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Type:
        :type Type:
        """
        return self._dllwrap.ChannelMeasurementQueryStatistics(self._vi, RepCapIdentifier, Type)

    def ChannelMeasurementGetSParameter(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelMeasurementGetSParameter(self._vi, RepCapIdentifier)

    def ChannelMeasurementFetchX(self, RepCapIdentifier, RetValBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ChannelMeasurementFetchX(self._vi, RepCapIdentifier, RetValBufferSize)

    def ChannelMeasurementFetchMemoryFormatted(self, RepCapIdentifier, RetValBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ChannelMeasurementFetchMemoryFormatted(self._vi, RepCapIdentifier, RetValBufferSize)

    def ChannelMeasurementFetchMemoryComplex(
        self, RepCapIdentifier, pRealResponseValBufferSize, pImagResponseValBufferSize
    ):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param pRealResponseValBufferSize:
        :type pRealResponseValBufferSize:
        :param pImagResponseValBufferSize:
        :type pImagResponseValBufferSize:
        """
        return self._dllwrap.ChannelMeasurementFetchMemoryComplex(
            self._vi,
            RepCapIdentifier,
            pRealResponseValBufferSize,
            pImagResponseValBufferSize,
        )

    def ChannelMeasurementFetchFormatted(self, RepCapIdentifier, RetValBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ChannelMeasurementFetchFormatted(self._vi, RepCapIdentifier, RetValBufferSize)

    def ChannelMeasurementFetchComplex(self, RepCapIdentifier, pRealResponseValBufferSize, pImagResponseValBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param pRealResponseValBufferSize:
        :type pRealResponseValBufferSize:
        :param pImagResponseValBufferSize:
        :type pImagResponseValBufferSize:
        """
        return self._dllwrap.ChannelMeasurementFetchComplex(
            self._vi,
            RepCapIdentifier,
            pRealResponseValBufferSize,
            pImagResponseValBufferSize,
        )

    def ChannelMeasurementDelete(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelMeasurementDelete(self._vi, RepCapIdentifier)

    def ChannelMeasurementDataToMemory(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelMeasurementDataToMemory(self._vi, RepCapIdentifier)

    def ChannelMeasurementCreate(self, RepCapIdentifier, ReceiverPortVal, SourcePortVal):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param ReceiverPortVal:
        :type ReceiverPortVal:
        :param SourcePortVal:
        :type SourcePortVal:
        """
        return self._dllwrap.ChannelMeasurementCreate(self._vi, RepCapIdentifier, ReceiverPortVal, SourcePortVal)

    def GetChannelMeasurementName(self, Channel, Index, NameBufferSize):
        """

        :param Channel:
        :type Channel:
        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelMeasurementName(self._vi, Channel, Index, NameBufferSize)

    def ChannelMeasurementLimitDeleteAll(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelMeasurementLimitDeleteAll(self._vi, RepCapIdentifier)

    def ChannelMeasurementLimitDelete(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelMeasurementLimitDelete(self._vi, RepCapIdentifier)

    def ChannelMeasurementLimitAdd(self, RepCapIdentifier, LimitTypeVal, BeginXVal, EndXVal, BeginYVal, EndYVal):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param LimitTypeVal:
        :type LimitTypeVal:
        :param BeginXVal:
        :type BeginXVal:
        :param EndXVal:
        :type EndXVal:
        :param BeginYVal:
        :type BeginYVal:
        :param EndYVal:
        :type EndYVal:
        """
        return self._dllwrap.ChannelMeasurementLimitAdd(
            self._vi,
            RepCapIdentifier,
            LimitTypeVal,
            BeginXVal,
            EndXVal,
            BeginYVal,
            EndYVal,
        )

    def ChannelMeasurementMarkerSetValueFromMarker(self, RepCapIdentifier, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ChannelMeasurementMarkerSetValueFromMarker(self._vi, RepCapIdentifier, Val)

    def ChannelMeasurementMarkerSearch(self, RepCapIdentifier, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ChannelMeasurementMarkerSearch(self._vi, RepCapIdentifier, Val)

    def ChannelMeasurementMarkerQueryValue(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelMeasurementMarkerQueryValue(self._vi, RepCapIdentifier)

    def ChannelMeasurementMarkerQueryBandwidth(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelMeasurementMarkerQueryBandwidth(self._vi, RepCapIdentifier)

    def ChannelMeasurementMarkerActivate(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelMeasurementMarkerActivate(self._vi, RepCapIdentifier)

    def GetChannelMeasurementMarkerName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelMeasurementMarkerName(self._vi, Index, NameBufferSize)

    def ChannelMeasurementTraceAutoScale(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelMeasurementTraceAutoScale(self._vi, RepCapIdentifier)

    def ChannelSegmentDeleteAll(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelSegmentDeleteAll(self._vi, RepCapIdentifier)

    def ChannelSegmentDelete(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ChannelSegmentDelete(self._vi, RepCapIdentifier)

    def ChannelSegmentAddStartStop(
        self,
        RepCapIdentifier,
        StartVal,
        StopVal,
        NumberOfPointsVal,
        IFBandwidthVal,
        PowerVal,
        TimeVal,
    ):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param StartVal:
        :type StartVal:
        :param StopVal:
        :type StopVal:
        :param NumberOfPointsVal:
        :type NumberOfPointsVal:
        :param IFBandwidthVal:
        :type IFBandwidthVal:
        :param PowerVal:
        :type PowerVal:
        :param TimeVal:
        :type TimeVal:
        """
        return self._dllwrap.ChannelSegmentAddStartStop(
            self._vi,
            RepCapIdentifier,
            StartVal,
            StopVal,
            NumberOfPointsVal,
            IFBandwidthVal,
            PowerVal,
            TimeVal,
        )

    def ChannelSegmentAddCenterSpan(
        self,
        RepCapIdentifier,
        CenterVal,
        SpanVal,
        NumberOfPointVal,
        IFBandwidthVal,
        PowerVal,
        TimeVal,
    ):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param CenterVal:
        :type CenterVal:
        :param SpanVal:
        :type SpanVal:
        :param NumberOfPointVal:
        :type NumberOfPointVal:
        :param IFBandwidthVal:
        :type IFBandwidthVal:
        :param PowerVal:
        :type PowerVal:
        :param TimeVal:
        :type TimeVal:
        """
        return self._dllwrap.ChannelSegmentAddCenterSpan(
            self._vi,
            RepCapIdentifier,
            CenterVal,
            SpanVal,
            NumberOfPointVal,
            IFBandwidthVal,
            PowerVal,
            TimeVal,
        )

    def ChannelSourcePowerSetCalibrationArray(self, RepCapIdentifier, PortVal, ValBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param PortVal:
        :type PortVal:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ChannelSourcePowerSetCalibrationArray(self._vi, RepCapIdentifier, PortVal, ValBufferSize)

    def ChannelSourcePowerGetCalibrationArray(self, RepCapIdentifier, PortVal, RetValBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param PortVal:
        :type PortVal:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ChannelSourcePowerGetCalibrationArray(
            self._vi, RepCapIdentifier, PortVal, RetValBufferSize
        )

    def ChannelSourcePowerGetAttenuation(self, RepCapIdentifier, PortVal):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param PortVal:
        :type PortVal:
        """
        return self._dllwrap.ChannelSourcePowerGetAttenuation(self._vi, RepCapIdentifier, PortVal)

    def ChannelSourcePowerSetAttenuation(self, RepCapIdentifier, PortVal, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param PortVal:
        :type PortVal:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ChannelSourcePowerSetAttenuation(self._vi, RepCapIdentifier, PortVal, Val)

    def ChannelSourcePowerGetAttenuationAuto(self, RepCapIdentifier, PortVal):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param PortVal:
        :type PortVal:
        """
        return self._dllwrap.ChannelSourcePowerGetAttenuationAuto(self._vi, RepCapIdentifier, PortVal)

    def ChannelSourcePowerSetAttenuationAuto(self, RepCapIdentifier, PortVal, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param PortVal:
        :type PortVal:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ChannelSourcePowerSetAttenuationAuto(self._vi, RepCapIdentifier, PortVal, Val)

    def ChannelSourcePowerGetCorrectionOn(self, RepCapIdentifier, PortVal):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param PortVal:
        :type PortVal:
        """
        return self._dllwrap.ChannelSourcePowerGetCorrectionOn(self._vi, RepCapIdentifier, PortVal)

    def ChannelSourcePowerSetCorrectionOn(self, RepCapIdentifier, PortVal, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param PortVal:
        :type PortVal:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ChannelSourcePowerSetCorrectionOn(self._vi, RepCapIdentifier, PortVal, Val)

    def ChannelSourcePowerGetLevel(self, RepCapIdentifier, PortVal):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param PortVal:
        :type PortVal:
        """
        return self._dllwrap.ChannelSourcePowerGetLevel(self._vi, RepCapIdentifier, PortVal)

    def ChannelSourcePowerSetLevel(self, RepCapIdentifier, PortVal, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param PortVal:
        :type PortVal:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ChannelSourcePowerSetLevel(self._vi, RepCapIdentifier, PortVal, Val)

    def ChannelStimulusRangeConfigureStartStop(self, RepCapIdentifier, StartVal, StopVal):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param StartVal:
        :type StartVal:
        :param StopVal:
        :type StopVal:
        """
        return self._dllwrap.ChannelStimulusRangeConfigureStartStop(self._vi, RepCapIdentifier, StartVal, StopVal)

    def ChannelStimulusRangeConfigureCenterSpan(self, RepCapIdentifier, CenterVal, SpanVal):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param CenterVal:
        :type CenterVal:
        :param SpanVal:
        :type SpanVal:
        """
        return self._dllwrap.ChannelStimulusRangeConfigureCenterSpan(self._vi, RepCapIdentifier, CenterVal, SpanVal)

    def StatusPreset(self):
        """"""
        return self._dllwrap.StatusPreset(self._vi)

    def StatusConfigureServiceRequest(self, Val):
        """

        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusConfigureServiceRequest(self._vi, Val)

    def StatusClear(self):
        """"""
        return self._dllwrap.StatusClear(self._vi)

    def StatusGetRegister(self, Register, SubRegister):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusGetRegister(self._vi, Register, SubRegister)

    def StatusSetRegister(self, Register, SubRegister, Val):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusSetRegister(self._vi, Register, SubRegister, Val)

    def SystemWaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.SystemWaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def SystemSaveState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemSaveState(self._vi, Identifier)

    def SystemRecallState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemRecallState(self._vi, Identifier)

    def SystemEnableLocalControls(self):
        """"""
        return self._dllwrap.SystemEnableLocalControls(self._vi)

    def SystemDisableLocalControls(self):
        """"""
        return self._dllwrap.SystemDisableLocalControls(self._vi)

    def SystemRead(self, Size):
        """

        :param Size:
        :type Size:
        """
        return self._dllwrap.SystemRead(self._vi, Size)

    def SystemWrite(self, CommandString):
        """

        :param CommandString:
        :type CommandString:
        """
        return self._dllwrap.SystemWrite(self._vi, CommandString)
