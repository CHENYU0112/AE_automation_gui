from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import AgNA_const as const
from .AgNA_const import *


class AgNA_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("AgNA.dll", "AgNA_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "AgNA"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.AgNA_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.AgNA_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.AgNA_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.AgNA_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.AgNA_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        status = self.dll.AgNA_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.AgNA_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        status = self.dll.AgNA_GetNextCoercionRecord(ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.AgNA_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.AgNA_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.AgNA_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.AgNA_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.AgNA_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.AgNA_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.AgNA_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.AgNA_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.AgNA_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.AgNA_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.AgNA_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.AgNA_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        status = self.dll.AgNA_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgNA_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgNA_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgNA_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgNA_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgNA_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelsAbort(self, Vi):
        status = self.dll.AgNA_ChannelsAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgNA_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def viWrite(self, Vi, Count):
        Buffer = ARRAY_ViByte(Count)
        ReturnCount = ViInt64()
        status = self.dll.AgNA_viWrite(ViSession(Vi), ViInt64(Count), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def SystemWriteString(self, Vi, Data):
        status = self.dll.AgNA_SystemWriteString(ViSession(Vi), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViByte(BufferSize)
        ReturnCount = ViInt64()
        status = self.dll.AgNA_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def ChannelTriggerSweep(self, Vi, RepCapIdentifier, TimeoutVal):
        status = self.dll.AgNA_ChannelTriggerSweep(ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(TimeoutVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelSetCorrectionArrays(self, Vi, RepCapIdentifier, ValBufferSize):
        Val = ARRAY_ViByte(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgNA_ChannelSetCorrectionArrays(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ChannelGetCorrectionArrays(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViByte(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgNA_ChannelGetCorrectionArrays(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ChannelClearAverage(self, Vi, RepCapIdentifier):
        status = self.dll.AgNA_ChannelClearAverage(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelAsynchronousTriggerSweep(self, Vi, RepCapIdentifier):
        status = self.dll.AgNA_ChannelAsynchronousTriggerSweep(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelGetPortExtension(self, Vi, RepCapIdentifier, PortNumVal):
        RetVal = ViReal64()
        status = self.dll.AgNA_ChannelGetPortExtension(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(PortNumVal),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ChannelSetPortExtension(self, Vi, RepCapIdentifier, PortNumVal, Val):
        status = self.dll.AgNA_ChannelSetPortExtension(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(PortNumVal),
            ViReal64(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgNA_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def ChannelMeasurementSetSParameter(self, Vi, RepCapIdentifier, NewReceiverPortVal, NewSourcePortVal):
        status = self.dll.AgNA_ChannelMeasurementSetSParameter(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(NewReceiverPortVal),
            ViInt32(NewSourcePortVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelMeasurementQueryStatistics(self, Vi, RepCapIdentifier, Type):
        RetVal = ViReal64()
        status = self.dll.AgNA_ChannelMeasurementQueryStatistics(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(Type), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ChannelMeasurementGetSParameter(self, Vi, RepCapIdentifier):
        pReceiverPortVal = ViInt32()
        pSourcePortVal = ViInt32()
        status = self.dll.AgNA_ChannelMeasurementGetSParameter(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            byref(pReceiverPortVal),
            byref(pSourcePortVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pReceiverPortVal = int(pReceiverPortVal.value)
        pSourcePortVal = int(pSourcePortVal.value)
        return pReceiverPortVal, pSourcePortVal

    def ChannelMeasurementFetchX(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgNA_ChannelMeasurementFetchX(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ChannelMeasurementFetchMemoryFormatted(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgNA_ChannelMeasurementFetchMemoryFormatted(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ChannelMeasurementFetchMemoryComplex(
        self, Vi, RepCapIdentifier, pRealResponseValBufferSize, pImagResponseValBufferSize
    ):
        pRealResponseVal = ARRAY_ViReal64(pRealResponseValBufferSize)
        pRealResponseValActualSize = ViInt32()
        pImagResponseVal = ARRAY_ViReal64(pImagResponseValBufferSize)
        pImagResponseValActualSize = ViInt32()
        status = self.dll.AgNA_ChannelMeasurementFetchMemoryComplex(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(pRealResponseValBufferSize),
            pRealResponseVal,
            byref(pRealResponseValActualSize),
            ViInt32(pImagResponseValBufferSize),
            pImagResponseVal,
            byref(pImagResponseValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pRealResponseVal = list(pRealResponseVal)
        pRealResponseValActualSize = int(pRealResponseValActualSize.value)
        pImagResponseVal = list(pImagResponseVal)
        pImagResponseValActualSize = int(pImagResponseValActualSize.value)
        return (
            pRealResponseVal,
            pRealResponseValActualSize,
            pImagResponseVal,
            pImagResponseValActualSize,
        )

    def ChannelMeasurementFetchFormatted(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgNA_ChannelMeasurementFetchFormatted(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ChannelMeasurementFetchComplex(
        self, Vi, RepCapIdentifier, pRealResponseValBufferSize, pImagResponseValBufferSize
    ):
        pRealResponseVal = ARRAY_ViReal64(pRealResponseValBufferSize)
        pRealResponseValActualSize = ViInt32()
        pImagResponseVal = ARRAY_ViReal64(pImagResponseValBufferSize)
        pImagResponseValActualSize = ViInt32()
        status = self.dll.AgNA_ChannelMeasurementFetchComplex(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(pRealResponseValBufferSize),
            pRealResponseVal,
            byref(pRealResponseValActualSize),
            ViInt32(pImagResponseValBufferSize),
            pImagResponseVal,
            byref(pImagResponseValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pRealResponseVal = list(pRealResponseVal)
        pRealResponseValActualSize = int(pRealResponseValActualSize.value)
        pImagResponseVal = list(pImagResponseVal)
        pImagResponseValActualSize = int(pImagResponseValActualSize.value)
        return (
            pRealResponseVal,
            pRealResponseValActualSize,
            pImagResponseVal,
            pImagResponseValActualSize,
        )

    def ChannelMeasurementDelete(self, Vi, RepCapIdentifier):
        status = self.dll.AgNA_ChannelMeasurementDelete(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelMeasurementDataToMemory(self, Vi, RepCapIdentifier):
        status = self.dll.AgNA_ChannelMeasurementDataToMemory(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelMeasurementCreate(self, Vi, RepCapIdentifier, ReceiverPortVal, SourcePortVal):
        status = self.dll.AgNA_ChannelMeasurementCreate(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(ReceiverPortVal),
            ViInt32(SourcePortVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetChannelMeasurementName(self, Vi, Channel, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgNA_GetChannelMeasurementName(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(Index),
            ViInt32(NameBufferSize),
            Name,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def ChannelMeasurementLimitDeleteAll(self, Vi, RepCapIdentifier):
        status = self.dll.AgNA_ChannelMeasurementLimitDeleteAll(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelMeasurementLimitDelete(self, Vi, RepCapIdentifier):
        status = self.dll.AgNA_ChannelMeasurementLimitDelete(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelMeasurementLimitAdd(self, Vi, RepCapIdentifier, LimitTypeVal, BeginXVal, EndXVal, BeginYVal, EndYVal):
        status = self.dll.AgNA_ChannelMeasurementLimitAdd(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(LimitTypeVal),
            ViReal64(BeginXVal),
            ViReal64(EndXVal),
            ViReal64(BeginYVal),
            ViReal64(EndYVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelMeasurementMarkerSetValueFromMarker(self, Vi, RepCapIdentifier, Val):
        status = self.dll.AgNA_ChannelMeasurementMarkerSetValueFromMarker(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelMeasurementMarkerSearch(self, Vi, RepCapIdentifier, Val):
        status = self.dll.AgNA_ChannelMeasurementMarkerSearch(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelMeasurementMarkerQueryValue(self, Vi, RepCapIdentifier):
        pRealVal = ViReal64()
        pImagVal = ViReal64()
        status = self.dll.AgNA_ChannelMeasurementMarkerQueryValue(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            byref(pRealVal),
            byref(pImagVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pRealVal = float(pRealVal.value)
        pImagVal = float(pImagVal.value)
        return pRealVal, pImagVal

    def ChannelMeasurementMarkerQueryBandwidth(self, Vi, RepCapIdentifier):
        pBandWidthVal = ViReal64()
        pCenterFreqVal = ViReal64()
        pQVal = ViReal64()
        pLossVal = ViReal64()
        status = self.dll.AgNA_ChannelMeasurementMarkerQueryBandwidth(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            byref(pBandWidthVal),
            byref(pCenterFreqVal),
            byref(pQVal),
            byref(pLossVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pBandWidthVal = float(pBandWidthVal.value)
        pCenterFreqVal = float(pCenterFreqVal.value)
        pQVal = float(pQVal.value)
        pLossVal = float(pLossVal.value)
        return pBandWidthVal, pCenterFreqVal, pQVal, pLossVal

    def ChannelMeasurementMarkerActivate(self, Vi, RepCapIdentifier):
        status = self.dll.AgNA_ChannelMeasurementMarkerActivate(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetChannelMeasurementMarkerName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgNA_GetChannelMeasurementMarkerName(
            ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def ChannelMeasurementTraceAutoScale(self, Vi, RepCapIdentifier):
        status = self.dll.AgNA_ChannelMeasurementTraceAutoScale(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelSegmentDeleteAll(self, Vi, RepCapIdentifier):
        status = self.dll.AgNA_ChannelSegmentDeleteAll(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelSegmentDelete(self, Vi, RepCapIdentifier):
        status = self.dll.AgNA_ChannelSegmentDelete(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelSegmentAddStartStop(
        self,
        Vi,
        RepCapIdentifier,
        StartVal,
        StopVal,
        NumberOfPointsVal,
        IFBandwidthVal,
        PowerVal,
        TimeVal,
    ):
        status = self.dll.AgNA_ChannelSegmentAddStartStop(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(StartVal),
            ViReal64(StopVal),
            ViInt32(NumberOfPointsVal),
            ViReal64(IFBandwidthVal),
            ViReal64(PowerVal),
            ViReal64(TimeVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelSegmentAddCenterSpan(
        self,
        Vi,
        RepCapIdentifier,
        CenterVal,
        SpanVal,
        NumberOfPointVal,
        IFBandwidthVal,
        PowerVal,
        TimeVal,
    ):
        status = self.dll.AgNA_ChannelSegmentAddCenterSpan(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(CenterVal),
            ViReal64(SpanVal),
            ViInt32(NumberOfPointVal),
            ViReal64(IFBandwidthVal),
            ViReal64(PowerVal),
            ViReal64(TimeVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelSourcePowerSetCalibrationArray(self, Vi, RepCapIdentifier, PortVal, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgNA_ChannelSourcePowerSetCalibrationArray(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(PortVal),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ChannelSourcePowerGetCalibrationArray(self, Vi, RepCapIdentifier, PortVal, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgNA_ChannelSourcePowerGetCalibrationArray(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(PortVal),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ChannelSourcePowerGetAttenuation(self, Vi, RepCapIdentifier, PortVal):
        RetVal = ViReal64()
        status = self.dll.AgNA_ChannelSourcePowerGetAttenuation(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(PortVal),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ChannelSourcePowerSetAttenuation(self, Vi, RepCapIdentifier, PortVal, Val):
        status = self.dll.AgNA_ChannelSourcePowerSetAttenuation(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(PortVal),
            ViReal64(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelSourcePowerGetAttenuationAuto(self, Vi, RepCapIdentifier, PortVal):
        RetVal = ViBoolean()
        status = self.dll.AgNA_ChannelSourcePowerGetAttenuationAuto(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(PortVal),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def ChannelSourcePowerSetAttenuationAuto(self, Vi, RepCapIdentifier, PortVal, Val):
        status = self.dll.AgNA_ChannelSourcePowerSetAttenuationAuto(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(PortVal),
            ViBoolean(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelSourcePowerGetCorrectionOn(self, Vi, RepCapIdentifier, PortVal):
        RetVal = ViBoolean()
        status = self.dll.AgNA_ChannelSourcePowerGetCorrectionOn(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(PortVal),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def ChannelSourcePowerSetCorrectionOn(self, Vi, RepCapIdentifier, PortVal, Val):
        status = self.dll.AgNA_ChannelSourcePowerSetCorrectionOn(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(PortVal),
            ViBoolean(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelSourcePowerGetLevel(self, Vi, RepCapIdentifier, PortVal):
        RetVal = ViReal64()
        status = self.dll.AgNA_ChannelSourcePowerGetLevel(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(PortVal),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ChannelSourcePowerSetLevel(self, Vi, RepCapIdentifier, PortVal, Val):
        status = self.dll.AgNA_ChannelSourcePowerSetLevel(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(PortVal),
            ViReal64(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelStimulusRangeConfigureStartStop(self, Vi, RepCapIdentifier, StartVal, StopVal):
        status = self.dll.AgNA_ChannelStimulusRangeConfigureStartStop(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(StartVal),
            ViReal64(StopVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelStimulusRangeConfigureCenterSpan(self, Vi, RepCapIdentifier, CenterVal, SpanVal):
        status = self.dll.AgNA_ChannelStimulusRangeConfigureCenterSpan(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(CenterVal),
            ViReal64(SpanVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusPreset(self, Vi):
        status = self.dll.AgNA_StatusPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusConfigureServiceRequest(self, Vi, Val):
        status = self.dll.AgNA_StatusConfigureServiceRequest(ViSession(Vi), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusClear(self, Vi):
        status = self.dll.AgNA_StatusClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusGetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.AgNA_StatusGetRegister(ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatusSetRegister(self, Vi, Register, SubRegister, Val):
        status = self.dll.AgNA_StatusSetRegister(ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        status = self.dll.AgNA_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemSaveState(self, Vi, Identifier):
        status = self.dll.AgNA_SystemSaveState(ViSession(Vi), ViConstString(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRecallState(self, Vi, Identifier):
        status = self.dll.AgNA_SystemRecallState(ViSession(Vi), ViConstString(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemEnableLocalControls(self, Vi):
        status = self.dll.AgNA_SystemEnableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemDisableLocalControls(self, Vi):
        status = self.dll.AgNA_SystemDisableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRead(self, Vi, Size):
        Value = ARRAY_ViChar(Size)
        ActualSize = ViInt32()
        status = self.dll.AgNA_SystemRead(ViSession(Vi), ViInt32(Size), Value, byref(ActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Value = decode(Value)
        ActualSize = int(ActualSize.value)
        return Value, ActualSize

    def SystemWrite(self, Vi, CommandString):
        status = self.dll.AgNA_SystemWrite(ViSession(Vi), ViConstString(CommandString))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
