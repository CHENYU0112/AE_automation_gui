from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import rsnrpz_const as const
from .rsnrpz_const import *


class rsnrpz_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("rsnrpz_32.dll", "rsnrpz_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "rsnrpz"

    @property
    def const(self):
        return const

    def chan_getCacheRange(self, instrumentHandle, channel):
        pdCurrent = ViReal64()
        pdMin = ViReal64()
        pdMax = ViReal64()
        status = self.dll.rsnrpz_chan_getCacheRange(
            ViSession(instrumentHandle),
            ViInt32(channel),
            byref(pdCurrent),
            byref(pdMin),
            byref(pdMax),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pdCurrent = float(pdCurrent.value)
        pdMin = float(pdMin.value)
        pdMax = float(pdMax.value)
        return pdCurrent, pdMin, pdMax

    def setTimeout(self, ulNewTimo):
        status = self.dll.rsnrpz_setTimeout(ViUInt32(ulNewTimo))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def getTimeout(
        self,
    ):
        pulNewTimo = ViUInt32()
        status = self.dll.rsnrpz_getTimeout(byref(pulNewTimo))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(pulNewTimo.value)

    def init(self, resourceName, IDQuery, resetDevice):
        instrumentHandle = ViSession()
        status = self.dll.rsnrpz_init(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            byref(instrumentHandle),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(instrumentHandle.value)

    def init_long_distance(self, IDQuery, resetDevice, resourceName):
        instrumentHandle = ViSession()
        status = self.dll.rsnrpz_init_long_distance(
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViString(resourceName),
            byref(instrumentHandle),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(instrumentHandle.value)

    def AddSensor(self, instrumentHandle, channel, resourceName, IDQuery, resetDevice):
        status = self.dll.rsnrpz_AddSensor(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chans_abort(self, instrumentHandle):
        status = self.dll.rsnrpz_chans_abort(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chans_getCount(self, instrumentHandle):
        count = ViInt32()
        status = self.dll.rsnrpz_chans_getCount(ViSession(instrumentHandle), byref(count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(count.value)

    def chans_initiate(self, instrumentHandle):
        status = self.dll.rsnrpz_chans_initiate(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chans_zero(self, instrumentHandle):
        status = self.dll.rsnrpz_chans_zero(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_zeroAdvanced(self, instrumentHandle, channel, zeroing):
        status = self.dll.rsnrpz_chan_zeroAdvanced(ViSession(instrumentHandle), ViInt32(channel), ViInt32(zeroing))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chans_isZeroingComplete(self, instrumentHandle):
        zeroingCompleted = ViBoolean()
        status = self.dll.rsnrpz_chans_isZeroingComplete(ViSession(instrumentHandle), byref(zeroingCompleted))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(zeroingCompleted.value)

    def chans_isMeasurementComplete(self, instrumentHandle):
        measurementCompleted = ViBoolean()
        status = self.dll.rsnrpz_chans_isMeasurementComplete(ViSession(instrumentHandle), byref(measurementCompleted))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(measurementCompleted.value)

    def chan_mode(self, instrumentHandle, channel, measurementMode):
        status = self.dll.rsnrpz_chan_mode(ViSession(instrumentHandle), ViInt32(channel), ViInt32(measurementMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def timing_configureExclude(self, instrumentHandle, channel, excludeStart, excludeStop):
        status = self.dll.rsnrpz_timing_configureExclude(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViReal64(excludeStart),
            ViReal64(excludeStop),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def timing_setTimingExcludeStart(self, instrumentHandle, channel, excludeStart):
        status = self.dll.rsnrpz_timing_setTimingExcludeStart(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(excludeStart)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def timing_getTimingExcludeStart(self, instrumentHandle, channel):
        excludeStart = ViReal64()
        status = self.dll.rsnrpz_timing_getTimingExcludeStart(
            ViSession(instrumentHandle), ViInt32(channel), byref(excludeStart)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(excludeStart.value)

    def timing_setTimingExcludeStop(self, instrumentHandle, channel, excludeStop):
        status = self.dll.rsnrpz_timing_setTimingExcludeStop(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(excludeStop)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def timing_getTimingExcludeStop(self, instrumentHandle, channel):
        excludeStop = ViReal64()
        status = self.dll.rsnrpz_timing_getTimingExcludeStop(
            ViSession(instrumentHandle), ViInt32(channel), byref(excludeStop)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(excludeStop.value)

    def bandwidth_setBw(self, instrumentHandle, channel, bandwidth):
        status = self.dll.rsnrpz_bandwidth_setBw(ViSession(instrumentHandle), ViInt32(channel), ViInt32(bandwidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def bandwidth_getBw(self, instrumentHandle, channel):
        bandwidth = ViInt32()
        status = self.dll.rsnrpz_bandwidth_getBw(ViSession(instrumentHandle), ViInt32(channel), byref(bandwidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(bandwidth.value)

    def bandwidth_getBwList(self, instrumentHandle, channel, bufferSize):
        bandwidthList = ARRAY_ViChar(bufferSize)
        status = self.dll.rsnrpz_bandwidth_getBwList(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(bufferSize),
            bandwidthList,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(bandwidthList)

    def avg_configureAvgAuto(self, instrumentHandle, channel, resolution):
        status = self.dll.rsnrpz_avg_configureAvgAuto(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def avg_configureAvgNSRatio(self, instrumentHandle, channel, maximumNoiseRatio, upperTimeLimit):
        status = self.dll.rsnrpz_avg_configureAvgNSRatio(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViReal64(maximumNoiseRatio),
            ViReal64(upperTimeLimit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def avg_configureAvgManual(self, instrumentHandle, channel, count):
        status = self.dll.rsnrpz_avg_configureAvgManual(ViSession(instrumentHandle), ViInt32(channel), ViInt32(count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def avg_setAutoEnabled(self, instrumentHandle, channel, autoEnabled):
        status = self.dll.rsnrpz_avg_setAutoEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(autoEnabled)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def avg_getAutoEnabled(self, instrumentHandle, channel):
        autoEnabled = ViBoolean()
        status = self.dll.rsnrpz_avg_getAutoEnabled(ViSession(instrumentHandle), ViInt32(channel), byref(autoEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(autoEnabled.value)

    def avg_setAutoMaxMeasuringTime(self, instrumentHandle, channel, upperTimeLimit):
        status = self.dll.rsnrpz_avg_setAutoMaxMeasuringTime(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(upperTimeLimit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def avg_getAutoMaxMeasuringTime(self, instrumentHandle, channel):
        upperTimeLimit = ViReal64()
        status = self.dll.rsnrpz_avg_getAutoMaxMeasuringTime(
            ViSession(instrumentHandle), ViInt32(channel), byref(upperTimeLimit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(upperTimeLimit.value)

    def avg_setAutoNoiseSignalRatio(self, instrumentHandle, channel, maximumNoiseRatio):
        status = self.dll.rsnrpz_avg_setAutoNoiseSignalRatio(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(maximumNoiseRatio)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def avg_getAutoNoiseSignalRatio(self, instrumentHandle, channel):
        maximumNoiseRatio = ViReal64()
        status = self.dll.rsnrpz_avg_getAutoNoiseSignalRatio(
            ViSession(instrumentHandle), ViInt32(channel), byref(maximumNoiseRatio)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(maximumNoiseRatio.value)

    def avg_setAutoResolution(self, instrumentHandle, channel, resolution):
        status = self.dll.rsnrpz_avg_setAutoResolution(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def avg_getAutoResolution(self, instrumentHandle, channel):
        resolution = ViInt32()
        status = self.dll.rsnrpz_avg_getAutoResolution(ViSession(instrumentHandle), ViInt32(channel), byref(resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(resolution.value)

    def avg_setAutoType(self, instrumentHandle, channel, method):
        status = self.dll.rsnrpz_avg_setAutoType(ViSession(instrumentHandle), ViInt32(channel), ViInt32(method))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def avg_getAutoType(self, instrumentHandle, channel):
        method = ViInt32()
        status = self.dll.rsnrpz_avg_getAutoType(ViSession(instrumentHandle), ViInt32(channel), byref(method))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(method.value)

    def avg_setCount(self, instrumentHandle, channel, count):
        status = self.dll.rsnrpz_avg_setCount(ViSession(instrumentHandle), ViInt32(channel), ViInt32(count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def avg_getCount(self, instrumentHandle, channel):
        count = ViInt32()
        status = self.dll.rsnrpz_avg_getCount(ViSession(instrumentHandle), ViInt32(channel), byref(count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(count.value)

    def avg_setEnabled(self, instrumentHandle, channel, averaging):
        status = self.dll.rsnrpz_avg_setEnabled(ViSession(instrumentHandle), ViInt32(channel), ViBoolean(averaging))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def avg_getEnabled(self, instrumentHandle, channel):
        averaging = ViBoolean()
        status = self.dll.rsnrpz_avg_getEnabled(ViSession(instrumentHandle), ViInt32(channel), byref(averaging))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(averaging.value)

    def avg_setSlot(self, instrumentHandle, channel, timeslot):
        status = self.dll.rsnrpz_avg_setSlot(ViSession(instrumentHandle), ViInt32(channel), ViInt32(timeslot))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def avg_getSlot(self, instrumentHandle, channel):
        timeslot = ViInt32()
        status = self.dll.rsnrpz_avg_getSlot(ViSession(instrumentHandle), ViInt32(channel), byref(timeslot))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(timeslot.value)

    def avg_setTerminalControl(self, instrumentHandle, channel, terminalControl):
        status = self.dll.rsnrpz_avg_setTerminalControl(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(terminalControl)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def avg_getTerminalControl(self, instrumentHandle, channel):
        terminalControl = ViInt32()
        status = self.dll.rsnrpz_avg_getTerminalControl(
            ViSession(instrumentHandle), ViInt32(channel), byref(terminalControl)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(terminalControl.value)

    def avg_reset(self, instrumentHandle, channel):
        status = self.dll.rsnrpz_avg_reset(ViSession(instrumentHandle), ViInt32(channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def range_setAutoEnabled(self, instrumentHandle, channel, autoRange):
        status = self.dll.rsnrpz_range_setAutoEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(autoRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def range_getAutoEnabled(self, instrumentHandle, channel):
        autoRange = ViBoolean()
        status = self.dll.rsnrpz_range_getAutoEnabled(ViSession(instrumentHandle), ViInt32(channel), byref(autoRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(autoRange.value)

    def range_setCrossoverLevel(self, instrumentHandle, channel, crossoverLevel):
        status = self.dll.rsnrpz_range_setCrossoverLevel(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(crossoverLevel)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def range_getCrossoverLevel(self, instrumentHandle, channel):
        crossoverLevel = ViReal64()
        status = self.dll.rsnrpz_range_getCrossoverLevel(
            ViSession(instrumentHandle), ViInt32(channel), byref(crossoverLevel)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(crossoverLevel.value)

    def range_setRange(self, instrumentHandle, channel, range):
        status = self.dll.rsnrpz_range_setRange(ViSession(instrumentHandle), ViInt32(channel), ViInt32(range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def range_getRange(self, instrumentHandle, channel):
        range = ViInt32()
        status = self.dll.rsnrpz_range_getRange(ViSession(instrumentHandle), ViInt32(channel), byref(range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(range.value)

    def corr_configureCorrections(
        self,
        instrumentHandle,
        channel,
        offsetState,
        offset,
        reserved1,
        reserved2,
        sParameterEnable,
    ):
        status = self.dll.rsnrpz_corr_configureCorrections(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViBoolean(offsetState),
            ViReal64(offset),
            ViBoolean(reserved1),
            ViString(reserved2),
            ViBoolean(sParameterEnable),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_setCorrectionFrequency(self, instrumentHandle, channel, frequency):
        status = self.dll.rsnrpz_chan_setCorrectionFrequency(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(frequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getCorrectionFrequency(self, instrumentHandle, channel):
        frequency = ViReal64()
        status = self.dll.rsnrpz_chan_getCorrectionFrequency(
            ViSession(instrumentHandle), ViInt32(channel), byref(frequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(frequency.value)

    def chan_setCorrectionFrequencyStep(self, instrumentHandle, channel, frequencyStep):
        status = self.dll.rsnrpz_chan_setCorrectionFrequencyStep(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(frequencyStep)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getCorrectionFrequencyStep(self, instrumentHandle, channel):
        frequencyStep = ViReal64()
        status = self.dll.rsnrpz_chan_getCorrectionFrequencyStep(
            ViSession(instrumentHandle), ViInt32(channel), byref(frequencyStep)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(frequencyStep.value)

    def chan_setCorrectionFrequencySpacing(self, instrumentHandle, channel, frequencySpacing):
        status = self.dll.rsnrpz_chan_setCorrectionFrequencySpacing(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(frequencySpacing)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getCorrectionFrequencySpacing(self, instrumentHandle, channel):
        frequencySpacing = ViInt32()
        status = self.dll.rsnrpz_chan_getCorrectionFrequencySpacing(
            ViSession(instrumentHandle), ViInt32(channel), byref(frequencySpacing)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(frequencySpacing.value)

    def corr_setOffset(self, instrumentHandle, channel, offset):
        status = self.dll.rsnrpz_corr_setOffset(ViSession(instrumentHandle), ViInt32(channel), ViReal64(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def corr_getOffset(self, instrumentHandle, channel):
        offset = ViReal64()
        status = self.dll.rsnrpz_corr_getOffset(ViSession(instrumentHandle), ViInt32(channel), byref(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(offset.value)

    def corr_setOffsetEnabled(self, instrumentHandle, channel, offsetState):
        status = self.dll.rsnrpz_corr_setOffsetEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(offsetState)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def corr_getOffsetEnabled(self, instrumentHandle, channel):
        offsetState = ViBoolean()
        status = self.dll.rsnrpz_corr_getOffsetEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(offsetState)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(offsetState.value)

    def corr_setSParamDeviceEnabled(self, instrumentHandle, channel, sParameterEnable):
        status = self.dll.rsnrpz_corr_setSParamDeviceEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(sParameterEnable)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def corr_getSParamDeviceEnabled(self, instrumentHandle, channel):
        sParameterCorrection = ViBoolean()
        status = self.dll.rsnrpz_corr_getSParamDeviceEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(sParameterCorrection)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(sParameterCorrection.value)

    def corr_setSParamDevice(self, instrumentHandle, channel, sParameter):
        status = self.dll.rsnrpz_corr_setSParamDevice(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(sParameter)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def corr_getSParamDevice(self, instrumentHandle, channel):
        sParameter = ViInt32()
        status = self.dll.rsnrpz_corr_getSParamDevice(ViSession(instrumentHandle), ViInt32(channel), byref(sParameter))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(sParameter.value)

    def corr_getSParamDevList(self, vi, channel, iSpdListSize):
        spdList = ARRAY_ViChar(iSpdListSize)
        status = self.dll.rsnrpz_corr_getSParamDevList(ViSession(vi), ViInt32(channel), ViInt32(iSpdListSize), spdList)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(spdList)

    def chan_configureSourceGammaCorr(self, instrumentHandle, channel, sourceGammaCorrection, magnitude, phase):
        status = self.dll.rsnrpz_chan_configureSourceGammaCorr(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViBoolean(sourceGammaCorrection),
            ViReal64(magnitude),
            ViReal64(phase),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_setSourceGammaMagnitude(self, instrumentHandle, channel, magnitude):
        status = self.dll.rsnrpz_chan_setSourceGammaMagnitude(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(magnitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getSourceGammaMagnitude(self, instrumentHandle, channel):
        magnitude = ViReal64()
        status = self.dll.rsnrpz_chan_getSourceGammaMagnitude(
            ViSession(instrumentHandle), ViInt32(channel), byref(magnitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(magnitude.value)

    def chan_setSourceGammaPhase(self, instrumentHandle, channel, phase):
        status = self.dll.rsnrpz_chan_setSourceGammaPhase(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(phase)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getSourceGammaPhase(self, instrumentHandle, channel):
        phase = ViReal64()
        status = self.dll.rsnrpz_chan_getSourceGammaPhase(ViSession(instrumentHandle), ViInt32(channel), byref(phase))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(phase.value)

    def chan_setSourceGammaCorrEnabled(self, instrumentHandle, channel, sourceGammaCorrection):
        status = self.dll.rsnrpz_chan_setSourceGammaCorrEnabled(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViBoolean(sourceGammaCorrection),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getSourceGammaCorrEnabled(self, instrumentHandle, channel):
        sourceGammaCorrection = ViBoolean()
        status = self.dll.rsnrpz_chan_getSourceGammaCorrEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(sourceGammaCorrection)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(sourceGammaCorrection.value)

    def chan_configureReflectGammaCorr(self, instrumentHandle, channel, magnitude, phase):
        status = self.dll.rsnrpz_chan_configureReflectGammaCorr(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViReal64(magnitude),
            ViReal64(phase),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_setReflectionGammaMagn(self, instrumentHandle, channel, magnitude):
        status = self.dll.rsnrpz_chan_setReflectionGammaMagn(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(magnitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getReflectionGammaMagn(self, instrumentHandle, channel):
        magnitude = ViReal64()
        status = self.dll.rsnrpz_chan_getReflectionGammaMagn(
            ViSession(instrumentHandle), ViInt32(channel), byref(magnitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(magnitude.value)

    def chan_setReflectionGammaPhase(self, instrumentHandle, channel, phase):
        status = self.dll.rsnrpz_chan_setReflectionGammaPhase(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(phase)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getReflectionGammaPhase(self, instrumentHandle, channel):
        phase = ViReal64()
        status = self.dll.rsnrpz_chan_getReflectionGammaPhase(
            ViSession(instrumentHandle), ViInt32(channel), byref(phase)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(phase.value)

    def chan_setReflectionGammaUncertainty(self, instrumentHandle, channel, uncertainty):
        status = self.dll.rsnrpz_chan_setReflectionGammaUncertainty(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(uncertainty)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getReflectionGammaUncertainty(self, instrumentHandle, channel):
        uncertainty = ViReal64()
        status = self.dll.rsnrpz_chan_getReflectionGammaUncertainty(
            ViSession(instrumentHandle), ViInt32(channel), byref(uncertainty)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(uncertainty.value)

    def corr_configureDutyCycle(self, instrumentHandle, channel, dutyCycleState, dutyCycle):
        status = self.dll.rsnrpz_corr_configureDutyCycle(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViBoolean(dutyCycleState),
            ViReal64(dutyCycle),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def corr_setDutyCycle(self, instrumentHandle, channel, dutyCycle):
        status = self.dll.rsnrpz_corr_setDutyCycle(ViSession(instrumentHandle), ViInt32(channel), ViReal64(dutyCycle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def corr_getDutyCycle(self, instrumentHandle, channel):
        dutyCycle = ViReal64()
        status = self.dll.rsnrpz_corr_getDutyCycle(ViSession(instrumentHandle), ViInt32(channel), byref(dutyCycle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(dutyCycle.value)

    def corr_setDutyCycleEnabled(self, instrumentHandle, channel, dutyCycleState):
        status = self.dll.rsnrpz_corr_setDutyCycleEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(dutyCycleState)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def corr_getDutyCycleEnabled(self, instrumentHandle, channel):
        dutyCycleState = ViBoolean()
        status = self.dll.rsnrpz_corr_getDutyCycleEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(dutyCycleState)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(dutyCycleState.value)

    def chan_setContAvAperture(self, instrumentHandle, channel, contAvAperture):
        status = self.dll.rsnrpz_chan_setContAvAperture(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(contAvAperture)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getContAvAperture(self, instrumentHandle, channel):
        contAvAperture = ViReal64()
        status = self.dll.rsnrpz_chan_getContAvAperture(
            ViSession(instrumentHandle), ViInt32(channel), byref(contAvAperture)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(contAvAperture.value)

    def chan_setContAvSmoothingEnabled(self, instrumentHandle, channel, contAvSmoothing):
        status = self.dll.rsnrpz_chan_setContAvSmoothingEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(contAvSmoothing)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getContAvSmoothingEnabled(self, instrumentHandle, channel):
        contAvSmoothing = ViBoolean()
        status = self.dll.rsnrpz_chan_getContAvSmoothingEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(contAvSmoothing)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(contAvSmoothing.value)

    def chan_setContAvBufferedEnabled(self, instrumentHandle, channel, contAvBufferedMode):
        status = self.dll.rsnrpz_chan_setContAvBufferedEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(contAvBufferedMode)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getContAvBufferedEnabled(self, instrumentHandle, channel):
        contAvBufferedMode = ViBoolean()
        status = self.dll.rsnrpz_chan_getContAvBufferedEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(contAvBufferedMode)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(contAvBufferedMode.value)

    def chan_setContAvBufferSize(self, instrumentHandle, channel, bufferSize):
        status = self.dll.rsnrpz_chan_setContAvBufferSize(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(bufferSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getContAvBufferSize(self, instrumentHandle, channel):
        bufferSize = ViInt32()
        status = self.dll.rsnrpz_chan_getContAvBufferSize(
            ViSession(instrumentHandle), ViInt32(channel), byref(bufferSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(bufferSize.value)

    def chan_getContAvBufferCount(self, instrumentHandle, channel):
        bufferCount = ViInt32()
        status = self.dll.rsnrpz_chan_getContAvBufferCount(
            ViSession(instrumentHandle), ViInt32(channel), byref(bufferCount)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(bufferCount.value)

    def chan_getContAvBufferInfo(self, instrumentHandle, channel, infoType, arraySize):
        info = ARRAY_ViChar(arraySize)
        status = self.dll.rsnrpz_chan_getContAvBufferInfo(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViString(infoType),
            ViInt32(arraySize),
            info,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(info)

    def chan_setBurstDropoutTolerance(self, instrumentHandle, channel, dropoutTolerance):
        status = self.dll.rsnrpz_chan_setBurstDropoutTolerance(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(dropoutTolerance)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getBurstDropoutTolerance(self, instrumentHandle, channel):
        dropoutTolerance = ViReal64()
        status = self.dll.rsnrpz_chan_getBurstDropoutTolerance(
            ViSession(instrumentHandle), ViInt32(channel), byref(dropoutTolerance)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(dropoutTolerance.value)

    def chan_setBurstChopperEnabled(self, instrumentHandle, channel, burstAvChopper):
        status = self.dll.rsnrpz_chan_setBurstChopperEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(burstAvChopper)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getBurstChopperEnabled(self, instrumentHandle, channel):
        burstAvChopper = ViBoolean()
        status = self.dll.rsnrpz_chan_getBurstChopperEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(burstAvChopper)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(burstAvChopper.value)

    def stat_confTimegate(self, instrumentHandle, channel, offset, time, midambleOffset, midambleLength):
        status = self.dll.rsnrpz_stat_confTimegate(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViReal64(offset),
            ViReal64(time),
            ViReal64(midambleOffset),
            ViReal64(midambleLength),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def stat_confScale(self, instrumentHandle, channel, referenceLevel, range, points):
        status = self.dll.rsnrpz_stat_confScale(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViReal64(referenceLevel),
            ViReal64(range),
            ViInt32(points),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def stat_setOffsetTime(self, instrumentHandle, channel, offset):
        status = self.dll.rsnrpz_stat_setOffsetTime(ViSession(instrumentHandle), ViInt32(channel), ViReal64(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def stat_getOffsetTime(self, instrumentHandle, channel):
        offset = ViReal64()
        status = self.dll.rsnrpz_stat_getOffsetTime(ViSession(instrumentHandle), ViInt32(channel), byref(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(offset.value)

    def stat_setTime(self, instrumentHandle, channel, time):
        status = self.dll.rsnrpz_stat_setTime(ViSession(instrumentHandle), ViInt32(channel), ViReal64(time))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def stat_getTime(self, instrumentHandle, channel):
        time = ViReal64()
        status = self.dll.rsnrpz_stat_getTime(ViSession(instrumentHandle), ViInt32(channel), byref(time))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(time.value)

    def stat_setMidOffset(self, instrumentHandle, channel, offset):
        status = self.dll.rsnrpz_stat_setMidOffset(ViSession(instrumentHandle), ViInt32(channel), ViReal64(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def stat_getMidOffset(self, instrumentHandle, channel):
        offset = ViReal64()
        status = self.dll.rsnrpz_stat_getMidOffset(ViSession(instrumentHandle), ViInt32(channel), byref(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(offset.value)

    def stat_setMidLength(self, instrumentHandle, channel, length):
        status = self.dll.rsnrpz_stat_setMidLength(ViSession(instrumentHandle), ViInt32(channel), ViReal64(length))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def stat_getMidLength(self, instrumentHandle, channel):
        length = ViReal64()
        status = self.dll.rsnrpz_stat_getMidLength(ViSession(instrumentHandle), ViInt32(channel), byref(length))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(length.value)

    def stat_setScaleRefLevel(self, instrumentHandle, channel, referenceLevel):
        status = self.dll.rsnrpz_stat_setScaleRefLevel(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(referenceLevel)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def stat_getScaleRefLevel(self, instrumentHandle, channel):
        referenceLevel = ViReal64()
        status = self.dll.rsnrpz_stat_getScaleRefLevel(
            ViSession(instrumentHandle), ViInt32(channel), byref(referenceLevel)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(referenceLevel.value)

    def stat_setScaleRange(self, instrumentHandle, channel, range):
        status = self.dll.rsnrpz_stat_setScaleRange(ViSession(instrumentHandle), ViInt32(channel), ViReal64(range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def stat_getScaleRange(self, instrumentHandle, channel):
        range = ViReal64()
        status = self.dll.rsnrpz_stat_getScaleRange(ViSession(instrumentHandle), ViInt32(channel), byref(range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(range.value)

    def stat_setScalePoints(self, instrumentHandle, channel, points):
        status = self.dll.rsnrpz_stat_setScalePoints(ViSession(instrumentHandle), ViInt32(channel), ViInt32(points))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def stat_getScalePoints(self, instrumentHandle, channel):
        points = ViInt32()
        status = self.dll.rsnrpz_stat_getScalePoints(ViSession(instrumentHandle), ViInt32(channel), byref(points))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(points.value)

    def stat_getScaleWidth(self, instrumentHandle, channel):
        width = ViReal64()
        status = self.dll.rsnrpz_stat_getScaleWidth(ViSession(instrumentHandle), ViInt32(channel), byref(width))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(width.value)

    def tslot_configureTimeSlot(self, instrumentHandle, channel, timeSlotCount, width):
        status = self.dll.rsnrpz_tslot_configureTimeSlot(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(timeSlotCount),
            ViReal64(width),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def tslot_setTimeSlotCount(self, instrumentHandle, channel, timeSlotCount):
        status = self.dll.rsnrpz_tslot_setTimeSlotCount(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(timeSlotCount)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def tslot_getTimeSlotCount(self, instrumentHandle, channel):
        timeSlotCount = ViInt32()
        status = self.dll.rsnrpz_tslot_getTimeSlotCount(
            ViSession(instrumentHandle), ViInt32(channel), byref(timeSlotCount)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(timeSlotCount.value)

    def tslot_setTimeSlotWidth(self, instrumentHandle, channel, width):
        status = self.dll.rsnrpz_tslot_setTimeSlotWidth(ViSession(instrumentHandle), ViInt32(channel), ViReal64(width))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def tslot_getTimeSlotWidth(self, instrumentHandle, channel):
        width = ViReal64()
        status = self.dll.rsnrpz_tslot_getTimeSlotWidth(ViSession(instrumentHandle), ViInt32(channel), byref(width))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(width.value)

    def tslot_setTimeSlotMidOffset(self, instrumentHandle, channel, offset):
        status = self.dll.rsnrpz_tslot_setTimeSlotMidOffset(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(offset)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def tslot_getTimeSlotMidOffset(self, instrumentHandle, channel):
        offset = ViReal64()
        status = self.dll.rsnrpz_tslot_getTimeSlotMidOffset(
            ViSession(instrumentHandle), ViInt32(channel), byref(offset)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(offset.value)

    def tslot_setTimeSlotMidLength(self, instrumentHandle, channel, length):
        status = self.dll.rsnrpz_tslot_setTimeSlotMidLength(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(length)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def tslot_getTimeSlotMidLength(self, instrumentHandle, channel):
        length = ViReal64()
        status = self.dll.rsnrpz_tslot_getTimeSlotMidLength(
            ViSession(instrumentHandle), ViInt32(channel), byref(length)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(length.value)

    def tslot_setTimeSlotChopperEnabled(self, instrumentHandle, channel, timeSlotChopper):
        status = self.dll.rsnrpz_tslot_setTimeSlotChopperEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(timeSlotChopper)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def tslot_getTimeSlotChopperEnabled(self, instrumentHandle, channel):
        timeSlotChopper = ViBoolean()
        status = self.dll.rsnrpz_tslot_getTimeSlotChopperEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(timeSlotChopper)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(timeSlotChopper.value)

    def scope_configureScope(self, instrumentHandle, channel, scopePoints, scopeTime, offsetTime, realtime):
        status = self.dll.rsnrpz_scope_configureScope(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(scopePoints),
            ViReal64(scopeTime),
            ViReal64(offsetTime),
            ViBoolean(realtime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_fastZero(self, instrumentHandle):
        status = self.dll.rsnrpz_scope_fastZero(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_setAverageEnabled(self, instrumentHandle, channel, scopeAveraging):
        status = self.dll.rsnrpz_scope_setAverageEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(scopeAveraging)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getAverageEnabled(self, instrumentHandle, channel):
        scopeAveraging = ViBoolean()
        status = self.dll.rsnrpz_scope_getAverageEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(scopeAveraging)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(scopeAveraging.value)

    def scope_setAverageCount(self, instrumentHandle, channel, count):
        status = self.dll.rsnrpz_scope_setAverageCount(ViSession(instrumentHandle), ViInt32(channel), ViInt32(count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getAverageCount(self, instrumentHandle, channel):
        count = ViInt32()
        status = self.dll.rsnrpz_scope_getAverageCount(ViSession(instrumentHandle), ViInt32(channel), byref(count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(count.value)

    def scope_setAverageTerminalControl(self, instrumentHandle, channel, terminalControl):
        status = self.dll.rsnrpz_scope_setAverageTerminalControl(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(terminalControl)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getAverageTerminalControl(self, instrumentHandle, channel):
        terminalControl = ViInt32()
        status = self.dll.rsnrpz_scope_getAverageTerminalControl(
            ViSession(instrumentHandle), ViInt32(channel), byref(terminalControl)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(terminalControl.value)

    def scope_setOffsetTime(self, instrumentHandle, channel, offsetTime):
        status = self.dll.rsnrpz_scope_setOffsetTime(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(offsetTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getOffsetTime(self, instrumentHandle, channel):
        offsetTime = ViReal64()
        status = self.dll.rsnrpz_scope_getOffsetTime(ViSession(instrumentHandle), ViInt32(channel), byref(offsetTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(offsetTime.value)

    def scope_setPoints(self, instrumentHandle, channel, scopePoints):
        status = self.dll.rsnrpz_scope_setPoints(ViSession(instrumentHandle), ViInt32(channel), ViInt32(scopePoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getPoints(self, instrumentHandle, channel):
        scopePoints = ViInt32()
        status = self.dll.rsnrpz_scope_getPoints(ViSession(instrumentHandle), ViInt32(channel), byref(scopePoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(scopePoints.value)

    def scope_setRealtimeEnabled(self, instrumentHandle, channel, realtime):
        status = self.dll.rsnrpz_scope_setRealtimeEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(realtime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getRealtimeEnabled(self, instrumentHandle, channel):
        realtime = ViBoolean()
        status = self.dll.rsnrpz_scope_getRealtimeEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(realtime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(realtime.value)

    def scope_setTime(self, instrumentHandle, channel, scopeTime):
        status = self.dll.rsnrpz_scope_setTime(ViSession(instrumentHandle), ViInt32(channel), ViReal64(scopeTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getTime(self, instrumentHandle, channel):
        scopeTime = ViReal64()
        status = self.dll.rsnrpz_scope_getTime(ViSession(instrumentHandle), ViInt32(channel), byref(scopeTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(scopeTime.value)

    def scope_setAutoEnabled(self, instrumentHandle, channel, autoEnabled):
        status = self.dll.rsnrpz_scope_setAutoEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(autoEnabled)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getAutoEnabled(self, instrumentHandle, channel):
        autoEnabled = ViBoolean()
        status = self.dll.rsnrpz_scope_getAutoEnabled(ViSession(instrumentHandle), ViInt32(channel), byref(autoEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(autoEnabled.value)

    def scope_setAutoMaxMeasuringTime(self, instrumentHandle, channel, upperTimeLimit):
        status = self.dll.rsnrpz_scope_setAutoMaxMeasuringTime(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(upperTimeLimit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getAutoMaxMeasuringTime(self, instrumentHandle, channel):
        upperTimeLimit = ViReal64()
        status = self.dll.rsnrpz_scope_getAutoMaxMeasuringTime(
            ViSession(instrumentHandle), ViInt32(channel), byref(upperTimeLimit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(upperTimeLimit.value)

    def scope_setAutoNoiseSignalRatio(self, instrumentHandle, channel, maximumNoiseRatio):
        status = self.dll.rsnrpz_scope_setAutoNoiseSignalRatio(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(maximumNoiseRatio)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getAutoNoiseSignalRatio(self, instrumentHandle, channel):
        maximumNoiseRatio = ViReal64()
        status = self.dll.rsnrpz_scope_getAutoNoiseSignalRatio(
            ViSession(instrumentHandle), ViInt32(channel), byref(maximumNoiseRatio)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(maximumNoiseRatio.value)

    def scope_setAutoResolution(self, instrumentHandle, channel, resolution):
        status = self.dll.rsnrpz_scope_setAutoResolution(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getAutoResolution(self, instrumentHandle, channel):
        resolution = ViInt32()
        status = self.dll.rsnrpz_scope_getAutoResolution(
            ViSession(instrumentHandle), ViInt32(channel), byref(resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(resolution.value)

    def scope_setAutoType(self, instrumentHandle, channel, method):
        status = self.dll.rsnrpz_scope_setAutoType(ViSession(instrumentHandle), ViInt32(channel), ViInt32(method))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getAutoType(self, instrumentHandle, channel):
        method = ViInt32()
        status = self.dll.rsnrpz_scope_getAutoType(ViSession(instrumentHandle), ViInt32(channel), byref(method))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(method.value)

    def scope_setEquivalentSampling(self, instrumentHandle, channel, scopeEquivalentSampling):
        status = self.dll.rsnrpz_scope_setEquivalentSampling(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViBoolean(scopeEquivalentSampling),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_getEquivalentSampling(self, instrumentHandle, channel):
        scopeEquivalentSampling = ViBoolean()
        status = self.dll.rsnrpz_scope_getEquivalentSampling(
            ViSession(instrumentHandle), ViInt32(channel), byref(scopeEquivalentSampling)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(scopeEquivalentSampling.value)

    def scope_meas_setMeasEnabled(self, instrumentHandle, channel, traceMeasurements):
        status = self.dll.rsnrpz_scope_meas_setMeasEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(traceMeasurements)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_meas_getMeasEnabled(self, instrumentHandle, channel):
        traceMeasurements = ViBoolean()
        status = self.dll.rsnrpz_scope_meas_getMeasEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(traceMeasurements)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(traceMeasurements.value)

    def scope_meas_setMeasAlgorithm(self, instrumentHandle, channel, algorithm):
        status = self.dll.rsnrpz_scope_meas_setMeasAlgorithm(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(algorithm)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_meas_getMeasAlgorithm(self, instrumentHandle, channel):
        algorithm = ViInt32()
        status = self.dll.rsnrpz_scope_meas_getMeasAlgorithm(
            ViSession(instrumentHandle), ViInt32(channel), byref(algorithm)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(algorithm.value)

    def scope_meas_setLevelThresholds(
        self, instrumentHandle, channel, durationRef, transitionLowRef, transitionHighRef
    ):
        status = self.dll.rsnrpz_scope_meas_setLevelThresholds(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViReal64(durationRef),
            ViReal64(transitionLowRef),
            ViReal64(transitionHighRef),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_meas_getLevelThresholds(self, instrumentHandle, channel):
        durationRef = ViReal64()
        transitionLowRef = ViReal64()
        transitionHighRef = ViReal64()
        status = self.dll.rsnrpz_scope_meas_getLevelThresholds(
            ViSession(instrumentHandle),
            ViInt32(channel),
            byref(durationRef),
            byref(transitionLowRef),
            byref(transitionHighRef),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        durationRef = float(durationRef.value)
        transitionLowRef = float(transitionLowRef.value)
        transitionHighRef = float(transitionHighRef.value)
        return durationRef, transitionLowRef, transitionHighRef

    def scope_meas_setTime(self, instrumentHandle, channel, measTime):
        status = self.dll.rsnrpz_scope_meas_setTime(ViSession(instrumentHandle), ViInt32(channel), ViReal64(measTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_meas_getTime(self, instrumentHandle, channel):
        measTime = ViReal64()
        status = self.dll.rsnrpz_scope_meas_getTime(ViSession(instrumentHandle), ViInt32(channel), byref(measTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measTime.value)

    def scope_meas_setOffsetTime(self, instrumentHandle, channel, offsetTime):
        status = self.dll.rsnrpz_scope_meas_setOffsetTime(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(offsetTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_meas_getOffsetTime(self, instrumentHandle, channel):
        offsetTime = ViReal64()
        status = self.dll.rsnrpz_scope_meas_getOffsetTime(
            ViSession(instrumentHandle), ViInt32(channel), byref(offsetTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(offsetTime.value)

    def scope_meas_getPulseTimes(self, instrumentHandle, channel):
        dutyCycle = ViReal64()
        pulseDuration = ViReal64()
        pulsePeriod = ViReal64()
        status = self.dll.rsnrpz_scope_meas_getPulseTimes(
            ViSession(instrumentHandle),
            ViInt32(channel),
            byref(dutyCycle),
            byref(pulseDuration),
            byref(pulsePeriod),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        dutyCycle = float(dutyCycle.value)
        pulseDuration = float(pulseDuration.value)
        pulsePeriod = float(pulsePeriod.value)
        return dutyCycle, pulseDuration, pulsePeriod

    def scope_meas_getPulseTransition(self, instrumentHandle, channel, slope):
        duration = ViReal64()
        occurence = ViReal64()
        overshoot = ViReal64()
        status = self.dll.rsnrpz_scope_meas_getPulseTransition(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(slope),
            byref(duration),
            byref(occurence),
            byref(overshoot),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        duration = float(duration.value)
        occurence = float(occurence.value)
        overshoot = float(overshoot.value)
        return duration, occurence, overshoot

    def scope_meas_getPulsePower(self, instrumentHandle, channel):
        average = ViReal64()
        minPeak = ViReal64()
        maxPeak = ViReal64()
        status = self.dll.rsnrpz_scope_meas_getPulsePower(
            ViSession(instrumentHandle),
            ViInt32(channel),
            byref(average),
            byref(minPeak),
            byref(maxPeak),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        average = float(average.value)
        minPeak = float(minPeak.value)
        maxPeak = float(maxPeak.value)
        return average, minPeak, maxPeak

    def scope_meas_getPulseLevels(self, instrumentHandle, channel):
        topLevel = ViReal64()
        baseLevel = ViReal64()
        status = self.dll.rsnrpz_scope_meas_getPulseLevels(
            ViSession(instrumentHandle),
            ViInt32(channel),
            byref(topLevel),
            byref(baseLevel),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        topLevel = float(topLevel.value)
        baseLevel = float(baseLevel.value)
        return topLevel, baseLevel

    def scope_meas_getPulseReferenceLevels(self, instrumentHandle, channel):
        lowRefLevel = ViReal64()
        highRefLevel = ViReal64()
        durationRefLevel = ViReal64()
        status = self.dll.rsnrpz_scope_meas_getPulseReferenceLevels(
            ViSession(instrumentHandle),
            ViInt32(channel),
            byref(lowRefLevel),
            byref(highRefLevel),
            byref(durationRefLevel),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        lowRefLevel = float(lowRefLevel.value)
        highRefLevel = float(highRefLevel.value)
        durationRefLevel = float(durationRefLevel.value)
        return lowRefLevel, highRefLevel, durationRefLevel

    def scope_meas_setEquivalentSampling(self, instrumentHandle, channel, scopeMeasEquivSampling):
        status = self.dll.rsnrpz_scope_meas_setEquivalentSampling(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViBoolean(scopeMeasEquivSampling),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def scope_meas_getEquivalentSampling(self, instrumentHandle, channel):
        scopeMeasEquivSampling = ViBoolean()
        status = self.dll.rsnrpz_scope_meas_getEquivalentSampling(
            ViSession(instrumentHandle), ViInt32(channel), byref(scopeMeasEquivSampling)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(scopeMeasEquivSampling.value)

    def scope_meas_getSamplePeriod(self, instrumentHandle, channel):
        samplePeriod = ViReal64()
        status = self.dll.rsnrpz_scope_meas_getSamplePeriod(
            ViSession(instrumentHandle), ViInt32(channel), byref(samplePeriod)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(samplePeriod.value)

    def trigger_configureInternal(self, instrumentHandle, channel, triggerLevel, triggerSlope):
        status = self.dll.rsnrpz_trigger_configureInternal(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViReal64(triggerLevel),
            ViInt32(triggerSlope),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_configureExternal(self, instrumentHandle, channel, triggerDelay):
        status = self.dll.rsnrpz_trigger_configureExternal(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(triggerDelay)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_immediate(self, instrumentHandle, channel):
        status = self.dll.rsnrpz_trigger_immediate(ViSession(instrumentHandle), ViInt32(channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_setAutoDelayEnabled(self, instrumentHandle, channel, autoDelay):
        status = self.dll.rsnrpz_trigger_setAutoDelayEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(autoDelay)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getAutoDelayEnabled(self, instrumentHandle, channel):
        autoDelay = ViBoolean()
        status = self.dll.rsnrpz_trigger_getAutoDelayEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(autoDelay)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(autoDelay.value)

    def trigger_setAutoTriggerEnabled(self, instrumentHandle, channel, autoTrigger):
        status = self.dll.rsnrpz_trigger_setAutoTriggerEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(autoTrigger)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getAutoTriggerEnabled(self, instrumentHandle, channel):
        autoTrigger = ViBoolean()
        status = self.dll.rsnrpz_trigger_getAutoTriggerEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(autoTrigger)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(autoTrigger.value)

    def trigger_setCount(self, instrumentHandle, channel, triggerCount):
        status = self.dll.rsnrpz_trigger_setCount(ViSession(instrumentHandle), ViInt32(channel), ViInt32(triggerCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getCount(self, instrumentHandle, channel):
        triggerCount = ViInt32()
        status = self.dll.rsnrpz_trigger_getCount(ViSession(instrumentHandle), ViInt32(channel), byref(triggerCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(triggerCount.value)

    def trigger_setDelay(self, instrumentHandle, channel, triggerDelay):
        status = self.dll.rsnrpz_trigger_setDelay(ViSession(instrumentHandle), ViInt32(channel), ViReal64(triggerDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getDelay(self, instrumentHandle, channel):
        triggerDelay = ViReal64()
        status = self.dll.rsnrpz_trigger_getDelay(ViSession(instrumentHandle), ViInt32(channel), byref(triggerDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(triggerDelay.value)

    def trigger_setHoldoff(self, instrumentHandle, channel, triggerHoldoff):
        status = self.dll.rsnrpz_trigger_setHoldoff(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(triggerHoldoff)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getHoldoff(self, instrumentHandle, channel):
        triggerHoldoff = ViReal64()
        status = self.dll.rsnrpz_trigger_getHoldoff(
            ViSession(instrumentHandle), ViInt32(channel), byref(triggerHoldoff)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(triggerHoldoff.value)

    def trigger_setHysteresis(self, instrumentHandle, channel, triggerHysteresis):
        status = self.dll.rsnrpz_trigger_setHysteresis(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(triggerHysteresis)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getHysteresis(self, instrumentHandle, channel):
        triggerHysteresis = ViReal64()
        status = self.dll.rsnrpz_trigger_getHysteresis(
            ViSession(instrumentHandle), ViInt32(channel), byref(triggerHysteresis)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(triggerHysteresis.value)

    def trigger_setLevel(self, instrumentHandle, channel, triggerLevel):
        status = self.dll.rsnrpz_trigger_setLevel(ViSession(instrumentHandle), ViInt32(channel), ViReal64(triggerLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getLevel(self, instrumentHandle, channel):
        triggerLevel = ViReal64()
        status = self.dll.rsnrpz_trigger_getLevel(ViSession(instrumentHandle), ViInt32(channel), byref(triggerLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(triggerLevel.value)

    def trigger_setSlope(self, instrumentHandle, channel, triggerSlope):
        status = self.dll.rsnrpz_trigger_setSlope(ViSession(instrumentHandle), ViInt32(channel), ViInt32(triggerSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getSlope(self, instrumentHandle, channel):
        triggerSlope = ViInt32()
        status = self.dll.rsnrpz_trigger_getSlope(ViSession(instrumentHandle), ViInt32(channel), byref(triggerSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(triggerSlope.value)

    def trigger_setSource(self, instrumentHandle, channel, triggerSource):
        status = self.dll.rsnrpz_trigger_setSource(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(triggerSource)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getSource(self, instrumentHandle, channel):
        triggerSource = ViInt32()
        status = self.dll.rsnrpz_trigger_getSource(ViSession(instrumentHandle), ViInt32(channel), byref(triggerSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(triggerSource.value)

    def trigger_setDropoutTime(self, instrumentHandle, channel, dropoutTime):
        status = self.dll.rsnrpz_trigger_setDropoutTime(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(dropoutTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getDropoutTime(self, instrumentHandle, channel):
        dropoutTime = ViReal64()
        status = self.dll.rsnrpz_trigger_getDropoutTime(
            ViSession(instrumentHandle), ViInt32(channel), byref(dropoutTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(dropoutTime.value)

    def trigger_setMasterState(self, instrumentHandle, channel, state):
        status = self.dll.rsnrpz_trigger_setMasterState(ViSession(instrumentHandle), ViInt32(channel), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getMasterState(self, instrumentHandle, channel):
        state = ViBoolean()
        status = self.dll.rsnrpz_trigger_getMasterState(ViSession(instrumentHandle), ViInt32(channel), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def trigger_setSyncState(self, instrumentHandle, channel, state):
        status = self.dll.rsnrpz_trigger_setSyncState(ViSession(instrumentHandle), ViInt32(channel), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getSyncState(self, instrumentHandle, channel):
        state = ViBoolean()
        status = self.dll.rsnrpz_trigger_getSyncState(ViSession(instrumentHandle), ViInt32(channel), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def chan_info(self, instrumentHandle, channel, infoType, arraySize):
        info = ARRAY_ViChar(arraySize)
        status = self.dll.rsnrpz_chan_info(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViString(infoType),
            ViInt32(arraySize),
            info,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(info)

    def chan_infoHeader(self, instrumentHandle, channel, parameterNumber, arraySize):
        header = ARRAY_ViChar(arraySize)
        status = self.dll.rsnrpz_chan_infoHeader(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(parameterNumber),
            ViInt32(arraySize),
            header,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(header)

    def chan_infosCount(self, instrumentHandle, channel):
        count = ViInt32()
        status = self.dll.rsnrpz_chan_infosCount(ViSession(instrumentHandle), ViInt32(channel), byref(count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(count.value)

    def system_setStatusUpdateTime(self, instrumentHandle, channel, statusUpdateTime):
        status = self.dll.rsnrpz_system_setStatusUpdateTime(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(statusUpdateTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def system_getStatusUpdateTime(self, instrumentHandle, channel):
        statusUpdateTime = ViReal64()
        status = self.dll.rsnrpz_system_getStatusUpdateTime(
            ViSession(instrumentHandle), ViInt32(channel), byref(statusUpdateTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(statusUpdateTime.value)

    def system_setResultUpdateTime(self, instrumentHandle, channel, resultUpdateTime):
        status = self.dll.rsnrpz_system_setResultUpdateTime(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(resultUpdateTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def system_getResultUpdateTime(self, instrumentHandle, channel):
        resultUpdateTime = ViReal64()
        status = self.dll.rsnrpz_system_getResultUpdateTime(
            ViSession(instrumentHandle), ViInt32(channel), byref(resultUpdateTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(resultUpdateTime.value)

    def calib_test(self, instrumentHandle, channel):
        calibTest = ViReal64()
        status = self.dll.rsnrpz_calib_test(ViSession(instrumentHandle), ViInt32(channel), byref(calibTest))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(calibTest.value)

    def calib_getTestDeviation(self, instrumentHandle, channel):
        testDeviation = ViReal64()
        status = self.dll.rsnrpz_calib_getTestDeviation(
            ViSession(instrumentHandle), ViInt32(channel), byref(testDeviation)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(testDeviation.value)

    def calib_getTestReference(self, instrumentHandle, channel):
        testReference = ViReal64()
        status = self.dll.rsnrpz_calib_getTestReference(
            ViSession(instrumentHandle), ViInt32(channel), byref(testReference)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(testReference.value)

    def chan_abort(self, instrumentHandle, channel):
        status = self.dll.rsnrpz_chan_abort(ViSession(instrumentHandle), ViInt32(channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_initiate(self, instrumentHandle, channel):
        status = self.dll.rsnrpz_chan_initiate(ViSession(instrumentHandle), ViInt32(channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_setInitContinuousEnabled(self, instrumentHandle, channel, continuousInitiate):
        status = self.dll.rsnrpz_chan_setInitContinuousEnabled(
            ViSession(instrumentHandle), ViInt32(channel), ViBoolean(continuousInitiate)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getInitContinuousEnabled(self, instrumentHandle, channel):
        continuousInitiate = ViBoolean()
        status = self.dll.rsnrpz_chan_getInitContinuousEnabled(
            ViSession(instrumentHandle), ViInt32(channel), byref(continuousInitiate)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(continuousInitiate.value)

    def chan_reset(self, instrumentHandle, channel):
        status = self.dll.rsnrpz_chan_reset(ViSession(instrumentHandle), ViInt32(channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_setSamplingFrequency(self, instrumentHandle, channel, samplingFrequency):
        status = self.dll.rsnrpz_chan_setSamplingFrequency(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(samplingFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getSamplingFrequency(self, instrumentHandle, channel):
        samplingFrequency = ViInt32()
        status = self.dll.rsnrpz_chan_getSamplingFrequency(
            ViSession(instrumentHandle), ViInt32(channel), byref(samplingFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(samplingFrequency.value)

    def chan_zero(self, instrumentHandle, channel):
        status = self.dll.rsnrpz_chan_zero(ViSession(instrumentHandle), ViInt32(channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_isZeroComplete(self, instrumentHandle, channel):
        zeroingComplete = ViBoolean()
        status = self.dll.rsnrpz_chan_isZeroComplete(
            ViSession(instrumentHandle), ViInt32(channel), byref(zeroingComplete)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(zeroingComplete.value)

    def chan_isMeasurementComplete(self, instrumentHandle, channel):
        measurementComplete = ViBoolean()
        status = self.dll.rsnrpz_chan_isMeasurementComplete(
            ViSession(instrumentHandle), ViInt32(channel), byref(measurementComplete)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(measurementComplete.value)

    def chan_selfTest(self, instrumentHandle, channel):
        result = ARRAY_ViChar(1024)
        status = self.dll.rsnrpz_chan_selfTest(ViSession(instrumentHandle), ViInt32(channel), result)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(result)

    def chan_setAuxiliary(self, instrumentHandle, channel, auxiliaryValue):
        status = self.dll.rsnrpz_chan_setAuxiliary(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(auxiliaryValue)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def chan_getAuxiliary(self, instrumentHandle, channel):
        auxiliaryValue = ViInt32()
        status = self.dll.rsnrpz_chan_getAuxiliary(ViSession(instrumentHandle), ViInt32(channel), byref(auxiliaryValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(auxiliaryValue.value)

    def meass_readMeasurement(self, instrumentHandle, channel, timeout_ms):
        measurement = ViReal64()
        status = self.dll.rsnrpz_meass_readMeasurement(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(timeout_ms),
            byref(measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def meass_fetchMeasurement(self, instrumentHandle, channel):
        measurement = ViReal64()
        status = self.dll.rsnrpz_meass_fetchMeasurement(
            ViSession(instrumentHandle), ViInt32(channel), byref(measurement)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def meass_readBufferMeasurement(self, instrumentHandle, channel, maximumTime_ms, bufferSize):
        measurementArray = ARRAY_ViReal64(bufferSize)
        readCount = ViInt32()
        status = self.dll.rsnrpz_meass_readBufferMeasurement(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(maximumTime_ms),
            ViInt32(bufferSize),
            measurementArray,
            byref(readCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        measurementArray = list(measurementArray)
        readCount = int(readCount.value)
        return measurementArray, readCount

    def meass_fetchBufferMeasurement(self, instrumentHandle, channel, arraySize):
        measurementArray = ARRAY_ViReal64(arraySize)
        readCount = ViInt32()
        status = self.dll.rsnrpz_meass_fetchBufferMeasurement(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(arraySize),
            measurementArray,
            byref(readCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        measurementArray = list(measurementArray)
        readCount = int(readCount.value)
        return measurementArray, readCount

    def meass_sendSoftwareTrigger(self, instrumentHandle, channel):
        status = self.dll.rsnrpz_meass_sendSoftwareTrigger(ViSession(instrumentHandle), ViInt32(channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def meass_readMeasurementAux(self, instrumentHandle, channel, timeout_ms):
        measurement = ViReal64()
        aux1 = ViReal64()
        aux2 = ViReal64()
        status = self.dll.rsnrpz_meass_readMeasurementAux(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(timeout_ms),
            byref(measurement),
            byref(aux1),
            byref(aux2),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        measurement = float(measurement.value)
        aux1 = float(aux1.value)
        aux2 = float(aux2.value)
        return measurement, aux1, aux2

    def meass_fetchMeasurementAux(self, instrumentHandle, channel, timeout_ms):
        measurement = ViReal64()
        aux1 = ViReal64()
        aux2 = ViReal64()
        status = self.dll.rsnrpz_meass_fetchMeasurementAux(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(timeout_ms),
            byref(measurement),
            byref(aux1),
            byref(aux2),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        measurement = float(measurement.value)
        aux1 = float(aux1.value)
        aux2 = float(aux2.value)
        return measurement, aux1, aux2

    def meass_readBufferMeasurementAux(self, instrumentHandle, channel, maximumTime_ms, bufferSize):
        measurementArray = ARRAY_ViReal64(bufferSize)
        aux1Array = ARRAY_ViReal64(bufferSize)
        aux2Array = ARRAY_ViReal64(bufferSize)
        readCount = ViInt32()
        status = self.dll.rsnrpz_meass_readBufferMeasurementAux(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(maximumTime_ms),
            ViInt32(bufferSize),
            measurementArray,
            aux1Array,
            aux2Array,
            byref(readCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        measurementArray = list(measurementArray)
        aux1Array = list(aux1Array)
        aux2Array = list(aux2Array)
        readCount = int(readCount.value)
        return measurementArray, aux1Array, aux2Array, readCount

    def meass_fetchBufferMeasurementAux(self, instrumentHandle, channel, maximumTime_ms, bufferSize):
        measurementArray = ARRAY_ViReal64(bufferSize)
        aux1Array = ARRAY_ViReal64(bufferSize)
        aux2Array = ARRAY_ViReal64(bufferSize)
        readCount = ViInt32()
        status = self.dll.rsnrpz_meass_fetchBufferMeasurementAux(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(maximumTime_ms),
            ViInt32(bufferSize),
            measurementArray,
            aux1Array,
            aux2Array,
            byref(readCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        measurementArray = list(measurementArray)
        aux1Array = list(aux1Array)
        aux2Array = list(aux2Array)
        readCount = int(readCount.value)
        return measurementArray, aux1Array, aux2Array, readCount

    def status_preset(self, instrumentHandle):
        status = self.dll.rsnrpz_status_preset(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def status_checkCondition(self, instrumentHandle, statusClass, mask):
        state = ViBoolean()
        status = self.dll.rsnrpz_status_checkCondition(
            ViSession(instrumentHandle),
            ViInt32(statusClass),
            ViUInt32(mask),
            byref(state),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def status_catchEvent(self, instrumentHandle, statusClass, mask, direction):
        status = self.dll.rsnrpz_status_catchEvent(
            ViSession(instrumentHandle),
            ViInt32(statusClass),
            ViUInt32(mask),
            ViInt32(direction),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def status_checkEvent(self, instrumentHandle, statusClass, mask, resetMask):
        events = ViBoolean()
        status = self.dll.rsnrpz_status_checkEvent(
            ViSession(instrumentHandle),
            ViInt32(statusClass),
            ViUInt32(mask),
            ViUInt32(resetMask),
            byref(events),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(events.value)

    def status_enableEventNotification(self, instrumentHandle, statusClass, mask):
        status = self.dll.rsnrpz_status_enableEventNotification(
            ViSession(instrumentHandle), ViInt32(statusClass), ViUInt32(mask)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def status_disableEventNotification(self, instrumentHandle, statusClass, mask):
        status = self.dll.rsnrpz_status_disableEventNotification(
            ViSession(instrumentHandle), ViInt32(statusClass), ViUInt32(mask)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def status_registerWindowMessage(self, instrumentHandle, messageID):
        windowHandle = ViUInt32()
        status = self.dll.rsnrpz_status_registerWindowMessage(
            ViSession(instrumentHandle), byref(windowHandle), ViUInt32(messageID)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(windowHandle.value)

    def errorCheckState(self, instrumentHandle, stateChecking):
        status = self.dll.rsnrpz_errorCheckState(ViSession(instrumentHandle), ViBoolean(stateChecking))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def reset(self, instrumentHandle):
        status = self.dll.rsnrpz_reset(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, instrumentHandle):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        status = self.dll.rsnrpz_self_test(ViSession(instrumentHandle), byref(selfTestResult), selfTestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def error_query(self, instrumentHandle):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        status = self.dll.rsnrpz_error_query(ViSession(instrumentHandle), byref(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def error_message(self, instrumentHandle, statusCode):
        message = ARRAY_ViChar(1024)
        status = self.dll.rsnrpz_error_message(ViSession(instrumentHandle), ViStatus(statusCode), message)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(message)

    def revision_query(self, instrumentHandle):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        status = self.dll.rsnrpz_revision_query(ViSession(instrumentHandle), instrumentDriverRevision, firmwareRevision)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def CloseSensor(self, instrumentHandle, channel):
        status = self.dll.rsnrpz_CloseSensor(ViSession(instrumentHandle), ViInt32(channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def close(self, instrumentHandle):
        status = self.dll.rsnrpz_close(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSensorCount(self, iDummyHandle):
        piNumConnectedSensors = ViInt32()
        status = self.dll.rsnrpz_GetSensorCount(ViSession(iDummyHandle), byref(piNumConnectedSensors))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(piNumConnectedSensors.value)

    def GetSensorInfo(self, iDummyHandle, iIndex):
        pszSensorType = ARRAY_ViChar(1024)
        pszSensorSerial = ARRAY_ViChar(1024)
        status = self.dll.rsnrpz_GetSensorInfo(ViSession(iDummyHandle), ViInt32(iIndex), pszSensorType, pszSensorSerial)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pszSensorType = decode(pszSensorType)
        pszSensorSerial = decode(pszSensorSerial)
        return pszSensorType, pszSensorSerial

    def GetDeviceStatusZ5(self, iDummyHandle):
        piAvail = ViInt32()
        status = self.dll.rsnrpz_GetDeviceStatusZ5(ViSession(iDummyHandle), byref(piAvail))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(piAvail.value)

    def GetDeviceInfoZ5(self, iDummyHandle, iPortIdx):
        pszSensorName = ARRAY_ViChar(1024)
        pszSensorType = ARRAY_ViChar(1024)
        pszSensorSerial = ARRAY_ViChar(1024)
        pbConnected = ViBoolean()
        status = self.dll.rsnrpz_GetDeviceInfoZ5(
            ViSession(iDummyHandle),
            ViInt32(iPortIdx),
            pszSensorName,
            pszSensorType,
            pszSensorSerial,
            byref(pbConnected),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pszSensorName = decode(pszSensorName)
        pszSensorType = decode(pszSensorType)
        pszSensorSerial = decode(pszSensorSerial)
        pbConnected = bool(pbConnected.value)
        return pszSensorName, pszSensorType, pszSensorSerial, pbConnected

    def initZ5(self, cPort, IDQuery, resetDevice):
        pInstrSession = ViSession()
        status = self.dll.rsnrpz_initZ5(
            ViInt32(cPort),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            byref(pInstrSession),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(pInstrSession.value)

    def status_driverOpenState(
        self,
    ):
        driverState = ViBoolean()
        status = self.dll.rsnrpz_status_driverOpenState(byref(driverState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(driverState.value)

    def service_getDetectorTemperature(self, vi, channel):
        pTemperature = ViReal64()
        status = self.dll.rsnrpz_service_getDetectorTemperature(ViSession(vi), ViInt32(channel), byref(pTemperature))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(pTemperature.value)

    def fw_version_check(self, vi, iBufSize):
        firmwareCurrent = ARRAY_ViChar(iBufSize)
        firmwareRequiredMinimum = ARRAY_ViChar(iBufSize)
        pbFirmwareOkay = ViBoolean()
        status = self.dll.rsnrpz_fw_version_check(
            ViSession(vi),
            ViInt32(iBufSize),
            firmwareCurrent,
            firmwareRequiredMinimum,
            byref(pbFirmwareOkay),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        firmwareCurrent = decode(firmwareCurrent)
        firmwareRequiredMinimum = decode(firmwareRequiredMinimum)
        pbFirmwareOkay = bool(pbFirmwareOkay.value)
        return firmwareCurrent, firmwareRequiredMinimum, pbFirmwareOkay

    def calib_readData(self, vi, channel):
        pCount = ViInt32()
        status = self.dll.rsnrpz_calib_readData(ViSession(vi), ViInt32(channel), byref(pCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(pCount.value)

    def calib_writeData(self, vi, channel, arraySize):
        status = self.dll.rsnrpz_calib_writeData(ViSession(vi), ViInt32(channel), ViInt32(arraySize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def calib_readUserData(self, vi, channel):
        pCount = ViInt32()
        status = self.dll.rsnrpz_calib_readUserData(ViSession(vi), ViInt32(channel), byref(pCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(pCount.value)

    def calib_writeUserData(self, vi, channel, arraySize):
        status = self.dll.rsnrpz_calib_writeUserData(ViSession(vi), ViInt32(channel), ViInt32(arraySize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def setSensorName(self, instrHdl, chan):
        status = self.dll.rsnrpz_setSensorName(ViSession(instrHdl), ViInt32(chan))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def getSensorName(self, instrHdl, chan, maxLen):
        pName = ARRAY_ViChar(maxLen)
        status = self.dll.rsnrpz_getSensorName(ViSession(instrHdl), ViInt32(chan), byref(pName), ViUInt32(maxLen))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return pName

    def setLedMode(self, instrHdl, chan, ledMode):
        status = self.dll.rsnrpz_setLedMode(ViSession(instrHdl), ViInt32(chan), ViUInt32(ledMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def getLedMode(self, instrHdl, chan):
        pLedMode = ViUInt32()
        status = self.dll.rsnrpz_getLedMode(ViSession(instrHdl), ViInt32(chan), byref(pLedMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(pLedMode.value)

    def setLedColor(self, instrHdl, chan, color):
        status = self.dll.rsnrpz_setLedColor(ViSession(instrHdl), ViInt32(chan), ViUInt32(color))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def getLedColor(self, instrHdl, chan):
        pColor = ViUInt32()
        status = self.dll.rsnrpz_getLedColor(ViSession(instrHdl), ViInt32(chan), byref(pColor))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(pColor.value)

    def trigger_setMasterPort(self, instrHdl, chan, port):
        status = self.dll.rsnrpz_trigger_setMasterPort(ViSession(instrHdl), ViInt32(chan), ViUInt32(port))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getMasterPort(self, instrHdl, chan):
        port = ViUInt32()
        status = self.dll.rsnrpz_trigger_getMasterPort(ViSession(instrHdl), ViInt32(chan), byref(port))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(port.value)

    def trigger_setSyncPort(self, instrHdl, chan, port):
        status = self.dll.rsnrpz_trigger_setSyncPort(ViSession(instrHdl), ViInt32(chan), ViUInt32(port))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def trigger_getSyncPort(self, instrHdl, chan):
        port = ViUInt32()
        status = self.dll.rsnrpz_trigger_getSyncPort(ViSession(instrHdl), ViInt32(chan), byref(port))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(port.value)

    def getUsageMap(self, iDummyHandle, maxLen):
        cpMap = ARRAY_ViChar(maxLen)
        pRetLen = ViUInt32()
        status = self.dll.rsnrpz_getUsageMap(ViSession(iDummyHandle), cpMap, ViUInt32(maxLen), byref(pRetLen))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        cpMap = decode(cpMap)
        pRetLen = int(pRetLen.value)
        return cpMap, pRetLen

    def GetSessionControlHandle(self, iChannel):
        status = self.dll.rsnrpz_GetSessionControlHandle(ViInt32(iChannel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def status_setDeviceChangedCallback(self, lUserArgument):
        status = self.dll.rsnrpz_status_setDeviceChangedCallback(NRP_USERARG(lUserArgument))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
