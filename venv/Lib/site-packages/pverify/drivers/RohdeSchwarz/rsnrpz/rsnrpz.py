from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .rsnrpz_dllwrap import *


class rsnrpz(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = rsnrpz_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        """
        self._vi = self._dllwrap.init(ResourceName, IdQuery, Reset)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def chan_getCacheRange(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getCacheRange(self._vi, channel)

    def setTimeout(self, ulNewTimo):
        """

        :param ulNewTimo:
        :type ulNewTimo:
        """
        return self._dllwrap.setTimeout(ulNewTimo)

    def getTimeout(self):
        """"""
        return self._dllwrap.getTimeout()

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def init_long_distance(self, IDQuery, resetDevice, resourceName):
        """

        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        :param resourceName:
        :type resourceName:
        """
        return self._dllwrap.init_long_distance(IDQuery, resetDevice, resourceName)

    def AddSensor(self, channel, resourceName, IDQuery, resetDevice):
        """

        :param channel:
        :type channel:
        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.AddSensor(self._vi, channel, resourceName, IDQuery, resetDevice)

    def chans_abort(self):
        """

        (self._vi"""
        return self._dllwrap.chans_abort(self._vi)

    def chans_getCount(self):
        """

        (self._vi"""
        return self._dllwrap.chans_getCount(self._vi)

    def chans_initiate(self):
        """

        (self._vi"""
        return self._dllwrap.chans_initiate(self._vi)

    def chans_zero(self):
        """

        (self._vi"""
        return self._dllwrap.chans_zero(self._vi)

    def chan_zeroAdvanced(self, channel, zeroing):
        """

        :param channel:
        :type channel:
        :param zeroing:
        :type zeroing:
        """
        return self._dllwrap.chan_zeroAdvanced(self._vi, channel, zeroing)

    def chans_isZeroingComplete(self):
        """

        (self._vi"""
        return self._dllwrap.chans_isZeroingComplete(self._vi)

    def chans_isMeasurementComplete(self):
        """

        (self._vi"""
        return self._dllwrap.chans_isMeasurementComplete(self._vi)

    def chan_mode(self, channel, measurementMode):
        """

        :param channel:
        :type channel:
        :param measurementMode:
        :type measurementMode:
        """
        return self._dllwrap.chan_mode(self._vi, channel, measurementMode)

    def timing_configureExclude(self, channel, excludeStart, excludeStop):
        """

        :param channel:
        :type channel:
        :param excludeStart:
        :type excludeStart:
        :param excludeStop:
        :type excludeStop:
        """
        return self._dllwrap.timing_configureExclude(self._vi, channel, excludeStart, excludeStop)

    def timing_setTimingExcludeStart(self, channel, excludeStart):
        """

        :param channel:
        :type channel:
        :param excludeStart:
        :type excludeStart:
        """
        return self._dllwrap.timing_setTimingExcludeStart(self._vi, channel, excludeStart)

    def timing_getTimingExcludeStart(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.timing_getTimingExcludeStart(self._vi, channel)

    def timing_setTimingExcludeStop(self, channel, excludeStop):
        """

        :param channel:
        :type channel:
        :param excludeStop:
        :type excludeStop:
        """
        return self._dllwrap.timing_setTimingExcludeStop(self._vi, channel, excludeStop)

    def timing_getTimingExcludeStop(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.timing_getTimingExcludeStop(self._vi, channel)

    def bandwidth_setBw(self, channel, bandwidth):
        """

        :param channel:
        :type channel:
        :param bandwidth:
        :type bandwidth:
        """
        return self._dllwrap.bandwidth_setBw(self._vi, channel, bandwidth)

    def bandwidth_getBw(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.bandwidth_getBw(self._vi, channel)

    def bandwidth_getBwList(self, channel, bufferSize):
        """

        :param channel:
        :type channel:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.bandwidth_getBwList(self._vi, channel, bufferSize)

    def avg_configureAvgAuto(self, channel, resolution):
        """

        :param channel:
        :type channel:
        :param resolution:
        :type resolution:
        """
        return self._dllwrap.avg_configureAvgAuto(self._vi, channel, resolution)

    def avg_configureAvgNSRatio(self, channel, maximumNoiseRatio, upperTimeLimit):
        """

        :param channel:
        :type channel:
        :param maximumNoiseRatio:
        :type maximumNoiseRatio:
        :param upperTimeLimit:
        :type upperTimeLimit:
        """
        return self._dllwrap.avg_configureAvgNSRatio(self._vi, channel, maximumNoiseRatio, upperTimeLimit)

    def avg_configureAvgManual(self, channel, count):
        """

        :param channel:
        :type channel:
        :param count:
        :type count:
        """
        return self._dllwrap.avg_configureAvgManual(self._vi, channel, count)

    def avg_setAutoEnabled(self, channel, autoEnabled):
        """

        :param channel:
        :type channel:
        :param autoEnabled:
        :type autoEnabled:
        """
        return self._dllwrap.avg_setAutoEnabled(self._vi, channel, autoEnabled)

    def avg_getAutoEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.avg_getAutoEnabled(self._vi, channel)

    def avg_setAutoMaxMeasuringTime(self, channel, upperTimeLimit):
        """

        :param channel:
        :type channel:
        :param upperTimeLimit:
        :type upperTimeLimit:
        """
        return self._dllwrap.avg_setAutoMaxMeasuringTime(self._vi, channel, upperTimeLimit)

    def avg_getAutoMaxMeasuringTime(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.avg_getAutoMaxMeasuringTime(self._vi, channel)

    def avg_setAutoNoiseSignalRatio(self, channel, maximumNoiseRatio):
        """

        :param channel:
        :type channel:
        :param maximumNoiseRatio:
        :type maximumNoiseRatio:
        """
        return self._dllwrap.avg_setAutoNoiseSignalRatio(self._vi, channel, maximumNoiseRatio)

    def avg_getAutoNoiseSignalRatio(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.avg_getAutoNoiseSignalRatio(self._vi, channel)

    def avg_setAutoResolution(self, channel, resolution):
        """

        :param channel:
        :type channel:
        :param resolution:
        :type resolution:
        """
        return self._dllwrap.avg_setAutoResolution(self._vi, channel, resolution)

    def avg_getAutoResolution(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.avg_getAutoResolution(self._vi, channel)

    def avg_setAutoType(self, channel, method):
        """

        :param channel:
        :type channel:
        :param method:
        :type method:
        """
        return self._dllwrap.avg_setAutoType(self._vi, channel, method)

    def avg_getAutoType(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.avg_getAutoType(self._vi, channel)

    def avg_setCount(self, channel, count):
        """

        :param channel:
        :type channel:
        :param count:
        :type count:
        """
        return self._dllwrap.avg_setCount(self._vi, channel, count)

    def avg_getCount(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.avg_getCount(self._vi, channel)

    def avg_setEnabled(self, channel, averaging):
        """

        :param channel:
        :type channel:
        :param averaging:
        :type averaging:
        """
        return self._dllwrap.avg_setEnabled(self._vi, channel, averaging)

    def avg_getEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.avg_getEnabled(self._vi, channel)

    def avg_setSlot(self, channel, timeslot):
        """

        :param channel:
        :type channel:
        :param timeslot:
        :type timeslot:
        """
        return self._dllwrap.avg_setSlot(self._vi, channel, timeslot)

    def avg_getSlot(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.avg_getSlot(self._vi, channel)

    def avg_setTerminalControl(self, channel, terminalControl):
        """

        :param channel:
        :type channel:
        :param terminalControl:
        :type terminalControl:
        """
        return self._dllwrap.avg_setTerminalControl(self._vi, channel, terminalControl)

    def avg_getTerminalControl(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.avg_getTerminalControl(self._vi, channel)

    def avg_reset(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.avg_reset(self._vi, channel)

    def range_setAutoEnabled(self, channel, autoRange):
        """

        :param channel:
        :type channel:
        :param autoRange:
        :type autoRange:
        """
        return self._dllwrap.range_setAutoEnabled(self._vi, channel, autoRange)

    def range_getAutoEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.range_getAutoEnabled(self._vi, channel)

    def range_setCrossoverLevel(self, channel, crossoverLevel):
        """

        :param channel:
        :type channel:
        :param crossoverLevel:
        :type crossoverLevel:
        """
        return self._dllwrap.range_setCrossoverLevel(self._vi, channel, crossoverLevel)

    def range_getCrossoverLevel(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.range_getCrossoverLevel(self._vi, channel)

    def range_setRange(self, channel, range):
        """

        :param channel:
        :type channel:
        :param range:
        :type range:
        """
        return self._dllwrap.range_setRange(self._vi, channel, range)

    def range_getRange(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.range_getRange(self._vi, channel)

    def corr_configureCorrections(self, channel, offsetState, offset, reserved1, reserved2, sParameterEnable):
        """

        :param channel:
        :type channel:
        :param offsetState:
        :type offsetState:
        :param offset:
        :type offset:
        :param reserved1:
        :type reserved1:
        :param reserved2:
        :type reserved2:
        :param sParameterEnable:
        :type sParameterEnable:
        """
        return self._dllwrap.corr_configureCorrections(
            self._vi, channel, offsetState, offset, reserved1, reserved2, sParameterEnable
        )

    def chan_setCorrectionFrequency(self, channel, frequency):
        """

        :param channel:
        :type channel:
        :param frequency:
        :type frequency:
        """
        return self._dllwrap.chan_setCorrectionFrequency(self._vi, channel, frequency)

    def chan_getCorrectionFrequency(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getCorrectionFrequency(self._vi, channel)

    def chan_setCorrectionFrequencyStep(self, channel, frequencyStep):
        """

        :param channel:
        :type channel:
        :param frequencyStep:
        :type frequencyStep:
        """
        return self._dllwrap.chan_setCorrectionFrequencyStep(self._vi, channel, frequencyStep)

    def chan_getCorrectionFrequencyStep(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getCorrectionFrequencyStep(self._vi, channel)

    def chan_setCorrectionFrequencySpacing(self, channel, frequencySpacing):
        """

        :param channel:
        :type channel:
        :param frequencySpacing:
        :type frequencySpacing:
        """
        return self._dllwrap.chan_setCorrectionFrequencySpacing(self._vi, channel, frequencySpacing)

    def chan_getCorrectionFrequencySpacing(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getCorrectionFrequencySpacing(self._vi, channel)

    def corr_setOffset(self, channel, offset):
        """

        :param channel:
        :type channel:
        :param offset:
        :type offset:
        """
        return self._dllwrap.corr_setOffset(self._vi, channel, offset)

    def corr_getOffset(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.corr_getOffset(self._vi, channel)

    def corr_setOffsetEnabled(self, channel, offsetState):
        """

        :param channel:
        :type channel:
        :param offsetState:
        :type offsetState:
        """
        return self._dllwrap.corr_setOffsetEnabled(self._vi, channel, offsetState)

    def corr_getOffsetEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.corr_getOffsetEnabled(self._vi, channel)

    def corr_setSParamDeviceEnabled(self, channel, sParameterEnable):
        """

        :param channel:
        :type channel:
        :param sParameterEnable:
        :type sParameterEnable:
        """
        return self._dllwrap.corr_setSParamDeviceEnabled(self._vi, channel, sParameterEnable)

    def corr_getSParamDeviceEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.corr_getSParamDeviceEnabled(self._vi, channel)

    def corr_setSParamDevice(self, channel, sParameter):
        """

        :param channel:
        :type channel:
        :param sParameter:
        :type sParameter:
        """
        return self._dllwrap.corr_setSParamDevice(self._vi, channel, sParameter)

    def corr_getSParamDevice(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.corr_getSParamDevice(self._vi, channel)

    def corr_getSParamDevList(self, channel, iSpdListSize):
        """

        :param channel:
        :type channel:
        :param iSpdListSize:
        :type iSpdListSize:
        """
        return self._dllwrap.corr_getSParamDevList(self._vi, channel, iSpdListSize)

    def chan_configureSourceGammaCorr(self, channel, sourceGammaCorrection, magnitude, phase):
        """

        :param channel:
        :type channel:
        :param sourceGammaCorrection:
        :type sourceGammaCorrection:
        :param magnitude:
        :type magnitude:
        :param phase:
        :type phase:
        """
        return self._dllwrap.chan_configureSourceGammaCorr(self._vi, channel, sourceGammaCorrection, magnitude, phase)

    def chan_setSourceGammaMagnitude(self, channel, magnitude):
        """

        :param channel:
        :type channel:
        :param magnitude:
        :type magnitude:
        """
        return self._dllwrap.chan_setSourceGammaMagnitude(self._vi, channel, magnitude)

    def chan_getSourceGammaMagnitude(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getSourceGammaMagnitude(self._vi, channel)

    def chan_setSourceGammaPhase(self, channel, phase):
        """

        :param channel:
        :type channel:
        :param phase:
        :type phase:
        """
        return self._dllwrap.chan_setSourceGammaPhase(self._vi, channel, phase)

    def chan_getSourceGammaPhase(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getSourceGammaPhase(self._vi, channel)

    def chan_setSourceGammaCorrEnabled(self, channel, sourceGammaCorrection):
        """

        :param channel:
        :type channel:
        :param sourceGammaCorrection:
        :type sourceGammaCorrection:
        """
        return self._dllwrap.chan_setSourceGammaCorrEnabled(self._vi, channel, sourceGammaCorrection)

    def chan_getSourceGammaCorrEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getSourceGammaCorrEnabled(self._vi, channel)

    def chan_configureReflectGammaCorr(self, channel, magnitude, phase):
        """

        :param channel:
        :type channel:
        :param magnitude:
        :type magnitude:
        :param phase:
        :type phase:
        """
        return self._dllwrap.chan_configureReflectGammaCorr(self._vi, channel, magnitude, phase)

    def chan_setReflectionGammaMagn(self, channel, magnitude):
        """

        :param channel:
        :type channel:
        :param magnitude:
        :type magnitude:
        """
        return self._dllwrap.chan_setReflectionGammaMagn(self._vi, channel, magnitude)

    def chan_getReflectionGammaMagn(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getReflectionGammaMagn(self._vi, channel)

    def chan_setReflectionGammaPhase(self, channel, phase):
        """

        :param channel:
        :type channel:
        :param phase:
        :type phase:
        """
        return self._dllwrap.chan_setReflectionGammaPhase(self._vi, channel, phase)

    def chan_getReflectionGammaPhase(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getReflectionGammaPhase(self._vi, channel)

    def chan_setReflectionGammaUncertainty(self, channel, uncertainty):
        """

        :param channel:
        :type channel:
        :param uncertainty:
        :type uncertainty:
        """
        return self._dllwrap.chan_setReflectionGammaUncertainty(self._vi, channel, uncertainty)

    def chan_getReflectionGammaUncertainty(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getReflectionGammaUncertainty(self._vi, channel)

    def corr_configureDutyCycle(self, channel, dutyCycleState, dutyCycle):
        """

        :param channel:
        :type channel:
        :param dutyCycleState:
        :type dutyCycleState:
        :param dutyCycle:
        :type dutyCycle:
        """
        return self._dllwrap.corr_configureDutyCycle(self._vi, channel, dutyCycleState, dutyCycle)

    def corr_setDutyCycle(self, channel, dutyCycle):
        """

        :param channel:
        :type channel:
        :param dutyCycle:
        :type dutyCycle:
        """
        return self._dllwrap.corr_setDutyCycle(self._vi, channel, dutyCycle)

    def corr_getDutyCycle(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.corr_getDutyCycle(self._vi, channel)

    def corr_setDutyCycleEnabled(self, channel, dutyCycleState):
        """

        :param channel:
        :type channel:
        :param dutyCycleState:
        :type dutyCycleState:
        """
        return self._dllwrap.corr_setDutyCycleEnabled(self._vi, channel, dutyCycleState)

    def corr_getDutyCycleEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.corr_getDutyCycleEnabled(self._vi, channel)

    def chan_setContAvAperture(self, channel, contAvAperture):
        """

        :param channel:
        :type channel:
        :param contAvAperture:
        :type contAvAperture:
        """
        return self._dllwrap.chan_setContAvAperture(self._vi, channel, contAvAperture)

    def chan_getContAvAperture(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getContAvAperture(self._vi, channel)

    def chan_setContAvSmoothingEnabled(self, channel, contAvSmoothing):
        """

        :param channel:
        :type channel:
        :param contAvSmoothing:
        :type contAvSmoothing:
        """
        return self._dllwrap.chan_setContAvSmoothingEnabled(self._vi, channel, contAvSmoothing)

    def chan_getContAvSmoothingEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getContAvSmoothingEnabled(self._vi, channel)

    def chan_setContAvBufferedEnabled(self, channel, contAvBufferedMode):
        """

        :param channel:
        :type channel:
        :param contAvBufferedMode:
        :type contAvBufferedMode:
        """
        return self._dllwrap.chan_setContAvBufferedEnabled(self._vi, channel, contAvBufferedMode)

    def chan_getContAvBufferedEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getContAvBufferedEnabled(self._vi, channel)

    def chan_setContAvBufferSize(self, channel, bufferSize):
        """

        :param channel:
        :type channel:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.chan_setContAvBufferSize(self._vi, channel, bufferSize)

    def chan_getContAvBufferSize(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getContAvBufferSize(self._vi, channel)

    def chan_getContAvBufferCount(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getContAvBufferCount(self._vi, channel)

    def chan_getContAvBufferInfo(self, channel, infoType, arraySize):
        """

        :param channel:
        :type channel:
        :param infoType:
        :type infoType:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.chan_getContAvBufferInfo(self._vi, channel, infoType, arraySize)

    def chan_setBurstDropoutTolerance(self, channel, dropoutTolerance):
        """

        :param channel:
        :type channel:
        :param dropoutTolerance:
        :type dropoutTolerance:
        """
        return self._dllwrap.chan_setBurstDropoutTolerance(self._vi, channel, dropoutTolerance)

    def chan_getBurstDropoutTolerance(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getBurstDropoutTolerance(self._vi, channel)

    def chan_setBurstChopperEnabled(self, channel, burstAvChopper):
        """

        :param channel:
        :type channel:
        :param burstAvChopper:
        :type burstAvChopper:
        """
        return self._dllwrap.chan_setBurstChopperEnabled(self._vi, channel, burstAvChopper)

    def chan_getBurstChopperEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getBurstChopperEnabled(self._vi, channel)

    def stat_confTimegate(self, channel, offset, time, midambleOffset, midambleLength):
        """

        :param channel:
        :type channel:
        :param offset:
        :type offset:
        :param time:
        :type time:
        :param midambleOffset:
        :type midambleOffset:
        :param midambleLength:
        :type midambleLength:
        """
        return self._dllwrap.stat_confTimegate(self._vi, channel, offset, time, midambleOffset, midambleLength)

    def stat_confScale(self, channel, referenceLevel, range, points):
        """

        param channel:
        :type channel:
        :param referenceLevel:
        :type referenceLevel:
        :param range:
        :type range:
        :param points:
        :type points:
        """
        return self._dllwrap.stat_confScale(self._vi, channel, referenceLevel, range, points)

    def stat_setOffsetTime(self, channel, offset):
        """

        :param channel:
        :type channel:
        :param offset:
        :type offset:
        """
        return self._dllwrap.stat_setOffsetTime(self._vi, channel, offset)

    def stat_getOffsetTime(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.stat_getOffsetTime(self._vi, channel)

    def stat_setTime(self, channel, time):
        """

        :param channel:
        :type channel:
        :param time:
        :type time:
        """
        return self._dllwrap.stat_setTime(self._vi, channel, time)

    def stat_getTime(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.stat_getTime(self._vi, channel)

    def stat_setMidOffset(self, channel, offset):
        """

        :param channel:
        :type channel:
        :param offset:
        :type offset:
        """
        return self._dllwrap.stat_setMidOffset(self._vi, channel, offset)

    def stat_getMidOffset(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.stat_getMidOffset(self._vi, channel)

    def stat_setMidLength(self, channel, length):
        """

        :param channel:
        :type channel:
        :param length:
        :type length:
        """
        return self._dllwrap.stat_setMidLength(self._vi, channel, length)

    def stat_getMidLength(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.stat_getMidLength(self._vi, channel)

    def stat_setScaleRefLevel(self, channel, referenceLevel):
        """

        :param channel:
        :type channel:
        :param referenceLevel:
        :type referenceLevel:
        """
        return self._dllwrap.stat_setScaleRefLevel(self._vi, channel, referenceLevel)

    def stat_getScaleRefLevel(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.stat_getScaleRefLevel(self._vi, channel)

    def stat_setScaleRange(self, channel, range):
        """

        :param channel:
        :type channel:
        :param range:
        :type range:
        """
        return self._dllwrap.stat_setScaleRange(self._vi, channel, range)

    def stat_getScaleRange(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.stat_getScaleRange(self._vi, channel)

    def stat_setScalePoints(self, channel, points):
        """

        :param channel:
        :type channel:
        :param points:
        :type points:
        """
        return self._dllwrap.stat_setScalePoints(self._vi, channel, points)

    def stat_getScalePoints(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.stat_getScalePoints(self._vi, channel)

    def stat_getScaleWidth(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.stat_getScaleWidth(self._vi, channel)

    def tslot_configureTimeSlot(self, channel, timeSlotCount, width):
        """

        :param channel:
        :type channel:
        :param timeSlotCount:
        :type timeSlotCount:
        :param width:
        :type width:
        """
        return self._dllwrap.tslot_configureTimeSlot(self._vi, channel, timeSlotCount, width)

    def tslot_setTimeSlotCount(self, channel, timeSlotCount):
        """

        :param channel:
        :type channel:
        :param timeSlotCount:
        :type timeSlotCount:
        """
        return self._dllwrap.tslot_setTimeSlotCount(self._vi, channel, timeSlotCount)

    def tslot_getTimeSlotCount(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.tslot_getTimeSlotCount(self._vi, channel)

    def tslot_setTimeSlotWidth(self, channel, width):
        """

        :param channel:
        :type channel:
        :param width:
        :type width:
        """
        return self._dllwrap.tslot_setTimeSlotWidth(self._vi, channel, width)

    def tslot_getTimeSlotWidth(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.tslot_getTimeSlotWidth(self._vi, channel)

    def tslot_setTimeSlotMidOffset(self, channel, offset):
        """

        :param channel:
        :type channel:
        :param offset:
        :type offset:
        """
        return self._dllwrap.tslot_setTimeSlotMidOffset(self._vi, channel, offset)

    def tslot_getTimeSlotMidOffset(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.tslot_getTimeSlotMidOffset(self._vi, channel)

    def tslot_setTimeSlotMidLength(self, channel, length):
        """

        :param channel:
        :type channel:
        :param length:
        :type length:
        """
        return self._dllwrap.tslot_setTimeSlotMidLength(self._vi, channel, length)

    def tslot_getTimeSlotMidLength(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.tslot_getTimeSlotMidLength(self._vi, channel)

    def tslot_setTimeSlotChopperEnabled(self, channel, timeSlotChopper):
        """

        :param channel:
        :type channel:
        :param timeSlotChopper:
        :type timeSlotChopper:
        """
        return self._dllwrap.tslot_setTimeSlotChopperEnabled(self._vi, channel, timeSlotChopper)

    def tslot_getTimeSlotChopperEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.tslot_getTimeSlotChopperEnabled(self._vi, channel)

    def scope_configureScope(self, channel, scopePoints, scopeTime, offsetTime, realtime):
        """

        :param channel:
        :type channel:
        :param scopePoints:
        :type scopePoints:
        :param scopeTime:
        :type scopeTime:
        :param offsetTime:
        :type offsetTime:
        :param realtime:
        :type realtime:
        """
        return self._dllwrap.scope_configureScope(self._vi, channel, scopePoints, scopeTime, offsetTime, realtime)

    def scope_fastZero(self):
        """

        (self._vi"""
        return self._dllwrap.scope_fastZero(self._vi)

    def scope_setAverageEnabled(self, channel, scopeAveraging):
        """

        :param channel:
        :type channel:
        :param scopeAveraging:
        :type scopeAveraging:
        """
        return self._dllwrap.scope_setAverageEnabled(self._vi, channel, scopeAveraging)

    def scope_getAverageEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getAverageEnabled(self._vi, channel)

    def scope_setAverageCount(self, channel, count):
        """

        :param channel:
        :type channel:
        :param count:
        :type count:
        """
        return self._dllwrap.scope_setAverageCount(self._vi, channel, count)

    def scope_getAverageCount(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getAverageCount(self._vi, channel)

    def scope_setAverageTerminalControl(self, channel, terminalControl):
        """

        :param channel:
        :type channel:
        :param terminalControl:
        :type terminalControl:
        """
        return self._dllwrap.scope_setAverageTerminalControl(self._vi, channel, terminalControl)

    def scope_getAverageTerminalControl(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getAverageTerminalControl(self._vi, channel)

    def scope_setOffsetTime(self, channel, offsetTime):
        """

        :param channel:
        :type channel:
        :param offsetTime:
        :type offsetTime:
        """
        return self._dllwrap.scope_setOffsetTime(self._vi, channel, offsetTime)

    def scope_getOffsetTime(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getOffsetTime(self._vi, channel)

    def scope_setPoints(self, channel, scopePoints):
        """

        :param channel:
        :type channel:
        :param scopePoints:
        :type scopePoints:
        """
        return self._dllwrap.scope_setPoints(self._vi, channel, scopePoints)

    def scope_getPoints(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getPoints(self._vi, channel)

    def scope_setRealtimeEnabled(self, channel, realtime):
        """

        :param channel:
        :type channel:
        :param realtime:
        :type realtime:
        """
        return self._dllwrap.scope_setRealtimeEnabled(self._vi, channel, realtime)

    def scope_getRealtimeEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getRealtimeEnabled(self._vi, channel)

    def scope_setTime(self, channel, scopeTime):
        """

        :param channel:
        :type channel:
        :param scopeTime:
        :type scopeTime:
        """
        return self._dllwrap.scope_setTime(self._vi, channel, scopeTime)

    def scope_getTime(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getTime(self._vi, channel)

    def scope_setAutoEnabled(self, channel, autoEnabled):
        """

        :param channel:
        :type channel:
        :param autoEnabled:
        :type autoEnabled:
        """
        return self._dllwrap.scope_setAutoEnabled(self._vi, channel, autoEnabled)

    def scope_getAutoEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getAutoEnabled(self._vi, channel)

    def scope_setAutoMaxMeasuringTime(self, channel, upperTimeLimit):
        """

        :param channel:
        :type channel:
        :param upperTimeLimit:
        :type upperTimeLimit:
        """
        return self._dllwrap.scope_setAutoMaxMeasuringTime(self._vi, channel, upperTimeLimit)

    def scope_getAutoMaxMeasuringTime(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getAutoMaxMeasuringTime(self._vi, channel)

    def scope_setAutoNoiseSignalRatio(self, channel, maximumNoiseRatio):
        """

        :param channel:
        :type channel:
        :param maximumNoiseRatio:
        :type maximumNoiseRatio:
        """
        return self._dllwrap.scope_setAutoNoiseSignalRatio(self._vi, channel, maximumNoiseRatio)

    def scope_getAutoNoiseSignalRatio(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getAutoNoiseSignalRatio(self._vi, channel)

    def scope_setAutoResolution(self, channel, resolution):
        """

        :param channel:
        :type channel:
        :param resolution:
        :type resolution:
        """
        return self._dllwrap.scope_setAutoResolution(self._vi, channel, resolution)

    def scope_getAutoResolution(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getAutoResolution(self._vi, channel)

    def scope_setAutoType(self, channel, method):
        """

        :param channel:
        :type channel:
        :param method:
        :type method:
        """
        return self._dllwrap.scope_setAutoType(self._vi, channel, method)

    def scope_getAutoType(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getAutoType(self._vi, channel)

    def scope_setEquivalentSampling(self, channel, scopeEquivalentSampling):
        """

        :param channel:
        :type channel:
        :param scopeEquivalentSampling:
        :type scopeEquivalentSampling:
        """
        return self._dllwrap.scope_setEquivalentSampling(self._vi, channel, scopeEquivalentSampling)

    def scope_getEquivalentSampling(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_getEquivalentSampling(self._vi, channel)

    def scope_meas_setMeasEnabled(self, channel, traceMeasurements):
        """

        :param channel:
        :type channel:
        :param traceMeasurements:
        :type traceMeasurements:
        """
        return self._dllwrap.scope_meas_setMeasEnabled(self._vi, channel, traceMeasurements)

    def scope_meas_getMeasEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_meas_getMeasEnabled(self._vi, channel)

    def scope_meas_setMeasAlgorithm(self, channel, algorithm):
        """

        :param channel:
        :type channel:
        :param algorithm:
        :type algorithm:
        """
        return self._dllwrap.scope_meas_setMeasAlgorithm(self._vi, channel, algorithm)

    def scope_meas_getMeasAlgorithm(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_meas_getMeasAlgorithm(self._vi, channel)

    def scope_meas_setLevelThresholds(self, channel, durationRef, transitionLowRef, transitionHighRef):
        """

        :param channel:
        :type channel:
        :param durationRef:
        :type durationRef:
        :param transitionLowRef:
        :type transitionLowRef:
        :param transitionHighRef:
        :type transitionHighRef:
        """
        return self._dllwrap.scope_meas_setLevelThresholds(
            self._vi, channel, durationRef, transitionLowRef, transitionHighRef
        )

    def scope_meas_getLevelThresholds(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_meas_getLevelThresholds(self._vi, channel)

    def scope_meas_setTime(self, channel, measTime):
        """

        :param channel:
        :type channel:
        :param measTime:
        :type measTime:
        """
        return self._dllwrap.scope_meas_setTime(self._vi, channel, measTime)

    def scope_meas_getTime(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_meas_getTime(self._vi, channel)

    def scope_meas_setOffsetTime(self, channel, offsetTime):
        """

        :param channel:
        :type channel:
        :param offsetTime:
        :type offsetTime:
        """
        return self._dllwrap.scope_meas_setOffsetTime(self._vi, channel, offsetTime)

    def scope_meas_getOffsetTime(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_meas_getOffsetTime(self._vi, channel)

    def scope_meas_getPulseTimes(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_meas_getPulseTimes(self._vi, channel)

    def scope_meas_getPulseTransition(self, channel, slope):
        """

        :param channel:
        :type channel:
        :param slope:
        :type slope:
        """
        return self._dllwrap.scope_meas_getPulseTransition(self._vi, channel, slope)

    def scope_meas_getPulsePower(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_meas_getPulsePower(self._vi, channel)

    def scope_meas_getPulseLevels(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_meas_getPulseLevels(self._vi, channel)

    def scope_meas_getPulseReferenceLevels(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_meas_getPulseReferenceLevels(self._vi, channel)

    def scope_meas_setEquivalentSampling(self, channel, scopeMeasEquivSampling):
        """

        :param channel:
        :type channel:
        :param scopeMeasEquivSampling:
        :type scopeMeasEquivSampling:
        """
        return self._dllwrap.scope_meas_setEquivalentSampling(self._vi, channel, scopeMeasEquivSampling)

    def scope_meas_getEquivalentSampling(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_meas_getEquivalentSampling(self._vi, channel)

    def scope_meas_getSamplePeriod(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.scope_meas_getSamplePeriod(self._vi, channel)

    def trigger_configureInternal(self, channel, triggerLevel, triggerSlope):
        """

        :param channel:
        :type channel:
        :param triggerLevel:
        :type triggerLevel:
        :param triggerSlope:
        :type triggerSlope:
        """
        return self._dllwrap.trigger_configureInternal(self._vi, channel, triggerLevel, triggerSlope)

    def trigger_configureExternal(self, channel, triggerDelay):
        """

        :param channel:
        :type channel:
        :param triggerDelay:
        :type triggerDelay:
        """
        return self._dllwrap.trigger_configureExternal(self._vi, channel, triggerDelay)

    def trigger_immediate(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_immediate(self._vi, channel)

    def trigger_setAutoDelayEnabled(self, channel, autoDelay):
        """

        :param channel:
        :type channel:
        :param autoDelay:
        :type autoDelay:
        """
        return self._dllwrap.trigger_setAutoDelayEnabled(self._vi, channel, autoDelay)

    def trigger_getAutoDelayEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_getAutoDelayEnabled(self._vi, channel)

    def trigger_setAutoTriggerEnabled(self, channel, autoTrigger):
        """

        :param channel:
        :type channel:
        :param autoTrigger:
        :type autoTrigger:
        """
        return self._dllwrap.trigger_setAutoTriggerEnabled(self._vi, channel, autoTrigger)

    def trigger_getAutoTriggerEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_getAutoTriggerEnabled(self._vi, channel)

    def trigger_setCount(self, channel, triggerCount):
        """

        :param channel:
        :type channel:
        :param triggerCount:
        :type triggerCount:
        """
        return self._dllwrap.trigger_setCount(self._vi, channel, triggerCount)

    def trigger_getCount(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_getCount(self._vi, channel)

    def trigger_setDelay(self, channel, triggerDelay):
        """

        :param channel:
        :type channel:
        :param triggerDelay:
        :type triggerDelay:
        """
        return self._dllwrap.trigger_setDelay(self._vi, channel, triggerDelay)

    def trigger_getDelay(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_getDelay(self._vi, channel)

    def trigger_setHoldoff(self, channel, triggerHoldoff):
        """

        :param channel:
        :type channel:
        :param triggerHoldoff:
        :type triggerHoldoff:
        """
        return self._dllwrap.trigger_setHoldoff(self._vi, channel, triggerHoldoff)

    def trigger_getHoldoff(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_getHoldoff(self._vi, channel)

    def trigger_setHysteresis(self, channel, triggerHysteresis):
        """

        :param channel:
        :type channel:
        :param triggerHysteresis:
        :type triggerHysteresis:
        """
        return self._dllwrap.trigger_setHysteresis(self._vi, channel, triggerHysteresis)

    def trigger_getHysteresis(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_getHysteresis(self._vi, channel)

    def trigger_setLevel(self, channel, triggerLevel):
        """

        :param channel:
        :type channel:
        :param triggerLevel:
        :type triggerLevel:
        """
        return self._dllwrap.trigger_setLevel(self._vi, channel, triggerLevel)

    def trigger_getLevel(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_getLevel(self._vi, channel)

    def trigger_setSlope(self, channel, triggerSlope):
        """

        :param channel:
        :type channel:
        :param triggerSlope:
        :type triggerSlope:
        """
        return self._dllwrap.trigger_setSlope(self._vi, channel, triggerSlope)

    def trigger_getSlope(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_getSlope(self._vi, channel)

    def trigger_setSource(self, channel, triggerSource):
        """

        :param channel:
        :type channel:
        :param triggerSource:
        :type triggerSource:
        """
        return self._dllwrap.trigger_setSource(self._vi, channel, triggerSource)

    def trigger_getSource(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_getSource(self._vi, channel)

    def trigger_setDropoutTime(self, channel, dropoutTime):
        """

        :param channel:
        :type channel:
        :param dropoutTime:
        :type dropoutTime:
        """
        return self._dllwrap.trigger_setDropoutTime(self._vi, channel, dropoutTime)

    def trigger_getDropoutTime(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_getDropoutTime(self._vi, channel)

    def trigger_setMasterState(self, channel, state):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        """
        return self._dllwrap.trigger_setMasterState(self._vi, channel, state)

    def trigger_getMasterState(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_getMasterState(self._vi, channel)

    def trigger_setSyncState(self, channel, state):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        """
        return self._dllwrap.trigger_setSyncState(self._vi, channel, state)

    def trigger_getSyncState(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.trigger_getSyncState(self._vi, channel)

    def chan_info(self, channel, infoType, arraySize):
        """

        :param channel:
        :type channel:
        :param infoType:
        :type infoType:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.chan_info(self._vi, channel, infoType, arraySize)

    def chan_infoHeader(self, channel, parameterNumber, arraySize):
        """

        :param channel:
        :type channel:
        :param parameterNumber:
        :type parameterNumber:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.chan_infoHeader(self._vi, channel, parameterNumber, arraySize)

    def chan_infosCount(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_infosCount(self._vi, channel)

    def system_setStatusUpdateTime(self, channel, statusUpdateTime):
        """

        :param channel:
        :type channel:
        :param statusUpdateTime:
        :type statusUpdateTime:
        """
        return self._dllwrap.system_setStatusUpdateTime(self._vi, channel, statusUpdateTime)

    def system_getStatusUpdateTime(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.system_getStatusUpdateTime(self._vi, channel)

    def system_setResultUpdateTime(self, channel, resultUpdateTime):
        """

        :param channel:
        :type channel:
        :param resultUpdateTime:
        :type resultUpdateTime:
        """
        return self._dllwrap.system_setResultUpdateTime(self._vi, channel, resultUpdateTime)

    def system_getResultUpdateTime(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.system_getResultUpdateTime(self._vi, channel)

    def calib_test(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.calib_test(self._vi, channel)

    def calib_getTestDeviation(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.calib_getTestDeviation(self._vi, channel)

    def calib_getTestReference(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.calib_getTestReference(self._vi, channel)

    def chan_abort(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_abort(self._vi, channel)

    def chan_initiate(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_initiate(self._vi, channel)

    def chan_setInitContinuousEnabled(self, channel, continuousInitiate):
        """

        :param channel:
        :type channel:
        :param continuousInitiate:
        :type continuousInitiate:
        """
        return self._dllwrap.chan_setInitContinuousEnabled(self._vi, channel, continuousInitiate)

    def chan_getInitContinuousEnabled(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getInitContinuousEnabled(self._vi, channel)

    def chan_reset(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_reset(self._vi, channel)

    def chan_setSamplingFrequency(self, channel, samplingFrequency):
        """

        :param channel:
        :type channel:
        :param samplingFrequency:
        :type samplingFrequency:
        """
        return self._dllwrap.chan_setSamplingFrequency(self._vi, channel, samplingFrequency)

    def chan_getSamplingFrequency(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getSamplingFrequency(self._vi, channel)

    def chan_zero(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_zero(self._vi, channel)

    def chan_isZeroComplete(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_isZeroComplete(self._vi, channel)

    def chan_isMeasurementComplete(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_isMeasurementComplete(self._vi, channel)

    def chan_selfTest(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_selfTest(self._vi, channel)

    def chan_setAuxiliary(self, channel, auxiliaryValue):
        """

        :param channel:
        :type channel:
        :param auxiliaryValue:
        :type auxiliaryValue:
        """
        return self._dllwrap.chan_setAuxiliary(self._vi, channel, auxiliaryValue)

    def chan_getAuxiliary(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.chan_getAuxiliary(self._vi, channel)

    def meass_readMeasurement(self, channel, timeout_ms):
        """

        :param channel:
        :type channel:
        :param timeout_ms:
        :type timeout_ms:
        """
        return self._dllwrap.meass_readMeasurement(self._vi, channel, timeout_ms)

    def meass_fetchMeasurement(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.meass_fetchMeasurement(self._vi, channel)

    def meass_readBufferMeasurement(self, channel, maximumTime_ms, bufferSize):
        """

        :param channel:
        :type channel:
        :param maximumTime_ms:
        :type maximumTime_ms:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.meass_readBufferMeasurement(self._vi, channel, maximumTime_ms, bufferSize)

    def meass_fetchBufferMeasurement(self, channel, arraySize):
        """

        :param channel:
        :type channel:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.meass_fetchBufferMeasurement(self._vi, channel, arraySize)

    def meass_sendSoftwareTrigger(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.meass_sendSoftwareTrigger(self._vi, channel)

    def meass_readMeasurementAux(self, channel, timeout_ms):
        """

        :param channel:
        :type channel:
        :param timeout_ms:
        :type timeout_ms:
        """
        return self._dllwrap.meass_readMeasurementAux(self._vi, channel, timeout_ms)

    def meass_fetchMeasurementAux(self, channel, timeout_ms):
        """

        :param channel:
        :type channel:
        :param timeout_ms:
        :type timeout_ms:
        """
        return self._dllwrap.meass_fetchMeasurementAux(self._vi, channel, timeout_ms)

    def meass_readBufferMeasurementAux(self, channel, maximumTime_ms, bufferSize):
        """

        :param channel:
        :type channel:
        :param maximumTime_ms:
        :type maximumTime_ms:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.meass_readBufferMeasurementAux(self._vi, channel, maximumTime_ms, bufferSize)

    def meass_fetchBufferMeasurementAux(self, channel, maximumTime_ms, bufferSize):
        """

        :param channel:
        :type channel:
        :param maximumTime_ms:
        :type maximumTime_ms:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.meass_fetchBufferMeasurementAux(self._vi, channel, maximumTime_ms, bufferSize)

    def status_preset(self):
        """

        (self._vi"""
        return self._dllwrap.status_preset(self._vi)

    def status_checkCondition(self, statusClass, mask):
        """

        :param statusClass:
        :type statusClass:
        :param mask:
        :type mask:
        """
        return self._dllwrap.status_checkCondition(self._vi, statusClass, mask)

    def status_catchEvent(self, statusClass, mask, direction):
        """

        :param statusClass:
        :type statusClass:
        :param mask:
        :type mask:
        :param direction:
        :type direction:
        """
        return self._dllwrap.status_catchEvent(self._vi, statusClass, mask, direction)

    def status_checkEvent(self, statusClass, mask, resetMask):
        """

        :param statusClass:
        :type statusClass:
        :param mask:
        :type mask:
        :param resetMask:
        :type resetMask:
        """
        return self._dllwrap.status_checkEvent(self._vi, statusClass, mask, resetMask)

    def status_enableEventNotification(self, statusClass, mask):
        """

        :param statusClass:
        :type statusClass:
        :param mask:
        :type mask:
        """
        return self._dllwrap.status_enableEventNotification(self._vi, statusClass, mask)

    def status_disableEventNotification(self, statusClass, mask):
        """

        :param statusClass:
        :type statusClass:
        :param mask:
        :type mask:
        """
        return self._dllwrap.status_disableEventNotification(self._vi, statusClass, mask)

    def status_registerWindowMessage(self, messageID):
        """

        :param messageID:
        :type messageID:
        """
        return self._dllwrap.status_registerWindowMessage(self._vi, messageID)

    def errorCheckState(self, stateChecking):
        """

        :param stateChecking:
        :type stateChecking:
        """
        return self._dllwrap.errorCheckState(self._vi, stateChecking)

    def reset(self):
        """

        (self._vi"""
        return self._dllwrap.reset(self._vi)

    def self_test(self):
        """

        (self._vi"""
        return self._dllwrap.self_test(self._vi)

    def error_query(self):
        """

        (self._vi"""
        return self._dllwrap.error_query(self._vi)

    def error_message(self, statusCode):
        """

        :param statusCode:
        :type statusCode:
        """
        return self._dllwrap.error_message(self._vi, statusCode)

    def revision_query(self):
        """

        (self._vi"""
        return self._dllwrap.revision_query(self._vi)

    def CloseSensor(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.CloseSensor(self._vi, channel)

    def GetSensorCount(self, iDummyHandle):
        """

        :param iDummyHandle:
        :type iDummyHandle:
        """
        return self._dllwrap.GetSensorCount(iDummyHandle)

    def GetSensorInfo(self, iDummyHandle, iIndex):
        """

        :param iDummyHandle:
        :type iDummyHandle:
        :param iIndex:
        :type iIndex:
        """
        return self._dllwrap.GetSensorInfo(iDummyHandle, iIndex)

    def GetDeviceStatusZ5(self, iDummyHandle):
        """

        :param iDummyHandle:
        :type iDummyHandle:
        """
        return self._dllwrap.GetDeviceStatusZ5(iDummyHandle)

    def GetDeviceInfoZ5(self, iDummyHandle, iPortIdx):
        """

        :param iDummyHandle:
        :type iDummyHandle:
        :param iPortIdx:
        :type iPortIdx:
        """
        return self._dllwrap.GetDeviceInfoZ5(iDummyHandle, iPortIdx)

    def initZ5(self, cPort, IDQuery, resetDevice):
        """

        :param cPort:
        :type cPort:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.initZ5(cPort, IDQuery, resetDevice)

    def status_driverOpenState(self):
        """"""
        return self._dllwrap.status_driverOpenState()

    def service_getDetectorTemperature(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.service_getDetectorTemperature(self._vi, channel)

    def fw_version_check(self, iBufSize):
        """

        :param iBufSize:
        :type iBufSize:
        """
        return self._dllwrap.fw_version_check(self._vi, iBufSize)

    def calib_readData(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.calib_readData(self._vi, channel)

    def calib_writeData(self, channel, arraySize):
        """

        :param channel:
        :type channel:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.calib_writeData(self._vi, channel, arraySize)

    def calib_readUserData(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.calib_readUserData(self._vi, channel)

    def calib_writeUserData(self, channel, arraySize):
        """

        :param channel:
        :type channel:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.calib_writeUserData(self._vi, channel, arraySize)

    def setSensorName(self, chan):
        """

        :param chan:
        :type chan:
        """
        return self._dllwrap.setSensorName(self._vi, chan)

    def getSensorName(self, chan, maxLen):
        """

        :param chan:
        :type chan:
        :param maxLen:
        :type maxLen:
        """
        return self._dllwrap.getSensorName(self._vi, chan, maxLen)

    def setLedMode(self, chan, ledMode):
        """

        :param chan:
        :type chan:
        :param ledMode:
        :type ledMode:
        """
        return self._dllwrap.setLedMode(self._vi, chan, ledMode)

    def getLedMode(self, chan):
        """

        :param chan:
        :type chan:
        """
        return self._dllwrap.getLedMode(self._vi, chan)

    def setLedColor(self, chan, color):
        """

        :param chan:
        :type chan:
        :param color:
        :type color:
        """
        return self._dllwrap.setLedColor(self._vi, chan, color)

    def getLedColor(self, chan):
        """

        :param chan:
        :type chan:
        """
        return self._dllwrap.getLedColor(self._vi, chan)

    def trigger_setMasterPort(self, chan, port):
        """

        :param chan:
        :type chan:
        :param port:
        :type port:
        """
        return self._dllwrap.trigger_setMasterPort(self._vi, chan, port)

    def trigger_getMasterPort(self, chan):
        """

        :param chan:
        :type chan:
        """
        return self._dllwrap.trigger_getMasterPort(self._vi, chan)

    def trigger_setSyncPort(self, chan, port):
        """

        :param chan:
        :type chan:
        :param port:
        :type port:
        """
        return self._dllwrap.trigger_setSyncPort(self._vi, chan, port)

    def trigger_getSyncPort(self, chan):
        """

        :param chan:
        :type chan:
        """
        return self._dllwrap.trigger_getSyncPort(self._vi, chan)

    def getUsageMap(self, maxLen):
        """

        :param maxLen:
        :type maxLen:
        """
        return self._dllwrap.getUsageMap(self._vi, maxLen)

    def GetSessionControlHandle(self, iChannel):
        """

        :param iChannel:
        :type iChannel:
        """
        return self._dllwrap.GetSessionControlHandle(iChannel)

    def status_setDeviceChangedCallback(self, lUserArgument):
        """

        :param lUserArgument:
        :type lUserArgument:
        """
        return self._dllwrap.status_setDeviceChangedCallback(lUserArgument)
