from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import rsscope_const as const
from .rsscope_const import *


class rsscope_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("rsscope_32.dll", "rsscope_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "rsscope"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        instrSession = ViSession()
        _status = self.dll.rsscope_init(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            byref(instrSession),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(instrSession.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        instrSession = ViSession()
        _status = self.dll.rsscope_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViString(optionString),
            byref(instrSession),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(instrSession.value)

    def Autoset(self, instrSession):
        _status = self.dll.rsscope_Autoset(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAcquisitionType(self, instrSession, channel, waveform, acquisitionType):
        _status = self.dll.rsscope_ConfigureAcquisitionType(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViInt32(acquisitionType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAcquisitionRecord(self, instrSession, timePerRecord, acquisitionStartTime):
        _status = self.dll.rsscope_ConfigureAcquisitionRecord(
            ViSession(instrSession),
            ViReal64(timePerRecord),
            ViReal64(acquisitionStartTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryNumberOfAcquisitions(self, instrSession):
        numberOfAcquisitions = ViInt32()
        _status = self.dll.rsscope_QueryNumberOfAcquisitions(ViSession(instrSession), byref(numberOfAcquisitions))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(numberOfAcquisitions.value)

    def ConfigureTimeBase(self, instrSession, timeScale, referencePoint, restrictOffset):
        _status = self.dll.rsscope_ConfigureTimeBase(
            ViSession(instrSession),
            ViReal64(timeScale),
            ViInt32(referencePoint),
            ViBoolean(restrictOffset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRollMode(self, instrSession, mode, minRollModeGain):
        _status = self.dll.rsscope_ConfigureRollMode(ViSession(instrSession), ViInt32(mode), ViInt32(minRollModeGain))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryDivisions(self, instrSession):
        divisions = ViInt32()
        _status = self.dll.rsscope_QueryDivisions(ViSession(instrSession), byref(divisions))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(divisions.value)

    def ConfigureTimeSelectDependency(self, instrSession, timeSelectDependency):
        _status = self.dll.rsscope_ConfigureTimeSelectDependency(ViSession(instrSession), ViInt32(timeSelectDependency))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAutoAdjustment(self, instrSession, autoAdjustment):
        _status = self.dll.rsscope_ConfigureAutoAdjustment(ViSession(instrSession), ViBoolean(autoAdjustment))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSampleRate(self, instrSession, sampleRate):
        _status = self.dll.rsscope_ConfigureSampleRate(ViSession(instrSession), ViReal64(sampleRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureResolution(self, instrSession, resolution):
        _status = self.dll.rsscope_ConfigureResolution(ViSession(instrSession), ViReal64(resolution))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryADCSampleRate(self, instrSession):
        ADCSampleRate = ViReal64()
        _status = self.dll.rsscope_QueryADCSampleRate(ViSession(instrSession), byref(ADCSampleRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(ADCSampleRate.value)

    def ConfigureRecordLength(self, instrSession, recordLength):
        _status = self.dll.rsscope_ConfigureRecordLength(ViSession(instrSession), ViInt32(recordLength))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRecordLengthLimit(self, instrSession, lengthLimit):
        _status = self.dll.rsscope_ConfigureRecordLengthLimit(ViSession(instrSession), ViInt32(lengthLimit))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAcquisitionSampleRate(self, instrSession, acquisitionSampleRate):
        _status = self.dll.rsscope_ConfigureAcquisitionSampleRate(
            ViSession(instrSession), ViReal64(acquisitionSampleRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAcquisitionTime(self, instrSession, acquisitionTime):
        _status = self.dll.rsscope_ConfigureAcquisitionTime(ViSession(instrSession), ViReal64(acquisitionTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureResolutionEnhancement(self, instrSession, resolutionEnhancement):
        _status = self.dll.rsscope_ConfigureResolutionEnhancement(
            ViSession(instrSession), ViInt32(resolutionEnhancement)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureInterpolation(self, instrSession, interpolation):
        _status = self.dll.rsscope_ConfigureInterpolation(ViSession(instrSession), ViInt32(interpolation))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformState(self, instrSession, channel, waveform, enableWaveform):
        _status = self.dll.rsscope_ConfigureWaveformState(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViBoolean(enableWaveform),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformArithmetic(self, instrSession, channel, waveform, arithmetic):
        _status = self.dll.rsscope_ConfigureWaveformArithmetic(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViInt32(arithmetic),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNumberOfAverages(self, instrSession, numberOfAverages):
        _status = self.dll.rsscope_ConfigureNumberOfAverages(ViSession(instrSession), ViInt32(numberOfAverages))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUltraSegmentation(self, instrSession, ultraSegmentationEnabled, ultraSegmentationDependecy):
        _status = self.dll.rsscope_ConfigureUltraSegmentation(
            ViSession(instrSession),
            ViBoolean(ultraSegmentationEnabled),
            ViBoolean(ultraSegmentationDependecy),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUltraSegmentationAutoReplay(self, instrSession, autoReplay):
        _status = self.dll.rsscope_ConfigureUltraSegmentationAutoReplay(ViSession(instrSession), ViBoolean(autoReplay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformAcquisitionCoupleChannelsEnabled(self, instrSession, autoReplay):
        _status = self.dll.rsscope_ConfigureWaveformAcquisitionCoupleChannelsEnabled(
            ViSession(instrSession), ViBoolean(autoReplay)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMultiwaveformAcquisitionEnabled(self, instrSession, multiwaveform):
        _status = self.dll.rsscope_ConfigureMultiwaveformAcquisitionEnabled(
            ViSession(instrSession), ViBoolean(multiwaveform)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannel(
        self,
        instrSession,
        channel,
        channelEnabled,
        verticalRange,
        verticalOffset,
        verticalCoupling,
    ):
        _status = self.dll.rsscope_ConfigureChannel(
            ViSession(instrSession),
            ViInt32(channel),
            ViBoolean(channelEnabled),
            ViReal64(verticalRange),
            ViReal64(verticalOffset),
            ViInt32(verticalCoupling),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannelInvert(self, instrSession, channel, invert):
        _status = self.dll.rsscope_ConfigureChannelInvert(ViSession(instrSession), ViInt32(channel), ViBoolean(invert))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannelGroundConnection(self, instrSession, channel, groundConnection):
        _status = self.dll.rsscope_ConfigureChannelGroundConnection(
            ViSession(instrSession), ViInt32(channel), ViBoolean(groundConnection)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannelOffset(self, instrSession, channel, offset):
        _status = self.dll.rsscope_ConfigureChannelOffset(ViSession(instrSession), ViInt32(channel), ViReal64(offset))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannelVerticalScale(self, instrSession, channel, verticalScale):
        _status = self.dll.rsscope_ConfigureChannelVerticalScale(
            ViSession(instrSession), ViInt32(channel), ViReal64(verticalScale)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannelBandwidth(self, instrSession, channel, bandwidth):
        _status = self.dll.rsscope_ConfigureChannelBandwidth(
            ViSession(instrSession), ViInt32(channel), ViInt32(bandwidth)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannelMeasurementImpedance(self, instrSession, channel, inputImpedance):
        _status = self.dll.rsscope_ConfigureChannelMeasurementImpedance(
            ViSession(instrSession), ViInt32(channel), ViReal64(inputImpedance)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannelOverload(self, instrSession, channel, overload):
        _status = self.dll.rsscope_ConfigureChannelOverload(
            ViSession(instrSession), ViInt32(channel), ViBoolean(overload)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannelAntialiasing(self, instrSession, channel, antialiasing):
        _status = self.dll.rsscope_ConfigureChannelAntialiasing(
            ViSession(instrSession), ViInt32(channel), ViInt32(antialiasing)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannelDigitalFilter(self, instrSession, channel, enable, cutOff):
        _status = self.dll.rsscope_ConfigureChannelDigitalFilter(
            ViSession(instrSession), ViInt32(channel), ViBoolean(enable), ViReal64(cutOff)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannelDigitalFilterTrigger(self, instrSession, trigger, reserved, coupling, RFRejectBW):
        _status = self.dll.rsscope_ConfigureChannelDigitalFilterTrigger(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(reserved),
            ViInt32(coupling),
            ViReal64(RFRejectBW),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannelExternalAttenuation(self, instrSession, channel, scale, attenuation):
        _status = self.dll.rsscope_ConfigureChannelExternalAttenuation(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(scale),
            ViReal64(attenuation),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDifferentialSignal(
        self,
        instrSession,
        differentialSignal,
        enable,
        positiveInput,
        negativeInput,
        outputA,
        outputB,
    ):
        _status = self.dll.rsscope_ConfigureDifferentialSignal(
            ViSession(instrSession),
            ViInt32(differentialSignal),
            ViBoolean(enable),
            ViInt32(positiveInput),
            ViInt32(negativeInput),
            ViInt32(outputA),
            ViInt32(outputB),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCoupleVerticalChannelSettingsEnabled(self, instrSession, channel, coupledChannel, couplingEnabled):
        _status = self.dll.rsscope_ConfigureCoupleVerticalChannelSettingsEnabled(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(coupledChannel),
            ViBoolean(couplingEnabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryVerticalChannelSettingsCoupled(self, instrSession, channel, coupledChannel):
        couplingEnabled = ViBoolean()
        _status = self.dll.rsscope_QueryVerticalChannelSettingsCoupled(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(coupledChannel),
            byref(couplingEnabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(couplingEnabled.value)

    def ConfigureProbe(self, instrSession, channel, channelVisible, offset):
        _status = self.dll.rsscope_ConfigureProbe(
            ViSession(instrSession),
            ViInt32(channel),
            ViBoolean(channelVisible),
            ViReal64(offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryProbeState(self, instrSession, channel):
        state = ViInt32()
        _status = self.dll.rsscope_QueryProbeState(ViSession(instrSession), ViInt32(channel), byref(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(state.value)

    def QueryProbeCharacteristics(self, instrSession, channel, bufferSize):
        type = ARRAY_ViChar(bufferSize)
        name = ARRAY_ViChar(bufferSize)
        inputImpedance = ViReal64()
        inputCapacitance = ViReal64()
        attenuation = ViReal64()
        bandwidth = ViReal64()
        _status = self.dll.rsscope_QueryProbeCharacteristics(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(bufferSize),
            type,
            name,
            byref(inputImpedance),
            byref(inputCapacitance),
            byref(attenuation),
            byref(bandwidth),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        type = decode(type)
        name = decode(name)
        inputImpedance = float(inputImpedance.value)
        inputCapacitance = float(inputCapacitance.value)
        attenuation = float(attenuation.value)
        bandwidth = float(bandwidth.value)
        return type, name, inputImpedance, inputCapacitance, attenuation, bandwidth

    def ConfigureProbeMicroButtonAction(self, instrSession, channel, microButtonAction):
        _status = self.dll.rsscope_ConfigureProbeMicroButtonAction(
            ViSession(instrSession), ViInt32(channel), ViInt32(microButtonAction)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProbeAutoZero(self, instrSession, channel):
        _status = self.dll.rsscope_ProbeAutoZero(ViSession(instrSession), ViInt32(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProbeUseAutoZero(self, instrSession, channel, useAutoZero):
        _status = self.dll.rsscope_ProbeUseAutoZero(ViSession(instrSession), ViInt32(channel), ViBoolean(useAutoZero))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeZeroAdjustValue(self, instrSession, channel, zeroAdjustValue):
        _status = self.dll.rsscope_ConfigureProbeZeroAdjustValue(
            ViSession(instrSession), ViInt32(channel), ViReal64(zeroAdjustValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProbeSaveToProbe(self, instrSession, channel):
        _status = self.dll.rsscope_ProbeSaveToProbe(ViSession(instrSession), ViInt32(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProbeSetOffsetToMean(self, instrSession, channel):
        _status = self.dll.rsscope_ProbeSetOffsetToMean(ViSession(instrSession), ViInt32(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProbeDegauss(self, instrSession, channel):
        _status = self.dll.rsscope_ProbeDegauss(ViSession(instrSession), ViInt32(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryProbeAttributes(self, instrSession, channel, bufferSize):
        softwareVersion = ARRAY_ViChar(bufferSize)
        productionDate = ARRAY_ViChar(bufferSize)
        partNumber = ARRAY_ViChar(bufferSize)
        serialNumber = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryProbeAttributes(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(bufferSize),
            softwareVersion,
            productionDate,
            partNumber,
            serialNumber,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        softwareVersion = decode(softwareVersion)
        productionDate = decode(productionDate)
        partNumber = decode(partNumber)
        serialNumber = decode(serialNumber)
        return softwareVersion, productionDate, partNumber, serialNumber

    def ConfigureProbeFirmwarePath(self, instrSession, channel, firmwarePath):
        _status = self.dll.rsscope_ConfigureProbeFirmwarePath(
            ViSession(instrSession), ViInt32(channel), ViString(firmwarePath)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def UpdateProbeFirmware(self, instrSession, channel):
        _status = self.dll.rsscope_UpdateProbeFirmware(ViSession(instrSession), ViInt32(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryProbeFirmwareUpdateStatus(self, instrSession, channel):
        firmwareUpdateStatus = ViInt32()
        _status = self.dll.rsscope_QueryProbeFirmwareUpdateStatus(
            ViSession(instrSession), ViInt32(channel), byref(firmwareUpdateStatus)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(firmwareUpdateStatus.value)

    def ProbeSelftest(self, instrSession, channel):
        _status = self.dll.rsscope_ProbeSelftest(ViSession(instrSession), ViInt32(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryProbeSelftestResult(self, instrSession, channel, bufferSize):
        selftestResult = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryProbeSelftestResult(
            ViSession(instrSession), ViInt32(channel), ViInt32(bufferSize), selftestResult
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(selftestResult)

    def QueryProbeSelftestStatus(self, instrSession, channel):
        selftestStatus = ViInt32()
        _status = self.dll.rsscope_QueryProbeSelftestStatus(
            ViSession(instrSession), ViInt32(channel), byref(selftestStatus)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(selftestStatus.value)

    def ConfigureProbeDetection(self, instrSession, channel, mode):
        _status = self.dll.rsscope_ConfigureProbeDetection(ViSession(instrSession), ViInt32(channel), ViInt32(mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeAttenuation(self, instrSession, channel, verticalUnit, attenuation):
        _status = self.dll.rsscope_ConfigureProbeAttenuation(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(verticalUnit),
            ViReal64(attenuation),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeGain(self, instrSession, channel, gain):
        _status = self.dll.rsscope_ConfigureProbeGain(ViSession(instrSession), ViInt32(channel), ViReal64(gain))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryDetectedProbeGain(self, instrSession, channel):
        gain = ViReal64()
        _status = self.dll.rsscope_QueryDetectedProbeGain(ViSession(instrSession), ViInt32(channel), byref(gain))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(gain.value)

    def ConfigureCurrentProbePredefined(self, instrSession, channel, predefinedProbe):
        _status = self.dll.rsscope_ConfigureCurrentProbePredefined(
            ViSession(instrSession), ViInt32(channel), ViInt32(predefinedProbe)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbePredefinedTektronicsProbe(self, instrSession, channel, predefinedTektronicsProbe):
        _status = self.dll.rsscope_ConfigureProbePredefinedTektronicsProbe(
            ViSession(instrSession), ViInt32(channel), ViInt32(predefinedTektronicsProbe)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeDMOffset(self, instrSession, channel, DMOffset):
        _status = self.dll.rsscope_ConfigureProbeDMOffset(ViSession(instrSession), ViInt32(channel), ViReal64(DMOffset))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeCMOffset(self, instrSession, channel, CMOffset):
        _status = self.dll.rsscope_ConfigureProbeCMOffset(ViSession(instrSession), ViInt32(channel), ViReal64(CMOffset))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeNegativeOffset(self, instrSession, channel, negativeOffset):
        _status = self.dll.rsscope_ConfigureProbeNegativeOffset(
            ViSession(instrSession), ViInt32(channel), ViReal64(negativeOffset)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbePositiveOffset(self, instrSession, channel, positiveOffset):
        _status = self.dll.rsscope_ConfigureProbePositiveOffset(
            ViSession(instrSession), ViInt32(channel), ViReal64(positiveOffset)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeMode(self, instrSession, channel, probeMode):
        _status = self.dll.rsscope_ConfigureProbeMode(ViSession(instrSession), ViInt32(channel), ViInt32(probeMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeAttenuatorRTZA15(self, instrSession, channel, attenuatorRTZA15):
        _status = self.dll.rsscope_ConfigureProbeAttenuatorRTZA15(
            ViSession(instrSession), ViInt32(channel), ViBoolean(attenuatorRTZA15)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeRTZHD(self, instrSession, channel, voltageRange, bandwidthLimit, overrangeBuzzer):
        _status = self.dll.rsscope_ConfigureProbeRTZHD(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(voltageRange),
            ViBoolean(bandwidthLimit),
            ViBoolean(overrangeBuzzer),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryProbeAdapterType(self, instrSession, channel):
        adapterType = ViInt32()
        _status = self.dll.rsscope_QueryProbeAdapterType(ViSession(instrSession), ViInt32(channel), byref(adapterType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(adapterType.value)

    def QueryProbeConverterType(self, instrSession, channel):
        converterType = ViInt32()
        _status = self.dll.rsscope_QueryProbeConverterType(
            ViSession(instrSession), ViInt32(channel), byref(converterType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(converterType.value)

    def ConfigureProbeRTZ1MBandwidthLimit(self, instrSession, channel, bandwidthLimit):
        _status = self.dll.rsscope_ConfigureProbeRTZ1MBandwidthLimit(
            ViSession(instrSession), ViInt32(channel), ViInt32(bandwidthLimit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProbeRTZ1MSelfAlign(self, instrSession, channel):
        _status = self.dll.rsscope_ProbeRTZ1MSelfAlign(ViSession(instrSession), ViInt32(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeDeembeddingSelectTipModule(
        self, instrSession, channel, tipModule, ZMA30Submodule, ZMA40Submodule
    ):
        _status = self.dll.rsscope_ConfigureProbeDeembeddingSelectTipModule(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(tipModule),
            ViInt32(ZMA30Submodule),
            ViInt32(ZMA40Submodule),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeDeembeddingCustomTipFile(self, instrSession, channel, deembeddingCustomTipFile):
        _status = self.dll.rsscope_ConfigureProbeDeembeddingCustomTipFile(
            ViSession(instrSession), ViInt32(channel), ViString(deembeddingCustomTipFile)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeDeembeddingMode(self, instrSession, channel, mode, bandwidth, measurementMode):
        _status = self.dll.rsscope_ConfigureProbeDeembeddingMode(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(mode),
            ViReal64(bandwidth),
            ViInt32(measurementMode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeDeembeddingInputMode(self, instrSession, channel, deembeddingInputMode):
        _status = self.dll.rsscope_ConfigureProbeDeembeddingInputMode(
            ViSession(instrSession), ViInt32(channel), ViInt32(deembeddingInputMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeDeembeddingSourceImpedance(
        self,
        instrSession,
        channel,
        removeProbeLoading,
        impedanceType,
        impedance,
        sParameterFile,
    ):
        _status = self.dll.rsscope_ConfigureProbeDeembeddingSourceImpedance(
            ViSession(instrSession),
            ViInt32(channel),
            ViBoolean(removeProbeLoading),
            ViInt32(impedanceType),
            ViReal64(impedance),
            ViString(sParameterFile),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeMeter(self, instrSession, channel, probeMeter, visibility, measureVoltage):
        _status = self.dll.rsscope_ConfigureProbeMeter(
            ViSession(instrSession),
            ViInt32(channel),
            ViBoolean(probeMeter),
            ViBoolean(visibility),
            ViInt32(measureVoltage),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryProbeMeterResults(self, instrSession, channel, resultType):
        result = ViReal64()
        _status = self.dll.rsscope_QueryProbeMeterResults(
            ViSession(instrSession), ViInt32(channel), ViInt32(resultType), byref(result)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(result.value)

    def ConfigureTriggerInputProbe(self, instrSession, channel, channelVisible, offset):
        _status = self.dll.rsscope_ConfigureTriggerInputProbe(
            ViSession(instrSession),
            ViInt32(channel),
            ViBoolean(channelVisible),
            ViReal64(offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryTriggerInputProbeState(self, instrSession):
        state = ViInt32()
        _status = self.dll.rsscope_QueryTriggerInputProbeState(ViSession(instrSession), byref(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(state.value)

    def QueryTriggerInputProbeCharacteristics(self, instrSession, bufferSize):
        type = ARRAY_ViChar(bufferSize)
        name = ARRAY_ViChar(bufferSize)
        inputImpedance = ViReal64()
        inputCapacitance = ViReal64()
        attenuation = ViReal64()
        bandwidth = ViReal64()
        _status = self.dll.rsscope_QueryTriggerInputProbeCharacteristics(
            ViSession(instrSession),
            ViInt32(bufferSize),
            type,
            name,
            byref(inputImpedance),
            byref(inputCapacitance),
            byref(attenuation),
            byref(bandwidth),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        type = decode(type)
        name = decode(name)
        inputImpedance = float(inputImpedance.value)
        inputCapacitance = float(inputCapacitance.value)
        attenuation = float(attenuation.value)
        bandwidth = float(bandwidth.value)
        return type, name, inputImpedance, inputCapacitance, attenuation, bandwidth

    def ConfigureTriggerInputProbeMicroButtonAction(self, instrSession, microButtonAction):
        _status = self.dll.rsscope_ConfigureTriggerInputProbeMicroButtonAction(
            ViSession(instrSession), ViInt32(microButtonAction)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerInputProbeAutoZero(self, instrSession):
        _status = self.dll.rsscope_TriggerInputProbeAutoZero(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerInputProbeCMOffset(self, instrSession, CMOffset):
        _status = self.dll.rsscope_ConfigureTriggerInputProbeCMOffset(ViSession(instrSession), ViReal64(CMOffset))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerInputProbeAttenuatorRTZA15(self, instrSession, attenuatorRTZA15):
        _status = self.dll.rsscope_ConfigureTriggerInputProbeAttenuatorRTZA15(
            ViSession(instrSession), ViBoolean(attenuatorRTZA15)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerInputProbeSetOffsetToMean(self, instrSession):
        _status = self.dll.rsscope_TriggerInputProbeSetOffsetToMean(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryTriggerInputProbeAttributes(self, instrSession, bufferSize):
        softwareVersion = ARRAY_ViChar(bufferSize)
        productionDate = ARRAY_ViChar(bufferSize)
        partNumber = ARRAY_ViChar(bufferSize)
        serialNumber = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryTriggerInputProbeAttributes(
            ViSession(instrSession),
            ViInt32(bufferSize),
            softwareVersion,
            productionDate,
            partNumber,
            serialNumber,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        softwareVersion = decode(softwareVersion)
        productionDate = decode(productionDate)
        partNumber = decode(partNumber)
        serialNumber = decode(serialNumber)
        return softwareVersion, productionDate, partNumber, serialNumber

    def ConfigureTriggerInputProbeFirmwarePath(self, instrSession, firmwarePath):
        _status = self.dll.rsscope_ConfigureTriggerInputProbeFirmwarePath(
            ViSession(instrSession), ViString(firmwarePath)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def UpdateTriggerInputProbeFirmware(self, instrSession):
        _status = self.dll.rsscope_UpdateTriggerInputProbeFirmware(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryTriggerInputProbeFirmwareUpdateStatus(self, instrSession):
        firmwareUpdateStatus = ViInt32()
        _status = self.dll.rsscope_QueryTriggerInputProbeFirmwareUpdateStatus(
            ViSession(instrSession), byref(firmwareUpdateStatus)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(firmwareUpdateStatus.value)

    def TriggerInputProbeSelftest(self, instrSession):
        _status = self.dll.rsscope_TriggerInputProbeSelftest(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryTriggerInputProbeSelftestResult(self, instrSession, bufferSize):
        selftestResult = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryTriggerInputProbeSelftestResult(
            ViSession(instrSession), ViInt32(bufferSize), selftestResult
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(selftestResult)

    def QueryTriggerInputProbeSelftestStatus(self, instrSession):
        selftestStatus = ViInt32()
        _status = self.dll.rsscope_QueryTriggerInputProbeSelftestStatus(ViSession(instrSession), byref(selftestStatus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(selftestStatus.value)

    def ConfigureTriggerInputProbeDetection(self, instrSession, mode):
        _status = self.dll.rsscope_ConfigureTriggerInputProbeDetection(ViSession(instrSession), ViInt32(mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerInputProbeAttenuation(self, instrSession, verticalUnit, attenuation):
        _status = self.dll.rsscope_ConfigureTriggerInputProbeAttenuation(
            ViSession(instrSession), ViInt32(verticalUnit), ViReal64(attenuation)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerInputProbeGain(self, instrSession, gain):
        _status = self.dll.rsscope_ConfigureTriggerInputProbeGain(ViSession(instrSession), ViReal64(gain))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryDetectedTriggerInputProbeGain(self, instrSession):
        gain = ViReal64()
        _status = self.dll.rsscope_QueryDetectedTriggerInputProbeGain(ViSession(instrSession), byref(gain))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(gain.value)

    def ConfigureCurrentTriggerInputProbePredefined(self, instrSession, predefinedProbe):
        _status = self.dll.rsscope_ConfigureCurrentTriggerInputProbePredefined(
            ViSession(instrSession), ViInt32(predefinedProbe)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerInputProbeACCoupling(self, instrSession, ACCoupling):
        _status = self.dll.rsscope_ConfigureTriggerInputProbeACCoupling(ViSession(instrSession), ViBoolean(ACCoupling))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerInputProbeDegauss(self, instrSession):
        _status = self.dll.rsscope_TriggerInputProbeDegauss(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerInputProbeMode(self, instrSession, probeMode):
        _status = self.dll.rsscope_ConfigureTriggerInputProbeMode(ViSession(instrSession), ViInt32(probeMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerInputProbeRTZHD(self, instrSession, bandwidthLimit, overrangeBuzzer):
        _status = self.dll.rsscope_ConfigureTriggerInputProbeRTZHD(
            ViSession(instrSession), ViBoolean(bandwidthLimit), ViBoolean(overrangeBuzzer)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerInputProbeMeter(self, instrSession, probeMeter, visibility, measureVoltage):
        _status = self.dll.rsscope_ConfigureTriggerInputProbeMeter(
            ViSession(instrSession),
            ViBoolean(probeMeter),
            ViBoolean(visibility),
            ViInt32(measureVoltage),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryTriggerInputProbeMeterResults(self, instrSession, resultType):
        result = ViReal64()
        _status = self.dll.rsscope_QueryTriggerInputProbeMeterResults(
            ViSession(instrSession), ViInt32(resultType), byref(result)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(result.value)

    def ConfigureProbeTerminationVoltageMode(self, instrSession, channel, mode):
        _status = self.dll.rsscope_ConfigureProbeTerminationVoltageMode(
            ViSession(instrSession), ViInt32(channel), ViInt32(mode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeTerminationVoltage(self, instrSession, channel, state, adjustment):
        _status = self.dll.rsscope_ConfigureProbeTerminationVoltage(
            ViSession(instrSession),
            ViInt32(channel),
            ViBoolean(state),
            ViReal64(adjustment),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryProbeTerminationVoltageMeasure(self, instrSession, channel):
        measurement = ViReal64()
        _status = self.dll.rsscope_QueryProbeTerminationVoltageMeasure(
            ViSession(instrSession), ViInt32(channel), byref(measurement)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def ConfigureZVCProbe(self, instrSession, bandwidth, decimationMode):
        _status = self.dll.rsscope_ConfigureZVCProbe(
            ViSession(instrSession), ViReal64(bandwidth), ViInt32(decimationMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryZVCProbeInformations(self, instrSession, multiChannel, bufferSize):
        probeName = ARRAY_ViChar(bufferSize)
        partNumber = ARRAY_ViChar(bufferSize)
        serialNumber = ARRAY_ViChar(bufferSize)
        firmware = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryZVCProbeInformations(
            ViSession(instrSession),
            ViInt32(multiChannel),
            ViInt32(bufferSize),
            probeName,
            partNumber,
            serialNumber,
            firmware,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        probeName = decode(probeName)
        partNumber = decode(partNumber)
        serialNumber = decode(serialNumber)
        firmware = decode(firmware)
        return probeName, partNumber, serialNumber, firmware

    def ConfigureZVCEnabled(self, instrSession, multiChannel, probe, probeParameter, enabled):
        _status = self.dll.rsscope_ConfigureZVCEnabled(
            ViSession(instrSession),
            ViInt32(multiChannel),
            ViInt32(probe),
            ViInt32(probeParameter),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryZVCBandwidth(self, instrSession, multiChannel, probe, probeParameter):
        bandwidth = ViReal64()
        _status = self.dll.rsscope_QueryZVCBandwidth(
            ViSession(instrSession),
            ViInt32(multiChannel),
            ViInt32(probe),
            ViInt32(probeParameter),
            byref(bandwidth),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(bandwidth.value)

    def ConfigureZVCResolutionCoupled(self, instrSession, coupled):
        _status = self.dll.rsscope_ConfigureZVCResolutionCoupled(ViSession(instrSession), ViBoolean(coupled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureZVCImpedance(self, instrSession, multiChannel, probe, probeParameter, impedance):
        _status = self.dll.rsscope_ConfigureZVCImpedance(
            ViSession(instrSession),
            ViInt32(multiChannel),
            ViInt32(probe),
            ViInt32(probeParameter),
            ViInt32(impedance),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureZVCOffsets(self, instrSession, multiChannel, probe, probeParameter, offset, deskew):
        _status = self.dll.rsscope_ConfigureZVCOffsets(
            ViSession(instrSession),
            ViInt32(multiChannel),
            ViInt32(probe),
            ViInt32(probeParameter),
            ViReal64(offset),
            ViReal64(deskew),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureZVCVertical(self, instrSession, multiChannel, probe, probeParameter, position, scale):
        _status = self.dll.rsscope_ConfigureZVCVertical(
            ViSession(instrSession),
            ViInt32(multiChannel),
            ViInt32(probe),
            ViInt32(probeParameter),
            ViReal64(position),
            ViReal64(scale),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureZVCResetOverload(self, instrSession, multiChannel, probe, probeParameter, resetOverload):
        _status = self.dll.rsscope_ConfigureZVCResetOverload(
            ViSession(instrSession),
            ViInt32(multiChannel),
            ViInt32(probe),
            ViInt32(probeParameter),
            ViInt32(resetOverload),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryZVCOverload(self, instrSession, multiChannel, probe, probeParameter):
        overloadDetected = ViBoolean()
        _status = self.dll.rsscope_QueryZVCOverload(
            ViSession(instrSession),
            ViInt32(multiChannel),
            ViInt32(probe),
            ViInt32(probeParameter),
            byref(overloadDetected),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(overloadDetected.value)

    def ConfigureZVCShuntMode(self, instrSession, multiChannel, currentChannel, mode):
        _status = self.dll.rsscope_ConfigureZVCShuntMode(
            ViSession(instrSession),
            ViInt32(multiChannel),
            ViInt32(currentChannel),
            ViInt32(mode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureZVCShuntExternal(self, instrSession, multiChannel, currentChannel, maximumVoltage, externalValue):
        _status = self.dll.rsscope_ConfigureZVCShuntExternal(
            ViSession(instrSession),
            ViInt32(multiChannel),
            ViInt32(currentChannel),
            ViInt32(maximumVoltage),
            ViReal64(externalValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureZVCShuntInternalMaximum(self, instrSession, multiChannel, currentChannel, maximumCurrent):
        _status = self.dll.rsscope_ConfigureZVCShuntInternalMaximum(
            ViSession(instrSession),
            ViInt32(multiChannel),
            ViInt32(currentChannel),
            ViInt32(maximumCurrent),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureZVCShuntMaximumCurrent(self, instrSession, multiChannel, currentChannel):
        maximumCurrent = ViReal64()
        _status = self.dll.rsscope_ConfigureZVCShuntMaximumCurrent(
            ViSession(instrSession),
            ViInt32(multiChannel),
            ViInt32(currentChannel),
            byref(maximumCurrent),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(maximumCurrent.value)

    def FetchZVCWaveformHeader(self, instrSession, waveformSource):
        xStart = ViReal64()
        xStop = ViReal64()
        recordLength = ViInt32()
        valuesPerSample = ViInt32()
        _status = self.dll.rsscope_FetchZVCWaveformHeader(
            ViSession(instrSession),
            ViInt32(waveformSource),
            byref(xStart),
            byref(xStop),
            byref(recordLength),
            byref(valuesPerSample),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        xStart = float(xStart.value)
        xStop = float(xStop.value)
        recordLength = int(recordLength.value)
        valuesPerSample = int(valuesPerSample.value)
        return xStart, xStop, recordLength, valuesPerSample

    def FetchZVCWaveform(self, instrSession, waveformSource, bufferSize):
        waveformArray = ARRAY_ViReal64(bufferSize)
        actualPoints = ViInt32()
        _status = self.dll.rsscope_FetchZVCWaveform(
            ViSession(instrSession),
            ViInt32(waveformSource),
            ViInt32(bufferSize),
            waveformArray,
            byref(actualPoints),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        return waveformArray, actualPoints

    def ConfigureCalibrationSourceState(self, instrSession, calibrationSourceState):
        _status = self.dll.rsscope_ConfigureCalibrationSourceState(
            ViSession(instrSession), ViBoolean(calibrationSourceState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCalibration(self, instrSession, sourceFrequency, operatingMode, destination):
        _status = self.dll.rsscope_ConfigureCalibration(
            ViSession(instrSession),
            ViInt32(sourceFrequency),
            ViInt32(operatingMode),
            ViInt32(destination),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryCalibrationResult(self, instrSession):
        calibrationResult = ViInt32()
        _status = self.dll.rsscope_QueryCalibrationResult(ViSession(instrSession), byref(calibrationResult))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(calibrationResult.value)

    def ConfigureReferenceOscillator(self, instrSession, useExternalReference, externalReference):
        _status = self.dll.rsscope_ConfigureReferenceOscillator(
            ViSession(instrSession),
            ViBoolean(useExternalReference),
            ViReal64(externalReference),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSkew(self, instrSession, channel, useSkewOffset, skewOffset):
        _status = self.dll.rsscope_ConfigureSkew(
            ViSession(instrSession),
            ViInt32(channel),
            ViBoolean(useSkewOffset),
            ViReal64(skewOffset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeSkewOffset(self, instrSession, probeSkewOffset):
        _status = self.dll.rsscope_ConfigureProbeSkewOffset(ViSession(instrSession), ViBoolean(probeSkewOffset))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSkewExtendedRange(self, instrSession, channel, extendedRange):
        _status = self.dll.rsscope_ConfigureSkewExtendedRange(
            ViSession(instrSession), ViInt32(channel), ViBoolean(extendedRange)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHighDefinition(self, instrSession, state, bandwidth):
        _status = self.dll.rsscope_ConfigureHighDefinition(
            ViSession(instrSession), ViBoolean(state), ViReal64(bandwidth)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryHighDefinitionResolution(self, instrSession):
        resolution = ViReal64()
        _status = self.dll.rsscope_QueryHighDefinitionResolution(ViSession(instrSession), byref(resolution))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(resolution.value)

    def ConfigureTrigger(self, instrSession, trigger, triggerType):
        _status = self.dll.rsscope_ConfigureTrigger(ViSession(instrSession), ViInt32(trigger), ViInt32(triggerType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialBusSource(self, instrSession, trigger, serialBusSource):
        _status = self.dll.rsscope_ConfigureSerialBusSource(
            ViSession(instrSession), ViInt32(trigger), ViInt32(serialBusSource)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerCoupling(self, instrSession, trigger, eventCoupling, sourceCoupling):
        _status = self.dll.rsscope_ConfigureTriggerCoupling(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(eventCoupling),
            ViBoolean(sourceCoupling),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerModifier(self, instrSession, trigger, triggerModifier):
        _status = self.dll.rsscope_ConfigureTriggerModifier(
            ViSession(instrSession), ViInt32(trigger), ViInt32(triggerModifier)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerLevelAutoFind(self, instrSession, trigger):
        _status = self.dll.rsscope_TriggerLevelAutoFind(ViSession(instrSession), ViInt32(trigger))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerChannelLevel(self, instrSession, trigger, triggerSource, triggerLevel):
        _status = self.dll.rsscope_ConfigureTriggerChannelLevel(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(triggerSource),
            ViReal64(triggerLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEdgeTriggerSource(self, instrSession, trigger, triggerSource, triggerLevel, triggerSlope):
        _status = self.dll.rsscope_ConfigureEdgeTriggerSource(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(triggerSource),
            ViReal64(triggerLevel),
            ViInt32(triggerSlope),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEdgeExternalTrigger(self, instrSession, coupling, filter, cutOffFrequency):
        _status = self.dll.rsscope_ConfigureEdgeExternalTrigger(
            ViSession(instrSession),
            ViInt32(coupling),
            ViInt32(filter),
            ViInt32(cutOffFrequency),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEdgeExternalTriggerGround(self, instrSession, connectToGround):
        _status = self.dll.rsscope_ConfigureEdgeExternalTriggerGround(
            ViSession(instrSession), ViBoolean(connectToGround)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEdgeExternalTriggerNoiseReject(self, instrSession, noiseReject):
        _status = self.dll.rsscope_ConfigureEdgeExternalTriggerNoiseReject(
            ViSession(instrSession), ViBoolean(noiseReject)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRuntTriggerSource(
        self,
        instrSession,
        trigger,
        triggerSource,
        runtLowThreshold,
        runtHighThreshold,
        runtPolarity,
    ):
        _status = self.dll.rsscope_ConfigureRuntTriggerSource(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(triggerSource),
            ViReal64(runtLowThreshold),
            ViReal64(runtHighThreshold),
            ViInt32(runtPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRuntTriggerRange(self, instrSession, trigger, runtWidth, runtDelta, runtCondition):
        _status = self.dll.rsscope_ConfigureRuntTriggerRange(
            ViSession(instrSession),
            ViInt32(trigger),
            ViReal64(runtWidth),
            ViReal64(runtDelta),
            ViInt32(runtCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGlitchTriggerSource(
        self,
        instrSession,
        trigger,
        triggerSource,
        triggerLevel,
        glitchWidth,
        glitchPolarity,
        glitchCondition,
    ):
        _status = self.dll.rsscope_ConfigureGlitchTriggerSource(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(triggerSource),
            ViReal64(triggerLevel),
            ViReal64(glitchWidth),
            ViInt32(glitchPolarity),
            ViInt32(glitchCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWidthTriggerSource(
        self,
        instrSession,
        trigger,
        triggerSource,
        triggerLevel,
        width,
        widthDelta,
        widthPolarity,
        widthCondition,
    ):
        _status = self.dll.rsscope_ConfigureWidthTriggerSource(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(triggerSource),
            ViReal64(triggerLevel),
            ViReal64(width),
            ViReal64(widthDelta),
            ViInt32(widthPolarity),
            ViInt32(widthCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWindowTriggerSource(
        self,
        instrSession,
        trigger,
        triggerSource,
        windowLowerLimit,
        windowUpperLimit,
        windowWidth,
        windowDelta,
        windowCondition,
    ):
        _status = self.dll.rsscope_ConfigureWindowTriggerSource(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(triggerSource),
            ViReal64(windowLowerLimit),
            ViReal64(windowUpperLimit),
            ViReal64(windowWidth),
            ViReal64(windowDelta),
            ViInt32(windowCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWindowTriggerTimeCondition(self, instrSession, trigger, timeCondition):
        _status = self.dll.rsscope_ConfigureWindowTriggerTimeCondition(
            ViSession(instrSession), ViInt32(trigger), ViInt32(timeCondition)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTimeoutTriggerSource(
        self,
        instrSession,
        trigger,
        triggerSource,
        triggerLevel,
        timeoutValue,
        timeoutCondition,
    ):
        _status = self.dll.rsscope_ConfigureTimeoutTriggerSource(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(triggerSource),
            ViReal64(triggerLevel),
            ViReal64(timeoutValue),
            ViInt32(timeoutCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureIntervalTriggerSource(
        self,
        instrSession,
        trigger,
        triggerSource,
        triggerLevel,
        intervalWidth,
        intervalDelta,
        intervalPolarity,
        intervalCondition,
    ):
        _status = self.dll.rsscope_ConfigureIntervalTriggerSource(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(triggerSource),
            ViReal64(triggerLevel),
            ViReal64(intervalWidth),
            ViReal64(intervalDelta),
            ViInt32(intervalPolarity),
            ViInt32(intervalCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSlewRateTriggerSource(
        self,
        instrSession,
        trigger,
        triggerSource,
        slewRateLowerLimit,
        slewRateUpperLimit,
        slewRatePolarity,
        slewRateCondition,
    ):
        _status = self.dll.rsscope_ConfigureSlewRateTriggerSource(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(triggerSource),
            ViReal64(slewRateLowerLimit),
            ViReal64(slewRateUpperLimit),
            ViInt32(slewRatePolarity),
            ViInt32(slewRateCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSlewRateTriggerRange(self, instrSession, trigger, slewRate, slewRateDelta):
        _status = self.dll.rsscope_ConfigureSlewRateTriggerRange(
            ViSession(instrSession),
            ViInt32(trigger),
            ViReal64(slewRate),
            ViReal64(slewRateDelta),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureData2ClockTriggerSource(
        self,
        instrSession,
        triggerSource,
        dataLevel,
        clockSource,
        clockLevel,
        holdTime,
        setupTime,
        data2ClockPolarity,
    ):
        _status = self.dll.rsscope_ConfigureData2ClockTriggerSource(
            ViSession(instrSession),
            ViInt32(triggerSource),
            ViReal64(dataLevel),
            ViInt32(clockSource),
            ViReal64(clockLevel),
            ViReal64(holdTime),
            ViReal64(setupTime),
            ViInt32(data2ClockPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternTriggerSource(
        self,
        instrSession,
        patternMode,
        timeoutCondition,
        timeout,
        patternWidth,
        patternDelta,
        patternCondition,
    ):
        _status = self.dll.rsscope_ConfigurePatternTriggerSource(
            ViSession(instrSession),
            ViInt32(patternMode),
            ViInt32(timeoutCondition),
            ViReal64(timeout),
            ViReal64(patternWidth),
            ViReal64(patternDelta),
            ViInt32(patternCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialPatternTriggerSource(
        self,
        instrSession,
        triggerSource,
        dataLevel,
        clockSource,
        clockLevel,
        pattern,
        patternPolarity,
    ):
        _status = self.dll.rsscope_ConfigureSerialPatternTriggerSource(
            ViSession(instrSession),
            ViInt32(triggerSource),
            ViReal64(dataLevel),
            ViInt32(clockSource),
            ViReal64(clockLevel),
            ViString(pattern),
            ViInt32(patternPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialPatternTriggerType(self, instrSession, patternType):
        _status = self.dll.rsscope_ConfigureSerialPatternTriggerType(ViSession(instrSession), ViInt32(patternType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialPatternSingleBitPattern(self, instrSession, pattern, patternLength):
        _status = self.dll.rsscope_ConfigureSerialPatternSingleBitPattern(
            ViSession(instrSession), ViString(pattern), ViInt32(patternLength)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialPatternDualBitPattern(self, instrSession, patternA, patternLengthA, patternB, patternLengthB):
        _status = self.dll.rsscope_ConfigureSerialPatternDualBitPattern(
            ViSession(instrSession),
            ViString(patternA),
            ViInt32(patternLengthA),
            ViString(patternB),
            ViInt32(patternLengthB),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialPatternComplexWordAlignment(
        self,
        instrSession,
        alignmentType,
        alignmentLength,
        alignmentPattern,
        alignmentTimeout,
        idleRange,
        patternLogic,
        bitOrder,
    ):
        _status = self.dll.rsscope_ConfigureSerialPatternComplexWordAlignment(
            ViSession(instrSession),
            ViInt32(alignmentType),
            ViInt32(alignmentLength),
            ViString(alignmentPattern),
            ViReal64(alignmentTimeout),
            ViInt32(idleRange),
            ViInt32(patternLogic),
            ViInt32(bitOrder),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialPatternComplexWordCondition(
        self,
        instrSession,
        complexCondition,
        conditionEnabled,
        bitOffset,
        patternLength,
        searchRange,
        condition,
        pattern,
        patternRangeEnd,
    ):
        _status = self.dll.rsscope_ConfigureSerialPatternComplexWordCondition(
            ViSession(instrSession),
            ViInt32(complexCondition),
            ViBoolean(conditionEnabled),
            ViInt32(bitOffset),
            ViInt32(patternLength),
            ViInt32(searchRange),
            ViInt32(condition),
            ViString(pattern),
            ViString(patternRangeEnd),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialPatternPRBSError(self, instrSession, bitErrorRate, nominalBitRate, sequence):
        _status = self.dll.rsscope_ConfigureSerialPatternPRBSError(
            ViSession(instrSession),
            ViReal64(bitErrorRate),
            ViReal64(nominalBitRate),
            ViInt32(sequence),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialPatternEbTb(
        self,
        instrSession,
        alignmentSymbol,
        scrambling,
        disparityErrorEnabled,
        symbolErrorEnabled,
    ):
        _status = self.dll.rsscope_ConfigureSerialPatternEbTb(
            ViSession(instrSession),
            ViInt32(alignmentSymbol),
            ViInt32(scrambling),
            ViBoolean(disparityErrorEnabled),
            ViBoolean(symbolErrorEnabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySerialPatternEbTbRowCount(self, instrSession):
        rowCount = ViInt32()
        _status = self.dll.rsscope_QuerySerialPatternEbTbRowCount(ViSession(instrSession), byref(rowCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(rowCount.value)

    def SerialPatternEbTbAppendSymbol(self, instrSession, kOrDSymbol, ebBit):
        rowCount = ViInt32()
        _status = self.dll.rsscope_SerialPatternEbTbAppendSymbol(
            ViSession(instrSession),
            ViString(kOrDSymbol),
            ViString(ebBit),
            byref(rowCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(rowCount.value)

    def SerialPatternEbTbModifySymbol(self, instrSession, tableRow, kOrDSymbol, ebBit):
        _status = self.dll.rsscope_SerialPatternEbTbModifySymbol(
            ViSession(instrSession),
            ViInt32(tableRow),
            ViString(kOrDSymbol),
            ViString(ebBit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySerialPatternEbTbRunningDisparity(self, instrSession, tableRow):
        tbRDPlus = ARRAY_ViChar(1024)
        tbRDMinus = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_QuerySerialPatternEbTbRunningDisparity(
            ViSession(instrSession), ViInt32(tableRow), tbRDPlus, tbRDMinus
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        tbRDPlus = decode(tbRDPlus)
        tbRDMinus = decode(tbRDMinus)
        return tbRDPlus, tbRDMinus

    def SerialPatternEbTbClearTable(self, instrSession):
        _status = self.dll.rsscope_SerialPatternEbTbClearTable(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialPatternEbTbFrameID(self, instrSession, ebTbFrameID):
        _status = self.dll.rsscope_ConfigureSerialPatternEbTbFrameID(ViSession(instrSession), ViInt32(ebTbFrameID))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialPatternI32B(self, instrSession, alignmentPattern, skipStart, skipEnd, skipBytes, type, pattern):
        _status = self.dll.rsscope_ConfigureSerialPatternI32B(
            ViSession(instrSession),
            ViString(alignmentPattern),
            ViString(skipStart),
            ViString(skipEnd),
            ViInt32(skipBytes),
            ViInt32(type),
            ViString(pattern),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialBusTriggerSource(self, instrSession, serialBus, protocol):
        _status = self.dll.rsscope_ConfigureSerialBusTriggerSource(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(protocol)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLineTriggerSlope(self, instrSession, trigger, triggerSlope):
        _status = self.dll.rsscope_ConfigureLineTriggerSlope(
            ViSession(instrSession), ViInt32(trigger), ViInt32(triggerSlope)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNFCTrigger(self, instrSession, triggerSource, technology, bitRate, event, triggerLevel):
        _status = self.dll.rsscope_ConfigureNFCTrigger(
            ViSession(instrSession),
            ViInt32(triggerSource),
            ViInt32(technology),
            ViInt32(bitRate),
            ViInt32(event),
            ViReal64(triggerLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTVTrigger(
        self,
        instrSession,
        triggerSource,
        standard,
        mode,
        lineNumber,
        lineField,
        triggerLevel,
        signalPolarity,
    ):
        _status = self.dll.rsscope_ConfigureTVTrigger(
            ViSession(instrSession),
            ViInt32(triggerSource),
            ViInt32(standard),
            ViInt32(mode),
            ViInt32(lineNumber),
            ViInt32(lineField),
            ViReal64(triggerLevel),
            ViInt32(signalPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTVTriggerCustomSettings(self, instrSession, pulseType, linePeriod, pulseWidth, scanMode):
        _status = self.dll.rsscope_ConfigureTVTriggerCustomSettings(
            ViSession(instrSession),
            ViInt32(pulseType),
            ViReal64(linePeriod),
            ViReal64(pulseWidth),
            ViInt32(scanMode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNoiseReject(self, instrSession, trigger, triggerSource, hysteresisMode, absoluteHysteresis):
        _status = self.dll.rsscope_ConfigureNoiseReject(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(triggerSource),
            ViInt32(hysteresisMode),
            ViReal64(absoluteHysteresis),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNoiseRejectHysteresisScale(
        self, instrSession, triggerSource, mode, absoluteHysteresis, relativeHysteresis
    ):
        _status = self.dll.rsscope_ConfigureNoiseRejectHysteresisScale(
            ViSession(instrSession),
            ViInt32(triggerSource),
            ViInt32(mode),
            ViReal64(absoluteHysteresis),
            ViReal64(relativeHysteresis),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNoiseRejectHysteresisRangeInDivisions(self, instrSession, trigger, triggerSource, rangeInDivisions):
        _status = self.dll.rsscope_ConfigureNoiseRejectHysteresisRangeInDivisions(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(triggerSource),
            ViReal64(rangeInDivisions),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerLinesDisplay(self, instrSession, showTriggerLinesPermanently):
        _status = self.dll.rsscope_ConfigureTriggerLinesDisplay(
            ViSession(instrSession), ViBoolean(showTriggerLinesPermanently)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerOutSignal(self, instrSession, enable, polarity, pulseLength):
        _status = self.dll.rsscope_ConfigureTriggerOutSignal(
            ViSession(instrSession),
            ViBoolean(enable),
            ViInt32(polarity),
            ViReal64(pulseLength),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryTriggerOutDelay(self, instrSession):
        delay = ViReal64()
        _status = self.dll.rsscope_QueryTriggerOutDelay(ViSession(instrSession), byref(delay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(delay.value)

    def ConfigureEventTrigger(self, instrSession, beep, print, saveWaveform):
        _status = self.dll.rsscope_ConfigureEventTrigger(
            ViSession(instrSession), ViInt32(beep), ViInt32(print), ViInt32(saveWaveform)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEventTriggerRunExternalApplication(self, instrSession, runExternalApplication):
        _status = self.dll.rsscope_ConfigureEventTriggerRunExternalApplication(
            ViSession(instrSession), ViInt32(runExternalApplication)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureZoneLogicalExpression(self, instrSession, expression):
        _status = self.dll.rsscope_ConfigureZoneLogicalExpression(ViSession(instrSession), ViString(expression))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureZoneTriggerInHistoryReplayState(self, instrSession, state):
        _status = self.dll.rsscope_ConfigureZoneTriggerInHistoryReplayState(ViSession(instrSession), ViBoolean(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerQualification(
        self,
        instrSession,
        triggerType,
        trigger,
        qualificationEnabled,
        channel,
        channelEnabled,
        channelLogic,
    ):
        _status = self.dll.rsscope_ConfigureTriggerQualification(
            ViSession(instrSession),
            ViInt32(triggerType),
            ViInt32(trigger),
            ViBoolean(qualificationEnabled),
            ViInt32(channel),
            ViBoolean(channelEnabled),
            ViInt32(channelLogic),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerQualificationMultichannelLogic(
        self,
        instrSession,
        trigger,
        triggerType,
        qualificationEnabled,
        channelCombination,
        multichannelLogic,
    ):
        _status = self.dll.rsscope_ConfigureTriggerQualificationMultichannelLogic(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(triggerType),
            ViBoolean(qualificationEnabled),
            ViInt32(channelCombination),
            ViInt32(multichannelLogic),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerSequenceMode(self, instrSession, sequenceMode):
        _status = self.dll.rsscope_ConfigureTriggerSequenceMode(ViSession(instrSession), ViInt32(sequenceMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAOnlyTriggerSequence(
        self,
        instrSession,
        holdoffMode,
        holdoffTime,
        holdoffEvents,
        randomMinTime,
        randomMaxTime,
    ):
        _status = self.dll.rsscope_ConfigureAOnlyTriggerSequence(
            ViSession(instrSession),
            ViInt32(holdoffMode),
            ViReal64(holdoffTime),
            ViInt32(holdoffEvents),
            ViReal64(randomMinTime),
            ViReal64(randomMaxTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryAOnlyTriggerSequenceAutoTimeResult(self, instrSession):
        autoTime = ViReal64()
        _status = self.dll.rsscope_QueryAOnlyTriggerSequenceAutoTimeResult(ViSession(instrSession), byref(autoTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(autoTime.value)

    def TriggerSequenceHoldoffAutoScale(self, instrSession, autoScale):
        _status = self.dll.rsscope_TriggerSequenceHoldoffAutoScale(ViSession(instrSession), ViReal64(autoScale))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureABRTriggerSequence(
        self,
        instrSession,
        eventCoupling,
        sequenceDelay,
        bEventsCount,
        resetByTimeoutEnabled,
        resetTimeout,
        resetByEventEnabled,
    ):
        _status = self.dll.rsscope_ConfigureABRTriggerSequence(
            ViSession(instrSession),
            ViBoolean(eventCoupling),
            ViReal64(sequenceDelay),
            ViInt32(bEventsCount),
            ViBoolean(resetByTimeoutEnabled),
            ViReal64(resetTimeout),
            ViBoolean(resetByEventEnabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDisplayUpdate(self, instrSession, displayInRemote):
        _status = self.dll.rsscope_ConfigureDisplayUpdate(ViSession(instrSession), ViBoolean(displayInRemote))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDisplayMessage(self, instrSession, state, text):
        _status = self.dll.rsscope_ConfigureDisplayMessage(ViSession(instrSession), ViBoolean(state), ViString(text))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDisplayGateTransparency(self, instrSession, transparency):
        _status = self.dll.rsscope_ConfigureDisplayGateTransparency(ViSession(instrSession), ViInt32(transparency))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDisplayClearResults(self, instrSession):
        _status = self.dll.rsscope_ConfigureDisplayClearResults(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePersistence(self, instrSession, enable, infinite, time):
        _status = self.dll.rsscope_ConfigurePersistence(
            ViSession(instrSession),
            ViBoolean(enable),
            ViBoolean(infinite),
            ViReal64(time),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetPersistence(self, instrSession):
        _status = self.dll.rsscope_ResetPersistence(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSignalStyle(self, instrSession, intensity, style):
        _status = self.dll.rsscope_ConfigureSignalStyle(ViSession(instrSession), ViInt32(intensity), ViInt32(style))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureColorTableAssignment(self, instrSession, source, useColorTable, tableName):
        _status = self.dll.rsscope_ConfigureColorTableAssignment(
            ViSession(instrSession),
            ViInt32(source),
            ViBoolean(useColorTable),
            ViString(tableName),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AddColorTable(self, instrSession, tableName):
        _status = self.dll.rsscope_AddColorTable(ViSession(instrSession), ViString(tableName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RemoveColorTable(self, instrSession, tableName):
        _status = self.dll.rsscope_RemoveColorTable(ViSession(instrSession), ViString(tableName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ColorTableAppendRow(self, instrSession, tableName):
        _status = self.dll.rsscope_ColorTableAppendRow(ViSession(instrSession), ViString(tableName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ColorTableInsertRow(self, instrSession, tableName, index):
        _status = self.dll.rsscope_ColorTableInsertRow(ViSession(instrSession), ViString(tableName), ViInt32(index))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ColorTableDefineRow(self, instrSession, tableName, index, cumulativePercentage, color):
        _status = self.dll.rsscope_ColorTableDefineRow(
            ViSession(instrSession),
            ViString(tableName),
            ViInt32(index),
            ViReal64(cumulativePercentage),
            ViInt32(color),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ColorTableRemoveRow(self, instrSession, tableName, index):
        _status = self.dll.rsscope_ColorTableRemoveRow(ViSession(instrSession), ViString(tableName), ViInt32(index))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryColorTableCount(self, instrSession):
        count = ViInt32()
        _status = self.dll.rsscope_QueryColorTableCount(ViSession(instrSession), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryColorTableRowCount(self, instrSession, tableName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryColorTableRowCount(ViSession(instrSession), ViString(tableName), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryColorTableRow(self, instrSession, tableName, index):
        cumulativePercentage = ViReal64()
        color = ViInt32()
        _status = self.dll.rsscope_QueryColorTableRow(
            ViSession(instrSession),
            ViString(tableName),
            ViInt32(index),
            byref(cumulativePercentage),
            byref(color),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        cumulativePercentage = float(cumulativePercentage.value)
        color = int(color.value)
        return cumulativePercentage, color

    def ConfigureMeasurementDiagram(
        self,
        instrSession,
        showGrid,
        showCrosshair,
        showLabels,
        showTabsAlways,
        yGridFixed,
    ):
        _status = self.dll.rsscope_ConfigureMeasurementDiagram(
            ViSession(instrSession),
            ViBoolean(showGrid),
            ViBoolean(showCrosshair),
            ViBoolean(showLabels),
            ViBoolean(showTabsAlways),
            ViBoolean(yGridFixed),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementDiagramFineGridScale(self, instrSession, showFineGridScale):
        _status = self.dll.rsscope_ConfigureMeasurementDiagramFineGridScale(
            ViSession(instrSession), ViBoolean(showFineGridScale)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ShowSignalBar(self, instrSession, enable, position):
        _status = self.dll.rsscope_ShowSignalBar(ViSession(instrSession), ViBoolean(enable), ViInt32(position))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSignalBarAutoHide(self, instrSession, autoHide, hideHead, hideAfter, hidingTransparency):
        _status = self.dll.rsscope_ConfigureSignalBarAutoHide(
            ViSession(instrSession),
            ViBoolean(autoHide),
            ViBoolean(hideHead),
            ViReal64(hideAfter),
            ViReal64(hidingTransparency),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSignalBarColor(self, instrSession, borderColor, fillColor):
        _status = self.dll.rsscope_ConfigureSignalBarColor(
            ViSession(instrSession), ViInt32(borderColor), ViInt32(fillColor)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureResultBoxPosition(self, instrSession, position):
        _status = self.dll.rsscope_ConfigureResultBoxPosition(ViSession(instrSession), ViInt32(position))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AddDiagram(
        self,
        instrSession,
        existingDiagram,
        newDiagramPosition,
        insertBefore,
        source,
        newDiagramName,
    ):
        _status = self.dll.rsscope_AddDiagram(
            ViSession(instrSession),
            ViString(existingDiagram),
            ViInt32(newDiagramPosition),
            ViBoolean(insertBefore),
            ViInt32(source),
            ViString(newDiagramName),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DisplayDiagram(self, instrSession, diagramName):
        _status = self.dll.rsscope_DisplayDiagram(ViSession(instrSession), ViString(diagramName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RemoveDiagram(self, instrSession, diagramName):
        _status = self.dll.rsscope_RemoveDiagram(ViSession(instrSession), ViString(diagramName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RenameDiagram(self, instrSession, diagramName, newName):
        _status = self.dll.rsscope_RenameDiagram(ViSession(instrSession), ViString(diagramName), ViString(newName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ShowWaveformInDiagram(self, instrSession, diagramName, source):
        _status = self.dll.rsscope_ShowWaveformInDiagram(
            ViSession(instrSession), ViString(diagramName), ViInt32(source)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AddWaveformToDiagram(self, instrSession, diagramName, source, assignToXAxis):
        _status = self.dll.rsscope_AddWaveformToDiagram(
            ViSession(instrSession),
            ViString(diagramName),
            ViInt32(source),
            ViBoolean(assignToXAxis),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RemoveWaveformFromDiagram(self, instrSession, source):
        _status = self.dll.rsscope_RemoveWaveformFromDiagram(ViSession(instrSession), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AddLabel(self, instrSession, labelID, source, labelText, positionMode, xPosition, yPosition):
        _status = self.dll.rsscope_AddLabel(
            ViSession(instrSession),
            ViString(labelID),
            ViInt32(source),
            ViString(labelText),
            ViInt32(positionMode),
            ViReal64(xPosition),
            ViReal64(yPosition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RemoveLabel(self, instrSession, labelID, source):
        _status = self.dll.rsscope_RemoveLabel(ViSession(instrSession), ViString(labelID), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def EditLabelText(self, instrSession, labelID, source, labelText):
        _status = self.dll.rsscope_EditLabelText(
            ViSession(instrSession),
            ViString(labelID),
            ViInt32(source),
            ViString(labelText),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryLabelText(self, instrSession, labelID, source, bufferSize):
        labelText = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryLabelText(
            ViSession(instrSession),
            ViString(labelID),
            ViInt32(source),
            ViInt32(bufferSize),
            labelText,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(labelText)

    def ConfigureLabelPositionMode(self, instrSession, source, positionMode):
        _status = self.dll.rsscope_ConfigureLabelPositionMode(
            ViSession(instrSession), ViInt32(source), ViInt32(positionMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLabelAbsolutePosition(self, instrSession, labelID, source, xPosition, yPosition):
        _status = self.dll.rsscope_ConfigureLabelAbsolutePosition(
            ViSession(instrSession),
            ViString(labelID),
            ViInt32(source),
            ViReal64(xPosition),
            ViReal64(yPosition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLabelRelativePosition(self, instrSession, labelID, source, xPosition, yPosition):
        _status = self.dll.rsscope_ConfigureLabelRelativePosition(
            ViSession(instrSession),
            ViString(labelID),
            ViInt32(source),
            ViReal64(xPosition),
            ViReal64(yPosition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AddDiagramZoom(
        self,
        instrSession,
        diagramName,
        newDiagramPosition,
        insertBefore,
        newZoomDiagramName,
        xStart,
        xStop,
        yStart,
        yStop,
    ):
        _status = self.dll.rsscope_AddDiagramZoom(
            ViSession(instrSession),
            ViString(diagramName),
            ViInt32(newDiagramPosition),
            ViBoolean(insertBefore),
            ViString(newZoomDiagramName),
            ViReal64(xStart),
            ViReal64(xStop),
            ViReal64(yStart),
            ViReal64(yStop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AddDiagramZoomCoupled(self, instrSession, diagramName, newZoomDiagramName, xOffset, yOffset):
        _status = self.dll.rsscope_AddDiagramZoomCoupled(
            ViSession(instrSession),
            ViString(diagramName),
            ViString(newZoomDiagramName),
            ViReal64(xOffset),
            ViReal64(yOffset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RemoveDiagramZoom(self, instrSession, diagramName, zoomDiagramName):
        _status = self.dll.rsscope_RemoveDiagramZoom(
            ViSession(instrSession), ViString(diagramName), ViString(zoomDiagramName)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDiagramZoomOverlay(self, instrSession, zoomOverlay):
        _status = self.dll.rsscope_ConfigureDiagramZoomOverlay(ViSession(instrSession), ViBoolean(zoomOverlay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDiagramZoomVerticalStartStop(self, instrSession, diagramName, zoomDiagramName, mode, start, stop):
        _status = self.dll.rsscope_ConfigureDiagramZoomVerticalStartStop(
            ViSession(instrSession),
            ViString(diagramName),
            ViString(zoomDiagramName),
            ViInt32(mode),
            ViReal64(start),
            ViReal64(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDiagramZoomHorizontalStartStop(self, instrSession, diagramName, zoomDiagramName, mode, start, stop):
        _status = self.dll.rsscope_ConfigureDiagramZoomHorizontalStartStop(
            ViSession(instrSession),
            ViString(diagramName),
            ViString(zoomDiagramName),
            ViInt32(mode),
            ViReal64(start),
            ViReal64(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDiagramZoomVerticalPositionRange(
        self, instrSession, diagramName, zoomDiagramName, mode, position, range
    ):
        _status = self.dll.rsscope_ConfigureDiagramZoomVerticalPositionRange(
            ViSession(instrSession),
            ViString(diagramName),
            ViString(zoomDiagramName),
            ViInt32(mode),
            ViReal64(position),
            ViReal64(range),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDiagramZoomHorizontalPositionRange(
        self, instrSession, diagramName, zoomDiagramName, mode, position, range
    ):
        _status = self.dll.rsscope_ConfigureDiagramZoomHorizontalPositionRange(
            ViSession(instrSession),
            ViString(diagramName),
            ViString(zoomDiagramName),
            ViInt32(mode),
            ViReal64(position),
            ViReal64(range),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDiagramZoomPositionCoupling(self, instrSession, diagramName, zoomDiagramName, positionCoupling):
        _status = self.dll.rsscope_ConfigureDiagramZoomPositionCoupling(
            ViSession(instrSession),
            ViString(diagramName),
            ViString(zoomDiagramName),
            ViBoolean(positionCoupling),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureXYDiagram(
        self,
        instrSession,
        XYDiagramNumber,
        XYDiagramState,
        constantXYRatio,
        xSource,
        ySource,
    ):
        _status = self.dll.rsscope_ConfigureXYDiagram(
            ViSession(instrSession),
            ViInt32(XYDiagramNumber),
            ViBoolean(XYDiagramState),
            ViBoolean(constantXYRatio),
            ViInt32(xSource),
            ViInt32(ySource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SwapXYDiagram(self, instrSession, XYDiagramNumber):
        _status = self.dll.rsscope_SwapXYDiagram(ViSession(instrSession), ViInt32(XYDiagramNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistoryState(self, instrSession, channel, waveform, enableHistory):
        _status = self.dll.rsscope_ConfigureHistoryState(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViBoolean(enableHistory),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistoryStartStop(self, instrSession, channel, waveform, start, stop):
        _status = self.dll.rsscope_ConfigureHistoryStartStop(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViInt32(start),
            ViInt32(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistoryAcquisitionView(self, instrSession, channel, waveform, acquisition):
        _status = self.dll.rsscope_ConfigureHistoryAcquisitionView(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViInt32(acquisition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistoryAcquisitionTime(self, instrSession, channel, waveform, timePerAcquisition):
        _status = self.dll.rsscope_ConfigureHistoryAcquisitionTime(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViReal64(timePerAcquisition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistoryAutoRepeat(self, instrSession, channel, waveform, autoRepeat):
        _status = self.dll.rsscope_ConfigureHistoryAutoRepeat(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViBoolean(autoRepeat),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def HistoryPlaybackControl(self, instrSession, channel, waveform):
        _status = self.dll.rsscope_HistoryPlaybackControl(ViSession(instrSession), ViInt32(channel), ViInt32(waveform))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryHistoryTimeStamp(self, instrSession, channel, waveform, mode, bufferSize):
        timeStamp = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryHistoryTimeStamp(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViInt32(mode),
            ViInt32(bufferSize),
            timeStamp,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(timeStamp)

    def QueryHistoryTimeReference(self, instrSession, channel, waveform):
        timeReference = ViReal64()
        _status = self.dll.rsscope_QueryHistoryTimeReference(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            byref(timeReference),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(timeReference.value)

    def QueryHistoryDate(self, instrSession, channel, waveform, bufferSize):
        date = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryHistoryDate(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViInt32(bufferSize),
            date,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(date)

    def QueryHistoryAcquisitionsCount(self, instrSession, reserved):
        count = ViInt32()
        _status = self.dll.rsscope_QueryHistoryAcquisitionsCount(
            ViSession(instrSession), ViInt32(reserved), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def ConfigureMeasurementState(self, instrSession, measurement, measurementState):
        _status = self.dll.rsscope_ConfigureMeasurementState(
            ViSession(instrSession), ViInt32(measurement), ViBoolean(measurementState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementSource(self, instrSession, measurement, signalSource, signalSource2):
        _status = self.dll.rsscope_ConfigureMeasurementSource(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(signalSource),
            ViInt32(signalSource2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasSource(self, instrSession, measurement, signalSource, signalSource2):
        _status = self.dll.rsscope_ConfigureMeasSource(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(signalSource),
            ViInt32(signalSource2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementLimitCheck(self, instrSession, measurement, limitCheck):
        _status = self.dll.rsscope_ConfigureMeasurementLimitCheck(
            ViSession(instrSession), ViInt32(measurement), ViInt32(limitCheck)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMultipleMeasurement(self, instrSession, measurement, multipleMeasurement):
        _status = self.dll.rsscope_ConfigureMultipleMeasurement(
            ViSession(instrSession), ViInt32(measurement), ViBoolean(multipleMeasurement)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMultipleMeasurementNumber(self, instrSession, measurement, measurementCount):
        _status = self.dll.rsscope_ConfigureMultipleMeasurementNumber(
            ViSession(instrSession), ViInt32(measurement), ViInt32(measurementCount)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementCategory(self, instrSession, measurement, category):
        _status = self.dll.rsscope_ConfigureMeasurementCategory(
            ViSession(instrSession), ViInt32(measurement), ViInt32(category)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def EnableAdditionalMeasurements(self, instrSession, measurement):
        _status = self.dll.rsscope_EnableAdditionalMeasurements(ViSession(instrSession), ViInt32(measurement))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DisableAdditionalMeasurements(self, instrSession, measurement):
        _status = self.dll.rsscope_DisableAdditionalMeasurements(ViSession(instrSession), ViInt32(measurement))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearMeasurementStatisticData(self, instrSession, measurement):
        _status = self.dll.rsscope_ClearMeasurementStatisticData(ViSession(instrSession), ViInt32(measurement))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEventActions(self, instrSession, measurement, event, action):
        _status = self.dll.rsscope_ConfigureMeasurementEventActions(
            ViSession(instrSession), ViInt32(measurement), ViInt32(event), ViInt32(action)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementDisplayIntermediateResults(
        self, instrSession, measurement, displayResultLines, displayReferenceLevels
    ):
        _status = self.dll.rsscope_ConfigureMeasurementDisplayIntermediateResults(
            ViSession(instrSession),
            ViInt32(measurement),
            ViBoolean(displayResultLines),
            ViBoolean(displayReferenceLevels),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementDisplayStyle(self, instrSession, measurement, displayStyle):
        _status = self.dll.rsscope_ConfigureMeasurementDisplayStyle(
            ViSession(instrSession), ViInt32(measurement), ViInt32(displayStyle)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementDisplayResultTablePosition(self, instrSession, position):
        _status = self.dll.rsscope_ConfigureMeasurementDisplayResultTablePosition(
            ViSession(instrSession), ViInt32(position)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementDisplayGroupResultDialogs(self, instrSession, groupResultDialogs):
        _status = self.dll.rsscope_ConfigureMeasurementDisplayGroupResultDialogs(
            ViSession(instrSession), ViBoolean(groupResultDialogs)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadMeasurementResults(self, instrSession, measurement, bufferSize):
        results = ARRAY_ViChar(bufferSize)
        actualPoints = ViInt32()
        _status = self.dll.rsscope_ReadMeasurementResults(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(bufferSize),
            results,
            byref(actualPoints),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        results = list(results)
        actualPoints = int(actualPoints.value)
        return results, actualPoints

    def ConfigureCursor(self, instrSession, cursor, cursorState, dataSource, type):
        _status = self.dll.rsscope_ConfigureCursor(
            ViSession(instrSession),
            ViInt32(cursor),
            ViBoolean(cursorState),
            ViInt32(dataSource),
            ViInt32(type),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCursorSecondSource(self, instrSession, cursor, enabled, secondSource):
        _status = self.dll.rsscope_ConfigureCursorSecondSource(
            ViSession(instrSession),
            ViInt32(cursor),
            ViBoolean(enabled),
            ViInt32(secondSource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AllCursorsOff(self, instrSession):
        _status = self.dll.rsscope_AllCursorsOff(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCursorShowInAllDiagrams(self, instrSession, showInAllDiagrams):
        _status = self.dll.rsscope_ConfigureCursorShowInAllDiagrams(
            ViSession(instrSession), ViBoolean(showInAllDiagrams)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCursorResultTablePosition(self, instrSession, tablePosition):
        _status = self.dll.rsscope_ConfigureCursorResultTablePosition(ViSession(instrSession), ViInt32(tablePosition))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCursorPosition(self, instrSession, cursor, xPosition1, xPosition2, yPosition1, yPosition2):
        _status = self.dll.rsscope_ConfigureCursorPosition(
            ViSession(instrSession),
            ViInt32(cursor),
            ViReal64(xPosition1),
            ViReal64(xPosition2),
            ViReal64(yPosition1),
            ViReal64(yPosition2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCursorCoupling(self, instrSession, cursor, xCoupling, yCoupling):
        _status = self.dll.rsscope_ConfigureCursorCoupling(
            ViSession(instrSession),
            ViInt32(cursor),
            ViBoolean(xCoupling),
            ViBoolean(yCoupling),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCursorWaveformTracking(self, instrSession, cursor, tracking):
        _status = self.dll.rsscope_ConfigureCursorWaveformTracking(
            ViSession(instrSession), ViInt32(cursor), ViBoolean(tracking)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCursorEnvelopeWaveformSelection(self, instrSession, cursor, firstCursorPosition, secondCursorPosition):
        _status = self.dll.rsscope_ConfigureCursorEnvelopeWaveformSelection(
            ViSession(instrSession),
            ViInt32(cursor),
            ViInt32(firstCursorPosition),
            ViInt32(secondCursorPosition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryCursorDistance(self, instrSession, cursor, direction):
        cursorDistance = ViReal64()
        _status = self.dll.rsscope_QueryCursorDistance(
            ViSession(instrSession),
            ViInt32(cursor),
            ViInt32(direction),
            byref(cursorDistance),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(cursorDistance.value)

    def QueryCursorInverseDistance(self, instrSession, cursor):
        cursorDistance = ViReal64()
        _status = self.dll.rsscope_QueryCursorInverseDistance(
            ViSession(instrSession), ViInt32(cursor), byref(cursorDistance)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(cursorDistance.value)

    def QueryCursorHorizontalDeltaSlope(self, instrSession, cursor):
        horizontalDeltaSlope = ViReal64()
        _status = self.dll.rsscope_QueryCursorHorizontalDeltaSlope(
            ViSession(instrSession), ViInt32(cursor), byref(horizontalDeltaSlope)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(horizontalDeltaSlope.value)

    def CursorSearch(self, instrSession, cursor, search):
        _status = self.dll.rsscope_CursorSearch(ViSession(instrSession), ViInt32(cursor), ViInt32(search))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCursorPeakExcursion(self, instrSession, cursor, peakExcursion):
        _status = self.dll.rsscope_ConfigureCursorPeakExcursion(
            ViSession(instrSession), ViInt32(cursor), ViInt32(peakExcursion)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCursorThreshold(self, instrSession, cursor, threshold):
        _status = self.dll.rsscope_ConfigureCursorThreshold(
            ViSession(instrSession), ViInt32(cursor), ViReal64(threshold)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAmplitudeTimeMainMeasurement(self, instrSession, measurement, measurementFunction):
        _status = self.dll.rsscope_ConfigureAmplitudeTimeMainMeasurement(
            ViSession(instrSession), ViInt32(measurement), ViInt32(measurementFunction)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAmplitudeTimeAdditionalMeasurement(self, instrSession, measurement, measurementFunction, enabled):
        _status = self.dll.rsscope_ConfigureAmplitudeTimeAdditionalMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAmplitudeTimeSettings(self, instrSession, measurement, signalThreshold, areaLevel, pulseTrainCount):
        _status = self.dll.rsscope_ConfigureAmplitudeTimeSettings(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(signalThreshold),
            ViReal64(areaLevel),
            ViInt32(pulseTrainCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAmplitudeTimeSlope(self, instrSession, measurement, countType, slope):
        _status = self.dll.rsscope_ConfigureAmplitudeTimeSlope(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(countType),
            ViInt32(slope),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAmplitudeAdvancedDelaySetup(
        self,
        instrSession,
        measurement,
        sourceNumber,
        levelSelection,
        slope,
        direction,
        edgeNumber,
    ):
        _status = self.dll.rsscope_ConfigureAmplitudeAdvancedDelaySetup(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(sourceNumber),
            ViInt32(levelSelection),
            ViInt32(slope),
            ViInt32(direction),
            ViInt32(edgeNumber),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAmplitudeTimeReferenceLevel(self, instrSession, measurement, type, referenceLevel):
        _status = self.dll.rsscope_ConfigureAmplitudeTimeReferenceLevel(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(type),
            ViInt32(referenceLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAmplitudeTimeLimitCheck(self, instrSession, measurement, measurementType, limitCheck):
        _status = self.dll.rsscope_ConfigureAmplitudeTimeLimitCheck(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViInt32(limitCheck),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAmplitudeTimeLimitCheckLimits(
        self, instrSession, measurement, measurementType, lowerLimit, upperLimit
    ):
        _status = self.dll.rsscope_ConfigureAmplitudeTimeLimitCheckLimits(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViReal64(lowerLimit),
            ViReal64(upperLimit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAmplitudeTimeLimitCheckMargins(
        self, instrSession, measurement, measurementType, lowerMargin, upperMargin
    ):
        _status = self.dll.rsscope_ConfigureAmplitudeTimeLimitCheckMargins(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViReal64(lowerMargin),
            ViReal64(upperMargin),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEnvelopeMeasurement(self, instrSession, measurement, envelope):
        _status = self.dll.rsscope_ConfigureEnvelopeMeasurement(
            ViSession(instrSession), ViInt32(measurement), ViInt32(envelope)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAmplitudeTimeDelayToTrigger(self, instrSession, measurement, slope, referenceLevel):
        _status = self.dll.rsscope_ConfigureAmplitudeTimeDelayToTrigger(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(slope),
            ViInt32(referenceLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureJitterMainMeasurement(self, instrSession, measurement, measurementFunction):
        _status = self.dll.rsscope_ConfigureJitterMainMeasurement(
            ViSession(instrSession), ViInt32(measurement), ViInt32(measurementFunction)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureJitterAdditionalMeasurement(self, instrSession, measurement, measurementFunction, enabled):
        _status = self.dll.rsscope_ConfigureJitterAdditionalMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureJitterClockMeasurementCycleBegin(self, instrSession, measurement, cycleBegin):
        _status = self.dll.rsscope_ConfigureJitterClockMeasurementCycleBegin(
            ViSession(instrSession), ViInt32(measurement), ViInt32(cycleBegin)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureJitterClockMeasurementCycleOffset(self, instrSession, measurement, cycleOffset):
        _status = self.dll.rsscope_ConfigureJitterClockMeasurementCycleOffset(
            ViSession(instrSession), ViInt32(measurement), ViInt32(cycleOffset)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureJitterClockMeasurementPulsePolarity(self, instrSession, measurement, pulsePolarity):
        _status = self.dll.rsscope_ConfigureJitterClockMeasurementPulsePolarity(
            ViSession(instrSession), ViInt32(measurement), ViInt32(pulsePolarity)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureJitterDataMeasurementClockMode(self, instrSession, measurement, clockMode):
        _status = self.dll.rsscope_ConfigureJitterDataMeasurementClockMode(
            ViSession(instrSession), ViInt32(measurement), ViInt32(clockMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureJitterDataMeasurementSlope(self, instrSession, measurement, source, slope):
        _status = self.dll.rsscope_ConfigureJitterDataMeasurementSlope(
            ViSession(instrSession), ViInt32(measurement), ViInt32(source), ViInt32(slope)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureJitterDelayMeasurement(self, instrSession, measurement1, edgePolarity, measurement2, relativePolarity):
        _status = self.dll.rsscope_ConfigureJitterDelayMeasurement(
            ViSession(instrSession),
            ViInt32(measurement1),
            ViInt32(edgePolarity),
            ViInt32(measurement2),
            ViInt32(relativePolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureJitterLimitCheck(self, instrSession, measurement, measurementType, limitCheck):
        _status = self.dll.rsscope_ConfigureJitterLimitCheck(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViInt32(limitCheck),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureJitterLimitCheckLimits(self, instrSession, measurement, measurementType, lowerLimit, upperLimit):
        _status = self.dll.rsscope_ConfigureJitterLimitCheckLimits(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViReal64(lowerLimit),
            ViReal64(upperLimit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureJitterLimitCheckMargins(self, instrSession, measurement, measurementType, lowerMargin, upperMargin):
        _status = self.dll.rsscope_ConfigureJitterLimitCheckMargins(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViReal64(lowerMargin),
            ViReal64(upperMargin),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEyeJitterMainMeasurement(self, instrSession, measurement, measurementFunction):
        _status = self.dll.rsscope_ConfigureEyeJitterMainMeasurement(
            ViSession(instrSession), ViInt32(measurement), ViInt32(measurementFunction)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEyeJitterAdditionalMeasurement(self, instrSession, measurement, measurementFunction, enabled):
        _status = self.dll.rsscope_ConfigureEyeJitterAdditionalMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEyeJitterLimitCheck(self, instrSession, measurement, measurementType, limitCheck):
        _status = self.dll.rsscope_ConfigureEyeJitterLimitCheck(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViInt32(limitCheck),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEyeJitterLimitCheckLimits(self, instrSession, measurement, measurementType, lowerLimit, upperLimit):
        _status = self.dll.rsscope_ConfigureEyeJitterLimitCheckLimits(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViReal64(lowerLimit),
            ViReal64(upperLimit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEyeJitterLimitCheckMargins(self, instrSession, measurement, measurementType, lowerMargin, upperMargin):
        _status = self.dll.rsscope_ConfigureEyeJitterLimitCheckMargins(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViReal64(lowerMargin),
            ViReal64(upperMargin),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumMainMeasurement(self, instrSession, measurement, measurementFunction):
        _status = self.dll.rsscope_ConfigureSpectrumMainMeasurement(
            ViSession(instrSession), ViInt32(measurement), ViInt32(measurementFunction)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumAdditionalMeasurement(self, instrSession, measurement, measurementFunction, enabled):
        _status = self.dll.rsscope_ConfigureSpectrumAdditionalMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumSettings(
        self,
        instrSession,
        measurement,
        nDBDown,
        channelBandwidth,
        channelCenterFrequency,
        occupiedBandwidth,
        noiseReject,
    ):
        _status = self.dll.rsscope_ConfigureSpectrumSettings(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(nDBDown),
            ViReal64(channelBandwidth),
            ViReal64(channelCenterFrequency),
            ViReal64(occupiedBandwidth),
            ViInt32(noiseReject),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumPeakExcursion(self, instrSession, measurement, peakExcursion):
        _status = self.dll.rsscope_ConfigureSpectrumPeakExcursion(
            ViSession(instrSession), ViInt32(measurement), ViInt32(peakExcursion)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumLimitCheck(self, instrSession, measurement, measurementType, limitCheck):
        _status = self.dll.rsscope_ConfigureSpectrumLimitCheck(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViInt32(limitCheck),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumLimitCheckLimits(self, instrSession, measurement, measurementType, lowerLimit, upperLimit):
        _status = self.dll.rsscope_ConfigureSpectrumLimitCheckLimits(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViReal64(lowerLimit),
            ViReal64(upperLimit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumLimitCheckMargins(self, instrSession, measurement, measurementType, lowerMargin, upperMargin):
        _status = self.dll.rsscope_ConfigureSpectrumLimitCheckMargins(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViReal64(lowerMargin),
            ViReal64(upperMargin),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumMaxNumberOfResults(self, instrSession, measurement, measurementType, maxNumberOfResults):
        _status = self.dll.rsscope_ConfigureSpectrumMaxNumberOfResults(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViInt32(maxNumberOfResults),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumResultMode(self, instrSession, measurement, measurementType, mode):
        _status = self.dll.rsscope_ConfigureSpectrumResultMode(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViInt32(mode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumAbsoluteThreshold(self, instrSession, measurement, absoluteThreshold):
        _status = self.dll.rsscope_ConfigureSpectrumAbsoluteThreshold(
            ViSession(instrSession), ViInt32(measurement), ViReal64(absoluteThreshold)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumResultLabelsState(self, instrSession, measurement, measurementType, state):
        _status = self.dll.rsscope_ConfigureSpectrumResultLabelsState(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViBoolean(state),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumResultLabelsFrameType(self, instrSession, measurement, measurementType, frameType):
        _status = self.dll.rsscope_ConfigureSpectrumResultLabelsFrameType(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViInt32(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumResultLabelsInverse(self, instrSession, measurement, measurementType, inverse):
        _status = self.dll.rsscope_ConfigureSpectrumResultLabelsInverse(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViBoolean(inverse),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumResultLabelsMaximumPeaks(self, instrSession, measurement, measurementType, maximumPeaks):
        _status = self.dll.rsscope_ConfigureSpectrumResultLabelsMaximumPeaks(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViInt32(maximumPeaks),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumResultLabelsShowFrequency(self, instrSession, measurement, measurementType, showFrequency):
        _status = self.dll.rsscope_ConfigureSpectrumResultLabelsShowFrequency(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViBoolean(showFrequency),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramMainMeasurement(self, instrSession, measurement, measurementFunction):
        _status = self.dll.rsscope_ConfigureHistogramMainMeasurement(
            ViSession(instrSession), ViInt32(measurement), ViInt32(measurementFunction)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramAdditionalMeasurement(self, instrSession, measurement, measurementFunction, enabled):
        _status = self.dll.rsscope_ConfigureHistogramAdditionalMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SelectHistogram(self, instrSession, measurement, measurementType):
        _status = self.dll.rsscope_SelectHistogram(
            ViSession(instrSession), ViInt32(measurement), ViString(measurementType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramProbabilityDomainMarkerSettings(self, instrSession, measurement, reference, delta):
        _status = self.dll.rsscope_ConfigureHistogramProbabilityDomainMarkerSettings(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(reference),
            ViInt32(delta),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramLimitCheck(self, instrSession, measurement, measurementType, limitCheck):
        _status = self.dll.rsscope_ConfigureHistogramLimitCheck(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViInt32(limitCheck),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramLimitCheckLimits(self, instrSession, measurement, measurementType, lowerLimit, upperLimit):
        _status = self.dll.rsscope_ConfigureHistogramLimitCheckLimits(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViReal64(lowerLimit),
            ViReal64(upperLimit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramLimitCheckMargins(self, instrSession, measurement, measurementType, lowerMargin, upperMargin):
        _status = self.dll.rsscope_ConfigureHistogramLimitCheckMargins(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementType),
            ViReal64(lowerMargin),
            ViReal64(upperMargin),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramDisplay(self, instrSession, measurement, displaySourceHistogram):
        _status = self.dll.rsscope_ConfigureHistogramDisplay(
            ViSession(instrSession),
            ViInt32(measurement),
            ViBoolean(displaySourceHistogram),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CreateNewHistogram(
        self,
        instrSession,
        histogramName,
        histogramSource,
        relativeValues,
        xStart,
        xStop,
        yStart,
        yStop,
        orientation,
    ):
        _status = self.dll.rsscope_CreateNewHistogram(
            ViSession(instrSession),
            ViString(histogramName),
            ViInt32(histogramSource),
            ViBoolean(relativeValues),
            ViReal64(xStart),
            ViReal64(xStop),
            ViReal64(yStart),
            ViReal64(yStop),
            ViInt32(orientation),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramSource(self, instrSession, histogramName, histogramSource):
        _status = self.dll.rsscope_ConfigureHistogramSource(
            ViSession(instrSession), ViString(histogramName), ViInt32(histogramSource)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetHistogram(self, instrSession, histogramName):
        _status = self.dll.rsscope_ResetHistogram(ViSession(instrSession), ViString(histogramName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RemoveHistogram(self, instrSession, histogramName):
        _status = self.dll.rsscope_RemoveHistogram(ViSession(instrSession), ViString(histogramName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramType(self, instrSession, histogramName, type):
        _status = self.dll.rsscope_ConfigureHistogramType(
            ViSession(instrSession), ViString(histogramName), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramVertical(self, instrSession, histogramName, mode, start, stop):
        _status = self.dll.rsscope_ConfigureHistogramVertical(
            ViSession(instrSession),
            ViString(histogramName),
            ViInt32(mode),
            ViReal64(start),
            ViReal64(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramHorizontal(self, instrSession, histogramName, mode, start, stop):
        _status = self.dll.rsscope_ConfigureHistogramHorizontal(
            ViSession(instrSession),
            ViString(histogramName),
            ViInt32(mode),
            ViReal64(start),
            ViReal64(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGateState(self, instrSession, measurement, useGate):
        _status = self.dll.rsscope_ConfigureGateState(ViSession(instrSession), ViInt32(measurement), ViBoolean(useGate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGateShow(self, instrSession, measurement, showGate):
        _status = self.dll.rsscope_ConfigureGateShow(ViSession(instrSession), ViInt32(measurement), ViBoolean(showGate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGateDefinitionZoom(self, instrSession, measurement, zoomCoupling, reserved):
        _status = self.dll.rsscope_ConfigureGateDefinitionZoom(
            ViSession(instrSession),
            ViInt32(measurement),
            ViBoolean(zoomCoupling),
            ViInt32(reserved),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGateZoomDiagram(self, instrSession, measurement, diagramName, zoomName):
        _status = self.dll.rsscope_ConfigureGateZoomDiagram(
            ViSession(instrSession),
            ViInt32(measurement),
            ViString(diagramName),
            ViString(zoomName),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGateDefinitionCursor(self, instrSession, measurement, coupling, cursorSet):
        _status = self.dll.rsscope_ConfigureGateDefinitionCursor(
            ViSession(instrSession),
            ViInt32(measurement),
            ViBoolean(coupling),
            ViInt32(cursorSet),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGateCoupling(self, instrSession, measurement, coupling):
        _status = self.dll.rsscope_ConfigureGateCoupling(
            ViSession(instrSession), ViInt32(measurement), ViBoolean(coupling)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGateDefinitionStartStop(self, instrSession, measurement, mode, start, stop):
        _status = self.dll.rsscope_ConfigureGateDefinitionStartStop(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(mode),
            ViReal64(start),
            ViReal64(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGateNoise(self, instrSession, measurement, evaluationArea):
        _status = self.dll.rsscope_ConfigureGateNoise(
            ViSession(instrSession), ViInt32(measurement), ViInt32(evaluationArea)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLongTermState(self, instrSession, measurement, longTermState):
        _status = self.dll.rsscope_ConfigureLongTermState(
            ViSession(instrSession), ViInt32(measurement), ViBoolean(longTermState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLongTermTotalMeasurementTime(self, instrSession, measurement, totalMeasurementTime):
        _status = self.dll.rsscope_ConfigureLongTermTotalMeasurementTime(
            ViSession(instrSession), ViInt32(measurement), ViInt32(totalMeasurementTime)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLongTermMeasurementPoints(self, instrSession, measurement, measurementPoints):
        _status = self.dll.rsscope_ConfigureLongTermMeasurementPoints(
            ViSession(instrSession), ViInt32(measurement), ViInt32(measurementPoints)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLongTermVerticalScaling(self, instrSession, measurement, verticalScale, verticalOffset):
        _status = self.dll.rsscope_ConfigureLongTermVerticalScaling(
            ViSession(instrSession),
            ViInt32(measurement),
            ViReal64(verticalScale),
            ViReal64(verticalOffset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLongTermVerticalContinuousAutoScaling(self, instrSession, measurement, continuousAutoScale):
        _status = self.dll.rsscope_ConfigureLongTermVerticalContinuousAutoScaling(
            ViSession(instrSession), ViInt32(measurement), ViBoolean(continuousAutoScale)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LongTermVerticalAutoScale(self, instrSession, measurement):
        _status = self.dll.rsscope_LongTermVerticalAutoScale(ViSession(instrSession), ViInt32(measurement))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureStatisticsState(self, instrSession, measurement, statistics):
        _status = self.dll.rsscope_ConfigureStatisticsState(
            ViSession(instrSession), ViInt32(measurement), ViBoolean(statistics)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramState(self, instrSession, measurement, showHistogram):
        _status = self.dll.rsscope_ConfigureHistogramState(
            ViSession(instrSession), ViInt32(measurement), ViBoolean(showHistogram)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureResetStatisticsSettings(self, instrSession, measurement, resetStatisticsMode, resetTime, resetCount):
        _status = self.dll.rsscope_ConfigureResetStatisticsSettings(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(resetStatisticsMode),
            ViReal64(resetTime),
            ViInt32(resetCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureResetStatisticsMeasurementsCount(self, instrSession, measurement, measurementsCount):
        _status = self.dll.rsscope_ConfigureResetStatisticsMeasurementsCount(
            ViSession(instrSession), ViInt32(measurement), ViInt32(measurementsCount)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetStatistics(self, instrSession, measurement):
        _status = self.dll.rsscope_ResetStatistics(ViSession(instrSession), ViInt32(measurement))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureStatisticsNumberOfBins(self, instrSession, measurement, numberOfBins):
        _status = self.dll.rsscope_ConfigureStatisticsNumberOfBins(
            ViSession(instrSession), ViInt32(measurement), ViInt32(numberOfBins)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEnvironmentSensorState(self, instrSession, measurement, useSensor):
        _status = self.dll.rsscope_ConfigureEnvironmentSensorState(
            ViSession(instrSession), ViInt32(measurement), ViBoolean(useSensor)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFrameToFrame(
        self,
        instrSession,
        measurement,
        fromFrame,
        fromField,
        fromValue,
        toFrame,
        toField,
        toValue,
    ):
        _status = self.dll.rsscope_ConfigureFrameToFrame(
            ViSession(instrSession),
            ViInt32(measurement),
            ViString(fromFrame),
            ViString(fromField),
            ViString(fromValue),
            ViString(toFrame),
            ViString(toField),
            ViString(toValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerToFrame(self, instrSession, measurement, direction, frame, field, value):
        _status = self.dll.rsscope_ConfigureTriggerToFrame(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(direction),
            ViString(frame),
            ViString(field),
            ViString(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFieldValueMeasurement(self, instrSession, measurement, frame, field, value, fieldToBeTracked):
        _status = self.dll.rsscope_ConfigureFieldValueMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViString(frame),
            ViString(field),
            ViString(value),
            ViString(fieldToBeTracked),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceLevel(
        self,
        instrSession,
        source,
        referenceLevelMode,
        levelDefinition,
        userLevelSelection,
    ):
        _status = self.dll.rsscope_ConfigureReferenceLevel(
            ViSession(instrSession),
            ViInt32(source),
            ViInt32(referenceLevelMode),
            ViInt32(levelDefinition),
            ViInt32(userLevelSelection),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceLevelAutoSettings(
        self, instrSession, source, signalLevelMode, histogramAveraging, averageCount
    ):
        _status = self.dll.rsscope_ConfigureReferenceLevelAutoSettings(
            ViSession(instrSession),
            ViInt32(source),
            ViInt32(signalLevelMode),
            ViBoolean(histogramAveraging),
            ViInt32(averageCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceUserSignalLevel(
        self,
        instrSession,
        source,
        topDistance,
        bottomDistance,
        highSignalLevel,
        lowSignalLevel,
    ):
        _status = self.dll.rsscope_ConfigureReferenceUserSignalLevel(
            ViSession(instrSession),
            ViInt32(source),
            ViReal64(topDistance),
            ViReal64(bottomDistance),
            ViReal64(highSignalLevel),
            ViReal64(lowSignalLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUserReferenceLevel(self, instrSession, source, topDistance, bottomDistance, upperLevel, lowerLevel):
        _status = self.dll.rsscope_ConfigureUserReferenceLevel(
            ViSession(instrSession),
            ViInt32(source),
            ViReal64(topDistance),
            ViReal64(bottomDistance),
            ViReal64(upperLevel),
            ViReal64(lowerLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUserMiddleReferenceLevel(self, instrSession, source, middleLevel):
        _status = self.dll.rsscope_ConfigureUserMiddleReferenceLevel(
            ViSession(instrSession), ViInt32(source), ViReal64(middleLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceLevelRelativeLevels(self, instrSession, source, relativeLevels):
        _status = self.dll.rsscope_ConfigureReferenceLevelRelativeLevels(
            ViSession(instrSession), ViInt32(source), ViInt32(relativeLevels)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceLevelRelativeUserLevels(self, instrSession, source, upperLevel, middleLevel, lowerLevel):
        _status = self.dll.rsscope_ConfigureReferenceLevelRelativeUserLevels(
            ViSession(instrSession),
            ViInt32(source),
            ViInt32(upperLevel),
            ViInt32(middleLevel),
            ViInt32(lowerLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceLevelHysteresis(self, instrSession, source, hysteresis):
        _status = self.dll.rsscope_ConfigureReferenceLevelHysteresis(
            ViSession(instrSession), ViInt32(source), ViReal64(hysteresis)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceLevelTube(self, instrSession, source, topOuter, topInner, bottomInner, bottomOuter):
        _status = self.dll.rsscope_ConfigureReferenceLevelTube(
            ViSession(instrSession),
            ViInt32(source),
            ViReal64(topOuter),
            ViReal64(topInner),
            ViReal64(bottomInner),
            ViReal64(bottomOuter),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceLevelTubeRelative(self, instrSession, source, relativeOuter, relativeInner):
        _status = self.dll.rsscope_ConfigureReferenceLevelTubeRelative(
            ViSession(instrSession),
            ViInt32(source),
            ViInt32(relativeOuter),
            ViInt32(relativeInner),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ActualRecordLength(self, instrSession):
        actualRecordLength = ViInt32()
        _status = self.dll.rsscope_ActualRecordLength(ViSession(instrSession), byref(actualRecordLength))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(actualRecordLength.value)

    def SampleMode(self, instrSession):
        sampleMode = ViInt32()
        _status = self.dll.rsscope_SampleMode(ViSession(instrSession), byref(sampleMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(sampleMode.value)

    def SampleRate(self, instrSession):
        sampleRate = ViReal64()
        _status = self.dll.rsscope_SampleRate(ViSession(instrSession), byref(sampleRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(sampleRate.value)

    def AutoProbeSenseValue(self, instrSession, channel):
        autoProbeSenseValue = ViReal64()
        _status = self.dll.rsscope_AutoProbeSenseValue(
            ViSession(instrSession), ViInt32(channel), byref(autoProbeSenseValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(autoProbeSenseValue.value)

    def QueryMaskTestResults(self, instrSession, maskName):
        acquisitionsCompleted = ViUInt32()
        acquisitionsRemaining = ViUInt32()
        state = ViInt32()
        sampleHits = ViUInt32()
        acquisitionHits = ViUInt32()
        failRate = ViUInt32()
        testResult = ViInt32()
        _status = self.dll.rsscope_QueryMaskTestResults(
            ViSession(instrSession),
            ViString(maskName),
            byref(acquisitionsCompleted),
            byref(acquisitionsRemaining),
            byref(state),
            byref(sampleHits),
            byref(acquisitionHits),
            byref(failRate),
            byref(testResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        acquisitionsCompleted = int(acquisitionsCompleted.value)
        acquisitionsRemaining = int(acquisitionsRemaining.value)
        state = int(state.value)
        sampleHits = int(sampleHits.value)
        acquisitionHits = int(acquisitionHits.value)
        failRate = int(failRate.value)
        testResult = int(testResult.value)
        return (
            acquisitionsCompleted,
            acquisitionsRemaining,
            state,
            sampleHits,
            acquisitionHits,
            failRate,
            testResult,
        )

    def ConfigureMaskTestActionsOnEvent(self, instrSession, maskName, event, action):
        _status = self.dll.rsscope_ConfigureMaskTestActionsOnEvent(
            ViSession(instrSession), ViString(maskName), ViInt32(event), ViInt32(action)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestDefinition(self, instrSession, action, maskName):
        _status = self.dll.rsscope_ConfigureMaskTestDefinition(
            ViSession(instrSession), ViInt32(action), ViString(maskName)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConvertMaskTestToUser(self, instrSession, maskName):
        _status = self.dll.rsscope_ConvertMaskTestToUser(ViSession(instrSession), ViString(maskName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestEnable(self, instrSession, maskName, state):
        _status = self.dll.rsscope_ConfigureMaskTestEnable(
            ViSession(instrSession), ViString(maskName), ViBoolean(state)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestDefinitionType(self, instrSession, maskName, definitionType):
        _status = self.dll.rsscope_ConfigureMaskTestDefinitionType(
            ViSession(instrSession), ViString(maskName), ViInt32(definitionType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestSource(self, instrSession, maskName, maskSource):
        _status = self.dll.rsscope_ConfigureMaskTestSource(
            ViSession(instrSession), ViString(maskName), ViInt32(maskSource)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestSettings(self, instrSession, maskName, failCondition, violationTolerance):
        _status = self.dll.rsscope_ConfigureMaskTestSettings(
            ViSession(instrSession),
            ViString(maskName),
            ViInt32(failCondition),
            ViUInt32(violationTolerance),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestSavePath(self, instrSession, maskTestName, savePath):
        _status = self.dll.rsscope_ConfigureMaskTestSavePath(
            ViSession(instrSession), ViString(maskTestName), ViString(savePath)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestManagerOperations(self, instrSession, operation, maskTestName):
        _status = self.dll.rsscope_ConfigureMaskTestManagerOperations(
            ViSession(instrSession), ViInt32(operation), ViString(maskTestName)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestSegments(self, instrSession, maskName, maskSegment, state, region):
        _status = self.dll.rsscope_ConfigureMaskTestSegments(
            ViSession(instrSession),
            ViString(maskName),
            ViInt32(maskSegment),
            ViBoolean(state),
            ViInt32(region),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMaskTestSegmentsCount(self, instrSession, maskName, maskSegment):
        segmentsNumber = ViInt32()
        _status = self.dll.rsscope_QueryMaskTestSegmentsCount(
            ViSession(instrSession),
            ViString(maskName),
            ViInt32(maskSegment),
            byref(segmentsNumber),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(segmentsNumber.value)

    def ConfigureMaskTestSegmentsOperation(self, instrSession, maskName, maskSegment, action):
        _status = self.dll.rsscope_ConfigureMaskTestSegmentsOperation(
            ViSession(instrSession),
            ViString(maskName),
            ViInt32(maskSegment),
            ViInt32(action),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestSegmentDefinition(self, instrSession, maskName, maskSegment, pointIndex, xValue, yValue):
        _status = self.dll.rsscope_ConfigureMaskTestSegmentDefinition(
            ViSession(instrSession),
            ViString(maskName),
            ViInt32(maskSegment),
            ViInt32(pointIndex),
            ViReal64(xValue),
            ViReal64(yValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMaskTestSegmentDefinitionCount(self, instrSession, maskName, maskSegment):
        pointsNumber = ViInt32()
        _status = self.dll.rsscope_QueryMaskTestSegmentDefinitionCount(
            ViSession(instrSession),
            ViString(maskName),
            ViInt32(maskSegment),
            byref(pointsNumber),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(pointsNumber.value)

    def ConfigureMaskTestSegmentDefinitionOperation(
        self, instrSession, maskName, definitionOfSegment, pointIndex, action
    ):
        _status = self.dll.rsscope_ConfigureMaskTestSegmentDefinitionOperation(
            ViSession(instrSession),
            ViString(maskName),
            ViInt32(definitionOfSegment),
            ViInt32(pointIndex),
            ViInt32(action),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestRescale(
        self,
        instrSession,
        definitionOfSegment,
        maskName,
        offsetX,
        factorX,
        offsetY,
        factorY,
    ):
        _status = self.dll.rsscope_ConfigureMaskTestRescale(
            ViSession(instrSession),
            ViInt32(definitionOfSegment),
            ViString(maskName),
            ViReal64(offsetX),
            ViInt32(factorX),
            ViReal64(offsetY),
            ViInt32(factorY),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MaskTestRecalculate(self, instrSession, definitionOfSegment, maskName):
        _status = self.dll.rsscope_MaskTestRecalculate(
            ViSession(instrSession), ViInt32(definitionOfSegment), ViString(maskName)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestNameState(self, instrSession, showName):
        _status = self.dll.rsscope_ConfigureMaskTestNameState(ViSession(instrSession), ViBoolean(showName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RenameMaskTest(self, instrSession, oldMaskName, newMaskName):
        _status = self.dll.rsscope_RenameMaskTest(ViSession(instrSession), ViString(oldMaskName), ViString(newMaskName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskViolationHighlighting(
        self, instrSession, highlightHits, infiniteHighlight, highlightTime, matchColor
    ):
        _status = self.dll.rsscope_ConfigureMaskViolationHighlighting(
            ViSession(instrSession),
            ViBoolean(highlightHits),
            ViBoolean(infiniteHighlight),
            ViReal64(highlightTime),
            ViInt64(matchColor),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestMaskColors(self, instrSession, maskWithoutViolation, maskWithViolation, maskWithContact):
        _status = self.dll.rsscope_ConfigureMaskTestMaskColors(
            ViSession(instrSession),
            ViInt64(maskWithoutViolation),
            ViInt64(maskWithViolation),
            ViInt64(maskWithContact),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestWaveformCopy(self, instrSession, maskName, usedReference):
        _status = self.dll.rsscope_ConfigureMaskTestWaveformCopy(
            ViSession(instrSession), ViString(maskName), ViInt32(usedReference)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestWaveformRescale(
        self,
        instrSession,
        maskName,
        horizontalWidth,
        verticalWidth,
        verticalStretch,
        verticalPosition,
    ):
        _status = self.dll.rsscope_ConfigureMaskTestWaveformRescale(
            ViSession(instrSession),
            ViString(maskName),
            ViReal64(horizontalWidth),
            ViReal64(verticalWidth),
            ViInt32(verticalStretch),
            ViReal64(verticalPosition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestEyeShape(self, instrSession, maskName, shape):
        _status = self.dll.rsscope_ConfigureMaskTestEyeShape(
            ViSession(instrSession), ViString(maskName), ViInt32(shape)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestEyePolygon(
        self,
        instrSession,
        maskName,
        mainWidth,
        mainHeight,
        minorWidth,
        minorHeight,
        copyLeft,
        interpatternLength,
        copyRight,
    ):
        _status = self.dll.rsscope_ConfigureMaskTestEyePolygon(
            ViSession(instrSession),
            ViString(maskName),
            ViReal64(mainWidth),
            ViReal64(mainHeight),
            ViReal64(minorWidth),
            ViReal64(minorHeight),
            ViBoolean(copyLeft),
            ViReal64(interpatternLength),
            ViBoolean(copyRight),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestEyeTopBottom(
        self,
        instrSession,
        maskName,
        topState,
        offsetTop,
        width,
        bottomState,
        offsetBottom,
        symmetric,
    ):
        _status = self.dll.rsscope_ConfigureMaskTestEyeTopBottom(
            ViSession(instrSession),
            ViString(maskName),
            ViBoolean(topState),
            ViReal64(offsetTop),
            ViReal64(width),
            ViBoolean(bottomState),
            ViReal64(offsetBottom),
            ViBoolean(symmetric),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMaskTestEyeCenter(self, instrSession, maskName, horizontal, vertical):
        _status = self.dll.rsscope_ConfigureMaskTestEyeCenter(
            ViSession(instrSession),
            ViString(maskName),
            ViReal64(horizontal),
            ViReal64(vertical),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def NewSearch(self, instrSession, searchName):
        _status = self.dll.rsscope_NewSearch(ViSession(instrSession), ViString(searchName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DeleteSearch(self, instrSession, searchName):
        _status = self.dll.rsscope_DeleteSearch(ViSession(instrSession), ViString(searchName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSearchSource(self, instrSession, searchName, searchConditionSource):
        _status = self.dll.rsscope_ConfigureSearchSource(
            ViSession(instrSession), ViString(searchName), ViInt32(searchConditionSource)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSearchCategory(self, instrSession, searchName, searchCategory):
        _status = self.dll.rsscope_ConfigureSearchCategory(
            ViSession(instrSession), ViString(searchName), ViInt32(searchCategory)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSearchControl(self, instrSession, searchName, searchOnline):
        _status = self.dll.rsscope_ConfigureSearchControl(
            ViSession(instrSession), ViString(searchName), ViBoolean(searchOnline)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PerformSearch(self, instrSession, searchName, searchResults):
        _status = self.dll.rsscope_PerformSearch(ViSession(instrSession), ViString(searchName), ViInt32(searchResults))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearSearchResults(self, instrSession, searchName):
        _status = self.dll.rsscope_ClearSearchResults(ViSession(instrSession), ViString(searchName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySearchResults(self, instrSession, searchName, bufferSize):
        acquisitionIndex = ARRAY_ViInt32(bufferSize)
        xPosition = ARRAY_ViReal64(bufferSize)
        yPosition = ARRAY_ViReal64(bufferSize)
        typeOfSearchResult = ARRAY_ViInt32(bufferSize)
        slope = ARRAY_ViInt32(bufferSize)
        timeResult = ARRAY_ViReal64(bufferSize)
        actualValues = ViInt32()
        _status = self.dll.rsscope_QuerySearchResults(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(bufferSize),
            acquisitionIndex,
            xPosition,
            yPosition,
            typeOfSearchResult,
            slope,
            timeResult,
            byref(actualValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        xPosition = list(xPosition)
        yPosition = list(yPosition)
        timeResult = list(timeResult)
        actualValues = int(actualValues.value)
        return (
            acquisitionIndex,
            xPosition,
            yPosition,
            typeOfSearchResult,
            slope,
            timeResult,
            actualValues,
        )

    def SearchTriggerCopyConfiguration(self, instrSession, searchName, triggerType, copyFrom):
        _status = self.dll.rsscope_SearchTriggerCopyConfiguration(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(triggerType),
            ViInt32(copyFrom),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEdgeTriggerSearch(
        self,
        instrSession,
        searchName,
        triggerState,
        searchSource,
        triggerLevel,
        triggerSlope,
    ):
        _status = self.dll.rsscope_ConfigureEdgeTriggerSearch(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(triggerState),
            ViInt32(searchSource),
            ViReal64(triggerLevel),
            ViInt32(triggerSlope),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGlitchTriggerSearch(
        self,
        instrSession,
        searchName,
        triggerState,
        searchSource,
        triggerLevel,
        glitchWidth,
        glitchPolarity,
        glitchCondition,
    ):
        _status = self.dll.rsscope_ConfigureGlitchTriggerSearch(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(triggerState),
            ViInt32(searchSource),
            ViReal64(triggerLevel),
            ViReal64(glitchWidth),
            ViInt32(glitchPolarity),
            ViInt32(glitchCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWidthTriggerSearch(
        self,
        instrSession,
        searchName,
        triggerState,
        searchSource,
        triggerLevel,
        width,
        widthDelta,
        widthPolarity,
        widthRange,
    ):
        _status = self.dll.rsscope_ConfigureWidthTriggerSearch(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(triggerState),
            ViInt32(searchSource),
            ViReal64(triggerLevel),
            ViReal64(width),
            ViReal64(widthDelta),
            ViInt32(widthPolarity),
            ViInt32(widthRange),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRuntTriggerSearch(
        self,
        instrSession,
        searchName,
        triggerState,
        searchSource,
        runtLowThreshold,
        runtHighThreshold,
        runtPolarity,
    ):
        _status = self.dll.rsscope_ConfigureRuntTriggerSearch(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(triggerState),
            ViInt32(searchSource),
            ViReal64(runtLowThreshold),
            ViReal64(runtHighThreshold),
            ViInt32(runtPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRuntTriggerSearchRange(self, instrSession, searchName, runtWidth, runtDelta, runtRange):
        _status = self.dll.rsscope_ConfigureRuntTriggerSearchRange(
            ViSession(instrSession),
            ViString(searchName),
            ViReal64(runtWidth),
            ViReal64(runtDelta),
            ViInt32(runtRange),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWindowTriggerSearch(
        self,
        instrSession,
        searchName,
        triggerState,
        searchSource,
        windowLowerLimit,
        windowUpperLimit,
    ):
        _status = self.dll.rsscope_ConfigureWindowTriggerSearch(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(triggerState),
            ViInt32(searchSource),
            ViReal64(windowLowerLimit),
            ViReal64(windowUpperLimit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWindowTriggerSearchRange(
        self,
        instrSession,
        searchName,
        verticalCondition,
        timeCondition,
        windowWidth,
        windowDelta,
    ):
        _status = self.dll.rsscope_ConfigureWindowTriggerSearchRange(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(verticalCondition),
            ViInt32(timeCondition),
            ViReal64(windowWidth),
            ViReal64(windowDelta),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTimeoutTriggerSearch(
        self,
        instrSession,
        searchName,
        triggerState,
        searchSource,
        triggerLevel,
        timeoutValue,
        timeoutCondition,
    ):
        _status = self.dll.rsscope_ConfigureTimeoutTriggerSearch(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(triggerState),
            ViInt32(searchSource),
            ViReal64(triggerLevel),
            ViReal64(timeoutValue),
            ViInt32(timeoutCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureIntervalTriggerSearch(
        self,
        instrSession,
        searchName,
        triggerState,
        searchSource,
        triggerLevel,
        intervalWidth,
        intervalDelta,
        intervalPolarity,
        intervalCondition,
    ):
        _status = self.dll.rsscope_ConfigureIntervalTriggerSearch(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(triggerState),
            ViInt32(searchSource),
            ViReal64(triggerLevel),
            ViReal64(intervalWidth),
            ViReal64(intervalDelta),
            ViInt32(intervalPolarity),
            ViInt32(intervalCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSlewRateTriggerSearch(
        self,
        instrSession,
        searchName,
        triggerState,
        searchSource,
        slewRateLowerLimit,
        slewRateUpperLimit,
    ):
        _status = self.dll.rsscope_ConfigureSlewRateTriggerSearch(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(triggerState),
            ViInt32(searchSource),
            ViReal64(slewRateLowerLimit),
            ViReal64(slewRateUpperLimit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSlewRateTriggerSearchRange(
        self,
        instrSession,
        searchName,
        slewRate,
        slewRateDelta,
        slewRateCondition,
        slewRatePolarity,
    ):
        _status = self.dll.rsscope_ConfigureSlewRateTriggerSearchRange(
            ViSession(instrSession),
            ViString(searchName),
            ViReal64(slewRate),
            ViReal64(slewRateDelta),
            ViInt32(slewRateCondition),
            ViInt32(slewRatePolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureData2ClockTriggerSearch(
        self,
        instrSession,
        searchName,
        triggerState,
        searchSource,
        dataLevel,
        clockSource,
        clockLevel,
        holdTime,
        setupTime,
        clockEdge,
    ):
        _status = self.dll.rsscope_ConfigureData2ClockTriggerSearch(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(triggerState),
            ViInt32(searchSource),
            ViReal64(dataLevel),
            ViInt32(clockSource),
            ViReal64(clockLevel),
            ViReal64(holdTime),
            ViReal64(setupTime),
            ViInt32(clockEdge),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureStateTriggerSearch(self, instrSession, searchName, triggerState, clockSource, clockEdge, clockLevel):
        _status = self.dll.rsscope_ConfigureStateTriggerSearch(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(triggerState),
            ViInt32(clockSource),
            ViInt32(clockEdge),
            ViReal64(clockLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureStateTriggerSearchQualification(self, instrSession, searchName, channel, channelEnabled, channelLogic):
        _status = self.dll.rsscope_ConfigureStateTriggerSearchQualification(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(channel),
            ViBoolean(channelEnabled),
            ViInt32(channelLogic),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureStateTriggerSearchQualificationMultichannelLogic(
        self, instrSession, searchName, channelCombination, multichannelLogic
    ):
        _status = self.dll.rsscope_ConfigureStateTriggerSearchQualificationMultichannelLogic(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(channelCombination),
            ViInt32(multichannelLogic),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternTriggerSearch(
        self,
        instrSession,
        searchName,
        triggerState,
        patternMode,
        timeoutCondition,
        timeout,
        patternWidth,
        patternDelta,
        patternCondition,
    ):
        _status = self.dll.rsscope_ConfigurePatternTriggerSearch(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(triggerState),
            ViInt32(patternMode),
            ViInt32(timeoutCondition),
            ViReal64(timeout),
            ViReal64(patternWidth),
            ViReal64(patternDelta),
            ViInt32(patternCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternTriggerSearchQualification(
        self, instrSession, searchName, channel, channelEnabled, channelLogic
    ):
        _status = self.dll.rsscope_ConfigurePatternTriggerSearchQualification(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(channel),
            ViBoolean(channelEnabled),
            ViInt32(channelLogic),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternTriggerSearchQualificationMultichannelLogic(
        self, instrSession, searchName, channelCombination, multichannelLogic
    ):
        _status = self.dll.rsscope_ConfigurePatternTriggerSearchQualificationMultichannelLogic(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(channelCombination),
            ViInt32(multichannelLogic),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryTriggerSearchCondition(self, instrSession, searchName, bufferSize):
        searchLogic = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryTriggerSearchCondition(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(bufferSize),
            searchLogic,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(searchLogic)

    def ConfigureSearchGateState(self, instrSession, searchName, useGate):
        _status = self.dll.rsscope_ConfigureSearchGateState(
            ViSession(instrSession), ViString(searchName), ViBoolean(useGate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSearchGateShow(self, instrSession, searchName, showGate):
        _status = self.dll.rsscope_ConfigureSearchGateShow(
            ViSession(instrSession), ViString(searchName), ViBoolean(showGate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSearchGateDefinitionZoom(self, instrSession, searchName, zoomCoupling, reserved):
        _status = self.dll.rsscope_ConfigureSearchGateDefinitionZoom(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(zoomCoupling),
            ViInt32(reserved),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSearchGateDefinitionZoomDiagram(self, instrSession, searchName, diagram, zoom):
        _status = self.dll.rsscope_ConfigureSearchGateDefinitionZoomDiagram(
            ViSession(instrSession),
            ViString(searchName),
            ViString(diagram),
            ViString(zoom),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSearchGateDefinitionStartStop(self, instrSession, searchName, mode, start, stop):
        _status = self.dll.rsscope_ConfigureSearchGateDefinitionStartStop(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(mode),
            ViReal64(start),
            ViReal64(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSearchResultTable(
        self,
        instrSession,
        searchName,
        showResultTable,
        sortMode,
        sortAscending,
        maxResultCount,
    ):
        _status = self.dll.rsscope_ConfigureSearchResultTable(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(showResultTable),
            ViInt32(sortMode),
            ViBoolean(sortAscending),
            ViInt32(maxResultCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSearchZoomWindowState(self, instrSession, searchName, showSearchZoomWindows):
        _status = self.dll.rsscope_ConfigureSearchZoomWindowState(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(showSearchZoomWindows),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSearchZoomWindowXAxis(self, instrSession, searchName, horizonatalMode, position, range):
        _status = self.dll.rsscope_ConfigureSearchZoomWindowXAxis(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(horizonatalMode),
            ViReal64(position),
            ViReal64(range),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSearchZoomWindowYAxis(self, instrSession, searchName, verticalMode, position, range):
        _status = self.dll.rsscope_ConfigureSearchZoomWindowYAxis(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(verticalMode),
            ViReal64(position),
            ViReal64(range),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSearchNoiseReject(
        self,
        instrSession,
        searchName,
        searchSource,
        useNoiseReject,
        hysteresisMode,
        hysteresis,
    ):
        _status = self.dll.rsscope_ConfigureSearchNoiseReject(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(searchSource),
            ViBoolean(useNoiseReject),
            ViInt32(hysteresisMode),
            ViReal64(hysteresis),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDecodeState(self, instrSession, serialBus, state):
        _status = self.dll.rsscope_ConfigureDecodeState(ViSession(instrSession), ViInt32(serialBus), ViBoolean(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBusLabel(self, instrSession, serialBus, busLabel):
        _status = self.dll.rsscope_ConfigureBusLabel(ViSession(instrSession), ViInt32(serialBus), ViString(busLabel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ShowDecodeTable(self, instrSession, serialBus, showTable):
        _status = self.dll.rsscope_ShowDecodeTable(ViSession(instrSession), ViInt32(serialBus), ViBoolean(showTable))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProtocolResultTableZoomCouplingEnabled(self, instrSession, serialBus, zoomCouplingEnabled):
        _status = self.dll.rsscope_ConfigureProtocolResultTableZoomCouplingEnabled(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(zoomCouplingEnabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProtocolResultTablePosition(self, instrSession, position):
        _status = self.dll.rsscope_ConfigureProtocolResultTablePosition(ViSession(instrSession), ViInt32(position))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDataFormat(self, instrSession, dataFormat):
        _status = self.dll.rsscope_ConfigureDataFormat(ViSession(instrSession), ViInt32(dataFormat))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBusDataFormat(self, instrSession, serialBus, dataFormat):
        _status = self.dll.rsscope_ConfigureBusDataFormat(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(dataFormat)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureShowThresholdLines(self, instrSession, serialBus, state):
        _status = self.dll.rsscope_ConfigureShowThresholdLines(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(state)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureShowDetails(self, instrSession, serialBus, state):
        _status = self.dll.rsscope_ConfigureShowDetails(ViSession(instrSession), ViInt32(serialBus), ViBoolean(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLabelList(self, instrSession, serialBus, state):
        _status = self.dll.rsscope_ConfigureLabelList(ViSession(instrSession), ViInt32(serialBus), ViBoolean(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBusLabelListFile(self, instrSession, serialBus, fileName):
        _status = self.dll.rsscope_ConfigureBusLabelListFile(
            ViSession(instrSession), ViInt32(serialBus), ViString(fileName)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetReferenceLevels(self, instrSession, serialBus):
        _status = self.dll.rsscope_SetReferenceLevels(ViSession(instrSession), ViInt32(serialBus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutosetProtocolThresholdAndBitrate(self, instrSession, serialBus):
        _status = self.dll.rsscope_AutosetProtocolThresholdAndBitrate(ViSession(instrSession), ViInt32(serialBus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CSource(self, instrSession, serialBus, line, waveformSource):
        _status = self.dll.rsscope_ConfigureI2CSource(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(line),
            ViInt32(waveformSource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CThreshold(self, instrSession, serialBus, preset, SCLThreshold, SDAThreshold):
        _status = self.dll.rsscope_ConfigureI2CThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViReal64(SCLThreshold),
            ViReal64(SDAThreshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CRWBit(self, instrSession, serialBus, RWBit):
        _status = self.dll.rsscope_ConfigureI2CRWBit(ViSession(instrSession), ViInt32(serialBus), ViInt32(RWBit))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CTriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureI2CTriggerType(ViSession(instrSession), ViInt32(trigger), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CTriggerAddress(
        self,
        instrSession,
        trigger,
        addressType,
        RWBitAddress,
        condition,
        addressMin,
        addressMax,
    ):
        _status = self.dll.rsscope_ConfigureI2CTriggerAddress(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(addressType),
            ViInt32(RWBitAddress),
            ViInt32(condition),
            ViString(addressMin),
            ViString(addressMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CTriggerAddressORState(self, instrSession, trigger, ORSlot, ORSlotState):
        _status = self.dll.rsscope_ConfigureI2CTriggerAddressORState(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(ORSlot),
            ViBoolean(ORSlotState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CTriggerAddressOR(self, instrSession, trigger, ORSlot, addressType, RWBitAddress, address):
        _status = self.dll.rsscope_ConfigureI2CTriggerAddressOR(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(ORSlot),
            ViInt32(addressType),
            ViInt32(RWBitAddress),
            ViString(address),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CTriggerData(self, instrSession, trigger, condition, addressMin, addressMax):
        _status = self.dll.rsscope_ConfigureI2CTriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(addressMin),
            ViString(addressMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CTriggerDataPosition(self, instrSession, trigger, condition, indexMin, indexMax):
        _status = self.dll.rsscope_ConfigureI2CTriggerDataPosition(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(indexMin),
            ViInt32(indexMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CTriggerNoAck(self, instrSession, trigger, addressNack, dataWriteNack, dataReadNack):
        _status = self.dll.rsscope_ConfigureI2CTriggerNoAck(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(addressNack),
            ViBoolean(dataWriteNack),
            ViBoolean(dataReadNack),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryI2CFrameCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryI2CFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryI2CFrameStatus(self, instrSession, serialBus, frame):
        status = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        addressType = ViInt32()
        address = ViInt32()
        RWBit = ViInt32()
        ackBit = ViInt32()
        _status = self.dll.rsscope_QueryI2CFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(status),
            byref(frameStart),
            byref(frameStop),
            byref(addressType),
            byref(address),
            byref(RWBit),
            byref(ackBit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        addressType = int(addressType.value)
        address = int(address.value)
        RWBit = int(RWBit.value)
        ackBit = int(ackBit.value)
        return status, frameStart, frameStop, addressType, address, RWBit, ackBit

    def QueryI2CFrameAccessBitStart(self, instrSession, serialBus, frame):
        accessBitStart = ViReal64()
        _status = self.dll.rsscope_QueryI2CFrameAccessBitStart(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(accessBitStart),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(accessBitStart.value)

    def QueryI2CFrameSlaveAddress(self, instrSession, serialBus, frame):
        address = ViInt32()
        _status = self.dll.rsscope_QueryI2CFrameSlaveAddress(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(address)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(address.value)

    def QueryI2CFrameAddressAckBitStartTime(self, instrSession, serialBus, frame):
        addressStart = ViReal64()
        _status = self.dll.rsscope_QueryI2CFrameAddressAckBitStartTime(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(addressStart),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(addressStart.value)

    def QueryI2CFrameAddressAckBitStart(self, instrSession, serialBus, frame):
        ackBitStart = ViReal64()
        _status = self.dll.rsscope_QueryI2CFrameAddressAckBitStart(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(ackBitStart),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(ackBitStart.value)

    def QueryI2CFrameAddressComplete(self, instrSession, serialBus, frame):
        complete = ViBoolean()
        _status = self.dll.rsscope_QueryI2CFrameAddressComplete(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(complete)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(complete.value)

    def QueryI2CFrameBitRate(self, instrSession, serialBus, frame):
        bitRate = ViInt64()
        _status = self.dll.rsscope_QueryI2CFrameBitRate(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(bitRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(bitRate.value)

    def QueryI2CFrameLength(self, instrSession, serialBus, frame):
        length = ViInt32()
        _status = self.dll.rsscope_QueryI2CFrameLength(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(length)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(length.value)

    def QueryI2CFrameData(self, instrSession, serialBus, frame, byteNumber):
        data = ViInt32()
        ackBit = ViInt32()
        _status = self.dll.rsscope_QueryI2CFrameData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(byteNumber),
            byref(data),
            byref(ackBit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = int(data.value)
        ackBit = int(ackBit.value)
        return data, ackBit

    def QueryI2CFrameDataByteStart(self, instrSession, serialBus, frame, byteNumber):
        startTime = ViReal64()
        _status = self.dll.rsscope_QueryI2CFrameDataByteStart(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(byteNumber),
            byref(startTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(startTime.value)

    def QueryI2CFrameDataByteAcknowledgeBitStart(self, instrSession, serialBus, frame, byteNumber):
        startTime = ViReal64()
        _status = self.dll.rsscope_QueryI2CFrameDataByteAcknowledgeBitStart(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(byteNumber),
            byref(startTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(startTime.value)

    def QueryI2CFrameDataComplete(self, instrSession, serialBus, frame, byteNumber):
        complete = ViBoolean()
        _status = self.dll.rsscope_QueryI2CFrameDataComplete(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(byteNumber),
            byref(complete),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(complete.value)

    def QueryI2CFrameAllData(self, instrSession, serialBus, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryI2CFrameAllData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryI2CFrameLabel(self, instrSession, serialBus, frame, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryI2CFrameLabel(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def ConfigureI2CSearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureI2CSearchType(ViSession(instrSession), ViString(searchName), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CSearchCriteria(
        self,
        instrSession,
        searchName,
        start,
        repeatedStart,
        stop,
        nack,
        address,
        addressOR,
        addressData,
    ):
        _status = self.dll.rsscope_ConfigureI2CSearchCriteria(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(start),
            ViBoolean(repeatedStart),
            ViBoolean(stop),
            ViBoolean(nack),
            ViBoolean(address),
            ViBoolean(addressOR),
            ViBoolean(addressData),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CSearchAddress(
        self,
        instrSession,
        searchName,
        addressType,
        RWBitAddress,
        condition,
        addressMin,
        addressMax,
    ):
        _status = self.dll.rsscope_ConfigureI2CSearchAddress(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(addressType),
            ViInt32(RWBitAddress),
            ViInt32(condition),
            ViString(addressMin),
            ViString(addressMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CSearchAddressORState(self, instrSession, searchName, ORSlot, ORSlotState):
        _status = self.dll.rsscope_ConfigureI2CSearchAddressORState(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(ORSlot),
            ViBoolean(ORSlotState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CSearchAddressOR(self, instrSession, searchName, ORSlot, addressType, RWBitAddress, address):
        _status = self.dll.rsscope_ConfigureI2CSearchAddressOR(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(ORSlot),
            ViInt32(addressType),
            ViInt32(RWBitAddress),
            ViString(address),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CSearchData(self, instrSession, searchName, condition, addressMin, addressMax):
        _status = self.dll.rsscope_ConfigureI2CSearchData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(addressMin),
            ViString(addressMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CSearchDataPosition(self, instrSession, searchName, condition, indexMin, indexMax):
        _status = self.dll.rsscope_ConfigureI2CSearchDataPosition(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(indexMin),
            ViInt32(indexMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CSearchNoAck(self, instrSession, searchName, addressNack, dataWriteNack, dataReadNack):
        _status = self.dll.rsscope_ConfigureI2CSearchNoAck(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(addressNack),
            ViBoolean(dataWriteNack),
            ViBoolean(dataReadNack),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryI2CSearchFrameCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryI2CSearchFrameCount(ViSession(instrSession), ViString(searchName), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryI2CSearchFrameStatus(self, instrSession, searchName, frame):
        status = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        addressType = ViInt32()
        address = ViInt32()
        RWBit = ViInt32()
        ackBit = ViInt32()
        _status = self.dll.rsscope_QueryI2CSearchFrameStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(status),
            byref(frameStart),
            byref(frameStop),
            byref(addressType),
            byref(address),
            byref(RWBit),
            byref(ackBit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        addressType = int(addressType.value)
        address = int(address.value)
        RWBit = int(RWBit.value)
        ackBit = int(ackBit.value)
        return status, frameStart, frameStop, addressType, address, RWBit, ackBit

    def QueryI2CSearchFrameAccessBitStart(self, instrSession, searchName, frame):
        accessBitStart = ViReal64()
        _status = self.dll.rsscope_QueryI2CSearchFrameAccessBitStart(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(accessBitStart),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(accessBitStart.value)

    def QueryI2CSearchFrameSlaveAddress(self, instrSession, searchName, frame):
        address = ViInt32()
        _status = self.dll.rsscope_QueryI2CSearchFrameSlaveAddress(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), byref(address)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(address.value)

    def QueryI2CSearchFrameAddressAckBitStartTime(self, instrSession, searchName, frame):
        addressStart = ViReal64()
        _status = self.dll.rsscope_QueryI2CSearchFrameAddressAckBitStartTime(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(addressStart),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(addressStart.value)

    def QueryI2CSearchFrameAddressAckBitStart(self, instrSession, searchName, frame):
        ackBitStart = ViReal64()
        _status = self.dll.rsscope_QueryI2CSearchFrameAddressAckBitStart(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(ackBitStart),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(ackBitStart.value)

    def QueryI2CSearchFrameAddressComplete(self, instrSession, searchName, frame):
        complete = ViBoolean()
        _status = self.dll.rsscope_QueryI2CSearchFrameAddressComplete(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), byref(complete)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(complete.value)

    def QueryI2CSearchFrameLength(self, instrSession, searchName, frame):
        length = ViInt32()
        _status = self.dll.rsscope_QueryI2CSearchFrameLength(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), byref(length)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(length.value)

    def QueryI2CSearchFrameData(self, instrSession, searchName, frame, byteNumber):
        data = ViInt32()
        ackBit = ViInt32()
        _status = self.dll.rsscope_QueryI2CSearchFrameData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(byteNumber),
            byref(data),
            byref(ackBit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = int(data.value)
        ackBit = int(ackBit.value)
        return data, ackBit

    def QueryI2CSearchFrameDataByteStart(self, instrSession, searchName, frame, byteNumber):
        startTime = ViReal64()
        _status = self.dll.rsscope_QueryI2CSearchFrameDataByteStart(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(byteNumber),
            byref(startTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(startTime.value)

    def QueryI2CSearchFrameDataByteAcknowledgeBitStart(self, instrSession, searchName, frame, byteNumber):
        startTime = ViReal64()
        _status = self.dll.rsscope_QueryI2CSearchFrameDataByteAcknowledgeBitStart(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(byteNumber),
            byref(startTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(startTime.value)

    def QueryI2CSearchFrameDataComplete(self, instrSession, searchName, frame, byteNumber):
        complete = ViBoolean()
        _status = self.dll.rsscope_QueryI2CSearchFrameDataComplete(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(byteNumber),
            byref(complete),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(complete.value)

    def QueryI2CSearchFrameAllData(self, instrSession, searchName, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryI2CSearchFrameAllData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryI2CSearchFrameLabel(self, instrSession, searchName, frame, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryI2CSearchFrameLabel(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def ConfigureSPISource(self, instrSession, serialBus, line, waveformSource):
        _status = self.dll.rsscope_ConfigureSPISource(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(line),
            ViInt32(waveformSource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPIThreshold(
        self,
        instrSession,
        serialBus,
        preset,
        clockThreshold,
        SSThreshold,
        MISOThreshold,
        MOSIThreshold,
    ):
        _status = self.dll.rsscope_ConfigureSPIThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViReal64(clockThreshold),
            ViReal64(SSThreshold),
            ViReal64(MISOThreshold),
            ViReal64(MOSIThreshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPIPolarity(self, instrSession, serialBus, line, polarity):
        _status = self.dll.rsscope_ConfigureSPIPolarity(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(line), ViInt32(polarity)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPIWord(self, instrSession, serialBus, bitOrder, wordLength):
        _status = self.dll.rsscope_ConfigureSPIWord(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(bitOrder),
            ViInt32(wordLength),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPIFrameStart(self, instrSession, serialBus, frameCondition, clockTimeout):
        _status = self.dll.rsscope_ConfigureSPIFrameStart(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frameCondition),
            ViReal64(clockTimeout),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPITriggerType(self, instrSession, type):
        _status = self.dll.rsscope_ConfigureSPITriggerType(ViSession(instrSession), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPITriggerData(self, instrSession, trigger, condition, MOSIPattern, MISOPattern):
        _status = self.dll.rsscope_ConfigureSPITriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(MOSIPattern),
            ViString(MISOPattern),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPITriggerDataPosition(self, instrSession, trigger, condition, searchMode, indexMin, indexMax):
        _status = self.dll.rsscope_ConfigureSPITriggerDataPosition(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(searchMode),
            ViInt32(indexMin),
            ViInt32(indexMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySPIFrameCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QuerySPIFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QuerySPIWordCount(self, instrSession, serialBus, frame):
        count = ViInt32()
        _status = self.dll.rsscope_QuerySPIWordCount(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QuerySPIFrameStatus(self, instrSession, serialBus, frame):
        frameStart = ViReal64()
        frameStop = ViReal64()
        status = ViInt32()
        _status = self.dll.rsscope_QuerySPIFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStart),
            byref(frameStop),
            byref(status),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        status = int(status.value)
        return frameStart, frameStop, status

    def QuerySPIFrameBitRate(self, instrSession, serialBus, frame):
        bitRate = ViInt64()
        _status = self.dll.rsscope_QuerySPIFrameBitRate(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(bitRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(bitRate.value)

    def QuerySPIFrameData(self, instrSession, serialBus, frame, word):
        valueStart = ViReal64()
        valueStop = ViReal64()
        MOSIValue = ViInt32()
        MISOValue = ViInt32()
        _status = self.dll.rsscope_QuerySPIFrameData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(word),
            byref(valueStart),
            byref(valueStop),
            byref(MOSIValue),
            byref(MISOValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        valueStart = float(valueStart.value)
        valueStop = float(valueStop.value)
        MOSIValue = int(MOSIValue.value)
        MISOValue = int(MISOValue.value)
        return valueStart, valueStop, MOSIValue, MISOValue

    def QuerySPIFrameAllData(self, instrSession, serialBus, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QuerySPIFrameAllData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QuerySPIFrameFormattedValue(self, instrSession, serialBus, frame, word, line, bufferSize):
        formattedValue = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QuerySPIFrameFormattedValue(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(word),
            ViInt32(line),
            ViInt32(bufferSize),
            formattedValue,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(formattedValue)

    def ConfigureSPISearchMode(self, instrSession, searchName, mode):
        _status = self.dll.rsscope_ConfigureSPISearchMode(ViSession(instrSession), ViString(searchName), ViInt32(mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPISearchDataOperator(self, instrSession, searchName, dataOperator):
        _status = self.dll.rsscope_ConfigureSPISearchDataOperator(
            ViSession(instrSession), ViString(searchName), ViInt32(dataOperator)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPISearchDataPositionOperator(self, instrSession, searchName, dataPositionOperator):
        _status = self.dll.rsscope_ConfigureSPISearchDataPositionOperator(
            ViSession(instrSession), ViString(searchName), ViInt32(dataPositionOperator)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPISearchDataPosition(self, instrSession, searchName, position):
        _status = self.dll.rsscope_ConfigureSPISearchDataPosition(
            ViSession(instrSession), ViString(searchName), ViInt32(position)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPISearchDataAlignment(self, instrSession, searchName, dataAlignment):
        _status = self.dll.rsscope_ConfigureSPISearchDataAlignment(
            ViSession(instrSession), ViString(searchName), ViInt32(dataAlignment)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPISearchDataPositionTo(self, instrSession, searchName, positionTo):
        _status = self.dll.rsscope_ConfigureSPISearchDataPositionTo(
            ViSession(instrSession), ViString(searchName), ViInt32(positionTo)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPISearchPattern(self, instrSession, searchName, selectPattern, pattern):
        _status = self.dll.rsscope_ConfigureSPISearchPattern(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(selectPattern),
            ViString(pattern),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySPISearchFrameCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QuerySPISearchFrameCount(ViSession(instrSession), ViString(searchName), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QuerySPISearchFrame(self, instrSession, frame, searchName):
        start = ViReal64()
        stop = ViReal64()
        _status = self.dll.rsscope_QuerySPISearchFrame(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            byref(start),
            byref(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        start = float(start.value)
        stop = float(stop.value)
        return start, stop

    def QuerySPISearchFrameStatus(self, instrSession, frame, searchName, bufferSize):
        status = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QuerySPISearchFrameStatus(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            ViInt32(bufferSize),
            status,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(status)

    def QuerySPIFrameResultCount(self, instrSession, frame):
        resultCount = ViInt32()
        _status = self.dll.rsscope_QuerySPIFrameResultCount(ViSession(instrSession), ViInt32(frame), byref(resultCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(resultCount.value)

    def QuerySPISearchFrameData(self, instrSession, frame, searchName, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QuerySPISearchFrameData(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QuerySPISearchFrameWordCount(self, instrSession, frame, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QuerySPISearchFrameWordCount(
            ViSession(instrSession), ViInt32(frame), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QuerySPISearchFrameWord(self, instrSession, frame, word, searchName):
        start = ViReal64()
        stop = ViReal64()
        _status = self.dll.rsscope_QuerySPISearchFrameWord(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(word),
            ViString(searchName),
            byref(start),
            byref(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        start = float(start.value)
        stop = float(stop.value)
        return start, stop

    def QuerySPISearchFrameWordMISO(self, instrSession, frame, word, searchName):
        MISO = ViReal64()
        _status = self.dll.rsscope_QuerySPISearchFrameWordMISO(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(word),
            ViString(searchName),
            byref(MISO),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MISO.value)

    def QuerySPISearchFrameWordMOSI(self, instrSession, frame, word, searchName):
        MOSI = ViReal64()
        _status = self.dll.rsscope_QuerySPISearchFrameWordMOSI(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(word),
            ViString(searchName),
            byref(MOSI),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MOSI.value)

    def ConfigureUARTSource(self, instrSession, serialBus, line, waveformSource):
        _status = self.dll.rsscope_ConfigureUARTSource(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(line),
            ViInt32(waveformSource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUARTThreshold(self, instrSession, serialBus, preset, rxThreshold, txThreshold):
        _status = self.dll.rsscope_ConfigureUARTThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViReal64(rxThreshold),
            ViReal64(txThreshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUART(self, instrSession, serialBus, bitRate, stopBits, dataBits, parity, polarity):
        _status = self.dll.rsscope_ConfigureUART(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(bitRate),
            ViInt32(stopBits),
            ViInt32(dataBits),
            ViInt32(parity),
            ViInt32(polarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUARTPackets(self, instrSession, serialBus, packets, endWord, packetsTimeout):
        _status = self.dll.rsscope_ConfigureUARTPackets(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packets),
            ViInt32(endWord),
            ViReal64(packetsTimeout),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUARTTriggerType(self, instrSession, trigger, type, source):
        _status = self.dll.rsscope_ConfigureUARTTriggerType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(type), ViInt32(source)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUARTTriggerData(self, instrSession, trigger, condition, pattern, position, indexMin, indexMax):
        _status = self.dll.rsscope_ConfigureUARTTriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(pattern),
            ViInt32(position),
            ViInt32(indexMin),
            ViInt32(indexMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryUARTFrameCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryUARTFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryUARTFrameData(self, instrSession, serialBus, word):
        source = ViInt32()
        status = ViInt32()
        start = ViReal64()
        txValue = ViInt32()
        rxValue = ViInt32()
        _status = self.dll.rsscope_QueryUARTFrameData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            byref(source),
            byref(status),
            byref(start),
            byref(txValue),
            byref(rxValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        source = int(source.value)
        status = int(status.value)
        start = float(start.value)
        txValue = int(txValue.value)
        rxValue = int(rxValue.value)
        return source, status, start, txValue, rxValue

    def QueryUARTPrimaryBitRate(self, instrSession, serialBus):
        bitRate = ViInt64()
        _status = self.dll.rsscope_QueryUARTPrimaryBitRate(ViSession(instrSession), ViInt32(serialBus), byref(bitRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(bitRate.value)

    def ConfigureLINSource(self, instrSession, serialBus, waveformSource):
        _status = self.dll.rsscope_ConfigureLINSource(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(waveformSource)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINThreshold(self, instrSession, serialBus, preset, manualThreshold):
        _status = self.dll.rsscope_ConfigureLINThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViReal64(manualThreshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINPolarity(self, instrSession, serialBus, polarity):
        _status = self.dll.rsscope_ConfigureLINPolarity(ViSession(instrSession), ViInt32(serialBus), ViInt32(polarity))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINStandard(self, instrSession, serialBus, standard, bitRate):
        _status = self.dll.rsscope_ConfigureLINStandard(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(standard),
            ViInt32(bitRate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINTriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureLINTriggerType(ViSession(instrSession), ViInt32(trigger), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINTriggerID(self, instrSession, trigger, condition, IDMin, IDMax):
        _status = self.dll.rsscope_ConfigureLINTriggerID(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(IDMin),
            ViString(IDMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINTriggerIDOR(self, instrSession, trigger, ORSlot, ORSlotState, frameID):
        _status = self.dll.rsscope_ConfigureLINTriggerIDOR(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(ORSlot),
            ViBoolean(ORSlotState),
            ViString(frameID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINTriggerData(self, instrSession, trigger, condition, dataMin, dataMax):
        _status = self.dll.rsscope_ConfigureLINTriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(dataMin),
            ViString(dataMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINTriggerDataSetup(self, instrSession, trigger, condition, dataLength, transfer):
        _status = self.dll.rsscope_ConfigureLINTriggerDataSetup(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(dataLength),
            ViInt32(transfer),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINTriggerErrorConditions(self, instrSession, trigger, checksum, IDParityError, syncError):
        _status = self.dll.rsscope_ConfigureLINTriggerErrorConditions(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(checksum),
            ViBoolean(IDParityError),
            ViBoolean(syncError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINTriggerCRCErrorPattern(self, instrSession, trigger, frameID, dataLength):
        _status = self.dll.rsscope_ConfigureLINTriggerCRCErrorPattern(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frameID),
            ViInt32(dataLength),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINTriggerCRCErrorStandard(self, instrSession, trigger, standard):
        _status = self.dll.rsscope_ConfigureLINTriggerCRCErrorStandard(
            ViSession(instrSession), ViInt32(trigger), ViInt32(standard)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryLINFrameCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryLINFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryLINFrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        version = ViInt32()
        _status = self.dll.rsscope_QueryLINFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(version),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        version = int(version.value)
        return frameStatus, frameStart, frameStop, version

    def QueryLINFrameID(self, instrSession, serialBus, frame):
        value = ViInt32()
        parity = ViInt32()
        status = ViInt32()
        _status = self.dll.rsscope_QueryLINFrameID(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(value),
            byref(parity),
            byref(status),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        value = int(value.value)
        parity = int(parity.value)
        status = int(status.value)
        return value, parity, status

    def QueryLINFrameField(self, instrSession, serialBus, frame, field):
        fieldValue = ViInt32()
        fieldStatus = ViInt32()
        _status = self.dll.rsscope_QueryLINFrameField(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            byref(fieldValue),
            byref(fieldStatus),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        fieldValue = int(fieldValue.value)
        fieldStatus = int(fieldStatus.value)
        return fieldValue, fieldStatus

    def QueryLINFrameBitRate(self, instrSession, serialBus, frame):
        bitRate = ViInt64()
        _status = self.dll.rsscope_QueryLINFrameBitRate(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(bitRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(bitRate.value)

    def QueryLINFrameData(self, instrSession, serialBus, frame, byteNumber):
        data = ViInt32()
        statusCode = ViInt32()
        _status = self.dll.rsscope_QueryLINFrameData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(byteNumber),
            byref(data),
            byref(statusCode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = int(data.value)
        statusCode = int(statusCode.value)
        return data, statusCode

    def QueryLINFrameAllData(self, instrSession, serialBus, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryLINFrameAllData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryLINFrameAllSymbolicData(self, instrSession, serialBus, frame, bufferSize):
        symbolicData = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryLINFrameAllSymbolicData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            symbolicData,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        symbolicData = decode(symbolicData)
        returnedValues = int(returnedValues.value)
        return symbolicData, returnedValues

    def ExportLINFrameAllSymbolicDataToFile(self, instrSession, serialBus, frame, fileName, timeout):
        _status = self.dll.rsscope_ExportLINFrameAllSymbolicDataToFile(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViString(fileName),
            ViUInt32(timeout),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryLINFrameLabel(self, instrSession, serialBus, frame, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryLINFrameLabel(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def ConfigureLINSearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureLINSearchType(ViSession(instrSession), ViString(searchName), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINSearchCriteria(
        self,
        instrSession,
        searchName,
        startOfFrame,
        identifier,
        identifierOR,
        identifierData,
        wakeupFrame,
        errorCondition,
    ):
        _status = self.dll.rsscope_ConfigureLINSearchCriteria(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(startOfFrame),
            ViBoolean(identifier),
            ViBoolean(identifierOR),
            ViBoolean(identifierData),
            ViBoolean(wakeupFrame),
            ViBoolean(errorCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINSearchID(self, instrSession, searchName, condition, IDMin, IDMax):
        _status = self.dll.rsscope_ConfigureLINSearchID(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(IDMin),
            ViString(IDMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINSearchIDOR(self, instrSession, searchName, ORSlot, ORSlotState, frameID):
        _status = self.dll.rsscope_ConfigureLINSearchIDOR(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(ORSlot),
            ViBoolean(ORSlotState),
            ViString(frameID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINSearchData(self, instrSession, searchName, condition, dataMin, dataMax):
        _status = self.dll.rsscope_ConfigureLINSearchData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(dataMin),
            ViString(dataMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINSearchDataSetup(self, instrSession, searchName, condition, dataLength, transfer):
        _status = self.dll.rsscope_ConfigureLINSearchDataSetup(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(dataLength),
            ViInt32(transfer),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINSearchErrorConditions(self, instrSession, searchName, checksum, IDParityError, syncError):
        _status = self.dll.rsscope_ConfigureLINSearchErrorConditions(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(checksum),
            ViBoolean(IDParityError),
            ViBoolean(syncError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINSearchCRCErrorPattern(self, instrSession, searchName, frameID, dataLength):
        _status = self.dll.rsscope_ConfigureLINSearchCRCErrorPattern(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frameID),
            ViInt32(dataLength),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLINSearchCRCErrorStandard(self, instrSession, searchName, standard):
        _status = self.dll.rsscope_ConfigureLINSearchCRCErrorStandard(
            ViSession(instrSession), ViString(searchName), ViInt32(standard)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryLINSearchFrameCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryLINSearchFrameCount(ViSession(instrSession), ViString(searchName), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryLINSearchFrameStatus(self, instrSession, searchName, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        version = ViInt32()
        _status = self.dll.rsscope_QueryLINSearchFrameStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(version),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        version = int(version.value)
        return frameStatus, frameStart, frameStop, version

    def QueryLINSearchFrameID(self, instrSession, searchName, frame):
        value = ViInt32()
        parity = ViInt32()
        status = ViInt32()
        _status = self.dll.rsscope_QueryLINSearchFrameID(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(value),
            byref(parity),
            byref(status),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        value = int(value.value)
        parity = int(parity.value)
        status = int(status.value)
        return value, parity, status

    def QueryLINSearchFrameField(self, instrSession, searchName, frame, field):
        fieldValue = ViInt32()
        fieldStatus = ViInt32()
        _status = self.dll.rsscope_QueryLINSearchFrameField(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            byref(fieldValue),
            byref(fieldStatus),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        fieldValue = int(fieldValue.value)
        fieldStatus = int(fieldStatus.value)
        return fieldValue, fieldStatus

    def QueryLINSearchFrameData(self, instrSession, searchName, frame, byteNumber):
        data = ViInt32()
        statusCode = ViInt32()
        _status = self.dll.rsscope_QueryLINSearchFrameData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(byteNumber),
            byref(data),
            byref(statusCode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = int(data.value)
        statusCode = int(statusCode.value)
        return data, statusCode

    def QueryLINSearchFrameAllData(self, instrSession, searchName, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryLINSearchFrameAllData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryLINSearchFrameLabel(self, instrSession, searchName, frame, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryLINSearchFrameLabel(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def ConfigureCANSource(self, instrSession, serialBus, line, waveformSource):
        _status = self.dll.rsscope_ConfigureCANSource(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(line),
            ViInt32(waveformSource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANThreshold(self, instrSession, serialBus, preset, manualThreshold):
        _status = self.dll.rsscope_ConfigureCANThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViReal64(manualThreshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANBitRate(self, instrSession, serialBus, bitRate):
        _status = self.dll.rsscope_ConfigureCANBitRate(ViSession(instrSession), ViInt32(serialBus), ViInt32(bitRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANFD(self, instrSession, serialBus, enable, bitRate):
        _status = self.dll.rsscope_ConfigureCANFD(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViBoolean(enable),
            ViInt32(bitRate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANFDStandard(self, instrSession, serialBus, standard):
        _status = self.dll.rsscope_ConfigureCANFDStandard(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(standard)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANFDJumpWidth(self, instrSession, serialBus, jumpWidth):
        _status = self.dll.rsscope_ConfigureCANFDJumpWidth(
            ViSession(instrSession), ViInt32(serialBus), ViReal64(jumpWidth)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANFDSamplePointAbsolute(self, instrSession, serialBus, timeSegment1, timeSegment2):
        _status = self.dll.rsscope_ConfigureCANFDSamplePointAbsolute(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(timeSegment1),
            ViInt32(timeSegment2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANFDSamplePointRelative(self, instrSession, serialBus, samplePoint):
        _status = self.dll.rsscope_ConfigureCANFDSamplePointRelative(
            ViSession(instrSession), ViInt32(serialBus), ViReal64(samplePoint)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANJumpWidth(self, instrSession, serialBus, jumpWidth):
        _status = self.dll.rsscope_ConfigureCANJumpWidth(
            ViSession(instrSession), ViInt32(serialBus), ViReal64(jumpWidth)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSamplePointAbsolute(self, instrSession, serialBus, timeSegment1, timeSegment2):
        _status = self.dll.rsscope_ConfigureCANSamplePointAbsolute(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(timeSegment1),
            ViInt32(timeSegment2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSamplePointRelative(self, instrSession, serialBus, samplePoint):
        _status = self.dll.rsscope_ConfigureCANSamplePointRelative(
            ViSession(instrSession), ViInt32(serialBus), ViReal64(samplePoint)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANTriggerType(self, instrSession, trigger, type, frameType):
        _status = self.dll.rsscope_ConfigureCANTriggerType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(type), ViInt32(frameType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANTriggerStandard(self, instrSession, trigger, standard):
        _status = self.dll.rsscope_ConfigureCANTriggerStandard(
            ViSession(instrSession), ViInt32(trigger), ViInt32(standard)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANTriggerFDBits(self, instrSession, trigger, FDF, BRS, ESI):
        _status = self.dll.rsscope_ConfigureCANTriggerFDBits(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(FDF),
            ViInt32(BRS),
            ViInt32(ESI),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANTriggerID(self, instrSession, trigger, IDType, condition, IDMin, IDMax):
        _status = self.dll.rsscope_ConfigureCANTriggerID(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(IDType),
            ViInt32(condition),
            ViString(IDMin),
            ViString(IDMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANTriggerData(self, instrSession, trigger, transfer, condition, dataMin, dataMax):
        _status = self.dll.rsscope_ConfigureCANTriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(transfer),
            ViInt32(condition),
            ViString(dataMin),
            ViString(dataMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANTriggerDCL(self, instrSession, trigger, condition, DLC):
        _status = self.dll.rsscope_ConfigureCANTriggerDCL(
            ViSession(instrSession), ViInt32(trigger), ViInt32(condition), ViInt32(DLC)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryCANTriggerNumberOfDataBytes(self, instrSession, trigger):
        numberOfDataBytes = ViInt32()
        _status = self.dll.rsscope_QueryCANTriggerNumberOfDataBytes(
            ViSession(instrSession), ViInt32(trigger), byref(numberOfDataBytes)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(numberOfDataBytes.value)

    def ConfigureCANTriggerDataPosition(self, instrSession, trigger, condition, positionMin, positionMax):
        _status = self.dll.rsscope_ConfigureCANTriggerDataPosition(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(positionMin),
            ViInt32(positionMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANTriggerErrorConditions(self, instrSession, trigger, CRC, stuffing, form, ack):
        _status = self.dll.rsscope_ConfigureCANTriggerErrorConditions(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(CRC),
            ViBoolean(stuffing),
            ViBoolean(form),
            ViBoolean(ack),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANTriggerStuffCountError(self, instrSession, trigger, stuffCountError):
        _status = self.dll.rsscope_ConfigureCANTriggerStuffCountError(
            ViSession(instrSession), ViInt32(trigger), ViBoolean(stuffCountError)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSymbolicTriggerMessage(self, instrSession, trigger, message, triggerOnSignal):
        _status = self.dll.rsscope_ConfigureCANSymbolicTriggerMessage(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(message),
            ViBoolean(triggerOnSignal),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSymbolicTriggerSignal(self, instrSession, trigger, signal, condition, dataMin, dataMax):
        _status = self.dll.rsscope_ConfigureCANSymbolicTriggerSignal(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(signal),
            ViInt32(condition),
            ViReal64(dataMin),
            ViReal64(dataMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSymbolicTriggerSignalEnumValue(self, instrSession, trigger, enumValue):
        _status = self.dll.rsscope_ConfigureCANSymbolicTriggerSignalEnumValue(
            ViSession(instrSession), ViInt32(trigger), ViInt32(enumValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryCANFrameCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryCANFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryCANFrameFDStandard(self, instrSession, serialBus, frame):
        standard = ViInt32()
        _status = self.dll.rsscope_QueryCANFrameFDStandard(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(standard)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(standard.value)

    def QueryCANFrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryCANFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QueryCANFrameID(self, instrSession, serialBus, frame):
        IDType = ViInt32()
        IDValue = ViInt32()
        statusCode = ViInt32()
        _status = self.dll.rsscope_QueryCANFrameID(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(IDType),
            byref(IDValue),
            byref(statusCode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        IDType = int(IDType.value)
        IDValue = int(IDValue.value)
        statusCode = int(statusCode.value)
        return IDType, IDValue, statusCode

    def QueryCANFrameField(self, instrSession, serialBus, frame, field):
        fieldValue = ViInt32()
        fieldStatus = ViInt32()
        _status = self.dll.rsscope_QueryCANFrameField(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            byref(fieldValue),
            byref(fieldStatus),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        fieldValue = int(fieldValue.value)
        fieldStatus = int(fieldStatus.value)
        return fieldValue, fieldStatus

    def QueryCANFrameBitRate(self, instrSession, serialBus, frame):
        bitRate = ViInt64()
        _status = self.dll.rsscope_QueryCANFrameBitRate(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(bitRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(bitRate.value)

    def QueryCANFrameBitStuffingError(self, instrSession, serialBus, frame):
        errorPosition = ViReal64()
        _status = self.dll.rsscope_QueryCANFrameBitStuffingError(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(errorPosition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(errorPosition.value)

    def QueryCANFrameData(self, instrSession, serialBus, frame, byteNumber):
        data = ViInt32()
        statusCode = ViInt32()
        _status = self.dll.rsscope_QueryCANFrameData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(byteNumber),
            byref(data),
            byref(statusCode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = int(data.value)
        statusCode = int(statusCode.value)
        return data, statusCode

    def QueryCANFrameAllData(self, instrSession, serialBus, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryCANFrameAllData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryCANFrameAllSymbolicData(self, instrSession, serialBus, frame, bufferSize):
        result = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryCANFrameAllSymbolicData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            result,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(result)

    def QueryCANFrameLabel(self, instrSession, serialBus, frame, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryCANFrameLabel(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def QueryCANFrameNumberOfBytes(self, instrSession, serialBus, frame):
        numberOfBytes = ViInt32()
        _status = self.dll.rsscope_QueryCANFrameNumberOfBytes(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(numberOfBytes),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(numberOfBytes.value)

    def QueryCANFrameFormErrorCause(self, instrSession, serialBus, frame):
        formErrorCause = ViInt32()
        _status = self.dll.rsscope_QueryCANFrameFormErrorCause(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(formErrorCause),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(formErrorCause.value)

    def QueryCANFrameFDStuffCount(self, instrSession, serialBus, frame):
        stuffCount = ViInt32()
        _status = self.dll.rsscope_QueryCANFrameFDStuffCount(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(stuffCount)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(stuffCount.value)

    def ExportCANFrameAllSymbolicDataToFile(self, instrSession, serialBus, frame, fileName, timeout):
        _status = self.dll.rsscope_ExportCANFrameAllSymbolicDataToFile(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViString(fileName),
            ViUInt32(timeout),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSearchState(self, instrSession, searchName, enabled):
        _status = self.dll.rsscope_ConfigureCANSearchState(
            ViSession(instrSession), ViString(searchName), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CANSearchCopyFromA(self, instrSession, searchName):
        _status = self.dll.rsscope_CANSearchCopyFromA(ViSession(instrSession), ViString(searchName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSearchCriteria(
        self,
        instrSession,
        searchName,
        startOfFrame,
        frameType,
        frameIdentifier,
        identifierData,
        errorCondition,
    ):
        _status = self.dll.rsscope_ConfigureCANSearchCriteria(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(startOfFrame),
            ViBoolean(frameType),
            ViBoolean(frameIdentifier),
            ViBoolean(identifierData),
            ViBoolean(errorCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSearchSymbolic(self, instrSession, searchName, enabled):
        _status = self.dll.rsscope_ConfigureCANSearchSymbolic(
            ViSession(instrSession), ViString(searchName), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSearchFrameType(self, instrSession, searchName, frameType):
        _status = self.dll.rsscope_ConfigureCANSearchFrameType(
            ViSession(instrSession), ViString(searchName), ViInt32(frameType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSearchStandard(self, instrSession, searchName, standard):
        _status = self.dll.rsscope_ConfigureCANSearchStandard(
            ViSession(instrSession), ViString(searchName), ViInt32(standard)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSearchID(self, instrSession, searchName, IDType, condition, IDMin, IDMax):
        _status = self.dll.rsscope_ConfigureCANSearchID(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(IDType),
            ViInt32(condition),
            ViString(IDMin),
            ViString(IDMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSearchFDBits(self, instrSession, searchName, FDF, BRS, ESI):
        _status = self.dll.rsscope_ConfigureCANSearchFDBits(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(FDF),
            ViInt32(BRS),
            ViInt32(ESI),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSearchData(self, instrSession, searchName, transfer, condition, dataMin, dataMax):
        _status = self.dll.rsscope_ConfigureCANSearchData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(transfer),
            ViInt32(condition),
            ViString(dataMin),
            ViString(dataMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSearchDCL(self, instrSession, searchName, condition, DLC):
        _status = self.dll.rsscope_ConfigureCANSearchDCL(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(DLC),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSearchDataPosition(self, instrSession, searchName, condition, positionMin, positionMax):
        _status = self.dll.rsscope_ConfigureCANSearchDataPosition(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(positionMin),
            ViInt32(positionMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSearchErrorConditions(self, instrSession, searchName, CRC, stuffing, form, ack):
        _status = self.dll.rsscope_ConfigureCANSearchErrorConditions(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(CRC),
            ViBoolean(stuffing),
            ViBoolean(form),
            ViBoolean(ack),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSearchStuffCountError(self, instrSession, searchName, stuffCountError):
        _status = self.dll.rsscope_ConfigureCANSearchStuffCountError(
            ViSession(instrSession), ViString(searchName), ViBoolean(stuffCountError)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSymbolicSearchMessage(self, instrSession, searchName, message, searchOnSignal):
        _status = self.dll.rsscope_ConfigureCANSymbolicSearchMessage(
            ViSession(instrSession),
            ViString(searchName),
            ViString(message),
            ViBoolean(searchOnSignal),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSymbolicSearchSignal(self, instrSession, searchName, signal, condition, dataMin, dataMax):
        _status = self.dll.rsscope_ConfigureCANSymbolicSearchSignal(
            ViSession(instrSession),
            ViString(searchName),
            ViString(signal),
            ViInt32(condition),
            ViReal64(dataMin),
            ViReal64(dataMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANSymbolicSearchSignalEnumValue(self, instrSession, searchName, enumValue):
        _status = self.dll.rsscope_ConfigureCANSymbolicSearchSignalEnumValue(
            ViSession(instrSession), ViString(searchName), ViInt32(enumValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryCANSearchFrameCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryCANSearchFrameCount(ViSession(instrSession), ViString(searchName), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryCANSearchFrameStatus(self, instrSession, frame, searchName):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryCANSearchFrameStatus(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QueryCANSearchFrameID(self, instrSession, frame, searchName):
        IDType = ViInt32()
        IDValue = ViInt32()
        statusCode = ViInt32()
        _status = self.dll.rsscope_QueryCANSearchFrameID(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            byref(IDType),
            byref(IDValue),
            byref(statusCode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        IDType = int(IDType.value)
        IDValue = int(IDValue.value)
        statusCode = int(statusCode.value)
        return IDType, IDValue, statusCode

    def QueryCANSearchFrameField(self, instrSession, frame, searchName, field):
        fieldValue = ViInt32()
        fieldStatus = ViInt32()
        _status = self.dll.rsscope_QueryCANSearchFrameField(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            ViInt32(field),
            byref(fieldValue),
            byref(fieldStatus),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        fieldValue = int(fieldValue.value)
        fieldStatus = int(fieldStatus.value)
        return fieldValue, fieldStatus

    def QueryCANSearchFrameBitStuffingError(self, instrSession, frame, searchName):
        errorPosition = ViReal64()
        _status = self.dll.rsscope_QueryCANSearchFrameBitStuffingError(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            byref(errorPosition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(errorPosition.value)

    def QueryCANSearchFrameData(self, instrSession, frame, byteNumber, searchName):
        data = ViInt32()
        statusCode = ViInt32()
        _status = self.dll.rsscope_QueryCANSearchFrameData(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(byteNumber),
            ViString(searchName),
            byref(data),
            byref(statusCode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = int(data.value)
        statusCode = int(statusCode.value)
        return data, statusCode

    def QueryCANSearchFrameAllData(self, instrSession, frame, searchName, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryCANSearchFrameAllData(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryCANSearchFrameSymbolicData(self, instrSession, frame, searchName, bufferSize):
        result = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryCANSearchFrameSymbolicData(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            ViInt32(bufferSize),
            result,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(result)

    def QueryCANSearchFrameLabel(self, instrSession, frame, searchName, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryCANSearchFrameLabel(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def QueryCANFDSearchFrameStandard(self, instrSession, frame, searchName):
        frameStandard = ViInt32()
        _status = self.dll.rsscope_QueryCANFDSearchFrameStandard(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            byref(frameStandard),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameStandard.value)

    def QueryCANSearchFrameNumberOfBytes(self, instrSession, frame, searchName):
        numberOfBytes = ViInt32()
        _status = self.dll.rsscope_QueryCANSearchFrameNumberOfBytes(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            byref(numberOfBytes),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(numberOfBytes.value)

    def QueryCANSearchFrameFormErrorCause(self, instrSession, frame, searchName):
        formErrorCause = ViInt32()
        _status = self.dll.rsscope_QueryCANSearchFrameFormErrorCause(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            byref(formErrorCause),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(formErrorCause.value)

    def QueryCANFDSearchFrameStuffCount(self, instrSession, frame, searchName):
        stuffCount = ViInt32()
        _status = self.dll.rsscope_QueryCANFDSearchFrameStuffCount(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            byref(stuffCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(stuffCount.value)

    def ConfigureFlexRaySource(
        self,
        instrSession,
        serialBus,
        line,
        waveformSource,
        channel,
        separateHeaderBits,
        bitRate,
    ):
        _status = self.dll.rsscope_ConfigureFlexRaySource(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(line),
            ViInt32(waveformSource),
            ViInt32(channel),
            ViBoolean(separateHeaderBits),
            ViInt32(bitRate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRaySourceType(self, instrSession, serialBus, sourceType):
        _status = self.dll.rsscope_ConfigureFlexRaySourceType(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(sourceType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRayThresholdSingle(
        self,
        instrSession,
        serialBus,
        polarity,
        preset,
        manualThresholdHigh,
        manualThresholdLow,
    ):
        _status = self.dll.rsscope_ConfigureFlexRayThresholdSingle(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(polarity),
            ViInt32(preset),
            ViReal64(manualThresholdHigh),
            ViReal64(manualThresholdLow),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRayThresholdDifferential(
        self, instrSession, serialBus, preset, manualThresholdHigh, manualThresholdLow
    ):
        _status = self.dll.rsscope_ConfigureFlexRayThresholdDifferential(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViReal64(manualThresholdHigh),
            ViReal64(manualThresholdLow),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRayThresholdLogic(
        self,
        instrSession,
        serialBus,
        preset,
        manualThresholdDataLine,
        manualThresholdEnableLine,
    ):
        _status = self.dll.rsscope_ConfigureFlexRayThresholdLogic(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViReal64(manualThresholdDataLine),
            ViReal64(manualThresholdEnableLine),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRayTriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureFlexRayTriggerType(ViSession(instrSession), ViInt32(trigger), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRayTriggerIndicatorBits(
        self, instrSession, trigger, payloadPreamble, nullFrame, syncFrame, startupFrame
    ):
        _status = self.dll.rsscope_ConfigureFlexRayTriggerIndicatorBits(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(payloadPreamble),
            ViInt32(nullFrame),
            ViInt32(syncFrame),
            ViInt32(startupFrame),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRayTriggerFrameID(self, instrSession, trigger, condition, IDMin, IDMax):
        _status = self.dll.rsscope_ConfigureFlexRayTriggerFrameID(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(IDMin),
            ViString(IDMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRayTriggerPayloadLength(self, instrSession, trigger, condition, payloadMin, payloadMax):
        _status = self.dll.rsscope_ConfigureFlexRayTriggerPayloadLength(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(payloadMin),
            ViInt32(payloadMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRayTriggerCycleCount(self, instrSession, trigger, condition, cycleMin, cycleMax, cycleStep):
        _status = self.dll.rsscope_ConfigureFlexRayTriggerCycleCount(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(cycleMin),
            ViInt32(cycleMax),
            ViInt32(cycleStep),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRayTriggerData(self, instrSession, trigger, condition, dataMin, dataMax):
        _status = self.dll.rsscope_ConfigureFlexRayTriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(dataMin),
            ViString(dataMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRayTriggerDataPosition(self, instrSession, trigger, condition, positionMin, positionMax):
        _status = self.dll.rsscope_ConfigureFlexRayTriggerDataPosition(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(positionMin),
            ViInt32(positionMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRayTriggerSymbol(self, instrSession, trigger, symbol):
        _status = self.dll.rsscope_ConfigureFlexRayTriggerSymbol(
            ViSession(instrSession), ViInt32(trigger), ViInt32(symbol)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRayTriggerErrorConditions(self, instrSession, trigger, FSS, BSS, FES, headerCRC, payloadCRC):
        _status = self.dll.rsscope_ConfigureFlexRayTriggerErrorConditions(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(FSS),
            ViBoolean(BSS),
            ViBoolean(FES),
            ViBoolean(headerCRC),
            ViBoolean(payloadCRC),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryFlexRayFrameCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryFlexRayFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryFlexRayCycleCount(self, instrSession, serialBus, frame):
        count = ViInt32()
        _status = self.dll.rsscope_QueryFlexRayCycleCount(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryFlexRayFrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryFlexRayFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QueryFlexRayFrameField(self, instrSession, serialBus, frame, field):
        fieldValue = ViInt32()
        fieldStatus = ViInt32()
        _status = self.dll.rsscope_QueryFlexRayFrameField(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            byref(fieldValue),
            byref(fieldStatus),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        fieldValue = int(fieldValue.value)
        fieldStatus = int(fieldStatus.value)
        return fieldValue, fieldStatus

    def QueryFlexRayFrameAllData(self, instrSession, serialBus, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryFlexRayFrameAllData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryFlexRayFrameLabel(self, instrSession, serialBus, frame, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryFlexRayFrameLabel(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def ConfigureFlexRaySearchState(self, instrSession, searchName, enabled):
        _status = self.dll.rsscope_ConfigureFlexRaySearchState(
            ViSession(instrSession), ViString(searchName), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FlexRaySearchCopyFromA(self, instrSession, searchName):
        _status = self.dll.rsscope_FlexRaySearchCopyFromA(ViSession(instrSession), ViString(searchName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRaySearchCriteria(
        self,
        instrSession,
        searchName,
        startOfFrame,
        symbol,
        identifierData,
        errorCondition,
    ):
        _status = self.dll.rsscope_ConfigureFlexRaySearchCriteria(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(startOfFrame),
            ViBoolean(symbol),
            ViBoolean(identifierData),
            ViBoolean(errorCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRaySearchIndicatorBits(
        self,
        instrSession,
        searchName,
        payloadPreamble,
        nullFrame,
        syncFrame,
        startupFrame,
    ):
        _status = self.dll.rsscope_ConfigureFlexRaySearchIndicatorBits(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(payloadPreamble),
            ViInt32(nullFrame),
            ViInt32(syncFrame),
            ViInt32(startupFrame),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRaySearchFrameID(self, instrSession, searchName, condition, IDMin, IDMax):
        _status = self.dll.rsscope_ConfigureFlexRaySearchFrameID(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(IDMin),
            ViString(IDMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRaySearchPayloadLength(self, instrSession, searchName, condition, payloadMin, payloadMax):
        _status = self.dll.rsscope_ConfigureFlexRaySearchPayloadLength(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(payloadMin),
            ViInt32(payloadMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRaySearchCycleCount(self, instrSession, searchName, condition, cycleMin, cycleMax, cycleStep):
        _status = self.dll.rsscope_ConfigureFlexRaySearchCycleCount(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(cycleMin),
            ViInt32(cycleMax),
            ViInt32(cycleStep),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRaySearchData(self, instrSession, searchName, condition, dataMin, dataMax):
        _status = self.dll.rsscope_ConfigureFlexRaySearchData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(dataMin),
            ViString(dataMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRaySearchDataPosition(self, instrSession, searchName, condition, positionMin, positionMax):
        _status = self.dll.rsscope_ConfigureFlexRaySearchDataPosition(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(positionMin),
            ViInt32(positionMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRaySearchID(self, instrSession, searchName, reserved, IDMin, IDMax):
        _status = self.dll.rsscope_ConfigureFlexRaySearchID(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(reserved),
            ViString(IDMin),
            ViString(IDMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRaySearchSymbol(self, instrSession, searchName, symbol):
        _status = self.dll.rsscope_ConfigureFlexRaySearchSymbol(
            ViSession(instrSession), ViString(searchName), ViInt32(symbol)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFlexRaySearchErrorConditions(self, instrSession, searchName, FSS, BSS, FES, headerCRC, payloadCRC):
        _status = self.dll.rsscope_ConfigureFlexRaySearchErrorConditions(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(FSS),
            ViBoolean(BSS),
            ViBoolean(FES),
            ViBoolean(headerCRC),
            ViBoolean(payloadCRC),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryFlexRaySearchFrameCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryFlexRaySearchFrameCount(
            ViSession(instrSession), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryFlexRaySearchCycleCount(self, instrSession, frame, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryFlexRaySearchCycleCount(
            ViSession(instrSession), ViInt32(frame), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryFlexRaySearchFrameStatus(self, instrSession, frame, searchName):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryFlexRaySearchFrameStatus(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QueryFlexRaySearchFrameField(self, instrSession, frame, searchName, field):
        fieldValue = ViInt32()
        fieldStatus = ViInt32()
        _status = self.dll.rsscope_QueryFlexRaySearchFrameField(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            ViInt32(field),
            byref(fieldValue),
            byref(fieldStatus),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        fieldValue = int(fieldValue.value)
        fieldStatus = int(fieldStatus.value)
        return fieldValue, fieldStatus

    def QueryFlexRaySearchFrameAllData(self, instrSession, frame, searchName, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryFlexRaySearchFrameAllData(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryFlexRaySearchFrameLabel(self, instrSession, frame, searchName, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryFlexRaySearchFrameLabel(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def ConfigureAudioVariant(self, instrSession, serialBus, variant):
        _status = self.dll.rsscope_ConfigureAudioVariant(ViSession(instrSession), ViInt32(serialBus), ViInt32(variant))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioClockLine(self, instrSession, serialBus, waveformSource, polarity, treshold):
        _status = self.dll.rsscope_ConfigureAudioClockLine(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(waveformSource),
            ViInt32(polarity),
            ViReal64(treshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioWSLine(self, instrSession, serialBus, waveformSource, polarity, treshold):
        _status = self.dll.rsscope_ConfigureAudioWSLine(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(waveformSource),
            ViInt32(polarity),
            ViReal64(treshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioDataLine(self, instrSession, serialBus, waveformSource, polarity, treshold):
        _status = self.dll.rsscope_ConfigureAudioDataLine(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(waveformSource),
            ViInt32(polarity),
            ViReal64(treshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioTresholdsCoupling(self, instrSession, serialBus, coupling, treshold):
        _status = self.dll.rsscope_ConfigureAudioTresholdsCoupling(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViBoolean(coupling),
            ViReal64(treshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioI2SSettings(
        self,
        instrSession,
        serialBus,
        wordLength,
        channelOrder,
        bitOrder,
        channelOffset,
        channelLength,
    ):
        _status = self.dll.rsscope_ConfigureAudioI2SSettings(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(wordLength),
            ViInt32(channelOrder),
            ViInt32(bitOrder),
            ViInt32(channelOffset),
            ViInt32(channelLength),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioTDMSettings(
        self,
        instrSession,
        serialBus,
        TDMChannels,
        frameOffset,
        channelLength,
        channelOffset,
        wordLength,
        bitOrder,
    ):
        _status = self.dll.rsscope_ConfigureAudioTDMSettings(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(TDMChannels),
            ViInt32(frameOffset),
            ViInt32(channelLength),
            ViInt32(channelOffset),
            ViInt32(wordLength),
            ViInt32(bitOrder),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioDataTrigger(self, instrSession, conditionNumber, channel, condition, addressMin, addressMax):
        _status = self.dll.rsscope_ConfigureAudioDataTrigger(
            ViSession(instrSession),
            ViInt32(conditionNumber),
            ViInt32(channel),
            ViInt32(condition),
            ViString(addressMin),
            ViString(addressMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioWindowTrigger(self, instrSession, conditionNumber, channel, condition, addressMin, addressMax):
        _status = self.dll.rsscope_ConfigureAudioWindowTrigger(
            ViSession(instrSession),
            ViInt32(conditionNumber),
            ViInt32(channel),
            ViInt32(condition),
            ViString(addressMin),
            ViString(addressMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioWindowTriggerLength(self, instrSession, windowLength):
        _status = self.dll.rsscope_ConfigureAudioWindowTriggerLength(ViSession(instrSession), ViInt32(windowLength))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioConditionTrigger(self, instrSession, conditionNumber, channel, condition, addressMin, addressMax):
        _status = self.dll.rsscope_ConfigureAudioConditionTrigger(
            ViSession(instrSession),
            ViInt32(conditionNumber),
            ViInt32(channel),
            ViInt32(condition),
            ViString(addressMin),
            ViString(addressMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioWordSelectTrigger(self, instrSession, slope):
        _status = self.dll.rsscope_ConfigureAudioWordSelectTrigger(ViSession(instrSession), ViInt32(slope))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioErrorConditionTrigger(self, instrSession):
        _status = self.dll.rsscope_ConfigureAudioErrorConditionTrigger(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryAudioFrameCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryAudioFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryAudioFrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        _status = self.dll.rsscope_QueryAudioFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        return frameStatus, frameStart, frameStop

    def QueryAudioFrameChannelStatus(self, instrSession, serialBus, frame, channel):
        channelStatus = ViInt32()
        channelValue = ViReal64()
        _status = self.dll.rsscope_QueryAudioFrameChannelStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(channel),
            byref(channelStatus),
            byref(channelValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        channelStatus = int(channelStatus.value)
        channelValue = float(channelValue.value)
        return channelStatus, channelValue

    def QueryAudioFrameTDMStatus(self, instrSession, serialBus, frame, channelNumber):
        TDMStatus = ViInt32()
        TDMValue = ViReal64()
        _status = self.dll.rsscope_QueryAudioFrameTDMStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(channelNumber),
            byref(TDMStatus),
            byref(TDMValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        TDMStatus = int(TDMStatus.value)
        TDMValue = float(TDMValue.value)
        return TDMStatus, TDMValue

    def ConfigureAudioTrackWaveform(self, instrSession, serialBus, channel, state):
        _status = self.dll.rsscope_ConfigureAudioTrackWaveform(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(channel),
            ViBoolean(state),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAudioTrackEnabled(self, instrSession, measurement, state):
        _status = self.dll.rsscope_ConfigureAudioTrackEnabled(
            ViSession(instrSession), ViInt32(measurement), ViBoolean(state)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FetchAudioTrackWaveform(self, instrSession, measurement, waveformSize):
        waveformArray = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        _status = self.dll.rsscope_FetchAudioTrackWaveform(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(waveformSize),
            waveformArray,
            byref(actualPoints),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        return waveformArray, actualPoints

    def FetchAudioTrackWaveformHeader(self, instrSession, measurement, bufferSize):
        referenceWaveformHeader = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_FetchAudioTrackWaveformHeader(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(bufferSize),
            referenceWaveformHeader,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(referenceWaveformHeader)

    def FetchAudioTrackWaveformDataType(self, instrSession, measurement, bufferSize):
        dataType = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_FetchAudioTrackWaveformDataType(
            ViSession(instrSession), ViInt32(measurement), ViInt32(bufferSize), dataType
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(dataType)

    def ConfigureMIL1553Source(self, instrSession, serialBus, source):
        _status = self.dll.rsscope_ConfigureMIL1553Source(ViSession(instrSession), ViInt32(serialBus), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553Polarity(self, instrSession, serialBus, polarity):
        _status = self.dll.rsscope_ConfigureMIL1553Polarity(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(polarity)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553Threshold(self, instrSession, serialBus, preset, thresholdHigh, thresholdLow):
        _status = self.dll.rsscope_ConfigureMIL1553Threshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViReal64(thresholdHigh),
            ViReal64(thresholdLow),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553Timing(self, instrSession, serialBus, minGapState, minGap, maxResponseState, maxResponse):
        _status = self.dll.rsscope_ConfigureMIL1553Timing(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViBoolean(minGapState),
            ViReal64(minGap),
            ViBoolean(maxResponseState),
            ViReal64(maxResponse),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerType(ViSession(instrSession), ViInt32(trigger), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerSyncType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerSyncType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerDataRTAPattern(self, instrSession, trigger, condition, RTAMin, RTAMax):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerDataRTAPattern(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(RTAMin),
            ViString(RTAMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerDataPattern(self, instrSession, trigger, condition, dataMin, dataMax):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerDataPattern(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(dataMin),
            ViString(dataMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerDataIndex(self, instrSession, trigger, condition, indexMin, indexMax):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerDataIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(indexMin),
            ViInt32(indexMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerCommandStatusRTAPattern(self, instrSession, trigger, condition, RTAMin, RTAMax):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerCommandStatusRTAPattern(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(RTAMin),
            ViString(RTAMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerCommandStatusInfoPattern(self, instrSession, trigger, condition, infoMin, infoMax):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerCommandStatusInfoPattern(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(infoMin),
            ViString(infoMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerCommandTransmissionDirection(self, instrSession, trigger, direction):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerCommandTransmissionDirection(
            ViSession(instrSession), ViInt32(trigger), ViInt32(direction)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerCommandRTAPattern(self, instrSession, trigger, condition, RTAMin, RTAMax):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerCommandRTAPattern(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(RTAMin),
            ViString(RTAMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerCommandSubaddressPattern(
        self, instrSession, trigger, condition, subaddressMin, subaddressMax
    ):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerCommandSubaddressPattern(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(subaddressMin),
            ViString(subaddressMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerCommandWordCountPattern(
        self, instrSession, trigger, condition, wordCountMin, wordCountMax
    ):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerCommandWordCountPattern(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(wordCountMin),
            ViString(wordCountMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerStatusFlags(
        self,
        instrSession,
        trigger,
        messageError,
        busy,
        instrumentation,
        subsystem,
        serviceRequest,
        dynamicBusControl,
        broadcastCommand,
        terminal,
    ):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerStatusFlags(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(messageError),
            ViInt32(busy),
            ViInt32(instrumentation),
            ViInt32(subsystem),
            ViInt32(serviceRequest),
            ViInt32(dynamicBusControl),
            ViInt32(broadcastCommand),
            ViInt32(terminal),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerErrorCondition(
        self,
        instrSession,
        trigger,
        synchronizationError,
        manchesterCodingError,
        parityError,
    ):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerErrorCondition(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(synchronizationError),
            ViBoolean(manchesterCodingError),
            ViBoolean(parityError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553TriggerErrorTiming(
        self, instrSession, trigger, minGapState, minGap, maxResponseState, maxResponse
    ):
        _status = self.dll.rsscope_ConfigureMIL1553TriggerErrorTiming(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(minGapState),
            ViReal64(minGap),
            ViBoolean(maxResponseState),
            ViReal64(maxResponse),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMIL1553WordCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryMIL1553WordCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryMIL1553Status(self, instrSession, serialBus, word):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        type = ViInt32()
        info = ViInt32()
        RTAddress = ViInt32()
        _status = self.dll.rsscope_QueryMIL1553Status(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            byref(status),
            byref(start),
            byref(stop),
            byref(type),
            byref(info),
            byref(RTAddress),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        type = int(type.value)
        info = int(info.value)
        RTAddress = int(RTAddress.value)
        return status, start, stop, type, info, RTAddress

    def QueryMIL1553AllData(self, instrSession, serialBus, word, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryMIL1553AllData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryMIL1553Label(self, instrSession, serialBus, word, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryMIL1553Label(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def ConfigureMIL1553SearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureMIL1553SearchType(
            ViSession(instrSession), ViString(searchName), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553SearchSyncType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureMIL1553SearchSyncType(
            ViSession(instrSession), ViString(searchName), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553SearchDataRTAPattern(self, instrSession, searchName, condition, RTAMin, RTAMax):
        _status = self.dll.rsscope_ConfigureMIL1553SearchDataRTAPattern(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(RTAMin),
            ViString(RTAMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553SearchDataPattern(self, instrSession, searchName, condition, dataMin, dataMax):
        _status = self.dll.rsscope_ConfigureMIL1553SearchDataPattern(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(dataMin),
            ViString(dataMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553SearchDataIndex(self, instrSession, searchName, condition, indexMin, indexMax):
        _status = self.dll.rsscope_ConfigureMIL1553SearchDataIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(indexMin),
            ViInt32(indexMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553SearchCommandStatusRTAPattern(self, instrSession, searchName, condition, RTAMin, RTAMax):
        _status = self.dll.rsscope_ConfigureMIL1553SearchCommandStatusRTAPattern(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(RTAMin),
            ViString(RTAMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553SearchCommandStatusInfoPattern(self, instrSession, searchName, condition, infoMin, infoMax):
        _status = self.dll.rsscope_ConfigureMIL1553SearchCommandStatusInfoPattern(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(infoMin),
            ViString(infoMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553SearchCommandTransmissionDirection(self, instrSession, searchName, direction):
        _status = self.dll.rsscope_ConfigureMIL1553SearchCommandTransmissionDirection(
            ViSession(instrSession), ViString(searchName), ViInt32(direction)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553SearchCommandRTAPattern(self, instrSession, searchName, condition, RTAMin, RTAMax):
        _status = self.dll.rsscope_ConfigureMIL1553SearchCommandRTAPattern(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(RTAMin),
            ViString(RTAMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553SearchCommandSubaddressPattern(
        self, instrSession, searchName, condition, subaddressMin, subaddressMax
    ):
        _status = self.dll.rsscope_ConfigureMIL1553SearchCommandSubaddressPattern(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(subaddressMin),
            ViString(subaddressMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553SearchCommandWordCountPattern(
        self, instrSession, searchName, condition, wordCountMin, wordCountMax
    ):
        _status = self.dll.rsscope_ConfigureMIL1553SearchCommandWordCountPattern(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(wordCountMin),
            ViString(wordCountMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553SearchStatusFlags(
        self,
        instrSession,
        searchName,
        messageError,
        busy,
        instrumentation,
        subsystem,
        serviceRequest,
        dynamicBusControl,
        broadcastCommand,
        terminal,
    ):
        _status = self.dll.rsscope_ConfigureMIL1553SearchStatusFlags(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(messageError),
            ViInt32(busy),
            ViInt32(instrumentation),
            ViInt32(subsystem),
            ViInt32(serviceRequest),
            ViInt32(dynamicBusControl),
            ViInt32(broadcastCommand),
            ViInt32(terminal),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMIL1553SearchErrorCondition(
        self,
        instrSession,
        searchName,
        synchronizationError,
        manchesterCodingError,
        parityError,
        timing,
    ):
        _status = self.dll.rsscope_ConfigureMIL1553SearchErrorCondition(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(synchronizationError),
            ViBoolean(manchesterCodingError),
            ViBoolean(parityError),
            ViBoolean(timing),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMIL1553SearchWordCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryMIL1553SearchWordCount(
            ViSession(instrSession), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryMIL1553SearchStatus(self, instrSession, searchName, word):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        type = ViInt32()
        info = ViInt32()
        RTAddress = ViInt32()
        _status = self.dll.rsscope_QueryMIL1553SearchStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            byref(status),
            byref(start),
            byref(stop),
            byref(type),
            byref(info),
            byref(RTAddress),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        type = int(type.value)
        info = int(info.value)
        RTAddress = int(RTAddress.value)
        return status, start, stop, type, info, RTAddress

    def QueryMIL1553SearchAllData(self, instrSession, searchName, word, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryMIL1553SearchAllData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryMIL1553SearchLabel(self, instrSession, searchName, word, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryMIL1553SearchLabel(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def ConfigureARINC429Source(self, instrSession, serialBus, source):
        _status = self.dll.rsscope_ConfigureARINC429Source(ViSession(instrSession), ViInt32(serialBus), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429Polarity(self, instrSession, serialBus, polarity):
        _status = self.dll.rsscope_ConfigureARINC429Polarity(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(polarity)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429BitRate(self, instrSession, serialBus, bitRateMode, bitRateValue):
        _status = self.dll.rsscope_ConfigureARINC429BitRate(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(bitRateMode),
            ViInt32(bitRateValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429Threshold(self, instrSession, serialBus, preset, thresholdHigh, thresholdLow):
        _status = self.dll.rsscope_ConfigureARINC429Threshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViReal64(thresholdHigh),
            ViReal64(thresholdLow),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429Timing(self, instrSession, serialBus, minGapState, minGap, maxGapState, maxGap):
        _status = self.dll.rsscope_ConfigureARINC429Timing(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViBoolean(minGapState),
            ViInt32(minGap),
            ViBoolean(maxGapState),
            ViInt32(maxGap),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429TriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureARINC429TriggerType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429TriggerLabelData(self, instrSession, trigger, SDI, SSM):
        _status = self.dll.rsscope_ConfigureARINC429TriggerLabelData(
            ViSession(instrSession), ViInt32(trigger), ViInt32(SDI), ViInt32(SSM)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429TriggerLabelPattern(self, instrSession, trigger, condition, labelMin, labelMax):
        _status = self.dll.rsscope_ConfigureARINC429TriggerLabelPattern(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(labelMin),
            ViString(labelMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429TriggerDataPattern(self, instrSession, trigger, condition, dataMin, dataMax):
        _status = self.dll.rsscope_ConfigureARINC429TriggerDataPattern(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(dataMin),
            ViString(dataMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429TriggerErrorCondition(self, instrSession, trigger, codingError, parityError):
        _status = self.dll.rsscope_ConfigureARINC429TriggerErrorCondition(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(codingError),
            ViBoolean(parityError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429TriggerErrorTiming(
        self, instrSession, trigger, minGapState, minGap, maxResponseState, maxResponse
    ):
        _status = self.dll.rsscope_ConfigureARINC429TriggerErrorTiming(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(minGapState),
            ViInt32(minGap),
            ViBoolean(maxResponseState),
            ViInt32(maxResponse),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryARINC429WordCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryARINC429WordCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryARINC429Status(self, instrSession, serialBus, word):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        pattern = ViInt32()
        SDI = ViInt32()
        SSM = ViInt32()
        _status = self.dll.rsscope_QueryARINC429Status(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            byref(status),
            byref(start),
            byref(stop),
            byref(pattern),
            byref(SDI),
            byref(SSM),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        pattern = int(pattern.value)
        SDI = int(SDI.value)
        SSM = int(SSM.value)
        return status, start, stop, pattern, SDI, SSM

    def QueryARINC429AllData(self, instrSession, serialBus, word, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryARINC429AllData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryARINC429Label(self, instrSession, serialBus, word, bufferSize):
        labelName = ARRAY_ViChar(bufferSize)
        label = ViInt32()
        _status = self.dll.rsscope_QueryARINC429Label(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            ViInt32(bufferSize),
            labelName,
            byref(label),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        labelName = decode(labelName)
        label = int(label.value)
        return labelName, label

    def ConfigureARINC429SearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureARINC429SearchType(
            ViSession(instrSession), ViString(searchName), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429SearchLabelData(self, instrSession, searchName, SDI, SSM):
        _status = self.dll.rsscope_ConfigureARINC429SearchLabelData(
            ViSession(instrSession), ViString(searchName), ViInt32(SDI), ViInt32(SSM)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429SearchLabelPattern(self, instrSession, searchName, condition, labelMin, labelMax):
        _status = self.dll.rsscope_ConfigureARINC429SearchLabelPattern(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(labelMin),
            ViString(labelMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429SearchDataPattern(self, instrSession, searchName, condition, dataMin, dataMax):
        _status = self.dll.rsscope_ConfigureARINC429SearchDataPattern(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(dataMin),
            ViString(dataMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureARINC429SearchErrorCondition(self, instrSession, searchName, codingError, parityError, timingError):
        _status = self.dll.rsscope_ConfigureARINC429SearchErrorCondition(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(codingError),
            ViBoolean(parityError),
            ViBoolean(timingError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryARINC429SearchWordCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryARINC429SearchWordCount(
            ViSession(instrSession), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryARINC429SearchStatus(self, instrSession, searchName, word):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        pattern = ViInt32()
        SDI = ViInt32()
        SSM = ViInt32()
        _status = self.dll.rsscope_QueryARINC429SearchStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            byref(status),
            byref(start),
            byref(stop),
            byref(pattern),
            byref(SDI),
            byref(SSM),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        pattern = int(pattern.value)
        SDI = int(SDI.value)
        SSM = int(SSM.value)
        return status, start, stop, pattern, SDI, SSM

    def QueryARINC429SearchAllData(self, instrSession, searchName, word, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryARINC429SearchAllData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryARINC429SearchLabel(self, instrSession, searchName, word, bufferSize):
        labelName = ARRAY_ViChar(bufferSize)
        label = ViInt32()
        _status = self.dll.rsscope_QueryARINC429SearchLabel(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            ViInt32(bufferSize),
            labelName,
            byref(label),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        labelName = decode(labelName)
        label = int(label.value)
        return labelName, label

    def ConfigureRFFESource(self, instrSession, serialBus, line, waveformSource):
        _status = self.dll.rsscope_ConfigureRFFESource(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(line),
            ViInt32(waveformSource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFEThreshold(self, instrSession, serialBus, preset, line, thresholdType, threshold):
        _status = self.dll.rsscope_ConfigureRFFEThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViInt32(line),
            ViInt32(thresholdType),
            ViReal64(threshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFEThresholdsCoupling(self, instrSession, serialBus, coupling):
        _status = self.dll.rsscope_ConfigureRFFEThresholdsCoupling(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(coupling)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFEGlitchFilter(self, instrSession, serialBus, enable, width):
        _status = self.dll.rsscope_ConfigureRFFEGlitchFilter(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViBoolean(enable),
            ViReal64(width),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFETiming(
        self,
        instrSession,
        serialBus,
        enableMinimumGap,
        minimumGapTime,
        enableMaximumGap,
        maximumGapTime,
    ):
        _status = self.dll.rsscope_ConfigureRFFETiming(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViBoolean(enableMinimumGap),
            ViReal64(minimumGapTime),
            ViBoolean(enableMaximumGap),
            ViReal64(maximumGapTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFETriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureRFFETriggerType(ViSession(instrSession), ViInt32(trigger), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFETriggerSlaveAddress(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureRFFETriggerSlaveAddress(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFETriggerAddress(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureRFFETriggerAddress(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFETriggerByteCount(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureRFFETriggerByteCount(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFETriggerData(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureRFFETriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFETriggerIndex(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureRFFETriggerIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFETriggerErrorConditions(
        self,
        instrSession,
        trigger,
        SSC,
        length,
        busPark,
        parity,
        noResponse,
        unknownSequence,
    ):
        _status = self.dll.rsscope_ConfigureRFFETriggerErrorConditions(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(SSC),
            ViBoolean(length),
            ViBoolean(busPark),
            ViBoolean(parity),
            ViBoolean(noResponse),
            ViBoolean(unknownSequence),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryRFFESequenceCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryRFFESequenceCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryRFFESequenceStatus(self, instrSession, serialBus, sequence):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        type = ViInt32()
        slaveAddress = ViInt32()
        address = ViInt32()
        byteCount = ViInt32()
        _status = self.dll.rsscope_QueryRFFESequenceStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(sequence),
            byref(status),
            byref(start),
            byref(stop),
            byref(type),
            byref(slaveAddress),
            byref(address),
            byref(byteCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        type = int(type.value)
        slaveAddress = int(slaveAddress.value)
        address = int(address.value)
        byteCount = int(byteCount.value)
        return status, start, stop, type, slaveAddress, address, byteCount

    def QueryRFFESequenceLabel(self, instrSession, serialBus, sequence, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryRFFESequenceLabel(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(sequence),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def QueryRFFESequenceAllData(self, instrSession, serialBus, sequence, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryRFFESequenceAllData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(sequence),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryRFFESequenceData(self, instrSession, serialBus, sequence, byteNumber):
        data = ViInt32()
        statusCode = ViInt32()
        _status = self.dll.rsscope_QueryRFFESequenceData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(sequence),
            ViInt32(byteNumber),
            byref(data),
            byref(statusCode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = int(data.value)
        statusCode = int(statusCode.value)
        return data, statusCode

    def QueryRFFESequenceParity(self, instrSession, serialBus, sequence):
        addressZeroParity = ViInt32()
        addressOneParity = ViInt32()
        controlParity = ViInt32()
        _status = self.dll.rsscope_QueryRFFESequenceParity(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(sequence),
            byref(addressZeroParity),
            byref(addressOneParity),
            byref(controlParity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        addressZeroParity = int(addressZeroParity.value)
        addressOneParity = int(addressOneParity.value)
        controlParity = int(controlParity.value)
        return addressZeroParity, addressOneParity, controlParity

    def ConfigureRFFESearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureRFFESearchType(ViSession(instrSession), ViString(searchName), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFESearchSlaveAddress(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureRFFESearchSlaveAddress(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFESearchAddress(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureRFFESearchAddress(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFESearchByteCount(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureRFFESearchByteCount(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFESearchData(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureRFFESearchData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFESearchIndex(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureRFFESearchIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFESearchErrorConditions(
        self,
        instrSession,
        searchName,
        SSC,
        length,
        reserved1,
        parity,
        reserved2,
        reserved3,
    ):
        _status = self.dll.rsscope_ConfigureRFFESearchErrorConditions(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(SSC),
            ViBoolean(length),
            ViBoolean(reserved1),
            ViBoolean(parity),
            ViBoolean(reserved2),
            ViBoolean(reserved3),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRFFESearchInterrupt(self, instrSession, searchName, interrupt):
        _status = self.dll.rsscope_ConfigureRFFESearchInterrupt(
            ViSession(instrSession), ViString(searchName), ViString(interrupt)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryRFFESearchSequenceCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryRFFESearchSequenceCount(
            ViSession(instrSession), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryRFFESearchSequenceStatus(self, instrSession, searchName, sequence):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        type = ViInt32()
        slaveAddress = ViInt32()
        address = ViInt32()
        byteCount = ViInt32()
        _status = self.dll.rsscope_QueryRFFESearchSequenceStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(sequence),
            byref(status),
            byref(start),
            byref(stop),
            byref(type),
            byref(slaveAddress),
            byref(address),
            byref(byteCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        type = int(type.value)
        slaveAddress = int(slaveAddress.value)
        address = int(address.value)
        byteCount = int(byteCount.value)
        return status, start, stop, type, slaveAddress, address, byteCount

    def QueryRFFESearchSequenceLabel(self, instrSession, searchName, sequence, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryRFFESearchSequenceLabel(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(sequence),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def QueryRFFESearchSequenceAllData(self, instrSession, searchName, sequence, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryRFFESearchSequenceAllData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(sequence),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryRFFESearchSequenceData(self, instrSession, searchName, sequence, byteNumber):
        data = ViInt32()
        statusCode = ViInt32()
        _status = self.dll.rsscope_QueryRFFESearchSequenceData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(sequence),
            ViInt32(byteNumber),
            byref(data),
            byref(statusCode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = int(data.value)
        statusCode = int(statusCode.value)
        return data, statusCode

    def ConfigureMDIOSource(self, instrSession, serialBus, line, waveformSource):
        _status = self.dll.rsscope_ConfigureMDIOSource(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(line),
            ViInt32(waveformSource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMDIOThreshold(self, instrSession, serialBus, preset, line, thresholdLow, thresholdHigh):
        _status = self.dll.rsscope_ConfigureMDIOThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViInt32(line),
            ViReal64(thresholdLow),
            ViReal64(thresholdHigh),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMDIOThresholdsCoupling(self, instrSession, serialBus, coupling):
        _status = self.dll.rsscope_ConfigureMDIOThresholdsCoupling(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(coupling)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMDIOTriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureMDIOTriggerType(ViSession(instrSession), ViInt32(trigger), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMDIOTriggerFramePattern(
        self,
        instrSession,
        trigger,
        startCode,
        operationCode,
        physicalAddress,
        registerAddress,
        dataPattern,
    ):
        _status = self.dll.rsscope_ConfigureMDIOTriggerFramePattern(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(startCode),
            ViInt32(operationCode),
            ViString(physicalAddress),
            ViString(registerAddress),
            ViString(dataPattern),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMDIOMaxGapTime(self, instrSession, serialBus, maxGapTime):
        _status = self.dll.rsscope_ConfigureMDIOMaxGapTime(
            ViSession(instrSession), ViInt32(serialBus), ViReal64(maxGapTime)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMDIOWordCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryMDIOWordCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryMDIOWordStatus(self, instrSession, serialBus, word, bufferSize):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        startCode = ARRAY_ViChar(bufferSize)
        operationCode = ARRAY_ViChar(bufferSize)
        physicalAddress = ViInt32()
        registerAddress = ViInt32()
        dataPattern = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryMDIOWordStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            ViInt32(bufferSize),
            byref(status),
            byref(start),
            byref(stop),
            startCode,
            operationCode,
            byref(physicalAddress),
            byref(registerAddress),
            dataPattern,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        startCode = decode(startCode)
        operationCode = decode(operationCode)
        physicalAddress = int(physicalAddress.value)
        registerAddress = int(registerAddress.value)
        dataPattern = decode(dataPattern)
        return (
            status,
            start,
            stop,
            startCode,
            operationCode,
            physicalAddress,
            registerAddress,
            dataPattern,
        )

    def QueryMDIOWordLabel(self, instrSession, serialBus, word, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryMDIOWordLabel(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def ConfigureMDIOSearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureMDIOSearchType(ViSession(instrSession), ViString(searchName), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMDIOSearchFramePattern(
        self,
        instrSession,
        searchName,
        startCode,
        operationCode,
        physicalAddress,
        registerAddress,
        dataPattern,
    ):
        _status = self.dll.rsscope_ConfigureMDIOSearchFramePattern(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(startCode),
            ViInt32(operationCode),
            ViString(physicalAddress),
            ViString(registerAddress),
            ViString(dataPattern),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMDIOSearchWordCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryMDIOSearchWordCount(ViSession(instrSession), ViString(searchName), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryMDIOSearchWordStatus(self, instrSession, searchName, word, bufferSize):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        startCode = ARRAY_ViChar(bufferSize)
        operationCode = ARRAY_ViChar(bufferSize)
        physicalAddress = ViInt32()
        registerAddress = ViInt32()
        dataPattern = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryMDIOSearchWordStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            ViInt32(bufferSize),
            byref(status),
            byref(start),
            byref(stop),
            startCode,
            operationCode,
            byref(physicalAddress),
            byref(registerAddress),
            dataPattern,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        startCode = decode(startCode)
        operationCode = decode(operationCode)
        physicalAddress = int(physicalAddress.value)
        registerAddress = int(registerAddress.value)
        dataPattern = decode(dataPattern)
        return (
            status,
            start,
            stop,
            startCode,
            operationCode,
            physicalAddress,
            registerAddress,
            dataPattern,
        )

    def QueryMDIOSearchWordLabel(self, instrSession, searchName, word, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryMDIOSearchWordLabel(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def ConfigureEthernetVariant(self, instrSession, serialBus, variant):
        _status = self.dll.rsscope_ConfigureEthernetVariant(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(variant)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEthernetSource(self, instrSession, serialBus, source):
        _status = self.dll.rsscope_ConfigureEthernetSource(ViSession(instrSession), ViInt32(serialBus), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEthernetPolarity(self, instrSession, serialBus, polarity):
        _status = self.dll.rsscope_ConfigureEthernetPolarity(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(polarity)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEthernetThreshold(self, instrSession, serialBus, preset, thresholdLow, thresholdHigh):
        _status = self.dll.rsscope_ConfigureEthernetThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViReal64(thresholdLow),
            ViReal64(thresholdHigh),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEthernetBitRate(self, instrSession, serialBus, bitrate):
        _status = self.dll.rsscope_ConfigureEthernetBitRate(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(bitrate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEthernetTrigger(self, instrSession, trigger, pattern, type):
        _status = self.dll.rsscope_ConfigureEthernetTrigger(
            ViSession(instrSession), ViInt32(trigger), ViString(pattern), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryEthernetWordCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryEthernetWordCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryEthernetWordBitRate(self, instrSession, serialBus, word):
        bitRate = ViInt64()
        _status = self.dll.rsscope_QueryEthernetWordBitRate(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(word), byref(bitRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(bitRate.value)

    def QueryEthernetWordStatus(self, instrSession, serialBus, word, bufferSize):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        destination = ARRAY_ViChar(bufferSize)
        source = ARRAY_ViChar(bufferSize)
        type = ViInt32()
        CRC = ViInt32()
        _status = self.dll.rsscope_QueryEthernetWordStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            ViInt32(bufferSize),
            byref(status),
            byref(start),
            byref(stop),
            destination,
            source,
            byref(type),
            byref(CRC),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        destination = decode(destination)
        source = decode(source)
        type = int(type.value)
        CRC = int(CRC.value)
        return status, start, stop, destination, source, type, CRC

    def QueryEthernetWordLabel(self, instrSession, serialBus, word, bufferSize):
        destinationLabel = ARRAY_ViChar(bufferSize)
        sourceLabel = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryEthernetWordLabel(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            ViInt32(bufferSize),
            destinationLabel,
            sourceLabel,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        destinationLabel = decode(destinationLabel)
        sourceLabel = decode(sourceLabel)
        return destinationLabel, sourceLabel

    def QueryEthernetWordData(self, instrSession, serialBus, word, byteNumber):
        data = ViInt32()
        _status = self.dll.rsscope_QueryEthernetWordData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            ViInt32(byteNumber),
            byref(data),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(data.value)

    def QueryEthernetWordAllData(self, instrSession, serialBus, word, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryEthernetWordAllData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryEthernetWordFrameType(self, instrSession, serialBus, word):
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryEthernetWordFrameType(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(word), byref(frameType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameType.value)

    def QueryEthernetWordNumberOfWords(self, instrSession, serialBus, word):
        numberOfWords = ViInt32()
        _status = self.dll.rsscope_QueryEthernetWordNumberOfWords(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(word),
            byref(numberOfWords),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(numberOfWords.value)

    def ConfigureEthernetSearchCriteria(self, instrSession, searchName, frameEnabled, errorEnabled):
        _status = self.dll.rsscope_ConfigureEthernetSearchCriteria(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(frameEnabled),
            ViBoolean(errorEnabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEthernetSearchDestinationAddress(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureEthernetSearchDestinationAddress(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEthernetSearchSourceAddress(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureEthernetSearchSourceAddress(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEthernetSearchTypeLength(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureEthernetSearchTypeLength(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEthernetSearchFrameCheck(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureEthernetSearchFrameCheck(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEthernetSearchErrorConditions(self, instrSession, searchName, preamble, length):
        _status = self.dll.rsscope_ConfigureEthernetSearchErrorConditions(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(preamble),
            ViBoolean(length),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryEthernetSearchWordCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryEthernetSearchWordCount(
            ViSession(instrSession), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryEthernetSearchWordStatus(self, instrSession, searchName, word, bufferSize):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        destination = ARRAY_ViChar(bufferSize)
        source = ARRAY_ViChar(bufferSize)
        CRC = ViInt32()
        type = ViInt32()
        _status = self.dll.rsscope_QueryEthernetSearchWordStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            ViInt32(bufferSize),
            byref(status),
            byref(start),
            byref(stop),
            destination,
            source,
            byref(CRC),
            byref(type),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        destination = decode(destination)
        source = decode(source)
        CRC = int(CRC.value)
        type = int(type.value)
        return status, start, stop, destination, source, CRC, type

    def QueryEthernetSearchWordLabel(self, instrSession, searchName, word, bufferSize):
        destinationLabel = ARRAY_ViChar(bufferSize)
        sourceLabel = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryEthernetSearchWordLabel(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            ViInt32(bufferSize),
            destinationLabel,
            sourceLabel,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        destinationLabel = decode(destinationLabel)
        sourceLabel = decode(sourceLabel)
        return destinationLabel, sourceLabel

    def QueryEthernetSearchWordData(self, instrSession, searchName, word, byteNumber):
        data = ViInt32()
        _status = self.dll.rsscope_QueryEthernetSearchWordData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            ViInt32(byteNumber),
            byref(data),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(data.value)

    def QueryEthernetSearchWordAllData(self, instrSession, searchName, word, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryEthernetSearchWordAllData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryEthernetSearchWordFrameType(self, instrSession, searchName, word):
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryEthernetSearchWordFrameType(
            ViSession(instrSession), ViString(searchName), ViInt32(word), byref(frameType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameType.value)

    def ConfigureUSBSource(self, instrSession, serialBus, protocolType, waveformSource):
        _status = self.dll.rsscope_ConfigureUSBSource(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(protocolType),
            ViInt32(waveformSource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPreset(self, instrSession, serialBus, preset):
        _status = self.dll.rsscope_ConfigureUSBPreset(ViSession(instrSession), ViInt32(serialBus), ViInt32(preset))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBThreshold(self, instrSession, serialBus, protocolType, threshold):
        _status = self.dll.rsscope_ConfigureUSBThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(protocolType),
            ViReal64(threshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureUSBTriggerType(ViSession(instrSession), ViInt32(trigger), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerToken(self, instrSession, trigger, token):
        _status = self.dll.rsscope_ConfigureUSBTriggerToken(ViSession(instrSession), ViInt32(trigger), ViInt32(token))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerDataType(self, instrSession, trigger, dataType):
        _status = self.dll.rsscope_ConfigureUSBTriggerDataType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(dataType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerHandshakeType(self, instrSession, trigger, handshakeType):
        _status = self.dll.rsscope_ConfigureUSBTriggerHandshakeType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(handshakeType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerSpecialPID(self, instrSession, trigger, specialPID):
        _status = self.dll.rsscope_ConfigureUSBTriggerSpecialPID(
            ViSession(instrSession), ViInt32(trigger), ViInt32(specialPID)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerErrorCondition(self, instrSession, trigger, errorConditionType):
        _status = self.dll.rsscope_ConfigureUSBTriggerErrorCondition(
            ViSession(instrSession), ViInt32(trigger), ViInt32(errorConditionType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerPIDErrorCheck(self, instrSession, trigger, PIDErrorCheck):
        _status = self.dll.rsscope_ConfigureUSBTriggerPIDErrorCheck(
            ViSession(instrSession), ViInt32(trigger), ViBoolean(PIDErrorCheck)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerEndPointCheck(self, instrSession, trigger, enabled, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBTriggerEndPointCheck(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(enabled),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerAddressCheck(self, instrSession, trigger, enabled, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBTriggerAddressCheck(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(enabled),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerPayloadCheck(
        self, instrSession, trigger, enabled, condition, position, dataCondition, pattern
    ):
        _status = self.dll.rsscope_ConfigureUSBTriggerPayloadCheck(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(enabled),
            ViInt32(condition),
            ViInt32(position),
            ViInt32(dataCondition),
            ViString(pattern),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerFrameCheck(self, instrSession, trigger, enabled, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBTriggerFrameCheck(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(enabled),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerSCCheck(self, instrSession, trigger, enabled, startComplete):
        _status = self.dll.rsscope_ConfigureUSBTriggerSCCheck(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(enabled),
            ViInt32(startComplete),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerPortCheck(self, instrSession, trigger, enabled, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBTriggerPortCheck(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(enabled),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerSEUCheck(self, instrSession, trigger, enabled, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBTriggerSEUCheck(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(enabled),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBTriggerETCheck(self, instrSession, trigger, enabled, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBTriggerETCheck(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(enabled),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryUSBPacketCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryUSBPacketCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryUSBPacketStatus(self, instrSession, serialBus, packet):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        PID = ViInt32()
        _status = self.dll.rsscope_QueryUSBPacketStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packet),
            byref(status),
            byref(start),
            byref(stop),
            byref(PID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        PID = int(PID.value)
        return status, start, stop, PID

    def QueryUSBPacketValues(self, instrSession, serialBus, packet):
        address = ViInt32()
        endpoint = ViInt32()
        CRC = ViInt32()
        ET = ViInt32()
        frame = ViInt32()
        port = ViInt32()
        SC = ViInt32()
        SEU = ViInt32()
        _status = self.dll.rsscope_QueryUSBPacketValues(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packet),
            byref(address),
            byref(endpoint),
            byref(CRC),
            byref(ET),
            byref(frame),
            byref(port),
            byref(SC),
            byref(SEU),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        address = int(address.value)
        endpoint = int(endpoint.value)
        CRC = int(CRC.value)
        ET = int(ET.value)
        frame = int(frame.value)
        port = int(port.value)
        SC = int(SC.value)
        SEU = int(SEU.value)
        return address, endpoint, CRC, ET, frame, port, SC, SEU

    def QueryUSBPacketAllData(self, instrSession, serialBus, packet, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryUSBPacketAllData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packet),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def ConfigureUSBSearchCriteria(
        self,
        instrSession,
        searchName,
        startOfPacket,
        token,
        data,
        handshake,
        specialPID,
        errorCondition,
    ):
        _status = self.dll.rsscope_ConfigureUSBSearchCriteria(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(startOfPacket),
            ViBoolean(token),
            ViBoolean(data),
            ViBoolean(handshake),
            ViBoolean(specialPID),
            ViBoolean(errorCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchToken(self, instrSession, searchName, token):
        _status = self.dll.rsscope_ConfigureUSBSearchToken(
            ViSession(instrSession), ViString(searchName), ViInt32(token)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchDataType(self, instrSession, searchName, dataType):
        _status = self.dll.rsscope_ConfigureUSBSearchDataType(
            ViSession(instrSession), ViString(searchName), ViInt32(dataType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchHandshakeType(self, instrSession, searchName, handshakeType):
        _status = self.dll.rsscope_ConfigureUSBSearchHandshakeType(
            ViSession(instrSession), ViString(searchName), ViInt32(handshakeType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchSpecialPID(self, instrSession, searchName, specialPID):
        _status = self.dll.rsscope_ConfigureUSBSearchSpecialPID(
            ViSession(instrSession), ViString(searchName), ViInt32(specialPID)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchPIDErrorCheck(self, instrSession, searchName, PIDErrorCheck):
        _status = self.dll.rsscope_ConfigureUSBSearchPIDErrorCheck(
            ViSession(instrSession), ViString(searchName), ViBoolean(PIDErrorCheck)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchErrorCondition(self, instrSession, searchName, PID, CRC5, CRC16, bitstuff, glitch):
        _status = self.dll.rsscope_ConfigureUSBSearchErrorCondition(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(PID),
            ViBoolean(CRC5),
            ViBoolean(CRC16),
            ViBoolean(bitstuff),
            ViBoolean(glitch),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchEndPointCheck(self, instrSession, searchName, enabled, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBSearchEndPointCheck(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(enabled),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchAddressCheck(self, instrSession, searchName, enabled, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBSearchAddressCheck(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(enabled),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchPayloadCheck(
        self,
        instrSession,
        searchName,
        enabled,
        condition,
        position,
        dataCondition,
        pattern,
    ):
        _status = self.dll.rsscope_ConfigureUSBSearchPayloadCheck(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(enabled),
            ViInt32(condition),
            ViInt32(position),
            ViInt32(dataCondition),
            ViString(pattern),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchFrameCheck(self, instrSession, searchName, enabled, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBSearchFrameCheck(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(enabled),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchSCCheck(self, instrSession, searchName, enabled, startComplete):
        _status = self.dll.rsscope_ConfigureUSBSearchSCCheck(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(enabled),
            ViInt32(startComplete),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchPortCheck(self, instrSession, searchName, enabled, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBSearchPortCheck(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(enabled),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchSEUCheck(self, instrSession, searchName, enabled, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBSearchSEUCheck(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(enabled),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBSearchETCheck(self, instrSession, searchName, enabled, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBSearchETCheck(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(enabled),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryUSBSearchPacketCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryUSBSearchPacketCount(
            ViSession(instrSession), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryUSBSearchPacketStatus(self, instrSession, searchName, packet):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        PID = ViInt32()
        _status = self.dll.rsscope_QueryUSBSearchPacketStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(packet),
            byref(status),
            byref(start),
            byref(stop),
            byref(PID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        PID = int(PID.value)
        return status, start, stop, PID

    def QueryUSBSearchPacketValues(self, instrSession, searchName, packet):
        address = ViInt32()
        endpoint = ViInt32()
        CRC = ViInt32()
        ET = ViInt32()
        frame = ViInt32()
        port = ViInt32()
        SC = ViInt32()
        SEU = ViInt32()
        _status = self.dll.rsscope_QueryUSBSearchPacketValues(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(packet),
            byref(address),
            byref(endpoint),
            byref(CRC),
            byref(ET),
            byref(frame),
            byref(port),
            byref(SC),
            byref(SEU),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        address = int(address.value)
        endpoint = int(endpoint.value)
        CRC = int(CRC.value)
        ET = int(ET.value)
        frame = int(frame.value)
        port = int(port.value)
        SC = int(SC.value)
        SEU = int(SEU.value)
        return address, endpoint, CRC, ET, frame, port, SC, SEU

    def QueryUSBSearchPacketAllData(self, instrSession, searchName, packet, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryUSBSearchPacketAllData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(packet),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def ConfigureUSB31(self, instrSession, serialBus, source, polarity):
        _status = self.dll.rsscope_ConfigureUSB31(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(source),
            ViInt32(polarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31ProtocolType(self, instrSession, serialBus, protocolType):
        _status = self.dll.rsscope_ConfigureUSB31ProtocolType(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(protocolType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31Thresholds(self, instrSession, serialBus, low, high):
        _status = self.dll.rsscope_ConfigureUSB31Thresholds(
            ViSession(instrSession), ViInt32(serialBus), ViReal64(low), ViReal64(high)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31ScrambleMode(self, instrSession, serialBus, scrambleMode):
        _status = self.dll.rsscope_ConfigureUSB31ScrambleMode(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(scrambleMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureUSB31TriggerType(ViSession(instrSession), ViInt32(trigger), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerPacketType(self, instrSession, trigger, packetType):
        _status = self.dll.rsscope_ConfigureUSB31TriggerPacketType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(packetType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerErrorEnabled(self, instrSession, trigger, errorName, enabled):
        _status = self.dll.rsscope_ConfigureUSB31TriggerErrorEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerFieldNameEnabled(self, instrSession, trigger, fieldNumber, packetType, enable):
        _status = self.dll.rsscope_ConfigureUSB31TriggerFieldNameEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(fieldNumber),
            ViInt32(packetType),
            ViBoolean(enable),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerBitState(self, instrSession, trigger, fieldNumber, bitState):
        _status = self.dll.rsscope_ConfigureUSB31TriggerBitState(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(fieldNumber),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerData(self, instrSession, trigger, fieldNumber, condition, min, max):
        _status = self.dll.rsscope_ConfigureUSB31TriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(fieldNumber),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerIndex(self, instrSession, trigger, fieldNumber, condition, min, max):
        _status = self.dll.rsscope_ConfigureUSB31TriggerIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(fieldNumber),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerErrorTypeNameEnabled(self, instrSession, trigger, errorName, enabled):
        _status = self.dll.rsscope_ConfigureUSB31TriggerErrorTypeNameEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerErrorTypeNumericEnabled(self, instrSession, trigger, errorNumber, enabled):
        _status = self.dll.rsscope_ConfigureUSB31TriggerErrorTypeNumericEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(errorNumber),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerFrameTypeNameEnabled(self, instrSession, trigger, frame, enabled):
        _status = self.dll.rsscope_ConfigureUSB31TriggerFrameTypeNameEnabled(
            ViSession(instrSession), ViInt32(trigger), ViString(frame), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerFrameTypeNumericEnabled(self, instrSession, trigger, frame, enabled):
        _status = self.dll.rsscope_ConfigureUSB31TriggerFrameTypeNumericEnabled(
            ViSession(instrSession), ViInt32(trigger), ViInt32(frame), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerFrameFieldNameEnabled(self, instrSession, trigger, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureUSB31TriggerFrameFieldNameEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerFrameFieldNumericEnabled(self, instrSession, trigger, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureUSB31TriggerFrameFieldNumericEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerFrameFieldNameBitState(self, instrSession, trigger, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureUSB31TriggerFrameFieldNameBitState(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerFrameFieldNumericBitState(self, instrSession, trigger, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureUSB31TriggerFrameFieldNumericBitState(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerFrameFieldNameData(self, instrSession, trigger, frame, field, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSB31TriggerFrameFieldNameData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerFrameFieldNumericData(
        self, instrSession, trigger, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSB31TriggerFrameFieldNumericData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerFrameFieldNameIndex(
        self, instrSession, trigger, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSB31TriggerFrameFieldNameIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31TriggerFrameFieldNumericIndex(
        self, instrSession, trigger, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSB31TriggerFrameFieldNumericIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryUSB31FrameCount(self, instrSession, serialBus):
        frameCount = ViInt32()
        _status = self.dll.rsscope_QueryUSB31FrameCount(ViSession(instrSession), ViInt32(serialBus), byref(frameCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameCount.value)

    def QueryUSB31FrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        startTime = ViReal64()
        stopTime = ViReal64()
        type = ViInt32()
        _status = self.dll.rsscope_QueryUSB31FrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(startTime),
            byref(stopTime),
            byref(type),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        type = int(type.value)
        return frameStatus, startTime, stopTime, type

    def QueryUSB31FrameInfo(self, instrSession, serialBus, frame):
        info = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_QueryUSB31FrameInfo(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), info
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(info)

    def QueryUSB31FrameFieldType(self, instrSession, serialBus, frame, field):
        type = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_QueryUSB31FrameFieldType(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            type,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(type)

    def QueryUSB31FrameFieldStatus(self, instrSession, serialBus, frame, field):
        status = ViInt32()
        _status = self.dll.rsscope_QueryUSB31FrameFieldStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            byref(status),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(status.value)

    def QueryUSB31FrameFieldStartStop(self, instrSession, serialBus, frame, field):
        start = ViReal64()
        stop = ViReal64()
        _status = self.dll.rsscope_QueryUSB31FrameFieldStartStop(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            byref(start),
            byref(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        start = float(start.value)
        stop = float(stop.value)
        return start, stop

    def QueryUSB31FrameFieldValue(self, instrSession, serialBus, frame, field):
        value = ViInt32()
        _status = self.dll.rsscope_QueryUSB31FrameFieldValue(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def QueryUSB31FrameFieldFormatedValue(self, instrSession, serialBus, frame, field, bufferSize):
        value = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryUSB31FrameFieldFormatedValue(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(bufferSize),
            value,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def ConfigureUSB31SearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureUSB31SearchType(
            ViSession(instrSession), ViString(searchName), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchPacketType(self, instrSession, searchName, packetType):
        _status = self.dll.rsscope_ConfigureUSB31SearchPacketType(
            ViSession(instrSession), ViString(searchName), ViInt32(packetType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchErrorEnabled(self, instrSession, searchName, errorName, enabled):
        _status = self.dll.rsscope_ConfigureUSB31SearchErrorEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchFieldNameEnabled(self, instrSession, searchName, fieldNumber, packetType, enable):
        _status = self.dll.rsscope_ConfigureUSB31SearchFieldNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(fieldNumber),
            ViInt32(packetType),
            ViBoolean(enable),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchData(self, instrSession, searchName, fieldNumber, condition, min, max):
        _status = self.dll.rsscope_ConfigureUSB31SearchData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(fieldNumber),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchIndex(self, instrSession, searchName, fieldNumber, condition, min, max):
        _status = self.dll.rsscope_ConfigureUSB31SearchIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(fieldNumber),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchBitState(self, instrSession, searchName, fieldNumber, bitState):
        _status = self.dll.rsscope_ConfigureUSB31SearchBitState(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(fieldNumber),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchErrorTypeNameEnabled(self, instrSession, searchName, errorName, enabled):
        _status = self.dll.rsscope_ConfigureUSB31SearchErrorTypeNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchErrorTypeNumericEnabled(self, instrSession, searchName, errorNumber, enabled):
        _status = self.dll.rsscope_ConfigureUSB31SearchErrorTypeNumericEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(errorNumber),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchFrameTypeNameEnabled(self, instrSession, searchName, frame, enabled):
        _status = self.dll.rsscope_ConfigureUSB31SearchFrameTypeNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchFrameTypeNumericEnabled(self, instrSession, searchName, frame, enabled):
        _status = self.dll.rsscope_ConfigureUSB31SearchFrameTypeNumericEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchFrameFieldNameEnabled(self, instrSession, searchName, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureUSB31SearchFrameFieldNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchFrameFieldNumericEnabled(self, instrSession, searchName, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureUSB31SearchFrameFieldNumericEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchFrameFieldNameBitState(self, instrSession, searchName, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureUSB31SearchFrameFieldNameBitState(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchFrameFieldNumericBitState(self, instrSession, searchName, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureUSB31SearchFrameFieldNumericBitState(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchFrameFieldNameData(
        self, instrSession, searchName, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSB31SearchFrameFieldNameData(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchFrameFieldNumericData(
        self, instrSession, searchName, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSB31SearchFrameFieldNumericData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchFrameFieldNameIndex(
        self, instrSession, searchName, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSB31SearchFrameFieldNameIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSB31SearchFrameFieldNumericIndex(
        self, instrSession, searchName, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSB31SearchFrameFieldNumericIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryUSB31SearchFrameCount(self, instrSession, searchName):
        frameCount = ViInt32()
        _status = self.dll.rsscope_QueryUSB31SearchFrameCount(
            ViSession(instrSession), ViString(searchName), byref(frameCount)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameCount.value)

    def QueryUSB31SearchFrameStatus(self, instrSession, searchName, frame):
        frameStatus = ViInt32()
        startTime = ViReal64()
        stopTime = ViReal64()
        type = ViInt32()
        _status = self.dll.rsscope_QueryUSB31SearchFrameStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(frameStatus),
            byref(startTime),
            byref(stopTime),
            byref(type),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        type = int(type.value)
        return frameStatus, startTime, stopTime, type

    def QueryUSB31SearchFrameInfo(self, instrSession, searchName, frame):
        info = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_QueryUSB31SearchFrameInfo(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), info
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(info)

    def QueryUSB31SearchFrameFieldType(self, instrSession, searchName, frame, field):
        type = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_QueryUSB31SearchFrameFieldType(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            type,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(type)

    def QueryUSB31SearchFrameFieldStatus(self, instrSession, searchName, field, frame):
        status = ViInt32()
        _status = self.dll.rsscope_QueryUSB31SearchFrameFieldStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(field),
            ViInt32(frame),
            byref(status),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(status.value)

    def QueryUSB31SearchFrameFieldStartStop(self, instrSession, searchName, field, frame):
        startTime = ViReal64()
        stopTime = ViReal64()
        _status = self.dll.rsscope_QueryUSB31SearchFrameFieldStartStop(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(field),
            ViInt32(frame),
            byref(startTime),
            byref(stopTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        return startTime, stopTime

    def QueryUSB31SearchFrameFieldValue(self, instrSession, searchName, frame, field):
        value = ViInt32()
        _status = self.dll.rsscope_QueryUSB31SearchFrameFieldValue(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def QueryUSB31SearchFrameFieldFormatedValue(self, instrSession, searchName, frame, field, bufferSize):
        value = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryUSB31SearchFrameFieldFormatedValue(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(bufferSize),
            value,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def ConfigureUSBPDDataSource(self, instrSession, serialBus, dataSource):
        _status = self.dll.rsscope_ConfigureUSBPDDataSource(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(dataSource)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDThresholds(self, instrSession, serialBus, dataThreshold, hysteresis, VRD15, VRDUSB, VRA):
        _status = self.dll.rsscope_ConfigureUSBPDThresholds(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViReal64(dataThreshold),
            ViReal64(hysteresis),
            ViReal64(VRD15),
            ViReal64(VRDUSB),
            ViReal64(VRA),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDShowDecodeDetail(self, instrSession, serialBus, showDecodeDetail):
        _status = self.dll.rsscope_ConfigureUSBPDShowDecodeDetail(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(showDecodeDetail)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerType(self, instrSession, trigger, triggerType):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(triggerType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerPacketType(self, instrSession, trigger, packetType):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerPacketType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(packetType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerErrorEnabled(self, instrSession, trigger, errorName, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerErrorEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerFieldNameEnabled(self, instrSession, trigger, fieldNumber, frameName, enable):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerFieldNameEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(fieldNumber),
            ViInt32(frameName),
            ViBoolean(enable),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerData(self, instrSession, trigger, fieldNumber, condition, min, max):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(fieldNumber),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerIndex(self, instrSession, trigger, fieldNumber, condition, min, max):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(fieldNumber),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerBitState(self, instrSession, trigger, fieldNumber, bitState):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerBitState(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(fieldNumber),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerErrorTypeNameEnabled(self, instrSession, trigger, errorName, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerErrorTypeNameEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerErrorTypeNumericEnabled(self, instrSession, trigger, errorName, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerErrorTypeNumericEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerFrameTypeNameEnabled(self, instrSession, trigger, frame, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerFrameTypeNameEnabled(
            ViSession(instrSession), ViInt32(trigger), ViString(frame), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerFrameTypeNumericEnabled(self, instrSession, trigger, frame, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerFrameTypeNumericEnabled(
            ViSession(instrSession), ViInt32(trigger), ViInt32(frame), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerFrameFieldNameEnabled(self, instrSession, trigger, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerFrameFieldNameEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerFrameFieldNumericEnabled(self, instrSession, trigger, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerFrameFieldNumericEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerFrameFieldNameBitState(self, instrSession, trigger, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerFrameFieldNameBitState(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerFrameFieldNumericBitState(self, instrSession, trigger, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerFrameFieldNumericBitState(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerFrameFieldNameData(self, instrSession, trigger, frame, field, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerFrameFieldNameData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerFrameFieldNumericData(
        self, instrSession, trigger, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerFrameFieldNumericData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerFrameFieldNameIndex(
        self, instrSession, trigger, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerFrameFieldNameIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDTriggerFrameFieldNumericIndex(
        self, instrSession, trigger, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSBPDTriggerFrameFieldNumericIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryUSBPDFrameCount(self, instrSession, serialBus):
        frameCount = ViInt32()
        _status = self.dll.rsscope_QueryUSBPDFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(frameCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameCount.value)

    def QueryUSBPDFrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        startTime = ViReal64()
        stopTime = ViReal64()
        type = ViInt32()
        _status = self.dll.rsscope_QueryUSBPDFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(startTime),
            byref(stopTime),
            byref(type),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        type = int(type.value)
        return frameStatus, startTime, stopTime, type

    def QueryUSBPDFrameInfo(self, instrSession, serialBus, frame):
        info = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_QueryUSBPDFrameInfo(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), info
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(info)

    def QueryUSBPDFrameDataBytes(self, instrSession, serialBus, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryUSBPDFrameDataBytes(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryUSBPDFrameFieldType(self, instrSession, serialBus, frame, field):
        type = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_QueryUSBPDFrameFieldType(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            type,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(type)

    def QueryUSBPDFrameFieldStatus(self, instrSession, serialBus, frame, field):
        status = ViInt32()
        _status = self.dll.rsscope_QueryUSBPDFrameFieldStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            byref(status),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(status.value)

    def QueryUSBPDFrameFieldStartStop(self, instrSession, serialBus, frame, field):
        start = ViReal64()
        stop = ViReal64()
        _status = self.dll.rsscope_QueryUSBPDFrameFieldStartStop(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            byref(start),
            byref(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        start = float(start.value)
        stop = float(stop.value)
        return start, stop

    def QueryUSBPDFrameFieldValue(self, instrSession, serialBus, frame, field):
        value = ViInt32()
        _status = self.dll.rsscope_QueryUSBPDFrameFieldValue(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def QueryUSBPDFrameFieldFormatedValue(self, instrSession, serialBus, frame, field, bufferSize):
        value = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryUSBPDFrameFieldFormatedValue(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(bufferSize),
            value,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def ConfigureUSBPDSearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureUSBPDSearchType(
            ViSession(instrSession), ViString(searchName), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchPacketType(self, instrSession, searchName, packetType):
        _status = self.dll.rsscope_ConfigureUSBPDSearchPacketType(
            ViSession(instrSession), ViString(searchName), ViInt32(packetType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchErrorEnabled(self, instrSession, searchName, errorName, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDSearchErrorEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchFieldNameEnabled(self, instrSession, searchName, fieldNumber, frameName, enable):
        _status = self.dll.rsscope_ConfigureUSBPDSearchFieldNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(fieldNumber),
            ViInt32(frameName),
            ViBoolean(enable),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchData(self, instrSession, searchName, fieldNumber, condition, min, max):
        _status = self.dll.rsscope_ConfigureUSBPDSearchData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(fieldNumber),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchIndex(self, instrSession, searchName, fieldNumber, condition, min, max):
        _status = self.dll.rsscope_ConfigureUSBPDSearchIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(fieldNumber),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchBitState(self, instrSession, searchName, fieldNumber, bitState):
        _status = self.dll.rsscope_ConfigureUSBPDSearchBitState(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(fieldNumber),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchErrorTypeNameEnabled(self, instrSession, searchName, errorName, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDSearchErrorTypeNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchErrorTypeNumericEnabled(self, instrSession, searchName, errorNumber, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDSearchErrorTypeNumericEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(errorNumber),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchFrameTypeNameEnabled(self, instrSession, searchName, frame, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDSearchFrameTypeNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchFrameTypeNumericEnabled(self, instrSession, searchName, frame, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDSearchFrameTypeNumericEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchFrameFieldNameEnabled(self, instrSession, searchName, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDSearchFrameFieldNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchFrameFieldNumericEnabled(self, instrSession, searchName, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureUSBPDSearchFrameFieldNumericEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchFrameFieldNameBitState(self, instrSession, searchName, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureUSBPDSearchFrameFieldNameBitState(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchFrameFieldNumericBitState(self, instrSession, searchName, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureUSBPDSearchFrameFieldNumericBitState(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchFrameFieldNameData(
        self, instrSession, searchName, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSBPDSearchFrameFieldNameData(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchFrameFieldNumericData(
        self, instrSession, searchName, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSBPDSearchFrameFieldNumericData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchFrameFieldNameIndex(
        self, instrSession, searchName, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSBPDSearchFrameFieldNameIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureUSBPDSearchFrameFieldNumericIndex(
        self, instrSession, searchName, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureUSBPDSearchFrameFieldNumericIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryUSBPDSearchFrameCount(self, instrSession, searchName):
        frameCount = ViInt32()
        _status = self.dll.rsscope_QueryUSBPDSearchFrameCount(
            ViSession(instrSession), ViString(searchName), byref(frameCount)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameCount.value)

    def QueryUSBPDSearchFrameStatus(self, instrSession, searchName, frame):
        frameStatus = ViInt32()
        startTime = ViReal64()
        stopTime = ViReal64()
        type = ViInt32()
        _status = self.dll.rsscope_QueryUSBPDSearchFrameStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(frameStatus),
            byref(startTime),
            byref(stopTime),
            byref(type),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        type = int(type.value)
        return frameStatus, startTime, stopTime, type

    def QueryUSBPDSearchFrameInfo(self, instrSession, searchName, frame):
        info = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_QueryUSBPDSearchFrameInfo(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), info
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(info)

    def QueryUSBPDSearchFrameDataBytes(self, instrSession, searchName, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryUSBPDSearchFrameDataBytes(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryUSBPDSearchFrameFieldType(self, instrSession, searchName, frame, field):
        type = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_QueryUSBPDSearchFrameFieldType(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            type,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(type)

    def QueryUSBPDSearchFrameFieldStatus(self, instrSession, searchName, frame, field):
        status = ViInt32()
        _status = self.dll.rsscope_QueryUSBPDSearchFrameFieldStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            byref(status),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(status.value)

    def QueryUSBPDSearchFrameFieldStartStop(self, instrSession, searchName, frame, field):
        startTime = ViReal64()
        stopTime = ViReal64()
        _status = self.dll.rsscope_QueryUSBPDSearchFrameFieldStartStop(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            byref(startTime),
            byref(stopTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        return startTime, stopTime

    def QueryUSBPDSearchFrameFieldValue(self, instrSession, searchName, frame, field):
        value = ViInt32()
        _status = self.dll.rsscope_QueryUSBPDSearchFrameFieldValue(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def QueryUSBPDSearchFrameFieldFormatedValue(self, instrSession, searchName, frame, field, bufferSize):
        value = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryUSBPDSearchFrameFieldFormatedValue(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(bufferSize),
            value,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def ConfigureManchesterNRZCodingStandard(self, instrSession, serialBus, standard):
        _status = self.dll.rsscope_ConfigureManchesterNRZCodingStandard(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(standard)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZBitrate(self, instrSession, serialBus, bitrateState, bitrate):
        _status = self.dll.rsscope_ConfigureManchesterNRZBitrate(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViBoolean(bitrateState),
            ViInt32(bitrate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZGapTime(self, instrSession, serialBus, gapTimeState, gapTime):
        _status = self.dll.rsscope_ConfigureManchesterNRZGapTime(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViBoolean(gapTimeState),
            ViReal64(gapTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterSettings(self, instrSession, serialBus, source, polarity, clockPhase):
        _status = self.dll.rsscope_ConfigureManchesterSettings(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(source),
            ViInt32(polarity),
            ViInt32(clockPhase),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterThreshold(self, instrSession, serialBus, preset, thresholdHigh, thresholdLow):
        _status = self.dll.rsscope_ConfigureManchesterThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViReal64(thresholdHigh),
            ViReal64(thresholdLow),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterThresholdCoupling(self, instrSession, serialBus, coupling):
        _status = self.dll.rsscope_ConfigureManchesterThresholdCoupling(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(coupling)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNRZEnable(self, instrSession, serialBus, source):
        _status = self.dll.rsscope_ConfigureNRZEnable(ViSession(instrSession), ViInt32(serialBus), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNRZSource(self, instrSession, serialBus, line, waveformSource):
        _status = self.dll.rsscope_ConfigureNRZSource(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(line),
            ViInt32(waveformSource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNRZPolarity(self, instrSession, serialBus, polarity):
        _status = self.dll.rsscope_ConfigureNRZPolarity(ViSession(instrSession), ViInt32(serialBus), ViInt32(polarity))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNRZENAPolarity(self, instrSession, serialBus, polarity):
        _status = self.dll.rsscope_ConfigureNRZENAPolarity(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(polarity)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNRZIdlePolarity(self, instrSession, serialBus, line, polarity):
        _status = self.dll.rsscope_ConfigureNRZIdlePolarity(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(line), ViInt32(polarity)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNRZClockPhase(self, instrSession, serialBus, clockPhase):
        _status = self.dll.rsscope_ConfigureNRZClockPhase(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(clockPhase)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNRZThreshold(self, instrSession, serialBus, preset, thresholdClock, thresholdData):
        _status = self.dll.rsscope_ConfigureNRZThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(preset),
            ViReal64(thresholdClock),
            ViReal64(thresholdData),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNRZThresholdCoupling(self, instrSession, serialBus, coupling):
        _status = self.dll.rsscope_ConfigureNRZThresholdCoupling(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(coupling)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNRZThresholdValue(self, instrSession, serialBus, enabled):
        _status = self.dll.rsscope_ConfigureNRZThresholdValue(
            ViSession(instrSession), ViInt32(serialBus), ViReal64(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryManchesterNRZFrameCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryManchesterNRZFrameCount(
            ViSession(instrSession), ViInt32(serialBus), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def ConfigureManchesterNRZFrameType(self, instrSession, serialBus, frame, type):
        _status = self.dll.rsscope_ConfigureManchesterNRZFrameType(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), ViString(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ManchesterNRZAddFrame(self, instrSession, serialBus):
        _status = self.dll.rsscope_ManchesterNRZAddFrame(ViSession(instrSession), ViInt32(serialBus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ManchesterNRZFrameClear(self, instrSession, serialBus):
        _status = self.dll.rsscope_ManchesterNRZFrameClear(ViSession(instrSession), ViInt32(serialBus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ManchesterNRZFrameDescription(self, instrSession, serialBus, operation, file):
        _status = self.dll.rsscope_ManchesterNRZFrameDescription(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(operation),
            ViString(file),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ManchesterNRZExportFramesAsRawBits(self, instrSession, serialBus):
        _status = self.dll.rsscope_ManchesterNRZExportFramesAsRawBits(ViSession(instrSession), ViInt32(serialBus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryManchesterNRZCellCount(self, instrSession, serialBus, frame):
        count = ViInt32()
        _status = self.dll.rsscope_QueryManchesterNRZCellCount(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def ManchesterNRZAddCell(self, instrSession, serialBus, frame):
        _status = self.dll.rsscope_ManchesterNRZAddCell(ViSession(instrSession), ViInt32(serialBus), ViInt32(frame))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZCell(
        self,
        instrSession,
        serialBus,
        frame,
        cell,
        name,
        bitCount,
        condition,
        cellFormat,
        bitOrder,
        color,
        resultColumn,
    ):
        _status = self.dll.rsscope_ConfigureManchesterNRZCell(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(cell),
            ViString(name),
            ViInt32(bitCount),
            ViString(condition),
            ViInt32(cellFormat),
            ViInt32(bitOrder),
            ViInt32(color),
            ViInt32(resultColumn),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZCellColorCRGB(self, instrSession, serialBus, frame, cell, colorRGB):
        _status = self.dll.rsscope_ConfigureManchesterNRZCellColorCRGB(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(cell),
            ViInt64(colorRGB),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerDataPattern(self, instrSession, trigger, dataPattern):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerDataPattern(
            ViSession(instrSession), ViInt32(trigger), ViString(dataPattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerIndex(self, instrSession, trigger, condition, indexMin, indexMax):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(indexMin),
            ViInt32(indexMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNRZTriggerWordLength(self, instrSession, trigger, wordLength):
        _status = self.dll.rsscope_ConfigureNRZTriggerWordLength(
            ViSession(instrSession), ViInt32(trigger), ViInt32(wordLength)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerErrorNameEnabled(self, instrSession, trigger, errorName, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerErrorNameEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerErrorNumericEnabled(self, instrSession, trigger, errorNumber, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerErrorNumericEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(errorNumber),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerFrameTypeNameEnabled(self, instrSession, trigger, frame, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerFrameTypeNameEnabled(
            ViSession(instrSession), ViInt32(trigger), ViString(frame), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerFrameTypeNumericEnabled(self, instrSession, trigger, frame, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerFrameTypeNumericEnabled(
            ViSession(instrSession), ViInt32(trigger), ViInt32(frame), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerFrameFieldNameEnabled(self, instrSession, trigger, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerFrameFieldNameEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerFrameFieldNumericEnabled(self, instrSession, trigger, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerFrameFieldNumericEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerFrameFieldNameBitState(self, instrSession, trigger, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerFrameFieldNameBitState(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerFrameFieldNumericBitState(self, instrSession, trigger, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerFrameFieldNumericBitState(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerFrameFieldNameData(
        self, instrSession, trigger, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerFrameFieldNameData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerFrameFieldNumericData(
        self, instrSession, trigger, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerFrameFieldNumericData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerFrameFieldNameIndex(
        self, instrSession, trigger, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerFrameFieldNameIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZTriggerFrameFieldNumericIndex(
        self, instrSession, trigger, frame, field, condition, minimum, maximum
    ):
        _status = self.dll.rsscope_ConfigureManchesterNRZTriggerFrameFieldNumericIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryManchesterNRZResultCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryManchesterNRZResultCount(
            ViSession(instrSession), ViInt32(serialBus), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryManchesterNRZResultStatus(self, instrSession, serialBus, result, bufferSize):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        type = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryManchesterNRZResultStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(result),
            ViInt32(bufferSize),
            byref(status),
            byref(start),
            byref(stop),
            type,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        type = decode(type)
        return status, start, stop, type

    def QueryManchesterNRZResultContent(self, instrSession, serialBus, result, bufferSize):
        contentOne = ARRAY_ViChar(bufferSize)
        contentTwo = ARRAY_ViChar(bufferSize)
        contentThree = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryManchesterNRZResultContent(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(result),
            ViInt32(bufferSize),
            contentOne,
            contentTwo,
            contentThree,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        contentOne = decode(contentOne)
        contentTwo = decode(contentTwo)
        contentThree = decode(contentThree)
        return contentOne, contentTwo, contentThree

    def QueryManchesterNRZResultCellCount(self, instrSession, serialBus, result):
        count = ViInt32()
        _status = self.dll.rsscope_QueryManchesterNRZResultCellCount(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(result), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryManchesterNRZResultCellStatus(self, instrSession, serialBus, result, cell, bufferSize):
        status = ViInt32()
        name = ARRAY_ViChar(bufferSize)
        value = ViReal64()
        _status = self.dll.rsscope_QueryManchesterNRZResultCellStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(result),
            ViInt32(cell),
            ViInt32(bufferSize),
            byref(status),
            name,
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        name = decode(name)
        value = float(value.value)
        return status, name, value

    def QueryManchesterNRZResultCellStartStop(self, instrSession, serialBus, result, cell):
        start = ViReal64()
        stop = ViReal64()
        _status = self.dll.rsscope_QueryManchesterNRZResultCellStartStop(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(result),
            ViInt32(cell),
            byref(start),
            byref(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        start = float(start.value)
        stop = float(stop.value)
        return start, stop

    def ConfigureManchesterNRZSearchErrorTypeNameEnabled(self, instrSession, searchName, errorName, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZSearchErrorTypeNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZSearchErrorTypeNumericEnabled(self, instrSession, errorNumber, searchName, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZSearchErrorTypeNumericEnabled(
            ViSession(instrSession),
            ViInt32(errorNumber),
            ViString(searchName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZSearchFrameTypeNameEnabled(self, instrSession, searchName, frame, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZSearchFrameTypeNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZSearchFrameTypeNumericEnabled(self, instrSession, frameNumber, searchName, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZSearchFrameTypeNumericEnabled(
            ViSession(instrSession),
            ViInt32(frameNumber),
            ViString(searchName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZSearchFrameFieldNameEnabled(self, instrSession, searchName, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZSearchFrameFieldNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZSearchFrameFieldNumericEnabled(self, instrSession, frame, field, searchName, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZSearchFrameFieldNumericEnabled(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(field),
            ViString(searchName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZSearchFrameFieldNameBitState(self, instrSession, searchName, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureManchesterNRZSearchFrameFieldNameBitState(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZSearchFrameFieldNumericBitState(self, instrSession, frame, field, searchName, bitState):
        _status = self.dll.rsscope_ConfigureManchesterNRZSearchFrameFieldNumericBitState(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(field),
            ViString(searchName),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZSearchFrameFieldNameData(
        self, instrSession, searchName, frame, field, condition, min, max
    ):
        _status = self.dll.rsscope_ConfigureManchesterNRZSearchFrameFieldNameData(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZSearchFrameFieldNumericData(
        self, instrSession, frame, field, searchName, condition, min, max
    ):
        _status = self.dll.rsscope_ConfigureManchesterNRZSearchFrameFieldNumericData(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(field),
            ViString(searchName),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZSearchFrameFieldNameIndex(
        self, instrSession, searchName, frame, field, condition, min, max
    ):
        _status = self.dll.rsscope_ConfigureManchesterNRZSearchFrameFieldNameIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZSearchFrameFieldNumericIndex(
        self, instrSession, frame, field, searchName, condition, min, max
    ):
        _status = self.dll.rsscope_ConfigureManchesterNRZSearchFrameFieldNumericIndex(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(field),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryManchesterNRZSearchFrameCount(self, instrSession, searchName, index):
        count = ViInt32()
        _status = self.dll.rsscope_QueryManchesterNRZSearchFrameCount(
            ViSession(instrSession), ViString(searchName), ViInt32(index), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryManchesterNRZSearchFrameStatus(self, instrSession, searchName, index, frame, bufferSize):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryManchesterNRZSearchFrameStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(index),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            ViInt32(bufferSize),
            frameType,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = decode(frameType)
        return frameStatus, frameStart, frameStop, frameType

    def QueryManchesterNRZSearchFrameContent(self, instrSession, searchName, index, frame, bufferSize):
        one = ARRAY_ViChar(bufferSize)
        two = ARRAY_ViChar(bufferSize)
        three = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryManchesterNRZSearchFrameContent(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(index),
            ViInt32(frame),
            ViInt32(bufferSize),
            one,
            two,
            three,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        one = decode(one)
        two = decode(two)
        three = decode(three)
        return one, two, three

    def QueryManchesterNRZSearchCellCount(self, instrSession, searchName, index, frame):
        count = ViInt32()
        _status = self.dll.rsscope_QueryManchesterNRZSearchCellCount(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(index),
            ViInt32(frame),
            byref(count),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryManchesterNRZSearchCellStatus(self, instrSession, searchName, index, frame, cell):
        status = ViInt32()
        _status = self.dll.rsscope_QueryManchesterNRZSearchCellStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(index),
            ViInt32(frame),
            ViInt32(cell),
            byref(status),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(status.value)

    def QueryManchesterNRZSearchCellTime(self, instrSession, searchName, index, frame, cell):
        start = ViReal64()
        stop = ViReal64()
        _status = self.dll.rsscope_QueryManchesterNRZSearchCellTime(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(index),
            ViInt32(frame),
            ViInt32(cell),
            byref(start),
            byref(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        start = float(start.value)
        stop = float(stop.value)
        return start, stop

    def QueryManchesterNRZSearchCellName(self, instrSession, searchName, index, frame, cell, bufferSize):
        name = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryManchesterNRZSearchCellName(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(index),
            ViInt32(frame),
            ViInt32(cell),
            ViInt32(bufferSize),
            name,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(name)

    def QueryManchesterNRZSearchCellValue(self, instrSession, searchName, index, frame, cell):
        value = ViInt32()
        _status = self.dll.rsscope_QueryManchesterNRZSearchCellValue(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(index),
            ViInt32(frame),
            ViInt32(cell),
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def ConfigureManchesterNRZFilterEnabled(self, instrSession, serialBus, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZFilterEnabled(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZFilterFrameTypeNumericEnabled(self, instrSession, serialBus, frame, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZFilterFrameTypeNumericEnabled(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZFilterFrameTypeNameEnabled(self, instrSession, serialBus, frame, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZFilterFrameTypeNameEnabled(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViString(frame),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZFilterErrorTypeNumericEnabled(self, instrSession, serialBus, error, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZFilterErrorTypeNumericEnabled(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(error),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZFilterErrorTypeNameEnabled(self, instrSession, serialBus, error, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZFilterErrorTypeNameEnabled(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViString(error),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZFilterFieldEnabled(self, instrSession, serialBus, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureManchesterNRZFilterFieldEnabled(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViString(frame),
            ViString(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZFilterBitState(self, instrSession, serialBus, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureManchesterNRZFilterBitState(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViString(frame),
            ViString(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZFilterDataPattern(self, instrSession, serialBus, frame, field, condition, min, max):
        _status = self.dll.rsscope_ConfigureManchesterNRZFilterDataPattern(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureManchesterNRZFilterIndexPattern(self, instrSession, serialBus, frame, field, condition, min, max):
        _status = self.dll.rsscope_ConfigureManchesterNRZFilterIndexPattern(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBSignalType(self, instrSession, serialBus, signalType):
        _status = self.dll.rsscope_ConfigureEBTBSignalType(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(signalType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBSource(self, instrSession, serialBus, protocolType, source):
        _status = self.dll.rsscope_ConfigureEBTBSource(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(protocolType),
            ViInt32(source),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBFullAutoset(self, instrSession, serialBus):
        _status = self.dll.rsscope_ConfigureEBTBFullAutoset(ViSession(instrSession), ViInt32(serialBus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBThreshold(self, instrSession, serialBus, signalType, thresholdLow, thresholdHigh):
        _status = self.dll.rsscope_ConfigureEBTBThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(signalType),
            ViReal64(thresholdLow),
            ViReal64(thresholdHigh),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBBitrate(self, instrSession, serialBus, bitrate):
        _status = self.dll.rsscope_ConfigureEBTBBitrate(ViSession(instrSession), ViInt32(serialBus), ViReal64(bitrate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBBitrateDetermination(self, instrSession, serialBus):
        _status = self.dll.rsscope_ConfigureEBTBBitrateDetermination(ViSession(instrSession), ViInt32(serialBus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBEstimatedBitrate(self, instrSession, serialBus):
        estimatedBitrate = ViReal64()
        _status = self.dll.rsscope_ConfigureEBTBEstimatedBitrate(
            ViSession(instrSession), ViInt32(serialBus), byref(estimatedBitrate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(estimatedBitrate.value)

    def ConfigureEBTBSWCDRBitrate(self, instrSession, serialBus, state):
        _status = self.dll.rsscope_ConfigureEBTBSWCDRBitrate(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(state)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBSyncSymbol(self, instrSession, serialBus, syncSymbol):
        _status = self.dll.rsscope_ConfigureEBTBSyncSymbol(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(syncSymbol)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBPattern(self, instrSession, serialBus, pattern):
        _status = self.dll.rsscope_ConfigureEBTBPattern(ViSession(instrSession), ViInt32(serialBus), ViInt32(pattern))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBSecondPattern(self, instrSession, serialBus, state, pattern):
        _status = self.dll.rsscope_ConfigureEBTBSecondPattern(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViBoolean(state),
            ViInt32(pattern),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBDisplayFormat(self, instrSession, serialBus, displayFormat):
        _status = self.dll.rsscope_ConfigureEBTBDisplayFormat(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(displayFormat)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBTriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureEBTBTriggerType(ViSession(instrSession), ViInt32(trigger), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBTriggerDataCharacter(self, instrSession, trigger, dataCharacter):
        _status = self.dll.rsscope_ConfigureEBTBTriggerDataCharacter(
            ViSession(instrSession), ViInt32(trigger), ViInt32(dataCharacter)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBTriggerDXSymbol(self, instrSession, trigger, DXSymbol):
        _status = self.dll.rsscope_ConfigureEBTBTriggerDXSymbol(
            ViSession(instrSession), ViInt32(trigger), ViInt32(DXSymbol)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBTriggerDYSymbol(self, instrSession, trigger, DYSymbol):
        _status = self.dll.rsscope_ConfigureEBTBTriggerDYSymbol(
            ViSession(instrSession), ViInt32(trigger), ViInt32(DYSymbol)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBTriggerPattern(self, instrSession, trigger, symbolFormat, EBPattern, TBPattern):
        _status = self.dll.rsscope_ConfigureEBTBTriggerPattern(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(symbolFormat),
            ViString(EBPattern),
            ViString(TBPattern),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBTriggerSymbol(self, instrSession, trigger, type, expression):
        _status = self.dll.rsscope_ConfigureEBTBTriggerSymbol(
            ViSession(instrSession), ViInt32(trigger), ViInt32(type), ViString(expression)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBTriggerErrorConditions(self, instrSession, trigger, disparityError, glitchError, unknownError):
        _status = self.dll.rsscope_ConfigureEBTBTriggerErrorConditions(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(disparityError),
            ViBoolean(glitchError),
            ViBoolean(unknownError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerEBTBSymbolCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QuerEBTBSymbolCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryEBTBSymbolStatus(self, instrSession, serialBus, symbol):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        _status = self.dll.rsscope_QueryEBTBSymbolStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(symbol),
            byref(status),
            byref(start),
            byref(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        return status, start, stop

    def QueryEBTBSymbolDataBytes(self, instrSession, serialBus, symbol, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryEBTBSymbolDataBytes(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(symbol),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = decode(data)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryEBTBSymbolParameters(self, instrSession, serialBus, symbol, bufferSize):
        byteValue = ARRAY_ViChar(bufferSize)
        _10bit = ARRAY_ViChar(bufferSize)
        kDCode = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryEBTBSymbolParameters(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(symbol),
            ViInt32(bufferSize),
            byteValue,
            _10bit,
            kDCode,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        byteValue = decode(byteValue)
        _10bit = decode(_10bit)
        kDCode = decode(kDCode)
        returnedValues = int(returnedValues.value)
        return byteValue, _10bit, kDCode, returnedValues

    def ConfigureEBTBSearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureEBTBSearchType(ViSession(instrSession), ViString(searchName), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBSearchError(self, instrSession, searchName, disparityError, glitchingError, unknownSymbolError):
        _status = self.dll.rsscope_ConfigureEBTBSearchError(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(disparityError),
            ViBoolean(glitchingError),
            ViBoolean(unknownSymbolError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBSearchSymbolType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureEBTBSearchSymbolType(
            ViSession(instrSession), ViString(searchName), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBSearchSymbolFormat(self, instrSession, searchName, format):
        _status = self.dll.rsscope_ConfigureEBTBSearchSymbolFormat(
            ViSession(instrSession), ViString(searchName), ViInt32(format)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBSearchKDCodeSymbol(self, instrSession, searchName, KDCodeSymbol):
        _status = self.dll.rsscope_ConfigureEBTBSearchKDCodeSymbol(
            ViSession(instrSession), ViString(searchName), ViInt32(KDCodeSymbol)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBSearchDXY(self, instrSession, searchName, DX, DY):
        _status = self.dll.rsscope_ConfigureEBTBSearchDXY(
            ViSession(instrSession), ViString(searchName), ViInt32(DX), ViInt32(DY)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBSearchEightBitPattern(self, instrSession, searchName, pattern):
        _status = self.dll.rsscope_ConfigureEBTBSearchEightBitPattern(
            ViSession(instrSession), ViString(searchName), ViString(pattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBSearchTenBitPattern(self, instrSession, searchName, pattern):
        _status = self.dll.rsscope_ConfigureEBTBSearchTenBitPattern(
            ViSession(instrSession), ViString(searchName), ViString(pattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEBTBSearchExpression(self, instrSession, searchName, expression):
        _status = self.dll.rsscope_ConfigureEBTBSearchExpression(
            ViSession(instrSession), ViString(searchName), ViString(expression)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryEBTBSearchSymbolCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryEBTBSearchSymbolCount(
            ViSession(instrSession), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryEBTBSearchSymbolStatus(self, instrSession, searchName, symbol):
        status = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        _status = self.dll.rsscope_QueryEBTBSearchSymbolStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(symbol),
            byref(status),
            byref(start),
            byref(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        start = float(start.value)
        stop = float(stop.value)
        return status, start, stop

    def QueryEBTBSearchSymbolDataBytes(self, instrSession, searchName, symbol, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryEBTBSearchSymbolDataBytes(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(symbol),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = decode(data)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def ConfigureSENTDataSource(self, instrSession, serialBus, source):
        _status = self.dll.rsscope_ConfigureSENTDataSource(ViSession(instrSession), ViInt32(serialBus), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTThreshold(self, instrSession, serialBus, technology, threshold):
        _status = self.dll.rsscope_ConfigureSENTThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(technology),
            ViReal64(threshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTTransmission(
        self,
        instrSession,
        serialBus,
        clockPeriod,
        clockTolerance,
        dataNibbles,
        serialFormat,
        CRCVersion,
        CRCCalculation,
        pausePulse,
    ):
        _status = self.dll.rsscope_ConfigureSENTTransmission(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViReal64(clockPeriod),
            ViReal64(clockTolerance),
            ViInt32(dataNibbles),
            ViInt32(serialFormat),
            ViInt32(CRCVersion),
            ViInt32(CRCCalculation),
            ViInt32(pausePulse),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTFrameLength(self, instrSession, serialBus, frameLength):
        _status = self.dll.rsscope_ConfigureSENTFrameLength(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frameLength)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTResultDisplay(self, instrSession, serialBus, resultDisplay):
        _status = self.dll.rsscope_ConfigureSENTResultDisplay(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(resultDisplay)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTTriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureSENTTriggerType(ViSession(instrSession), ViInt32(trigger), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTTriggerTransmissionSequenceType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureSENTTriggerTransmissionSequenceType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTTriggerTransmissionSequence(self, instrSession, trigger, status, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureSENTTriggerTransmissionSequence(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(status),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTTriggerSerialMessageType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureSENTTriggerSerialMessageType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTTriggerSerialMessageID(self, instrSession, trigger, type, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureSENTTriggerSerialMessageID(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(type),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTTriggerSerialMessageData(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureSENTTriggerSerialMessageData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTTriggerErrorConditions(
        self,
        instrSession,
        trigger,
        formError,
        calibrationPulseError,
        pulsePeriodError,
        CRCError,
        irregularFrameLengthError,
    ):
        _status = self.dll.rsscope_ConfigureSENTTriggerErrorConditions(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(formError),
            ViBoolean(calibrationPulseError),
            ViBoolean(pulsePeriodError),
            ViBoolean(CRCError),
            ViBoolean(irregularFrameLengthError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySENTFrameCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QuerySENTFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QuerySENTFrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        syncDuration = ViReal64()
        statusCommunicationValue = ViInt32()
        _status = self.dll.rsscope_QuerySENTFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
            byref(syncDuration),
            byref(statusCommunicationValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        syncDuration = float(syncDuration.value)
        statusCommunicationValue = int(statusCommunicationValue.value)
        return (
            frameStatus,
            frameStart,
            frameStop,
            frameType,
            syncDuration,
            statusCommunicationValue,
        )

    def QuerySENTFrameID(self, instrSession, serialBus, frame):
        IDType = ViInt32()
        IDValue = ViInt32()
        _status = self.dll.rsscope_QuerySENTFrameID(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(IDType),
            byref(IDValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        IDType = int(IDType.value)
        IDValue = int(IDValue.value)
        return IDType, IDValue

    def QuerySENTFrameCSValue(self, instrSession, serialBus, frame):
        CSValue = ViInt32()
        _status = self.dll.rsscope_QuerySENTFrameCSValue(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(CSValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(CSValue.value)

    def QuerySENTFramePulsePauseTicks(self, instrSession, serialBus, frame):
        pulsePauseTicks = ViInt32()
        _status = self.dll.rsscope_QuerySENTFramePulsePauseTicks(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(pulsePauseTicks),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(pulsePauseTicks.value)

    def QuerySENTFrameLabel(self, instrSession, serialBus, frame, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QuerySENTFrameLabel(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def QuerySENTFrameDataBytes(self, instrSession, serialBus, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QuerySENTFrameDataBytes(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QuerySENTFrameAllSymbolicData(self, instrSession, serialBus, frame, bufferSize):
        result = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QuerySENTFrameAllSymbolicData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            result,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(result)

    def ExportSENTFrameAllSymbolicDataToFile(self, instrSession, serialBus, frame, fileName, timeout):
        _status = self.dll.rsscope_ExportSENTFrameAllSymbolicDataToFile(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViString(fileName),
            ViUInt32(timeout),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySENTFrameNibbleData(self, instrSession, serialBus, frame, nibble):
        data = ViInt32()
        status = ViInt32()
        _status = self.dll.rsscope_QuerySENTFrameNibbleData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(nibble),
            byref(data),
            byref(status),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = int(data.value)
        status = int(status.value)
        return data, status

    def ConfigureSENTSearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureSENTSearchType(ViSession(instrSession), ViString(searchName), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTSearchCalibrationState(self, instrSession, searchName, state):
        _status = self.dll.rsscope_ConfigureSENTSearchCalibrationState(
            ViSession(instrSession), ViString(searchName), ViBoolean(state)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTSearchTransmissionSequenceState(self, instrSession, searchName, state):
        _status = self.dll.rsscope_ConfigureSENTSearchTransmissionSequenceState(
            ViSession(instrSession), ViString(searchName), ViBoolean(state)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTSearchTransmissionSequenceType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureSENTSearchTransmissionSequenceType(
            ViSession(instrSession), ViString(searchName), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTSearchTransmissionSequence(self, instrSession, searchName, status, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureSENTSearchTransmissionSequence(
            ViSession(instrSession),
            ViString(searchName),
            ViString(status),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTSearchSerialMessageState(self, instrSession, searchName, state):
        _status = self.dll.rsscope_ConfigureSENTSearchSerialMessageState(
            ViSession(instrSession), ViString(searchName), ViBoolean(state)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTSearchSerialMessageType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureSENTSearchSerialMessageType(
            ViSession(instrSession), ViString(searchName), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTSearchSerialMessageID(self, instrSession, searchName, type, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureSENTSearchSerialMessageID(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(type),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTSearchSerialMessageData(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureSENTSearchSerialMessageData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTSearchErrorConditionsState(self, instrSession, searchName, state):
        _status = self.dll.rsscope_ConfigureSENTSearchErrorConditionsState(
            ViSession(instrSession), ViString(searchName), ViBoolean(state)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSENTSearchErrorConditions(
        self,
        instrSession,
        searchName,
        formError,
        calibrationPulseError,
        pulsePeriodError,
        CRCError,
        irregularFrameLengthError,
    ):
        _status = self.dll.rsscope_ConfigureSENTSearchErrorConditions(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(formError),
            ViBoolean(calibrationPulseError),
            ViBoolean(pulsePeriodError),
            ViBoolean(CRCError),
            ViBoolean(irregularFrameLengthError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySENTSearchFrameCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QuerySENTSearchFrameCount(
            ViSession(instrSession), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QuerySENTSearchFrameStatus(self, instrSession, searchName, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        syncDuration = ViReal64()
        statusCommunicationValue = ViInt32()
        _status = self.dll.rsscope_QuerySENTSearchFrameStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
            byref(syncDuration),
            byref(statusCommunicationValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        syncDuration = float(syncDuration.value)
        statusCommunicationValue = int(statusCommunicationValue.value)
        return (
            frameStatus,
            frameStart,
            frameStop,
            frameType,
            syncDuration,
            statusCommunicationValue,
        )

    def QuerySENTSearchFrameID(self, instrSession, searchName, frame):
        IDType = ViInt32()
        IDValue = ViInt32()
        _status = self.dll.rsscope_QuerySENTSearchFrameID(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(IDType),
            byref(IDValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        IDType = int(IDType.value)
        IDValue = int(IDValue.value)
        return IDType, IDValue

    def QuerySENTSearchFrameCSValue(self, instrSession, searchName, frame):
        CSValue = ViInt32()
        _status = self.dll.rsscope_QuerySENTSearchFrameCSValue(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), byref(CSValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(CSValue.value)

    def QuerySENTSearchFramePulsePauseTicks(self, instrSession, searchName, frame):
        pulsePauseTicks = ViInt32()
        _status = self.dll.rsscope_QuerySENTSearchFramePulsePauseTicks(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(pulsePauseTicks),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(pulsePauseTicks.value)

    def QuerySENTSearchFrameLabel(self, instrSession, searchName, frame, bufferSize):
        label = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QuerySENTSearchFrameLabel(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            label,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(label)

    def QuerySENTSearchFrameDataBytes(self, instrSession, searchName, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QuerySENTSearchFrameDataBytes(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QuerySENTSearchFrameAllSymbolicData(self, instrSession, searchName, frame, bufferSize):
        result = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QuerySENTSearchFrameAllSymbolicData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            result,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(result)

    def QuerySENTSearchFrameNibbleData(self, instrSession, searchName, frame, nibble):
        data = ViInt32()
        status = ViInt32()
        _status = self.dll.rsscope_QuerySENTSearchFrameNibbleData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(nibble),
            byref(data),
            byref(status),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = int(data.value)
        status = int(status.value)
        return data, status

    def ConfigureDPHYVariant(self, instrSession, serialBus, variant):
        _status = self.dll.rsscope_ConfigureDPHYVariant(ViSession(instrSession), ViInt32(serialBus), ViInt32(variant))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYPhysicalConfiguration(self, instrSession, serialBus, physicalConfiguration):
        _status = self.dll.rsscope_ConfigureDPHYPhysicalConfiguration(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(physicalConfiguration)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYDataLanes(self, instrSession, serialBus, dataLanes):
        _status = self.dll.rsscope_ConfigureDPHYDataLanes(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(dataLanes)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYSource(self, instrSession, serialBus, lane, source):
        _status = self.dll.rsscope_ConfigureDPHYSource(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(lane), ViInt32(source)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYProbe(self, instrSession, serialBus, lane, probe):
        _status = self.dll.rsscope_ConfigureDPHYProbe(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(lane), ViInt32(probe)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYDataRate(self, instrSession, serialBus, dataRate):
        _status = self.dll.rsscope_ConfigureDPHYDataRate(
            ViSession(instrSession), ViInt32(serialBus), ViReal64(dataRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYDisplayDataVector(self, instrSession, serialBus, state):
        _status = self.dll.rsscope_ConfigureDPHYDisplayDataVector(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(state)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYThresholdPreset(self, instrSession, serialBus, preset):
        _status = self.dll.rsscope_ConfigureDPHYThresholdPreset(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(preset)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYThresholdCoupling(self, instrSession, serialBus, state):
        _status = self.dll.rsscope_ConfigureDPHYThresholdCoupling(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(state)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYHighSpeedThreshold(self, instrSession, serialBus, lane, threshold, hysteresis):
        _status = self.dll.rsscope_ConfigureDPHYHighSpeedThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(lane),
            ViReal64(threshold),
            ViReal64(hysteresis),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYLowPowerThreshold(self, instrSession, serialBus, lane, thresholdLower, thresholdUpper):
        _status = self.dll.rsscope_ConfigureDPHYLowPowerThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(lane),
            ViReal64(thresholdLower),
            ViReal64(thresholdUpper),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYTriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureDPHYTriggerType(ViSession(instrSession), ViInt32(trigger), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYTriggerVirtualChannel(self, instrSession, trigger, virtualChannel):
        _status = self.dll.rsscope_ConfigureDPHYTriggerVirtualChannel(
            ViSession(instrSession), ViInt32(trigger), ViString(virtualChannel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYTriggerDataType(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureDPHYTriggerDataType(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYTriggerWordCount(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureDPHYTriggerWordCount(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYTriggerData(self, instrSession, trigger, type, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureDPHYTriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(type),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYTriggerDataIndex(self, instrSession, trigger, type, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureDPHYTriggerDataIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(type),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYTriggerEscapeMode(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureDPHYTriggerEscapeMode(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryDPHYFrameCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryDPHYFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryDPHYFrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryDPHYFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QueryDPHYFrameChecksum(self, instrSession, serialBus, frame):
        checksum = ViInt32()
        _status = self.dll.rsscope_QueryDPHYFrameChecksum(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(checksum)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(checksum.value)

    def QueryDPHYFrameDataTypeName(self, instrSession, serialBus, frame, bufferSize):
        name = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryDPHYFrameDataTypeName(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            name,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(name)

    def QueryDPHYFrameDataType(self, instrSession, serialBus, frame):
        dataType = ViInt32()
        _status = self.dll.rsscope_QueryDPHYFrameDataType(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(dataType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(dataType.value)

    def QueryDPHYFrameErrorCorrectionCode(self, instrSession, serialBus, frame):
        errorCorrectionCode = ViInt32()
        _status = self.dll.rsscope_QueryDPHYFrameErrorCorrectionCode(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(errorCorrectionCode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(errorCorrectionCode.value)

    def QueryDPHYFrameNumberOfVirtualChannels(self, instrSession, serialBus, frame):
        numberOfVirtualChannels = ViInt32()
        _status = self.dll.rsscope_QueryDPHYFrameNumberOfVirtualChannels(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(numberOfVirtualChannels),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(numberOfVirtualChannels.value)

    def QueryDPHYFrameDataBytes(self, instrSession, serialBus, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryDPHYFrameDataBytes(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryDPHYFrameNumberOfPackets(self, instrSession, serialBus, frame):
        numberOfPackets = ViInt32()
        _status = self.dll.rsscope_QueryDPHYFrameNumberOfPackets(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(numberOfPackets),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(numberOfPackets.value)

    def QueryDPHYFramePacketPayload(self, instrSession, serialBus, frame, packet):
        index = ViInt32()
        value = ViInt32()
        _status = self.dll.rsscope_QueryDPHYFramePacketPayload(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(packet),
            byref(index),
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        index = int(index.value)
        value = int(value.value)
        return index, value

    def ConfigureDPHYSearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureDPHYSearchType(ViSession(instrSession), ViString(searchName), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYSearchVirtualChannel(self, instrSession, searchName, virtualChannel):
        _status = self.dll.rsscope_ConfigureDPHYSearchVirtualChannel(
            ViSession(instrSession), ViString(searchName), ViString(virtualChannel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYSearchDataType(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureDPHYSearchDataType(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYSearchWordCount(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureDPHYSearchWordCount(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYSearchData(self, instrSession, searchName, type, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureDPHYSearchData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(type),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYSearchDataIndex(self, instrSession, searchName, type, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureDPHYSearchDataIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(type),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDPHYSearchEscapeMode(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureDPHYSearchEscapeMode(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryDPHYSearchFrameCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryDPHYSearchFrameCount(
            ViSession(instrSession), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryDPHYSearchFrameStatus(self, instrSession, searchName, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryDPHYSearchFrameStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QueryDPHYSearchFrameChecksum(self, instrSession, searchName, frame):
        checksum = ViInt32()
        _status = self.dll.rsscope_QueryDPHYSearchFrameChecksum(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), byref(checksum)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(checksum.value)

    def QueryDPHYSearchFrameDataTypeName(self, instrSession, searchName, frame, bufferSize):
        name = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryDPHYSearchFrameDataTypeName(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            name,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(name)

    def QueryDPHYSearchFrameDataType(self, instrSession, searchName, frame):
        dataType = ViInt32()
        _status = self.dll.rsscope_QueryDPHYSearchFrameDataType(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), byref(dataType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(dataType.value)

    def QueryDPHYSearchFrameErrorCorrectionCode(self, instrSession, searchName, frame):
        errorCorrectionCode = ViInt32()
        _status = self.dll.rsscope_QueryDPHYSearchFrameErrorCorrectionCode(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(errorCorrectionCode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(errorCorrectionCode.value)

    def QueryDPHYSearchFrameNumberOfVirtualChannels(self, instrSession, searchName, frame):
        numberOfVirtualChannels = ViInt32()
        _status = self.dll.rsscope_QueryDPHYSearchFrameNumberOfVirtualChannels(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(numberOfVirtualChannels),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(numberOfVirtualChannels.value)

    def QueryDPHYSearchFrameDataBytes(self, instrSession, searchName, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryDPHYSearchFrameDataBytes(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryDPHYSearchFramePacketPayload(self, instrSession, searchName, frame, packet):
        index = ViInt32()
        value = ViInt32()
        _status = self.dll.rsscope_QueryDPHYSearchFramePacketPayload(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(packet),
            byref(index),
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        index = int(index.value)
        value = int(value.value)
        return index, value

    def ConfigureMPHYProtocol(self, instrSession, serialBus, protocol):
        _status = self.dll.rsscope_ConfigureMPHYProtocol(ViSession(instrSession), ViInt32(serialBus), ViInt32(protocol))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYDataLanes(self, instrSession, serialBus, dataLanes):
        _status = self.dll.rsscope_ConfigureMPHYDataLanes(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(dataLanes)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYDataSource(self, instrSession, serialBus, dataLane, dataSource):
        _status = self.dll.rsscope_ConfigureMPHYDataSource(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(dataLane),
            ViInt32(dataSource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYThreshold(self, instrSession, serialBus, dataLane, threshold):
        _status = self.dll.rsscope_ConfigureMPHYThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(dataLane),
            ViReal64(threshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYThresholdCouplingEnabled(self, instrSession, serialBus, enabled):
        _status = self.dll.rsscope_ConfigureMPHYThresholdCouplingEnabled(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYThresholdPreset(self, instrSession, serialBus, preset):
        _status = self.dll.rsscope_ConfigureMPHYThresholdPreset(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(preset)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYScrambledMode(self, instrSession, serialBus, scrambledMode):
        _status = self.dll.rsscope_ConfigureMPHYScrambledMode(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(scrambledMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureMPHYTriggerType(ViSession(instrSession), ViInt32(trigger), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerLCCType(self, instrSession, trigger, LCCType):
        _status = self.dll.rsscope_ConfigureMPHYTriggerLCCType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(LCCType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerWord(self, instrSession, trigger, word, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYTriggerWord(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(word),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerTCPattern(self, instrSession, trigger, TCPattern):
        _status = self.dll.rsscope_ConfigureMPHYTriggerTCPattern(
            ViSession(instrSession), ViInt32(trigger), ViString(TCPattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerCREQPattern(self, instrSession, trigger, CREQPattern):
        _status = self.dll.rsscope_ConfigureMPHYTriggerCREQPattern(
            ViSession(instrSession), ViInt32(trigger), ViInt32(CREQPattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerRREQPattern(self, instrSession, trigger, RREQPattern):
        _status = self.dll.rsscope_ConfigureMPHYTriggerRREQPattern(
            ViSession(instrSession), ViInt32(trigger), ViInt32(RREQPattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerData(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYTriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerIndex(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYTriggerIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerFSN(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYTriggerFSN(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerCRC(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYTriggerCRC(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerCredit(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYTriggerCredit(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerPACPBegin(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYTriggerPACPBegin(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerPACPID(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYTriggerPACPID(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerErrors(self, instrSession, trigger, LCC, length, reserved, symbol, uniProFrame):
        _status = self.dll.rsscope_ConfigureMPHYTriggerErrors(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(LCC),
            ViBoolean(length),
            ViBoolean(reserved),
            ViBoolean(symbol),
            ViBoolean(uniProFrame),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYTriggerPRPWidth(self, instrSession, trigger, width):
        _status = self.dll.rsscope_ConfigureMPHYTriggerPRPWidth(
            ViSession(instrSession), ViInt32(trigger), ViReal64(width)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICTriggerErrorTypeNameEnabled(self, instrSession, trigger, errorName, enabled):
        _status = self.dll.rsscope_ConfigureMPHYSSICTriggerErrorTypeNameEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICTriggerErrorTypeNumericEnabled(self, instrSession, trigger, errorNumber, enabled):
        _status = self.dll.rsscope_ConfigureMPHYSSICTriggerErrorTypeNumericEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(errorNumber),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICTriggerFrameTypeNameEnabled(self, instrSession, trigger, frame, enabled):
        _status = self.dll.rsscope_ConfigureMPHYSSICTriggerFrameTypeNameEnabled(
            ViSession(instrSession), ViInt32(trigger), ViString(frame), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICTriggerFrameTypeNumericEnabled(self, instrSession, trigger, frame, enabled):
        _status = self.dll.rsscope_ConfigureMPHYSSICTriggerFrameTypeNumericEnabled(
            ViSession(instrSession), ViInt32(trigger), ViInt32(frame), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICTriggerFrameFieldNameEnabled(self, instrSession, trigger, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureMPHYSSICTriggerFrameFieldNameEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICTriggerFrameFieldNumericEnabled(self, instrSession, trigger, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureMPHYSSICTriggerFrameFieldNumericEnabled(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICTriggerFrameFieldNameBitState(self, instrSession, trigger, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureMPHYSSICTriggerFrameFieldNameBitState(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICTriggerFrameFieldNumericBitState(self, instrSession, trigger, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureMPHYSSICTriggerFrameFieldNumericBitState(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICTriggerFrameFieldNameData(self, instrSession, trigger, frame, field, condition, min, max):
        _status = self.dll.rsscope_ConfigureMPHYSSICTriggerFrameFieldNameData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICTriggerFrameFieldNumericData(self, instrSession, trigger, frame, field, condition, min, max):
        _status = self.dll.rsscope_ConfigureMPHYSSICTriggerFrameFieldNumericData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICTriggerFrameFieldNameIndex(self, instrSession, trigger, frame, field, condition, min, max):
        _status = self.dll.rsscope_ConfigureMPHYSSICTriggerFrameFieldNameIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICTriggerFrameFieldNumericIndex(self, instrSession, trigger, frame, field, condition, min, max):
        _status = self.dll.rsscope_ConfigureMPHYSSICTriggerFrameFieldNumericIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMPHYFrameCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QueryMPHYFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryMPHYFrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryMPHYFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QueryMPHYFrameDataBytes(self, instrSession, serialBus, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryMPHYFrameDataBytes(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryMPHYFrameInfo(self, instrSession, serialBus, frame, bufferSize):
        info = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryMPHYFrameInfo(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            info,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(info)

    def QueryMPHYFrameCellCount(self, instrSession, serialBus, frame):
        count = ViInt32()
        _status = self.dll.rsscope_QueryMPHYFrameCellCount(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryMPHYFrameCellStatus(self, instrSession, serialBus, frame, cell):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        _status = self.dll.rsscope_QueryMPHYFrameCellStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(cell),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        return frameStatus, frameStart, frameStop

    def QueryMPHYFrameCellType(self, instrSession, serialBus, frame, cell):
        type = ViInt32()
        _status = self.dll.rsscope_QueryMPHYFrameCellType(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(cell),
            byref(type),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(type.value)

    def QueryMPHYFrameCellData(self, instrSession, serialBus, frame, cell):
        data = ViInt32()
        _status = self.dll.rsscope_QueryMPHYFrameCellData(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(cell),
            byref(data),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(data.value)

    def QueryMPHYSSICFrameType(self, instrSession, serialBus, frame):
        type = ViInt32()
        _status = self.dll.rsscope_QueryMPHYSSICFrameType(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(type.value)

    def ConfigureMPHYSearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureMPHYSearchType(ViSession(instrSession), ViString(searchName), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchLCCType(self, instrSession, searchName, LCCType):
        _status = self.dll.rsscope_ConfigureMPHYSearchLCCType(
            ViSession(instrSession), ViString(searchName), ViInt32(LCCType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchWord(self, instrSession, searchName, word, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYSearchWord(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(word),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchTCPattern(self, instrSession, searchName, TCPattern):
        _status = self.dll.rsscope_ConfigureMPHYSearchTCPattern(
            ViSession(instrSession), ViString(searchName), ViString(TCPattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchCREQPattern(self, instrSession, searchName, CREQPattern):
        _status = self.dll.rsscope_ConfigureMPHYSearchCREQPattern(
            ViSession(instrSession), ViString(searchName), ViInt32(CREQPattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchRREQPattern(self, instrSession, searchName, RREQPattern):
        _status = self.dll.rsscope_ConfigureMPHYSearchRREQPattern(
            ViSession(instrSession), ViString(searchName), ViInt32(RREQPattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchData(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYSearchData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchIndex(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYSearchIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(minimum),
            ViInt32(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchFSN(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYSearchFSN(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchCRC(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYSearchCRC(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchCredit(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYSearchCredit(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchPACPBegin(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYSearchPACPBegin(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchPACPID(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureMPHYSearchPACPID(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSearchErrors(self, instrSession, searchName, LCC, length, reserved, symbol, uniProFrame):
        _status = self.dll.rsscope_ConfigureMPHYSearchErrors(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(LCC),
            ViBoolean(length),
            ViBoolean(reserved),
            ViBoolean(symbol),
            ViBoolean(uniProFrame),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMPHYSearchFrameCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QueryMPHYSearchFrameCount(
            ViSession(instrSession), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryMPHYSearchFrameStatus(self, instrSession, searchName, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryMPHYSearchFrameStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QueryMPHYSearchFrameDataBytes(self, instrSession, searchName, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryMPHYSearchFrameDataBytes(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryMPHYSearchFrameCellCount(self, instrSession, searchName, frame):
        count = ViInt32()
        _status = self.dll.rsscope_QueryMPHYSearchFrameCellCount(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryMPHYSearchFrameCellStatus(self, instrSession, searchName, frame, cell):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        _status = self.dll.rsscope_QueryMPHYSearchFrameCellStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(cell),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        return frameStatus, frameStart, frameStop

    def QueryMPHYSearchFrameCellType(self, instrSession, searchName, frame, cell):
        type = ViInt32()
        _status = self.dll.rsscope_QueryMPHYSearchFrameCellType(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(cell),
            byref(type),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(type.value)

    def QueryMPHYSearchFrameCellData(self, instrSession, searchName, frame, cell):
        data = ViInt32()
        _status = self.dll.rsscope_QueryMPHYSearchFrameCellData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(cell),
            byref(data),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(data.value)

    def ConfigureMPHYSSICSearchErrorTypeNameEnabled(self, instrSession, searchName, errorName, enabled):
        _status = self.dll.rsscope_ConfigureMPHYSSICSearchErrorTypeNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICSearchErrorTypeNumericEnabled(self, instrSession, errorNumber, searchName, enabled):
        _status = self.dll.rsscope_ConfigureMPHYSSICSearchErrorTypeNumericEnabled(
            ViSession(instrSession),
            ViInt32(errorNumber),
            ViString(searchName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICSearchFrameTypeNameEnabled(self, instrSession, searchName, frame, enabled):
        _status = self.dll.rsscope_ConfigureMPHYSSICSearchFrameTypeNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICSearchFrameTypeNumericEnabled(self, instrSession, frame, searchName, enabled):
        _status = self.dll.rsscope_ConfigureMPHYSSICSearchFrameTypeNumericEnabled(
            ViSession(instrSession),
            ViInt32(frame),
            ViString(searchName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICSearchFrameFieldNameEnabled(self, instrSession, searchName, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureMPHYSSICSearchFrameFieldNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICSearchFrameFieldNumericEnabled(self, instrSession, frame, field, searchName, enabled):
        _status = self.dll.rsscope_ConfigureMPHYSSICSearchFrameFieldNumericEnabled(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(field),
            ViString(searchName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICSearchFrameFieldNameBitState(self, instrSession, searchName, frame, field, bitState):
        _status = self.dll.rsscope_ConfigureMPHYSSICSearchFrameFieldNameBitState(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICSearchFrameFieldNumericBitState(self, instrSession, frame, field, searchName, bitState):
        _status = self.dll.rsscope_ConfigureMPHYSSICSearchFrameFieldNumericBitState(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(field),
            ViString(searchName),
            ViInt32(bitState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICSearchFrameFieldNameData(self, instrSession, searchName, frame, field, condition, min, max):
        _status = self.dll.rsscope_ConfigureMPHYSSICSearchFrameFieldNameData(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICSearchFrameFieldNumericData(self, instrSession, frame, field, searchName, condition, min, max):
        _status = self.dll.rsscope_ConfigureMPHYSSICSearchFrameFieldNumericData(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(field),
            ViString(searchName),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICSearchFrameFieldNameIndex(self, instrSession, searchName, frame, field, condition, min, max):
        _status = self.dll.rsscope_ConfigureMPHYSSICSearchFrameFieldNameIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMPHYSSICSearchFrameFieldNumericIndex(
        self, instrSession, frame, field, searchName, condition, min, max
    ):
        _status = self.dll.rsscope_ConfigureMPHYSSICSearchFrameFieldNumericIndex(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(field),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireSource(self, instrSession, serialBus, signal, source):
        _status = self.dll.rsscope_ConfigureSpaceWireSource(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(signal), ViInt32(source)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireThresholdPreset(self, instrSession, serialBus, preset):
        _status = self.dll.rsscope_ConfigureSpaceWireThresholdPreset(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(preset)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireThresholdCoupling(self, instrSession, serialBus, state):
        _status = self.dll.rsscope_ConfigureSpaceWireThresholdCoupling(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(state)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireThreshold(self, instrSession, serialBus, signal, threshold, hysteresis):
        _status = self.dll.rsscope_ConfigureSpaceWireThreshold(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(signal),
            ViReal64(threshold),
            ViReal64(hysteresis),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireSyncSettings(self, instrSession, serialBus, mode, bitPosition):
        _status = self.dll.rsscope_ConfigureSpaceWireSyncSettings(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(mode),
            ViInt32(bitPosition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireMinGap(self, instrSession, serialBus, minGap):
        _status = self.dll.rsscope_ConfigureSpaceWireMinGap(
            ViSession(instrSession), ViInt32(serialBus), ViReal64(minGap)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireTriggerType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureSpaceWireTriggerType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireTriggerControlType(self, instrSession, trigger, type):
        _status = self.dll.rsscope_ConfigureSpaceWireTriggerControlType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireTriggerTimeCode(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureSpaceWireTriggerTimeCode(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireTriggerData(self, instrSession, trigger, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureSpaceWireTriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireTriggerErrorConditions(self, instrSession, trigger, parityError, escapeError):
        _status = self.dll.rsscope_ConfigureSpaceWireTriggerErrorConditions(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(parityError),
            ViBoolean(escapeError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySpaceWireFrameCount(self, instrSession, serialBus):
        count = ViInt32()
        _status = self.dll.rsscope_QuerySpaceWireFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QuerySpaceWireFrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QuerySpaceWireFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QuerySpaceWireFrameDataBytes(self, instrSession, serialBus, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QuerySpaceWireFrameDataBytes(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QuerySpaceWireFrameFieldStatus(self, instrSession, serialBus, frame, field):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QuerySpaceWireFrameFieldStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QuerySpaceWireFrameFieldDataBytes(self, instrSession, serialBus, frame, field, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QuerySpaceWireFrameFieldDataBytes(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QuerySpaceWireFrameFieldFormattedValue(self, instrSession, serialBus, frame, field, bufferSize):
        formatedValue = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QuerySpaceWireFrameFieldFormattedValue(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            ViInt32(bufferSize),
            formatedValue,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        formatedValue = decode(formatedValue)
        returnedValues = int(returnedValues.value)
        return formatedValue, returnedValues

    def ConfigureSpaceWireSearchType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureSpaceWireSearchType(
            ViSession(instrSession), ViString(searchName), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireSearchControlType(self, instrSession, searchName, type):
        _status = self.dll.rsscope_ConfigureSpaceWireSearchControlType(
            ViSession(instrSession), ViString(searchName), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireSearchTimeCode(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureSpaceWireSearchTimeCode(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireSearchData(self, instrSession, searchName, condition, minimum, maximum):
        _status = self.dll.rsscope_ConfigureSpaceWireSearchData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(minimum),
            ViString(maximum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpaceWireSearchErrorConditions(self, instrSession, searchName, parityError, escapeError):
        _status = self.dll.rsscope_ConfigureSpaceWireSearchErrorConditions(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(parityError),
            ViBoolean(escapeError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySpaceWireSearchFrameCount(self, instrSession, searchName):
        count = ViInt32()
        _status = self.dll.rsscope_QuerySpaceWireSearchFrameCount(
            ViSession(instrSession), ViString(searchName), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QuerySpaceWireSearchFrameStatus(self, instrSession, searchName, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QuerySpaceWireSearchFrameStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QuerySpaceWireSearchFrameDataBytes(self, instrSession, searchName, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QuerySpaceWireSearchFrameDataBytes(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def ConfigurePCIe(self, instrSession, serialBus, generation, link, descrambling):
        _status = self.dll.rsscope_ConfigurePCIe(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(generation),
            ViInt32(link),
            ViBoolean(descrambling),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeFilterIdle(self, instrSession, serialBus, filterIdlePackets):
        _status = self.dll.rsscope_ConfigurePCIeFilterIdle(
            ViSession(instrSession), ViInt32(serialBus), ViBoolean(filterIdlePackets)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeLane(self, instrSession, serialBus, lane, source, thresholdLow, thresholdHigh):
        _status = self.dll.rsscope_ConfigurePCIeLane(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(lane),
            ViInt32(source),
            ViReal64(thresholdLow),
            ViReal64(thresholdHigh),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeCDR(self, instrSession, serialBus, nominalBitRate, initialPhaseSync, selectedResults):
        _status = self.dll.rsscope_ConfigurePCIeCDR(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt64(nominalBitRate),
            ViInt32(initialPhaseSync),
            ViInt32(selectedResults),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeCDRPLL(self, instrSession, serialBus, order, damping, bandwidth):
        _status = self.dll.rsscope_ConfigurePCIeCDRPLL(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(order),
            ViReal64(damping),
            ViReal64(bandwidth),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeCDRPLLRelativeBandwidth(self, instrSession, serialBus, relativeBandwidth):
        _status = self.dll.rsscope_ConfigurePCIeCDRPLLRelativeBandwidth(
            ViSession(instrSession), ViInt32(serialBus), ViReal64(relativeBandwidth)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerType(self, instrSession, trigger, triggerType):
        _status = self.dll.rsscope_ConfigurePCIeTriggerType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(triggerType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerOSET(self, instrSession, trigger, orderedSetCondition):
        _status = self.dll.rsscope_ConfigurePCIeTriggerOSET(
            ViSession(instrSession), ViInt32(trigger), ViInt32(orderedSetCondition)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerError(self, instrSession, trigger, CRC16, LCRC, ECRC, invalidSymbol, disparityError):
        _status = self.dll.rsscope_ConfigurePCIeTriggerError(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(CRC16),
            ViBoolean(LCRC),
            ViBoolean(ECRC),
            ViBoolean(invalidSymbol),
            ViBoolean(disparityError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerTLPType(self, instrSession, trigger, TLP):
        _status = self.dll.rsscope_ConfigurePCIeTriggerTLPType(ViSession(instrSession), ViInt32(trigger), ViInt32(TLP))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerTLPAnyType(self, instrSession, trigger, sequenceNumber, TC, ordering, snoop, requesterID):
        _status = self.dll.rsscope_ConfigurePCIeTriggerTLPAnyType(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViString(requesterID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerTLPMem(
        self,
        instrSession,
        trigger,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        readWrite,
        requesterID,
        addressType,
    ):
        _status = self.dll.rsscope_ConfigurePCIeTriggerTLPMem(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViInt32(readWrite),
            ViString(requesterID),
            ViInt32(addressType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerTLPIO(
        self,
        instrSession,
        trigger,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        readWrite,
        requesterID,
    ):
        _status = self.dll.rsscope_ConfigurePCIeTriggerTLPIO(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViInt32(readWrite),
            ViString(requesterID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerTLPCfg(
        self,
        instrSession,
        trigger,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        readWrite,
        requesterID,
        type,
        deviceID,
    ):
        _status = self.dll.rsscope_ConfigurePCIeTriggerTLPCfg(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViInt32(readWrite),
            ViString(requesterID),
            ViInt32(type),
            ViString(deviceID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerTLPMsg(
        self,
        instrSession,
        trigger,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        routing,
        messageCode,
    ):
        _status = self.dll.rsscope_ConfigurePCIeTriggerTLPMsg(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViString(requesterID),
            ViInt32(routing),
            ViString(messageCode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerTLPCpl(
        self,
        instrSession,
        trigger,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        status,
        completerID,
    ):
        _status = self.dll.rsscope_ConfigurePCIeTriggerTLPCpl(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViString(requesterID),
            ViInt32(status),
            ViString(completerID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerTLPFetchAdd(
        self,
        instrSession,
        trigger,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        addressType,
    ):
        _status = self.dll.rsscope_ConfigurePCIeTriggerTLPFetchAdd(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViString(requesterID),
            ViInt32(addressType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerTLPSwap(
        self,
        instrSession,
        trigger,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        addressType,
    ):
        _status = self.dll.rsscope_ConfigurePCIeTriggerTLPSwap(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViString(requesterID),
            ViInt32(addressType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerTLPCAS(
        self,
        instrSession,
        trigger,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        addressType,
    ):
        _status = self.dll.rsscope_ConfigurePCIeTriggerTLPCAS(
            ViSession(instrSession),
            ViInt32(trigger),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViString(requesterID),
            ViInt32(addressType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerDLLPType(self, instrSession, trigger, DLLP):
        _status = self.dll.rsscope_ConfigurePCIeTriggerDLLPType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(DLLP)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerDLLPMRType(self, instrSession, trigger, MRDLLP):
        _status = self.dll.rsscope_ConfigurePCIeTriggerDLLPMRType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(MRDLLP)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerDLLPMRInit(self, instrSession, trigger, phase, VHFC, mixedType, authorized, devicePortType):
        _status = self.dll.rsscope_ConfigurePCIeTriggerDLLPMRInit(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(phase),
            ViInt32(VHFC),
            ViInt32(mixedType),
            ViInt32(authorized),
            ViInt32(devicePortType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerDLLPMRReset(self, instrSession, trigger, a, VHGroup):
        _status = self.dll.rsscope_ConfigurePCIeTriggerDLLPMRReset(
            ViSession(instrSession), ViInt32(trigger), ViInt32(a), ViInt32(VHGroup)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerDLLPMRFC(self, instrSession, trigger, MRDLLP, VLNumber, VHAbsent, TLPType, creditType):
        _status = self.dll.rsscope_ConfigurePCIeTriggerDLLPMRFC(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(MRDLLP),
            ViInt32(VLNumber),
            ViInt32(VHAbsent),
            ViInt32(TLPType),
            ViInt32(creditType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerDLLPAck(self, instrSession, trigger, DLLP, sequence):
        _status = self.dll.rsscope_ConfigurePCIeTriggerDLLPAck(
            ViSession(instrSession), ViInt32(trigger), ViInt32(DLLP), ViString(sequence)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerDLLPFC(self, instrSession, trigger, DLLP, creditType, VCID):
        _status = self.dll.rsscope_ConfigurePCIeTriggerDLLPFC(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(DLLP),
            ViInt32(creditType),
            ViInt32(VCID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerDLLPPM(self, instrSession, trigger, PMType):
        _status = self.dll.rsscope_ConfigurePCIeTriggerDLLPPM(
            ViSession(instrSession), ViInt32(trigger), ViInt32(PMType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeTriggerDLLPVendor(self, instrSession, trigger, vendorPattern):
        _status = self.dll.rsscope_ConfigurePCIeTriggerDLLPVendor(
            ViSession(instrSession), ViInt32(trigger), ViString(vendorPattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPCIePacketCount(self, instrSession, serialBus):
        packetCount = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketCount(ViSession(instrSession), ViInt32(serialBus), byref(packetCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(packetCount.value)

    def QueryPCIePacketStatus(self, instrSession, serialBus, packet):
        packetStatus = ViInt32()
        packetStart = ViReal64()
        packetStop = ViReal64()
        packetType = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packet),
            byref(packetStatus),
            byref(packetStart),
            byref(packetStop),
            byref(packetType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        packetStatus = int(packetStatus.value)
        packetStart = float(packetStart.value)
        packetStop = float(packetStop.value)
        packetType = int(packetType.value)
        return packetStatus, packetStart, packetStop, packetType

    def QueryPCIePacketDataBytes(self, instrSession, serialBus, packet, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketDataBytes(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packet),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryPCIePacketSequenceNumber(self, instrSession, serialBus, packet):
        sequenceNumber = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketSequenceNumber(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packet),
            byref(sequenceNumber),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(sequenceNumber.value)

    def QueryPCIePacketTag(self, instrSession, serialBus, packet):
        tag = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketTag(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(packet), byref(tag)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(tag.value)

    def QueryPCIePacketLength(self, instrSession, serialBus, packet):
        length = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketLength(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(packet), byref(length)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(length.value)

    def QueryPCIePacketAddress(self, instrSession, serialBus, packet):
        address = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketAddress(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(packet), byref(address)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(address.value)

    def QueryPCIePacketHFC(self, instrSession, serialBus, packet):
        HFC = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketHFC(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(packet), byref(HFC)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(HFC.value)

    def QueryPCIePacketDFC(self, instrSession, serialBus, packet):
        DFC = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketDFC(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(packet), byref(DFC)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(DFC.value)

    def QueryPCIePacketCompletionStatus(self, instrSession, serialBus, packet):
        completionStatus = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketCompletionStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packet),
            byref(completionStatus),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(completionStatus.value)

    def QueryPCIePacketRequesterID(self, instrSession, serialBus, packet):
        requesterID = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketRequesterID(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packet),
            byref(requesterID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(requesterID.value)

    def QueryPCIePacketCompleterID(self, instrSession, serialBus, packet):
        completerID = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketCompleterID(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packet),
            byref(completerID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(completerID.value)

    def QueryPCIePacketDecodedFieldsCount(self, instrSession, serialBus, packet):
        decodedFieldsCount = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketDecodedFieldsCount(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packet),
            byref(decodedFieldsCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(decodedFieldsCount.value)

    def QueryPCIePacketField(self, instrSession, serialBus, packet, field, bufferSize):
        fieldStatus = ViInt32()
        fieldType = ARRAY_ViChar(bufferSize)
        fieldValue = ViInt32()
        _status = self.dll.rsscope_QueryPCIePacketField(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packet),
            ViInt32(field),
            ViInt32(bufferSize),
            byref(fieldStatus),
            fieldType,
            byref(fieldValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        fieldStatus = int(fieldStatus.value)
        fieldType = decode(fieldType)
        fieldValue = int(fieldValue.value)
        return fieldStatus, fieldType, fieldValue

    def QueryPCIePacketFormattedValue(self, instrSession, serialBus, packet, field, bufferSize):
        formattedValue = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryPCIePacketFormattedValue(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(packet),
            ViInt32(field),
            ViInt32(bufferSize),
            formattedValue,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(formattedValue)

    def ConfigurePCIeSearchType(self, instrSession, searchName, searchType):
        _status = self.dll.rsscope_ConfigurePCIeSearchType(
            ViSession(instrSession), ViString(searchName), ViInt32(searchType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchOrderedSets(
        self,
        instrSession,
        searchName,
        TS1,
        TS2,
        fastTrainingSeq,
        electricalIdle,
        electricalIdleExit,
        SKP,
        compliancePattern,
    ):
        _status = self.dll.rsscope_ConfigurePCIeSearchOrderedSets(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(TS1),
            ViBoolean(TS2),
            ViBoolean(fastTrainingSeq),
            ViBoolean(electricalIdle),
            ViBoolean(electricalIdleExit),
            ViBoolean(SKP),
            ViBoolean(compliancePattern),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchError(self, instrSession, searchName, CRC16, LCRC, ECRC, invalidSymbol, disparityError):
        _status = self.dll.rsscope_ConfigurePCIeSearchError(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(CRC16),
            ViBoolean(LCRC),
            ViBoolean(ECRC),
            ViBoolean(invalidSymbol),
            ViBoolean(disparityError),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchTLPType(self, instrSession, searchName, TLP):
        _status = self.dll.rsscope_ConfigurePCIeSearchTLPType(
            ViSession(instrSession), ViString(searchName), ViInt32(TLP)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchTLPAnyType(self, instrSession, searchName, sequenceNumber, TC, ordering, snoop, requesterID):
        _status = self.dll.rsscope_ConfigurePCIeSearchTLPAnyType(
            ViSession(instrSession),
            ViString(searchName),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViString(requesterID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchTLPMem(
        self,
        instrSession,
        searchName,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        readWrite,
        requesterID,
        addressType,
    ):
        _status = self.dll.rsscope_ConfigurePCIeSearchTLPMem(
            ViSession(instrSession),
            ViString(searchName),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViInt32(readWrite),
            ViString(requesterID),
            ViInt32(addressType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchTLPIO(
        self,
        instrSession,
        searchName,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        readWrite,
        requesterID,
    ):
        _status = self.dll.rsscope_ConfigurePCIeSearchTLPIO(
            ViSession(instrSession),
            ViString(searchName),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViInt32(readWrite),
            ViString(requesterID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchTLPCfg(
        self,
        instrSession,
        searchName,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        readWrite,
        requesterID,
        type,
        deviceID,
    ):
        _status = self.dll.rsscope_ConfigurePCIeSearchTLPCfg(
            ViSession(instrSession),
            ViString(searchName),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViInt32(readWrite),
            ViString(requesterID),
            ViInt32(type),
            ViString(deviceID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchTLPMsg(
        self,
        instrSession,
        searchName,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        routing,
        messageCode,
    ):
        _status = self.dll.rsscope_ConfigurePCIeSearchTLPMsg(
            ViSession(instrSession),
            ViString(searchName),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViString(requesterID),
            ViInt32(routing),
            ViString(messageCode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchTLPCpl(
        self,
        instrSession,
        searchName,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        status,
        completerID,
    ):
        _status = self.dll.rsscope_ConfigurePCIeSearchTLPCpl(
            ViSession(instrSession),
            ViString(searchName),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViString(requesterID),
            ViInt32(status),
            ViString(completerID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchTLPFetchAdd(
        self,
        instrSession,
        searchName,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        addressType,
    ):
        _status = self.dll.rsscope_ConfigurePCIeSearchTLPFetchAdd(
            ViSession(instrSession),
            ViString(searchName),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViString(requesterID),
            ViInt32(addressType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchTLPSwap(
        self,
        instrSession,
        searchName,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        addressType,
    ):
        _status = self.dll.rsscope_ConfigurePCIeSearchTLPSwap(
            ViSession(instrSession),
            ViString(searchName),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViString(requesterID),
            ViInt32(addressType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchTLPCAS(
        self,
        instrSession,
        searchName,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        addressType,
    ):
        _status = self.dll.rsscope_ConfigurePCIeSearchTLPCAS(
            ViSession(instrSession),
            ViString(searchName),
            ViString(sequenceNumber),
            ViInt32(TC),
            ViInt32(ordering),
            ViInt32(snoop),
            ViString(requesterID),
            ViInt32(addressType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchDLLPType(self, instrSession, searchName, DLLP):
        _status = self.dll.rsscope_ConfigurePCIeSearchDLLPType(
            ViSession(instrSession), ViString(searchName), ViInt32(DLLP)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchDLLPMRType(self, instrSession, searchName, MRDLLP):
        _status = self.dll.rsscope_ConfigurePCIeSearchDLLPMRType(
            ViSession(instrSession), ViString(searchName), ViInt32(MRDLLP)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchDLLPMRInit(
        self, instrSession, searchName, phase, VHFC, mixedType, authorized, devicePortType
    ):
        _status = self.dll.rsscope_ConfigurePCIeSearchDLLPMRInit(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(phase),
            ViInt32(VHFC),
            ViInt32(mixedType),
            ViInt32(authorized),
            ViInt32(devicePortType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchDLLPMRReset(self, instrSession, searchName, a, VHGroup):
        _status = self.dll.rsscope_ConfigurePCIeSearchDLLPMRReset(
            ViSession(instrSession), ViString(searchName), ViInt32(a), ViInt32(VHGroup)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchDLLPMRFC(self, instrSession, searchName, MRDLLP, VLNumber, VHAbsent, TLPType, creditType):
        _status = self.dll.rsscope_ConfigurePCIeSearchDLLPMRFC(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(MRDLLP),
            ViInt32(VLNumber),
            ViInt32(VHAbsent),
            ViInt32(TLPType),
            ViInt32(creditType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchDLLPAck(self, instrSession, searchName, DLLP, sequence):
        _status = self.dll.rsscope_ConfigurePCIeSearchDLLPAck(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(DLLP),
            ViString(sequence),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchDLLPFC(self, instrSession, searchName, DLLP, creditType, VCID):
        _status = self.dll.rsscope_ConfigurePCIeSearchDLLPFC(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(DLLP),
            ViInt32(creditType),
            ViInt32(VCID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchDLLPPM(self, instrSession, searchName, PMType):
        _status = self.dll.rsscope_ConfigurePCIeSearchDLLPPM(
            ViSession(instrSession), ViString(searchName), ViInt32(PMType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePCIeSearchDLLPVendor(self, instrSession, searchName, vendorPattern):
        _status = self.dll.rsscope_ConfigurePCIeSearchDLLPVendor(
            ViSession(instrSession), ViString(searchName), ViString(vendorPattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPCIeSearchPacketCount(self, instrSession, searchName):
        searchPCIePacketCount = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketCount(
            ViSession(instrSession), ViString(searchName), byref(searchPCIePacketCount)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(searchPCIePacketCount.value)

    def QueryPCIeSearchPacketStatus(self, instrSession, searchName, packet):
        packetStatus = ViInt32()
        packetStart = ViReal64()
        packetStop = ViReal64()
        packetType = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(packet),
            byref(packetStatus),
            byref(packetStart),
            byref(packetStop),
            byref(packetType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        packetStatus = int(packetStatus.value)
        packetStart = float(packetStart.value)
        packetStop = float(packetStop.value)
        packetType = int(packetType.value)
        return packetStatus, packetStart, packetStop, packetType

    def QueryPCIeSearchPacketDataBytes(self, instrSession, searchName, packet, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketDataBytes(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(packet),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryPCIeSearchPacketSequenceNumber(self, instrSession, searchName, packet):
        sequenceNumber = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketSequenceNumber(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(packet),
            byref(sequenceNumber),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(sequenceNumber.value)

    def QueryPCIeSearchPacketTag(self, instrSession, searchName, packet):
        tag = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketTag(
            ViSession(instrSession), ViString(searchName), ViInt32(packet), byref(tag)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(tag.value)

    def QueryPCIeSearchPacketLength(self, instrSession, searchName, packet):
        length = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketLength(
            ViSession(instrSession), ViString(searchName), ViInt32(packet), byref(length)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(length.value)

    def QueryPCIeSearchPacketAddress(self, instrSession, searchName, packet):
        address = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketAddress(
            ViSession(instrSession), ViString(searchName), ViInt32(packet), byref(address)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(address.value)

    def QueryPCIeSearchPacketHFC(self, instrSession, searchName, packet):
        HFC = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketHFC(
            ViSession(instrSession), ViString(searchName), ViInt32(packet), byref(HFC)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(HFC.value)

    def QueryPCIeSearchPacketDFC(self, instrSession, searchName, packet):
        DFC = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketDFC(
            ViSession(instrSession), ViString(searchName), ViInt32(packet), byref(DFC)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(DFC.value)

    def QueryPCIeSearchPacketCompletionStatus(self, instrSession, searchName, packet):
        completionStatus = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketCompletionStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(packet),
            byref(completionStatus),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(completionStatus.value)

    def QueryPCIeSearchPacketRequesterID(self, instrSession, searchName, packet):
        requesterID = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketRequesterID(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(packet),
            byref(requesterID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(requesterID.value)

    def QueryPCIeSearchPacketCompleterID(self, instrSession, searchName, packet):
        completerID = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketCompleterID(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(packet),
            byref(completerID),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(completerID.value)

    def QueryPCIeSearchPacketDecodedFieldsCount(self, instrSession, searchName, packet):
        decodedFieldsCount = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketDecodedFieldsCount(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(packet),
            byref(decodedFieldsCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(decodedFieldsCount.value)

    def QueryPCIeSearchPacketField(self, instrSession, searchName, packet, field, bufferSize):
        fieldStatus = ViInt32()
        fieldType = ARRAY_ViChar(bufferSize)
        fieldValue = ViInt32()
        _status = self.dll.rsscope_QueryPCIeSearchPacketField(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(packet),
            ViInt32(field),
            ViInt32(bufferSize),
            byref(fieldStatus),
            fieldType,
            byref(fieldValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        fieldStatus = int(fieldStatus.value)
        fieldType = decode(fieldType)
        fieldValue = int(fieldValue.value)
        return fieldStatus, fieldType, fieldValue

    def QueryPCIeSearchPacketFormattedValue(self, instrSession, searchName, packet, field, bufferSize):
        formattedValue = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryPCIeSearchPacketFormattedValue(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(packet),
            ViInt32(field),
            ViInt32(bufferSize),
            formattedValue,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(formattedValue)

    def ConfigureCXPI(self, instrSession, serialBus, source, polarity):
        _status = self.dll.rsscope_ConfigureCXPI(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(source),
            ViInt32(polarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPIThresholds(self, instrSession, serialBus, threshold, hysteresis):
        _status = self.dll.rsscope_ConfigureCXPIThresholds(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViReal64(threshold),
            ViReal64(hysteresis),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPIDisplayOrder(self, instrSession, serialBus, displayOrder):
        _status = self.dll.rsscope_ConfigureCXPIDisplayOrder(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(displayOrder)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPIBitRate(self, instrSession, serialBus, enabled, bitRateValue):
        _status = self.dll.rsscope_ConfigureCXPIBitRate(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViBoolean(enabled),
            ViInt32(bitRateValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryCXPIMeasuredBitRate(self, instrSession, serialBus):
        measuredBitRate = ViInt32()
        _status = self.dll.rsscope_QueryCXPIMeasuredBitRate(
            ViSession(instrSession), ViInt32(serialBus), byref(measuredBitRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(measuredBitRate.value)

    def ConfigureCXPISpacing(self, instrSession, serialBus, IBSMin, IBSMax, IFSMin, IFSMax):
        _status = self.dll.rsscope_ConfigureCXPISpacing(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(IBSMin),
            ViInt32(IBSMax),
            ViInt32(IFSMin),
            ViInt32(IFSMax),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPITriggerType(self, instrSession, trigger, triggerType):
        _status = self.dll.rsscope_ConfigureCXPITriggerType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(triggerType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPITrigger(self, instrSession, trigger, NM, CT):
        _status = self.dll.rsscope_ConfigureCXPITrigger(
            ViSession(instrSession), ViInt32(trigger), ViString(NM), ViString(CT)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPITriggerFrameID(self, instrSession, trigger, condition, min, max):
        _status = self.dll.rsscope_ConfigureCXPITriggerFrameID(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPITriggerDLC(self, instrSession, trigger, condition, min, max):
        _status = self.dll.rsscope_ConfigureCXPITriggerDLC(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPITriggerDLCExtend(self, instrSession, trigger, condition, min, max):
        _status = self.dll.rsscope_ConfigureCXPITriggerDLCExtend(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPITriggerData(self, instrSession, trigger, condition, min, max):
        _status = self.dll.rsscope_ConfigureCXPITriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPITriggerIndex(self, instrSession, trigger, condition, min, max):
        _status = self.dll.rsscope_ConfigureCXPITriggerIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPITriggerError(self, instrSession, trigger, CRC, DLC, IBS, IFS, length, parity, UART):
        _status = self.dll.rsscope_ConfigureCXPITriggerError(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(CRC),
            ViBoolean(DLC),
            ViBoolean(IBS),
            ViBoolean(IFS),
            ViBoolean(length),
            ViBoolean(parity),
            ViBoolean(UART),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryCXPIFrameCount(self, instrSession, serialBus):
        frameCount = ViInt32()
        _status = self.dll.rsscope_QueryCXPIFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(frameCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameCount.value)

    def QueryCXPIFrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryCXPIFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QueryCXPIFrameDataBytes(self, instrSession, serialBus, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryCXPIFrameDataBytes(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryCXPIFrameDLCField(self, instrSession, serialBus, frame):
        DLCField = ViReal64()
        _status = self.dll.rsscope_QueryCXPIFrameDLCField(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(DLCField)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(DLCField.value)

    def QueryCXPIFrameWordStatus(self, instrSession, serialBus, frame, word):
        status = ViInt32()
        type = ARRAY_ViChar(1024)
        value = ViInt32()
        _status = self.dll.rsscope_QueryCXPIFrameWordStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(word),
            byref(status),
            type,
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        type = decode(type)
        value = int(value.value)
        return status, type, value

    def ConfigureCXPISearchType(self, instrSession, searchName, searchType):
        _status = self.dll.rsscope_ConfigureCXPISearchType(
            ViSession(instrSession), ViString(searchName), ViInt32(searchType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPISearch(self, instrSession, searchName, NM, CT):
        _status = self.dll.rsscope_ConfigureCXPISearch(
            ViSession(instrSession), ViString(searchName), ViString(NM), ViString(CT)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPISearchFrameID(self, instrSession, searchName, condition, min, max):
        _status = self.dll.rsscope_ConfigureCXPISearchFrameID(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPISearchDLC(self, instrSession, searchName, condition, min, max):
        _status = self.dll.rsscope_ConfigureCXPISearchDLC(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPISearchDLCExtend(self, instrSession, searchName, condition, min, max):
        _status = self.dll.rsscope_ConfigureCXPISearchDLCExtend(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPISearchData(self, instrSession, searchName, condition, min, max):
        _status = self.dll.rsscope_ConfigureCXPISearchData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPISearchIndex(self, instrSession, searchName, condition, min, max):
        _status = self.dll.rsscope_ConfigureCXPISearchIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCXPISearchError(self, instrSession, searchName, CRC, DLC, IBS, IFS, length, parity, UART):
        _status = self.dll.rsscope_ConfigureCXPISearchError(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(CRC),
            ViBoolean(DLC),
            ViBoolean(IBS),
            ViBoolean(IFS),
            ViBoolean(length),
            ViBoolean(parity),
            ViBoolean(UART),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryCXPISearchFrameCount(self, instrSession, searchName):
        frameCount = ViInt32()
        _status = self.dll.rsscope_QueryCXPISearchFrameCount(
            ViSession(instrSession), ViString(searchName), byref(frameCount)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameCount.value)

    def QueryCXPISearchFrameStatus(self, instrSession, searchName, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryCXPISearchFrameStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QueryCXPISearchFrameDLCField(self, instrSession, searchName, frame):
        DLCField = ViReal64()
        _status = self.dll.rsscope_QueryCXPISearchFrameDLCField(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), byref(DLCField)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(DLCField.value)

    def QueryCXPISearchFrameDataBytes(self, instrSession, searchName, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_QueryCXPISearchFrameDataBytes(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def QueryCXPISearchFrameWordStatus(self, instrSession, searchName, frame, word):
        status = ViInt32()
        type = ARRAY_ViChar(1024)
        value = ViInt32()
        _status = self.dll.rsscope_QueryCXPISearchFrameWordStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(word),
            byref(status),
            type,
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        status = int(status.value)
        type = decode(type)
        value = int(value.value)
        return status, type, value

    def ConfigureDDR(self, instrSession, serialBus, type, source, threshold, hysteresis):
        _status = self.dll.rsscope_ConfigureDDR(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(type),
            ViInt32(source),
            ViReal64(threshold),
            ViReal64(hysteresis),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryDDRFrameCount(self, instrSession, serialBus):
        frameCount = ViInt32()
        _status = self.dll.rsscope_QueryDDRFrameCount(ViSession(instrSession), ViInt32(serialBus), byref(frameCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameCount.value)

    def QueryDDRFrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryDDRFrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QueryDDRFrameNumberOfWords(self, instrSession, serialBus, frame):
        words = ViInt32()
        _status = self.dll.rsscope_QueryDDRFrameNumberOfWords(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(words)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(words.value)

    def QueryDDRFrameFieldStatus(self, instrSession, serialBus, frame, field, bufferSize):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        value = ViInt32()
        formattedValue = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryDDRFrameFieldStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(field),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(value),
            ViInt32(bufferSize),
            formattedValue,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        value = int(value.value)
        formattedValue = decode(formattedValue)
        return frameStatus, frameStart, frameStop, value, formattedValue

    def ConfigureDDREyeDiagramDisplay(self, instrSession, eyeDiagram, maxSlicesPerAcquisition, stripeDisplayMode):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramDisplay(
            ViSession(instrSession),
            ViInt32(eyeDiagram),
            ViInt32(maxSlicesPerAcquisition),
            ViInt32(stripeDisplayMode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramEnabled(self, instrSession, eyeDiagram, enabled):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramEnabled(
            ViSession(instrSession), ViInt32(eyeDiagram), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramSource(self, instrSession, eyeDiagram, source):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramSource(
            ViSession(instrSession), ViInt32(eyeDiagram), ViInt32(source)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramBitRate(self, instrSession, eyeDiagram, bitRate):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramBitRate(
            ViSession(instrSession), ViInt32(eyeDiagram), ViInt64(bitRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramTimingReference(self, instrSession, eyeDiagram, timingReferenceSource, slope, level):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramTimingReference(
            ViSession(instrSession),
            ViInt32(eyeDiagram),
            ViInt32(timingReferenceSource),
            ViInt32(slope),
            ViInt32(level),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramHorizontalSettings(
        self,
        instrSession,
        eyeDiagram,
        timeSettings,
        timeRange,
        timePosition,
        bitRate,
        rangeUI,
        positionUI,
    ):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramHorizontalSettings(
            ViSession(instrSession),
            ViInt32(eyeDiagram),
            ViInt32(timeSettings),
            ViReal64(timeRange),
            ViReal64(timePosition),
            ViReal64(bitRate),
            ViReal64(rangeUI),
            ViReal64(positionUI),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramGate(
        self,
        instrSession,
        eyeDiagram,
        enabled,
        couplingMode,
        mode,
        start,
        stop,
        cursor,
        diagram,
        zoom,
    ):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramGate(
            ViSession(instrSession),
            ViInt32(eyeDiagram),
            ViBoolean(enabled),
            ViInt32(couplingMode),
            ViInt32(mode),
            ViReal64(start),
            ViReal64(stop),
            ViInt32(cursor),
            ViString(diagram),
            ViString(zoom),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramSignal(
        self, instrSession, eyeDiagram, enabled, source, condition, verticalReferenceLevel
    ):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramSignal(
            ViSession(instrSession),
            ViInt32(eyeDiagram),
            ViBoolean(enabled),
            ViInt32(source),
            ViInt32(condition),
            ViInt32(verticalReferenceLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramFilterEnabled(self, instrSession, eyeDiagram, enabled):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramFilterEnabled(
            ViSession(instrSession), ViInt32(eyeDiagram), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramFilterReset(self, instrSession, eyeDiagram):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramFilterReset(ViSession(instrSession), ViInt32(eyeDiagram))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramFilterBitSequenceMode(self, instrSession, eyeDiagram, mode):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramFilterBitSequenceMode(
            ViSession(instrSession), ViInt32(eyeDiagram), ViInt32(mode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramFilterPatternPrefixBit(self, instrSession, eyeDiagram, bit, bitValue):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramFilterPatternPrefixBit(
            ViSession(instrSession), ViInt32(eyeDiagram), ViInt32(bit), ViInt32(bitValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramFilterPatternCenterBit(self, instrSession, eyeDiagram, bitValue):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramFilterPatternCenterBit(
            ViSession(instrSession), ViInt32(eyeDiagram), ViInt32(bitValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramFilterPatternSuffixBit(self, instrSession, eyeDiagram, bit, bitValue):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramFilterPatternSuffixBit(
            ViSession(instrSession), ViInt32(eyeDiagram), ViInt32(bit), ViInt32(bitValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramFilterPatternShiftBit(self, instrSession, eyeDiagram, shift):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramFilterPatternShiftBit(
            ViSession(instrSession), ViInt32(eyeDiagram), ViInt32(shift)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramFilterFrameType(self, instrSession, eyeDiagram, frameType):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramFilterFrameType(
            ViSession(instrSession), ViInt32(eyeDiagram), ViInt32(frameType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramFilterLengthErrors(self, instrSession, eyeDiagram, lengthErrorsEnabled):
        _status = self.dll.rsscope_ConfigureDDREyeDiagramFilterLengthErrors(
            ViSession(instrSession), ViInt32(eyeDiagram), ViBoolean(lengthErrorsEnabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDREyeDiagramMaskTestsSlices(self, instrSession):
        completed = ViInt32()
        hits = ViInt32()
        _status = self.dll.rsscope_ConfigureDDREyeDiagramMaskTestsSlices(
            ViSession(instrSession), byref(completed), byref(hits)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        completed = int(completed.value)
        hits = int(hits.value)
        return completed, hits

    def ConfigureDDREyeDiagramMaskTestsViolation(self, instrSession, violation):
        count = ViInt32()
        start = ViReal64()
        stop = ViReal64()
        slice = ViInt32()
        _status = self.dll.rsscope_ConfigureDDREyeDiagramMaskTestsViolation(
            ViSession(instrSession),
            ViInt32(violation),
            byref(count),
            byref(start),
            byref(stop),
            byref(slice),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        count = int(count.value)
        start = float(start.value)
        stop = float(stop.value)
        slice = int(slice.value)
        return count, start, stop, slice

    def ConfigureDDRSearchErrorTypeNameEnabled(self, instrSession, searchName, errorName, enabled):
        _status = self.dll.rsscope_ConfigureDDRSearchErrorTypeNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(errorName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDRSearchErrorTypeNumericEnabled(self, instrSession, errorNumber, searchName, enabled):
        _status = self.dll.rsscope_ConfigureDDRSearchErrorTypeNumericEnabled(
            ViSession(instrSession),
            ViInt32(errorNumber),
            ViString(searchName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDRSearchFrameTypeNameEnabled(self, instrSession, searchName, frame, enabled):
        _status = self.dll.rsscope_ConfigureDDRSearchFrameTypeNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDRSearchFrameTypeNumericEnabled(self, instrSession, frameNumber, searchName, enabled):
        _status = self.dll.rsscope_ConfigureDDRSearchFrameTypeNumericEnabled(
            ViSession(instrSession),
            ViInt32(frameNumber),
            ViString(searchName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDRSearchFrameFieldNameEnabled(self, instrSession, searchName, frame, field, enabled):
        _status = self.dll.rsscope_ConfigureDDRSearchFrameFieldNameEnabled(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDRSearchFrameFieldNumericEnabled(self, instrSession, frame, field, searchName, enabled):
        _status = self.dll.rsscope_ConfigureDDRSearchFrameFieldNumericEnabled(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(field),
            ViString(searchName),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDRSearchFrameFieldNameData(self, instrSession, searchName, frame, field, condition, min, max):
        _status = self.dll.rsscope_ConfigureDDRSearchFrameFieldNameData(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDRSearchFrameFieldNameIndex(self, instrSession, searchName, frame, field, condition, min, max):
        _status = self.dll.rsscope_ConfigureDDRSearchFrameFieldNameIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViString(frame),
            ViString(field),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDRSearchFrameFieldNumericData(self, instrSession, frame, field, searchName, condition, min, max):
        _status = self.dll.rsscope_ConfigureDDRSearchFrameFieldNumericData(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(field),
            ViString(searchName),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDDRSearchFrameFieldNumericIndex(self, instrSession, frame, field, searchName, condition, min, max):
        _status = self.dll.rsscope_ConfigureDDRSearchFrameFieldNumericIndex(
            ViSession(instrSession),
            ViInt32(frame),
            ViInt32(field),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryDDRSearchFrameCount(self, instrSession, searchName):
        frameCount = ViInt32()
        _status = self.dll.rsscope_QueryDDRSearchFrameCount(
            ViSession(instrSession), ViString(searchName), byref(frameCount)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameCount.value)

    def QueryDDRSearchFrameStatus(self, instrSession, searchName, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_QueryDDRSearchFrameStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def QueryDDRSearchFrameNumberOfWords(self, instrSession, searchName, frame):
        words = ViInt32()
        _status = self.dll.rsscope_QueryDDRSearchFrameNumberOfWords(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), byref(words)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(words.value)

    def QueryDDRSearchFrameFieldStatus(self, instrSession, searchName, frame, field, bufferSize):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        value = ViInt32()
        formattedValue = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryDDRSearchFrameFieldStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(field),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(value),
            ViInt32(bufferSize),
            formattedValue,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        value = int(value.value)
        formattedValue = decode(formattedValue)
        return frameStatus, frameStart, frameStop, value, formattedValue

    def Configure100BASET1(self, instrSession, serialBus, attenuation, polarity, threshold, mode, symbolRate):
        _status = self.dll.rsscope_Configure100BASET1(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViReal64(attenuation),
            ViInt32(polarity),
            ViReal64(threshold),
            ViInt32(mode),
            ViReal64(symbolRate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1Source(
        self,
        instrSession,
        serialBus,
        direction,
        positiveSource,
        negativeSource,
        differentialSource,
    ):
        _status = self.dll.rsscope_Configure100BASET1Source(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(direction),
            ViInt32(positiveSource),
            ViInt32(negativeSource),
            ViInt32(differentialSource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1SignalType(self, instrSession, serialBus, direction, type):
        _status = self.dll.rsscope_Configure100BASET1SignalType(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(direction), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1TriggerType(self, instrSession, trigger, triggerType):
        _status = self.dll.rsscope_Configure100BASET1TriggerType(
            ViSession(instrSession), ViInt32(trigger), ViInt32(triggerType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1TriggerDestinationAddress(self, instrSession, trigger, condition, min, max):
        _status = self.dll.rsscope_Configure100BASET1TriggerDestinationAddress(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1TriggerSourceAddress(self, instrSession, trigger, condition, min, max):
        _status = self.dll.rsscope_Configure100BASET1TriggerSourceAddress(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1TriggerTypeLength(self, instrSession, trigger, condition, min, max):
        _status = self.dll.rsscope_Configure100BASET1TriggerTypeLength(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1TriggerCRC(self, instrSession, trigger, condition, min, max):
        _status = self.dll.rsscope_Configure100BASET1TriggerCRC(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1TriggerData(self, instrSession, trigger, condition, min, max):
        _status = self.dll.rsscope_Configure100BASET1TriggerData(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1TriggerIndex(self, instrSession, trigger, condition, min, max):
        _status = self.dll.rsscope_Configure100BASET1TriggerIndex(
            ViSession(instrSession),
            ViInt32(trigger),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1TriggerError(self, instrSession, trigger, preamble, CRC, SFD):
        _status = self.dll.rsscope_Configure100BASET1TriggerError(
            ViSession(instrSession),
            ViInt32(trigger),
            ViBoolean(preamble),
            ViBoolean(CRC),
            ViBoolean(SFD),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Query100BASET1FrameCount(self, instrSession, serialBus):
        frameCount = ViInt32()
        _status = self.dll.rsscope_Query100BASET1FrameCount(
            ViSession(instrSession), ViInt32(serialBus), byref(frameCount)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameCount.value)

    def Query100BASET1FrameStatus(self, instrSession, serialBus, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_Query100BASET1FrameStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def Query100BASET1FrameAddress(self, instrSession, serialBus, frame, bufferSize):
        destination = ARRAY_ViChar(bufferSize)
        source = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_Query100BASET1FrameAddress(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            destination,
            source,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        destination = decode(destination)
        source = decode(source)
        return destination, source

    def Query100BASET1FrameCRC(self, instrSession, serialBus, frame):
        CRC = ViInt32()
        _status = self.dll.rsscope_Query100BASET1FrameCRC(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(CRC)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(CRC.value)

    def Query100BASET1FrameType(self, instrSession, serialBus, frame):
        type = ViInt32()
        _status = self.dll.rsscope_Query100BASET1FrameType(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(type.value)

    def Query100BASET1FrameLabel(self, instrSession, serialBus, frame, bufferSize):
        destination = ARRAY_ViChar(bufferSize)
        source = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_Query100BASET1FrameLabel(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            destination,
            source,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        destination = decode(destination)
        source = decode(source)
        return destination, source

    def Query100BASET1FrameBitRate(self, instrSession, frame, serialBus):
        bitRate = ViInt64()
        _status = self.dll.rsscope_Query100BASET1FrameBitRate(
            ViSession(instrSession), ViInt32(frame), ViInt32(serialBus), byref(bitRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(bitRate.value)

    def Query100BASET1FrameDataBytes(self, instrSession, serialBus, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_Query100BASET1FrameDataBytes(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def Query100BASET1FrameNumberOfWords(self, instrSession, serialBus, frame):
        words = ViInt32()
        _status = self.dll.rsscope_Query100BASET1FrameNumberOfWords(
            ViSession(instrSession), ViInt32(serialBus), ViInt32(frame), byref(words)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(words.value)

    def Query100BASET1FrameWordStatus(self, instrSession, serialBus, frame, word, bufferSize):
        type = ARRAY_ViChar(bufferSize)
        value = ViInt32()
        _status = self.dll.rsscope_Query100BASET1FrameWordStatus(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(word),
            ViInt32(bufferSize),
            type,
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        type = decode(type)
        value = int(value.value)
        return type, value

    def Query100BASET1FrameWordStringValue(self, instrSession, serialBus, frame, word, bufferSize):
        value = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_Query100BASET1FrameWordStringValue(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(frame),
            ViInt32(word),
            ViInt32(bufferSize),
            value,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def Configure100BASET1SearchType(self, instrSession, searchName, triggerType):
        _status = self.dll.rsscope_Configure100BASET1SearchType(
            ViSession(instrSession), ViString(searchName), ViInt32(triggerType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1SearchDestinationAddress(self, instrSession, searchName, condition, min, max):
        _status = self.dll.rsscope_Configure100BASET1SearchDestinationAddress(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1SearchSourceAddress(self, instrSession, searchName, condition, min, max):
        _status = self.dll.rsscope_Configure100BASET1SearchSourceAddress(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1SearchTypeLength(self, instrSession, searchName, condition, min, max):
        _status = self.dll.rsscope_Configure100BASET1SearchTypeLength(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1SearchCRC(self, instrSession, searchName, condition, min, max):
        _status = self.dll.rsscope_Configure100BASET1SearchCRC(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1SearchData(self, instrSession, searchName, condition, min, max):
        _status = self.dll.rsscope_Configure100BASET1SearchData(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViString(min),
            ViString(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1SearchIndex(self, instrSession, searchName, condition, min, max):
        _status = self.dll.rsscope_Configure100BASET1SearchIndex(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(condition),
            ViInt32(min),
            ViInt32(max),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Configure100BASET1SearchError(self, instrSession, searchName, preamble, CRC, SFD):
        _status = self.dll.rsscope_Configure100BASET1SearchError(
            ViSession(instrSession),
            ViString(searchName),
            ViBoolean(preamble),
            ViBoolean(CRC),
            ViBoolean(SFD),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Query100BASET1SearchFrameCount(self, instrSession, searchName):
        frameCount = ViInt32()
        _status = self.dll.rsscope_Query100BASET1SearchFrameCount(
            ViSession(instrSession), ViString(searchName), byref(frameCount)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(frameCount.value)

    def Query100BASET1SearchFrameStatus(self, instrSession, searchName, frame):
        frameStatus = ViInt32()
        frameStart = ViReal64()
        frameStop = ViReal64()
        frameType = ViInt32()
        _status = self.dll.rsscope_Query100BASET1SearchFrameStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            byref(frameStatus),
            byref(frameStart),
            byref(frameStop),
            byref(frameType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        frameStatus = int(frameStatus.value)
        frameStart = float(frameStart.value)
        frameStop = float(frameStop.value)
        frameType = int(frameType.value)
        return frameStatus, frameStart, frameStop, frameType

    def Query100BASET1SearchFrameAddress(self, instrSession, searchName, frame, bufferSize):
        destination = ARRAY_ViChar(bufferSize)
        source = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_Query100BASET1SearchFrameAddress(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            destination,
            source,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        destination = decode(destination)
        source = decode(source)
        return destination, source

    def Query100BASET1SearchFrameCRC(self, instrSession, searchName, frame):
        CRC = ViInt32()
        _status = self.dll.rsscope_Query100BASET1SearchFrameCRC(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), byref(CRC)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(CRC.value)

    def Query100BASET1SearchFrameType(self, instrSession, searchName, frame):
        type = ViInt32()
        _status = self.dll.rsscope_Query100BASET1SearchFrameType(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), byref(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(type.value)

    def Query100BASET1SearchFrameLabel(self, instrSession, searchName, frame, bufferSize):
        destination = ARRAY_ViChar(bufferSize)
        source = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_Query100BASET1SearchFrameLabel(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            destination,
            source,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        destination = decode(destination)
        source = decode(source)
        return destination, source

    def Query100BASET1SearchFrameDataBytes(self, instrSession, searchName, frame, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        returnedValues = ViInt32()
        _status = self.dll.rsscope_Query100BASET1SearchFrameDataBytes(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(bufferSize),
            data,
            byref(returnedValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnedValues = int(returnedValues.value)
        return data, returnedValues

    def Query100BASET1SearchFrameNumberOfWords(self, instrSession, searchName, frame):
        words = ViInt32()
        _status = self.dll.rsscope_Query100BASET1SearchFrameNumberOfWords(
            ViSession(instrSession), ViString(searchName), ViInt32(frame), byref(words)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(words.value)

    def Query100BASET1SearchFrameWordStatus(self, instrSession, searchName, frame, word, bufferSize):
        type = ARRAY_ViChar(bufferSize)
        value = ViInt32()
        _status = self.dll.rsscope_Query100BASET1SearchFrameWordStatus(
            ViSession(instrSession),
            ViString(searchName),
            ViInt32(frame),
            ViInt32(word),
            ViInt32(bufferSize),
            type,
            byref(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        type = decode(type)
        value = int(value.value)
        return type, value

    def HardcopySetFileName(self, instrSession, name):
        _status = self.dll.rsscope_HardcopySetFileName(ViSession(instrSession), ViString(name))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHardcopyDevice(self, instrSession, device, destination, color, pageOrientation):
        _status = self.dll.rsscope_ConfigureHardcopyDevice(
            ViSession(instrSession),
            ViInt32(device),
            ViInt32(destination),
            ViBoolean(color),
            ViInt32(pageOrientation),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHardcopyWhiteBackground(self, instrSession, state):
        _status = self.dll.rsscope_ConfigureHardcopyWhiteBackground(ViSession(instrSession), ViBoolean(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHardcopyInverseColors(self, instrSession, device, inverseColors):
        _status = self.dll.rsscope_ConfigureHardcopyInverseColors(
            ViSession(instrSession), ViInt32(device), ViBoolean(inverseColors)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHardcopyPrintColorSet(self, instrSession, device, colorSet):
        _status = self.dll.rsscope_ConfigureHardcopyPrintColorSet(
            ViSession(instrSession), ViInt32(device), ViInt32(colorSet)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def HardcopyPrint(self, instrSession):
        _status = self.dll.rsscope_HardcopyPrint(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def HardcopyPrintNext(self, instrSession):
        _status = self.dll.rsscope_HardcopyPrintNext(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def HardcopyGetPrinterList(self, instrSession, bufferSize):
        printerList = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_HardcopyGetPrinterList(ViSession(instrSession), ViInt32(bufferSize), printerList)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(printerList)

    def HardcopySetPrinter(self, instrSession, device, printerName):
        _status = self.dll.rsscope_HardcopySetPrinter(ViSession(instrSession), ViInt32(device), ViString(printerName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FirmwareShutdown(self, instrSession):
        _status = self.dll.rsscope_FirmwareShutdown(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureComputerName(self, instrSession, computerName):
        _status = self.dll.rsscope_ConfigureComputerName(ViSession(instrSession), ViString(computerName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryInstrumentInformation(self, instrSession, bufferSize):
        firmwaveVersion = ARRAY_ViChar(bufferSize)
        materialNumber = ARRAY_ViChar(bufferSize)
        serialNumber = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryInstrumentInformation(
            ViSession(instrSession),
            ViInt32(bufferSize),
            firmwaveVersion,
            materialNumber,
            serialNumber,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        firmwaveVersion = decode(firmwaveVersion)
        materialNumber = decode(materialNumber)
        serialNumber = decode(serialNumber)
        return firmwaveVersion, materialNumber, serialNumber

    def StartSelftest(self, instrSession):
        _status = self.dll.rsscope_StartSelftest(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SelftestStatus(self, instrSession):
        selftestStatus = ViInt32()
        _status = self.dll.rsscope_SelftestStatus(ViSession(instrSession), byref(selftestStatus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(selftestStatus.value)

    def ConfigureExternalApplication(self, instrSession, name, parameter, workingDirectory):
        _status = self.dll.rsscope_ConfigureExternalApplication(
            ViSession(instrSession),
            ViString(name),
            ViString(parameter),
            ViString(workingDirectory),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureQuickAction(self, instrSession, mode, name, parameter, workingDirectory):
        _status = self.dll.rsscope_ConfigureQuickAction(
            ViSession(instrSession),
            ViInt32(mode),
            ViString(name),
            ViString(parameter),
            ViString(workingDirectory),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ExecuteQuickAction(self, instrSession):
        _status = self.dll.rsscope_ExecuteQuickAction(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRemoteTraceState(self, instrSession, enabled):
        _status = self.dll.rsscope_ConfigureRemoteTraceState(ViSession(instrSession), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRemoteTraceStartMode(self, instrSession, startMode):
        _status = self.dll.rsscope_ConfigureRemoteTraceStartMode(ViSession(instrSession), ViInt32(startMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRemoteTraceStopMode(self, instrSession, stopMode):
        _status = self.dll.rsscope_ConfigureRemoteTraceStopMode(ViSession(instrSession), ViInt32(stopMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRemoteTraceFile(self, instrSession, fileName, format, maximumFileSize):
        _status = self.dll.rsscope_ConfigureRemoteTraceFile(
            ViSession(instrSession),
            ViString(fileName),
            ViInt32(format),
            ViInt32(maximumFileSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRemoteTraceFileContent(
        self,
        instrSession,
        input,
        output,
        error,
        trigger,
        deviceClear,
        statusRegister,
        connection,
        remoteLocalEvents,
        locking,
    ):
        _status = self.dll.rsscope_ConfigureRemoteTraceFileContent(
            ViSession(instrSession),
            ViBoolean(input),
            ViBoolean(output),
            ViBoolean(error),
            ViBoolean(trigger),
            ViBoolean(deviceClear),
            ViBoolean(statusRegister),
            ViBoolean(connection),
            ViBoolean(remoteLocalEvents),
            ViBoolean(locking),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRemoteTraceDiagnostic(
        self,
        instrSession,
        commandExecutionDuration,
        RPCOutput,
        parserTransitionsOutput,
        functionNamesOutput,
    ):
        _status = self.dll.rsscope_ConfigureRemoteTraceDiagnostic(
            ViSession(instrSession),
            ViBoolean(commandExecutionDuration),
            ViBoolean(RPCOutput),
            ViBoolean(parserTransitionsOutput),
            ViBoolean(functionNamesOutput),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViInt32(self, instrSession, channelName, attributeID, attributeValue):
        _status = self.dll.rsscope_SetAttributeViInt32(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            ViInt32(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViInt64(self, instrSession, channelName, attributeID, attributeValue):
        _status = self.dll.rsscope_SetAttributeViInt64(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            ViInt64(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, instrSession, channelName, attributeID, attributeValue):
        _status = self.dll.rsscope_SetAttributeViReal64(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            ViReal64(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, instrSession, channelName, attributeID, attributeValue):
        _status = self.dll.rsscope_SetAttributeViString(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            ViString(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, instrSession, channelName, attributeID, attributeValue):
        _status = self.dll.rsscope_SetAttributeViBoolean(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            ViBoolean(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, instrSession, channelName, attributeID, attributeValue):
        _status = self.dll.rsscope_SetAttributeViSession(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            ViSession(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetAttributeViInt32(self, instrSession, channelName, attributeID):
        attributeValue = ViInt32()
        _status = self.dll.rsscope_GetAttributeViInt32(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            byref(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(attributeValue.value)

    def GetAttributeViInt64(self, instrSession, channelName, attributeID):
        attributeValue = ViInt64()
        _status = self.dll.rsscope_GetAttributeViInt64(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            byref(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(attributeValue.value)

    def GetAttributeViReal64(self, instrSession, channelName, attributeID):
        attributeValue = ViReal64()
        _status = self.dll.rsscope_GetAttributeViReal64(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            byref(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(attributeValue.value)

    def GetAttributeViString(self, instrSession, channelName, attributeID, bufferSize):
        attributeValue = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_GetAttributeViString(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            ViInt32(bufferSize),
            attributeValue,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(attributeValue)

    def GetAttributeViBoolean(self, instrSession, channelName, attributeID):
        attributeValue = ViBoolean()
        _status = self.dll.rsscope_GetAttributeViBoolean(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            byref(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(attributeValue.value)

    def GetAttributeViSession(self, instrSession, channelName, attributeID):
        attributeValue = ViSession()
        _status = self.dll.rsscope_GetAttributeViSession(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            byref(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(attributeValue.value)

    def CheckAttributeViInt32(self, instrSession, channelName, attributeID, attributeValue):
        _status = self.dll.rsscope_CheckAttributeViInt32(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            ViInt32(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViReal64(self, instrSession, channelName, attributeID, attributeValue):
        _status = self.dll.rsscope_CheckAttributeViReal64(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            ViReal64(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViString(self, instrSession, channelName, attributeID, attributeValue):
        _status = self.dll.rsscope_CheckAttributeViString(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            ViString(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViBoolean(self, instrSession, channelName, attributeID, attributeValue):
        _status = self.dll.rsscope_CheckAttributeViBoolean(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            ViBoolean(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViSession(self, instrSession, channelName, attributeID, attributeValue):
        _status = self.dll.rsscope_CheckAttributeViSession(
            ViSession(instrSession),
            ViString(channelName),
            ViAttr(attributeID),
            ViSession(attributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetAttributeRepCapName(self, instrSession, attributeID, repCapNameID, index, bufferSize):
        repCapName = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_GetAttributeRepCapName(
            ViSession(instrSession),
            ViUInt32(attributeID),
            ViString(repCapNameID),
            ViInt32(index),
            ViInt32(bufferSize),
            repCapName,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(repCapName)

    def GetAttributeRepeatedCapabilityIds(self, instrSession, attributeID, bufferSize):
        repeatedCapabilityId_s = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_GetAttributeRepeatedCapabilityIds(
            ViSession(instrSession),
            ViUInt32(attributeID),
            ViInt32(bufferSize),
            repeatedCapabilityId_s,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(repeatedCapabilityId_s)

    def GetAttributeRepeatedCapabilityIdNames(self, instrSession, attributeID, repeatedCapabilityId, bufferSize):
        repeatedCapabilityIdName_s = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_GetAttributeRepeatedCapabilityIdNames(
            ViSession(instrSession),
            ViUInt32(attributeID),
            ViString(repeatedCapabilityId),
            ViInt32(bufferSize),
            repeatedCapabilityIdName_s,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(repeatedCapabilityIdName_s)

    def ConfigureMathEnabled(self, instrSession, mathNumber, mathEnabled):
        _status = self.dll.rsscope_ConfigureMathEnabled(
            ViSession(instrSession), ViInt32(mathNumber), ViBoolean(mathEnabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathSetup(self, instrSession, mathNumber, calculationMethod, expression):
        _status = self.dll.rsscope_ConfigureMathSetup(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViInt32(calculationMethod),
            ViString(expression),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathEnvelopeWaveformSelection(self, instrSession, mathNumber, envelopeSelection):
        _status = self.dll.rsscope_ConfigureMathEnvelopeWaveformSelection(
            ViSession(instrSession), ViInt32(mathNumber), ViInt32(envelopeSelection)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathVerticalRange(self, instrSession, mathNumber, verticalRange):
        _status = self.dll.rsscope_ConfigureMathVerticalRange(
            ViSession(instrSession), ViInt32(mathNumber), ViReal64(verticalRange)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathVerticalScale(self, instrSession, mathNumber, verticalScale):
        _status = self.dll.rsscope_ConfigureMathVerticalScale(
            ViSession(instrSession), ViInt32(mathNumber), ViReal64(verticalScale)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathVerticalOffset(self, instrSession, mathNumber, verticalOffset):
        _status = self.dll.rsscope_ConfigureMathVerticalOffset(
            ViSession(instrSession), ViInt32(mathNumber), ViReal64(verticalOffset)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MathReset(self, instrSession):
        _status = self.dll.rsscope_MathReset(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathResetMode(self, instrSession, resetMode, envelopeTimeout, acquiredWaveforms):
        _status = self.dll.rsscope_ConfigureMathResetMode(
            ViSession(instrSession),
            ViInt32(resetMode),
            ViReal64(envelopeTimeout),
            ViInt32(acquiredWaveforms),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTFrequencyAxis(self, instrSession, mathNumber, frequencyAxis):
        _status = self.dll.rsscope_ConfigureFFTFrequencyAxis(
            ViSession(instrSession), ViInt32(mathNumber), ViInt32(frequencyAxis)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTFrequencyCenterSpan(self, instrSession, mathNumber, centerFrequency, frequencySpan):
        _status = self.dll.rsscope_ConfigureFFTFrequencyCenterSpan(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViReal64(centerFrequency),
            ViReal64(frequencySpan),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTFrequencySpanFull(self, instrSession, mathNumber):
        _status = self.dll.rsscope_ConfigureFFTFrequencySpanFull(ViSession(instrSession), ViInt32(mathNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTFrequencyStartStop(self, instrSession, mathNumber, startFrequency, stopFrequency):
        _status = self.dll.rsscope_ConfigureFFTFrequencyStartStop(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViReal64(startFrequency),
            ViReal64(stopFrequency),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTResolutionBandwidth(
        self,
        instrSession,
        mathNumber,
        RBWAndSpanCouplingEnabled,
        RBWRatio,
        resolutionBandwidth,
    ):
        _status = self.dll.rsscope_ConfigureFFTResolutionBandwidth(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViBoolean(RBWAndSpanCouplingEnabled),
            ViInt32(RBWRatio),
            ViReal64(resolutionBandwidth),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryFFTAdjustedResolutionBandwidth(self, instrSession, mathNumber):
        adjustedRBW = ViReal64()
        _status = self.dll.rsscope_QueryFFTAdjustedResolutionBandwidth(
            ViSession(instrSession), ViInt32(mathNumber), byref(adjustedRBW)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(adjustedRBW.value)

    def ConfigureFFTWindowType(self, instrSession, mathNumber, windowType):
        _status = self.dll.rsscope_ConfigureFFTWindowType(
            ViSession(instrSession), ViInt32(mathNumber), ViInt32(windowType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTFrameSetup(self, instrSession, mathNumber, arithmetic, overlapFactor, maxFrameCount):
        _status = self.dll.rsscope_ConfigureFFTFrameSetup(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViInt32(arithmetic),
            ViInt32(overlapFactor),
            ViInt32(maxFrameCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryFFTFrameCoverage(self, instrSession, mathNumber):
        frameCoverage = ViReal64()
        _status = self.dll.rsscope_QueryFFTFrameCoverage(
            ViSession(instrSession), ViInt32(mathNumber), byref(frameCoverage)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(frameCoverage.value)

    def ConfigureFFTUseColorTable(self, instrSession, mathNumber, useColorTable):
        _status = self.dll.rsscope_ConfigureFFTUseColorTable(
            ViSession(instrSession), ViInt32(mathNumber), ViBoolean(useColorTable)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTMagnitude(self, instrSession, mathNumber, magnitudeUnit, referenceLevel, magnitudeRange):
        _status = self.dll.rsscope_ConfigureFFTMagnitude(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViInt32(magnitudeUnit),
            ViReal64(referenceLevel),
            ViInt32(magnitudeRange),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTPhase(
        self,
        instrSession,
        mathNumber,
        phaseUnit,
        phaseUnwrapEnabled,
        suppressionEnabled,
        suppressionThreshold,
    ):
        _status = self.dll.rsscope_ConfigureFFTPhase(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViInt32(phaseUnit),
            ViBoolean(phaseUnwrapEnabled),
            ViBoolean(suppressionEnabled),
            ViReal64(suppressionThreshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTGateState(self, instrSession, mathNumber, useGate):
        _status = self.dll.rsscope_ConfigureFFTGateState(
            ViSession(instrSession), ViInt32(mathNumber), ViBoolean(useGate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTGateShow(self, instrSession, mathNumber, showGate):
        _status = self.dll.rsscope_ConfigureFFTGateShow(
            ViSession(instrSession), ViInt32(mathNumber), ViBoolean(showGate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTGateDefinitionZoom(self, instrSession, mathNumber, zoomCoupling, reserved):
        _status = self.dll.rsscope_ConfigureFFTGateDefinitionZoom(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViBoolean(zoomCoupling),
            ViInt32(reserved),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTGateDefinitionStartStop(self, instrSession, mathNumber, mode, start, stop):
        _status = self.dll.rsscope_ConfigureFFTGateDefinitionStartStop(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViInt32(mode),
            ViReal64(start),
            ViReal64(stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTGateRecordLengthRBWCoupling(self, instrSession, mathNumber, coupling):
        _status = self.dll.rsscope_ConfigureFFTGateRecordLengthRBWCoupling(
            ViSession(instrSession), ViInt32(mathNumber), ViInt32(coupling)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryFFTGateRequiredAcquisitionTime(self, instrSession):
        requiredAcquisitionTime = ViReal64()
        _status = self.dll.rsscope_QueryFFTGateRequiredAcquisitionTime(
            ViSession(instrSession), byref(requiredAcquisitionTime)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(requiredAcquisitionTime.value)

    def ConfigureFFTCoupledSpectrum(self, instrSession, mathNumber, mathNumber2, coupledSpectrum):
        _status = self.dll.rsscope_ConfigureFFTCoupledSpectrum(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViInt32(mathNumber2),
            ViBoolean(coupledSpectrum),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTSpectrumEnabled(self, instrSession, mathNumber, enabled):
        _status = self.dll.rsscope_ConfigureFFTSpectrumEnabled(
            ViSession(instrSession), ViInt32(mathNumber), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTSpectrumColorTableMode(self, instrSession, mathNumber, colorTableMode):
        _status = self.dll.rsscope_ConfigureFFTSpectrumColorTableMode(
            ViSession(instrSession), ViInt32(mathNumber), ViInt32(colorTableMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFTSpectrumTimeLine(self, instrSession, mathNumber, timeLine, enabled, position):
        _status = self.dll.rsscope_ConfigureFFTSpectrumTimeLine(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViInt32(timeLine),
            ViBoolean(enabled),
            ViInt64(position),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceWaveformSource(self, instrSession, referenceNumber, source):
        _status = self.dll.rsscope_ConfigureReferenceWaveformSource(
            ViSession(instrSession), ViInt32(referenceNumber), ViInt32(source)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def UpdateReferenceWaveformWithSelectedSource(self, instrSession, referenceNumber):
        _status = self.dll.rsscope_UpdateReferenceWaveformWithSelectedSource(
            ViSession(instrSession), ViInt32(referenceNumber)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceWaveformDisplayState(self, instrSession, referenceNumber, displayEnabled):
        _status = self.dll.rsscope_ConfigureReferenceWaveformDisplayState(
            ViSession(instrSession), ViInt32(referenceNumber), ViBoolean(displayEnabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearReferenceWaveform(self, instrSession, referenceNumber):
        _status = self.dll.rsscope_ClearReferenceWaveform(ViSession(instrSession), ViInt32(referenceNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReferenceWaveformFileOperations(self, instrSession, referenceNumber, waveformName, operation):
        _status = self.dll.rsscope_ReferenceWaveformFileOperations(
            ViSession(instrSession),
            ViInt32(referenceNumber),
            ViString(waveformName),
            ViInt32(operation),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceWaveformVerticalScaling(
        self,
        instrSession,
        referenceNumber,
        verticalCoupling,
        verticalScale,
        verticalPosition,
    ):
        _status = self.dll.rsscope_ConfigureReferenceWaveformVerticalScaling(
            ViSession(instrSession),
            ViInt32(referenceNumber),
            ViInt32(verticalCoupling),
            ViReal64(verticalScale),
            ViReal64(verticalPosition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReferenceWaveformVerticalScalingSetToOriginal(self, instrSession, referenceNumber):
        _status = self.dll.rsscope_ReferenceWaveformVerticalScalingSetToOriginal(
            ViSession(instrSession), ViInt32(referenceNumber)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceWaveformVerticalStretching(
        self, instrSession, referenceNumber, verticalStretchingEnabled, factor, offset
    ):
        _status = self.dll.rsscope_ConfigureReferenceWaveformVerticalStretching(
            ViSession(instrSession),
            ViInt32(referenceNumber),
            ViBoolean(verticalStretchingEnabled),
            ViReal64(factor),
            ViReal64(offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetReferenceWaveformVerticalSettings(self, instrSession, referenceNumber):
        _status = self.dll.rsscope_ResetReferenceWaveformVerticalSettings(
            ViSession(instrSession), ViInt32(referenceNumber)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceWaveformHorizontalScaling(self, instrSession, referenceNumber, horizontalCoupling):
        _status = self.dll.rsscope_ConfigureReferenceWaveformHorizontalScaling(
            ViSession(instrSession), ViInt32(referenceNumber), ViInt32(horizontalCoupling)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceWaveformHorizontalStretching(
        self, instrSession, referenceNumber, horizontalStretchingEnabled, factor, offset
    ):
        _status = self.dll.rsscope_ConfigureReferenceWaveformHorizontalStretching(
            ViSession(instrSession),
            ViInt32(referenceNumber),
            ViBoolean(horizontalStretchingEnabled),
            ViReal64(factor),
            ViReal64(offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceMultiwaveformName(self, instrSession, name):
        _status = self.dll.rsscope_ConfigureReferenceMultiwaveformName(ViSession(instrSession), ViString(name))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureReferenceMultiwaveformImport(self, instrSession, Import):
        _status = self.dll.rsscope_ConfigureReferenceMultiwaveformImport(ViSession(instrSession), ViInt32(Import))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OpenReferenceMultiwaveform(self, instrSession):
        _status = self.dll.rsscope_OpenReferenceMultiwaveform(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadWaveform(self, instrSession, channel, waveform, waveformSize, maximumTime):
        waveformArray = ARRAY_ViChar(1024)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.rsscope_ReadWaveform(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViInt32(waveformSize),
            ViInt32(maximumTime),
            waveformArray,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveformArray, actualPoints, initialX, xIncrement

    def ReadMathWaveform(self, instrSession, mathNumber, waveformSize, maximumTime):
        waveformArray = ARRAY_ViChar(1024)
        actualPoints = ViInt32()
        _status = self.dll.rsscope_ReadMathWaveform(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViInt32(waveformSize),
            ViInt32(maximumTime),
            waveformArray,
            byref(actualPoints),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        return waveformArray, actualPoints

    def ReadMainWaveformMeasurement(self, instrSession, measurement, statisticType, maximumTime):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_ReadMainWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(statisticType),
            ViInt32(maximumTime),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def ReadAmplitudeTimeWaveformMeasurement(
        self, instrSession, measurement, measurementFunction, statisticType, maximumTime
    ):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_ReadAmplitudeTimeWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(statisticType),
            ViInt32(maximumTime),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def ReadStartStopAmplitudeTimeWaveformMeasurement(
        self, instrSession, measurement, measurementFunction, maximumTime
    ):
        startTime = ViReal64()
        stopTime = ViReal64()
        _status = self.dll.rsscope_ReadStartStopAmplitudeTimeWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(maximumTime),
            byref(startTime),
            byref(stopTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        return startTime, stopTime

    def ReadEyeJitterWaveformMeasurement(
        self, instrSession, measurement, measurementFunction, statisticType, maximumTime
    ):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_ReadEyeJitterWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(statisticType),
            ViInt32(maximumTime),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def ReadStartStopEyeJitterWaveformMeasurement(self, instrSession, measurement, measurementFunction, maximumTime):
        startTime = ViReal64()
        stopTime = ViReal64()
        _status = self.dll.rsscope_ReadStartStopEyeJitterWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(maximumTime),
            byref(startTime),
            byref(stopTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        return startTime, stopTime

    def ReadHistogramWaveformMeasurement(
        self, instrSession, measurement, measurementFunction, statisticType, maximumTime
    ):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_ReadHistogramWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(statisticType),
            ViInt32(maximumTime),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def ReadStartStopHistogramWaveformMeasurement(self, instrSession, measurement, measurementFunction, maximumTime):
        startTime = ViReal64()
        stopTime = ViReal64()
        _status = self.dll.rsscope_ReadStartStopHistogramWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(maximumTime),
            byref(startTime),
            byref(stopTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        return startTime, stopTime

    def ReadSpectrumWaveformMeasurement(
        self, instrSession, measurement, measurementFunction, statisticType, maximumTime
    ):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_ReadSpectrumWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(statisticType),
            ViInt32(maximumTime),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def ReadStartStopSpectrumWaveformMeasurement(self, instrSession, measurement, measurementFunction, maximumTime):
        startTime = ViReal64()
        stopTime = ViReal64()
        _status = self.dll.rsscope_ReadStartStopSpectrumWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(maximumTime),
            byref(startTime),
            byref(stopTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        return startTime, stopTime

    def ReadJitterWaveformMeasurement(self, instrSession, measurement, measurementFunction, statisticType, maximumTime):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_ReadJitterWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(statisticType),
            ViInt32(maximumTime),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def ReadStartStopJitterWaveformMeasurement(self, instrSession, measurement, measurementFunction, maximumTime):
        startTime = ViReal64()
        stopTime = ViReal64()
        _status = self.dll.rsscope_ReadStartStopJitterWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(maximumTime),
            byref(startTime),
            byref(stopTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        return startTime, stopTime

    def ReadReferenceLevelResult(self, instrSession, measurement, levelType):
        referenceLevelResult = ViReal64()
        _status = self.dll.rsscope_ReadReferenceLevelResult(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(levelType),
            byref(referenceLevelResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(referenceLevelResult.value)

    def InitiateAcquisition(self, instrSession, action):
        _status = self.dll.rsscope_InitiateAcquisition(ViSession(instrSession), ViInt32(action))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IsMeasurementComplete(self, instrSession):
        isMeasurementComplete = ViBoolean()
        _status = self.dll.rsscope_IsMeasurementComplete(ViSession(instrSession), byref(isMeasurementComplete))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(isMeasurementComplete.value)

    def WaitForMeasurementComplete(self, instrSession, timeout):
        _status = self.dll.rsscope_WaitForMeasurementComplete(ViSession(instrSession), ViInt32(timeout))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IsWaitingForTrigger(self, instrSession):
        isWaitingForTrigger = ViBoolean()
        _status = self.dll.rsscope_IsWaitingForTrigger(ViSession(instrSession), byref(isWaitingForTrigger))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(isWaitingForTrigger.value)

    def SendSoftwareTrigger(self, instrSession, maximumTime):
        _status = self.dll.rsscope_SendSoftwareTrigger(ViSession(instrSession), ViInt32(maximumTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FetchWaveform(self, instrSession, channel, waveform, waveformSize):
        waveformArray = ARRAY_ViChar(1024)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.rsscope_FetchWaveform(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViInt32(waveformSize),
            waveformArray,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveformArray, actualPoints, initialX, xIncrement

    def FetchWaveformHeader(self, instrSession, channel, waveform, bufferSize):
        waveformHeader = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_FetchWaveformHeader(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(waveform),
            ViInt32(bufferSize),
            waveformHeader,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(waveformHeader)

    def FetchMathWaveform(self, instrSession, mathNumber, waveformSize):
        waveformArray = ARRAY_ViChar(1024)
        actualPoints = ViInt32()
        _status = self.dll.rsscope_FetchMathWaveform(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViInt32(waveformSize),
            waveformArray,
            byref(actualPoints),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        return waveformArray, actualPoints

    def FetchMathWaveformHeader(self, instrSession, mathNumber, bufferSize):
        mathWaveformHeader = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_FetchMathWaveformHeader(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViInt32(bufferSize),
            mathWaveformHeader,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(mathWaveformHeader)

    def FetchReferenceWaveform(self, instrSession, waveformSize):
        waveformArray = ARRAY_ViChar(1024)
        actualPoints = ViInt32()
        _status = self.dll.rsscope_FetchReferenceWaveform(
            ViSession(instrSession),
            ViInt32(waveformSize),
            waveformArray,
            byref(actualPoints),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        return waveformArray, actualPoints

    def FetchReferenceWaveformHeader(self, instrSession, bufferSize):
        referenceWaveformHeader = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_FetchReferenceWaveformHeader(
            ViSession(instrSession), ViInt32(bufferSize), referenceWaveformHeader
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(referenceWaveformHeader)

    def QueryReferenceWaveformSignalType(self, instrSession, referenceNumber):
        signalType = ViInt32()
        _status = self.dll.rsscope_QueryReferenceWaveformSignalType(
            ViSession(instrSession), ViInt32(referenceNumber), byref(signalType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(signalType.value)

    def FetchMainWaveformMeasurement(self, instrSession, measurement, statisticType):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_FetchMainWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(statisticType),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def FetchAmplitudeTimeWaveformMeasurement(self, instrSession, measurement, measurementFunction, statisticType):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_FetchAmplitudeTimeWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(statisticType),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def FetchStartStopAmplitudeTimeWaveformMeasurement(self, instrSession, measurement, measurementFunction):
        startTime = ViReal64()
        stopTime = ViReal64()
        _status = self.dll.rsscope_FetchStartStopAmplitudeTimeWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            byref(startTime),
            byref(stopTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        return startTime, stopTime

    def FetchEyeJitterWaveformMeasurement(self, instrSession, measurement, measurementFunction, statisticType):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_FetchEyeJitterWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(statisticType),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def FetchStartStopEyeJitterWaveformMeasurement(self, instrSession, measurement, measurementFunction):
        startTime = ViReal64()
        stopTime = ViReal64()
        _status = self.dll.rsscope_FetchStartStopEyeJitterWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            byref(startTime),
            byref(stopTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        return startTime, stopTime

    def FetchHistogramWaveformMeasurement(self, instrSession, measurement, measurementFunction, statisticType):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_FetchHistogramWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(statisticType),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def FetchStartStopHistogramWaveformMeasurement(self, instrSession, measurement, measurementFunction):
        startTime = ViReal64()
        stopTime = ViReal64()
        _status = self.dll.rsscope_FetchStartStopHistogramWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            byref(startTime),
            byref(stopTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        return startTime, stopTime

    def FetchSpectrumWaveformMeasurement(self, instrSession, measurement, measurementFunction, statisticType):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_FetchSpectrumWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(statisticType),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def FetchSpectrumHarmonicsResultsNumber(self, instrSession, measurement):
        numberOfResults = ViInt32()
        _status = self.dll.rsscope_FetchSpectrumHarmonicsResultsNumber(
            ViSession(instrSession), ViInt32(measurement), byref(numberOfResults)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(numberOfResults.value)

    def FetchStartStopSpectrumWaveformMeasurement(self, instrSession, measurement, measurementFunction):
        startTime = ViReal64()
        stopTime = ViReal64()
        _status = self.dll.rsscope_FetchStartStopSpectrumWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            byref(startTime),
            byref(stopTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        return startTime, stopTime

    def FetchJitterWaveformMeasurement(self, instrSession, measurement, measurementFunction, statisticType):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_FetchJitterWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            ViInt32(statisticType),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def FetchStartStopJitterWaveformMeasurement(self, instrSession, measurement, measurementFunction):
        startTime = ViReal64()
        stopTime = ViReal64()
        _status = self.dll.rsscope_FetchStartStopJitterWaveformMeasurement(
            ViSession(instrSession),
            ViInt32(measurement),
            ViInt32(measurementFunction),
            byref(startTime),
            byref(stopTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        startTime = float(startTime.value)
        stopTime = float(stopTime.value)
        return startTime, stopTime

    def Abort(self, instrSession):
        _status = self.dll.rsscope_Abort(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePowerAnalysisMode(self, instrSession):
        _status = self.dll.rsscope_ConfigurePowerAnalysisMode(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePowerAnalysisCurrentSource(self, instrSession, sourceNumber, channel):
        _status = self.dll.rsscope_ConfigurePowerAnalysisCurrentSource(
            ViSession(instrSession), ViInt32(sourceNumber), ViInt32(channel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePowerAnalysisVoltageSource(self, instrSession, sourceNumber, channel):
        _status = self.dll.rsscope_ConfigurePowerAnalysisVoltageSource(
            ViSession(instrSession), ViInt32(sourceNumber), ViInt32(channel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StartPowerAnalysisDeskew(self, instrSession, maximumTime):
        _status = self.dll.rsscope_StartPowerAnalysisDeskew(ViSession(instrSession), ViInt32(maximumTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetPowerAnalysisSkew(self, instrSession, state):
        _status = self.dll.rsscope_ResetPowerAnalysisSkew(ViSession(instrSession), ViBoolean(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def UserDefinedPowerAnalysisSkew(self, instrSession, state):
        _status = self.dll.rsscope_UserDefinedPowerAnalysisSkew(ViSession(instrSession), ViBoolean(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerAnalysisProbeMode(self, instrSession, channel, mode):
        _status = self.dll.rsscope_PowerAnalysisProbeMode(ViSession(instrSession), ViInt32(channel), ViInt32(mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerAnalysisAutoDeskewValue(self, instrSession):
        deskewValue = ViReal64()
        _status = self.dll.rsscope_QueryPowerAnalysisAutoDeskewValue(ViSession(instrSession), byref(deskewValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(deskewValue.value)

    def PowerAnalysisAutoDeskewToOffset(self, instrSession):
        _status = self.dll.rsscope_PowerAnalysisAutoDeskewToOffset(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerAnalysisReportManagement(self, instrSession, operation, measurement, index):
        _status = self.dll.rsscope_PowerAnalysisReportManagement(
            ViSession(instrSession),
            ViInt32(operation),
            ViInt32(measurement),
            ViInt32(index),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerAnalysisReportLSend(self, instrSession, measurement):
        returnedValue = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_PowerAnalysisReportLSend(
            ViSession(instrSession), ViInt32(measurement), returnedValue
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(returnedValue)

    def PowerAnalysisReportComment(self, instrSession, measurement, comment):
        _status = self.dll.rsscope_PowerAnalysisReportComment(
            ViSession(instrSession), ViInt32(measurement), ViString(comment)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerAnalysisReportSelection(self, instrSession, operation, measurement):
        _status = self.dll.rsscope_PowerAnalysisReportSelection(
            ViSession(instrSession), ViInt32(operation), ViInt32(measurement)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerAnalysisReportDirectory(self, instrSession, measurement, directory):
        _status = self.dll.rsscope_PowerAnalysisReportDirectory(
            ViSession(instrSession), ViInt32(measurement), ViString(directory)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerAnalysisReportFileManagement(self, instrSession, operation, fileName):
        _status = self.dll.rsscope_PowerAnalysisReportFileManagement(
            ViSession(instrSession), ViInt32(operation), ViString(fileName)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerAnalysisReportDUT(self, instrSession, DUTName, user, site, temperature, description):
        _status = self.dll.rsscope_PowerAnalysisReportDUT(
            ViSession(instrSession),
            ViString(DUTName),
            ViString(user),
            ViString(site),
            ViInt32(temperature),
            ViString(description),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerAnalysisReportLayout(
        self,
        instrSession,
        paperSize,
        font,
        fontSize,
        colorFont,
        logo,
        invertScreenshotColors,
    ):
        _status = self.dll.rsscope_PowerAnalysisReportLayout(
            ViSession(instrSession),
            ViInt32(paperSize),
            ViInt32(font),
            ViInt32(fontSize),
            ViInt32(colorFont),
            ViString(logo),
            ViBoolean(invertScreenshotColors),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerAnalysisReportContent(
        self,
        instrSession,
        title,
        measurementSetup,
        settings,
        verticalSetup,
        triggerSetup,
        horizontalSetup,
        measuredSignals,
        results,
    ):
        _status = self.dll.rsscope_PowerAnalysisReportContent(
            ViSession(instrSession),
            ViBoolean(title),
            ViInt32(measurementSetup),
            ViInt32(settings),
            ViInt32(verticalSetup),
            ViInt32(triggerSetup),
            ViInt32(horizontalSetup),
            ViInt32(measuredSignals),
            ViInt32(results),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetPowerAnalysisReportCount(self, instrSession, measurement):
        count = ViInt32()
        _status = self.dll.rsscope_GetPowerAnalysisReportCount(
            ViSession(instrSession), ViInt32(measurement), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def StartPowerQualityMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerQualityMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerQualityInputFrequency(self, instrSession, frequency):
        _status = self.dll.rsscope_PowerQualityInputFrequency(ViSession(instrSession), ViInt32(frequency))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerQualityCustomFrequency(self, instrSession, customFrequency):
        _status = self.dll.rsscope_PowerQualityCustomFrequency(ViSession(instrSession), ViReal64(customFrequency))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerQualityScaling(self, instrSession, scaling):
        _status = self.dll.rsscope_PowerQualityScaling(ViSession(instrSession), ViInt32(scaling))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerQualityAddToReport(self, instrSession):
        _status = self.dll.rsscope_PowerQualityAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerQualityMeasurementVoltageResult(self, instrSession, type):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerQualityMeasurementVoltageResult(
            ViSession(instrSession), ViInt32(type), byref(measurementResult)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def QueryPowerQualityMeasurementCurrentResult(self, instrSession, type):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerQualityMeasurementCurrentResult(
            ViSession(instrSession), ViInt32(type), byref(measurementResult)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def QueryPowerQualityMeasurementPowerResult(self, instrSession, type):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerQualityMeasurementPowerResult(
            ViSession(instrSession), ViInt32(type), byref(measurementResult)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def StartPowerCurrentHarmonicsMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerCurrentHarmonicsMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerCurrentHarmonicsSettings(self, instrSession, standard, frequency, scaling):
        _status = self.dll.rsscope_PowerCurrentHarmonicsSettings(
            ViSession(instrSession),
            ViInt32(standard),
            ViInt32(frequency),
            ViInt32(scaling),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerCurrentHarmonicsEvaluation(self, instrSession, revisedCurrent, voltageResultDisplay):
        _status = self.dll.rsscope_PowerCurrentHarmonicsEvaluation(
            ViSession(instrSession),
            ViInt32(revisedCurrent),
            ViInt32(voltageResultDisplay),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerCurrentHarmonicAddToReport(self, instrSession):
        _status = self.dll.rsscope_PowerCurrentHarmonicAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerCurrentHarmonicsUsedStandard(self, instrSession, resultNumber):
        standard = ViInt32()
        _status = self.dll.rsscope_QueryPowerCurrentHarmonicsUsedStandard(
            ViSession(instrSession), ViInt32(resultNumber), byref(standard)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(standard.value)

    def QueryPowerCurrentHarmonicsResult(self, instrSession, type, resultNumber, harmonic):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerCurrentHarmonicsResult(
            ViSession(instrSession),
            ViInt32(type),
            ViInt32(resultNumber),
            ViInt32(harmonic),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def StartPowerInrushCurrentMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerInrushCurrentMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerInrushCurrentSettings(self, instrSession, maxCurrent, trigger):
        _status = self.dll.rsscope_PowerInrushCurrentSettings(
            ViSession(instrSession), ViReal64(maxCurrent), ViReal64(trigger)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerInrushCurrentGateSettings(self, instrSession, gate, start, stop):
        _status = self.dll.rsscope_PowerInrushCurrentGateSettings(
            ViSession(instrSession), ViInt32(gate), ViReal64(start), ViReal64(stop)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerInrushCurrentGateValue(self, instrSession, gate, numValue):
        _status = self.dll.rsscope_PowerInrushCurrentGateValue(
            ViSession(instrSession), ViInt32(gate), ViReal64(numValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerInrushCurrentGateManagement(self, instrSession, operation, gateIndex):
        _status = self.dll.rsscope_PowerInrushCurrentGateManagement(
            ViSession(instrSession), ViInt32(operation), ViInt32(gateIndex)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerInrushCurrentGateAddToReport(self, instrSession):
        _status = self.dll.rsscope_PowerInrushCurrentGateAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryInrushCurrentGateCount(self, instrSession):
        count = ViInt32()
        _status = self.dll.rsscope_QueryInrushCurrentGateCount(ViSession(instrSession), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryPowerInrushCurrentMeasurementResult(self, instrSession, gateNumber):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerInrushCurrentMeasurementResult(
            ViSession(instrSession), ViInt32(gateNumber), byref(measurementResult)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def StartPowerRippleMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerRippleMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerRippleCurrent(self, instrSession, state):
        _status = self.dll.rsscope_PowerRippleCurrent(ViSession(instrSession), ViBoolean(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerRippleSettings(self, instrSession, frequency, scaling):
        _status = self.dll.rsscope_PowerRippleSettings(ViSession(instrSession), ViReal64(frequency), ViInt32(scaling))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerRippleAddToReport(self, instrSession):
        _status = self.dll.rsscope_PowerRippleAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerRippleMeasurementResult(self, instrSession, statistics, measType):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerRippleMeasurementResult(
            ViSession(instrSession),
            ViInt32(statistics),
            ViInt32(measType),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def QueryPowerRippleMeasureResult(self, instrSession, statistics, rippleType, measType):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerRippleMeasureResult(
            ViSession(instrSession),
            ViInt32(statistics),
            ViInt32(rippleType),
            ViInt32(measType),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def StartPowerSpectrumMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerSpectrumMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSpectrumSettings(self, instrSession, frequency, scaling):
        _status = self.dll.rsscope_PowerSpectrumSettings(ViSession(instrSession), ViReal64(frequency), ViInt32(scaling))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSpectrumAddToReport(self, instrSession):
        _status = self.dll.rsscope_PowerSpectrumAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerSpectrumMeasurementResult(self, instrSession, resultNumber, type):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerSpectrumMeasurementResult(
            ViSession(instrSession),
            ViInt32(resultNumber),
            ViInt32(type),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def QueryPowerSpectrumHarmonicsCount(self, instrSession):
        harmonicsCount = ViInt32()
        _status = self.dll.rsscope_QueryPowerSpectrumHarmonicsCount(ViSession(instrSession), byref(harmonicsCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(harmonicsCount.value)

    def StartPowerSlewRateMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerSlewRateMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSlewRateSettings(self, instrSession, source, average, scaling):
        _status = self.dll.rsscope_PowerSlewRateSettings(
            ViSession(instrSession), ViInt32(source), ViBoolean(average), ViInt32(scaling)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSlewRateAddToReport(self, instrSession):
        _status = self.dll.rsscope_PowerSlewRateAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSlewRateGateSettings(self, instrSession, start, stop):
        _status = self.dll.rsscope_PowerSlewRateGateSettings(ViSession(instrSession), ViReal64(start), ViReal64(stop))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerSlewRateMeasurementResult(self, instrSession, statistics, type):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerSlewRateMeasurementResult(
            ViSession(instrSession),
            ViInt32(statistics),
            ViInt32(type),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def StartPowerSafeOperatingAreaMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerSafeOperatingAreaMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSafeOperatingAreaSettings(self, instrSession, maskTest, scale):
        _status = self.dll.rsscope_PowerSafeOperatingAreaSettings(
            ViSession(instrSession), ViBoolean(maskTest), ViInt32(scale)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSafeOperatingAreaSwitch(self, instrSession, scale):
        _status = self.dll.rsscope_PowerSafeOperatingAreaSwitch(ViSession(instrSession), ViInt32(scale))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSafeOperatingAreaLinPointManagement(self, instrSession, operation, pointNumber):
        _status = self.dll.rsscope_PowerSafeOperatingAreaLinPointManagement(
            ViSession(instrSession), ViInt32(operation), ViInt32(pointNumber)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSafeOperatingAreaLinPointValue(self, instrSession, pointNumber, valueType, pointValue):
        _status = self.dll.rsscope_PowerSafeOperatingAreaLinPointValue(
            ViSession(instrSession),
            ViInt32(pointNumber),
            ViInt32(valueType),
            ViReal64(pointValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSafeOperatingAreaLogPointManagement(self, instrSession, operation, pointNumber):
        _status = self.dll.rsscope_PowerSafeOperatingAreaLogPointManagement(
            ViSession(instrSession), ViInt32(operation), ViInt32(pointNumber)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSafeOperatingAreaLogPointValue(self, instrSession, pointNumber, valueType, pointValue):
        _status = self.dll.rsscope_PowerSafeOperatingAreaLogPointValue(
            ViSession(instrSession),
            ViInt32(pointNumber),
            ViInt32(valueType),
            ViReal64(pointValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSafeOperatingAreaAddToReport(self, instrSession):
        _status = self.dll.rsscope_PowerSafeOperatingAreaAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerSafeOperatingAreaLinCount(self, instrSession):
        count = ViInt32()
        _status = self.dll.rsscope_QueryPowerSafeOperatingAreaLinCount(ViSession(instrSession), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def QueryPowerSafeOperatingAreaLogCount(self, instrSession):
        count = ViInt32()
        _status = self.dll.rsscope_QueryPowerSafeOperatingAreaLogCount(ViSession(instrSession), byref(count))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def StartPowerModulationMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerModulationMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerModulationSettings(self, instrSession, source, type, displayHistogram, scaling):
        _status = self.dll.rsscope_PowerModulationSettings(
            ViSession(instrSession),
            ViInt32(source),
            ViInt32(type),
            ViBoolean(displayHistogram),
            ViInt32(scaling),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerModulationAddToReport(self, instrSession):
        _status = self.dll.rsscope_PowerModulationAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerModulationMeasurementResult(self, instrSession, statistics, type):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerModulationMeasurementResult(
            ViSession(instrSession),
            ViInt32(statistics),
            ViInt32(type),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def StartPowerDynamicOnResistanceMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerDynamicOnResistanceMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerDynamicOnResistanceSettings(self, instrSession, average, scaling):
        _status = self.dll.rsscope_PowerDynamicOnResistanceSettings(
            ViSession(instrSession), ViBoolean(average), ViInt32(scaling)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerDynamicOnResistanceAddToReport(self, instrSession):
        _status = self.dll.rsscope_PowerDynamicOnResistanceAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerDynamicOnResistanceGateSettings(self, instrSession, gate, start, stop):
        _status = self.dll.rsscope_PowerDynamicOnResistanceGateSettings(
            ViSession(instrSession), ViInt32(gate), ViReal64(start), ViReal64(stop)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerDynamicOnResistanceMeasurementResult(self, instrSession):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerDynamicOnResistanceMeasurementResult(
            ViSession(instrSession), byref(measurementResult)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def StartPowerEfficiencyMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerEfficiencyMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerEfficiencyScaling(self, instrSession, scaling):
        _status = self.dll.rsscope_PowerEfficiencyScaling(ViSession(instrSession), ViInt32(scaling))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerEfficiencyAddToReport(self, instrSession):
        _status = self.dll.rsscope_PowerEfficiencyAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerEfficiencyMeasurementResult(self, instrSession, resultNumber, statistics):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerEfficiencyMeasurementResult(
            ViSession(instrSession),
            ViInt32(resultNumber),
            ViInt32(statistics),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def StartPowerSwitchinglossMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerSwitchinglossMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSwitchinglossSettings(
        self,
        instrSession,
        switchingFrequency,
        turnOn,
        conduction,
        turnOff,
        nonConduction,
        total,
        scaling,
    ):
        _status = self.dll.rsscope_PowerSwitchinglossSettings(
            ViSession(instrSession),
            ViBoolean(switchingFrequency),
            ViBoolean(turnOn),
            ViBoolean(conduction),
            ViBoolean(turnOff),
            ViBoolean(nonConduction),
            ViBoolean(total),
            ViInt32(scaling),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSwitchinglossFrequency(self, instrSession, switchingFrequency):
        _status = self.dll.rsscope_PowerSwitchinglossFrequency(ViSession(instrSession), ViReal64(switchingFrequency))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSwitchinglossGateSettings(self, instrSession, period, start, stop):
        _status = self.dll.rsscope_PowerSwitchinglossGateSettings(
            ViSession(instrSession), ViInt32(period), ViReal64(start), ViReal64(stop)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerSwitchinglossAddToReport(self, instrSession):
        _status = self.dll.rsscope_PowerSwitchinglossAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerSwitchinglossEnergyResult(self, instrSession, statistics, type):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerSwitchinglossEnergyResult(
            ViSession(instrSession),
            ViInt32(statistics),
            ViInt32(type),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def QueryPowerSwitchinglossPowerResult(self, instrSession, statistics, type):
        measurementResult = ViReal64()
        _status = self.dll.rsscope_QueryPowerSwitchinglossPowerResult(
            ViSession(instrSession),
            ViInt32(statistics),
            ViInt32(type),
            byref(measurementResult),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurementResult.value)

    def StartPowerOnOffMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerOnOffMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerOnOffInputType(self, instrSession, input):
        _status = self.dll.rsscope_PowerOnOffInputType(ViSession(instrSession), ViInt32(input))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerOnOffSettings(self, instrSession, type, reserved, triggerLevel, steadyStateLevel, time):
        _status = self.dll.rsscope_PowerOnOffSettings(
            ViSession(instrSession),
            ViInt32(type),
            ViBoolean(reserved),
            ViReal64(triggerLevel),
            ViReal64(steadyStateLevel),
            ViReal64(time),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerOnOffDCLevel(self, instrSession, type, triggerLevel):
        _status = self.dll.rsscope_PowerOnOffDCLevel(ViSession(instrSession), ViInt32(type), ViReal64(triggerLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerOnOffAddToReport(self, instrSession):
        _status = self.dll.rsscope_PowerOnOffAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerOnOffMeasurementResult(self, instrSession, type):
        result = ViReal64()
        _status = self.dll.rsscope_QueryPowerOnOffMeasurementResult(
            ViSession(instrSession), ViInt32(type), byref(result)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(result.value)

    def StartPowerTransientResponseMeasurement(self, instrSession):
        _status = self.dll.rsscope_StartPowerTransientResponseMeasurement(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TransientResponseInputVoltage(self, instrSession, inputVoltage):
        _status = self.dll.rsscope_TransientResponseInputVoltage(ViSession(instrSession), ViBoolean(inputVoltage))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TransientResponseTrigger(self, instrSession, source, level, edgeTriggerSlope):
        _status = self.dll.rsscope_TransientResponseTrigger(
            ViSession(instrSession),
            ViInt32(source),
            ViReal64(level),
            ViInt32(edgeTriggerSlope),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TransientResponseSettings(self, instrSession, frequency, scaling, tubeTolerance, signalHigh, signalLow):
        _status = self.dll.rsscope_TransientResponseSettings(
            ViSession(instrSession),
            ViReal64(frequency),
            ViInt32(scaling),
            ViInt32(tubeTolerance),
            ViReal64(signalHigh),
            ViReal64(signalLow),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TransientResponseAddToReport(self, instrSession):
        _status = self.dll.rsscope_TransientResponseAddToReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPowerTransientResponseResult(self, instrSession, type):
        result = ViReal64()
        _status = self.dll.rsscope_QueryPowerTransientResponseResult(
            ViSession(instrSession), ViInt32(type), byref(result)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(result.value)

    def ConfigureDeembeddingEnabled(self, instrSession, channel, enabled):
        _status = self.dll.rsscope_ConfigureDeembeddingEnabled(
            ViSession(instrSession), ViInt32(channel), ViBoolean(enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingEffectiveBandwidth(self, instrSession, channel, effectiveBandwidth):
        _status = self.dll.rsscope_ConfigureDeembeddingEffectiveBandwidth(
            ViSession(instrSession), ViInt32(channel), ViReal64(effectiveBandwidth)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingDelayCompensation(self, instrSession, channel, compensation):
        _status = self.dll.rsscope_ConfigureDeembeddingDelayCompensation(
            ViSession(instrSession), ViInt32(channel), ViBoolean(compensation)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingAddComponent(self, instrSession, channel, index, type):
        _status = self.dll.rsscope_ConfigureDeembeddingAddComponent(
            ViSession(instrSession), ViInt32(channel), ViInt32(index), ViInt32(type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingRemoveComponent(self, instrSession, channel, component):
        _status = self.dll.rsscope_ConfigureDeembeddingRemoveComponent(
            ViSession(instrSession), ViInt32(channel), ViInt32(component)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryDeembeddingComponentCount(self, instrSession, channel):
        count = ViInt32()
        _status = self.dll.rsscope_QueryDeembeddingComponentCount(
            ViSession(instrSession), ViInt32(channel), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def ConfigureDeembeddingFile(self, instrSession, channel, fileName, action):
        _status = self.dll.rsscope_ConfigureDeembeddingFile(
            ViSession(instrSession), ViInt32(channel), ViString(fileName), ViInt32(action)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingPreset(self, instrSession, channel):
        _status = self.dll.rsscope_ConfigureDeembeddingPreset(ViSession(instrSession), ViInt32(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingComponentEnabled(self, instrSession, channel, component, enabled):
        _status = self.dll.rsscope_ConfigureDeembeddingComponentEnabled(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(component),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingComponentType(self, instrSession, channel, component, type, name):
        _status = self.dll.rsscope_ConfigureDeembeddingComponentType(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(component),
            ViInt32(type),
            ViString(name),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryDeembeddingComponentPortCount(self, instrSession, channel, component):
        count = ViInt32()
        _status = self.dll.rsscope_QueryDeembeddingComponentPortCount(
            ViSession(instrSession), ViInt32(channel), ViInt32(component), byref(count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(count.value)

    def ConfigureDeembeddingComponentMode(self, instrSession, channel, component, mode):
        _status = self.dll.rsscope_ConfigureDeembeddingComponentMode(
            ViSession(instrSession), ViInt32(channel), ViInt32(component), ViInt32(mode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingComponentRemoveProbeLoading(self, instrSession, channel, component, loading):
        _status = self.dll.rsscope_ConfigureDeembeddingComponentRemoveProbeLoading(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(component),
            ViBoolean(loading),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingComponentImpedance(self, instrSession, channel, component, impedanceType, impedance):
        _status = self.dll.rsscope_ConfigureDeembeddingComponentImpedance(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(component),
            ViInt32(impedanceType),
            ViReal64(impedance),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingComponentLoadSParameterFile(self, instrSession, channel, component, fileName):
        _status = self.dll.rsscope_ConfigureDeembeddingComponentLoadSParameterFile(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(component),
            ViString(fileName),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingComponentIdenticalPaths(self, instrSession, channel, component, identicalPaths):
        _status = self.dll.rsscope_ConfigureDeembeddingComponentIdenticalPaths(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(component),
            ViBoolean(identicalPaths),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingComponentInputPorts(self, instrSession, channel, component, port1, port2):
        _status = self.dll.rsscope_ConfigureDeembeddingComponentInputPorts(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(component),
            ViInt32(port1),
            ViInt32(port2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingComponentOutputPorts(self, instrSession, channel, component, port1, port2):
        _status = self.dll.rsscope_ConfigureDeembeddingComponentOutputPorts(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(component),
            ViInt32(port1),
            ViInt32(port2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeembeddingComponentLoadSParameterFilePort(self, instrSession, channel, component, port, fileName):
        _status = self.dll.rsscope_ConfigureDeembeddingComponentLoadSParameterFilePort(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(component),
            ViInt32(port),
            ViString(fileName),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryDeembeddingAttenuation(self, instrSession, channel):
        DC = ViReal64()
        max = ViReal64()
        _status = self.dll.rsscope_QueryDeembeddingAttenuation(
            ViSession(instrSession), ViInt32(channel), byref(DC), byref(max)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        DC = float(DC.value)
        max = float(max.value)
        return DC, max

    def QueryDeembeddingMaxGain(self, instrSession, channel):
        max = ViReal64()
        _status = self.dll.rsscope_QueryDeembeddingMaxGain(ViSession(instrSession), ViInt32(channel), byref(max))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(max.value)

    def ConfigureMSOBusState(self, instrSession, bus, state):
        _status = self.dll.rsscope_ConfigureMSOBusState(ViSession(instrSession), ViInt32(bus), ViBoolean(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOVisualization(self, instrSession, bus, showDigitalSignals, showBus, busRepresentation):
        _status = self.dll.rsscope_ConfigureMSOVisualization(
            ViSession(instrSession),
            ViInt32(bus),
            ViBoolean(showDigitalSignals),
            ViBoolean(showBus),
            ViInt32(busRepresentation),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOClockedBusState(self, instrSession, bus, enableClockedBus):
        _status = self.dll.rsscope_ConfigureMSOClockedBusState(
            ViSession(instrSession), ViInt32(bus), ViBoolean(enableClockedBus)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOClockedBus(self, instrSession, bus, clockSource):
        _status = self.dll.rsscope_ConfigureMSOClockedBus(ViSession(instrSession), ViInt32(bus), ViInt32(clockSource))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOClockedBusSlope(self, instrSession, bus, clockSlope):
        _status = self.dll.rsscope_ConfigureMSOClockedBusSlope(
            ViSession(instrSession), ViInt32(bus), ViInt32(clockSlope)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOAssignChannels(self, instrSession, bus, digitalChannel, assignState):
        _status = self.dll.rsscope_ConfigureMSOAssignChannels(
            ViSession(instrSession),
            ViInt32(bus),
            ViInt32(digitalChannel),
            ViBoolean(assignState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOSignalSelection(self, instrSession, digitalChannel, label, deskew):
        _status = self.dll.rsscope_ConfigureMSOSignalSelection(
            ViSession(instrSession),
            ViInt32(digitalChannel),
            ViString(label),
            ViReal64(deskew),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOBusSignalSelection(self, instrSession, bus, digitalChannel, label, deskew):
        _status = self.dll.rsscope_ConfigureMSOBusSignalSelection(
            ViSession(instrSession),
            ViInt32(bus),
            ViInt32(digitalChannel),
            ViString(label),
            ViReal64(deskew),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSODeskew(self, instrSession, bus, deskew):
        _status = self.dll.rsscope_ConfigureMSODeskew(ViSession(instrSession), ViInt32(bus), ViReal64(deskew))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOTechnology(self, instrSession, digitalChannel, technology):
        _status = self.dll.rsscope_ConfigureMSOTechnology(
            ViSession(instrSession), ViInt32(digitalChannel), ViInt32(technology)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOTresholdSetup(self, instrSession, digitalChannel, treshold, hysteresis):
        _status = self.dll.rsscope_ConfigureMSOTresholdSetup(
            ViSession(instrSession),
            ViInt32(digitalChannel),
            ViReal64(treshold),
            ViInt32(hysteresis),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOTresholdAllChannels(self, instrSession, bus, technology, channelGroup, treshold, hysteresis):
        _status = self.dll.rsscope_ConfigureMSOTresholdAllChannels(
            ViSession(instrSession),
            ViInt32(bus),
            ViInt32(technology),
            ViInt32(channelGroup),
            ViReal64(treshold),
            ViInt32(hysteresis),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOChannelCoupling(self, instrSession, bus, coupling):
        _status = self.dll.rsscope_ConfigureMSOChannelCoupling(
            ViSession(instrSession), ViInt32(bus), ViBoolean(coupling)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSODigitalChannelCoupling(self, instrSession, coupling):
        _status = self.dll.rsscope_ConfigureMSODigitalChannelCoupling(ViSession(instrSession), ViBoolean(coupling))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMSODigitalResolution(self, instrSession):
        reolution = ViReal64()
        recordLength = ViReal64()
        _status = self.dll.rsscope_QueryMSODigitalResolution(
            ViSession(instrSession), byref(reolution), byref(recordLength)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        reolution = float(reolution.value)
        recordLength = float(recordLength.value)
        return reolution, recordLength

    def MSORemoveAllAssignedChannels(self, instrSession, bus):
        _status = self.dll.rsscope_MSORemoveAllAssignedChannels(ViSession(instrSession), ViInt32(bus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadSignals(self, instrSession, digitalChannel, bufferSize, maximumTime):
        signalArray = ARRAY_ViChar(bufferSize)
        actualPoints = ViInt32()
        _status = self.dll.rsscope_ReadSignals(
            ViSession(instrSession),
            ViInt32(digitalChannel),
            ViUInt32(bufferSize),
            ViInt32(maximumTime),
            signalArray,
            byref(actualPoints),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        signalArray = list(signalArray)
        actualPoints = int(actualPoints.value)
        return signalArray, actualPoints

    def ConfigureMSODecodeTableShow(self, instrSession, serialBus, decodeTable, tableEnabled):
        _status = self.dll.rsscope_ConfigureMSODecodeTableShow(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(decodeTable),
            ViBoolean(tableEnabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOTrigger(self, instrSession, triggerType):
        _status = self.dll.rsscope_ConfigureMSOTrigger(ViSession(instrSession), ViInt32(triggerType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOEdgeTriggerSource(self, instrSession, triggerSource, triggerSlope, expression):
        _status = self.dll.rsscope_ConfigureMSOEdgeTriggerSource(
            ViSession(instrSession),
            ViInt32(triggerSource),
            ViInt32(triggerSlope),
            ViString(expression),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOWidthTriggerSource(
        self,
        instrSession,
        triggerSource,
        widthPolarity,
        widthCondition,
        width,
        widthDelta,
        expression,
    ):
        _status = self.dll.rsscope_ConfigureMSOWidthTriggerSource(
            ViSession(instrSession),
            ViInt32(triggerSource),
            ViInt32(widthPolarity),
            ViInt32(widthCondition),
            ViReal64(width),
            ViReal64(widthDelta),
            ViString(expression),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOTimeoutTriggerSource(self, instrSession, triggerSource, timeoutValue, timeoutCondition, expression):
        _status = self.dll.rsscope_ConfigureMSOTimeoutTriggerSource(
            ViSession(instrSession),
            ViInt32(triggerSource),
            ViReal64(timeoutValue),
            ViInt32(timeoutCondition),
            ViString(expression),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOData2ClockTriggerSource(
        self,
        instrSession,
        triggerSource,
        clockSource,
        data2ClockPolarity,
        holdTime,
        setupTime,
    ):
        _status = self.dll.rsscope_ConfigureMSOData2ClockTriggerSource(
            ViSession(instrSession),
            ViInt32(triggerSource),
            ViInt32(clockSource),
            ViInt32(data2ClockPolarity),
            ViReal64(holdTime),
            ViReal64(setupTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOStateTriggerSource(self, instrSession, triggerSource, clockSource, clockPolarity, expression):
        _status = self.dll.rsscope_ConfigureMSOStateTriggerSource(
            ViSession(instrSession),
            ViInt32(triggerSource),
            ViInt32(clockSource),
            ViInt32(clockPolarity),
            ViString(expression),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOTriggerChannelState(self, instrSession, digitalChannel, triggerType, statusBit):
        _status = self.dll.rsscope_ConfigureMSOTriggerChannelState(
            ViSession(instrSession),
            ViInt32(digitalChannel),
            ViInt32(triggerType),
            ViInt32(statusBit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOPatternTriggerSource(
        self,
        instrSession,
        triggerSource,
        patternMode,
        timeoutCondition,
        timeout,
        patternWidth,
        patternDelta,
        patternCondition,
        expression,
    ):
        _status = self.dll.rsscope_ConfigureMSOPatternTriggerSource(
            ViSession(instrSession),
            ViInt32(triggerSource),
            ViInt32(patternMode),
            ViInt32(timeoutCondition),
            ViReal64(timeout),
            ViReal64(patternWidth),
            ViReal64(patternDelta),
            ViInt32(patternCondition),
            ViString(expression),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMSOSerialPatternTriggerSource(
        self,
        instrSession,
        triggerSource,
        patternPolarity,
        clockSource,
        pattern,
        expression,
    ):
        _status = self.dll.rsscope_ConfigureMSOSerialPatternTriggerSource(
            ViSession(instrSession),
            ViInt32(triggerSource),
            ViInt32(patternPolarity),
            ViInt32(clockSource),
            ViString(pattern),
            ViString(expression),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMSOBusData(self, instrSession, bus, bufferSize):
        results = ARRAY_ViChar(bufferSize)
        numberOfResults = ViInt32()
        _status = self.dll.rsscope_QueryMSOBusData(
            ViSession(instrSession),
            ViInt32(bus),
            ViInt32(bufferSize),
            results,
            byref(numberOfResults),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        results = list(results)
        numberOfResults = int(numberOfResults.value)
        return results, numberOfResults

    def QueryMSOChannelData(self, instrSession, digitalChannel, bufferSize):
        results = ARRAY_ViChar(bufferSize)
        numberOfResults = ViInt32()
        _status = self.dll.rsscope_QueryMSOChannelData(
            ViSession(instrSession),
            ViInt32(digitalChannel),
            ViInt32(bufferSize),
            results,
            byref(numberOfResults),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        results = list(results)
        numberOfResults = int(numberOfResults.value)
        return results, numberOfResults

    def QueryMSOBusDataHeader(self, instrSession, bus):
        xStart = ViReal64()
        xStop = ViReal64()
        recordLength = ViInt32()
        numberOfValues = ViInt32()
        _status = self.dll.rsscope_QueryMSOBusDataHeader(
            ViSession(instrSession),
            ViInt32(bus),
            byref(xStart),
            byref(xStop),
            byref(recordLength),
            byref(numberOfValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        xStart = float(xStart.value)
        xStop = float(xStop.value)
        recordLength = int(recordLength.value)
        numberOfValues = int(numberOfValues.value)
        return xStart, xStop, recordLength, numberOfValues

    def QueryMSOChannelDataHeader(self, instrSession, digitalChannel):
        xStart = ViReal64()
        xStop = ViReal64()
        recordLength = ViInt32()
        numberOfValues = ViInt32()
        _status = self.dll.rsscope_QueryMSOChannelDataHeader(
            ViSession(instrSession),
            ViInt32(digitalChannel),
            byref(xStart),
            byref(xStop),
            byref(recordLength),
            byref(numberOfValues),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        xStart = float(xStart.value)
        xStop = float(xStop.value)
        recordLength = int(recordLength.value)
        numberOfValues = int(numberOfValues.value)
        return xStart, xStop, recordLength, numberOfValues

    def QueryMSODecodeTable(self, instrSession, serialBus, decodeTable, bufferSize):
        edgeCount = ViInt32()
        tableData = ARRAY_ViChar(bufferSize)
        returnedCharacters = ViInt32()
        _status = self.dll.rsscope_QueryMSODecodeTable(
            ViSession(instrSession),
            ViInt32(serialBus),
            ViInt32(decodeTable),
            ViInt32(bufferSize),
            byref(edgeCount),
            tableData,
            byref(returnedCharacters),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        edgeCount = int(edgeCount.value)
        tableData = decode(tableData)
        returnedCharacters = int(returnedCharacters.value)
        return edgeCount, tableData, returnedCharacters

    def ConfigurePulseSourceSetup(self, instrSession, enabled, outputLevel, repetitionRate, dutyCycle, clockMode):
        _status = self.dll.rsscope_ConfigurePulseSourceSetup(
            ViSession(instrSession),
            ViBoolean(enabled),
            ViReal64(outputLevel),
            ViInt32(repetitionRate),
            ViInt32(dutyCycle),
            ViInt32(clockMode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetPulseSource(self, instrSession):
        _status = self.dll.rsscope_ResetPulseSource(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTDRTDTMeasurement(self, instrSession, measurementType, configuration):
        _status = self.dll.rsscope_ConfigureTDRTDTMeasurement(
            ViSession(instrSession), ViInt32(measurementType), ViInt32(configuration)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTDRTDTSingleEndedChannels(self, instrSession, referenceChannel, outChannel):
        _status = self.dll.rsscope_ConfigureTDRTDTSingleEndedChannels(
            ViSession(instrSession), ViInt32(referenceChannel), ViInt32(outChannel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTDRTDTDifferentialChannels(
        self,
        instrSession,
        referenceChannel,
        outChannel,
        diffOutChannel,
        diffReferenceChannel,
    ):
        _status = self.dll.rsscope_ConfigureTDRTDTDifferentialChannels(
            ViSession(instrSession),
            ViInt32(referenceChannel),
            ViInt32(outChannel),
            ViInt32(diffOutChannel),
            ViInt32(diffReferenceChannel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MeasureTDRTDTWithDefaultValues(self, instrSession):
        _status = self.dll.rsscope_MeasureTDRTDTWithDefaultValues(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTDRTDTCalibrationLoad(self, instrSession, filename):
        _status = self.dll.rsscope_ConfigureTDRTDTCalibrationLoad(ViSession(instrSession), ViString(filename))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTDRTDTCalibrationSave(self, instrSession, filename):
        _status = self.dll.rsscope_ConfigureTDRTDTCalibrationSave(ViSession(instrSession), ViString(filename))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTDRTDTPulseReferenceChannel(self, instrSession, channel):
        _status = self.dll.rsscope_ConfigureTDRTDTPulseReferenceChannel(ViSession(instrSession), ViInt32(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTDRTDTShortLength(self, instrSession, shortLength):
        _status = self.dll.rsscope_ConfigureTDRTDTShortLength(ViSession(instrSession), ViReal64(shortLength))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTDRTDTUseCalibration(self, instrSession, enabled):
        _status = self.dll.rsscope_ConfigureTDRTDTUseCalibration(ViSession(instrSession), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTDRTDTMeasurementParameters(self, instrSession, averaging, bandwidth, domain, permittivity):
        _status = self.dll.rsscope_ConfigureTDRTDTMeasurementParameters(
            ViSession(instrSession),
            ViInt32(averaging),
            ViReal64(bandwidth),
            ViInt32(domain),
            ViReal64(permittivity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTDRTDTSignal(self, instrSession, signal, state, verticalScale, offset, position):
        _status = self.dll.rsscope_ConfigureTDRTDTSignal(
            ViSession(instrSession),
            ViInt32(signal),
            ViBoolean(state),
            ViReal64(verticalScale),
            ViReal64(offset),
            ViReal64(position),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FetchTDRTDTSignalWaveformHeader(self, instrSession, signal):
        xStart = ViReal64()
        xStop = ViReal64()
        recordLength = ViInt32()
        valuesPerSample = ViInt32()
        _status = self.dll.rsscope_FetchTDRTDTSignalWaveformHeader(
            ViSession(instrSession),
            ViInt32(signal),
            byref(xStart),
            byref(xStop),
            byref(recordLength),
            byref(valuesPerSample),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        xStart = float(xStart.value)
        xStop = float(xStop.value)
        recordLength = int(recordLength.value)
        valuesPerSample = int(valuesPerSample.value)
        return xStart, xStop, recordLength, valuesPerSample

    def FetchTDRTDTSignalCompleteWaveform(self, instrSession, signal, timeout, bufferLength):
        waveformArray = ARRAY_ViChar(1024)
        actualPoints = ViInt32()
        _status = self.dll.rsscope_FetchTDRTDTSignalCompleteWaveform(
            ViSession(instrSession),
            ViInt32(signal),
            ViUInt32(timeout),
            ViInt32(bufferLength),
            waveformArray,
            byref(actualPoints),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        return waveformArray, actualPoints

    def FetchTDRTDTSignalPartialWaveform(self, instrSession, signal, timeout, offset, bufferLength):
        waveformArray = ARRAY_ViChar(1024)
        actualPoints = ViInt32()
        _status = self.dll.rsscope_FetchTDRTDTSignalPartialWaveform(
            ViSession(instrSession),
            ViInt32(signal),
            ViUInt32(timeout),
            ViInt32(offset),
            ViInt32(bufferLength),
            waveformArray,
            byref(actualPoints),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        return waveformArray, actualPoints

    def ConfigureWaveformGeneratorState(self, instrSession, generator, enable):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorState(
            ViSession(instrSession), ViInt32(generator), ViBoolean(enable)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformGeneratorPreset(self, instrSession, generator):
        _status = self.dll.rsscope_WaveformGeneratorPreset(ViSession(instrSession), ViInt32(generator))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorOperationMode(self, instrSession, generator, operationMode):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorOperationMode(
            ViSession(instrSession), ViInt32(generator), ViInt32(operationMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformGeneratorCopySettings(self, instrSession, generator):
        _status = self.dll.rsscope_WaveformGeneratorCopySettings(ViSession(instrSession), ViInt32(generator))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorFunctionType(self, instrSession, generator, functionType):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorFunctionType(
            ViSession(instrSession), ViInt32(generator), ViInt32(functionType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorFrequency(self, instrSession, generator, frequency):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorFrequency(
            ViSession(instrSession), ViInt32(generator), ViReal64(frequency)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorPeriod(self, instrSession, generator, period):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorPeriod(
            ViSession(instrSession), ViInt32(generator), ViReal64(period)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorDutyCycle(self, instrSession, generator, dutyCycle):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorDutyCycle(
            ViSession(instrSession), ViInt32(generator), ViReal64(dutyCycle)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorSymmetry(self, instrSession, generator, symmetry):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorSymmetry(
            ViSession(instrSession), ViInt32(generator), ViReal64(symmetry)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorPulseWidth(self, instrSession, generator, pulseWidth):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorPulseWidth(
            ViSession(instrSession), ViInt32(generator), ViReal64(pulseWidth)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorModulationType(self, instrSession, generator, modulationType):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorModulationType(
            ViSession(instrSession), ViInt32(generator), ViInt32(modulationType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorCarrierFrequency(self, instrSession, generator, carrierFrequency):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorCarrierFrequency(
            ViSession(instrSession), ViInt32(generator), ViReal64(carrierFrequency)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorCarrierPeriod(self, instrSession, generator, carrierPeriod):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorCarrierPeriod(
            ViSession(instrSession), ViInt32(generator), ViReal64(carrierPeriod)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorAMModulation(self, instrSession, generator, signal, frequency, depth):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorAMModulation(
            ViSession(instrSession),
            ViInt32(generator),
            ViInt32(signal),
            ViReal64(frequency),
            ViReal64(depth),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorAMModulationDutyCycle(self, instrSession, generator, dutyCycle):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorAMModulationDutyCycle(
            ViSession(instrSession), ViInt32(generator), ViReal64(dutyCycle)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorAMModulationSymmetry(self, instrSession, generator, symmetry):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorAMModulationSymmetry(
            ViSession(instrSession), ViInt32(generator), ViReal64(symmetry)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorFMModulation(self, instrSession, generator, signal, frequency, frequencyDeviation):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorFMModulation(
            ViSession(instrSession),
            ViInt32(generator),
            ViInt32(signal),
            ViReal64(frequency),
            ViReal64(frequencyDeviation),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorFMModulationDutyCycle(self, instrSession, generator, dutyCycle):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorFMModulationDutyCycle(
            ViSession(instrSession), ViInt32(generator), ViReal64(dutyCycle)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorFMModulationSymmetry(self, instrSession, generator, symmetry):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorFMModulationSymmetry(
            ViSession(instrSession), ViInt32(generator), ViReal64(symmetry)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorPWMModulation(self, instrSession, generator, signal, frequency, depth):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorPWMModulation(
            ViSession(instrSession),
            ViInt32(generator),
            ViInt32(signal),
            ViReal64(frequency),
            ViReal64(depth),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorPWMModulationDutyCycle(self, instrSession, generator, dutyCycle):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorPWMModulationDutyCycle(
            ViSession(instrSession), ViInt32(generator), ViReal64(dutyCycle)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorPWMModulationSymmetry(self, instrSession, generator, symmetry):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorPWMModulationSymmetry(
            ViSession(instrSession), ViInt32(generator), ViReal64(symmetry)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorFSKModulation(self, instrSession, generator, frequency1, frequency2, hopRate):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorFSKModulation(
            ViSession(instrSession),
            ViInt32(generator),
            ViReal64(frequency1),
            ViReal64(frequency2),
            ViReal64(hopRate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorSweep(self, instrSession, generator, startFrequency, stopFrequency, sweepTime):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorSweep(
            ViSession(instrSession),
            ViInt32(generator),
            ViReal64(startFrequency),
            ViReal64(stopFrequency),
            ViReal64(sweepTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorArbitrarySource(self, instrSession, generator, source):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorArbitrarySource(
            ViSession(instrSession), ViInt32(generator), ViInt32(source)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorArbitraryRunMode(self, instrSession, generator, runMode):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorArbitraryRunMode(
            ViSession(instrSession), ViInt32(generator), ViInt32(runMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorArbitrarySampleRate(self, instrSession, generator, sampleRate):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorArbitrarySampleRate(
            ViSession(instrSession), ViInt32(generator), ViInt32(sampleRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryWaveformGeneratorArbitrarySamples(self, instrSession, generator):
        samples = ViInt32()
        _status = self.dll.rsscope_QueryWaveformGeneratorArbitrarySamples(
            ViSession(instrSession), ViInt32(generator), byref(samples)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(samples.value)

    def WaveformGeneratorArbitraryOpenFile(self, instrSession, generator, file):
        _status = self.dll.rsscope_WaveformGeneratorArbitraryOpenFile(
            ViSession(instrSession), ViInt32(generator), ViString(file)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformGeneratorArbitraryMultichannelOpenFile(self, instrSession, generator, file):
        _status = self.dll.rsscope_WaveformGeneratorArbitraryMultichannelOpenFile(
            ViSession(instrSession), ViInt32(generator), ViString(file)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorArbitraryMultichannelWaveform(self, instrSession, generator, source):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorArbitraryMultichannelWaveform(
            ViSession(instrSession), ViInt32(generator), ViInt32(source)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorArbitraryScopeSource(self, instrSession, generator, source):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorArbitraryScopeSource(
            ViSession(instrSession), ViInt32(generator), ViInt32(source)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformGeneratorArbitraryScopeOpen(self, instrSession, generator):
        _status = self.dll.rsscope_WaveformGeneratorArbitraryScopeOpen(ViSession(instrSession), ViInt32(generator))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorOutputAmplitude(self, instrSession, generator, amplitude, offset):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorOutputAmplitude(
            ViSession(instrSession),
            ViInt32(generator),
            ViReal64(amplitude),
            ViReal64(offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorOutputLevel(self, instrSession, generator, lowLevel, highLevel):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorOutputLevel(
            ViSession(instrSession),
            ViInt32(generator),
            ViReal64(lowLevel),
            ViReal64(highLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorOutputInversion(self, instrSession, generator, inversion):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorOutputInversion(
            ViSession(instrSession), ViInt32(generator), ViBoolean(inversion)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorOutputUserLoad(self, instrSession, generator, userLoad):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorOutputUserLoad(
            ViSession(instrSession), ViInt32(generator), ViInt32(userLoad)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorOutputDCLevel(self, instrSession, generator, DCLevel):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorOutputDCLevel(
            ViSession(instrSession), ViInt32(generator), ViReal64(DCLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorAddNoise(self, instrSession, generator, addNoise):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorAddNoise(
            ViSession(instrSession), ViInt32(generator), ViBoolean(addNoise)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorNoiseLevelPercent(self, instrSession, generator, level):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorNoiseLevelPercent(
            ViSession(instrSession), ViInt32(generator), ViReal64(level)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryWaveformGeneratorNoiseAbsoluteLevel(self, instrSession, generator):
        absoluteLevel = ViReal64()
        _status = self.dll.rsscope_QueryWaveformGeneratorNoiseAbsoluteLevel(
            ViSession(instrSession), ViInt32(generator), byref(absoluteLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(absoluteLevel.value)

    def ConfigureWaveformGeneratorNoiseDCLevel(self, instrSession, generator, DCLevel):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorNoiseDCLevel(
            ViSession(instrSession), ViInt32(generator), ViReal64(DCLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorCouplingAll(self, instrSession, generator, couplingAll):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorCouplingAll(
            ViSession(instrSession), ViInt32(generator), ViBoolean(couplingAll)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorCouplingAmplitude(self, instrSession, generator, couplingAmplitude):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorCouplingAmplitude(
            ViSession(instrSession), ViInt32(generator), ViBoolean(couplingAmplitude)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorCouplingPhaseShift(self, instrSession, generator, phaseShift):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorCouplingPhaseShift(
            ViSession(instrSession), ViInt32(generator), ViReal64(phaseShift)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformGeneratorCouplingFrequency(self, instrSession, generator, couplingFrequency):
        _status = self.dll.rsscope_ConfigureWaveformGeneratorCouplingFrequency(
            ViSession(instrSession), ViInt32(generator), ViBoolean(couplingFrequency)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternGeneratorState(self, instrSession, state):
        _status = self.dll.rsscope_ConfigurePatternGeneratorState(ViSession(instrSession), ViBoolean(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PatternGeneratorPreset(self, instrSession):
        _status = self.dll.rsscope_PatternGeneratorPreset(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternGeneratorRunMode(self, instrSession, runMode):
        _status = self.dll.rsscope_ConfigurePatternGeneratorRunMode(ViSession(instrSession), ViInt32(runMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternGeneratorBitRate(self, instrSession, bitRate):
        _status = self.dll.rsscope_ConfigurePatternGeneratorBitRate(ViSession(instrSession), ViInt32(bitRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternGeneratorHighLevel(self, instrSession, highLevel):
        _status = self.dll.rsscope_ConfigurePatternGeneratorHighLevel(ViSession(instrSession), ViReal64(highLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PatternGeneratorLoadPattern(self, instrSession, fileName):
        _status = self.dll.rsscope_PatternGeneratorLoadPattern(ViSession(instrSession), ViString(fileName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGeneratorSynchronization(self, instrSession, generatorSynchronization):
        _status = self.dll.rsscope_ConfigureGeneratorSynchronization(
            ViSession(instrSession), ViInt32(generatorSynchronization)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GeneratorStartAlignment(self, instrSession):
        _status = self.dll.rsscope_GeneratorStartAlignment(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GeneratorStartAlignmentWithOPC(self, instrSession, maximumTime):
        _status = self.dll.rsscope_GeneratorStartAlignmentWithOPC(ViSession(instrSession), ViInt32(maximumTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GeneratorAbortAlignment(self, instrSession):
        _status = self.dll.rsscope_GeneratorAbortAlignment(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryGeneratorAlignmentDate(self, instrSession, bufferSize):
        alignmentDate = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryGeneratorAlignmentDate(
            ViSession(instrSession), ViInt32(bufferSize), alignmentDate
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(alignmentDate)

    def QueryGeneratorAlignmentTime(self, instrSession, bufferSize):
        alignmentTime = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryGeneratorAlignmentTime(
            ViSession(instrSession), ViInt32(bufferSize), alignmentTime
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(alignmentTime)

    def QueryGeneratorAlignmentOverallState(self, instrSession):
        alignmentOverallState = ViInt32()
        _status = self.dll.rsscope_QueryGeneratorAlignmentOverallState(
            ViSession(instrSession), byref(alignmentOverallState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(alignmentOverallState.value)

    def ConfigureIQModeState(self, instrSession, state):
        _status = self.dll.rsscope_ConfigureIQModeState(ViSession(instrSession), ViBoolean(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureIQSamplingInputSettings(self, instrSession, relativeBandwidth, sampleRate, recordLength):
        _status = self.dll.rsscope_ConfigureIQSamplingInputSettings(
            ViSession(instrSession),
            ViReal64(relativeBandwidth),
            ViReal64(sampleRate),
            ViInt32(recordLength),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryIQSamplingFilterBandwidth(self, instrSession):
        filterBandwidth = ViInt32()
        _status = self.dll.rsscope_QueryIQSamplingFilterBandwidth(ViSession(instrSession), byref(filterBandwidth))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(filterBandwidth.value)

    def ConfigureIQSamplingInputType(self, instrSession, channel, inputType, inputMode):
        _status = self.dll.rsscope_ConfigureIQSamplingInputType(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(inputType),
            ViInt32(inputMode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureIQSamplingRealInput(self, instrSession, channel, carrierFrequency, sideband):
        _status = self.dll.rsscope_ConfigureIQSamplingRealInput(
            ViSession(instrSession),
            ViInt32(channel),
            ViReal64(carrierFrequency),
            ViInt32(sideband),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureIQSamplingComplexInput(self, instrSession, channel, carrierFrequency, sideband):
        _status = self.dll.rsscope_ConfigureIQSamplingComplexInput(
            ViSession(instrSession),
            ViInt32(channel),
            ViReal64(carrierFrequency),
            ViInt32(sideband),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryIQData(self, instrSession, channel, bufferSize):
        i = ARRAY_ViChar(bufferSize)
        q = ARRAY_ViChar(bufferSize)
        numberOfResults = ViInt32()
        _status = self.dll.rsscope_QueryIQData(
            ViSession(instrSession),
            ViInt32(channel),
            ViInt32(bufferSize),
            i,
            q,
            byref(numberOfResults),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        i = list(i)
        q = list(q)
        numberOfResults = int(numberOfResults.value)
        return i, q, numberOfResults

    def QueryIQDataHeader(self, instrSession, channel):
        xStart = ViReal64()
        xStop = ViReal64()
        recordLength = ViInt32()
        valuesPerSample = ViInt32()
        _status = self.dll.rsscope_QueryIQDataHeader(
            ViSession(instrSession),
            ViInt32(channel),
            byref(xStart),
            byref(xStop),
            byref(recordLength),
            byref(valuesPerSample),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        xStart = float(xStart.value)
        xStop = float(xStop.value)
        recordLength = int(recordLength.value)
        valuesPerSample = int(valuesPerSample.value)
        return xStart, xStop, recordLength, valuesPerSample

    def ConfigureSpectrumAnalysisSpectrogramEnabled(self, instrSession, mathNumber, spectrogram):
        _status = self.dll.rsscope_ConfigureSpectrumAnalysisSpectrogramEnabled(
            ViSession(instrSession), ViInt32(mathNumber), ViBoolean(spectrogram)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumAnalysisXScaling(self, instrSession, mathNumber, xScaling):
        _status = self.dll.rsscope_ConfigureSpectrumAnalysisXScaling(
            ViSession(instrSession), ViInt32(mathNumber), ViInt32(xScaling)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumAnalysisCoupledSpectrum(self, instrSession, mathNumber, mathNumber2, coupled):
        _status = self.dll.rsscope_ConfigureSpectrumAnalysisCoupledSpectrum(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViInt32(mathNumber2),
            ViBoolean(coupled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySpectrumAnalysisDataSignalType(self, instrSession, mathNumber):
        dataSignalType = ViInt32()
        _status = self.dll.rsscope_QuerySpectrumAnalysisDataSignalType(
            ViSession(instrSession), ViInt32(mathNumber), byref(dataSignalType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(dataSignalType.value)

    def ConfigureSpectrumAnalysisColorTable(self, instrSession, mathNumber, enabled, colorTableMode):
        _status = self.dll.rsscope_ConfigureSpectrumAnalysisColorTable(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViBoolean(enabled),
            ViInt32(colorTableMode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectrumAnalysisTimeline(self, instrSession, mathNumber, timeline, enabled, position):
        _status = self.dll.rsscope_ConfigureSpectrumAnalysisTimeline(
            ViSession(instrSession),
            ViInt32(mathNumber),
            ViInt32(timeline),
            ViBoolean(enabled),
            ViInt32(position),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCDRSoftware(
        self,
        instrSession,
        softwareNumber,
        nominalBitRate,
        dataEdges,
        initialPhaseSync,
        selectedResults,
    ):
        _status = self.dll.rsscope_ConfigureCDRSoftware(
            ViSession(instrSession),
            ViInt32(softwareNumber),
            ViReal64(nominalBitRate),
            ViInt32(dataEdges),
            ViInt32(initialPhaseSync),
            ViInt32(selectedResults),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCDRSoftwarePLL(self, instrSession, softwareNumber, order, damping, bandwidth, relativeBandwidth):
        _status = self.dll.rsscope_ConfigureCDRSoftwarePLL(
            ViSession(instrSession),
            ViInt32(softwareNumber),
            ViInt32(order),
            ViReal64(damping),
            ViReal64(bandwidth),
            ViReal64(relativeBandwidth),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCDRSoftwareSerialStandard(self, instrSession, softwareNumber, serialStandard):
        _status = self.dll.rsscope_ConfigureCDRSoftwareSerialStandard(
            ViSession(instrSession), ViInt32(softwareNumber), ViInt32(serialStandard)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCDRSoftwareBitRateCorrection(self, instrSession, softwareNumber, enabled, source):
        _status = self.dll.rsscope_ConfigureCDRSoftwareBitRateCorrection(
            ViSession(instrSession),
            ViInt32(softwareNumber),
            ViBoolean(enabled),
            ViInt32(source),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CDRSoftwareEstimateBitRateOnce(self, instrSession, softwareNumber):
        _status = self.dll.rsscope_CDRSoftwareEstimateBitRateOnce(ViSession(instrSession), ViInt32(softwareNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCDRHardware(self, instrSession, source, nominalBitRate, dataEdges):
        _status = self.dll.rsscope_ConfigureCDRHardware(
            ViSession(instrSession),
            ViInt32(source),
            ViReal64(nominalBitRate),
            ViInt32(dataEdges),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCDRHardwarePLL(self, instrSession, order, damping, bandwidth, relativeBandwidth):
        _status = self.dll.rsscope_ConfigureCDRHardwarePLL(
            ViSession(instrSession),
            ViInt32(order),
            ViReal64(damping),
            ViReal64(bandwidth),
            ViInt32(relativeBandwidth),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCDRHardwareSerialStandard(self, instrSession, serialStandard):
        _status = self.dll.rsscope_ConfigureCDRHardwareSerialStandard(ViSession(instrSession), ViInt32(serialStandard))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CDRHardwareEstimateBitRateOnce(self, instrSession):
        _status = self.dll.rsscope_CDRHardwareEstimateBitRateOnce(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCDRHardwareTriggerUIOffset(self, instrSession, UIOffset):
        _status = self.dll.rsscope_ConfigureCDRHardwareTriggerUIOffset(ViSession(instrSession), ViReal64(UIOffset))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def reset(self, instrSession):
        _status = self.dll.rsscope_reset(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, instrSession):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_self_test(ViSession(instrSession), byref(selfTestResult), selfTestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, instrSession):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_revision_query(ViSession(instrSession), instrumentDriverRevision, firmwareRevision)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def FetchAllSystemErrors(self, instrSession, bufferSize):
        systemErrors = ARRAY_ViChar(bufferSize)
        bytesRead = ViInt32()
        _status = self.dll.rsscope_FetchAllSystemErrors(
            ViSession(instrSession), ViUInt32(bufferSize), systemErrors, byref(bytesRead)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        systemErrors = decode(systemErrors)
        bytesRead = int(bytesRead.value)
        return systemErrors, bytesRead

    def error_query(self, instrSession):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_error_query(ViSession(instrSession), byref(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def error_message(self, instrSession, errorCode):
        errorMessage = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_error_message(ViSession(instrSession), ViStatus(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(errorMessage)

    def ByteOrder(self, instrSession, byteOrder):
        _status = self.dll.rsscope_ByteOrder(ViSession(instrSession), ViInt32(byteOrder))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetStatusRegister(self, instrSession, questionableRegister, enable, PTransition, NTransition):
        _status = self.dll.rsscope_SetStatusRegister(
            ViSession(instrSession),
            ViInt32(questionableRegister),
            ViInt32(enable),
            ViInt32(PTransition),
            ViInt32(NTransition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetStatusRegister(self, instrSession, questionableRegister, registerPart):
        registerValue = ViInt32()
        _status = self.dll.rsscope_GetStatusRegister(
            ViSession(instrSession),
            ViInt32(questionableRegister),
            ViInt32(registerPart),
            byref(registerValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(registerValue.value)

    def ConfigureErrorChecking(self, instrSession, optionChecking, rangeChecking, statusChecking):
        _status = self.dll.rsscope_ConfigureErrorChecking(
            ViSession(instrSession),
            ViBoolean(optionChecking),
            ViBoolean(rangeChecking),
            ViBoolean(statusChecking),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetOPCTimeout(self, instrSession, OPCTimeout):
        _status = self.dll.rsscope_SetOPCTimeout(ViSession(instrSession), ViUInt32(OPCTimeout))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetOPCTimeout(self, instrSession):
        timeout = ViUInt32()
        _status = self.dll.rsscope_GetOPCTimeout(ViSession(instrSession), byref(timeout))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(timeout.value)

    def SetVISATimeout(self, instrSession, VISATimeout):
        _status = self.dll.rsscope_SetVISATimeout(ViSession(instrSession), ViUInt32(VISATimeout))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetVISATimeout(self, instrSession):
        VISATimeout = ViUInt32()
        _status = self.dll.rsscope_GetVISATimeout(ViSession(instrSession), byref(VISATimeout))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(VISATimeout.value)

    def ClearStatus(self, instrSession):
        _status = self.dll.rsscope_ClearStatus(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IDQueryResponse(self, instrSession):
        IDQueryResponse = ARRAY_ViChar(1024)
        _status = self.dll.rsscope_IDQueryResponse(ViSession(instrSession), IDQueryResponse)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(IDQueryResponse)

    def QueryDeviceSerialNumber(self, instrSession, bufferSize):
        deviceID = ARRAY_ViChar(bufferSize)
        bytesRead = ViInt32()
        _status = self.dll.rsscope_QueryDeviceSerialNumber(
            ViSession(instrSession), ViUInt32(bufferSize), deviceID, byref(bytesRead)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        deviceID = decode(deviceID)
        bytesRead = int(bytesRead.value)
        return deviceID, bytesRead

    def ProcessAllPreviousCommands(self, instrSession):
        _status = self.dll.rsscope_ProcessAllPreviousCommands(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryOPC(self, instrSession):
        OPC = ViInt32()
        _status = self.dll.rsscope_QueryOPC(ViSession(instrSession), byref(OPC))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(OPC.value)

    def ScopeModel(self, instrSession):
        model = ViInt32()
        _status = self.dll.rsscope_ScopeModel(ViSession(instrSession), byref(model))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(model.value)

    def ScopeSeries(self, instrSession):
        series = ViInt32()
        _status = self.dll.rsscope_ScopeSeries(ViSession(instrSession), byref(series))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(series.value)

    def ScopeFamily(self, instrSession):
        family = ViInt32()
        _status = self.dll.rsscope_ScopeFamily(ViSession(instrSession), byref(family))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(family.value)

    def ConfigureAutoSystemErrQuery(self, instrSession, autoSystErrQuery):
        _status = self.dll.rsscope_ConfigureAutoSystemErrQuery(ViSession(instrSession), ViBoolean(autoSystErrQuery))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMultiThreadLocking(self, instrSession, multiThreadLocking):
        _status = self.dll.rsscope_ConfigureMultiThreadLocking(ViSession(instrSession), ViBoolean(multiThreadLocking))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetSystemDate(self, instrSession, year, month, day):
        _status = self.dll.rsscope_SetSystemDate(ViSession(instrSession), ViInt32(year), ViInt32(month), ViInt32(day))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySystemDate(self, instrSession):
        year = ViInt32()
        month = ViInt32()
        day = ViInt32()
        _status = self.dll.rsscope_QuerySystemDate(ViSession(instrSession), byref(year), byref(month), byref(day))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        year = int(year.value)
        month = int(month.value)
        day = int(day.value)
        return year, month, day

    def QuerySystemTime(self, instrSession):
        hour = ViInt32()
        minutes = ViInt32()
        seconds = ViInt32()
        _status = self.dll.rsscope_QuerySystemTime(ViSession(instrSession), byref(hour), byref(minutes), byref(seconds))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        hour = int(hour.value)
        minutes = int(minutes.value)
        seconds = int(seconds.value)
        return hour, minutes, seconds

    def GetError(self, instrSession, bufferSize):
        code = ViStatus()
        description = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_GetError(ViSession(instrSession), byref(code), ViInt32(bufferSize), description)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        description = decode(description)
        return code, description

    def ClearError(self, instrSession):
        _status = self.dll.rsscope_ClearError(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WriteInstrData(self, instrSession, writeBuffer):
        _status = self.dll.rsscope_WriteInstrData(ViSession(instrSession), ViString(writeBuffer))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadInstrData(self, instrSession, numberOfBytesToRead):
        readBuffer = ARRAY_ViChar(1024)
        numBytesRead = ViUInt32()
        _status = self.dll.rsscope_ReadInstrData(
            ViSession(instrSession),
            ViInt32(numberOfBytesToRead),
            readBuffer,
            byref(numBytesRead),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        readBuffer = decode(readBuffer)
        numBytesRead = int(numBytesRead.value)
        return readBuffer, numBytesRead

    def QueryViBoolean(self, instrSession, command):
        value = ViBoolean()
        _status = self.dll.rsscope_QueryViBoolean(ViSession(instrSession), ViString(command), byref(value))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(value.value)

    def QueryViInt32(self, instrSession, command):
        value = ViInt32()
        _status = self.dll.rsscope_QueryViInt32(ViSession(instrSession), ViString(command), byref(value))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def QueryViReal64(self, instrSession, command):
        value = ViReal64()
        _status = self.dll.rsscope_QueryViReal64(ViSession(instrSession), ViString(command), byref(value))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(value.value)

    def QueryViString(self, instrSession, command, bufferSize):
        value = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_QueryViString(ViSession(instrSession), ViString(command), ViInt32(bufferSize), value)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def SaveInstrumentSettings(self, instrSession, number):
        _status = self.dll.rsscope_SaveInstrumentSettings(ViSession(instrSession), ViInt32(number))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RecallInstrumentSettings(self, instrSession, number):
        _status = self.dll.rsscope_RecallInstrumentSettings(ViSession(instrSession), ViInt32(number))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FileManagerOperations(self, instrSession, operation, source, destination):
        _status = self.dll.rsscope_FileManagerOperations(
            ViSession(instrSession),
            ViInt32(operation),
            ViString(source),
            ViString(destination),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ChangeFileAttributes(self, instrSession, file, attributes):
        _status = self.dll.rsscope_ChangeFileAttributes(ViSession(instrSession), ViString(file), ViString(attributes))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FileCount(self, instrSession, directory):
        numberOfFilesAndFolders = ViInt32()
        _status = self.dll.rsscope_FileCount(
            ViSession(instrSession), ViString(directory), byref(numberOfFilesAndFolders)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(numberOfFilesAndFolders.value)

    def FileDirectoryContent(self, instrSession, directory, bufferSize):
        output = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_FileDirectoryContent(
            ViSession(instrSession), ViString(directory), ViInt32(bufferSize), output
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(output)

    def FileSubdirectoriesCount(self, instrSession, directory):
        numberOfSubdirectories = ViInt32()
        _status = self.dll.rsscope_FileSubdirectoriesCount(
            ViSession(instrSession), ViString(directory), byref(numberOfSubdirectories)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(numberOfSubdirectories.value)

    def FileSubdirectories(self, instrSession, directory, bufferSize):
        output = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_FileSubdirectories(
            ViSession(instrSession), ViString(directory), ViInt32(bufferSize), output
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(output)

    def FileDrives(self, instrSession, bufferSize):
        output = ARRAY_ViChar(bufferSize)
        _status = self.dll.rsscope_FileDrives(ViSession(instrSession), ViInt32(bufferSize), output)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(output)

    def ReadToFileFromInstrument(self, instrSession, source, destination):
        _status = self.dll.rsscope_ReadToFileFromInstrument(
            ViSession(instrSession), ViString(source), ViString(destination)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WriteFromFileToInstrument(self, instrSession, source, destination):
        _status = self.dll.rsscope_WriteFromFileToInstrument(
            ViSession(instrSession), ViString(source), ViString(destination)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DataSetFileOperations(self, instrSession, operation, stateNumber, path):
        _status = self.dll.rsscope_DataSetFileOperations(
            ViSession(instrSession),
            ViInt32(operation),
            ViInt32(stateNumber),
            ViString(path),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSavesetPreviewImage(self, instrSession, include):
        _status = self.dll.rsscope_ConfigureSavesetPreviewImage(ViSession(instrSession), ViBoolean(include))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OneFileOperations(self, instrSession, operation, name):
        _status = self.dll.rsscope_OneFileOperations(ViSession(instrSession), ViInt32(operation), ViString(name))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformExportChannel(self, instrSession, channel, exportChannel):
        _status = self.dll.rsscope_ConfigureWaveformExportChannel(
            ViSession(instrSession), ViInt32(channel), ViBoolean(exportChannel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformExportMultichannel(self, instrSession, multichannelExport):
        _status = self.dll.rsscope_ConfigureWaveformExportMultichannel(
            ViSession(instrSession), ViBoolean(multichannelExport)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformExportSource(self, instrSession, source):
        _status = self.dll.rsscope_ConfigureWaveformExportSource(ViSession(instrSession), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformExportScopeZoom(self, instrSession, diagramName, zoomName):
        _status = self.dll.rsscope_ConfigureWaveformExportScopeZoom(
            ViSession(instrSession), ViString(diagramName), ViString(zoomName)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformExportScopeCursor(self, instrSession, cursor):
        _status = self.dll.rsscope_ConfigureWaveformExportScopeCursor(ViSession(instrSession), ViInt32(cursor))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformExportScopeGate(self, instrSession, measurement):
        _status = self.dll.rsscope_ConfigureWaveformExportScopeGate(ViSession(instrSession), ViInt32(measurement))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformExportScopeManual(self, instrSession, start, stop):
        _status = self.dll.rsscope_ConfigureWaveformExportScopeManual(
            ViSession(instrSession), ViReal64(start), ViReal64(stop)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformExportScopeComplete(self, instrSession):
        _status = self.dll.rsscope_ConfigureWaveformExportScopeComplete(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformExportScopeDataLogging(self, instrSession, dataLogging):
        _status = self.dll.rsscope_ConfigureWaveformExportScopeDataLogging(
            ViSession(instrSession), ViBoolean(dataLogging)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformExportTimestamps(self, instrSession, timestamps):
        _status = self.dll.rsscope_ConfigureWaveformExportTimestamps(ViSession(instrSession), ViBoolean(timestamps))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformExportFastExport(self, instrSession, fastExport):
        _status = self.dll.rsscope_ConfigureWaveformExportFastExport(ViSession(instrSession), ViBoolean(fastExport))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformExportInterleavedXY(self, instrSession, interleavedXY):
        _status = self.dll.rsscope_WaveformExportInterleavedXY(ViSession(instrSession), ViBoolean(interleavedXY))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformExportRawValues(self, instrSession, rawValues):
        _status = self.dll.rsscope_WaveformExportRawValues(ViSession(instrSession), ViBoolean(rawValues))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformExportFile(self, instrSession, file):
        _status = self.dll.rsscope_WaveformExportFile(ViSession(instrSession), ViString(file))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformNxSingleAcquisitionDisplayUpdate(self, instrSession, displayUpdate):
        _status = self.dll.rsscope_ConfigureWaveformNxSingleAcquisitionDisplayUpdate(
            ViSession(instrSession), ViBoolean(displayUpdate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramExportName(self, instrSession, histogramName):
        _status = self.dll.rsscope_ConfigureHistogramExportName(ViSession(instrSession), ViString(histogramName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHistogramExportIncidence(self, instrSession, incidence):
        _status = self.dll.rsscope_ConfigureHistogramExportIncidence(ViSession(instrSession), ViInt32(incidence))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def HistogramExportFile(self, instrSession, file):
        _status = self.dll.rsscope_HistogramExportFile(ViSession(instrSession), ViString(file))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FetchHistogramExportData(self, instrSession, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        actualPoints = ViInt32()
        _status = self.dll.rsscope_FetchHistogramExportData(
            ViSession(instrSession), ViInt32(bufferSize), data, byref(actualPoints)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = list(data)
        actualPoints = int(actualPoints.value)
        return data, actualPoints

    def NumericResultsSelectItem(self, instrSession, item, select):
        _status = self.dll.rsscope_NumericResultsSelectItem(ViSession(instrSession), ViString(item), ViBoolean(select))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNumericResultsParameters(self, instrSession, delimiter, omitUnits):
        _status = self.dll.rsscope_ConfigureNumericResultsParameters(
            ViSession(instrSession), ViInt32(delimiter), ViBoolean(omitUnits)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SaveNumericResultsBoxes(self, instrSession, file):
        _status = self.dll.rsscope_SaveNumericResultsBoxes(ViSession(instrSession), ViString(file))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLongTermExportResult(self, instrSession, measurement):
        _status = self.dll.rsscope_ConfigureLongTermExportResult(ViSession(instrSession), ViInt32(measurement))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLongTermExportType(self, instrSession, type):
        _status = self.dll.rsscope_ConfigureLongTermExportType(ViSession(instrSession), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LongTermExportFile(self, instrSession, file):
        _status = self.dll.rsscope_LongTermExportFile(ViSession(instrSession), ViString(file))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FetchLongTermExportData(self, instrSession, bufferSize):
        data = ARRAY_ViChar(bufferSize)
        actualPoints = ViInt32()
        _status = self.dll.rsscope_FetchLongTermExportData(
            ViSession(instrSession), ViInt32(bufferSize), data, byref(actualPoints)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        data = list(data)
        actualPoints = int(actualPoints.value)
        return data, actualPoints

    def ReportControl(self, instrSession, language, paperSize):
        _status = self.dll.rsscope_ReportControl(ViSession(instrSession), ViString(language), ViInt32(paperSize))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReportComment(self, instrSession, user, comment):
        _status = self.dll.rsscope_ReportComment(ViSession(instrSession), ViString(user), ViString(comment))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReportLogo(self, instrSession, logoType, logoFile):
        _status = self.dll.rsscope_ReportLogo(ViSession(instrSession), ViInt32(logoType), ViString(logoFile))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReportFileName(self, instrSession, fileName):
        _status = self.dll.rsscope_ReportFileName(ViSession(instrSession), ViString(fileName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SaveReport(self, instrSession):
        _status = self.dll.rsscope_SaveReport(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutonamingFilePattern(self, instrSession, textInput, prefix, userText, date, index, time):
        _status = self.dll.rsscope_AutonamingFilePattern(
            ViSession(instrSession),
            ViString(textInput),
            ViBoolean(prefix),
            ViBoolean(userText),
            ViBoolean(date),
            ViBoolean(index),
            ViBoolean(time),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutonamingDefaultPath(self, instrSession, defaultPath):
        _status = self.dll.rsscope_AutonamingDefaultPath(ViSession(instrSession), ViString(defaultPath))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutonamingResetPath(self, instrSession):
        _status = self.dll.rsscope_AutonamingResetPath(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutonamingResetAllSettings(self, instrSession):
        _status = self.dll.rsscope_AutonamingResetAllSettings(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def close(self, instrSession):
        _status = self.dll.rsscope_close(ViSession(instrSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
