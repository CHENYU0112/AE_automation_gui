from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .rsscope_dllwrap import *


class rsscope(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = rsscope_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        if not OptionString:
            # This driver crashes on Initialize if the option string is empty, so take a non-intrusive default
            OptionString = "simulate=false"
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def Autoset(self):
        """"""
        return self._dllwrap.Autoset(self._vi)

    def ConfigureAcquisitionType(self, channel, waveform, acquisitionType):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param acquisitionType:
        :type acquisitionType:
        """
        return self._dllwrap.ConfigureAcquisitionType(self._vi, channel, waveform, acquisitionType)

    def ConfigureAcquisitionRecord(self, timePerRecord, acquisitionStartTime):
        """

        :param timePerRecord:
        :type timePerRecord:
        :param acquisitionStartTime:
        :type acquisitionStartTime:
        """
        return self._dllwrap.ConfigureAcquisitionRecord(self._vi, timePerRecord, acquisitionStartTime)

    def QueryNumberOfAcquisitions(self):
        """"""
        return self._dllwrap.QueryNumberOfAcquisitions(self._vi)

    def ConfigureTimeBase(self, timeScale, referencePoint, restrictOffset):
        """

        :param timeScale:
        :type timeScale:
        :param referencePoint:
        :type referencePoint:
        :param restrictOffset:
        :type restrictOffset:
        """
        return self._dllwrap.ConfigureTimeBase(self._vi, timeScale, referencePoint, restrictOffset)

    def ConfigureRollMode(self, mode, minRollModeGain):
        """

        :param mode:
        :type mode:
        :param minRollModeGain:
        :type minRollModeGain:
        """
        return self._dllwrap.ConfigureRollMode(self._vi, mode, minRollModeGain)

    def QueryDivisions(self):
        """"""
        return self._dllwrap.QueryDivisions(self._vi)

    def ConfigureTimeSelectDependency(self, timeSelectDependency):
        """

        :param timeSelectDependency:
        :type timeSelectDependency:
        """
        return self._dllwrap.ConfigureTimeSelectDependency(self._vi, timeSelectDependency)

    def ConfigureAutoAdjustment(self, autoAdjustment):
        """

        :param autoAdjustment:
        :type autoAdjustment:
        """
        return self._dllwrap.ConfigureAutoAdjustment(self._vi, autoAdjustment)

    def ConfigureSampleRate(self, sampleRate):
        """

        :param sampleRate:
        :type sampleRate:
        """
        return self._dllwrap.ConfigureSampleRate(self._vi, sampleRate)

    def ConfigureResolution(self, resolution):
        """

        :param resolution:
        :type resolution:
        """
        return self._dllwrap.ConfigureResolution(self._vi, resolution)

    def QueryADCSampleRate(self):
        """"""
        return self._dllwrap.QueryADCSampleRate(self._vi)

    def ConfigureRecordLength(self, recordLength):
        """

        :param recordLength:
        :type recordLength:
        """
        return self._dllwrap.ConfigureRecordLength(self._vi, recordLength)

    def ConfigureRecordLengthLimit(self, lengthLimit):
        """

        :param lengthLimit:
        :type lengthLimit:
        """
        return self._dllwrap.ConfigureRecordLengthLimit(self._vi, lengthLimit)

    def ConfigureAcquisitionSampleRate(self, acquisitionSampleRate):
        """

        :param acquisitionSampleRate:
        :type acquisitionSampleRate:
        """
        return self._dllwrap.ConfigureAcquisitionSampleRate(self._vi, acquisitionSampleRate)

    def ConfigureAcquisitionTime(self, acquisitionTime):
        """

        :param acquisitionTime:
        :type acquisitionTime:
        """
        return self._dllwrap.ConfigureAcquisitionTime(self._vi, acquisitionTime)

    def ConfigureResolutionEnhancement(self, resolutionEnhancement):
        """

        :param resolutionEnhancement:
        :type resolutionEnhancement:
        """
        return self._dllwrap.ConfigureResolutionEnhancement(self._vi, resolutionEnhancement)

    def ConfigureInterpolation(self, interpolation):
        """

        :param interpolation:
        :type interpolation:
        """
        return self._dllwrap.ConfigureInterpolation(self._vi, interpolation)

    def ConfigureWaveformState(self, channel, waveform, enableWaveform):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param enableWaveform:
        :type enableWaveform:
        """
        return self._dllwrap.ConfigureWaveformState(self._vi, channel, waveform, enableWaveform)

    def ConfigureWaveformArithmetic(self, channel, waveform, arithmetic):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param arithmetic:
        :type arithmetic:
        """
        return self._dllwrap.ConfigureWaveformArithmetic(self._vi, channel, waveform, arithmetic)

    def ConfigureNumberOfAverages(self, numberOfAverages):
        """

        :param numberOfAverages:
        :type numberOfAverages:
        """
        return self._dllwrap.ConfigureNumberOfAverages(self._vi, numberOfAverages)

    def ConfigureUltraSegmentation(self, ultraSegmentationEnabled, ultraSegmentationDependecy):
        """

        :param ultraSegmentationEnabled:
        :type ultraSegmentationEnabled:
        :param ultraSegmentationDependecy:
        :type ultraSegmentationDependecy:
        """
        return self._dllwrap.ConfigureUltraSegmentation(self._vi, ultraSegmentationEnabled, ultraSegmentationDependecy)

    def ConfigureUltraSegmentationAutoReplay(self, autoReplay):
        """

        :param autoReplay:
        :type autoReplay:
        """
        return self._dllwrap.ConfigureUltraSegmentationAutoReplay(self._vi, autoReplay)

    def ConfigureWaveformAcquisitionCoupleChannelsEnabled(self, autoReplay):
        """

        :param autoReplay:
        :type autoReplay:
        """
        return self._dllwrap.ConfigureWaveformAcquisitionCoupleChannelsEnabled(self._vi, autoReplay)

    def ConfigureMultiwaveformAcquisitionEnabled(self, multiwaveform):
        """

        :param multiwaveform:
        :type multiwaveform:
        """
        return self._dllwrap.ConfigureMultiwaveformAcquisitionEnabled(self._vi, multiwaveform)

    def ConfigureChannel(self, channel, channelEnabled, verticalRange, verticalOffset, verticalCoupling):
        """

        :param channel:
        :type channel:
        :param channelEnabled:
        :type channelEnabled:
        :param verticalRange:
        :type verticalRange:
        :param verticalOffset:
        :type verticalOffset:
        :param verticalCoupling:
        :type verticalCoupling:
        """
        return self._dllwrap.ConfigureChannel(
            self._vi,
            channel,
            channelEnabled,
            verticalRange,
            verticalOffset,
            verticalCoupling,
        )

    def ConfigureChannelInvert(self, channel, invert):
        """

        :param channel:
        :type channel:
        :param invert:
        :type invert:
        """
        return self._dllwrap.ConfigureChannelInvert(self._vi, channel, invert)

    def ConfigureChannelGroundConnection(self, channel, groundConnection):
        """

        :param channel:
        :type channel:
        :param groundConnection:
        :type groundConnection:
        """
        return self._dllwrap.ConfigureChannelGroundConnection(self._vi, channel, groundConnection)

    def ConfigureChannelOffset(self, channel, offset):
        """

        :param channel:
        :type channel:
        :param offset:
        :type offset:
        """
        return self._dllwrap.ConfigureChannelOffset(self._vi, channel, offset)

    def ConfigureChannelVerticalScale(self, channel, verticalScale):
        """

        :param channel:
        :type channel:
        :param verticalScale:
        :type verticalScale:
        """
        return self._dllwrap.ConfigureChannelVerticalScale(self._vi, channel, verticalScale)

    def ConfigureChannelBandwidth(self, channel, bandwidth):
        """

        :param channel:
        :type channel:
        :param bandwidth:
        :type bandwidth:
        """
        return self._dllwrap.ConfigureChannelBandwidth(self._vi, channel, bandwidth)

    def ConfigureChannelMeasurementImpedance(self, channel, inputImpedance):
        """

        :param channel:
        :type channel:
        :param inputImpedance:
        :type inputImpedance:
        """
        return self._dllwrap.ConfigureChannelMeasurementImpedance(self._vi, channel, inputImpedance)

    def ConfigureChannelOverload(self, channel, overload):
        """

        :param channel:
        :type channel:
        :param overload:
        :type overload:
        """
        return self._dllwrap.ConfigureChannelOverload(self._vi, channel, overload)

    def ConfigureChannelAntialiasing(self, channel, antialiasing):
        """

        :param channel:
        :type channel:
        :param antialiasing:
        :type antialiasing:
        """
        return self._dllwrap.ConfigureChannelAntialiasing(self._vi, channel, antialiasing)

    def ConfigureChannelDigitalFilter(self, channel, enable, cutOff):
        """

        :param channel:
        :type channel:
        :param enable:
        :type enable:
        :param cutOff:
        :type cutOff:
        """
        return self._dllwrap.ConfigureChannelDigitalFilter(self._vi, channel, enable, cutOff)

    def ConfigureChannelDigitalFilterTrigger(self, trigger, reserved, coupling, RFRejectBW):
        """

        :param trigger:
        :type trigger:
        :param reserved:
        :type reserved:
        :param coupling:
        :type coupling:
        :param RFRejectBW:
        :type RFRejectBW:
        """
        return self._dllwrap.ConfigureChannelDigitalFilterTrigger(self._vi, trigger, reserved, coupling, RFRejectBW)

    def ConfigureChannelExternalAttenuation(self, channel, scale, attenuation):
        """

        :param channel:
        :type channel:
        :param scale:
        :type scale:
        :param attenuation:
        :type attenuation:
        """
        return self._dllwrap.ConfigureChannelExternalAttenuation(self._vi, channel, scale, attenuation)

    def ConfigureDifferentialSignal(self, differentialSignal, enable, positiveInput, negativeInput, outputA, outputB):
        """

        :param differentialSignal:
        :type differentialSignal:
        :param enable:
        :type enable:
        :param positiveInput:
        :type positiveInput:
        :param negativeInput:
        :type negativeInput:
        :param outputA:
        :type outputA:
        :param outputB:
        :type outputB:
        """
        return self._dllwrap.ConfigureDifferentialSignal(
            self._vi,
            differentialSignal,
            enable,
            positiveInput,
            negativeInput,
            outputA,
            outputB,
        )

    def ConfigureCoupleVerticalChannelSettingsEnabled(self, channel, coupledChannel, couplingEnabled):
        """

        :param channel:
        :type channel:
        :param coupledChannel:
        :type coupledChannel:
        :param couplingEnabled:
        :type couplingEnabled:
        """
        return self._dllwrap.ConfigureCoupleVerticalChannelSettingsEnabled(
            self._vi, channel, coupledChannel, couplingEnabled
        )

    def QueryVerticalChannelSettingsCoupled(self, channel, coupledChannel):
        """

        :param channel:
        :type channel:
        :param coupledChannel:
        :type coupledChannel:
        """
        return self._dllwrap.QueryVerticalChannelSettingsCoupled(self._vi, channel, coupledChannel)

    def ConfigureProbe(self, channel, channelVisible, offset):
        """

        :param channel:
        :type channel:
        :param channelVisible:
        :type channelVisible:
        :param offset:
        :type offset:
        """
        return self._dllwrap.ConfigureProbe(self._vi, channel, channelVisible, offset)

    def QueryProbeState(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.QueryProbeState(self._vi, channel)

    def QueryProbeCharacteristics(self, channel, bufferSize):
        """

        :param channel:
        :type channel:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryProbeCharacteristics(self._vi, channel, bufferSize)

    def ConfigureProbeMicroButtonAction(self, channel, microButtonAction):
        """

        :param channel:
        :type channel:
        :param microButtonAction:
        :type microButtonAction:
        """
        return self._dllwrap.ConfigureProbeMicroButtonAction(self._vi, channel, microButtonAction)

    def ProbeAutoZero(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.ProbeAutoZero(self._vi, channel)

    def ProbeUseAutoZero(self, channel, useAutoZero):
        """

        :param channel:
        :type channel:
        :param useAutoZero:
        :type useAutoZero:
        """
        return self._dllwrap.ProbeUseAutoZero(self._vi, channel, useAutoZero)

    def ConfigureProbeZeroAdjustValue(self, channel, zeroAdjustValue):
        """

        :param channel:
        :type channel:
        :param zeroAdjustValue:
        :type zeroAdjustValue:
        """
        return self._dllwrap.ConfigureProbeZeroAdjustValue(self._vi, channel, zeroAdjustValue)

    def ProbeSaveToProbe(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.ProbeSaveToProbe(self._vi, channel)

    def ProbeSetOffsetToMean(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.ProbeSetOffsetToMean(self._vi, channel)

    def ProbeDegauss(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.ProbeDegauss(self._vi, channel)

    def QueryProbeAttributes(self, channel, bufferSize):
        """

        :param channel:
        :type channel:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryProbeAttributes(self._vi, channel, bufferSize)

    def ConfigureProbeFirmwarePath(self, channel, firmwarePath):
        """

        :param channel:
        :type channel:
        :param firmwarePath:
        :type firmwarePath:
        """
        return self._dllwrap.ConfigureProbeFirmwarePath(self._vi, channel, firmwarePath)

    def UpdateProbeFirmware(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.UpdateProbeFirmware(self._vi, channel)

    def QueryProbeFirmwareUpdateStatus(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.QueryProbeFirmwareUpdateStatus(self._vi, channel)

    def ProbeSelftest(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.ProbeSelftest(self._vi, channel)

    def QueryProbeSelftestResult(self, channel, bufferSize):
        """

        :param channel:
        :type channel:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryProbeSelftestResult(self._vi, channel, bufferSize)

    def QueryProbeSelftestStatus(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.QueryProbeSelftestStatus(self._vi, channel)

    def ConfigureProbeDetection(self, channel, mode):
        """

        :param channel:
        :type channel:
        :param mode:
        :type mode:
        """
        return self._dllwrap.ConfigureProbeDetection(self._vi, channel, mode)

    def ConfigureProbeAttenuation(self, channel, verticalUnit, attenuation):
        """

        :param channel:
        :type channel:
        :param verticalUnit:
        :type verticalUnit:
        :param attenuation:
        :type attenuation:
        """
        return self._dllwrap.ConfigureProbeAttenuation(self._vi, channel, verticalUnit, attenuation)

    def ConfigureProbeGain(self, channel, gain):
        """

        :param channel:
        :type channel:
        :param gain:
        :type gain:
        """
        return self._dllwrap.ConfigureProbeGain(self._vi, channel, gain)

    def QueryDetectedProbeGain(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.QueryDetectedProbeGain(self._vi, channel)

    def ConfigureCurrentProbePredefined(self, channel, predefinedProbe):
        """

        :param channel:
        :type channel:
        :param predefinedProbe:
        :type predefinedProbe:
        """
        return self._dllwrap.ConfigureCurrentProbePredefined(self._vi, channel, predefinedProbe)

    def ConfigureProbePredefinedTektronicsProbe(self, channel, predefinedTektronicsProbe):
        """

        :param channel:
        :type channel:
        :param predefinedTektronicsProbe:
        :type predefinedTektronicsProbe:
        """
        return self._dllwrap.ConfigureProbePredefinedTektronicsProbe(self._vi, channel, predefinedTektronicsProbe)

    def ConfigureProbeDMOffset(self, channel, DMOffset):
        """

        :param channel:
        :type channel:
        :param DMOffset:
        :type DMOffset:
        """
        return self._dllwrap.ConfigureProbeDMOffset(self._vi, channel, DMOffset)

    def ConfigureProbeCMOffset(self, channel, CMOffset):
        """

        :param channel:
        :type channel:
        :param CMOffset:
        :type CMOffset:
        """
        return self._dllwrap.ConfigureProbeCMOffset(self._vi, channel, CMOffset)

    def ConfigureProbeNegativeOffset(self, channel, negativeOffset):
        """

        :param channel:
        :type channel:
        :param negativeOffset:
        :type negativeOffset:
        """
        return self._dllwrap.ConfigureProbeNegativeOffset(self._vi, channel, negativeOffset)

    def ConfigureProbePositiveOffset(self, channel, positiveOffset):
        """

        :param channel:
        :type channel:
        :param positiveOffset:
        :type positiveOffset:
        """
        return self._dllwrap.ConfigureProbePositiveOffset(self._vi, channel, positiveOffset)

    def ConfigureProbeMode(self, channel, probeMode):
        """

        :param channel:
        :type channel:
        :param probeMode:
        :type probeMode:
        """
        return self._dllwrap.ConfigureProbeMode(self._vi, channel, probeMode)

    def ConfigureProbeAttenuatorRTZA15(self, channel, attenuatorRTZA15):
        """

        :param channel:
        :type channel:
        :param attenuatorRTZA15:
        :type attenuatorRTZA15:
        """
        return self._dllwrap.ConfigureProbeAttenuatorRTZA15(self._vi, channel, attenuatorRTZA15)

    def ConfigureProbeRTZHD(self, channel, voltageRange, bandwidthLimit, overrangeBuzzer):
        """

        :param channel:
        :type channel:
        :param voltageRange:
        :type voltageRange:
        :param bandwidthLimit:
        :type bandwidthLimit:
        :param overrangeBuzzer:
        :type overrangeBuzzer:
        """
        return self._dllwrap.ConfigureProbeRTZHD(self._vi, channel, voltageRange, bandwidthLimit, overrangeBuzzer)

    def QueryProbeAdapterType(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.QueryProbeAdapterType(self._vi, channel)

    def QueryProbeConverterType(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.QueryProbeConverterType(self._vi, channel)

    def ConfigureProbeRTZ1MBandwidthLimit(self, channel, bandwidthLimit):
        """

        :param channel:
        :type channel:
        :param bandwidthLimit:
        :type bandwidthLimit:
        """
        return self._dllwrap.ConfigureProbeRTZ1MBandwidthLimit(self._vi, channel, bandwidthLimit)

    def ProbeRTZ1MSelfAlign(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.ProbeRTZ1MSelfAlign(self._vi, channel)

    def ConfigureProbeDeembeddingSelectTipModule(self, channel, tipModule, ZMA30Submodule, ZMA40Submodule):
        """

        :param channel:
        :type channel:
        :param tipModule:
        :type tipModule:
        :param ZMA30Submodule:
        :type ZMA30Submodule:
        :param ZMA40Submodule:
        :type ZMA40Submodule:
        """
        return self._dllwrap.ConfigureProbeDeembeddingSelectTipModule(
            self._vi, channel, tipModule, ZMA30Submodule, ZMA40Submodule
        )

    def ConfigureProbeDeembeddingCustomTipFile(self, channel, deembeddingCustomTipFile):
        """

        :param channel:
        :type channel:
        :param deembeddingCustomTipFile:
        :type deembeddingCustomTipFile:
        """
        return self._dllwrap.ConfigureProbeDeembeddingCustomTipFile(self._vi, channel, deembeddingCustomTipFile)

    def ConfigureProbeDeembeddingMode(self, channel, mode, bandwidth, measurementMode):
        """

        :param channel:
        :type channel:
        :param mode:
        :type mode:
        :param bandwidth:
        :type bandwidth:
        :param measurementMode:
        :type measurementMode:
        """
        return self._dllwrap.ConfigureProbeDeembeddingMode(self._vi, channel, mode, bandwidth, measurementMode)

    def ConfigureProbeDeembeddingInputMode(self, channel, deembeddingInputMode):
        """

        :param channel:
        :type channel:
        :param deembeddingInputMode:
        :type deembeddingInputMode:
        """
        return self._dllwrap.ConfigureProbeDeembeddingInputMode(self._vi, channel, deembeddingInputMode)

    def ConfigureProbeDeembeddingSourceImpedance(
        self, channel, removeProbeLoading, impedanceType, impedance, sParameterFile
    ):
        """

        :param channel:
        :type channel:
        :param removeProbeLoading:
        :type removeProbeLoading:
        :param impedanceType:
        :type impedanceType:
        :param impedance:
        :type impedance:
        :param sParameterFile:
        :type sParameterFile:
        """
        return self._dllwrap.ConfigureProbeDeembeddingSourceImpedance(
            self._vi,
            channel,
            removeProbeLoading,
            impedanceType,
            impedance,
            sParameterFile,
        )

    def ConfigureProbeMeter(self, channel, probeMeter, visibility, measureVoltage):
        """

        :param channel:
        :type channel:
        :param probeMeter:
        :type probeMeter:
        :param visibility:
        :type visibility:
        :param measureVoltage:
        :type measureVoltage:
        """
        return self._dllwrap.ConfigureProbeMeter(self._vi, channel, probeMeter, visibility, measureVoltage)

    def QueryProbeMeterResults(self, channel, resultType):
        """

        :param channel:
        :type channel:
        :param resultType:
        :type resultType:
        """
        return self._dllwrap.QueryProbeMeterResults(self._vi, channel, resultType)

    def ConfigureTriggerInputProbe(self, channel, channelVisible, offset):
        """

        :param channel:
        :type channel:
        :param channelVisible:
        :type channelVisible:
        :param offset:
        :type offset:
        """
        return self._dllwrap.ConfigureTriggerInputProbe(self._vi, channel, channelVisible, offset)

    def QueryTriggerInputProbeState(self):
        """"""
        return self._dllwrap.QueryTriggerInputProbeState(self._vi)

    def QueryTriggerInputProbeCharacteristics(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryTriggerInputProbeCharacteristics(self._vi, bufferSize)

    def ConfigureTriggerInputProbeMicroButtonAction(self, microButtonAction):
        """

        :param microButtonAction:
        :type microButtonAction:
        """
        return self._dllwrap.ConfigureTriggerInputProbeMicroButtonAction(self._vi, microButtonAction)

    def TriggerInputProbeAutoZero(self):
        """"""
        return self._dllwrap.TriggerInputProbeAutoZero(self._vi)

    def ConfigureTriggerInputProbeCMOffset(self, CMOffset):
        """

        :param CMOffset:
        :type CMOffset:
        """
        return self._dllwrap.ConfigureTriggerInputProbeCMOffset(self._vi, CMOffset)

    def ConfigureTriggerInputProbeAttenuatorRTZA15(self, attenuatorRTZA15):
        """

        :param attenuatorRTZA15:
        :type attenuatorRTZA15:
        """
        return self._dllwrap.ConfigureTriggerInputProbeAttenuatorRTZA15(self._vi, attenuatorRTZA15)

    def TriggerInputProbeSetOffsetToMean(self):
        """"""
        return self._dllwrap.TriggerInputProbeSetOffsetToMean(self._vi)

    def QueryTriggerInputProbeAttributes(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryTriggerInputProbeAttributes(self._vi, bufferSize)

    def ConfigureTriggerInputProbeFirmwarePath(self, firmwarePath):
        """

        :param firmwarePath:
        :type firmwarePath:
        """
        return self._dllwrap.ConfigureTriggerInputProbeFirmwarePath(self._vi, firmwarePath)

    def UpdateTriggerInputProbeFirmware(self):
        """"""
        return self._dllwrap.UpdateTriggerInputProbeFirmware(self._vi)

    def QueryTriggerInputProbeFirmwareUpdateStatus(self):
        """"""
        return self._dllwrap.QueryTriggerInputProbeFirmwareUpdateStatus(self._vi)

    def TriggerInputProbeSelftest(self):
        """"""
        return self._dllwrap.TriggerInputProbeSelftest(self._vi)

    def QueryTriggerInputProbeSelftestResult(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryTriggerInputProbeSelftestResult(self._vi, bufferSize)

    def QueryTriggerInputProbeSelftestStatus(self):
        """"""
        return self._dllwrap.QueryTriggerInputProbeSelftestStatus(self._vi)

    def ConfigureTriggerInputProbeDetection(self, mode):
        """

        :param mode:
        :type mode:
        """
        return self._dllwrap.ConfigureTriggerInputProbeDetection(self._vi, mode)

    def ConfigureTriggerInputProbeAttenuation(self, verticalUnit, attenuation):
        """

        :param verticalUnit:
        :type verticalUnit:
        :param attenuation:
        :type attenuation:
        """
        return self._dllwrap.ConfigureTriggerInputProbeAttenuation(self._vi, verticalUnit, attenuation)

    def ConfigureTriggerInputProbeGain(self, gain):
        """

        :param gain:
        :type gain:
        """
        return self._dllwrap.ConfigureTriggerInputProbeGain(self._vi, gain)

    def QueryDetectedTriggerInputProbeGain(self):
        """"""
        return self._dllwrap.QueryDetectedTriggerInputProbeGain(self._vi)

    def ConfigureCurrentTriggerInputProbePredefined(self, predefinedProbe):
        """

        :param predefinedProbe:
        :type predefinedProbe:
        """
        return self._dllwrap.ConfigureCurrentTriggerInputProbePredefined(self._vi, predefinedProbe)

    def ConfigureTriggerInputProbeACCoupling(self, ACCoupling):
        """

        :param ACCoupling:
        :type ACCoupling:
        """
        return self._dllwrap.ConfigureTriggerInputProbeACCoupling(self._vi, ACCoupling)

    def TriggerInputProbeDegauss(self):
        """"""
        return self._dllwrap.TriggerInputProbeDegauss(self._vi)

    def ConfigureTriggerInputProbeMode(self, probeMode):
        """

        :param probeMode:
        :type probeMode:
        """
        return self._dllwrap.ConfigureTriggerInputProbeMode(self._vi, probeMode)

    def ConfigureTriggerInputProbeRTZHD(self, bandwidthLimit, overrangeBuzzer):
        """

        :param bandwidthLimit:
        :type bandwidthLimit:
        :param overrangeBuzzer:
        :type overrangeBuzzer:
        """
        return self._dllwrap.ConfigureTriggerInputProbeRTZHD(self._vi, bandwidthLimit, overrangeBuzzer)

    def ConfigureTriggerInputProbeMeter(self, probeMeter, visibility, measureVoltage):
        """

        :param probeMeter:
        :type probeMeter:
        :param visibility:
        :type visibility:
        :param measureVoltage:
        :type measureVoltage:
        """
        return self._dllwrap.ConfigureTriggerInputProbeMeter(self._vi, probeMeter, visibility, measureVoltage)

    def QueryTriggerInputProbeMeterResults(self, resultType):
        """

        :param resultType:
        :type resultType:
        """
        return self._dllwrap.QueryTriggerInputProbeMeterResults(self._vi, resultType)

    def ConfigureProbeTerminationVoltageMode(self, channel, mode):
        """

        :param channel:
        :type channel:
        :param mode:
        :type mode:
        """
        return self._dllwrap.ConfigureProbeTerminationVoltageMode(self._vi, channel, mode)

    def ConfigureProbeTerminationVoltage(self, channel, state, adjustment):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        :param adjustment:
        :type adjustment:
        """
        return self._dllwrap.ConfigureProbeTerminationVoltage(self._vi, channel, state, adjustment)

    def QueryProbeTerminationVoltageMeasure(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.QueryProbeTerminationVoltageMeasure(self._vi, channel)

    def ConfigureZVCProbe(self, bandwidth, decimationMode):
        """

        :param bandwidth:
        :type bandwidth:
        :param decimationMode:
        :type decimationMode:
        """
        return self._dllwrap.ConfigureZVCProbe(self._vi, bandwidth, decimationMode)

    def QueryZVCProbeInformations(self, multiChannel, bufferSize):
        """

        :param multiChannel:
        :type multiChannel:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryZVCProbeInformations(self._vi, multiChannel, bufferSize)

    def ConfigureZVCEnabled(self, multiChannel, probe, probeParameter, enabled):
        """

        :param multiChannel:
        :type multiChannel:
        :param probe:
        :type probe:
        :param probeParameter:
        :type probeParameter:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureZVCEnabled(self._vi, multiChannel, probe, probeParameter, enabled)

    def QueryZVCBandwidth(self, multiChannel, probe, probeParameter):
        """

        :param multiChannel:
        :type multiChannel:
        :param probe:
        :type probe:
        :param probeParameter:
        :type probeParameter:
        """
        return self._dllwrap.QueryZVCBandwidth(self._vi, multiChannel, probe, probeParameter)

    def ConfigureZVCResolutionCoupled(self, coupled):
        """

        :param coupled:
        :type coupled:
        """
        return self._dllwrap.ConfigureZVCResolutionCoupled(self._vi, coupled)

    def ConfigureZVCImpedance(self, multiChannel, probe, probeParameter, impedance):
        """

        :param multiChannel:
        :type multiChannel:
        :param probe:
        :type probe:
        :param probeParameter:
        :type probeParameter:
        :param impedance:
        :type impedance:
        """
        return self._dllwrap.ConfigureZVCImpedance(self._vi, multiChannel, probe, probeParameter, impedance)

    def ConfigureZVCOffsets(self, multiChannel, probe, probeParameter, offset, deskew):
        """

        :param multiChannel:
        :type multiChannel:
        :param probe:
        :type probe:
        :param probeParameter:
        :type probeParameter:
        :param offset:
        :type offset:
        :param deskew:
        :type deskew:
        """
        return self._dllwrap.ConfigureZVCOffsets(self._vi, multiChannel, probe, probeParameter, offset, deskew)

    def ConfigureZVCVertical(self, multiChannel, probe, probeParameter, position, scale):
        """

        :param multiChannel:
        :type multiChannel:
        :param probe:
        :type probe:
        :param probeParameter:
        :type probeParameter:
        :param position:
        :type position:
        :param scale:
        :type scale:
        """
        return self._dllwrap.ConfigureZVCVertical(self._vi, multiChannel, probe, probeParameter, position, scale)

    def ConfigureZVCResetOverload(self, multiChannel, probe, probeParameter, resetOverload):
        """

        :param multiChannel:
        :type multiChannel:
        :param probe:
        :type probe:
        :param probeParameter:
        :type probeParameter:
        :param resetOverload:
        :type resetOverload:
        """
        return self._dllwrap.ConfigureZVCResetOverload(self._vi, multiChannel, probe, probeParameter, resetOverload)

    def QueryZVCOverload(self, multiChannel, probe, probeParameter):
        """

        :param multiChannel:
        :type multiChannel:
        :param probe:
        :type probe:
        :param probeParameter:
        :type probeParameter:
        """
        return self._dllwrap.QueryZVCOverload(self._vi, multiChannel, probe, probeParameter)

    def ConfigureZVCShuntMode(self, multiChannel, currentChannel, mode):
        """

        :param multiChannel:
        :type multiChannel:
        :param currentChannel:
        :type currentChannel:
        :param mode:
        :type mode:
        """
        return self._dllwrap.ConfigureZVCShuntMode(self._vi, multiChannel, currentChannel, mode)

    def ConfigureZVCShuntExternal(self, multiChannel, currentChannel, maximumVoltage, externalValue):
        """

        :param multiChannel:
        :type multiChannel:
        :param currentChannel:
        :type currentChannel:
        :param maximumVoltage:
        :type maximumVoltage:
        :param externalValue:
        :type externalValue:
        """
        return self._dllwrap.ConfigureZVCShuntExternal(
            self._vi, multiChannel, currentChannel, maximumVoltage, externalValue
        )

    def ConfigureZVCShuntInternalMaximum(self, multiChannel, currentChannel, maximumCurrent):
        """

        :param multiChannel:
        :type multiChannel:
        :param currentChannel:
        :type currentChannel:
        :param maximumCurrent:
        :type maximumCurrent:
        """
        return self._dllwrap.ConfigureZVCShuntInternalMaximum(self._vi, multiChannel, currentChannel, maximumCurrent)

    def ConfigureZVCShuntMaximumCurrent(self, multiChannel, currentChannel):
        """

        :param multiChannel:
        :type multiChannel:
        :param currentChannel:
        :type currentChannel:
        """
        return self._dllwrap.ConfigureZVCShuntMaximumCurrent(self._vi, multiChannel, currentChannel)

    def FetchZVCWaveformHeader(self, waveformSource):
        """

        :param waveformSource:
        :type waveformSource:
        """
        return self._dllwrap.FetchZVCWaveformHeader(self._vi, waveformSource)

    def FetchZVCWaveform(self, waveformSource, bufferSize):
        """

        :param waveformSource:
        :type waveformSource:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.FetchZVCWaveform(self._vi, waveformSource, bufferSize)

    def ConfigureCalibrationSourceState(self, calibrationSourceState):
        """

        :param calibrationSourceState:
        :type calibrationSourceState:
        """
        return self._dllwrap.ConfigureCalibrationSourceState(self._vi, calibrationSourceState)

    def ConfigureCalibration(self, sourceFrequency, operatingMode, destination):
        """

        :param sourceFrequency:
        :type sourceFrequency:
        :param operatingMode:
        :type operatingMode:
        :param destination:
        :type destination:
        """
        return self._dllwrap.ConfigureCalibration(self._vi, sourceFrequency, operatingMode, destination)

    def QueryCalibrationResult(self):
        """"""
        return self._dllwrap.QueryCalibrationResult(self._vi)

    def ConfigureReferenceOscillator(self, useExternalReference, externalReference):
        """

        :param useExternalReference:
        :type useExternalReference:
        :param externalReference:
        :type externalReference:
        """
        return self._dllwrap.ConfigureReferenceOscillator(self._vi, useExternalReference, externalReference)

    def ConfigureSkew(self, channel, useSkewOffset, skewOffset):
        """

        :param channel:
        :type channel:
        :param useSkewOffset:
        :type useSkewOffset:
        :param skewOffset:
        :type skewOffset:
        """
        return self._dllwrap.ConfigureSkew(self._vi, channel, useSkewOffset, skewOffset)

    def ConfigureProbeSkewOffset(self, probeSkewOffset):
        """

        :param probeSkewOffset:
        :type probeSkewOffset:
        """
        return self._dllwrap.ConfigureProbeSkewOffset(self._vi, probeSkewOffset)

    def ConfigureSkewExtendedRange(self, channel, extendedRange):
        """

        :param channel:
        :type channel:
        :param extendedRange:
        :type extendedRange:
        """
        return self._dllwrap.ConfigureSkewExtendedRange(self._vi, channel, extendedRange)

    def ConfigureHighDefinition(self, state, bandwidth):
        """

        :param state:
        :type state:
        :param bandwidth:
        :type bandwidth:
        """
        return self._dllwrap.ConfigureHighDefinition(self._vi, state, bandwidth)

    def QueryHighDefinitionResolution(self):
        """"""
        return self._dllwrap.QueryHighDefinitionResolution(self._vi)

    def ConfigureTrigger(self, trigger, triggerType):
        """

        :param trigger:
        :type trigger:
        :param triggerType:
        :type triggerType:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, trigger, triggerType)

    def ConfigureSerialBusSource(self, trigger, serialBusSource):
        """

        :param trigger:
        :type trigger:
        :param serialBusSource:
        :type serialBusSource:
        """
        return self._dllwrap.ConfigureSerialBusSource(self._vi, trigger, serialBusSource)

    def ConfigureTriggerCoupling(self, trigger, eventCoupling, sourceCoupling):
        """

        :param trigger:
        :type trigger:
        :param eventCoupling:
        :type eventCoupling:
        :param sourceCoupling:
        :type sourceCoupling:
        """
        return self._dllwrap.ConfigureTriggerCoupling(self._vi, trigger, eventCoupling, sourceCoupling)

    def ConfigureTriggerModifier(self, trigger, triggerModifier):
        """

        :param trigger:
        :type trigger:
        :param triggerModifier:
        :type triggerModifier:
        """
        return self._dllwrap.ConfigureTriggerModifier(self._vi, trigger, triggerModifier)

    def TriggerLevelAutoFind(self, trigger):
        """

        :param trigger:
        :type trigger:
        """
        return self._dllwrap.TriggerLevelAutoFind(self._vi, trigger)

    def ConfigureTriggerChannelLevel(self, trigger, triggerSource, triggerLevel):
        """

        :param trigger:
        :type trigger:
        :param triggerSource:
        :type triggerSource:
        :param triggerLevel:
        :type triggerLevel:
        """
        return self._dllwrap.ConfigureTriggerChannelLevel(self._vi, trigger, triggerSource, triggerLevel)

    def ConfigureEdgeTriggerSource(self, trigger, triggerSource, triggerLevel, triggerSlope):
        """

        :param trigger:
        :type trigger:
        :param triggerSource:
        :type triggerSource:
        :param triggerLevel:
        :type triggerLevel:
        :param triggerSlope:
        :type triggerSlope:
        """
        return self._dllwrap.ConfigureEdgeTriggerSource(self._vi, trigger, triggerSource, triggerLevel, triggerSlope)

    def ConfigureEdgeExternalTrigger(self, coupling, filter, cutOffFrequency):
        """

        :param coupling:
        :type coupling:
        :param filter:
        :type filter:
        :param cutOffFrequency:
        :type cutOffFrequency:
        """
        return self._dllwrap.ConfigureEdgeExternalTrigger(self._vi, coupling, filter, cutOffFrequency)

    def ConfigureEdgeExternalTriggerGround(self, connectToGround):
        """

        :param connectToGround:
        :type connectToGround:
        """
        return self._dllwrap.ConfigureEdgeExternalTriggerGround(self._vi, connectToGround)

    def ConfigureEdgeExternalTriggerNoiseReject(self, noiseReject):
        """

        :param noiseReject:
        :type noiseReject:
        """
        return self._dllwrap.ConfigureEdgeExternalTriggerNoiseReject(self._vi, noiseReject)

    def ConfigureRuntTriggerSource(self, trigger, triggerSource, runtLowThreshold, runtHighThreshold, runtPolarity):
        """

        :param trigger:
        :type trigger:
        :param triggerSource:
        :type triggerSource:
        :param runtLowThreshold:
        :type runtLowThreshold:
        :param runtHighThreshold:
        :type runtHighThreshold:
        :param runtPolarity:
        :type runtPolarity:
        """
        return self._dllwrap.ConfigureRuntTriggerSource(
            self._vi,
            trigger,
            triggerSource,
            runtLowThreshold,
            runtHighThreshold,
            runtPolarity,
        )

    def ConfigureRuntTriggerRange(self, trigger, runtWidth, runtDelta, runtCondition):
        """

        :param trigger:
        :type trigger:
        :param runtWidth:
        :type runtWidth:
        :param runtDelta:
        :type runtDelta:
        :param runtCondition:
        :type runtCondition:
        """
        return self._dllwrap.ConfigureRuntTriggerRange(self._vi, trigger, runtWidth, runtDelta, runtCondition)

    def ConfigureGlitchTriggerSource(
        self,
        trigger,
        triggerSource,
        triggerLevel,
        glitchWidth,
        glitchPolarity,
        glitchCondition,
    ):
        """

        :param trigger:
        :type trigger:
        :param triggerSource:
        :type triggerSource:
        :param triggerLevel:
        :type triggerLevel:
        :param glitchWidth:
        :type glitchWidth:
        :param glitchPolarity:
        :type glitchPolarity:
        :param glitchCondition:
        :type glitchCondition:
        """
        return self._dllwrap.ConfigureGlitchTriggerSource(
            self._vi,
            trigger,
            triggerSource,
            triggerLevel,
            glitchWidth,
            glitchPolarity,
            glitchCondition,
        )

    def ConfigureWidthTriggerSource(
        self,
        trigger,
        triggerSource,
        triggerLevel,
        width,
        widthDelta,
        widthPolarity,
        widthCondition,
    ):
        """

        :param trigger:
        :type trigger:
        :param triggerSource:
        :type triggerSource:
        :param triggerLevel:
        :type triggerLevel:
        :param width:
        :type width:
        :param widthDelta:
        :type widthDelta:
        :param widthPolarity:
        :type widthPolarity:
        :param widthCondition:
        :type widthCondition:
        """
        return self._dllwrap.ConfigureWidthTriggerSource(
            self._vi,
            trigger,
            triggerSource,
            triggerLevel,
            width,
            widthDelta,
            widthPolarity,
            widthCondition,
        )

    def ConfigureWindowTriggerSource(
        self,
        trigger,
        triggerSource,
        windowLowerLimit,
        windowUpperLimit,
        windowWidth,
        windowDelta,
        windowCondition,
    ):
        """

        :param trigger:
        :type trigger:
        :param triggerSource:
        :type triggerSource:
        :param windowLowerLimit:
        :type windowLowerLimit:
        :param windowUpperLimit:
        :type windowUpperLimit:
        :param windowWidth:
        :type windowWidth:
        :param windowDelta:
        :type windowDelta:
        :param windowCondition:
        :type windowCondition:
        """
        return self._dllwrap.ConfigureWindowTriggerSource(
            self._vi,
            trigger,
            triggerSource,
            windowLowerLimit,
            windowUpperLimit,
            windowWidth,
            windowDelta,
            windowCondition,
        )

    def ConfigureWindowTriggerTimeCondition(self, trigger, timeCondition):
        """

        :param trigger:
        :type trigger:
        :param timeCondition:
        :type timeCondition:
        """
        return self._dllwrap.ConfigureWindowTriggerTimeCondition(self._vi, trigger, timeCondition)

    def ConfigureTimeoutTriggerSource(self, trigger, triggerSource, triggerLevel, timeoutValue, timeoutCondition):
        """

        :param trigger:
        :type trigger:
        :param triggerSource:
        :type triggerSource:
        :param triggerLevel:
        :type triggerLevel:
        :param timeoutValue:
        :type timeoutValue:
        :param timeoutCondition:
        :type timeoutCondition:
        """
        return self._dllwrap.ConfigureTimeoutTriggerSource(
            self._vi, trigger, triggerSource, triggerLevel, timeoutValue, timeoutCondition
        )

    def ConfigureIntervalTriggerSource(
        self,
        trigger,
        triggerSource,
        triggerLevel,
        intervalWidth,
        intervalDelta,
        intervalPolarity,
        intervalCondition,
    ):
        """

        :param trigger:
        :type trigger:
        :param triggerSource:
        :type triggerSource:
        :param triggerLevel:
        :type triggerLevel:
        :param intervalWidth:
        :type intervalWidth:
        :param intervalDelta:
        :type intervalDelta:
        :param intervalPolarity:
        :type intervalPolarity:
        :param intervalCondition:
        :type intervalCondition:
        """
        return self._dllwrap.ConfigureIntervalTriggerSource(
            self._vi,
            trigger,
            triggerSource,
            triggerLevel,
            intervalWidth,
            intervalDelta,
            intervalPolarity,
            intervalCondition,
        )

    def ConfigureSlewRateTriggerSource(
        self,
        trigger,
        triggerSource,
        slewRateLowerLimit,
        slewRateUpperLimit,
        slewRatePolarity,
        slewRateCondition,
    ):
        """

        :param trigger:
        :type trigger:
        :param triggerSource:
        :type triggerSource:
        :param slewRateLowerLimit:
        :type slewRateLowerLimit:
        :param slewRateUpperLimit:
        :type slewRateUpperLimit:
        :param slewRatePolarity:
        :type slewRatePolarity:
        :param slewRateCondition:
        :type slewRateCondition:
        """
        return self._dllwrap.ConfigureSlewRateTriggerSource(
            self._vi,
            trigger,
            triggerSource,
            slewRateLowerLimit,
            slewRateUpperLimit,
            slewRatePolarity,
            slewRateCondition,
        )

    def ConfigureSlewRateTriggerRange(self, trigger, slewRate, slewRateDelta):
        """

        :param trigger:
        :type trigger:
        :param slewRate:
        :type slewRate:
        :param slewRateDelta:
        :type slewRateDelta:
        """
        return self._dllwrap.ConfigureSlewRateTriggerRange(self._vi, trigger, slewRate, slewRateDelta)

    def ConfigureData2ClockTriggerSource(
        self,
        triggerSource,
        dataLevel,
        clockSource,
        clockLevel,
        holdTime,
        setupTime,
        data2ClockPolarity,
    ):
        """

        :param triggerSource:
        :type triggerSource:
        :param dataLevel:
        :type dataLevel:
        :param clockSource:
        :type clockSource:
        :param clockLevel:
        :type clockLevel:
        :param holdTime:
        :type holdTime:
        :param setupTime:
        :type setupTime:
        :param data2ClockPolarity:
        :type data2ClockPolarity:
        """
        return self._dllwrap.ConfigureData2ClockTriggerSource(
            self._vi,
            triggerSource,
            dataLevel,
            clockSource,
            clockLevel,
            holdTime,
            setupTime,
            data2ClockPolarity,
        )

    def ConfigurePatternTriggerSource(
        self,
        patternMode,
        timeoutCondition,
        timeout,
        patternWidth,
        patternDelta,
        patternCondition,
    ):
        """

        :param patternMode:
        :type patternMode:
        :param timeoutCondition:
        :type timeoutCondition:
        :param timeout:
        :type timeout:
        :param patternWidth:
        :type patternWidth:
        :param patternDelta:
        :type patternDelta:
        :param patternCondition:
        :type patternCondition:
        """
        return self._dllwrap.ConfigurePatternTriggerSource(
            self._vi,
            patternMode,
            timeoutCondition,
            timeout,
            patternWidth,
            patternDelta,
            patternCondition,
        )

    def ConfigureSerialPatternTriggerSource(
        self, triggerSource, dataLevel, clockSource, clockLevel, pattern, patternPolarity
    ):
        """

        :param triggerSource:
        :type triggerSource:
        :param dataLevel:
        :type dataLevel:
        :param clockSource:
        :type clockSource:
        :param clockLevel:
        :type clockLevel:
        :param pattern:
        :type pattern:
        :param patternPolarity:
        :type patternPolarity:
        """
        return self._dllwrap.ConfigureSerialPatternTriggerSource(
            self._vi,
            triggerSource,
            dataLevel,
            clockSource,
            clockLevel,
            pattern,
            patternPolarity,
        )

    def ConfigureSerialPatternTriggerType(self, patternType):
        """

        :param patternType:
        :type patternType:
        """
        return self._dllwrap.ConfigureSerialPatternTriggerType(self._vi, patternType)

    def ConfigureSerialPatternSingleBitPattern(self, pattern, patternLength):
        """

        :param pattern:
        :type pattern:
        :param patternLength:
        :type patternLength:
        """
        return self._dllwrap.ConfigureSerialPatternSingleBitPattern(self._vi, pattern, patternLength)

    def ConfigureSerialPatternDualBitPattern(self, patternA, patternLengthA, patternB, patternLengthB):
        """

        :param patternA:
        :type patternA:
        :param patternLengthA:
        :type patternLengthA:
        :param patternB:
        :type patternB:
        :param patternLengthB:
        :type patternLengthB:
        """
        return self._dllwrap.ConfigureSerialPatternDualBitPattern(
            self._vi, patternA, patternLengthA, patternB, patternLengthB
        )

    def ConfigureSerialPatternComplexWordAlignment(
        self,
        alignmentType,
        alignmentLength,
        alignmentPattern,
        alignmentTimeout,
        idleRange,
        patternLogic,
        bitOrder,
    ):
        """

        :param alignmentType:
        :type alignmentType:
        :param alignmentLength:
        :type alignmentLength:
        :param alignmentPattern:
        :type alignmentPattern:
        :param alignmentTimeout:
        :type alignmentTimeout:
        :param idleRange:
        :type idleRange:
        :param patternLogic:
        :type patternLogic:
        :param bitOrder:
        :type bitOrder:
        """
        return self._dllwrap.ConfigureSerialPatternComplexWordAlignment(
            self._vi,
            alignmentType,
            alignmentLength,
            alignmentPattern,
            alignmentTimeout,
            idleRange,
            patternLogic,
            bitOrder,
        )

    def ConfigureSerialPatternComplexWordCondition(
        self,
        complexCondition,
        conditionEnabled,
        bitOffset,
        patternLength,
        searchRange,
        condition,
        pattern,
        patternRangeEnd,
    ):
        """

        :param complexCondition:
        :type complexCondition:
        :param conditionEnabled:
        :type conditionEnabled:
        :param bitOffset:
        :type bitOffset:
        :param patternLength:
        :type patternLength:
        :param searchRange:
        :type searchRange:
        :param condition:
        :type condition:
        :param pattern:
        :type pattern:
        :param patternRangeEnd:
        :type patternRangeEnd:
        """
        return self._dllwrap.ConfigureSerialPatternComplexWordCondition(
            self._vi,
            complexCondition,
            conditionEnabled,
            bitOffset,
            patternLength,
            searchRange,
            condition,
            pattern,
            patternRangeEnd,
        )

    def ConfigureSerialPatternPRBSError(self, bitErrorRate, nominalBitRate, sequence):
        """

        :param bitErrorRate:
        :type bitErrorRate:
        :param nominalBitRate:
        :type nominalBitRate:
        :param sequence:
        :type sequence:
        """
        return self._dllwrap.ConfigureSerialPatternPRBSError(self._vi, bitErrorRate, nominalBitRate, sequence)

    def ConfigureSerialPatternEbTb(self, alignmentSymbol, scrambling, disparityErrorEnabled, symbolErrorEnabled):
        """

        :param alignmentSymbol:
        :type alignmentSymbol:
        :param scrambling:
        :type scrambling:
        :param disparityErrorEnabled:
        :type disparityErrorEnabled:
        :param symbolErrorEnabled:
        :type symbolErrorEnabled:
        """
        return self._dllwrap.ConfigureSerialPatternEbTb(
            self._vi,
            alignmentSymbol,
            scrambling,
            disparityErrorEnabled,
            symbolErrorEnabled,
        )

    def QuerySerialPatternEbTbRowCount(self):
        """"""
        return self._dllwrap.QuerySerialPatternEbTbRowCount(self._vi)

    def SerialPatternEbTbAppendSymbol(self, kOrDSymbol, ebBit):
        """

        :param kOrDSymbol:
        :type kOrDSymbol:
        :param ebBit:
        :type ebBit:
        """
        return self._dllwrap.SerialPatternEbTbAppendSymbol(self._vi, kOrDSymbol, ebBit)

    def SerialPatternEbTbModifySymbol(self, tableRow, kOrDSymbol, ebBit):
        """

        :param tableRow:
        :type tableRow:
        :param kOrDSymbol:
        :type kOrDSymbol:
        :param ebBit:
        :type ebBit:
        """
        return self._dllwrap.SerialPatternEbTbModifySymbol(self._vi, tableRow, kOrDSymbol, ebBit)

    def QuerySerialPatternEbTbRunningDisparity(self, tableRow):
        """

        :param tableRow:
        :type tableRow:
        """
        return self._dllwrap.QuerySerialPatternEbTbRunningDisparity(self._vi, tableRow)

    def SerialPatternEbTbClearTable(self):
        """"""
        return self._dllwrap.SerialPatternEbTbClearTable(self._vi)

    def ConfigureSerialPatternEbTbFrameID(self, ebTbFrameID):
        """

        :param ebTbFrameID:
        :type ebTbFrameID:
        """
        return self._dllwrap.ConfigureSerialPatternEbTbFrameID(self._vi, ebTbFrameID)

    def ConfigureSerialPatternI32B(self, alignmentPattern, skipStart, skipEnd, skipBytes, type, pattern):
        """

        :param alignmentPattern:
        :type alignmentPattern:
        :param skipStart:
        :type skipStart:
        :param skipEnd:
        :type skipEnd:
        :param skipBytes:
        :type skipBytes:
        :param type:
        :type type:
        :param pattern:
        :type pattern:
        """
        return self._dllwrap.ConfigureSerialPatternI32B(
            self._vi, alignmentPattern, skipStart, skipEnd, skipBytes, type, pattern
        )

    def ConfigureSerialBusTriggerSource(self, serialBus, protocol):
        """

        :param serialBus:
        :type serialBus:
        :param protocol:
        :type protocol:
        """
        return self._dllwrap.ConfigureSerialBusTriggerSource(self._vi, serialBus, protocol)

    def ConfigureLineTriggerSlope(self, trigger, triggerSlope):
        """

        :param trigger:
        :type trigger:
        :param triggerSlope:
        :type triggerSlope:
        """
        return self._dllwrap.ConfigureLineTriggerSlope(self._vi, trigger, triggerSlope)

    def ConfigureNFCTrigger(self, triggerSource, technology, bitRate, event, triggerLevel):
        """

        :param triggerSource:
        :type triggerSource:
        :param technology:
        :type technology:
        :param bitRate:
        :type bitRate:
        :param event:
        :type event:
        :param triggerLevel:
        :type triggerLevel:
        """
        return self._dllwrap.ConfigureNFCTrigger(self._vi, triggerSource, technology, bitRate, event, triggerLevel)

    def ConfigureTVTrigger(
        self,
        triggerSource,
        standard,
        mode,
        lineNumber,
        lineField,
        triggerLevel,
        signalPolarity,
    ):
        """

        :param triggerSource:
        :type triggerSource:
        :param standard:
        :type standard:
        :param mode:
        :type mode:
        :param lineNumber:
        :type lineNumber:
        :param lineField:
        :type lineField:
        :param triggerLevel:
        :type triggerLevel:
        :param signalPolarity:
        :type signalPolarity:
        """
        return self._dllwrap.ConfigureTVTrigger(
            self._vi,
            triggerSource,
            standard,
            mode,
            lineNumber,
            lineField,
            triggerLevel,
            signalPolarity,
        )

    def ConfigureTVTriggerCustomSettings(self, pulseType, linePeriod, pulseWidth, scanMode):
        """

        :param pulseType:
        :type pulseType:
        :param linePeriod:
        :type linePeriod:
        :param pulseWidth:
        :type pulseWidth:
        :param scanMode:
        :type scanMode:
        """
        return self._dllwrap.ConfigureTVTriggerCustomSettings(self._vi, pulseType, linePeriod, pulseWidth, scanMode)

    def ConfigureNoiseReject(self, trigger, triggerSource, hysteresisMode, absoluteHysteresis):
        """

        :param trigger:
        :type trigger:
        :param triggerSource:
        :type triggerSource:
        :param hysteresisMode:
        :type hysteresisMode:
        :param absoluteHysteresis:
        :type absoluteHysteresis:
        """
        return self._dllwrap.ConfigureNoiseReject(self._vi, trigger, triggerSource, hysteresisMode, absoluteHysteresis)

    def ConfigureNoiseRejectHysteresisScale(self, triggerSource, mode, absoluteHysteresis, relativeHysteresis):
        """

        :param triggerSource:
        :type triggerSource:
        :param mode:
        :type mode:
        :param absoluteHysteresis:
        :type absoluteHysteresis:
        :param relativeHysteresis:
        :type relativeHysteresis:
        """
        return self._dllwrap.ConfigureNoiseRejectHysteresisScale(
            self._vi, triggerSource, mode, absoluteHysteresis, relativeHysteresis
        )

    def ConfigureNoiseRejectHysteresisRangeInDivisions(self, trigger, triggerSource, rangeInDivisions):
        """

        :param trigger:
        :type trigger:
        :param triggerSource:
        :type triggerSource:
        :param rangeInDivisions:
        :type rangeInDivisions:
        """
        return self._dllwrap.ConfigureNoiseRejectHysteresisRangeInDivisions(
            self._vi, trigger, triggerSource, rangeInDivisions
        )

    def ConfigureTriggerLinesDisplay(self, showTriggerLinesPermanently):
        """

        :param showTriggerLinesPermanently:
        :type showTriggerLinesPermanently:
        """
        return self._dllwrap.ConfigureTriggerLinesDisplay(self._vi, showTriggerLinesPermanently)

    def ConfigureTriggerOutSignal(self, enable, polarity, pulseLength):
        """

        :param enable:
        :type enable:
        :param polarity:
        :type polarity:
        :param pulseLength:
        :type pulseLength:
        """
        return self._dllwrap.ConfigureTriggerOutSignal(self._vi, enable, polarity, pulseLength)

    def QueryTriggerOutDelay(self):
        """"""
        return self._dllwrap.QueryTriggerOutDelay(self._vi)

    def ConfigureEventTrigger(self, beep, print, saveWaveform):
        """

        :param beep:
        :type beep:
        :param print:
        :type print:
        :param saveWaveform:
        :type saveWaveform:
        """
        return self._dllwrap.ConfigureEventTrigger(self._vi, beep, print, saveWaveform)

    def ConfigureEventTriggerRunExternalApplication(self, runExternalApplication):
        """

        :param runExternalApplication:
        :type runExternalApplication:
        """
        return self._dllwrap.ConfigureEventTriggerRunExternalApplication(self._vi, runExternalApplication)

    def ConfigureZoneLogicalExpression(self, expression):
        """

        :param expression:
        :type expression:
        """
        return self._dllwrap.ConfigureZoneLogicalExpression(self._vi, expression)

    def ConfigureZoneTriggerInHistoryReplayState(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureZoneTriggerInHistoryReplayState(self._vi, state)

    def ConfigureTriggerQualification(
        self,
        triggerType,
        trigger,
        qualificationEnabled,
        channel,
        channelEnabled,
        channelLogic,
    ):
        """

        :param triggerType:
        :type triggerType:
        :param trigger:
        :type trigger:
        :param qualificationEnabled:
        :type qualificationEnabled:
        :param channel:
        :type channel:
        :param channelEnabled:
        :type channelEnabled:
        :param channelLogic:
        :type channelLogic:
        """
        return self._dllwrap.ConfigureTriggerQualification(
            self._vi,
            triggerType,
            trigger,
            qualificationEnabled,
            channel,
            channelEnabled,
            channelLogic,
        )

    def ConfigureTriggerQualificationMultichannelLogic(
        self,
        trigger,
        triggerType,
        qualificationEnabled,
        channelCombination,
        multichannelLogic,
    ):
        """

        :param trigger:
        :type trigger:
        :param triggerType:
        :type triggerType:
        :param qualificationEnabled:
        :type qualificationEnabled:
        :param channelCombination:
        :type channelCombination:
        :param multichannelLogic:
        :type multichannelLogic:
        """
        return self._dllwrap.ConfigureTriggerQualificationMultichannelLogic(
            self._vi,
            trigger,
            triggerType,
            qualificationEnabled,
            channelCombination,
            multichannelLogic,
        )

    def ConfigureTriggerSequenceMode(self, sequenceMode):
        """

        :param sequenceMode:
        :type sequenceMode:
        """
        return self._dllwrap.ConfigureTriggerSequenceMode(self._vi, sequenceMode)

    def ConfigureAOnlyTriggerSequence(self, holdoffMode, holdoffTime, holdoffEvents, randomMinTime, randomMaxTime):
        """

        :param holdoffMode:
        :type holdoffMode:
        :param holdoffTime:
        :type holdoffTime:
        :param holdoffEvents:
        :type holdoffEvents:
        :param randomMinTime:
        :type randomMinTime:
        :param randomMaxTime:
        :type randomMaxTime:
        """
        return self._dllwrap.ConfigureAOnlyTriggerSequence(
            self._vi,
            holdoffMode,
            holdoffTime,
            holdoffEvents,
            randomMinTime,
            randomMaxTime,
        )

    def QueryAOnlyTriggerSequenceAutoTimeResult(self):
        """"""
        return self._dllwrap.QueryAOnlyTriggerSequenceAutoTimeResult(self._vi)

    def TriggerSequenceHoldoffAutoScale(self, autoScale):
        """

        :param autoScale:
        :type autoScale:
        """
        return self._dllwrap.TriggerSequenceHoldoffAutoScale(self._vi, autoScale)

    def ConfigureABRTriggerSequence(
        self,
        eventCoupling,
        sequenceDelay,
        bEventsCount,
        resetByTimeoutEnabled,
        resetTimeout,
        resetByEventEnabled,
    ):
        """

        :param eventCoupling:
        :type eventCoupling:
        :param sequenceDelay:
        :type sequenceDelay:
        :param bEventsCount:
        :type bEventsCount:
        :param resetByTimeoutEnabled:
        :type resetByTimeoutEnabled:
        :param resetTimeout:
        :type resetTimeout:
        :param resetByEventEnabled:
        :type resetByEventEnabled:
        """
        return self._dllwrap.ConfigureABRTriggerSequence(
            self._vi,
            eventCoupling,
            sequenceDelay,
            bEventsCount,
            resetByTimeoutEnabled,
            resetTimeout,
            resetByEventEnabled,
        )

    def ConfigureDisplayUpdate(self, displayInRemote):
        """

        :param displayInRemote:
        :type displayInRemote:
        """
        return self._dllwrap.ConfigureDisplayUpdate(self._vi, displayInRemote)

    def ConfigureDisplayMessage(self, state, text):
        """

        :param state:
        :type state:
        :param text:
        :type text:
        """
        return self._dllwrap.ConfigureDisplayMessage(self._vi, state, text)

    def ConfigureDisplayGateTransparency(self, transparency):
        """

        :param transparency:
        :type transparency:
        """
        return self._dllwrap.ConfigureDisplayGateTransparency(self._vi, transparency)

    def ConfigureDisplayClearResults(self):
        """"""
        return self._dllwrap.ConfigureDisplayClearResults(self._vi)

    def ConfigurePersistence(self, enable, infinite, time):
        """

        :param enable:
        :type enable:
        :param infinite:
        :type infinite:
        :param time:
        :type time:
        """
        return self._dllwrap.ConfigurePersistence(self._vi, enable, infinite, time)

    def ResetPersistence(self):
        """"""
        return self._dllwrap.ResetPersistence(self._vi)

    def ConfigureSignalStyle(self, intensity, style):
        """

        :param intensity:
        :type intensity:
        :param style:
        :type style:
        """
        return self._dllwrap.ConfigureSignalStyle(self._vi, intensity, style)

    def ConfigureColorTableAssignment(self, source, useColorTable, tableName):
        """

        :param source:
        :type source:
        :param useColorTable:
        :type useColorTable:
        :param tableName:
        :type tableName:
        """
        return self._dllwrap.ConfigureColorTableAssignment(self._vi, source, useColorTable, tableName)

    def AddColorTable(self, tableName):
        """

        :param tableName:
        :type tableName:
        """
        return self._dllwrap.AddColorTable(self._vi, tableName)

    def RemoveColorTable(self, tableName):
        """

        :param tableName:
        :type tableName:
        """
        return self._dllwrap.RemoveColorTable(self._vi, tableName)

    def ColorTableAppendRow(self, tableName):
        """

        :param tableName:
        :type tableName:
        """
        return self._dllwrap.ColorTableAppendRow(self._vi, tableName)

    def ColorTableInsertRow(self, tableName, index):
        """

        :param tableName:
        :type tableName:
        :param index:
        :type index:
        """
        return self._dllwrap.ColorTableInsertRow(self._vi, tableName, index)

    def ColorTableDefineRow(self, tableName, index, cumulativePercentage, color):
        """

        :param tableName:
        :type tableName:
        :param index:
        :type index:
        :param cumulativePercentage:
        :type cumulativePercentage:
        :param color:
        :type color:
        """
        return self._dllwrap.ColorTableDefineRow(self._vi, tableName, index, cumulativePercentage, color)

    def ColorTableRemoveRow(self, tableName, index):
        """

        :param tableName:
        :type tableName:
        :param index:
        :type index:
        """
        return self._dllwrap.ColorTableRemoveRow(self._vi, tableName, index)

    def QueryColorTableCount(self):
        """"""
        return self._dllwrap.QueryColorTableCount(self._vi)

    def QueryColorTableRowCount(self, tableName):
        """

        :param tableName:
        :type tableName:
        """
        return self._dllwrap.QueryColorTableRowCount(self._vi, tableName)

    def QueryColorTableRow(self, tableName, index):
        """

        :param tableName:
        :type tableName:
        :param index:
        :type index:
        """
        return self._dllwrap.QueryColorTableRow(self._vi, tableName, index)

    def ConfigureMeasurementDiagram(self, showGrid, showCrosshair, showLabels, showTabsAlways, yGridFixed):
        """

        :param showGrid:
        :type showGrid:
        :param showCrosshair:
        :type showCrosshair:
        :param showLabels:
        :type showLabels:
        :param showTabsAlways:
        :type showTabsAlways:
        :param yGridFixed:
        :type yGridFixed:
        """
        return self._dllwrap.ConfigureMeasurementDiagram(
            self._vi, showGrid, showCrosshair, showLabels, showTabsAlways, yGridFixed
        )

    def ConfigureMeasurementDiagramFineGridScale(self, showFineGridScale):
        """

        :param showFineGridScale:
        :type showFineGridScale:
        """
        return self._dllwrap.ConfigureMeasurementDiagramFineGridScale(self._vi, showFineGridScale)

    def ShowSignalBar(self, enable, position):
        """

        :param enable:
        :type enable:
        :param position:
        :type position:
        """
        return self._dllwrap.ShowSignalBar(self._vi, enable, position)

    def ConfigureSignalBarAutoHide(self, autoHide, hideHead, hideAfter, hidingTransparency):
        """

        :param autoHide:
        :type autoHide:
        :param hideHead:
        :type hideHead:
        :param hideAfter:
        :type hideAfter:
        :param hidingTransparency:
        :type hidingTransparency:
        """
        return self._dllwrap.ConfigureSignalBarAutoHide(self._vi, autoHide, hideHead, hideAfter, hidingTransparency)

    def ConfigureSignalBarColor(self, borderColor, fillColor):
        """

        :param borderColor:
        :type borderColor:
        :param fillColor:
        :type fillColor:
        """
        return self._dllwrap.ConfigureSignalBarColor(self._vi, borderColor, fillColor)

    def ConfigureResultBoxPosition(self, position):
        """

        :param position:
        :type position:
        """
        return self._dllwrap.ConfigureResultBoxPosition(self._vi, position)

    def AddDiagram(self, existingDiagram, newDiagramPosition, insertBefore, source, newDiagramName):
        """

        :param existingDiagram:
        :type existingDiagram:
        :param newDiagramPosition:
        :type newDiagramPosition:
        :param insertBefore:
        :type insertBefore:
        :param source:
        :type source:
        :param newDiagramName:
        :type newDiagramName:
        """
        return self._dllwrap.AddDiagram(
            self._vi,
            existingDiagram,
            newDiagramPosition,
            insertBefore,
            source,
            newDiagramName,
        )

    def DisplayDiagram(self, diagramName):
        """

        :param diagramName:
        :type diagramName:
        """
        return self._dllwrap.DisplayDiagram(self._vi, diagramName)

    def RemoveDiagram(self, diagramName):
        """

        :param diagramName:
        :type diagramName:
        """
        return self._dllwrap.RemoveDiagram(self._vi, diagramName)

    def RenameDiagram(self, diagramName, newName):
        """

        :param diagramName:
        :type diagramName:
        :param newName:
        :type newName:
        """
        return self._dllwrap.RenameDiagram(self._vi, diagramName, newName)

    def ShowWaveformInDiagram(self, diagramName, source):
        """

        :param diagramName:
        :type diagramName:
        :param source:
        :type source:
        """
        return self._dllwrap.ShowWaveformInDiagram(self._vi, diagramName, source)

    def AddWaveformToDiagram(self, diagramName, source, assignToXAxis):
        """

        :param diagramName:
        :type diagramName:
        :param source:
        :type source:
        :param assignToXAxis:
        :type assignToXAxis:
        """
        return self._dllwrap.AddWaveformToDiagram(self._vi, diagramName, source, assignToXAxis)

    def RemoveWaveformFromDiagram(self, source):
        """

        :param source:
        :type source:
        """
        return self._dllwrap.RemoveWaveformFromDiagram(self._vi, source)

    def AddLabel(self, labelID, source, labelText, positionMode, xPosition, yPosition):
        """

        :param labelID:
        :type labelID:
        :param source:
        :type source:
        :param labelText:
        :type labelText:
        :param positionMode:
        :type positionMode:
        :param xPosition:
        :type xPosition:
        :param yPosition:
        :type yPosition:
        """
        return self._dllwrap.AddLabel(self._vi, labelID, source, labelText, positionMode, xPosition, yPosition)

    def RemoveLabel(self, labelID, source):
        """

        :param labelID:
        :type labelID:
        :param source:
        :type source:
        """
        return self._dllwrap.RemoveLabel(self._vi, labelID, source)

    def EditLabelText(self, labelID, source, labelText):
        """

        :param labelID:
        :type labelID:
        :param source:
        :type source:
        :param labelText:
        :type labelText:
        """
        return self._dllwrap.EditLabelText(self._vi, labelID, source, labelText)

    def QueryLabelText(self, labelID, source, bufferSize):
        """

        :param labelID:
        :type labelID:
        :param source:
        :type source:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryLabelText(self._vi, labelID, source, bufferSize)

    def ConfigureLabelPositionMode(self, source, positionMode):
        """

        :param source:
        :type source:
        :param positionMode:
        :type positionMode:
        """
        return self._dllwrap.ConfigureLabelPositionMode(self._vi, source, positionMode)

    def ConfigureLabelAbsolutePosition(self, labelID, source, xPosition, yPosition):
        """

        :param labelID:
        :type labelID:
        :param source:
        :type source:
        :param xPosition:
        :type xPosition:
        :param yPosition:
        :type yPosition:
        """
        return self._dllwrap.ConfigureLabelAbsolutePosition(self._vi, labelID, source, xPosition, yPosition)

    def ConfigureLabelRelativePosition(self, labelID, source, xPosition, yPosition):
        """

        :param labelID:
        :type labelID:
        :param source:
        :type source:
        :param xPosition:
        :type xPosition:
        :param yPosition:
        :type yPosition:
        """
        return self._dllwrap.ConfigureLabelRelativePosition(self._vi, labelID, source, xPosition, yPosition)

    def AddDiagramZoom(
        self,
        diagramName,
        newDiagramPosition,
        insertBefore,
        newZoomDiagramName,
        xStart,
        xStop,
        yStart,
        yStop,
    ):
        """

        :param diagramName:
        :type diagramName:
        :param newDiagramPosition:
        :type newDiagramPosition:
        :param insertBefore:
        :type insertBefore:
        :param newZoomDiagramName:
        :type newZoomDiagramName:
        :param xStart:
        :type xStart:
        :param xStop:
        :type xStop:
        :param yStart:
        :type yStart:
        :param yStop:
        :type yStop:
        """
        return self._dllwrap.AddDiagramZoom(
            self._vi,
            diagramName,
            newDiagramPosition,
            insertBefore,
            newZoomDiagramName,
            xStart,
            xStop,
            yStart,
            yStop,
        )

    def AddDiagramZoomCoupled(self, diagramName, newZoomDiagramName, xOffset, yOffset):
        """

        :param diagramName:
        :type diagramName:
        :param newZoomDiagramName:
        :type newZoomDiagramName:
        :param xOffset:
        :type xOffset:
        :param yOffset:
        :type yOffset:
        """
        return self._dllwrap.AddDiagramZoomCoupled(self._vi, diagramName, newZoomDiagramName, xOffset, yOffset)

    def RemoveDiagramZoom(self, diagramName, zoomDiagramName):
        """

        :param diagramName:
        :type diagramName:
        :param zoomDiagramName:
        :type zoomDiagramName:
        """
        return self._dllwrap.RemoveDiagramZoom(self._vi, diagramName, zoomDiagramName)

    def ConfigureDiagramZoomOverlay(self, zoomOverlay):
        """

        :param zoomOverlay:
        :type zoomOverlay:
        """
        return self._dllwrap.ConfigureDiagramZoomOverlay(self._vi, zoomOverlay)

    def ConfigureDiagramZoomVerticalStartStop(self, diagramName, zoomDiagramName, mode, start, stop):
        """

        :param diagramName:
        :type diagramName:
        :param zoomDiagramName:
        :type zoomDiagramName:
        :param mode:
        :type mode:
        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.ConfigureDiagramZoomVerticalStartStop(
            self._vi, diagramName, zoomDiagramName, mode, start, stop
        )

    def ConfigureDiagramZoomHorizontalStartStop(self, diagramName, zoomDiagramName, mode, start, stop):
        """

        :param diagramName:
        :type diagramName:
        :param zoomDiagramName:
        :type zoomDiagramName:
        :param mode:
        :type mode:
        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.ConfigureDiagramZoomHorizontalStartStop(
            self._vi, diagramName, zoomDiagramName, mode, start, stop
        )

    def ConfigureDiagramZoomVerticalPositionRange(self, diagramName, zoomDiagramName, mode, position, range):
        """

        :param diagramName:
        :type diagramName:
        :param zoomDiagramName:
        :type zoomDiagramName:
        :param mode:
        :type mode:
        :param position:
        :type position:
        :param range:
        :type range:
        """
        return self._dllwrap.ConfigureDiagramZoomVerticalPositionRange(
            self._vi, diagramName, zoomDiagramName, mode, position, range
        )

    def ConfigureDiagramZoomHorizontalPositionRange(self, diagramName, zoomDiagramName, mode, position, range):
        """

        :param diagramName:
        :type diagramName:
        :param zoomDiagramName:
        :type zoomDiagramName:
        :param mode:
        :type mode:
        :param position:
        :type position:
        :param range:
        :type range:
        """
        return self._dllwrap.ConfigureDiagramZoomHorizontalPositionRange(
            self._vi, diagramName, zoomDiagramName, mode, position, range
        )

    def ConfigureDiagramZoomPositionCoupling(self, diagramName, zoomDiagramName, positionCoupling):
        """

        :param diagramName:
        :type diagramName:
        :param zoomDiagramName:
        :type zoomDiagramName:
        :param positionCoupling:
        :type positionCoupling:
        """
        return self._dllwrap.ConfigureDiagramZoomPositionCoupling(
            self._vi, diagramName, zoomDiagramName, positionCoupling
        )

    def ConfigureXYDiagram(self, XYDiagramNumber, XYDiagramState, constantXYRatio, xSource, ySource):
        """

        :param XYDiagramNumber:
        :type XYDiagramNumber:
        :param XYDiagramState:
        :type XYDiagramState:
        :param constantXYRatio:
        :type constantXYRatio:
        :param xSource:
        :type xSource:
        :param ySource:
        :type ySource:
        """
        return self._dllwrap.ConfigureXYDiagram(
            self._vi, XYDiagramNumber, XYDiagramState, constantXYRatio, xSource, ySource
        )

    def SwapXYDiagram(self, XYDiagramNumber):
        """

        :param XYDiagramNumber:
        :type XYDiagramNumber:
        """
        return self._dllwrap.SwapXYDiagram(self._vi, XYDiagramNumber)

    def ConfigureHistoryState(self, channel, waveform, enableHistory):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param enableHistory:
        :type enableHistory:
        """
        return self._dllwrap.ConfigureHistoryState(self._vi, channel, waveform, enableHistory)

    def ConfigureHistoryStartStop(self, channel, waveform, start, stop):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.ConfigureHistoryStartStop(self._vi, channel, waveform, start, stop)

    def ConfigureHistoryAcquisitionView(self, channel, waveform, acquisition):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param acquisition:
        :type acquisition:
        """
        return self._dllwrap.ConfigureHistoryAcquisitionView(self._vi, channel, waveform, acquisition)

    def ConfigureHistoryAcquisitionTime(self, channel, waveform, timePerAcquisition):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param timePerAcquisition:
        :type timePerAcquisition:
        """
        return self._dllwrap.ConfigureHistoryAcquisitionTime(self._vi, channel, waveform, timePerAcquisition)

    def ConfigureHistoryAutoRepeat(self, channel, waveform, autoRepeat):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param autoRepeat:
        :type autoRepeat:
        """
        return self._dllwrap.ConfigureHistoryAutoRepeat(self._vi, channel, waveform, autoRepeat)

    def HistoryPlaybackControl(self, channel, waveform):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        """
        return self._dllwrap.HistoryPlaybackControl(self._vi, channel, waveform)

    def QueryHistoryTimeStamp(self, channel, waveform, mode, bufferSize):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param mode:
        :type mode:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryHistoryTimeStamp(self._vi, channel, waveform, mode, bufferSize)

    def QueryHistoryTimeReference(self, channel, waveform):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        """
        return self._dllwrap.QueryHistoryTimeReference(self._vi, channel, waveform)

    def QueryHistoryDate(self, channel, waveform, bufferSize):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryHistoryDate(self._vi, channel, waveform, bufferSize)

    def QueryHistoryAcquisitionsCount(self, reserved):
        """

        :param reserved:
        :type reserved:
        """
        return self._dllwrap.QueryHistoryAcquisitionsCount(self._vi, reserved)

    def ConfigureMeasurementState(self, measurement, measurementState):
        """

        :param measurement:
        :type measurement:
        :param measurementState:
        :type measurementState:
        """
        return self._dllwrap.ConfigureMeasurementState(self._vi, measurement, measurementState)

    def ConfigureMeasurementSource(self, measurement, signalSource, signalSource2):
        """

        :param measurement:
        :type measurement:
        :param signalSource:
        :type signalSource:
        :param signalSource2:
        :type signalSource2:
        """
        return self._dllwrap.ConfigureMeasurementSource(self._vi, measurement, signalSource, signalSource2)

    def ConfigureMeasSource(self, measurement, signalSource, signalSource2):
        """

        :param measurement:
        :type measurement:
        :param signalSource:
        :type signalSource:
        :param signalSource2:
        :type signalSource2:
        """
        return self._dllwrap.ConfigureMeasSource(self._vi, measurement, signalSource, signalSource2)

    def ConfigureMeasurementLimitCheck(self, measurement, limitCheck):
        """

        :param measurement:
        :type measurement:
        :param limitCheck:
        :type limitCheck:
        """
        return self._dllwrap.ConfigureMeasurementLimitCheck(self._vi, measurement, limitCheck)

    def ConfigureMultipleMeasurement(self, measurement, multipleMeasurement):
        """

        :param measurement:
        :type measurement:
        :param multipleMeasurement:
        :type multipleMeasurement:
        """
        return self._dllwrap.ConfigureMultipleMeasurement(self._vi, measurement, multipleMeasurement)

    def ConfigureMultipleMeasurementNumber(self, measurement, measurementCount):
        """

        :param measurement:
        :type measurement:
        :param measurementCount:
        :type measurementCount:
        """
        return self._dllwrap.ConfigureMultipleMeasurementNumber(self._vi, measurement, measurementCount)

    def ConfigureMeasurementCategory(self, measurement, category):
        """

        :param measurement:
        :type measurement:
        :param category:
        :type category:
        """
        return self._dllwrap.ConfigureMeasurementCategory(self._vi, measurement, category)

    def EnableAdditionalMeasurements(self, measurement):
        """

        :param measurement:
        :type measurement:
        """
        return self._dllwrap.EnableAdditionalMeasurements(self._vi, measurement)

    def DisableAdditionalMeasurements(self, measurement):
        """

        :param measurement:
        :type measurement:
        """
        return self._dllwrap.DisableAdditionalMeasurements(self._vi, measurement)

    def ClearMeasurementStatisticData(self, measurement):
        """

        :param measurement:
        :type measurement:
        """
        return self._dllwrap.ClearMeasurementStatisticData(self._vi, measurement)

    def ConfigureMeasurementEventActions(self, measurement, event, action):
        """

        :param measurement:
        :type measurement:
        :param event:
        :type event:
        :param action:
        :type action:
        """
        return self._dllwrap.ConfigureMeasurementEventActions(self._vi, measurement, event, action)

    def ConfigureMeasurementDisplayIntermediateResults(self, measurement, displayResultLines, displayReferenceLevels):
        """

        :param measurement:
        :type measurement:
        :param displayResultLines:
        :type displayResultLines:
        :param displayReferenceLevels:
        :type displayReferenceLevels:
        """
        return self._dllwrap.ConfigureMeasurementDisplayIntermediateResults(
            self._vi, measurement, displayResultLines, displayReferenceLevels
        )

    def ConfigureMeasurementDisplayStyle(self, measurement, displayStyle):
        """

        :param measurement:
        :type measurement:
        :param displayStyle:
        :type displayStyle:
        """
        return self._dllwrap.ConfigureMeasurementDisplayStyle(self._vi, measurement, displayStyle)

    def ConfigureMeasurementDisplayResultTablePosition(self, position):
        """

        :param position:
        :type position:
        """
        return self._dllwrap.ConfigureMeasurementDisplayResultTablePosition(self._vi, position)

    def ConfigureMeasurementDisplayGroupResultDialogs(self, groupResultDialogs):
        """

        :param groupResultDialogs:
        :type groupResultDialogs:
        """
        return self._dllwrap.ConfigureMeasurementDisplayGroupResultDialogs(self._vi, groupResultDialogs)

    def ReadMeasurementResults(self, measurement, bufferSize):
        """

        :param measurement:
        :type measurement:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.ReadMeasurementResults(self._vi, measurement, bufferSize)

    def ConfigureCursor(self, cursor, cursorState, dataSource, type):
        """

        :param cursor:
        :type cursor:
        :param cursorState:
        :type cursorState:
        :param dataSource:
        :type dataSource:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureCursor(self._vi, cursor, cursorState, dataSource, type)

    def ConfigureCursorSecondSource(self, cursor, enabled, secondSource):
        """

        :param cursor:
        :type cursor:
        :param enabled:
        :type enabled:
        :param secondSource:
        :type secondSource:
        """
        return self._dllwrap.ConfigureCursorSecondSource(self._vi, cursor, enabled, secondSource)

    def AllCursorsOff(self):
        """"""
        return self._dllwrap.AllCursorsOff(self._vi)

    def ConfigureCursorShowInAllDiagrams(self, showInAllDiagrams):
        """

        :param showInAllDiagrams:
        :type showInAllDiagrams:
        """
        return self._dllwrap.ConfigureCursorShowInAllDiagrams(self._vi, showInAllDiagrams)

    def ConfigureCursorResultTablePosition(self, tablePosition):
        """

        :param tablePosition:
        :type tablePosition:
        """
        return self._dllwrap.ConfigureCursorResultTablePosition(self._vi, tablePosition)

    def ConfigureCursorPosition(self, cursor, xPosition1, xPosition2, yPosition1, yPosition2):
        """

        :param cursor:
        :type cursor:
        :param xPosition1:
        :type xPosition1:
        :param xPosition2:
        :type xPosition2:
        :param yPosition1:
        :type yPosition1:
        :param yPosition2:
        :type yPosition2:
        """
        return self._dllwrap.ConfigureCursorPosition(self._vi, cursor, xPosition1, xPosition2, yPosition1, yPosition2)

    def ConfigureCursorCoupling(self, cursor, xCoupling, yCoupling):
        """

        :param cursor:
        :type cursor:
        :param xCoupling:
        :type xCoupling:
        :param yCoupling:
        :type yCoupling:
        """
        return self._dllwrap.ConfigureCursorCoupling(self._vi, cursor, xCoupling, yCoupling)

    def ConfigureCursorWaveformTracking(self, cursor, tracking):
        """

        :param cursor:
        :type cursor:
        :param tracking:
        :type tracking:
        """
        return self._dllwrap.ConfigureCursorWaveformTracking(self._vi, cursor, tracking)

    def ConfigureCursorEnvelopeWaveformSelection(self, cursor, firstCursorPosition, secondCursorPosition):
        """

        :param cursor:
        :type cursor:
        :param firstCursorPosition:
        :type firstCursorPosition:
        :param secondCursorPosition:
        :type secondCursorPosition:
        """
        return self._dllwrap.ConfigureCursorEnvelopeWaveformSelection(
            self._vi, cursor, firstCursorPosition, secondCursorPosition
        )

    def QueryCursorDistance(self, cursor, direction):
        """

        :param cursor:
        :type cursor:
        :param direction:
        :type direction:
        """
        return self._dllwrap.QueryCursorDistance(self._vi, cursor, direction)

    def QueryCursorInverseDistance(self, cursor):
        """

        :param cursor:
        :type cursor:
        """
        return self._dllwrap.QueryCursorInverseDistance(self._vi, cursor)

    def QueryCursorHorizontalDeltaSlope(self, cursor):
        """

        :param cursor:
        :type cursor:
        """
        return self._dllwrap.QueryCursorHorizontalDeltaSlope(self._vi, cursor)

    def CursorSearch(self, cursor, search):
        """

        :param cursor:
        :type cursor:
        :param search:
        :type search:
        """
        return self._dllwrap.CursorSearch(self._vi, cursor, search)

    def ConfigureCursorPeakExcursion(self, cursor, peakExcursion):
        """

        :param cursor:
        :type cursor:
        :param peakExcursion:
        :type peakExcursion:
        """
        return self._dllwrap.ConfigureCursorPeakExcursion(self._vi, cursor, peakExcursion)

    def ConfigureCursorThreshold(self, cursor, threshold):
        """

        :param cursor:
        :type cursor:
        :param threshold:
        :type threshold:
        """
        return self._dllwrap.ConfigureCursorThreshold(self._vi, cursor, threshold)

    def ConfigureAmplitudeTimeMainMeasurement(self, measurement, measurementFunction):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.ConfigureAmplitudeTimeMainMeasurement(self._vi, measurement, measurementFunction)

    def ConfigureAmplitudeTimeAdditionalMeasurement(self, measurement, measurementFunction, enabled):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureAmplitudeTimeAdditionalMeasurement(
            self._vi, measurement, measurementFunction, enabled
        )

    def ConfigureAmplitudeTimeSettings(self, measurement, signalThreshold, areaLevel, pulseTrainCount):
        """

        :param measurement:
        :type measurement:
        :param signalThreshold:
        :type signalThreshold:
        :param areaLevel:
        :type areaLevel:
        :param pulseTrainCount:
        :type pulseTrainCount:
        """
        return self._dllwrap.ConfigureAmplitudeTimeSettings(
            self._vi, measurement, signalThreshold, areaLevel, pulseTrainCount
        )

    def ConfigureAmplitudeTimeSlope(self, measurement, countType, slope):
        """

        :param measurement:
        :type measurement:
        :param countType:
        :type countType:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureAmplitudeTimeSlope(self._vi, measurement, countType, slope)

    def ConfigureAmplitudeAdvancedDelaySetup(
        self, measurement, sourceNumber, levelSelection, slope, direction, edgeNumber
    ):
        """

        :param measurement:
        :type measurement:
        :param sourceNumber:
        :type sourceNumber:
        :param levelSelection:
        :type levelSelection:
        :param slope:
        :type slope:
        :param direction:
        :type direction:
        :param edgeNumber:
        :type edgeNumber:
        """
        return self._dllwrap.ConfigureAmplitudeAdvancedDelaySetup(
            self._vi,
            measurement,
            sourceNumber,
            levelSelection,
            slope,
            direction,
            edgeNumber,
        )

    def ConfigureAmplitudeTimeReferenceLevel(self, measurement, type, referenceLevel):
        """

        :param measurement:
        :type measurement:
        :param type:
        :type type:
        :param referenceLevel:
        :type referenceLevel:
        """
        return self._dllwrap.ConfigureAmplitudeTimeReferenceLevel(self._vi, measurement, type, referenceLevel)

    def ConfigureAmplitudeTimeLimitCheck(self, measurement, measurementType, limitCheck):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param limitCheck:
        :type limitCheck:
        """
        return self._dllwrap.ConfigureAmplitudeTimeLimitCheck(self._vi, measurement, measurementType, limitCheck)

    def ConfigureAmplitudeTimeLimitCheckLimits(self, measurement, measurementType, lowerLimit, upperLimit):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param lowerLimit:
        :type lowerLimit:
        :param upperLimit:
        :type upperLimit:
        """
        return self._dllwrap.ConfigureAmplitudeTimeLimitCheckLimits(
            self._vi, measurement, measurementType, lowerLimit, upperLimit
        )

    def ConfigureAmplitudeTimeLimitCheckMargins(self, measurement, measurementType, lowerMargin, upperMargin):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param lowerMargin:
        :type lowerMargin:
        :param upperMargin:
        :type upperMargin:
        """
        return self._dllwrap.ConfigureAmplitudeTimeLimitCheckMargins(
            self._vi, measurement, measurementType, lowerMargin, upperMargin
        )

    def ConfigureEnvelopeMeasurement(self, measurement, envelope):
        """

        :param measurement:
        :type measurement:
        :param envelope:
        :type envelope:
        """
        return self._dllwrap.ConfigureEnvelopeMeasurement(self._vi, measurement, envelope)

    def ConfigureAmplitudeTimeDelayToTrigger(self, measurement, slope, referenceLevel):
        """

        :param measurement:
        :type measurement:
        :param slope:
        :type slope:
        :param referenceLevel:
        :type referenceLevel:
        """
        return self._dllwrap.ConfigureAmplitudeTimeDelayToTrigger(self._vi, measurement, slope, referenceLevel)

    def ConfigureJitterMainMeasurement(self, measurement, measurementFunction):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.ConfigureJitterMainMeasurement(self._vi, measurement, measurementFunction)

    def ConfigureJitterAdditionalMeasurement(self, measurement, measurementFunction, enabled):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureJitterAdditionalMeasurement(self._vi, measurement, measurementFunction, enabled)

    def ConfigureJitterClockMeasurementCycleBegin(self, measurement, cycleBegin):
        """

        :param measurement:
        :type measurement:
        :param cycleBegin:
        :type cycleBegin:
        """
        return self._dllwrap.ConfigureJitterClockMeasurementCycleBegin(self._vi, measurement, cycleBegin)

    def ConfigureJitterClockMeasurementCycleOffset(self, measurement, cycleOffset):
        """

        :param measurement:
        :type measurement:
        :param cycleOffset:
        :type cycleOffset:
        """
        return self._dllwrap.ConfigureJitterClockMeasurementCycleOffset(self._vi, measurement, cycleOffset)

    def ConfigureJitterClockMeasurementPulsePolarity(self, measurement, pulsePolarity):
        """

        :param measurement:
        :type measurement:
        :param pulsePolarity:
        :type pulsePolarity:
        """
        return self._dllwrap.ConfigureJitterClockMeasurementPulsePolarity(self._vi, measurement, pulsePolarity)

    def ConfigureJitterDataMeasurementClockMode(self, measurement, clockMode):
        """

        :param measurement:
        :type measurement:
        :param clockMode:
        :type clockMode:
        """
        return self._dllwrap.ConfigureJitterDataMeasurementClockMode(self._vi, measurement, clockMode)

    def ConfigureJitterDataMeasurementSlope(self, measurement, source, slope):
        """

        :param measurement:
        :type measurement:
        :param source:
        :type source:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureJitterDataMeasurementSlope(self._vi, measurement, source, slope)

    def ConfigureJitterDelayMeasurement(self, measurement1, edgePolarity, measurement2, relativePolarity):
        """

        :param measurement1:
        :type measurement1:
        :param edgePolarity:
        :type edgePolarity:
        :param measurement2:
        :type measurement2:
        :param relativePolarity:
        :type relativePolarity:
        """
        return self._dllwrap.ConfigureJitterDelayMeasurement(
            self._vi, measurement1, edgePolarity, measurement2, relativePolarity
        )

    def ConfigureJitterLimitCheck(self, measurement, measurementType, limitCheck):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param limitCheck:
        :type limitCheck:
        """
        return self._dllwrap.ConfigureJitterLimitCheck(self._vi, measurement, measurementType, limitCheck)

    def ConfigureJitterLimitCheckLimits(self, measurement, measurementType, lowerLimit, upperLimit):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param lowerLimit:
        :type lowerLimit:
        :param upperLimit:
        :type upperLimit:
        """
        return self._dllwrap.ConfigureJitterLimitCheckLimits(
            self._vi, measurement, measurementType, lowerLimit, upperLimit
        )

    def ConfigureJitterLimitCheckMargins(self, measurement, measurementType, lowerMargin, upperMargin):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param lowerMargin:
        :type lowerMargin:
        :param upperMargin:
        :type upperMargin:
        """
        return self._dllwrap.ConfigureJitterLimitCheckMargins(
            self._vi, measurement, measurementType, lowerMargin, upperMargin
        )

    def ConfigureEyeJitterMainMeasurement(self, measurement, measurementFunction):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.ConfigureEyeJitterMainMeasurement(self._vi, measurement, measurementFunction)

    def ConfigureEyeJitterAdditionalMeasurement(self, measurement, measurementFunction, enabled):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureEyeJitterAdditionalMeasurement(
            self._vi, measurement, measurementFunction, enabled
        )

    def ConfigureEyeJitterLimitCheck(self, measurement, measurementType, limitCheck):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param limitCheck:
        :type limitCheck:
        """
        return self._dllwrap.ConfigureEyeJitterLimitCheck(self._vi, measurement, measurementType, limitCheck)

    def ConfigureEyeJitterLimitCheckLimits(self, measurement, measurementType, lowerLimit, upperLimit):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param lowerLimit:
        :type lowerLimit:
        :param upperLimit:
        :type upperLimit:
        """
        return self._dllwrap.ConfigureEyeJitterLimitCheckLimits(
            self._vi, measurement, measurementType, lowerLimit, upperLimit
        )

    def ConfigureEyeJitterLimitCheckMargins(self, measurement, measurementType, lowerMargin, upperMargin):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param lowerMargin:
        :type lowerMargin:
        :param upperMargin:
        :type upperMargin:
        """
        return self._dllwrap.ConfigureEyeJitterLimitCheckMargins(
            self._vi, measurement, measurementType, lowerMargin, upperMargin
        )

    def ConfigureSpectrumMainMeasurement(self, measurement, measurementFunction):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.ConfigureSpectrumMainMeasurement(self._vi, measurement, measurementFunction)

    def ConfigureSpectrumAdditionalMeasurement(self, measurement, measurementFunction, enabled):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureSpectrumAdditionalMeasurement(self._vi, measurement, measurementFunction, enabled)

    def ConfigureSpectrumSettings(
        self,
        measurement,
        nDBDown,
        channelBandwidth,
        channelCenterFrequency,
        occupiedBandwidth,
        noiseReject,
    ):
        """

        :param measurement:
        :type measurement:
        :param nDBDown:
        :type nDBDown:
        :param channelBandwidth:
        :type channelBandwidth:
        :param channelCenterFrequency:
        :type channelCenterFrequency:
        :param occupiedBandwidth:
        :type occupiedBandwidth:
        :param noiseReject:
        :type noiseReject:
        """
        return self._dllwrap.ConfigureSpectrumSettings(
            self._vi,
            measurement,
            nDBDown,
            channelBandwidth,
            channelCenterFrequency,
            occupiedBandwidth,
            noiseReject,
        )

    def ConfigureSpectrumPeakExcursion(self, measurement, peakExcursion):
        """

        :param measurement:
        :type measurement:
        :param peakExcursion:
        :type peakExcursion:
        """
        return self._dllwrap.ConfigureSpectrumPeakExcursion(self._vi, measurement, peakExcursion)

    def ConfigureSpectrumLimitCheck(self, measurement, measurementType, limitCheck):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param limitCheck:
        :type limitCheck:
        """
        return self._dllwrap.ConfigureSpectrumLimitCheck(self._vi, measurement, measurementType, limitCheck)

    def ConfigureSpectrumLimitCheckLimits(self, measurement, measurementType, lowerLimit, upperLimit):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param lowerLimit:
        :type lowerLimit:
        :param upperLimit:
        :type upperLimit:
        """
        return self._dllwrap.ConfigureSpectrumLimitCheckLimits(
            self._vi, measurement, measurementType, lowerLimit, upperLimit
        )

    def ConfigureSpectrumLimitCheckMargins(self, measurement, measurementType, lowerMargin, upperMargin):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param lowerMargin:
        :type lowerMargin:
        :param upperMargin:
        :type upperMargin:
        """
        return self._dllwrap.ConfigureSpectrumLimitCheckMargins(
            self._vi, measurement, measurementType, lowerMargin, upperMargin
        )

    def ConfigureSpectrumMaxNumberOfResults(self, measurement, measurementType, maxNumberOfResults):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param maxNumberOfResults:
        :type maxNumberOfResults:
        """
        return self._dllwrap.ConfigureSpectrumMaxNumberOfResults(
            self._vi, measurement, measurementType, maxNumberOfResults
        )

    def ConfigureSpectrumResultMode(self, measurement, measurementType, mode):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param mode:
        :type mode:
        """
        return self._dllwrap.ConfigureSpectrumResultMode(self._vi, measurement, measurementType, mode)

    def ConfigureSpectrumAbsoluteThreshold(self, measurement, absoluteThreshold):
        """

        :param measurement:
        :type measurement:
        :param absoluteThreshold:
        :type absoluteThreshold:
        """
        return self._dllwrap.ConfigureSpectrumAbsoluteThreshold(self._vi, measurement, absoluteThreshold)

    def ConfigureSpectrumResultLabelsState(self, measurement, measurementType, state):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureSpectrumResultLabelsState(self._vi, measurement, measurementType, state)

    def ConfigureSpectrumResultLabelsFrameType(self, measurement, measurementType, frameType):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param frameType:
        :type frameType:
        """
        return self._dllwrap.ConfigureSpectrumResultLabelsFrameType(self._vi, measurement, measurementType, frameType)

    def ConfigureSpectrumResultLabelsInverse(self, measurement, measurementType, inverse):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param inverse:
        :type inverse:
        """
        return self._dllwrap.ConfigureSpectrumResultLabelsInverse(self._vi, measurement, measurementType, inverse)

    def ConfigureSpectrumResultLabelsMaximumPeaks(self, measurement, measurementType, maximumPeaks):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param maximumPeaks:
        :type maximumPeaks:
        """
        return self._dllwrap.ConfigureSpectrumResultLabelsMaximumPeaks(
            self._vi, measurement, measurementType, maximumPeaks
        )

    def ConfigureSpectrumResultLabelsShowFrequency(self, measurement, measurementType, showFrequency):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param showFrequency:
        :type showFrequency:
        """
        return self._dllwrap.ConfigureSpectrumResultLabelsShowFrequency(
            self._vi, measurement, measurementType, showFrequency
        )

    def ConfigureHistogramMainMeasurement(self, measurement, measurementFunction):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.ConfigureHistogramMainMeasurement(self._vi, measurement, measurementFunction)

    def ConfigureHistogramAdditionalMeasurement(self, measurement, measurementFunction, enabled):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureHistogramAdditionalMeasurement(
            self._vi, measurement, measurementFunction, enabled
        )

    def SelectHistogram(self, measurement, measurementType):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        """
        return self._dllwrap.SelectHistogram(self._vi, measurement, measurementType)

    def ConfigureHistogramProbabilityDomainMarkerSettings(self, measurement, reference, delta):
        """

        :param measurement:
        :type measurement:
        :param reference:
        :type reference:
        :param delta:
        :type delta:
        """
        return self._dllwrap.ConfigureHistogramProbabilityDomainMarkerSettings(self._vi, measurement, reference, delta)

    def ConfigureHistogramLimitCheck(self, measurement, measurementType, limitCheck):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param limitCheck:
        :type limitCheck:
        """
        return self._dllwrap.ConfigureHistogramLimitCheck(self._vi, measurement, measurementType, limitCheck)

    def ConfigureHistogramLimitCheckLimits(self, measurement, measurementType, lowerLimit, upperLimit):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param lowerLimit:
        :type lowerLimit:
        :param upperLimit:
        :type upperLimit:
        """
        return self._dllwrap.ConfigureHistogramLimitCheckLimits(
            self._vi, measurement, measurementType, lowerLimit, upperLimit
        )

    def ConfigureHistogramLimitCheckMargins(self, measurement, measurementType, lowerMargin, upperMargin):
        """

        :param measurement:
        :type measurement:
        :param measurementType:
        :type measurementType:
        :param lowerMargin:
        :type lowerMargin:
        :param upperMargin:
        :type upperMargin:
        """
        return self._dllwrap.ConfigureHistogramLimitCheckMargins(
            self._vi, measurement, measurementType, lowerMargin, upperMargin
        )

    def ConfigureHistogramDisplay(self, measurement, displaySourceHistogram):
        """

        :param measurement:
        :type measurement:
        :param displaySourceHistogram:
        :type displaySourceHistogram:
        """
        return self._dllwrap.ConfigureHistogramDisplay(self._vi, measurement, displaySourceHistogram)

    def CreateNewHistogram(
        self,
        histogramName,
        histogramSource,
        relativeValues,
        xStart,
        xStop,
        yStart,
        yStop,
        orientation,
    ):
        """

        :param histogramName:
        :type histogramName:
        :param histogramSource:
        :type histogramSource:
        :param relativeValues:
        :type relativeValues:
        :param xStart:
        :type xStart:
        :param xStop:
        :type xStop:
        :param yStart:
        :type yStart:
        :param yStop:
        :type yStop:
        :param orientation:
        :type orientation:
        """
        return self._dllwrap.CreateNewHistogram(
            self._vi,
            histogramName,
            histogramSource,
            relativeValues,
            xStart,
            xStop,
            yStart,
            yStop,
            orientation,
        )

    def ConfigureHistogramSource(self, histogramName, histogramSource):
        """

        :param histogramName:
        :type histogramName:
        :param histogramSource:
        :type histogramSource:
        """
        return self._dllwrap.ConfigureHistogramSource(self._vi, histogramName, histogramSource)

    def ResetHistogram(self, histogramName):
        """

        :param histogramName:
        :type histogramName:
        """
        return self._dllwrap.ResetHistogram(self._vi, histogramName)

    def RemoveHistogram(self, histogramName):
        """

        :param histogramName:
        :type histogramName:
        """
        return self._dllwrap.RemoveHistogram(self._vi, histogramName)

    def ConfigureHistogramType(self, histogramName, type):
        """

        :param histogramName:
        :type histogramName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureHistogramType(self._vi, histogramName, type)

    def ConfigureHistogramVertical(self, histogramName, mode, start, stop):
        """

        :param histogramName:
        :type histogramName:
        :param mode:
        :type mode:
        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.ConfigureHistogramVertical(self._vi, histogramName, mode, start, stop)

    def ConfigureHistogramHorizontal(self, histogramName, mode, start, stop):
        """

        :param histogramName:
        :type histogramName:
        :param mode:
        :type mode:
        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.ConfigureHistogramHorizontal(self._vi, histogramName, mode, start, stop)

    def ConfigureGateState(self, measurement, useGate):
        """

        :param measurement:
        :type measurement:
        :param useGate:
        :type useGate:
        """
        return self._dllwrap.ConfigureGateState(self._vi, measurement, useGate)

    def ConfigureGateShow(self, measurement, showGate):
        """

        :param measurement:
        :type measurement:
        :param showGate:
        :type showGate:
        """
        return self._dllwrap.ConfigureGateShow(self._vi, measurement, showGate)

    def ConfigureGateDefinitionZoom(self, measurement, zoomCoupling, reserved):
        """

        :param measurement:
        :type measurement:
        :param zoomCoupling:
        :type zoomCoupling:
        :param reserved:
        :type reserved:
        """
        return self._dllwrap.ConfigureGateDefinitionZoom(self._vi, measurement, zoomCoupling, reserved)

    def ConfigureGateZoomDiagram(self, measurement, diagramName, zoomName):
        """

        :param measurement:
        :type measurement:
        :param diagramName:
        :type diagramName:
        :param zoomName:
        :type zoomName:
        """
        return self._dllwrap.ConfigureGateZoomDiagram(self._vi, measurement, diagramName, zoomName)

    def ConfigureGateDefinitionCursor(self, measurement, coupling, cursorSet):
        """

        :param measurement:
        :type measurement:
        :param coupling:
        :type coupling:
        :param cursorSet:
        :type cursorSet:
        """
        return self._dllwrap.ConfigureGateDefinitionCursor(self._vi, measurement, coupling, cursorSet)

    def ConfigureGateCoupling(self, measurement, coupling):
        """

        :param measurement:
        :type measurement:
        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureGateCoupling(self._vi, measurement, coupling)

    def ConfigureGateDefinitionStartStop(self, measurement, mode, start, stop):
        """

        :param measurement:
        :type measurement:
        :param mode:
        :type mode:
        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.ConfigureGateDefinitionStartStop(self._vi, measurement, mode, start, stop)

    def ConfigureGateNoise(self, measurement, evaluationArea):
        """

        :param measurement:
        :type measurement:
        :param evaluationArea:
        :type evaluationArea:
        """
        return self._dllwrap.ConfigureGateNoise(self._vi, measurement, evaluationArea)

    def ConfigureLongTermState(self, measurement, longTermState):
        """

        :param measurement:
        :type measurement:
        :param longTermState:
        :type longTermState:
        """
        return self._dllwrap.ConfigureLongTermState(self._vi, measurement, longTermState)

    def ConfigureLongTermTotalMeasurementTime(self, measurement, totalMeasurementTime):
        """

        :param measurement:
        :type measurement:
        :param totalMeasurementTime:
        :type totalMeasurementTime:
        """
        return self._dllwrap.ConfigureLongTermTotalMeasurementTime(self._vi, measurement, totalMeasurementTime)

    def ConfigureLongTermMeasurementPoints(self, measurement, measurementPoints):
        """

        :param measurement:
        :type measurement:
        :param measurementPoints:
        :type measurementPoints:
        """
        return self._dllwrap.ConfigureLongTermMeasurementPoints(self._vi, measurement, measurementPoints)

    def ConfigureLongTermVerticalScaling(self, measurement, verticalScale, verticalOffset):
        """

        :param measurement:
        :type measurement:
        :param verticalScale:
        :type verticalScale:
        :param verticalOffset:
        :type verticalOffset:
        """
        return self._dllwrap.ConfigureLongTermVerticalScaling(self._vi, measurement, verticalScale, verticalOffset)

    def ConfigureLongTermVerticalContinuousAutoScaling(self, measurement, continuousAutoScale):
        """

        :param measurement:
        :type measurement:
        :param continuousAutoScale:
        :type continuousAutoScale:
        """
        return self._dllwrap.ConfigureLongTermVerticalContinuousAutoScaling(self._vi, measurement, continuousAutoScale)

    def LongTermVerticalAutoScale(self, measurement):
        """

        :param measurement:
        :type measurement:
        """
        return self._dllwrap.LongTermVerticalAutoScale(self._vi, measurement)

    def ConfigureStatisticsState(self, measurement, statistics):
        """

        :param measurement:
        :type measurement:
        :param statistics:
        :type statistics:
        """
        return self._dllwrap.ConfigureStatisticsState(self._vi, measurement, statistics)

    def ConfigureHistogramState(self, measurement, showHistogram):
        """

        :param measurement:
        :type measurement:
        :param showHistogram:
        :type showHistogram:
        """
        return self._dllwrap.ConfigureHistogramState(self._vi, measurement, showHistogram)

    def ConfigureResetStatisticsSettings(self, measurement, resetStatisticsMode, resetTime, resetCount):
        """

        :param measurement:
        :type measurement:
        :param resetStatisticsMode:
        :type resetStatisticsMode:
        :param resetTime:
        :type resetTime:
        :param resetCount:
        :type resetCount:
        """
        return self._dllwrap.ConfigureResetStatisticsSettings(
            self._vi, measurement, resetStatisticsMode, resetTime, resetCount
        )

    def ConfigureResetStatisticsMeasurementsCount(self, measurement, measurementsCount):
        """

        :param measurement:
        :type measurement:
        :param measurementsCount:
        :type measurementsCount:
        """
        return self._dllwrap.ConfigureResetStatisticsMeasurementsCount(self._vi, measurement, measurementsCount)

    def ResetStatistics(self, measurement):
        """

        :param measurement:
        :type measurement:
        """
        return self._dllwrap.ResetStatistics(self._vi, measurement)

    def ConfigureStatisticsNumberOfBins(self, measurement, numberOfBins):
        """

        :param measurement:
        :type measurement:
        :param numberOfBins:
        :type numberOfBins:
        """
        return self._dllwrap.ConfigureStatisticsNumberOfBins(self._vi, measurement, numberOfBins)

    def ConfigureEnvironmentSensorState(self, measurement, useSensor):
        """

        :param measurement:
        :type measurement:
        :param useSensor:
        :type useSensor:
        """
        return self._dllwrap.ConfigureEnvironmentSensorState(self._vi, measurement, useSensor)

    def ConfigureFrameToFrame(self, measurement, fromFrame, fromField, fromValue, toFrame, toField, toValue):
        """

        :param measurement:
        :type measurement:
        :param fromFrame:
        :type fromFrame:
        :param fromField:
        :type fromField:
        :param fromValue:
        :type fromValue:
        :param toFrame:
        :type toFrame:
        :param toField:
        :type toField:
        :param toValue:
        :type toValue:
        """
        return self._dllwrap.ConfigureFrameToFrame(
            self._vi,
            measurement,
            fromFrame,
            fromField,
            fromValue,
            toFrame,
            toField,
            toValue,
        )

    def ConfigureTriggerToFrame(self, measurement, direction, frame, field, value):
        """

        :param measurement:
        :type measurement:
        :param direction:
        :type direction:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param value:
        :type value:
        """
        return self._dllwrap.ConfigureTriggerToFrame(self._vi, measurement, direction, frame, field, value)

    def ConfigureFieldValueMeasurement(self, measurement, frame, field, value, fieldToBeTracked):
        """

        :param measurement:
        :type measurement:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param value:
        :type value:
        :param fieldToBeTracked:
        :type fieldToBeTracked:
        """
        return self._dllwrap.ConfigureFieldValueMeasurement(
            self._vi, measurement, frame, field, value, fieldToBeTracked
        )

    def ConfigureReferenceLevel(self, source, referenceLevelMode, levelDefinition, userLevelSelection):
        """

        :param source:
        :type source:
        :param referenceLevelMode:
        :type referenceLevelMode:
        :param levelDefinition:
        :type levelDefinition:
        :param userLevelSelection:
        :type userLevelSelection:
        """
        return self._dllwrap.ConfigureReferenceLevel(
            self._vi, source, referenceLevelMode, levelDefinition, userLevelSelection
        )

    def ConfigureReferenceLevelAutoSettings(self, source, signalLevelMode, histogramAveraging, averageCount):
        """

        :param source:
        :type source:
        :param signalLevelMode:
        :type signalLevelMode:
        :param histogramAveraging:
        :type histogramAveraging:
        :param averageCount:
        :type averageCount:
        """
        return self._dllwrap.ConfigureReferenceLevelAutoSettings(
            self._vi, source, signalLevelMode, histogramAveraging, averageCount
        )

    def ConfigureReferenceUserSignalLevel(self, source, topDistance, bottomDistance, highSignalLevel, lowSignalLevel):
        """

        :param source:
        :type source:
        :param topDistance:
        :type topDistance:
        :param bottomDistance:
        :type bottomDistance:
        :param highSignalLevel:
        :type highSignalLevel:
        :param lowSignalLevel:
        :type lowSignalLevel:
        """
        return self._dllwrap.ConfigureReferenceUserSignalLevel(
            self._vi, source, topDistance, bottomDistance, highSignalLevel, lowSignalLevel
        )

    def ConfigureUserReferenceLevel(self, source, topDistance, bottomDistance, upperLevel, lowerLevel):
        """

        :param source:
        :type source:
        :param topDistance:
        :type topDistance:
        :param bottomDistance:
        :type bottomDistance:
        :param upperLevel:
        :type upperLevel:
        :param lowerLevel:
        :type lowerLevel:
        """
        return self._dllwrap.ConfigureUserReferenceLevel(
            self._vi, source, topDistance, bottomDistance, upperLevel, lowerLevel
        )

    def ConfigureUserMiddleReferenceLevel(self, source, middleLevel):
        """

        :param source:
        :type source:
        :param middleLevel:
        :type middleLevel:
        """
        return self._dllwrap.ConfigureUserMiddleReferenceLevel(self._vi, source, middleLevel)

    def ConfigureReferenceLevelRelativeLevels(self, source, relativeLevels):
        """

        :param source:
        :type source:
        :param relativeLevels:
        :type relativeLevels:
        """
        return self._dllwrap.ConfigureReferenceLevelRelativeLevels(self._vi, source, relativeLevels)

    def ConfigureReferenceLevelRelativeUserLevels(self, source, upperLevel, middleLevel, lowerLevel):
        """

        :param source:
        :type source:
        :param upperLevel:
        :type upperLevel:
        :param middleLevel:
        :type middleLevel:
        :param lowerLevel:
        :type lowerLevel:
        """
        return self._dllwrap.ConfigureReferenceLevelRelativeUserLevels(
            self._vi, source, upperLevel, middleLevel, lowerLevel
        )

    def ConfigureReferenceLevelHysteresis(self, source, hysteresis):
        """

        :param source:
        :type source:
        :param hysteresis:
        :type hysteresis:
        """
        return self._dllwrap.ConfigureReferenceLevelHysteresis(self._vi, source, hysteresis)

    def ConfigureReferenceLevelTube(self, source, topOuter, topInner, bottomInner, bottomOuter):
        """

        :param source:
        :type source:
        :param topOuter:
        :type topOuter:
        :param topInner:
        :type topInner:
        :param bottomInner:
        :type bottomInner:
        :param bottomOuter:
        :type bottomOuter:
        """
        return self._dllwrap.ConfigureReferenceLevelTube(self._vi, source, topOuter, topInner, bottomInner, bottomOuter)

    def ConfigureReferenceLevelTubeRelative(self, source, relativeOuter, relativeInner):
        """

        :param source:
        :type source:
        :param relativeOuter:
        :type relativeOuter:
        :param relativeInner:
        :type relativeInner:
        """
        return self._dllwrap.ConfigureReferenceLevelTubeRelative(self._vi, source, relativeOuter, relativeInner)

    def ActualRecordLength(self):
        """"""
        return self._dllwrap.ActualRecordLength(self._vi)

    def SampleMode(self):
        """"""
        return self._dllwrap.SampleMode(self._vi)

    def SampleRate(self):
        """"""
        return self._dllwrap.SampleRate(self._vi)

    def AutoProbeSenseValue(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.AutoProbeSenseValue(self._vi, channel)

    def QueryMaskTestResults(self, maskName):
        """

        :param maskName:
        :type maskName:
        """
        return self._dllwrap.QueryMaskTestResults(self._vi, maskName)

    def ConfigureMaskTestActionsOnEvent(self, maskName, event, action):
        """

        :param maskName:
        :type maskName:
        :param event:
        :type event:
        :param action:
        :type action:
        """
        return self._dllwrap.ConfigureMaskTestActionsOnEvent(self._vi, maskName, event, action)

    def ConfigureMaskTestDefinition(self, action, maskName):
        """

        :param action:
        :type action:
        :param maskName:
        :type maskName:
        """
        return self._dllwrap.ConfigureMaskTestDefinition(self._vi, action, maskName)

    def ConvertMaskTestToUser(self, maskName):
        """

        :param maskName:
        :type maskName:
        """
        return self._dllwrap.ConvertMaskTestToUser(self._vi, maskName)

    def ConfigureMaskTestEnable(self, maskName, state):
        """

        :param maskName:
        :type maskName:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureMaskTestEnable(self._vi, maskName, state)

    def ConfigureMaskTestDefinitionType(self, maskName, definitionType):
        """

        :param maskName:
        :type maskName:
        :param definitionType:
        :type definitionType:
        """
        return self._dllwrap.ConfigureMaskTestDefinitionType(self._vi, maskName, definitionType)

    def ConfigureMaskTestSource(self, maskName, maskSource):
        """

        :param maskName:
        :type maskName:
        :param maskSource:
        :type maskSource:
        """
        return self._dllwrap.ConfigureMaskTestSource(self._vi, maskName, maskSource)

    def ConfigureMaskTestSettings(self, maskName, failCondition, violationTolerance):
        """

        :param maskName:
        :type maskName:
        :param failCondition:
        :type failCondition:
        :param violationTolerance:
        :type violationTolerance:
        """
        return self._dllwrap.ConfigureMaskTestSettings(self._vi, maskName, failCondition, violationTolerance)

    def ConfigureMaskTestSavePath(self, maskTestName, savePath):
        """

        :param maskTestName:
        :type maskTestName:
        :param savePath:
        :type savePath:
        """
        return self._dllwrap.ConfigureMaskTestSavePath(self._vi, maskTestName, savePath)

    def ConfigureMaskTestManagerOperations(self, operation, maskTestName):
        """

        :param operation:
        :type operation:
        :param maskTestName:
        :type maskTestName:
        """
        return self._dllwrap.ConfigureMaskTestManagerOperations(self._vi, operation, maskTestName)

    def ConfigureMaskTestSegments(self, maskName, maskSegment, state, region):
        """

        :param maskName:
        :type maskName:
        :param maskSegment:
        :type maskSegment:
        :param state:
        :type state:
        :param region:
        :type region:
        """
        return self._dllwrap.ConfigureMaskTestSegments(self._vi, maskName, maskSegment, state, region)

    def QueryMaskTestSegmentsCount(self, maskName, maskSegment):
        """

        :param maskName:
        :type maskName:
        :param maskSegment:
        :type maskSegment:
        """
        return self._dllwrap.QueryMaskTestSegmentsCount(self._vi, maskName, maskSegment)

    def ConfigureMaskTestSegmentsOperation(self, maskName, maskSegment, action):
        """

        :param maskName:
        :type maskName:
        :param maskSegment:
        :type maskSegment:
        :param action:
        :type action:
        """
        return self._dllwrap.ConfigureMaskTestSegmentsOperation(self._vi, maskName, maskSegment, action)

    def ConfigureMaskTestSegmentDefinition(self, maskName, maskSegment, pointIndex, xValue, yValue):
        """

        :param maskName:
        :type maskName:
        :param maskSegment:
        :type maskSegment:
        :param pointIndex:
        :type pointIndex:
        :param xValue:
        :type xValue:
        :param yValue:
        :type yValue:
        """
        return self._dllwrap.ConfigureMaskTestSegmentDefinition(
            self._vi, maskName, maskSegment, pointIndex, xValue, yValue
        )

    def QueryMaskTestSegmentDefinitionCount(self, maskName, maskSegment):
        """

        :param maskName:
        :type maskName:
        :param maskSegment:
        :type maskSegment:
        """
        return self._dllwrap.QueryMaskTestSegmentDefinitionCount(self._vi, maskName, maskSegment)

    def ConfigureMaskTestSegmentDefinitionOperation(self, maskName, definitionOfSegment, pointIndex, action):
        """

        :param maskName:
        :type maskName:
        :param definitionOfSegment:
        :type definitionOfSegment:
        :param pointIndex:
        :type pointIndex:
        :param action:
        :type action:
        """
        return self._dllwrap.ConfigureMaskTestSegmentDefinitionOperation(
            self._vi, maskName, definitionOfSegment, pointIndex, action
        )

    def ConfigureMaskTestRescale(self, definitionOfSegment, maskName, offsetX, factorX, offsetY, factorY):
        """

        :param definitionOfSegment:
        :type definitionOfSegment:
        :param maskName:
        :type maskName:
        :param offsetX:
        :type offsetX:
        :param factorX:
        :type factorX:
        :param offsetY:
        :type offsetY:
        :param factorY:
        :type factorY:
        """
        return self._dllwrap.ConfigureMaskTestRescale(
            self._vi, definitionOfSegment, maskName, offsetX, factorX, offsetY, factorY
        )

    def MaskTestRecalculate(self, definitionOfSegment, maskName):
        """

        :param definitionOfSegment:
        :type definitionOfSegment:
        :param maskName:
        :type maskName:
        """
        return self._dllwrap.MaskTestRecalculate(self._vi, definitionOfSegment, maskName)

    def ConfigureMaskTestNameState(self, showName):
        """

        :param showName:
        :type showName:
        """
        return self._dllwrap.ConfigureMaskTestNameState(self._vi, showName)

    def RenameMaskTest(self, oldMaskName, newMaskName):
        """

        :param oldMaskName:
        :type oldMaskName:
        :param newMaskName:
        :type newMaskName:
        """
        return self._dllwrap.RenameMaskTest(self._vi, oldMaskName, newMaskName)

    def ConfigureMaskViolationHighlighting(self, highlightHits, infiniteHighlight, highlightTime, matchColor):
        """

        :param highlightHits:
        :type highlightHits:
        :param infiniteHighlight:
        :type infiniteHighlight:
        :param highlightTime:
        :type highlightTime:
        :param matchColor:
        :type matchColor:
        """
        return self._dllwrap.ConfigureMaskViolationHighlighting(
            self._vi, highlightHits, infiniteHighlight, highlightTime, matchColor
        )

    def ConfigureMaskTestMaskColors(self, maskWithoutViolation, maskWithViolation, maskWithContact):
        """

        :param maskWithoutViolation:
        :type maskWithoutViolation:
        :param maskWithViolation:
        :type maskWithViolation:
        :param maskWithContact:
        :type maskWithContact:
        """
        return self._dllwrap.ConfigureMaskTestMaskColors(
            self._vi, maskWithoutViolation, maskWithViolation, maskWithContact
        )

    def ConfigureMaskTestWaveformCopy(self, maskName, usedReference):
        """

        :param maskName:
        :type maskName:
        :param usedReference:
        :type usedReference:
        """
        return self._dllwrap.ConfigureMaskTestWaveformCopy(self._vi, maskName, usedReference)

    def ConfigureMaskTestWaveformRescale(
        self, maskName, horizontalWidth, verticalWidth, verticalStretch, verticalPosition
    ):
        """

        :param maskName:
        :type maskName:
        :param horizontalWidth:
        :type horizontalWidth:
        :param verticalWidth:
        :type verticalWidth:
        :param verticalStretch:
        :type verticalStretch:
        :param verticalPosition:
        :type verticalPosition:
        """
        return self._dllwrap.ConfigureMaskTestWaveformRescale(
            self._vi,
            maskName,
            horizontalWidth,
            verticalWidth,
            verticalStretch,
            verticalPosition,
        )

    def ConfigureMaskTestEyeShape(self, maskName, shape):
        """

        :param maskName:
        :type maskName:
        :param shape:
        :type shape:
        """
        return self._dllwrap.ConfigureMaskTestEyeShape(self._vi, maskName, shape)

    def ConfigureMaskTestEyePolygon(
        self,
        maskName,
        mainWidth,
        mainHeight,
        minorWidth,
        minorHeight,
        copyLeft,
        interpatternLength,
        copyRight,
    ):
        """

        :param maskName:
        :type maskName:
        :param mainWidth:
        :type mainWidth:
        :param mainHeight:
        :type mainHeight:
        :param minorWidth:
        :type minorWidth:
        :param minorHeight:
        :type minorHeight:
        :param copyLeft:
        :type copyLeft:
        :param interpatternLength:
        :type interpatternLength:
        :param copyRight:
        :type copyRight:
        """
        return self._dllwrap.ConfigureMaskTestEyePolygon(
            self._vi,
            maskName,
            mainWidth,
            mainHeight,
            minorWidth,
            minorHeight,
            copyLeft,
            interpatternLength,
            copyRight,
        )

    def ConfigureMaskTestEyeTopBottom(self, maskName, topState, offsetTop, width, bottomState, offsetBottom, symmetric):
        """

        :param maskName:
        :type maskName:
        :param topState:
        :type topState:
        :param offsetTop:
        :type offsetTop:
        :param width:
        :type width:
        :param bottomState:
        :type bottomState:
        :param offsetBottom:
        :type offsetBottom:
        :param symmetric:
        :type symmetric:
        """
        return self._dllwrap.ConfigureMaskTestEyeTopBottom(
            self._vi,
            maskName,
            topState,
            offsetTop,
            width,
            bottomState,
            offsetBottom,
            symmetric,
        )

    def ConfigureMaskTestEyeCenter(self, maskName, horizontal, vertical):
        """

        :param maskName:
        :type maskName:
        :param horizontal:
        :type horizontal:
        :param vertical:
        :type vertical:
        """
        return self._dllwrap.ConfigureMaskTestEyeCenter(self._vi, maskName, horizontal, vertical)

    def NewSearch(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.NewSearch(self._vi, searchName)

    def DeleteSearch(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.DeleteSearch(self._vi, searchName)

    def ConfigureSearchSource(self, searchName, searchConditionSource):
        """

        :param searchName:
        :type searchName:
        :param searchConditionSource:
        :type searchConditionSource:
        """
        return self._dllwrap.ConfigureSearchSource(self._vi, searchName, searchConditionSource)

    def ConfigureSearchCategory(self, searchName, searchCategory):
        """

        :param searchName:
        :type searchName:
        :param searchCategory:
        :type searchCategory:
        """
        return self._dllwrap.ConfigureSearchCategory(self._vi, searchName, searchCategory)

    def ConfigureSearchControl(self, searchName, searchOnline):
        """

        :param searchName:
        :type searchName:
        :param searchOnline:
        :type searchOnline:
        """
        return self._dllwrap.ConfigureSearchControl(self._vi, searchName, searchOnline)

    def PerformSearch(self, searchName, searchResults):
        """

        :param searchName:
        :type searchName:
        :param searchResults:
        :type searchResults:
        """
        return self._dllwrap.PerformSearch(self._vi, searchName, searchResults)

    def ClearSearchResults(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.ClearSearchResults(self._vi, searchName)

    def QuerySearchResults(self, searchName, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySearchResults(self._vi, searchName, bufferSize)

    def SearchTriggerCopyConfiguration(self, searchName, triggerType, copyFrom):
        """

        :param searchName:
        :type searchName:
        :param triggerType:
        :type triggerType:
        :param copyFrom:
        :type copyFrom:
        """
        return self._dllwrap.SearchTriggerCopyConfiguration(self._vi, searchName, triggerType, copyFrom)

    def ConfigureEdgeTriggerSearch(self, searchName, triggerState, searchSource, triggerLevel, triggerSlope):
        """

        :param searchName:
        :type searchName:
        :param triggerState:
        :type triggerState:
        :param searchSource:
        :type searchSource:
        :param triggerLevel:
        :type triggerLevel:
        :param triggerSlope:
        :type triggerSlope:
        """
        return self._dllwrap.ConfigureEdgeTriggerSearch(
            self._vi, searchName, triggerState, searchSource, triggerLevel, triggerSlope
        )

    def ConfigureGlitchTriggerSearch(
        self,
        searchName,
        triggerState,
        searchSource,
        triggerLevel,
        glitchWidth,
        glitchPolarity,
        glitchCondition,
    ):
        """

        :param searchName:
        :type searchName:
        :param triggerState:
        :type triggerState:
        :param searchSource:
        :type searchSource:
        :param triggerLevel:
        :type triggerLevel:
        :param glitchWidth:
        :type glitchWidth:
        :param glitchPolarity:
        :type glitchPolarity:
        :param glitchCondition:
        :type glitchCondition:
        """
        return self._dllwrap.ConfigureGlitchTriggerSearch(
            self._vi,
            searchName,
            triggerState,
            searchSource,
            triggerLevel,
            glitchWidth,
            glitchPolarity,
            glitchCondition,
        )

    def ConfigureWidthTriggerSearch(
        self,
        searchName,
        triggerState,
        searchSource,
        triggerLevel,
        width,
        widthDelta,
        widthPolarity,
        widthRange,
    ):
        """

        :param searchName:
        :type searchName:
        :param triggerState:
        :type triggerState:
        :param searchSource:
        :type searchSource:
        :param triggerLevel:
        :type triggerLevel:
        :param width:
        :type width:
        :param widthDelta:
        :type widthDelta:
        :param widthPolarity:
        :type widthPolarity:
        :param widthRange:
        :type widthRange:
        """
        return self._dllwrap.ConfigureWidthTriggerSearch(
            self._vi,
            searchName,
            triggerState,
            searchSource,
            triggerLevel,
            width,
            widthDelta,
            widthPolarity,
            widthRange,
        )

    def ConfigureRuntTriggerSearch(
        self,
        searchName,
        triggerState,
        searchSource,
        runtLowThreshold,
        runtHighThreshold,
        runtPolarity,
    ):
        """

        :param searchName:
        :type searchName:
        :param triggerState:
        :type triggerState:
        :param searchSource:
        :type searchSource:
        :param runtLowThreshold:
        :type runtLowThreshold:
        :param runtHighThreshold:
        :type runtHighThreshold:
        :param runtPolarity:
        :type runtPolarity:
        """
        return self._dllwrap.ConfigureRuntTriggerSearch(
            self._vi,
            searchName,
            triggerState,
            searchSource,
            runtLowThreshold,
            runtHighThreshold,
            runtPolarity,
        )

    def ConfigureRuntTriggerSearchRange(self, searchName, runtWidth, runtDelta, runtRange):
        """

        :param searchName:
        :type searchName:
        :param runtWidth:
        :type runtWidth:
        :param runtDelta:
        :type runtDelta:
        :param runtRange:
        :type runtRange:
        """
        return self._dllwrap.ConfigureRuntTriggerSearchRange(self._vi, searchName, runtWidth, runtDelta, runtRange)

    def ConfigureWindowTriggerSearch(self, searchName, triggerState, searchSource, windowLowerLimit, windowUpperLimit):
        """

        :param searchName:
        :type searchName:
        :param triggerState:
        :type triggerState:
        :param searchSource:
        :type searchSource:
        :param windowLowerLimit:
        :type windowLowerLimit:
        :param windowUpperLimit:
        :type windowUpperLimit:
        """
        return self._dllwrap.ConfigureWindowTriggerSearch(
            self._vi,
            searchName,
            triggerState,
            searchSource,
            windowLowerLimit,
            windowUpperLimit,
        )

    def ConfigureWindowTriggerSearchRange(self, searchName, verticalCondition, timeCondition, windowWidth, windowDelta):
        """

        :param searchName:
        :type searchName:
        :param verticalCondition:
        :type verticalCondition:
        :param timeCondition:
        :type timeCondition:
        :param windowWidth:
        :type windowWidth:
        :param windowDelta:
        :type windowDelta:
        """
        return self._dllwrap.ConfigureWindowTriggerSearchRange(
            self._vi,
            searchName,
            verticalCondition,
            timeCondition,
            windowWidth,
            windowDelta,
        )

    def ConfigureTimeoutTriggerSearch(
        self,
        searchName,
        triggerState,
        searchSource,
        triggerLevel,
        timeoutValue,
        timeoutCondition,
    ):
        """

        :param searchName:
        :type searchName:
        :param triggerState:
        :type triggerState:
        :param searchSource:
        :type searchSource:
        :param triggerLevel:
        :type triggerLevel:
        :param timeoutValue:
        :type timeoutValue:
        :param timeoutCondition:
        :type timeoutCondition:
        """
        return self._dllwrap.ConfigureTimeoutTriggerSearch(
            self._vi,
            searchName,
            triggerState,
            searchSource,
            triggerLevel,
            timeoutValue,
            timeoutCondition,
        )

    def ConfigureIntervalTriggerSearch(
        self,
        searchName,
        triggerState,
        searchSource,
        triggerLevel,
        intervalWidth,
        intervalDelta,
        intervalPolarity,
        intervalCondition,
    ):
        """

        :param searchName:
        :type searchName:
        :param triggerState:
        :type triggerState:
        :param searchSource:
        :type searchSource:
        :param triggerLevel:
        :type triggerLevel:
        :param intervalWidth:
        :type intervalWidth:
        :param intervalDelta:
        :type intervalDelta:
        :param intervalPolarity:
        :type intervalPolarity:
        :param intervalCondition:
        :type intervalCondition:
        """
        return self._dllwrap.ConfigureIntervalTriggerSearch(
            self._vi,
            searchName,
            triggerState,
            searchSource,
            triggerLevel,
            intervalWidth,
            intervalDelta,
            intervalPolarity,
            intervalCondition,
        )

    def ConfigureSlewRateTriggerSearch(
        self,
        searchName,
        triggerState,
        searchSource,
        slewRateLowerLimit,
        slewRateUpperLimit,
    ):
        """

        :param searchName:
        :type searchName:
        :param triggerState:
        :type triggerState:
        :param searchSource:
        :type searchSource:
        :param slewRateLowerLimit:
        :type slewRateLowerLimit:
        :param slewRateUpperLimit:
        :type slewRateUpperLimit:
        """
        return self._dllwrap.ConfigureSlewRateTriggerSearch(
            self._vi,
            searchName,
            triggerState,
            searchSource,
            slewRateLowerLimit,
            slewRateUpperLimit,
        )

    def ConfigureSlewRateTriggerSearchRange(
        self, searchName, slewRate, slewRateDelta, slewRateCondition, slewRatePolarity
    ):
        """

        :param searchName:
        :type searchName:
        :param slewRate:
        :type slewRate:
        :param slewRateDelta:
        :type slewRateDelta:
        :param slewRateCondition:
        :type slewRateCondition:
        :param slewRatePolarity:
        :type slewRatePolarity:
        """
        return self._dllwrap.ConfigureSlewRateTriggerSearchRange(
            self._vi,
            searchName,
            slewRate,
            slewRateDelta,
            slewRateCondition,
            slewRatePolarity,
        )

    def ConfigureData2ClockTriggerSearch(
        self,
        searchName,
        triggerState,
        searchSource,
        dataLevel,
        clockSource,
        clockLevel,
        holdTime,
        setupTime,
        clockEdge,
    ):
        """

        :param searchName:
        :type searchName:
        :param triggerState:
        :type triggerState:
        :param searchSource:
        :type searchSource:
        :param dataLevel:
        :type dataLevel:
        :param clockSource:
        :type clockSource:
        :param clockLevel:
        :type clockLevel:
        :param holdTime:
        :type holdTime:
        :param setupTime:
        :type setupTime:
        :param clockEdge:
        :type clockEdge:
        """
        return self._dllwrap.ConfigureData2ClockTriggerSearch(
            self._vi,
            searchName,
            triggerState,
            searchSource,
            dataLevel,
            clockSource,
            clockLevel,
            holdTime,
            setupTime,
            clockEdge,
        )

    def ConfigureStateTriggerSearch(self, searchName, triggerState, clockSource, clockEdge, clockLevel):
        """

        :param searchName:
        :type searchName:
        :param triggerState:
        :type triggerState:
        :param clockSource:
        :type clockSource:
        :param clockEdge:
        :type clockEdge:
        :param clockLevel:
        :type clockLevel:
        """
        return self._dllwrap.ConfigureStateTriggerSearch(
            self._vi, searchName, triggerState, clockSource, clockEdge, clockLevel
        )

    def ConfigureStateTriggerSearchQualification(self, searchName, channel, channelEnabled, channelLogic):
        """

        :param searchName:
        :type searchName:
        :param channel:
        :type channel:
        :param channelEnabled:
        :type channelEnabled:
        :param channelLogic:
        :type channelLogic:
        """
        return self._dllwrap.ConfigureStateTriggerSearchQualification(
            self._vi, searchName, channel, channelEnabled, channelLogic
        )

    def ConfigureStateTriggerSearchQualificationMultichannelLogic(
        self, searchName, channelCombination, multichannelLogic
    ):
        """

        :param searchName:
        :type searchName:
        :param channelCombination:
        :type channelCombination:
        :param multichannelLogic:
        :type multichannelLogic:
        """
        return self._dllwrap.ConfigureStateTriggerSearchQualificationMultichannelLogic(
            self._vi, searchName, channelCombination, multichannelLogic
        )

    def ConfigurePatternTriggerSearch(
        self,
        searchName,
        triggerState,
        patternMode,
        timeoutCondition,
        timeout,
        patternWidth,
        patternDelta,
        patternCondition,
    ):
        """

        :param searchName:
        :type searchName:
        :param triggerState:
        :type triggerState:
        :param patternMode:
        :type patternMode:
        :param timeoutCondition:
        :type timeoutCondition:
        :param timeout:
        :type timeout:
        :param patternWidth:
        :type patternWidth:
        :param patternDelta:
        :type patternDelta:
        :param patternCondition:
        :type patternCondition:
        """
        return self._dllwrap.ConfigurePatternTriggerSearch(
            self._vi,
            searchName,
            triggerState,
            patternMode,
            timeoutCondition,
            timeout,
            patternWidth,
            patternDelta,
            patternCondition,
        )

    def ConfigurePatternTriggerSearchQualification(self, searchName, channel, channelEnabled, channelLogic):
        """

        :param searchName:
        :type searchName:
        :param channel:
        :type channel:
        :param channelEnabled:
        :type channelEnabled:
        :param channelLogic:
        :type channelLogic:
        """
        return self._dllwrap.ConfigurePatternTriggerSearchQualification(
            self._vi, searchName, channel, channelEnabled, channelLogic
        )

    def ConfigurePatternTriggerSearchQualificationMultichannelLogic(
        self, searchName, channelCombination, multichannelLogic
    ):
        """

        :param searchName:
        :type searchName:
        :param channelCombination:
        :type channelCombination:
        :param multichannelLogic:
        :type multichannelLogic:
        """
        return self._dllwrap.ConfigurePatternTriggerSearchQualificationMultichannelLogic(
            self._vi, searchName, channelCombination, multichannelLogic
        )

    def QueryTriggerSearchCondition(self, searchName, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryTriggerSearchCondition(self._vi, searchName, bufferSize)

    def ConfigureSearchGateState(self, searchName, useGate):
        """

        :param searchName:
        :type searchName:
        :param useGate:
        :type useGate:
        """
        return self._dllwrap.ConfigureSearchGateState(self._vi, searchName, useGate)

    def ConfigureSearchGateShow(self, searchName, showGate):
        """

        :param searchName:
        :type searchName:
        :param showGate:
        :type showGate:
        """
        return self._dllwrap.ConfigureSearchGateShow(self._vi, searchName, showGate)

    def ConfigureSearchGateDefinitionZoom(self, searchName, zoomCoupling, reserved):
        """

        :param searchName:
        :type searchName:
        :param zoomCoupling:
        :type zoomCoupling:
        :param reserved:
        :type reserved:
        """
        return self._dllwrap.ConfigureSearchGateDefinitionZoom(self._vi, searchName, zoomCoupling, reserved)

    def ConfigureSearchGateDefinitionZoomDiagram(self, searchName, diagram, zoom):
        """

        :param searchName:
        :type searchName:
        :param diagram:
        :type diagram:
        :param zoom:
        :type zoom:
        """
        return self._dllwrap.ConfigureSearchGateDefinitionZoomDiagram(self._vi, searchName, diagram, zoom)

    def ConfigureSearchGateDefinitionStartStop(self, searchName, mode, start, stop):
        """

        :param searchName:
        :type searchName:
        :param mode:
        :type mode:
        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.ConfigureSearchGateDefinitionStartStop(self._vi, searchName, mode, start, stop)

    def ConfigureSearchResultTable(self, searchName, showResultTable, sortMode, sortAscending, maxResultCount):
        """

        :param searchName:
        :type searchName:
        :param showResultTable:
        :type showResultTable:
        :param sortMode:
        :type sortMode:
        :param sortAscending:
        :type sortAscending:
        :param maxResultCount:
        :type maxResultCount:
        """
        return self._dllwrap.ConfigureSearchResultTable(
            self._vi, searchName, showResultTable, sortMode, sortAscending, maxResultCount
        )

    def ConfigureSearchZoomWindowState(self, searchName, showSearchZoomWindows):
        """

        :param searchName:
        :type searchName:
        :param showSearchZoomWindows:
        :type showSearchZoomWindows:
        """
        return self._dllwrap.ConfigureSearchZoomWindowState(self._vi, searchName, showSearchZoomWindows)

    def ConfigureSearchZoomWindowXAxis(self, searchName, horizonatalMode, position, range):
        """

        :param searchName:
        :type searchName:
        :param horizonatalMode:
        :type horizonatalMode:
        :param position:
        :type position:
        :param range:
        :type range:
        """
        return self._dllwrap.ConfigureSearchZoomWindowXAxis(self._vi, searchName, horizonatalMode, position, range)

    def ConfigureSearchZoomWindowYAxis(self, searchName, verticalMode, position, range):
        """

        :param searchName:
        :type searchName:
        :param verticalMode:
        :type verticalMode:
        :param position:
        :type position:
        :param range:
        :type range:
        """
        return self._dllwrap.ConfigureSearchZoomWindowYAxis(self._vi, searchName, verticalMode, position, range)

    def ConfigureSearchNoiseReject(self, searchName, searchSource, useNoiseReject, hysteresisMode, hysteresis):
        """

        :param searchName:
        :type searchName:
        :param searchSource:
        :type searchSource:
        :param useNoiseReject:
        :type useNoiseReject:
        :param hysteresisMode:
        :type hysteresisMode:
        :param hysteresis:
        :type hysteresis:
        """
        return self._dllwrap.ConfigureSearchNoiseReject(
            self._vi, searchName, searchSource, useNoiseReject, hysteresisMode, hysteresis
        )

    def ConfigureDecodeState(self, serialBus, state):
        """

        :param serialBus:
        :type serialBus:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureDecodeState(self._vi, serialBus, state)

    def ConfigureBusLabel(self, serialBus, busLabel):
        """

        :param serialBus:
        :type serialBus:
        :param busLabel:
        :type busLabel:
        """
        return self._dllwrap.ConfigureBusLabel(self._vi, serialBus, busLabel)

    def ShowDecodeTable(self, serialBus, showTable):
        """

        :param serialBus:
        :type serialBus:
        :param showTable:
        :type showTable:
        """
        return self._dllwrap.ShowDecodeTable(self._vi, serialBus, showTable)

    def ConfigureProtocolResultTableZoomCouplingEnabled(self, serialBus, zoomCouplingEnabled):
        """

        :param serialBus:
        :type serialBus:
        :param zoomCouplingEnabled:
        :type zoomCouplingEnabled:
        """
        return self._dllwrap.ConfigureProtocolResultTableZoomCouplingEnabled(self._vi, serialBus, zoomCouplingEnabled)

    def ConfigureProtocolResultTablePosition(self, position):
        """

        :param position:
        :type position:
        """
        return self._dllwrap.ConfigureProtocolResultTablePosition(self._vi, position)

    def ConfigureDataFormat(self, dataFormat):
        """

        :param dataFormat:
        :type dataFormat:
        """
        return self._dllwrap.ConfigureDataFormat(self._vi, dataFormat)

    def ConfigureBusDataFormat(self, serialBus, dataFormat):
        """

        :param serialBus:
        :type serialBus:
        :param dataFormat:
        :type dataFormat:
        """
        return self._dllwrap.ConfigureBusDataFormat(self._vi, serialBus, dataFormat)

    def ConfigureShowThresholdLines(self, serialBus, state):
        """

        :param serialBus:
        :type serialBus:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureShowThresholdLines(self._vi, serialBus, state)

    def ConfigureShowDetails(self, serialBus, state):
        """

        :param serialBus:
        :type serialBus:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureShowDetails(self._vi, serialBus, state)

    def ConfigureLabelList(self, serialBus, state):
        """

        :param serialBus:
        :type serialBus:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureLabelList(self._vi, serialBus, state)

    def ConfigureBusLabelListFile(self, serialBus, fileName):
        """

        :param serialBus:
        :type serialBus:
        :param fileName:
        :type fileName:
        """
        return self._dllwrap.ConfigureBusLabelListFile(self._vi, serialBus, fileName)

    def SetReferenceLevels(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.SetReferenceLevels(self._vi, serialBus)

    def AutosetProtocolThresholdAndBitrate(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.AutosetProtocolThresholdAndBitrate(self._vi, serialBus)

    def ConfigureI2CSource(self, serialBus, line, waveformSource):
        """

        :param serialBus:
        :type serialBus:
        :param line:
        :type line:
        :param waveformSource:
        :type waveformSource:
        """
        return self._dllwrap.ConfigureI2CSource(self._vi, serialBus, line, waveformSource)

    def ConfigureI2CThreshold(self, serialBus, preset, SCLThreshold, SDAThreshold):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param SCLThreshold:
        :type SCLThreshold:
        :param SDAThreshold:
        :type SDAThreshold:
        """
        return self._dllwrap.ConfigureI2CThreshold(self._vi, serialBus, preset, SCLThreshold, SDAThreshold)

    def ConfigureI2CRWBit(self, serialBus, RWBit):
        """

        :param serialBus:
        :type serialBus:
        :param RWBit:
        :type RWBit:
        """
        return self._dllwrap.ConfigureI2CRWBit(self._vi, serialBus, RWBit)

    def ConfigureI2CTriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureI2CTriggerType(self._vi, trigger, type)

    def ConfigureI2CTriggerAddress(self, trigger, addressType, RWBitAddress, condition, addressMin, addressMax):
        """

        :param trigger:
        :type trigger:
        :param addressType:
        :type addressType:
        :param RWBitAddress:
        :type RWBitAddress:
        :param condition:
        :type condition:
        :param addressMin:
        :type addressMin:
        :param addressMax:
        :type addressMax:
        """
        return self._dllwrap.ConfigureI2CTriggerAddress(
            self._vi,
            trigger,
            addressType,
            RWBitAddress,
            condition,
            addressMin,
            addressMax,
        )

    def ConfigureI2CTriggerAddressORState(self, trigger, ORSlot, ORSlotState):
        """

        :param trigger:
        :type trigger:
        :param ORSlot:
        :type ORSlot:
        :param ORSlotState:
        :type ORSlotState:
        """
        return self._dllwrap.ConfigureI2CTriggerAddressORState(self._vi, trigger, ORSlot, ORSlotState)

    def ConfigureI2CTriggerAddressOR(self, trigger, ORSlot, addressType, RWBitAddress, address):
        """

        :param trigger:
        :type trigger:
        :param ORSlot:
        :type ORSlot:
        :param addressType:
        :type addressType:
        :param RWBitAddress:
        :type RWBitAddress:
        :param address:
        :type address:
        """
        return self._dllwrap.ConfigureI2CTriggerAddressOR(self._vi, trigger, ORSlot, addressType, RWBitAddress, address)

    def ConfigureI2CTriggerData(self, trigger, condition, addressMin, addressMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param addressMin:
        :type addressMin:
        :param addressMax:
        :type addressMax:
        """
        return self._dllwrap.ConfigureI2CTriggerData(self._vi, trigger, condition, addressMin, addressMax)

    def ConfigureI2CTriggerDataPosition(self, trigger, condition, indexMin, indexMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param indexMin:
        :type indexMin:
        :param indexMax:
        :type indexMax:
        """
        return self._dllwrap.ConfigureI2CTriggerDataPosition(self._vi, trigger, condition, indexMin, indexMax)

    def ConfigureI2CTriggerNoAck(self, trigger, addressNack, dataWriteNack, dataReadNack):
        """

        :param trigger:
        :type trigger:
        :param addressNack:
        :type addressNack:
        :param dataWriteNack:
        :type dataWriteNack:
        :param dataReadNack:
        :type dataReadNack:
        """
        return self._dllwrap.ConfigureI2CTriggerNoAck(self._vi, trigger, addressNack, dataWriteNack, dataReadNack)

    def QueryI2CFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryI2CFrameCount(self._vi, serialBus)

    def QueryI2CFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CFrameStatus(self._vi, serialBus, frame)

    def QueryI2CFrameAccessBitStart(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CFrameAccessBitStart(self._vi, serialBus, frame)

    def QueryI2CFrameSlaveAddress(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CFrameSlaveAddress(self._vi, serialBus, frame)

    def QueryI2CFrameAddressAckBitStartTime(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CFrameAddressAckBitStartTime(self._vi, serialBus, frame)

    def QueryI2CFrameAddressAckBitStart(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CFrameAddressAckBitStart(self._vi, serialBus, frame)

    def QueryI2CFrameAddressComplete(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CFrameAddressComplete(self._vi, serialBus, frame)

    def QueryI2CFrameBitRate(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CFrameBitRate(self._vi, serialBus, frame)

    def QueryI2CFrameLength(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CFrameLength(self._vi, serialBus, frame)

    def QueryI2CFrameData(self, serialBus, frame, byteNumber):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryI2CFrameData(self._vi, serialBus, frame, byteNumber)

    def QueryI2CFrameDataByteStart(self, serialBus, frame, byteNumber):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryI2CFrameDataByteStart(self._vi, serialBus, frame, byteNumber)

    def QueryI2CFrameDataByteAcknowledgeBitStart(self, serialBus, frame, byteNumber):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryI2CFrameDataByteAcknowledgeBitStart(self._vi, serialBus, frame, byteNumber)

    def QueryI2CFrameDataComplete(self, serialBus, frame, byteNumber):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryI2CFrameDataComplete(self._vi, serialBus, frame, byteNumber)

    def QueryI2CFrameAllData(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryI2CFrameAllData(self._vi, serialBus, frame, bufferSize)

    def QueryI2CFrameLabel(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryI2CFrameLabel(self._vi, serialBus, frame, bufferSize)

    def ConfigureI2CSearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureI2CSearchType(self._vi, searchName, type)

    def ConfigureI2CSearchCriteria(
        self,
        searchName,
        start,
        repeatedStart,
        stop,
        nack,
        address,
        addressOR,
        addressData,
    ):
        """

        :param searchName:
        :type searchName:
        :param start:
        :type start:
        :param repeatedStart:
        :type repeatedStart:
        :param stop:
        :type stop:
        :param nack:
        :type nack:
        :param address:
        :type address:
        :param addressOR:
        :type addressOR:
        :param addressData:
        :type addressData:
        """
        return self._dllwrap.ConfigureI2CSearchCriteria(
            self._vi,
            searchName,
            start,
            repeatedStart,
            stop,
            nack,
            address,
            addressOR,
            addressData,
        )

    def ConfigureI2CSearchAddress(self, searchName, addressType, RWBitAddress, condition, addressMin, addressMax):
        """

        :param searchName:
        :type searchName:
        :param addressType:
        :type addressType:
        :param RWBitAddress:
        :type RWBitAddress:
        :param condition:
        :type condition:
        :param addressMin:
        :type addressMin:
        :param addressMax:
        :type addressMax:
        """
        return self._dllwrap.ConfigureI2CSearchAddress(
            self._vi,
            searchName,
            addressType,
            RWBitAddress,
            condition,
            addressMin,
            addressMax,
        )

    def ConfigureI2CSearchAddressORState(self, searchName, ORSlot, ORSlotState):
        """

        :param searchName:
        :type searchName:
        :param ORSlot:
        :type ORSlot:
        :param ORSlotState:
        :type ORSlotState:
        """
        return self._dllwrap.ConfigureI2CSearchAddressORState(self._vi, searchName, ORSlot, ORSlotState)

    def ConfigureI2CSearchAddressOR(self, searchName, ORSlot, addressType, RWBitAddress, address):
        """

        :param searchName:
        :type searchName:
        :param ORSlot:
        :type ORSlot:
        :param addressType:
        :type addressType:
        :param RWBitAddress:
        :type RWBitAddress:
        :param address:
        :type address:
        """
        return self._dllwrap.ConfigureI2CSearchAddressOR(
            self._vi, searchName, ORSlot, addressType, RWBitAddress, address
        )

    def ConfigureI2CSearchData(self, searchName, condition, addressMin, addressMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param addressMin:
        :type addressMin:
        :param addressMax:
        :type addressMax:
        """
        return self._dllwrap.ConfigureI2CSearchData(self._vi, searchName, condition, addressMin, addressMax)

    def ConfigureI2CSearchDataPosition(self, searchName, condition, indexMin, indexMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param indexMin:
        :type indexMin:
        :param indexMax:
        :type indexMax:
        """
        return self._dllwrap.ConfigureI2CSearchDataPosition(self._vi, searchName, condition, indexMin, indexMax)

    def ConfigureI2CSearchNoAck(self, searchName, addressNack, dataWriteNack, dataReadNack):
        """

        :param searchName:
        :type searchName:
        :param addressNack:
        :type addressNack:
        :param dataWriteNack:
        :type dataWriteNack:
        :param dataReadNack:
        :type dataReadNack:
        """
        return self._dllwrap.ConfigureI2CSearchNoAck(self._vi, searchName, addressNack, dataWriteNack, dataReadNack)

    def QueryI2CSearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryI2CSearchFrameCount(self._vi, searchName)

    def QueryI2CSearchFrameStatus(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CSearchFrameStatus(self._vi, searchName, frame)

    def QueryI2CSearchFrameAccessBitStart(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CSearchFrameAccessBitStart(self._vi, searchName, frame)

    def QueryI2CSearchFrameSlaveAddress(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CSearchFrameSlaveAddress(self._vi, searchName, frame)

    def QueryI2CSearchFrameAddressAckBitStartTime(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CSearchFrameAddressAckBitStartTime(self._vi, searchName, frame)

    def QueryI2CSearchFrameAddressAckBitStart(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CSearchFrameAddressAckBitStart(self._vi, searchName, frame)

    def QueryI2CSearchFrameAddressComplete(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CSearchFrameAddressComplete(self._vi, searchName, frame)

    def QueryI2CSearchFrameLength(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryI2CSearchFrameLength(self._vi, searchName, frame)

    def QueryI2CSearchFrameData(self, searchName, frame, byteNumber):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryI2CSearchFrameData(self._vi, searchName, frame, byteNumber)

    def QueryI2CSearchFrameDataByteStart(self, searchName, frame, byteNumber):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryI2CSearchFrameDataByteStart(self._vi, searchName, frame, byteNumber)

    def QueryI2CSearchFrameDataByteAcknowledgeBitStart(self, searchName, frame, byteNumber):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryI2CSearchFrameDataByteAcknowledgeBitStart(self._vi, searchName, frame, byteNumber)

    def QueryI2CSearchFrameDataComplete(self, searchName, frame, byteNumber):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryI2CSearchFrameDataComplete(self._vi, searchName, frame, byteNumber)

    def QueryI2CSearchFrameAllData(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryI2CSearchFrameAllData(self._vi, searchName, frame, bufferSize)

    def QueryI2CSearchFrameLabel(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryI2CSearchFrameLabel(self._vi, searchName, frame, bufferSize)

    def ConfigureSPISource(self, serialBus, line, waveformSource):
        """

        :param serialBus:
        :type serialBus:
        :param line:
        :type line:
        :param waveformSource:
        :type waveformSource:
        """
        return self._dllwrap.ConfigureSPISource(self._vi, serialBus, line, waveformSource)

    def ConfigureSPIThreshold(self, serialBus, preset, clockThreshold, SSThreshold, MISOThreshold, MOSIThreshold):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param clockThreshold:
        :type clockThreshold:
        :param SSThreshold:
        :type SSThreshold:
        :param MISOThreshold:
        :type MISOThreshold:
        :param MOSIThreshold:
        :type MOSIThreshold:
        """
        return self._dllwrap.ConfigureSPIThreshold(
            self._vi,
            serialBus,
            preset,
            clockThreshold,
            SSThreshold,
            MISOThreshold,
            MOSIThreshold,
        )

    def ConfigureSPIPolarity(self, serialBus, line, polarity):
        """

        :param serialBus:
        :type serialBus:
        :param line:
        :type line:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.ConfigureSPIPolarity(self._vi, serialBus, line, polarity)

    def ConfigureSPIWord(self, serialBus, bitOrder, wordLength):
        """

        :param serialBus:
        :type serialBus:
        :param bitOrder:
        :type bitOrder:
        :param wordLength:
        :type wordLength:
        """
        return self._dllwrap.ConfigureSPIWord(self._vi, serialBus, bitOrder, wordLength)

    def ConfigureSPIFrameStart(self, serialBus, frameCondition, clockTimeout):
        """

        :param serialBus:
        :type serialBus:
        :param frameCondition:
        :type frameCondition:
        :param clockTimeout:
        :type clockTimeout:
        """
        return self._dllwrap.ConfigureSPIFrameStart(self._vi, serialBus, frameCondition, clockTimeout)

    def ConfigureSPITriggerType(self, type):
        """

        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSPITriggerType(self._vi, type)

    def ConfigureSPITriggerData(self, trigger, condition, MOSIPattern, MISOPattern):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param MOSIPattern:
        :type MOSIPattern:
        :param MISOPattern:
        :type MISOPattern:
        """
        return self._dllwrap.ConfigureSPITriggerData(self._vi, trigger, condition, MOSIPattern, MISOPattern)

    def ConfigureSPITriggerDataPosition(self, trigger, condition, searchMode, indexMin, indexMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param searchMode:
        :type searchMode:
        :param indexMin:
        :type indexMin:
        :param indexMax:
        :type indexMax:
        """
        return self._dllwrap.ConfigureSPITriggerDataPosition(
            self._vi, trigger, condition, searchMode, indexMin, indexMax
        )

    def QuerySPIFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QuerySPIFrameCount(self._vi, serialBus)

    def QuerySPIWordCount(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySPIWordCount(self._vi, serialBus, frame)

    def QuerySPIFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySPIFrameStatus(self._vi, serialBus, frame)

    def QuerySPIFrameBitRate(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySPIFrameBitRate(self._vi, serialBus, frame)

    def QuerySPIFrameData(self, serialBus, frame, word):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param word:
        :type word:
        """
        return self._dllwrap.QuerySPIFrameData(self._vi, serialBus, frame, word)

    def QuerySPIFrameAllData(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySPIFrameAllData(self._vi, serialBus, frame, bufferSize)

    def QuerySPIFrameFormattedValue(self, serialBus, frame, word, line, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param word:
        :type word:
        :param line:
        :type line:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySPIFrameFormattedValue(self._vi, serialBus, frame, word, line, bufferSize)

    def ConfigureSPISearchMode(self, searchName, mode):
        """

        :param searchName:
        :type searchName:
        :param mode:
        :type mode:
        """
        return self._dllwrap.ConfigureSPISearchMode(self._vi, searchName, mode)

    def ConfigureSPISearchDataOperator(self, searchName, dataOperator):
        """

        :param searchName:
        :type searchName:
        :param dataOperator:
        :type dataOperator:
        """
        return self._dllwrap.ConfigureSPISearchDataOperator(self._vi, searchName, dataOperator)

    def ConfigureSPISearchDataPositionOperator(self, searchName, dataPositionOperator):
        """

        :param searchName:
        :type searchName:
        :param dataPositionOperator:
        :type dataPositionOperator:
        """
        return self._dllwrap.ConfigureSPISearchDataPositionOperator(self._vi, searchName, dataPositionOperator)

    def ConfigureSPISearchDataPosition(self, searchName, position):
        """

        :param searchName:
        :type searchName:
        :param position:
        :type position:
        """
        return self._dllwrap.ConfigureSPISearchDataPosition(self._vi, searchName, position)

    def ConfigureSPISearchDataAlignment(self, searchName, dataAlignment):
        """

        :param searchName:
        :type searchName:
        :param dataAlignment:
        :type dataAlignment:
        """
        return self._dllwrap.ConfigureSPISearchDataAlignment(self._vi, searchName, dataAlignment)

    def ConfigureSPISearchDataPositionTo(self, searchName, positionTo):
        """

        :param searchName:
        :type searchName:
        :param positionTo:
        :type positionTo:
        """
        return self._dllwrap.ConfigureSPISearchDataPositionTo(self._vi, searchName, positionTo)

    def ConfigureSPISearchPattern(self, searchName, selectPattern, pattern):
        """

        :param searchName:
        :type searchName:
        :param selectPattern:
        :type selectPattern:
        :param pattern:
        :type pattern:
        """
        return self._dllwrap.ConfigureSPISearchPattern(self._vi, searchName, selectPattern, pattern)

    def QuerySPISearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QuerySPISearchFrameCount(self._vi, searchName)

    def QuerySPISearchFrame(self, frame, searchName):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QuerySPISearchFrame(self._vi, frame, searchName)

    def QuerySPISearchFrameStatus(self, frame, searchName, bufferSize):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySPISearchFrameStatus(self._vi, frame, searchName, bufferSize)

    def QuerySPIFrameResultCount(self, frame):
        """

        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySPIFrameResultCount(self._vi, frame)

    def QuerySPISearchFrameData(self, frame, searchName, bufferSize):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySPISearchFrameData(self._vi, frame, searchName, bufferSize)

    def QuerySPISearchFrameWordCount(self, frame, searchName):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QuerySPISearchFrameWordCount(self._vi, frame, searchName)

    def QuerySPISearchFrameWord(self, frame, word, searchName):
        """

        :param frame:
        :type frame:
        :param word:
        :type word:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QuerySPISearchFrameWord(self._vi, frame, word, searchName)

    def QuerySPISearchFrameWordMISO(self, frame, word, searchName):
        """

        :param frame:
        :type frame:
        :param word:
        :type word:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QuerySPISearchFrameWordMISO(self._vi, frame, word, searchName)

    def QuerySPISearchFrameWordMOSI(self, frame, word, searchName):
        """

        :param frame:
        :type frame:
        :param word:
        :type word:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QuerySPISearchFrameWordMOSI(self._vi, frame, word, searchName)

    def ConfigureUARTSource(self, serialBus, line, waveformSource):
        """

        :param serialBus:
        :type serialBus:
        :param line:
        :type line:
        :param waveformSource:
        :type waveformSource:
        """
        return self._dllwrap.ConfigureUARTSource(self._vi, serialBus, line, waveformSource)

    def ConfigureUARTThreshold(self, serialBus, preset, rxThreshold, txThreshold):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param rxThreshold:
        :type rxThreshold:
        :param txThreshold:
        :type txThreshold:
        """
        return self._dllwrap.ConfigureUARTThreshold(self._vi, serialBus, preset, rxThreshold, txThreshold)

    def ConfigureUART(self, serialBus, bitRate, stopBits, dataBits, parity, polarity):
        """

        :param serialBus:
        :type serialBus:
        :param bitRate:
        :type bitRate:
        :param stopBits:
        :type stopBits:
        :param dataBits:
        :type dataBits:
        :param parity:
        :type parity:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.ConfigureUART(self._vi, serialBus, bitRate, stopBits, dataBits, parity, polarity)

    def ConfigureUARTPackets(self, serialBus, packets, endWord, packetsTimeout):
        """

        :param serialBus:
        :type serialBus:
        :param packets:
        :type packets:
        :param endWord:
        :type endWord:
        :param packetsTimeout:
        :type packetsTimeout:
        """
        return self._dllwrap.ConfigureUARTPackets(self._vi, serialBus, packets, endWord, packetsTimeout)

    def ConfigureUARTTriggerType(self, trigger, type, source):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureUARTTriggerType(self._vi, trigger, type, source)

    def ConfigureUARTTriggerData(self, trigger, condition, pattern, position, indexMin, indexMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param pattern:
        :type pattern:
        :param position:
        :type position:
        :param indexMin:
        :type indexMin:
        :param indexMax:
        :type indexMax:
        """
        return self._dllwrap.ConfigureUARTTriggerData(
            self._vi, trigger, condition, pattern, position, indexMin, indexMax
        )

    def QueryUARTFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryUARTFrameCount(self._vi, serialBus)

    def QueryUARTFrameData(self, serialBus, word):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        """
        return self._dllwrap.QueryUARTFrameData(self._vi, serialBus, word)

    def QueryUARTPrimaryBitRate(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryUARTPrimaryBitRate(self._vi, serialBus)

    def ConfigureLINSource(self, serialBus, waveformSource):
        """

        :param serialBus:
        :type serialBus:
        :param waveformSource:
        :type waveformSource:
        """
        return self._dllwrap.ConfigureLINSource(self._vi, serialBus, waveformSource)

    def ConfigureLINThreshold(self, serialBus, preset, manualThreshold):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param manualThreshold:
        :type manualThreshold:
        """
        return self._dllwrap.ConfigureLINThreshold(self._vi, serialBus, preset, manualThreshold)

    def ConfigureLINPolarity(self, serialBus, polarity):
        """

        :param serialBus:
        :type serialBus:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.ConfigureLINPolarity(self._vi, serialBus, polarity)

    def ConfigureLINStandard(self, serialBus, standard, bitRate):
        """

        :param serialBus:
        :type serialBus:
        :param standard:
        :type standard:
        :param bitRate:
        :type bitRate:
        """
        return self._dllwrap.ConfigureLINStandard(self._vi, serialBus, standard, bitRate)

    def ConfigureLINTriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureLINTriggerType(self._vi, trigger, type)

    def ConfigureLINTriggerID(self, trigger, condition, IDMin, IDMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param IDMin:
        :type IDMin:
        :param IDMax:
        :type IDMax:
        """
        return self._dllwrap.ConfigureLINTriggerID(self._vi, trigger, condition, IDMin, IDMax)

    def ConfigureLINTriggerIDOR(self, trigger, ORSlot, ORSlotState, frameID):
        """

        :param trigger:
        :type trigger:
        :param ORSlot:
        :type ORSlot:
        :param ORSlotState:
        :type ORSlotState:
        :param frameID:
        :type frameID:
        """
        return self._dllwrap.ConfigureLINTriggerIDOR(self._vi, trigger, ORSlot, ORSlotState, frameID)

    def ConfigureLINTriggerData(self, trigger, condition, dataMin, dataMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param dataMin:
        :type dataMin:
        :param dataMax:
        :type dataMax:
        """
        return self._dllwrap.ConfigureLINTriggerData(self._vi, trigger, condition, dataMin, dataMax)

    def ConfigureLINTriggerDataSetup(self, trigger, condition, dataLength, transfer):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param dataLength:
        :type dataLength:
        :param transfer:
        :type transfer:
        """
        return self._dllwrap.ConfigureLINTriggerDataSetup(self._vi, trigger, condition, dataLength, transfer)

    def ConfigureLINTriggerErrorConditions(self, trigger, checksum, IDParityError, syncError):
        """

        :param trigger:
        :type trigger:
        :param checksum:
        :type checksum:
        :param IDParityError:
        :type IDParityError:
        :param syncError:
        :type syncError:
        """
        return self._dllwrap.ConfigureLINTriggerErrorConditions(self._vi, trigger, checksum, IDParityError, syncError)

    def ConfigureLINTriggerCRCErrorPattern(self, trigger, frameID, dataLength):
        """

        :param trigger:
        :type trigger:
        :param frameID:
        :type frameID:
        :param dataLength:
        :type dataLength:
        """
        return self._dllwrap.ConfigureLINTriggerCRCErrorPattern(self._vi, trigger, frameID, dataLength)

    def ConfigureLINTriggerCRCErrorStandard(self, trigger, standard):
        """

        :param trigger:
        :type trigger:
        :param standard:
        :type standard:
        """
        return self._dllwrap.ConfigureLINTriggerCRCErrorStandard(self._vi, trigger, standard)

    def QueryLINFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryLINFrameCount(self._vi, serialBus)

    def QueryLINFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryLINFrameStatus(self._vi, serialBus, frame)

    def QueryLINFrameID(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryLINFrameID(self._vi, serialBus, frame)

    def QueryLINFrameField(self, serialBus, frame, field):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryLINFrameField(self._vi, serialBus, frame, field)

    def QueryLINFrameBitRate(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryLINFrameBitRate(self._vi, serialBus, frame)

    def QueryLINFrameData(self, serialBus, frame, byteNumber):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryLINFrameData(self._vi, serialBus, frame, byteNumber)

    def QueryLINFrameAllData(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryLINFrameAllData(self._vi, serialBus, frame, bufferSize)

    def QueryLINFrameAllSymbolicData(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryLINFrameAllSymbolicData(self._vi, serialBus, frame, bufferSize)

    def ExportLINFrameAllSymbolicDataToFile(self, serialBus, frame, fileName, timeout):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param fileName:
        :type fileName:
        :param timeout:
        :type timeout:
        """
        return self._dllwrap.ExportLINFrameAllSymbolicDataToFile(self._vi, serialBus, frame, fileName, timeout)

    def QueryLINFrameLabel(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryLINFrameLabel(self._vi, serialBus, frame, bufferSize)

    def ConfigureLINSearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureLINSearchType(self._vi, searchName, type)

    def ConfigureLINSearchCriteria(
        self,
        searchName,
        startOfFrame,
        identifier,
        identifierOR,
        identifierData,
        wakeupFrame,
        errorCondition,
    ):
        """

        :param searchName:
        :type searchName:
        :param startOfFrame:
        :type startOfFrame:
        :param identifier:
        :type identifier:
        :param identifierOR:
        :type identifierOR:
        :param identifierData:
        :type identifierData:
        :param wakeupFrame:
        :type wakeupFrame:
        :param errorCondition:
        :type errorCondition:
        """
        return self._dllwrap.ConfigureLINSearchCriteria(
            self._vi,
            searchName,
            startOfFrame,
            identifier,
            identifierOR,
            identifierData,
            wakeupFrame,
            errorCondition,
        )

    def ConfigureLINSearchID(self, searchName, condition, IDMin, IDMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param IDMin:
        :type IDMin:
        :param IDMax:
        :type IDMax:
        """
        return self._dllwrap.ConfigureLINSearchID(self._vi, searchName, condition, IDMin, IDMax)

    def ConfigureLINSearchIDOR(self, searchName, ORSlot, ORSlotState, frameID):
        """

        :param searchName:
        :type searchName:
        :param ORSlot:
        :type ORSlot:
        :param ORSlotState:
        :type ORSlotState:
        :param frameID:
        :type frameID:
        """
        return self._dllwrap.ConfigureLINSearchIDOR(self._vi, searchName, ORSlot, ORSlotState, frameID)

    def ConfigureLINSearchData(self, searchName, condition, dataMin, dataMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param dataMin:
        :type dataMin:
        :param dataMax:
        :type dataMax:
        """
        return self._dllwrap.ConfigureLINSearchData(self._vi, searchName, condition, dataMin, dataMax)

    def ConfigureLINSearchDataSetup(self, searchName, condition, dataLength, transfer):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param dataLength:
        :type dataLength:
        :param transfer:
        :type transfer:
        """
        return self._dllwrap.ConfigureLINSearchDataSetup(self._vi, searchName, condition, dataLength, transfer)

    def ConfigureLINSearchErrorConditions(self, searchName, checksum, IDParityError, syncError):
        """

        :param searchName:
        :type searchName:
        :param checksum:
        :type checksum:
        :param IDParityError:
        :type IDParityError:
        :param syncError:
        :type syncError:
        """
        return self._dllwrap.ConfigureLINSearchErrorConditions(self._vi, searchName, checksum, IDParityError, syncError)

    def ConfigureLINSearchCRCErrorPattern(self, searchName, frameID, dataLength):
        """

        :param searchName:
        :type searchName:
        :param frameID:
        :type frameID:
        :param dataLength:
        :type dataLength:
        """
        return self._dllwrap.ConfigureLINSearchCRCErrorPattern(self._vi, searchName, frameID, dataLength)

    def ConfigureLINSearchCRCErrorStandard(self, searchName, standard):
        """

        :param searchName:
        :type searchName:
        :param standard:
        :type standard:
        """
        return self._dllwrap.ConfigureLINSearchCRCErrorStandard(self._vi, searchName, standard)

    def QueryLINSearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryLINSearchFrameCount(self._vi, searchName)

    def QueryLINSearchFrameStatus(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryLINSearchFrameStatus(self._vi, searchName, frame)

    def QueryLINSearchFrameID(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryLINSearchFrameID(self._vi, searchName, frame)

    def QueryLINSearchFrameField(self, searchName, frame, field):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryLINSearchFrameField(self._vi, searchName, frame, field)

    def QueryLINSearchFrameData(self, searchName, frame, byteNumber):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryLINSearchFrameData(self._vi, searchName, frame, byteNumber)

    def QueryLINSearchFrameAllData(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryLINSearchFrameAllData(self._vi, searchName, frame, bufferSize)

    def QueryLINSearchFrameLabel(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryLINSearchFrameLabel(self._vi, searchName, frame, bufferSize)

    def ConfigureCANSource(self, serialBus, line, waveformSource):
        """

        :param serialBus:
        :type serialBus:
        :param line:
        :type line:
        :param waveformSource:
        :type waveformSource:
        """
        return self._dllwrap.ConfigureCANSource(self._vi, serialBus, line, waveformSource)

    def ConfigureCANThreshold(self, serialBus, preset, manualThreshold):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param manualThreshold:
        :type manualThreshold:
        """
        return self._dllwrap.ConfigureCANThreshold(self._vi, serialBus, preset, manualThreshold)

    def ConfigureCANBitRate(self, serialBus, bitRate):
        """

        :param serialBus:
        :type serialBus:
        :param bitRate:
        :type bitRate:
        """
        return self._dllwrap.ConfigureCANBitRate(self._vi, serialBus, bitRate)

    def ConfigureCANFD(self, serialBus, enable, bitRate):
        """

        :param serialBus:
        :type serialBus:
        :param enable:
        :type enable:
        :param bitRate:
        :type bitRate:
        """
        return self._dllwrap.ConfigureCANFD(self._vi, serialBus, enable, bitRate)

    def ConfigureCANFDStandard(self, serialBus, standard):
        """

        :param serialBus:
        :type serialBus:
        :param standard:
        :type standard:
        """
        return self._dllwrap.ConfigureCANFDStandard(self._vi, serialBus, standard)

    def ConfigureCANFDJumpWidth(self, serialBus, jumpWidth):
        """

        :param serialBus:
        :type serialBus:
        :param jumpWidth:
        :type jumpWidth:
        """
        return self._dllwrap.ConfigureCANFDJumpWidth(self._vi, serialBus, jumpWidth)

    def ConfigureCANFDSamplePointAbsolute(self, serialBus, timeSegment1, timeSegment2):
        """

        :param serialBus:
        :type serialBus:
        :param timeSegment1:
        :type timeSegment1:
        :param timeSegment2:
        :type timeSegment2:
        """
        return self._dllwrap.ConfigureCANFDSamplePointAbsolute(self._vi, serialBus, timeSegment1, timeSegment2)

    def ConfigureCANFDSamplePointRelative(self, serialBus, samplePoint):
        """

        :param serialBus:
        :type serialBus:
        :param samplePoint:
        :type samplePoint:
        """
        return self._dllwrap.ConfigureCANFDSamplePointRelative(self._vi, serialBus, samplePoint)

    def ConfigureCANJumpWidth(self, serialBus, jumpWidth):
        """

        :param serialBus:
        :type serialBus:
        :param jumpWidth:
        :type jumpWidth:
        """
        return self._dllwrap.ConfigureCANJumpWidth(self._vi, serialBus, jumpWidth)

    def ConfigureCANSamplePointAbsolute(self, serialBus, timeSegment1, timeSegment2):
        """

        :param serialBus:
        :type serialBus:
        :param timeSegment1:
        :type timeSegment1:
        :param timeSegment2:
        :type timeSegment2:
        """
        return self._dllwrap.ConfigureCANSamplePointAbsolute(self._vi, serialBus, timeSegment1, timeSegment2)

    def ConfigureCANSamplePointRelative(self, serialBus, samplePoint):
        """

        :param serialBus:
        :type serialBus:
        :param samplePoint:
        :type samplePoint:
        """
        return self._dllwrap.ConfigureCANSamplePointRelative(self._vi, serialBus, samplePoint)

    def ConfigureCANTriggerType(self, trigger, type, frameType):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        :param frameType:
        :type frameType:
        """
        return self._dllwrap.ConfigureCANTriggerType(self._vi, trigger, type, frameType)

    def ConfigureCANTriggerStandard(self, trigger, standard):
        """

        :param trigger:
        :type trigger:
        :param standard:
        :type standard:
        """
        return self._dllwrap.ConfigureCANTriggerStandard(self._vi, trigger, standard)

    def ConfigureCANTriggerFDBits(self, trigger, FDF, BRS, ESI):
        """

        :param trigger:
        :type trigger:
        :param FDF:
        :type FDF:
        :param BRS:
        :type BRS:
        :param ESI:
        :type ESI:
        """
        return self._dllwrap.ConfigureCANTriggerFDBits(self._vi, trigger, FDF, BRS, ESI)

    def ConfigureCANTriggerID(self, trigger, IDType, condition, IDMin, IDMax):
        """

        :param trigger:
        :type trigger:
        :param IDType:
        :type IDType:
        :param condition:
        :type condition:
        :param IDMin:
        :type IDMin:
        :param IDMax:
        :type IDMax:
        """
        return self._dllwrap.ConfigureCANTriggerID(self._vi, trigger, IDType, condition, IDMin, IDMax)

    def ConfigureCANTriggerData(self, trigger, transfer, condition, dataMin, dataMax):
        """

        :param trigger:
        :type trigger:
        :param transfer:
        :type transfer:
        :param condition:
        :type condition:
        :param dataMin:
        :type dataMin:
        :param dataMax:
        :type dataMax:
        """
        return self._dllwrap.ConfigureCANTriggerData(self._vi, trigger, transfer, condition, dataMin, dataMax)

    def ConfigureCANTriggerDCL(self, trigger, condition, DLC):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param DLC:
        :type DLC:
        """
        return self._dllwrap.ConfigureCANTriggerDCL(self._vi, trigger, condition, DLC)

    def QueryCANTriggerNumberOfDataBytes(self, trigger):
        """

        :param trigger:
        :type trigger:
        """
        return self._dllwrap.QueryCANTriggerNumberOfDataBytes(self._vi, trigger)

    def ConfigureCANTriggerDataPosition(self, trigger, condition, positionMin, positionMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param positionMin:
        :type positionMin:
        :param positionMax:
        :type positionMax:
        """
        return self._dllwrap.ConfigureCANTriggerDataPosition(self._vi, trigger, condition, positionMin, positionMax)

    def ConfigureCANTriggerErrorConditions(self, trigger, CRC, stuffing, form, ack):
        """

        :param trigger:
        :type trigger:
        :param CRC:
        :type CRC:
        :param stuffing:
        :type stuffing:
        :param form:
        :type form:
        :param ack:
        :type ack:
        """
        return self._dllwrap.ConfigureCANTriggerErrorConditions(self._vi, trigger, CRC, stuffing, form, ack)

    def ConfigureCANTriggerStuffCountError(self, trigger, stuffCountError):
        """

        :param trigger:
        :type trigger:
        :param stuffCountError:
        :type stuffCountError:
        """
        return self._dllwrap.ConfigureCANTriggerStuffCountError(self._vi, trigger, stuffCountError)

    def ConfigureCANSymbolicTriggerMessage(self, trigger, message, triggerOnSignal):
        """

        :param trigger:
        :type trigger:
        :param message:
        :type message:
        :param triggerOnSignal:
        :type triggerOnSignal:
        """
        return self._dllwrap.ConfigureCANSymbolicTriggerMessage(self._vi, trigger, message, triggerOnSignal)

    def ConfigureCANSymbolicTriggerSignal(self, trigger, signal, condition, dataMin, dataMax):
        """

        :param trigger:
        :type trigger:
        :param signal:
        :type signal:
        :param condition:
        :type condition:
        :param dataMin:
        :type dataMin:
        :param dataMax:
        :type dataMax:
        """
        return self._dllwrap.ConfigureCANSymbolicTriggerSignal(self._vi, trigger, signal, condition, dataMin, dataMax)

    def ConfigureCANSymbolicTriggerSignalEnumValue(self, trigger, enumValue):
        """

        :param trigger:
        :type trigger:
        :param enumValue:
        :type enumValue:
        """
        return self._dllwrap.ConfigureCANSymbolicTriggerSignalEnumValue(self._vi, trigger, enumValue)

    def QueryCANFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryCANFrameCount(self._vi, serialBus)

    def QueryCANFrameFDStandard(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryCANFrameFDStandard(self._vi, serialBus, frame)

    def QueryCANFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryCANFrameStatus(self._vi, serialBus, frame)

    def QueryCANFrameID(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryCANFrameID(self._vi, serialBus, frame)

    def QueryCANFrameField(self, serialBus, frame, field):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryCANFrameField(self._vi, serialBus, frame, field)

    def QueryCANFrameBitRate(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryCANFrameBitRate(self._vi, serialBus, frame)

    def QueryCANFrameBitStuffingError(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryCANFrameBitStuffingError(self._vi, serialBus, frame)

    def QueryCANFrameData(self, serialBus, frame, byteNumber):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryCANFrameData(self._vi, serialBus, frame, byteNumber)

    def QueryCANFrameAllData(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryCANFrameAllData(self._vi, serialBus, frame, bufferSize)

    def QueryCANFrameAllSymbolicData(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryCANFrameAllSymbolicData(self._vi, serialBus, frame, bufferSize)

    def QueryCANFrameLabel(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryCANFrameLabel(self._vi, serialBus, frame, bufferSize)

    def QueryCANFrameNumberOfBytes(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryCANFrameNumberOfBytes(self._vi, serialBus, frame)

    def QueryCANFrameFormErrorCause(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryCANFrameFormErrorCause(self._vi, serialBus, frame)

    def QueryCANFrameFDStuffCount(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryCANFrameFDStuffCount(self._vi, serialBus, frame)

    def ExportCANFrameAllSymbolicDataToFile(self, serialBus, frame, fileName, timeout):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param fileName:
        :type fileName:
        :param timeout:
        :type timeout:
        """
        return self._dllwrap.ExportCANFrameAllSymbolicDataToFile(self._vi, serialBus, frame, fileName, timeout)

    def ConfigureCANSearchState(self, searchName, enabled):
        """

        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureCANSearchState(self._vi, searchName, enabled)

    def CANSearchCopyFromA(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.CANSearchCopyFromA(self._vi, searchName)

    def ConfigureCANSearchCriteria(
        self,
        searchName,
        startOfFrame,
        frameType,
        frameIdentifier,
        identifierData,
        errorCondition,
    ):
        """

        :param searchName:
        :type searchName:
        :param startOfFrame:
        :type startOfFrame:
        :param frameType:
        :type frameType:
        :param frameIdentifier:
        :type frameIdentifier:
        :param identifierData:
        :type identifierData:
        :param errorCondition:
        :type errorCondition:
        """
        return self._dllwrap.ConfigureCANSearchCriteria(
            self._vi,
            searchName,
            startOfFrame,
            frameType,
            frameIdentifier,
            identifierData,
            errorCondition,
        )

    def ConfigureCANSearchSymbolic(self, searchName, enabled):
        """

        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureCANSearchSymbolic(self._vi, searchName, enabled)

    def ConfigureCANSearchFrameType(self, searchName, frameType):
        """

        :param searchName:
        :type searchName:
        :param frameType:
        :type frameType:
        """
        return self._dllwrap.ConfigureCANSearchFrameType(self._vi, searchName, frameType)

    def ConfigureCANSearchStandard(self, searchName, standard):
        """

        :param searchName:
        :type searchName:
        :param standard:
        :type standard:
        """
        return self._dllwrap.ConfigureCANSearchStandard(self._vi, searchName, standard)

    def ConfigureCANSearchID(self, searchName, IDType, condition, IDMin, IDMax):
        """

        :param searchName:
        :type searchName:
        :param IDType:
        :type IDType:
        :param condition:
        :type condition:
        :param IDMin:
        :type IDMin:
        :param IDMax:
        :type IDMax:
        """
        return self._dllwrap.ConfigureCANSearchID(self._vi, searchName, IDType, condition, IDMin, IDMax)

    def ConfigureCANSearchFDBits(self, searchName, FDF, BRS, ESI):
        """

        :param searchName:
        :type searchName:
        :param FDF:
        :type FDF:
        :param BRS:
        :type BRS:
        :param ESI:
        :type ESI:
        """
        return self._dllwrap.ConfigureCANSearchFDBits(self._vi, searchName, FDF, BRS, ESI)

    def ConfigureCANSearchData(self, searchName, transfer, condition, dataMin, dataMax):
        """

        :param searchName:
        :type searchName:
        :param transfer:
        :type transfer:
        :param condition:
        :type condition:
        :param dataMin:
        :type dataMin:
        :param dataMax:
        :type dataMax:
        """
        return self._dllwrap.ConfigureCANSearchData(self._vi, searchName, transfer, condition, dataMin, dataMax)

    def ConfigureCANSearchDCL(self, searchName, condition, DLC):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param DLC:
        :type DLC:
        """
        return self._dllwrap.ConfigureCANSearchDCL(self._vi, searchName, condition, DLC)

    def ConfigureCANSearchDataPosition(self, searchName, condition, positionMin, positionMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param positionMin:
        :type positionMin:
        :param positionMax:
        :type positionMax:
        """
        return self._dllwrap.ConfigureCANSearchDataPosition(self._vi, searchName, condition, positionMin, positionMax)

    def ConfigureCANSearchErrorConditions(self, searchName, CRC, stuffing, form, ack):
        """

        :param searchName:
        :type searchName:
        :param CRC:
        :type CRC:
        :param stuffing:
        :type stuffing:
        :param form:
        :type form:
        :param ack:
        :type ack:
        """
        return self._dllwrap.ConfigureCANSearchErrorConditions(self._vi, searchName, CRC, stuffing, form, ack)

    def ConfigureCANSearchStuffCountError(self, searchName, stuffCountError):
        """

        :param searchName:
        :type searchName:
        :param stuffCountError:
        :type stuffCountError:
        """
        return self._dllwrap.ConfigureCANSearchStuffCountError(self._vi, searchName, stuffCountError)

    def ConfigureCANSymbolicSearchMessage(self, searchName, message, searchOnSignal):
        """

        :param searchName:
        :type searchName:
        :param message:
        :type message:
        :param searchOnSignal:
        :type searchOnSignal:
        """
        return self._dllwrap.ConfigureCANSymbolicSearchMessage(self._vi, searchName, message, searchOnSignal)

    def ConfigureCANSymbolicSearchSignal(self, searchName, signal, condition, dataMin, dataMax):
        """

        :param searchName:
        :type searchName:
        :param signal:
        :type signal:
        :param condition:
        :type condition:
        :param dataMin:
        :type dataMin:
        :param dataMax:
        :type dataMax:
        """
        return self._dllwrap.ConfigureCANSymbolicSearchSignal(self._vi, searchName, signal, condition, dataMin, dataMax)

    def ConfigureCANSymbolicSearchSignalEnumValue(self, searchName, enumValue):
        """

        :param searchName:
        :type searchName:
        :param enumValue:
        :type enumValue:
        """
        return self._dllwrap.ConfigureCANSymbolicSearchSignalEnumValue(self._vi, searchName, enumValue)

    def QueryCANSearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryCANSearchFrameCount(self._vi, searchName)

    def QueryCANSearchFrameStatus(self, frame, searchName):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryCANSearchFrameStatus(self._vi, frame, searchName)

    def QueryCANSearchFrameID(self, frame, searchName):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryCANSearchFrameID(self._vi, frame, searchName)

    def QueryCANSearchFrameField(self, frame, searchName, field):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryCANSearchFrameField(self._vi, frame, searchName, field)

    def QueryCANSearchFrameBitStuffingError(self, frame, searchName):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryCANSearchFrameBitStuffingError(self._vi, frame, searchName)

    def QueryCANSearchFrameData(self, frame, byteNumber, searchName):
        """

        :param frame:
        :type frame:
        :param byteNumber:
        :type byteNumber:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryCANSearchFrameData(self._vi, frame, byteNumber, searchName)

    def QueryCANSearchFrameAllData(self, frame, searchName, bufferSize):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryCANSearchFrameAllData(self._vi, frame, searchName, bufferSize)

    def QueryCANSearchFrameSymbolicData(self, frame, searchName, bufferSize):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryCANSearchFrameSymbolicData(self._vi, frame, searchName, bufferSize)

    def QueryCANSearchFrameLabel(self, frame, searchName, bufferSize):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryCANSearchFrameLabel(self._vi, frame, searchName, bufferSize)

    def QueryCANFDSearchFrameStandard(self, frame, searchName):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryCANFDSearchFrameStandard(self._vi, frame, searchName)

    def QueryCANSearchFrameNumberOfBytes(self, frame, searchName):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryCANSearchFrameNumberOfBytes(self._vi, frame, searchName)

    def QueryCANSearchFrameFormErrorCause(self, frame, searchName):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryCANSearchFrameFormErrorCause(self._vi, frame, searchName)

    def QueryCANFDSearchFrameStuffCount(self, frame, searchName):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryCANFDSearchFrameStuffCount(self._vi, frame, searchName)

    def ConfigureFlexRaySource(self, serialBus, line, waveformSource, channel, separateHeaderBits, bitRate):
        """

        :param serialBus:
        :type serialBus:
        :param line:
        :type line:
        :param waveformSource:
        :type waveformSource:
        :param channel:
        :type channel:
        :param separateHeaderBits:
        :type separateHeaderBits:
        :param bitRate:
        :type bitRate:
        """
        return self._dllwrap.ConfigureFlexRaySource(
            self._vi,
            serialBus,
            line,
            waveformSource,
            channel,
            separateHeaderBits,
            bitRate,
        )

    def ConfigureFlexRaySourceType(self, serialBus, sourceType):
        """

        :param serialBus:
        :type serialBus:
        :param sourceType:
        :type sourceType:
        """
        return self._dllwrap.ConfigureFlexRaySourceType(self._vi, serialBus, sourceType)

    def ConfigureFlexRayThresholdSingle(self, serialBus, polarity, preset, manualThresholdHigh, manualThresholdLow):
        """

        :param serialBus:
        :type serialBus:
        :param polarity:
        :type polarity:
        :param preset:
        :type preset:
        :param manualThresholdHigh:
        :type manualThresholdHigh:
        :param manualThresholdLow:
        :type manualThresholdLow:
        """
        return self._dllwrap.ConfigureFlexRayThresholdSingle(
            self._vi, serialBus, polarity, preset, manualThresholdHigh, manualThresholdLow
        )

    def ConfigureFlexRayThresholdDifferential(self, serialBus, preset, manualThresholdHigh, manualThresholdLow):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param manualThresholdHigh:
        :type manualThresholdHigh:
        :param manualThresholdLow:
        :type manualThresholdLow:
        """
        return self._dllwrap.ConfigureFlexRayThresholdDifferential(
            self._vi, serialBus, preset, manualThresholdHigh, manualThresholdLow
        )

    def ConfigureFlexRayThresholdLogic(self, serialBus, preset, manualThresholdDataLine, manualThresholdEnableLine):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param manualThresholdDataLine:
        :type manualThresholdDataLine:
        :param manualThresholdEnableLine:
        :type manualThresholdEnableLine:
        """
        return self._dllwrap.ConfigureFlexRayThresholdLogic(
            self._vi,
            serialBus,
            preset,
            manualThresholdDataLine,
            manualThresholdEnableLine,
        )

    def ConfigureFlexRayTriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureFlexRayTriggerType(self._vi, trigger, type)

    def ConfigureFlexRayTriggerIndicatorBits(self, trigger, payloadPreamble, nullFrame, syncFrame, startupFrame):
        """

        :param trigger:
        :type trigger:
        :param payloadPreamble:
        :type payloadPreamble:
        :param nullFrame:
        :type nullFrame:
        :param syncFrame:
        :type syncFrame:
        :param startupFrame:
        :type startupFrame:
        """
        return self._dllwrap.ConfigureFlexRayTriggerIndicatorBits(
            self._vi, trigger, payloadPreamble, nullFrame, syncFrame, startupFrame
        )

    def ConfigureFlexRayTriggerFrameID(self, trigger, condition, IDMin, IDMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param IDMin:
        :type IDMin:
        :param IDMax:
        :type IDMax:
        """
        return self._dllwrap.ConfigureFlexRayTriggerFrameID(self._vi, trigger, condition, IDMin, IDMax)

    def ConfigureFlexRayTriggerPayloadLength(self, trigger, condition, payloadMin, payloadMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param payloadMin:
        :type payloadMin:
        :param payloadMax:
        :type payloadMax:
        """
        return self._dllwrap.ConfigureFlexRayTriggerPayloadLength(self._vi, trigger, condition, payloadMin, payloadMax)

    def ConfigureFlexRayTriggerCycleCount(self, trigger, condition, cycleMin, cycleMax, cycleStep):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param cycleMin:
        :type cycleMin:
        :param cycleMax:
        :type cycleMax:
        :param cycleStep:
        :type cycleStep:
        """
        return self._dllwrap.ConfigureFlexRayTriggerCycleCount(
            self._vi, trigger, condition, cycleMin, cycleMax, cycleStep
        )

    def ConfigureFlexRayTriggerData(self, trigger, condition, dataMin, dataMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param dataMin:
        :type dataMin:
        :param dataMax:
        :type dataMax:
        """
        return self._dllwrap.ConfigureFlexRayTriggerData(self._vi, trigger, condition, dataMin, dataMax)

    def ConfigureFlexRayTriggerDataPosition(self, trigger, condition, positionMin, positionMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param positionMin:
        :type positionMin:
        :param positionMax:
        :type positionMax:
        """
        return self._dllwrap.ConfigureFlexRayTriggerDataPosition(self._vi, trigger, condition, positionMin, positionMax)

    def ConfigureFlexRayTriggerSymbol(self, trigger, symbol):
        """

        :param trigger:
        :type trigger:
        :param symbol:
        :type symbol:
        """
        return self._dllwrap.ConfigureFlexRayTriggerSymbol(self._vi, trigger, symbol)

    def ConfigureFlexRayTriggerErrorConditions(self, trigger, FSS, BSS, FES, headerCRC, payloadCRC):
        """

        :param trigger:
        :type trigger:
        :param FSS:
        :type FSS:
        :param BSS:
        :type BSS:
        :param FES:
        :type FES:
        :param headerCRC:
        :type headerCRC:
        :param payloadCRC:
        :type payloadCRC:
        """
        return self._dllwrap.ConfigureFlexRayTriggerErrorConditions(
            self._vi, trigger, FSS, BSS, FES, headerCRC, payloadCRC
        )

    def QueryFlexRayFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryFlexRayFrameCount(self._vi, serialBus)

    def QueryFlexRayCycleCount(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryFlexRayCycleCount(self._vi, serialBus, frame)

    def QueryFlexRayFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryFlexRayFrameStatus(self._vi, serialBus, frame)

    def QueryFlexRayFrameField(self, serialBus, frame, field):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryFlexRayFrameField(self._vi, serialBus, frame, field)

    def QueryFlexRayFrameAllData(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryFlexRayFrameAllData(self._vi, serialBus, frame, bufferSize)

    def QueryFlexRayFrameLabel(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryFlexRayFrameLabel(self._vi, serialBus, frame, bufferSize)

    def ConfigureFlexRaySearchState(self, searchName, enabled):
        """

        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureFlexRaySearchState(self._vi, searchName, enabled)

    def FlexRaySearchCopyFromA(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.FlexRaySearchCopyFromA(self._vi, searchName)

    def ConfigureFlexRaySearchCriteria(self, searchName, startOfFrame, symbol, identifierData, errorCondition):
        """

        :param searchName:
        :type searchName:
        :param startOfFrame:
        :type startOfFrame:
        :param symbol:
        :type symbol:
        :param identifierData:
        :type identifierData:
        :param errorCondition:
        :type errorCondition:
        """
        return self._dllwrap.ConfigureFlexRaySearchCriteria(
            self._vi, searchName, startOfFrame, symbol, identifierData, errorCondition
        )

    def ConfigureFlexRaySearchIndicatorBits(self, searchName, payloadPreamble, nullFrame, syncFrame, startupFrame):
        """

        :param searchName:
        :type searchName:
        :param payloadPreamble:
        :type payloadPreamble:
        :param nullFrame:
        :type nullFrame:
        :param syncFrame:
        :type syncFrame:
        :param startupFrame:
        :type startupFrame:
        """
        return self._dllwrap.ConfigureFlexRaySearchIndicatorBits(
            self._vi, searchName, payloadPreamble, nullFrame, syncFrame, startupFrame
        )

    def ConfigureFlexRaySearchFrameID(self, searchName, condition, IDMin, IDMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param IDMin:
        :type IDMin:
        :param IDMax:
        :type IDMax:
        """
        return self._dllwrap.ConfigureFlexRaySearchFrameID(self._vi, searchName, condition, IDMin, IDMax)

    def ConfigureFlexRaySearchPayloadLength(self, searchName, condition, payloadMin, payloadMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param payloadMin:
        :type payloadMin:
        :param payloadMax:
        :type payloadMax:
        """
        return self._dllwrap.ConfigureFlexRaySearchPayloadLength(
            self._vi, searchName, condition, payloadMin, payloadMax
        )

    def ConfigureFlexRaySearchCycleCount(self, searchName, condition, cycleMin, cycleMax, cycleStep):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param cycleMin:
        :type cycleMin:
        :param cycleMax:
        :type cycleMax:
        :param cycleStep:
        :type cycleStep:
        """
        return self._dllwrap.ConfigureFlexRaySearchCycleCount(
            self._vi, searchName, condition, cycleMin, cycleMax, cycleStep
        )

    def ConfigureFlexRaySearchData(self, searchName, condition, dataMin, dataMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param dataMin:
        :type dataMin:
        :param dataMax:
        :type dataMax:
        """
        return self._dllwrap.ConfigureFlexRaySearchData(self._vi, searchName, condition, dataMin, dataMax)

    def ConfigureFlexRaySearchDataPosition(self, searchName, condition, positionMin, positionMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param positionMin:
        :type positionMin:
        :param positionMax:
        :type positionMax:
        """
        return self._dllwrap.ConfigureFlexRaySearchDataPosition(
            self._vi, searchName, condition, positionMin, positionMax
        )

    def ConfigureFlexRaySearchID(self, searchName, reserved, IDMin, IDMax):
        """

        :param searchName:
        :type searchName:
        :param reserved:
        :type reserved:
        :param IDMin:
        :type IDMin:
        :param IDMax:
        :type IDMax:
        """
        return self._dllwrap.ConfigureFlexRaySearchID(self._vi, searchName, reserved, IDMin, IDMax)

    def ConfigureFlexRaySearchSymbol(self, searchName, symbol):
        """

        :param searchName:
        :type searchName:
        :param symbol:
        :type symbol:
        """
        return self._dllwrap.ConfigureFlexRaySearchSymbol(self._vi, searchName, symbol)

    def ConfigureFlexRaySearchErrorConditions(self, searchName, FSS, BSS, FES, headerCRC, payloadCRC):
        """

        :param searchName:
        :type searchName:
        :param FSS:
        :type FSS:
        :param BSS:
        :type BSS:
        :param FES:
        :type FES:
        :param headerCRC:
        :type headerCRC:
        :param payloadCRC:
        :type payloadCRC:
        """
        return self._dllwrap.ConfigureFlexRaySearchErrorConditions(
            self._vi, searchName, FSS, BSS, FES, headerCRC, payloadCRC
        )

    def QueryFlexRaySearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryFlexRaySearchFrameCount(self._vi, searchName)

    def QueryFlexRaySearchCycleCount(self, frame, searchName):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryFlexRaySearchCycleCount(self._vi, frame, searchName)

    def QueryFlexRaySearchFrameStatus(self, frame, searchName):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryFlexRaySearchFrameStatus(self._vi, frame, searchName)

    def QueryFlexRaySearchFrameField(self, frame, searchName, field):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryFlexRaySearchFrameField(self._vi, frame, searchName, field)

    def QueryFlexRaySearchFrameAllData(self, frame, searchName, bufferSize):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryFlexRaySearchFrameAllData(self._vi, frame, searchName, bufferSize)

    def QueryFlexRaySearchFrameLabel(self, frame, searchName, bufferSize):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryFlexRaySearchFrameLabel(self._vi, frame, searchName, bufferSize)

    def ConfigureAudioVariant(self, serialBus, variant):
        """

        :param serialBus:
        :type serialBus:
        :param variant:
        :type variant:
        """
        return self._dllwrap.ConfigureAudioVariant(self._vi, serialBus, variant)

    def ConfigureAudioClockLine(self, serialBus, waveformSource, polarity, treshold):
        """

        :param serialBus:
        :type serialBus:
        :param waveformSource:
        :type waveformSource:
        :param polarity:
        :type polarity:
        :param treshold:
        :type treshold:
        """
        return self._dllwrap.ConfigureAudioClockLine(self._vi, serialBus, waveformSource, polarity, treshold)

    def ConfigureAudioWSLine(self, serialBus, waveformSource, polarity, treshold):
        """

        :param serialBus:
        :type serialBus:
        :param waveformSource:
        :type waveformSource:
        :param polarity:
        :type polarity:
        :param treshold:
        :type treshold:
        """
        return self._dllwrap.ConfigureAudioWSLine(self._vi, serialBus, waveformSource, polarity, treshold)

    def ConfigureAudioDataLine(self, serialBus, waveformSource, polarity, treshold):
        """

        :param serialBus:
        :type serialBus:
        :param waveformSource:
        :type waveformSource:
        :param polarity:
        :type polarity:
        :param treshold:
        :type treshold:
        """
        return self._dllwrap.ConfigureAudioDataLine(self._vi, serialBus, waveformSource, polarity, treshold)

    def ConfigureAudioTresholdsCoupling(self, serialBus, coupling, treshold):
        """

        :param serialBus:
        :type serialBus:
        :param coupling:
        :type coupling:
        :param treshold:
        :type treshold:
        """
        return self._dllwrap.ConfigureAudioTresholdsCoupling(self._vi, serialBus, coupling, treshold)

    def ConfigureAudioI2SSettings(self, serialBus, wordLength, channelOrder, bitOrder, channelOffset, channelLength):
        """

        :param serialBus:
        :type serialBus:
        :param wordLength:
        :type wordLength:
        :param channelOrder:
        :type channelOrder:
        :param bitOrder:
        :type bitOrder:
        :param channelOffset:
        :type channelOffset:
        :param channelLength:
        :type channelLength:
        """
        return self._dllwrap.ConfigureAudioI2SSettings(
            self._vi,
            serialBus,
            wordLength,
            channelOrder,
            bitOrder,
            channelOffset,
            channelLength,
        )

    def ConfigureAudioTDMSettings(
        self,
        serialBus,
        TDMChannels,
        frameOffset,
        channelLength,
        channelOffset,
        wordLength,
        bitOrder,
    ):
        """

        :param serialBus:
        :type serialBus:
        :param TDMChannels:
        :type TDMChannels:
        :param frameOffset:
        :type frameOffset:
        :param channelLength:
        :type channelLength:
        :param channelOffset:
        :type channelOffset:
        :param wordLength:
        :type wordLength:
        :param bitOrder:
        :type bitOrder:
        """
        return self._dllwrap.ConfigureAudioTDMSettings(
            self._vi,
            serialBus,
            TDMChannels,
            frameOffset,
            channelLength,
            channelOffset,
            wordLength,
            bitOrder,
        )

    def ConfigureAudioDataTrigger(self, conditionNumber, channel, condition, addressMin, addressMax):
        """

        :param conditionNumber:
        :type conditionNumber:
        :param channel:
        :type channel:
        :param condition:
        :type condition:
        :param addressMin:
        :type addressMin:
        :param addressMax:
        :type addressMax:
        """
        return self._dllwrap.ConfigureAudioDataTrigger(
            self._vi, conditionNumber, channel, condition, addressMin, addressMax
        )

    def ConfigureAudioWindowTrigger(self, conditionNumber, channel, condition, addressMin, addressMax):
        """

        :param conditionNumber:
        :type conditionNumber:
        :param channel:
        :type channel:
        :param condition:
        :type condition:
        :param addressMin:
        :type addressMin:
        :param addressMax:
        :type addressMax:
        """
        return self._dllwrap.ConfigureAudioWindowTrigger(
            self._vi, conditionNumber, channel, condition, addressMin, addressMax
        )

    def ConfigureAudioWindowTriggerLength(self, windowLength):
        """

        :param windowLength:
        :type windowLength:
        """
        return self._dllwrap.ConfigureAudioWindowTriggerLength(self._vi, windowLength)

    def ConfigureAudioConditionTrigger(self, conditionNumber, channel, condition, addressMin, addressMax):
        """

        :param conditionNumber:
        :type conditionNumber:
        :param channel:
        :type channel:
        :param condition:
        :type condition:
        :param addressMin:
        :type addressMin:
        :param addressMax:
        :type addressMax:
        """
        return self._dllwrap.ConfigureAudioConditionTrigger(
            self._vi, conditionNumber, channel, condition, addressMin, addressMax
        )

    def ConfigureAudioWordSelectTrigger(self, slope):
        """

        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureAudioWordSelectTrigger(self._vi, slope)

    def ConfigureAudioErrorConditionTrigger(self):
        """"""
        return self._dllwrap.ConfigureAudioErrorConditionTrigger(self._vi)

    def QueryAudioFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryAudioFrameCount(self._vi, serialBus)

    def QueryAudioFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryAudioFrameStatus(self._vi, serialBus, frame)

    def QueryAudioFrameChannelStatus(self, serialBus, frame, channel):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param channel:
        :type channel:
        """
        return self._dllwrap.QueryAudioFrameChannelStatus(self._vi, serialBus, frame, channel)

    def QueryAudioFrameTDMStatus(self, serialBus, frame, channelNumber):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param channelNumber:
        :type channelNumber:
        """
        return self._dllwrap.QueryAudioFrameTDMStatus(self._vi, serialBus, frame, channelNumber)

    def ConfigureAudioTrackWaveform(self, serialBus, channel, state):
        """

        :param serialBus:
        :type serialBus:
        :param channel:
        :type channel:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureAudioTrackWaveform(self._vi, serialBus, channel, state)

    def ConfigureAudioTrackEnabled(self, measurement, state):
        """

        :param measurement:
        :type measurement:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureAudioTrackEnabled(self._vi, measurement, state)

    def FetchAudioTrackWaveform(self, measurement, waveformSize):
        """

        :param measurement:
        :type measurement:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchAudioTrackWaveform(self._vi, measurement, waveformSize)

    def FetchAudioTrackWaveformHeader(self, measurement, bufferSize):
        """

        :param measurement:
        :type measurement:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.FetchAudioTrackWaveformHeader(self._vi, measurement, bufferSize)

    def FetchAudioTrackWaveformDataType(self, measurement, bufferSize):
        """

        :param measurement:
        :type measurement:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.FetchAudioTrackWaveformDataType(self._vi, measurement, bufferSize)

    def ConfigureMIL1553Source(self, serialBus, source):
        """

        :param serialBus:
        :type serialBus:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureMIL1553Source(self._vi, serialBus, source)

    def ConfigureMIL1553Polarity(self, serialBus, polarity):
        """

        :param serialBus:
        :type serialBus:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.ConfigureMIL1553Polarity(self._vi, serialBus, polarity)

    def ConfigureMIL1553Threshold(self, serialBus, preset, thresholdHigh, thresholdLow):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param thresholdHigh:
        :type thresholdHigh:
        :param thresholdLow:
        :type thresholdLow:
        """
        return self._dllwrap.ConfigureMIL1553Threshold(self._vi, serialBus, preset, thresholdHigh, thresholdLow)

    def ConfigureMIL1553Timing(self, serialBus, minGapState, minGap, maxResponseState, maxResponse):
        """

        :param serialBus:
        :type serialBus:
        :param minGapState:
        :type minGapState:
        :param minGap:
        :type minGap:
        :param maxResponseState:
        :type maxResponseState:
        :param maxResponse:
        :type maxResponse:
        """
        return self._dllwrap.ConfigureMIL1553Timing(
            self._vi, serialBus, minGapState, minGap, maxResponseState, maxResponse
        )

    def ConfigureMIL1553TriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureMIL1553TriggerType(self._vi, trigger, type)

    def ConfigureMIL1553TriggerSyncType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureMIL1553TriggerSyncType(self._vi, trigger, type)

    def ConfigureMIL1553TriggerDataRTAPattern(self, trigger, condition, RTAMin, RTAMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param RTAMin:
        :type RTAMin:
        :param RTAMax:
        :type RTAMax:
        """
        return self._dllwrap.ConfigureMIL1553TriggerDataRTAPattern(self._vi, trigger, condition, RTAMin, RTAMax)

    def ConfigureMIL1553TriggerDataPattern(self, trigger, condition, dataMin, dataMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param dataMin:
        :type dataMin:
        :param dataMax:
        :type dataMax:
        """
        return self._dllwrap.ConfigureMIL1553TriggerDataPattern(self._vi, trigger, condition, dataMin, dataMax)

    def ConfigureMIL1553TriggerDataIndex(self, trigger, condition, indexMin, indexMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param indexMin:
        :type indexMin:
        :param indexMax:
        :type indexMax:
        """
        return self._dllwrap.ConfigureMIL1553TriggerDataIndex(self._vi, trigger, condition, indexMin, indexMax)

    def ConfigureMIL1553TriggerCommandStatusRTAPattern(self, trigger, condition, RTAMin, RTAMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param RTAMin:
        :type RTAMin:
        :param RTAMax:
        :type RTAMax:
        """
        return self._dllwrap.ConfigureMIL1553TriggerCommandStatusRTAPattern(
            self._vi, trigger, condition, RTAMin, RTAMax
        )

    def ConfigureMIL1553TriggerCommandStatusInfoPattern(self, trigger, condition, infoMin, infoMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param infoMin:
        :type infoMin:
        :param infoMax:
        :type infoMax:
        """
        return self._dllwrap.ConfigureMIL1553TriggerCommandStatusInfoPattern(
            self._vi, trigger, condition, infoMin, infoMax
        )

    def ConfigureMIL1553TriggerCommandTransmissionDirection(self, trigger, direction):
        """

        :param trigger:
        :type trigger:
        :param direction:
        :type direction:
        """
        return self._dllwrap.ConfigureMIL1553TriggerCommandTransmissionDirection(self._vi, trigger, direction)

    def ConfigureMIL1553TriggerCommandRTAPattern(self, trigger, condition, RTAMin, RTAMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param RTAMin:
        :type RTAMin:
        :param RTAMax:
        :type RTAMax:
        """
        return self._dllwrap.ConfigureMIL1553TriggerCommandRTAPattern(self._vi, trigger, condition, RTAMin, RTAMax)

    def ConfigureMIL1553TriggerCommandSubaddressPattern(self, trigger, condition, subaddressMin, subaddressMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param subaddressMin:
        :type subaddressMin:
        :param subaddressMax:
        :type subaddressMax:
        """
        return self._dllwrap.ConfigureMIL1553TriggerCommandSubaddressPattern(
            self._vi, trigger, condition, subaddressMin, subaddressMax
        )

    def ConfigureMIL1553TriggerCommandWordCountPattern(self, trigger, condition, wordCountMin, wordCountMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param wordCountMin:
        :type wordCountMin:
        :param wordCountMax:
        :type wordCountMax:
        """
        return self._dllwrap.ConfigureMIL1553TriggerCommandWordCountPattern(
            self._vi, trigger, condition, wordCountMin, wordCountMax
        )

    def ConfigureMIL1553TriggerStatusFlags(
        self,
        trigger,
        messageError,
        busy,
        instrumentation,
        subsystem,
        serviceRequest,
        dynamicBusControl,
        broadcastCommand,
        terminal,
    ):
        """

        :param trigger:
        :type trigger:
        :param messageError:
        :type messageError:
        :param busy:
        :type busy:
        :param instrumentation:
        :type instrumentation:
        :param subsystem:
        :type subsystem:
        :param serviceRequest:
        :type serviceRequest:
        :param dynamicBusControl:
        :type dynamicBusControl:
        :param broadcastCommand:
        :type broadcastCommand:
        :param terminal:
        :type terminal:
        """
        return self._dllwrap.ConfigureMIL1553TriggerStatusFlags(
            self._vi,
            trigger,
            messageError,
            busy,
            instrumentation,
            subsystem,
            serviceRequest,
            dynamicBusControl,
            broadcastCommand,
            terminal,
        )

    def ConfigureMIL1553TriggerErrorCondition(self, trigger, synchronizationError, manchesterCodingError, parityError):
        """

        :param trigger:
        :type trigger:
        :param synchronizationError:
        :type synchronizationError:
        :param manchesterCodingError:
        :type manchesterCodingError:
        :param parityError:
        :type parityError:
        """
        return self._dllwrap.ConfigureMIL1553TriggerErrorCondition(
            self._vi, trigger, synchronizationError, manchesterCodingError, parityError
        )

    def ConfigureMIL1553TriggerErrorTiming(self, trigger, minGapState, minGap, maxResponseState, maxResponse):
        """

        :param trigger:
        :type trigger:
        :param minGapState:
        :type minGapState:
        :param minGap:
        :type minGap:
        :param maxResponseState:
        :type maxResponseState:
        :param maxResponse:
        :type maxResponse:
        """
        return self._dllwrap.ConfigureMIL1553TriggerErrorTiming(
            self._vi, trigger, minGapState, minGap, maxResponseState, maxResponse
        )

    def QueryMIL1553WordCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryMIL1553WordCount(self._vi, serialBus)

    def QueryMIL1553Status(self, serialBus, word):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        """
        return self._dllwrap.QueryMIL1553Status(self._vi, serialBus, word)

    def QueryMIL1553AllData(self, serialBus, word, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMIL1553AllData(self._vi, serialBus, word, bufferSize)

    def QueryMIL1553Label(self, serialBus, word, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMIL1553Label(self._vi, serialBus, word, bufferSize)

    def ConfigureMIL1553SearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureMIL1553SearchType(self._vi, searchName, type)

    def ConfigureMIL1553SearchSyncType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureMIL1553SearchSyncType(self._vi, searchName, type)

    def ConfigureMIL1553SearchDataRTAPattern(self, searchName, condition, RTAMin, RTAMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param RTAMin:
        :type RTAMin:
        :param RTAMax:
        :type RTAMax:
        """
        return self._dllwrap.ConfigureMIL1553SearchDataRTAPattern(self._vi, searchName, condition, RTAMin, RTAMax)

    def ConfigureMIL1553SearchDataPattern(self, searchName, condition, dataMin, dataMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param dataMin:
        :type dataMin:
        :param dataMax:
        :type dataMax:
        """
        return self._dllwrap.ConfigureMIL1553SearchDataPattern(self._vi, searchName, condition, dataMin, dataMax)

    def ConfigureMIL1553SearchDataIndex(self, searchName, condition, indexMin, indexMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param indexMin:
        :type indexMin:
        :param indexMax:
        :type indexMax:
        """
        return self._dllwrap.ConfigureMIL1553SearchDataIndex(self._vi, searchName, condition, indexMin, indexMax)

    def ConfigureMIL1553SearchCommandStatusRTAPattern(self, searchName, condition, RTAMin, RTAMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param RTAMin:
        :type RTAMin:
        :param RTAMax:
        :type RTAMax:
        """
        return self._dllwrap.ConfigureMIL1553SearchCommandStatusRTAPattern(
            self._vi, searchName, condition, RTAMin, RTAMax
        )

    def ConfigureMIL1553SearchCommandStatusInfoPattern(self, searchName, condition, infoMin, infoMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param infoMin:
        :type infoMin:
        :param infoMax:
        :type infoMax:
        """
        return self._dllwrap.ConfigureMIL1553SearchCommandStatusInfoPattern(
            self._vi, searchName, condition, infoMin, infoMax
        )

    def ConfigureMIL1553SearchCommandTransmissionDirection(self, searchName, direction):
        """

        :param searchName:
        :type searchName:
        :param direction:
        :type direction:
        """
        return self._dllwrap.ConfigureMIL1553SearchCommandTransmissionDirection(self._vi, searchName, direction)

    def ConfigureMIL1553SearchCommandRTAPattern(self, searchName, condition, RTAMin, RTAMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param RTAMin:
        :type RTAMin:
        :param RTAMax:
        :type RTAMax:
        """
        return self._dllwrap.ConfigureMIL1553SearchCommandRTAPattern(self._vi, searchName, condition, RTAMin, RTAMax)

    def ConfigureMIL1553SearchCommandSubaddressPattern(self, searchName, condition, subaddressMin, subaddressMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param subaddressMin:
        :type subaddressMin:
        :param subaddressMax:
        :type subaddressMax:
        """
        return self._dllwrap.ConfigureMIL1553SearchCommandSubaddressPattern(
            self._vi, searchName, condition, subaddressMin, subaddressMax
        )

    def ConfigureMIL1553SearchCommandWordCountPattern(self, searchName, condition, wordCountMin, wordCountMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param wordCountMin:
        :type wordCountMin:
        :param wordCountMax:
        :type wordCountMax:
        """
        return self._dllwrap.ConfigureMIL1553SearchCommandWordCountPattern(
            self._vi, searchName, condition, wordCountMin, wordCountMax
        )

    def ConfigureMIL1553SearchStatusFlags(
        self,
        searchName,
        messageError,
        busy,
        instrumentation,
        subsystem,
        serviceRequest,
        dynamicBusControl,
        broadcastCommand,
        terminal,
    ):
        """

        :param searchName:
        :type searchName:
        :param messageError:
        :type messageError:
        :param busy:
        :type busy:
        :param instrumentation:
        :type instrumentation:
        :param subsystem:
        :type subsystem:
        :param serviceRequest:
        :type serviceRequest:
        :param dynamicBusControl:
        :type dynamicBusControl:
        :param broadcastCommand:
        :type broadcastCommand:
        :param terminal:
        :type terminal:
        """
        return self._dllwrap.ConfigureMIL1553SearchStatusFlags(
            self._vi,
            searchName,
            messageError,
            busy,
            instrumentation,
            subsystem,
            serviceRequest,
            dynamicBusControl,
            broadcastCommand,
            terminal,
        )

    def ConfigureMIL1553SearchErrorCondition(
        self, searchName, synchronizationError, manchesterCodingError, parityError, timing
    ):
        """

        :param searchName:
        :type searchName:
        :param synchronizationError:
        :type synchronizationError:
        :param manchesterCodingError:
        :type manchesterCodingError:
        :param parityError:
        :type parityError:
        :param timing:
        :type timing:
        """
        return self._dllwrap.ConfigureMIL1553SearchErrorCondition(
            self._vi,
            searchName,
            synchronizationError,
            manchesterCodingError,
            parityError,
            timing,
        )

    def QueryMIL1553SearchWordCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryMIL1553SearchWordCount(self._vi, searchName)

    def QueryMIL1553SearchStatus(self, searchName, word):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        """
        return self._dllwrap.QueryMIL1553SearchStatus(self._vi, searchName, word)

    def QueryMIL1553SearchAllData(self, searchName, word, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMIL1553SearchAllData(self._vi, searchName, word, bufferSize)

    def QueryMIL1553SearchLabel(self, searchName, word, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMIL1553SearchLabel(self._vi, searchName, word, bufferSize)

    def ConfigureARINC429Source(self, serialBus, source):
        """

        :param serialBus:
        :type serialBus:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureARINC429Source(self._vi, serialBus, source)

    def ConfigureARINC429Polarity(self, serialBus, polarity):
        """

        :param serialBus:
        :type serialBus:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.ConfigureARINC429Polarity(self._vi, serialBus, polarity)

    def ConfigureARINC429BitRate(self, serialBus, bitRateMode, bitRateValue):
        """

        :param serialBus:
        :type serialBus:
        :param bitRateMode:
        :type bitRateMode:
        :param bitRateValue:
        :type bitRateValue:
        """
        return self._dllwrap.ConfigureARINC429BitRate(self._vi, serialBus, bitRateMode, bitRateValue)

    def ConfigureARINC429Threshold(self, serialBus, preset, thresholdHigh, thresholdLow):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param thresholdHigh:
        :type thresholdHigh:
        :param thresholdLow:
        :type thresholdLow:
        """
        return self._dllwrap.ConfigureARINC429Threshold(self._vi, serialBus, preset, thresholdHigh, thresholdLow)

    def ConfigureARINC429Timing(self, serialBus, minGapState, minGap, maxGapState, maxGap):
        """

        :param serialBus:
        :type serialBus:
        :param minGapState:
        :type minGapState:
        :param minGap:
        :type minGap:
        :param maxGapState:
        :type maxGapState:
        :param maxGap:
        :type maxGap:
        """
        return self._dllwrap.ConfigureARINC429Timing(self._vi, serialBus, minGapState, minGap, maxGapState, maxGap)

    def ConfigureARINC429TriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureARINC429TriggerType(self._vi, trigger, type)

    def ConfigureARINC429TriggerLabelData(self, trigger, SDI, SSM):
        """

        :param trigger:
        :type trigger:
        :param SDI:
        :type SDI:
        :param SSM:
        :type SSM:
        """
        return self._dllwrap.ConfigureARINC429TriggerLabelData(self._vi, trigger, SDI, SSM)

    def ConfigureARINC429TriggerLabelPattern(self, trigger, condition, labelMin, labelMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param labelMin:
        :type labelMin:
        :param labelMax:
        :type labelMax:
        """
        return self._dllwrap.ConfigureARINC429TriggerLabelPattern(self._vi, trigger, condition, labelMin, labelMax)

    def ConfigureARINC429TriggerDataPattern(self, trigger, condition, dataMin, dataMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param dataMin:
        :type dataMin:
        :param dataMax:
        :type dataMax:
        """
        return self._dllwrap.ConfigureARINC429TriggerDataPattern(self._vi, trigger, condition, dataMin, dataMax)

    def ConfigureARINC429TriggerErrorCondition(self, trigger, codingError, parityError):
        """

        :param trigger:
        :type trigger:
        :param codingError:
        :type codingError:
        :param parityError:
        :type parityError:
        """
        return self._dllwrap.ConfigureARINC429TriggerErrorCondition(self._vi, trigger, codingError, parityError)

    def ConfigureARINC429TriggerErrorTiming(self, trigger, minGapState, minGap, maxResponseState, maxResponse):
        """

        :param trigger:
        :type trigger:
        :param minGapState:
        :type minGapState:
        :param minGap:
        :type minGap:
        :param maxResponseState:
        :type maxResponseState:
        :param maxResponse:
        :type maxResponse:
        """
        return self._dllwrap.ConfigureARINC429TriggerErrorTiming(
            self._vi, trigger, minGapState, minGap, maxResponseState, maxResponse
        )

    def QueryARINC429WordCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryARINC429WordCount(self._vi, serialBus)

    def QueryARINC429Status(self, serialBus, word):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        """
        return self._dllwrap.QueryARINC429Status(self._vi, serialBus, word)

    def QueryARINC429AllData(self, serialBus, word, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryARINC429AllData(self._vi, serialBus, word, bufferSize)

    def QueryARINC429Label(self, serialBus, word, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryARINC429Label(self._vi, serialBus, word, bufferSize)

    def ConfigureARINC429SearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureARINC429SearchType(self._vi, searchName, type)

    def ConfigureARINC429SearchLabelData(self, searchName, SDI, SSM):
        """

        :param searchName:
        :type searchName:
        :param SDI:
        :type SDI:
        :param SSM:
        :type SSM:
        """
        return self._dllwrap.ConfigureARINC429SearchLabelData(self._vi, searchName, SDI, SSM)

    def ConfigureARINC429SearchLabelPattern(self, searchName, condition, labelMin, labelMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param labelMin:
        :type labelMin:
        :param labelMax:
        :type labelMax:
        """
        return self._dllwrap.ConfigureARINC429SearchLabelPattern(self._vi, searchName, condition, labelMin, labelMax)

    def ConfigureARINC429SearchDataPattern(self, searchName, condition, dataMin, dataMax):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param dataMin:
        :type dataMin:
        :param dataMax:
        :type dataMax:
        """
        return self._dllwrap.ConfigureARINC429SearchDataPattern(self._vi, searchName, condition, dataMin, dataMax)

    def ConfigureARINC429SearchErrorCondition(self, searchName, codingError, parityError, timingError):
        """

        :param searchName:
        :type searchName:
        :param codingError:
        :type codingError:
        :param parityError:
        :type parityError:
        :param timingError:
        :type timingError:
        """
        return self._dllwrap.ConfigureARINC429SearchErrorCondition(
            self._vi, searchName, codingError, parityError, timingError
        )

    def QueryARINC429SearchWordCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryARINC429SearchWordCount(self._vi, searchName)

    def QueryARINC429SearchStatus(self, searchName, word):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        """
        return self._dllwrap.QueryARINC429SearchStatus(self._vi, searchName, word)

    def QueryARINC429SearchAllData(self, searchName, word, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryARINC429SearchAllData(self._vi, searchName, word, bufferSize)

    def QueryARINC429SearchLabel(self, searchName, word, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryARINC429SearchLabel(self._vi, searchName, word, bufferSize)

    def ConfigureRFFESource(self, serialBus, line, waveformSource):
        """

        :param serialBus:
        :type serialBus:
        :param line:
        :type line:
        :param waveformSource:
        :type waveformSource:
        """
        return self._dllwrap.ConfigureRFFESource(self._vi, serialBus, line, waveformSource)

    def ConfigureRFFEThreshold(self, serialBus, preset, line, thresholdType, threshold):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param line:
        :type line:
        :param thresholdType:
        :type thresholdType:
        :param threshold:
        :type threshold:
        """
        return self._dllwrap.ConfigureRFFEThreshold(self._vi, serialBus, preset, line, thresholdType, threshold)

    def ConfigureRFFEThresholdsCoupling(self, serialBus, coupling):
        """

        :param serialBus:
        :type serialBus:
        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureRFFEThresholdsCoupling(self._vi, serialBus, coupling)

    def ConfigureRFFEGlitchFilter(self, serialBus, enable, width):
        """

        :param serialBus:
        :type serialBus:
        :param enable:
        :type enable:
        :param width:
        :type width:
        """
        return self._dllwrap.ConfigureRFFEGlitchFilter(self._vi, serialBus, enable, width)

    def ConfigureRFFETiming(
        self,
        serialBus,
        enableMinimumGap,
        minimumGapTime,
        enableMaximumGap,
        maximumGapTime,
    ):
        """

        :param serialBus:
        :type serialBus:
        :param enableMinimumGap:
        :type enableMinimumGap:
        :param minimumGapTime:
        :type minimumGapTime:
        :param enableMaximumGap:
        :type enableMaximumGap:
        :param maximumGapTime:
        :type maximumGapTime:
        """
        return self._dllwrap.ConfigureRFFETiming(
            self._vi,
            serialBus,
            enableMinimumGap,
            minimumGapTime,
            enableMaximumGap,
            maximumGapTime,
        )

    def ConfigureRFFETriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureRFFETriggerType(self._vi, trigger, type)

    def ConfigureRFFETriggerSlaveAddress(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureRFFETriggerSlaveAddress(self._vi, trigger, condition, minimum, maximum)

    def ConfigureRFFETriggerAddress(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureRFFETriggerAddress(self._vi, trigger, condition, minimum, maximum)

    def ConfigureRFFETriggerByteCount(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureRFFETriggerByteCount(self._vi, trigger, condition, minimum, maximum)

    def ConfigureRFFETriggerData(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureRFFETriggerData(self._vi, trigger, condition, minimum, maximum)

    def ConfigureRFFETriggerIndex(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureRFFETriggerIndex(self._vi, trigger, condition, minimum, maximum)

    def ConfigureRFFETriggerErrorConditions(self, trigger, SSC, length, busPark, parity, noResponse, unknownSequence):
        """

        :param trigger:
        :type trigger:
        :param SSC:
        :type SSC:
        :param length:
        :type length:
        :param busPark:
        :type busPark:
        :param parity:
        :type parity:
        :param noResponse:
        :type noResponse:
        :param unknownSequence:
        :type unknownSequence:
        """
        return self._dllwrap.ConfigureRFFETriggerErrorConditions(
            self._vi, trigger, SSC, length, busPark, parity, noResponse, unknownSequence
        )

    def QueryRFFESequenceCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryRFFESequenceCount(self._vi, serialBus)

    def QueryRFFESequenceStatus(self, serialBus, sequence):
        """

        :param serialBus:
        :type serialBus:
        :param sequence:
        :type sequence:
        """
        return self._dllwrap.QueryRFFESequenceStatus(self._vi, serialBus, sequence)

    def QueryRFFESequenceLabel(self, serialBus, sequence, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param sequence:
        :type sequence:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryRFFESequenceLabel(self._vi, serialBus, sequence, bufferSize)

    def QueryRFFESequenceAllData(self, serialBus, sequence, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param sequence:
        :type sequence:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryRFFESequenceAllData(self._vi, serialBus, sequence, bufferSize)

    def QueryRFFESequenceData(self, serialBus, sequence, byteNumber):
        """

        :param serialBus:
        :type serialBus:
        :param sequence:
        :type sequence:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryRFFESequenceData(self._vi, serialBus, sequence, byteNumber)

    def QueryRFFESequenceParity(self, serialBus, sequence):
        """

        :param serialBus:
        :type serialBus:
        :param sequence:
        :type sequence:
        """
        return self._dllwrap.QueryRFFESequenceParity(self._vi, serialBus, sequence)

    def ConfigureRFFESearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureRFFESearchType(self._vi, searchName, type)

    def ConfigureRFFESearchSlaveAddress(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureRFFESearchSlaveAddress(self._vi, searchName, condition, minimum, maximum)

    def ConfigureRFFESearchAddress(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureRFFESearchAddress(self._vi, searchName, condition, minimum, maximum)

    def ConfigureRFFESearchByteCount(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureRFFESearchByteCount(self._vi, searchName, condition, minimum, maximum)

    def ConfigureRFFESearchData(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureRFFESearchData(self._vi, searchName, condition, minimum, maximum)

    def ConfigureRFFESearchIndex(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureRFFESearchIndex(self._vi, searchName, condition, minimum, maximum)

    def ConfigureRFFESearchErrorConditions(self, searchName, SSC, length, reserved1, parity, reserved2, reserved3):
        """

        :param searchName:
        :type searchName:
        :param SSC:
        :type SSC:
        :param length:
        :type length:
        :param reserved1:
        :type reserved1:
        :param parity:
        :type parity:
        :param reserved2:
        :type reserved2:
        :param reserved3:
        :type reserved3:
        """
        return self._dllwrap.ConfigureRFFESearchErrorConditions(
            self._vi, searchName, SSC, length, reserved1, parity, reserved2, reserved3
        )

    def ConfigureRFFESearchInterrupt(self, searchName, interrupt):
        """

        :param searchName:
        :type searchName:
        :param interrupt:
        :type interrupt:
        """
        return self._dllwrap.ConfigureRFFESearchInterrupt(self._vi, searchName, interrupt)

    def QueryRFFESearchSequenceCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryRFFESearchSequenceCount(self._vi, searchName)

    def QueryRFFESearchSequenceStatus(self, searchName, sequence):
        """

        :param searchName:
        :type searchName:
        :param sequence:
        :type sequence:
        """
        return self._dllwrap.QueryRFFESearchSequenceStatus(self._vi, searchName, sequence)

    def QueryRFFESearchSequenceLabel(self, searchName, sequence, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param sequence:
        :type sequence:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryRFFESearchSequenceLabel(self._vi, searchName, sequence, bufferSize)

    def QueryRFFESearchSequenceAllData(self, searchName, sequence, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param sequence:
        :type sequence:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryRFFESearchSequenceAllData(self._vi, searchName, sequence, bufferSize)

    def QueryRFFESearchSequenceData(self, searchName, sequence, byteNumber):
        """

        :param searchName:
        :type searchName:
        :param sequence:
        :type sequence:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryRFFESearchSequenceData(self._vi, searchName, sequence, byteNumber)

    def ConfigureMDIOSource(self, serialBus, line, waveformSource):
        """

        :param serialBus:
        :type serialBus:
        :param line:
        :type line:
        :param waveformSource:
        :type waveformSource:
        """
        return self._dllwrap.ConfigureMDIOSource(self._vi, serialBus, line, waveformSource)

    def ConfigureMDIOThreshold(self, serialBus, preset, line, thresholdLow, thresholdHigh):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param line:
        :type line:
        :param thresholdLow:
        :type thresholdLow:
        :param thresholdHigh:
        :type thresholdHigh:
        """
        return self._dllwrap.ConfigureMDIOThreshold(self._vi, serialBus, preset, line, thresholdLow, thresholdHigh)

    def ConfigureMDIOThresholdsCoupling(self, serialBus, coupling):
        """

        :param serialBus:
        :type serialBus:
        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureMDIOThresholdsCoupling(self._vi, serialBus, coupling)

    def ConfigureMDIOTriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureMDIOTriggerType(self._vi, trigger, type)

    def ConfigureMDIOTriggerFramePattern(
        self,
        trigger,
        startCode,
        operationCode,
        physicalAddress,
        registerAddress,
        dataPattern,
    ):
        """

        :param trigger:
        :type trigger:
        :param startCode:
        :type startCode:
        :param operationCode:
        :type operationCode:
        :param physicalAddress:
        :type physicalAddress:
        :param registerAddress:
        :type registerAddress:
        :param dataPattern:
        :type dataPattern:
        """
        return self._dllwrap.ConfigureMDIOTriggerFramePattern(
            self._vi,
            trigger,
            startCode,
            operationCode,
            physicalAddress,
            registerAddress,
            dataPattern,
        )

    def ConfigureMDIOMaxGapTime(self, serialBus, maxGapTime):
        """

        :param serialBus:
        :type serialBus:
        :param maxGapTime:
        :type maxGapTime:
        """
        return self._dllwrap.ConfigureMDIOMaxGapTime(self._vi, serialBus, maxGapTime)

    def QueryMDIOWordCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryMDIOWordCount(self._vi, serialBus)

    def QueryMDIOWordStatus(self, serialBus, word, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMDIOWordStatus(self._vi, serialBus, word, bufferSize)

    def QueryMDIOWordLabel(self, serialBus, word, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMDIOWordLabel(self._vi, serialBus, word, bufferSize)

    def ConfigureMDIOSearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureMDIOSearchType(self._vi, searchName, type)

    def ConfigureMDIOSearchFramePattern(
        self,
        searchName,
        startCode,
        operationCode,
        physicalAddress,
        registerAddress,
        dataPattern,
    ):
        """

        :param searchName:
        :type searchName:
        :param startCode:
        :type startCode:
        :param operationCode:
        :type operationCode:
        :param physicalAddress:
        :type physicalAddress:
        :param registerAddress:
        :type registerAddress:
        :param dataPattern:
        :type dataPattern:
        """
        return self._dllwrap.ConfigureMDIOSearchFramePattern(
            self._vi,
            searchName,
            startCode,
            operationCode,
            physicalAddress,
            registerAddress,
            dataPattern,
        )

    def QueryMDIOSearchWordCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryMDIOSearchWordCount(self._vi, searchName)

    def QueryMDIOSearchWordStatus(self, searchName, word, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMDIOSearchWordStatus(self._vi, searchName, word, bufferSize)

    def QueryMDIOSearchWordLabel(self, searchName, word, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMDIOSearchWordLabel(self._vi, searchName, word, bufferSize)

    def ConfigureEthernetVariant(self, serialBus, variant):
        """

        :param serialBus:
        :type serialBus:
        :param variant:
        :type variant:
        """
        return self._dllwrap.ConfigureEthernetVariant(self._vi, serialBus, variant)

    def ConfigureEthernetSource(self, serialBus, source):
        """

        :param serialBus:
        :type serialBus:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureEthernetSource(self._vi, serialBus, source)

    def ConfigureEthernetPolarity(self, serialBus, polarity):
        """

        :param serialBus:
        :type serialBus:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.ConfigureEthernetPolarity(self._vi, serialBus, polarity)

    def ConfigureEthernetThreshold(self, serialBus, preset, thresholdLow, thresholdHigh):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param thresholdLow:
        :type thresholdLow:
        :param thresholdHigh:
        :type thresholdHigh:
        """
        return self._dllwrap.ConfigureEthernetThreshold(self._vi, serialBus, preset, thresholdLow, thresholdHigh)

    def ConfigureEthernetBitRate(self, serialBus, bitrate):
        """

        :param serialBus:
        :type serialBus:
        :param bitrate:
        :type bitrate:
        """
        return self._dllwrap.ConfigureEthernetBitRate(self._vi, serialBus, bitrate)

    def ConfigureEthernetTrigger(self, trigger, pattern, type):
        """

        :param trigger:
        :type trigger:
        :param pattern:
        :type pattern:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureEthernetTrigger(self._vi, trigger, pattern, type)

    def QueryEthernetWordCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryEthernetWordCount(self._vi, serialBus)

    def QueryEthernetWordBitRate(self, serialBus, word):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        """
        return self._dllwrap.QueryEthernetWordBitRate(self._vi, serialBus, word)

    def QueryEthernetWordStatus(self, serialBus, word, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryEthernetWordStatus(self._vi, serialBus, word, bufferSize)

    def QueryEthernetWordLabel(self, serialBus, word, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryEthernetWordLabel(self._vi, serialBus, word, bufferSize)

    def QueryEthernetWordData(self, serialBus, word, byteNumber):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryEthernetWordData(self._vi, serialBus, word, byteNumber)

    def QueryEthernetWordAllData(self, serialBus, word, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryEthernetWordAllData(self._vi, serialBus, word, bufferSize)

    def QueryEthernetWordFrameType(self, serialBus, word):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        """
        return self._dllwrap.QueryEthernetWordFrameType(self._vi, serialBus, word)

    def QueryEthernetWordNumberOfWords(self, serialBus, word):
        """

        :param serialBus:
        :type serialBus:
        :param word:
        :type word:
        """
        return self._dllwrap.QueryEthernetWordNumberOfWords(self._vi, serialBus, word)

    def ConfigureEthernetSearchCriteria(self, searchName, frameEnabled, errorEnabled):
        """

        :param searchName:
        :type searchName:
        :param frameEnabled:
        :type frameEnabled:
        :param errorEnabled:
        :type errorEnabled:
        """
        return self._dllwrap.ConfigureEthernetSearchCriteria(self._vi, searchName, frameEnabled, errorEnabled)

    def ConfigureEthernetSearchDestinationAddress(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureEthernetSearchDestinationAddress(
            self._vi, searchName, condition, minimum, maximum
        )

    def ConfigureEthernetSearchSourceAddress(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureEthernetSearchSourceAddress(self._vi, searchName, condition, minimum, maximum)

    def ConfigureEthernetSearchTypeLength(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureEthernetSearchTypeLength(self._vi, searchName, condition, minimum, maximum)

    def ConfigureEthernetSearchFrameCheck(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureEthernetSearchFrameCheck(self._vi, searchName, condition, minimum, maximum)

    def ConfigureEthernetSearchErrorConditions(self, searchName, preamble, length):
        """

        :param searchName:
        :type searchName:
        :param preamble:
        :type preamble:
        :param length:
        :type length:
        """
        return self._dllwrap.ConfigureEthernetSearchErrorConditions(self._vi, searchName, preamble, length)

    def QueryEthernetSearchWordCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryEthernetSearchWordCount(self._vi, searchName)

    def QueryEthernetSearchWordStatus(self, searchName, word, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryEthernetSearchWordStatus(self._vi, searchName, word, bufferSize)

    def QueryEthernetSearchWordLabel(self, searchName, word, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryEthernetSearchWordLabel(self._vi, searchName, word, bufferSize)

    def QueryEthernetSearchWordData(self, searchName, word, byteNumber):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        :param byteNumber:
        :type byteNumber:
        """
        return self._dllwrap.QueryEthernetSearchWordData(self._vi, searchName, word, byteNumber)

    def QueryEthernetSearchWordAllData(self, searchName, word, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryEthernetSearchWordAllData(self._vi, searchName, word, bufferSize)

    def QueryEthernetSearchWordFrameType(self, searchName, word):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        """
        return self._dllwrap.QueryEthernetSearchWordFrameType(self._vi, searchName, word)

    def ConfigureUSBSource(self, serialBus, protocolType, waveformSource):
        """

        :param serialBus:
        :type serialBus:
        :param protocolType:
        :type protocolType:
        :param waveformSource:
        :type waveformSource:
        """
        return self._dllwrap.ConfigureUSBSource(self._vi, serialBus, protocolType, waveformSource)

    def ConfigureUSBPreset(self, serialBus, preset):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        """
        return self._dllwrap.ConfigureUSBPreset(self._vi, serialBus, preset)

    def ConfigureUSBThreshold(self, serialBus, protocolType, threshold):
        """

        :param serialBus:
        :type serialBus:
        :param protocolType:
        :type protocolType:
        :param threshold:
        :type threshold:
        """
        return self._dllwrap.ConfigureUSBThreshold(self._vi, serialBus, protocolType, threshold)

    def ConfigureUSBTriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureUSBTriggerType(self._vi, trigger, type)

    def ConfigureUSBTriggerToken(self, trigger, token):
        """

        :param trigger:
        :type trigger:
        :param token:
        :type token:
        """
        return self._dllwrap.ConfigureUSBTriggerToken(self._vi, trigger, token)

    def ConfigureUSBTriggerDataType(self, trigger, dataType):
        """

        :param trigger:
        :type trigger:
        :param dataType:
        :type dataType:
        """
        return self._dllwrap.ConfigureUSBTriggerDataType(self._vi, trigger, dataType)

    def ConfigureUSBTriggerHandshakeType(self, trigger, handshakeType):
        """

        :param trigger:
        :type trigger:
        :param handshakeType:
        :type handshakeType:
        """
        return self._dllwrap.ConfigureUSBTriggerHandshakeType(self._vi, trigger, handshakeType)

    def ConfigureUSBTriggerSpecialPID(self, trigger, specialPID):
        """

        :param trigger:
        :type trigger:
        :param specialPID:
        :type specialPID:
        """
        return self._dllwrap.ConfigureUSBTriggerSpecialPID(self._vi, trigger, specialPID)

    def ConfigureUSBTriggerErrorCondition(self, trigger, errorConditionType):
        """

        :param trigger:
        :type trigger:
        :param errorConditionType:
        :type errorConditionType:
        """
        return self._dllwrap.ConfigureUSBTriggerErrorCondition(self._vi, trigger, errorConditionType)

    def ConfigureUSBTriggerPIDErrorCheck(self, trigger, PIDErrorCheck):
        """

        :param trigger:
        :type trigger:
        :param PIDErrorCheck:
        :type PIDErrorCheck:
        """
        return self._dllwrap.ConfigureUSBTriggerPIDErrorCheck(self._vi, trigger, PIDErrorCheck)

    def ConfigureUSBTriggerEndPointCheck(self, trigger, enabled, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBTriggerEndPointCheck(self._vi, trigger, enabled, condition, minimum, maximum)

    def ConfigureUSBTriggerAddressCheck(self, trigger, enabled, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBTriggerAddressCheck(self._vi, trigger, enabled, condition, minimum, maximum)

    def ConfigureUSBTriggerPayloadCheck(self, trigger, enabled, condition, position, dataCondition, pattern):
        """

        :param trigger:
        :type trigger:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param position:
        :type position:
        :param dataCondition:
        :type dataCondition:
        :param pattern:
        :type pattern:
        """
        return self._dllwrap.ConfigureUSBTriggerPayloadCheck(
            self._vi, trigger, enabled, condition, position, dataCondition, pattern
        )

    def ConfigureUSBTriggerFrameCheck(self, trigger, enabled, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBTriggerFrameCheck(self._vi, trigger, enabled, condition, minimum, maximum)

    def ConfigureUSBTriggerSCCheck(self, trigger, enabled, startComplete):
        """

        :param trigger:
        :type trigger:
        :param enabled:
        :type enabled:
        :param startComplete:
        :type startComplete:
        """
        return self._dllwrap.ConfigureUSBTriggerSCCheck(self._vi, trigger, enabled, startComplete)

    def ConfigureUSBTriggerPortCheck(self, trigger, enabled, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBTriggerPortCheck(self._vi, trigger, enabled, condition, minimum, maximum)

    def ConfigureUSBTriggerSEUCheck(self, trigger, enabled, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBTriggerSEUCheck(self._vi, trigger, enabled, condition, minimum, maximum)

    def ConfigureUSBTriggerETCheck(self, trigger, enabled, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBTriggerETCheck(self._vi, trigger, enabled, condition, minimum, maximum)

    def QueryUSBPacketCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryUSBPacketCount(self._vi, serialBus)

    def QueryUSBPacketStatus(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryUSBPacketStatus(self._vi, serialBus, packet)

    def QueryUSBPacketValues(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryUSBPacketValues(self._vi, serialBus, packet)

    def QueryUSBPacketAllData(self, serialBus, packet, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryUSBPacketAllData(self._vi, serialBus, packet, bufferSize)

    def ConfigureUSBSearchCriteria(
        self,
        searchName,
        startOfPacket,
        token,
        data,
        handshake,
        specialPID,
        errorCondition,
    ):
        """

        :param searchName:
        :type searchName:
        :param startOfPacket:
        :type startOfPacket:
        :param token:
        :type token:
        :param data:
        :type data:
        :param handshake:
        :type handshake:
        :param specialPID:
        :type specialPID:
        :param errorCondition:
        :type errorCondition:
        """
        return self._dllwrap.ConfigureUSBSearchCriteria(
            self._vi,
            searchName,
            startOfPacket,
            token,
            data,
            handshake,
            specialPID,
            errorCondition,
        )

    def ConfigureUSBSearchToken(self, searchName, token):
        """

        :param searchName:
        :type searchName:
        :param token:
        :type token:
        """
        return self._dllwrap.ConfigureUSBSearchToken(self._vi, searchName, token)

    def ConfigureUSBSearchDataType(self, searchName, dataType):
        """

        :param searchName:
        :type searchName:
        :param dataType:
        :type dataType:
        """
        return self._dllwrap.ConfigureUSBSearchDataType(self._vi, searchName, dataType)

    def ConfigureUSBSearchHandshakeType(self, searchName, handshakeType):
        """

        :param searchName:
        :type searchName:
        :param handshakeType:
        :type handshakeType:
        """
        return self._dllwrap.ConfigureUSBSearchHandshakeType(self._vi, searchName, handshakeType)

    def ConfigureUSBSearchSpecialPID(self, searchName, specialPID):
        """

        :param searchName:
        :type searchName:
        :param specialPID:
        :type specialPID:
        """
        return self._dllwrap.ConfigureUSBSearchSpecialPID(self._vi, searchName, specialPID)

    def ConfigureUSBSearchPIDErrorCheck(self, searchName, PIDErrorCheck):
        """

        :param searchName:
        :type searchName:
        :param PIDErrorCheck:
        :type PIDErrorCheck:
        """
        return self._dllwrap.ConfigureUSBSearchPIDErrorCheck(self._vi, searchName, PIDErrorCheck)

    def ConfigureUSBSearchErrorCondition(self, searchName, PID, CRC5, CRC16, bitstuff, glitch):
        """

        :param searchName:
        :type searchName:
        :param PID:
        :type PID:
        :param CRC5:
        :type CRC5:
        :param CRC16:
        :type CRC16:
        :param bitstuff:
        :type bitstuff:
        :param glitch:
        :type glitch:
        """
        return self._dllwrap.ConfigureUSBSearchErrorCondition(self._vi, searchName, PID, CRC5, CRC16, bitstuff, glitch)

    def ConfigureUSBSearchEndPointCheck(self, searchName, enabled, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBSearchEndPointCheck(self._vi, searchName, enabled, condition, minimum, maximum)

    def ConfigureUSBSearchAddressCheck(self, searchName, enabled, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBSearchAddressCheck(self._vi, searchName, enabled, condition, minimum, maximum)

    def ConfigureUSBSearchPayloadCheck(self, searchName, enabled, condition, position, dataCondition, pattern):
        """

        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param position:
        :type position:
        :param dataCondition:
        :type dataCondition:
        :param pattern:
        :type pattern:
        """
        return self._dllwrap.ConfigureUSBSearchPayloadCheck(
            self._vi, searchName, enabled, condition, position, dataCondition, pattern
        )

    def ConfigureUSBSearchFrameCheck(self, searchName, enabled, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBSearchFrameCheck(self._vi, searchName, enabled, condition, minimum, maximum)

    def ConfigureUSBSearchSCCheck(self, searchName, enabled, startComplete):
        """

        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        :param startComplete:
        :type startComplete:
        """
        return self._dllwrap.ConfigureUSBSearchSCCheck(self._vi, searchName, enabled, startComplete)

    def ConfigureUSBSearchPortCheck(self, searchName, enabled, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBSearchPortCheck(self._vi, searchName, enabled, condition, minimum, maximum)

    def ConfigureUSBSearchSEUCheck(self, searchName, enabled, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBSearchSEUCheck(self._vi, searchName, enabled, condition, minimum, maximum)

    def ConfigureUSBSearchETCheck(self, searchName, enabled, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBSearchETCheck(self._vi, searchName, enabled, condition, minimum, maximum)

    def QueryUSBSearchPacketCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryUSBSearchPacketCount(self._vi, searchName)

    def QueryUSBSearchPacketStatus(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryUSBSearchPacketStatus(self._vi, searchName, packet)

    def QueryUSBSearchPacketValues(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryUSBSearchPacketValues(self._vi, searchName, packet)

    def QueryUSBSearchPacketAllData(self, searchName, packet, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryUSBSearchPacketAllData(self._vi, searchName, packet, bufferSize)

    def ConfigureUSB31(self, serialBus, source, polarity):
        """

        :param serialBus:
        :type serialBus:
        :param source:
        :type source:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.ConfigureUSB31(self._vi, serialBus, source, polarity)

    def ConfigureUSB31ProtocolType(self, serialBus, protocolType):
        """

        :param serialBus:
        :type serialBus:
        :param protocolType:
        :type protocolType:
        """
        return self._dllwrap.ConfigureUSB31ProtocolType(self._vi, serialBus, protocolType)

    def ConfigureUSB31Thresholds(self, serialBus, low, high):
        """

        :param serialBus:
        :type serialBus:
        :param low:
        :type low:
        :param high:
        :type high:
        """
        return self._dllwrap.ConfigureUSB31Thresholds(self._vi, serialBus, low, high)

    def ConfigureUSB31ScrambleMode(self, serialBus, scrambleMode):
        """

        :param serialBus:
        :type serialBus:
        :param scrambleMode:
        :type scrambleMode:
        """
        return self._dllwrap.ConfigureUSB31ScrambleMode(self._vi, serialBus, scrambleMode)

    def ConfigureUSB31TriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureUSB31TriggerType(self._vi, trigger, type)

    def ConfigureUSB31TriggerPacketType(self, trigger, packetType):
        """

        :param trigger:
        :type trigger:
        :param packetType:
        :type packetType:
        """
        return self._dllwrap.ConfigureUSB31TriggerPacketType(self._vi, trigger, packetType)

    def ConfigureUSB31TriggerErrorEnabled(self, trigger, errorName, enabled):
        """

        :param trigger:
        :type trigger:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31TriggerErrorEnabled(self._vi, trigger, errorName, enabled)

    def ConfigureUSB31TriggerFieldNameEnabled(self, trigger, fieldNumber, packetType, enable):
        """

        :param trigger:
        :type trigger:
        :param fieldNumber:
        :type fieldNumber:
        :param packetType:
        :type packetType:
        :param enable:
        :type enable:
        """
        return self._dllwrap.ConfigureUSB31TriggerFieldNameEnabled(self._vi, trigger, fieldNumber, packetType, enable)

    def ConfigureUSB31TriggerBitState(self, trigger, fieldNumber, bitState):
        """

        :param trigger:
        :type trigger:
        :param fieldNumber:
        :type fieldNumber:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureUSB31TriggerBitState(self._vi, trigger, fieldNumber, bitState)

    def ConfigureUSB31TriggerData(self, trigger, fieldNumber, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param fieldNumber:
        :type fieldNumber:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureUSB31TriggerData(self._vi, trigger, fieldNumber, condition, min, max)

    def ConfigureUSB31TriggerIndex(self, trigger, fieldNumber, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param fieldNumber:
        :type fieldNumber:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureUSB31TriggerIndex(self._vi, trigger, fieldNumber, condition, min, max)

    def ConfigureUSB31TriggerErrorTypeNameEnabled(self, trigger, errorName, enabled):
        """

        :param trigger:
        :type trigger:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31TriggerErrorTypeNameEnabled(self._vi, trigger, errorName, enabled)

    def ConfigureUSB31TriggerErrorTypeNumericEnabled(self, trigger, errorNumber, enabled):
        """

        :param trigger:
        :type trigger:
        :param errorNumber:
        :type errorNumber:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31TriggerErrorTypeNumericEnabled(self._vi, trigger, errorNumber, enabled)

    def ConfigureUSB31TriggerFrameTypeNameEnabled(self, trigger, frame, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31TriggerFrameTypeNameEnabled(self._vi, trigger, frame, enabled)

    def ConfigureUSB31TriggerFrameTypeNumericEnabled(self, trigger, frame, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31TriggerFrameTypeNumericEnabled(self._vi, trigger, frame, enabled)

    def ConfigureUSB31TriggerFrameFieldNameEnabled(self, trigger, frame, field, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31TriggerFrameFieldNameEnabled(self._vi, trigger, frame, field, enabled)

    def ConfigureUSB31TriggerFrameFieldNumericEnabled(self, trigger, frame, field, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31TriggerFrameFieldNumericEnabled(self._vi, trigger, frame, field, enabled)

    def ConfigureUSB31TriggerFrameFieldNameBitState(self, trigger, frame, field, bitState):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureUSB31TriggerFrameFieldNameBitState(self._vi, trigger, frame, field, bitState)

    def ConfigureUSB31TriggerFrameFieldNumericBitState(self, trigger, frame, field, bitState):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureUSB31TriggerFrameFieldNumericBitState(self._vi, trigger, frame, field, bitState)

    def ConfigureUSB31TriggerFrameFieldNameData(self, trigger, frame, field, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSB31TriggerFrameFieldNameData(
            self._vi, trigger, frame, field, condition, minimum, maximum
        )

    def ConfigureUSB31TriggerFrameFieldNumericData(self, trigger, frame, field, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSB31TriggerFrameFieldNumericData(
            self._vi, trigger, frame, field, condition, minimum, maximum
        )

    def ConfigureUSB31TriggerFrameFieldNameIndex(self, trigger, frame, field, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSB31TriggerFrameFieldNameIndex(
            self._vi, trigger, frame, field, condition, minimum, maximum
        )

    def ConfigureUSB31TriggerFrameFieldNumericIndex(self, trigger, frame, field, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSB31TriggerFrameFieldNumericIndex(
            self._vi, trigger, frame, field, condition, minimum, maximum
        )

    def QueryUSB31FrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryUSB31FrameCount(self._vi, serialBus)

    def QueryUSB31FrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryUSB31FrameStatus(self._vi, serialBus, frame)

    def QueryUSB31FrameInfo(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryUSB31FrameInfo(self._vi, serialBus, frame)

    def QueryUSB31FrameFieldType(self, serialBus, frame, field):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSB31FrameFieldType(self._vi, serialBus, frame, field)

    def QueryUSB31FrameFieldStatus(self, serialBus, frame, field):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSB31FrameFieldStatus(self._vi, serialBus, frame, field)

    def QueryUSB31FrameFieldStartStop(self, serialBus, frame, field):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSB31FrameFieldStartStop(self._vi, serialBus, frame, field)

    def QueryUSB31FrameFieldValue(self, serialBus, frame, field):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSB31FrameFieldValue(self._vi, serialBus, frame, field)

    def QueryUSB31FrameFieldFormatedValue(self, serialBus, frame, field, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryUSB31FrameFieldFormatedValue(self._vi, serialBus, frame, field, bufferSize)

    def ConfigureUSB31SearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureUSB31SearchType(self._vi, searchName, type)

    def ConfigureUSB31SearchPacketType(self, searchName, packetType):
        """

        :param searchName:
        :type searchName:
        :param packetType:
        :type packetType:
        """
        return self._dllwrap.ConfigureUSB31SearchPacketType(self._vi, searchName, packetType)

    def ConfigureUSB31SearchErrorEnabled(self, searchName, errorName, enabled):
        """

        :param searchName:
        :type searchName:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31SearchErrorEnabled(self._vi, searchName, errorName, enabled)

    def ConfigureUSB31SearchFieldNameEnabled(self, searchName, fieldNumber, packetType, enable):
        """

        :param searchName:
        :type searchName:
        :param fieldNumber:
        :type fieldNumber:
        :param packetType:
        :type packetType:
        :param enable:
        :type enable:
        """
        return self._dllwrap.ConfigureUSB31SearchFieldNameEnabled(self._vi, searchName, fieldNumber, packetType, enable)

    def ConfigureUSB31SearchData(self, searchName, fieldNumber, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param fieldNumber:
        :type fieldNumber:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureUSB31SearchData(self._vi, searchName, fieldNumber, condition, min, max)

    def ConfigureUSB31SearchIndex(self, searchName, fieldNumber, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param fieldNumber:
        :type fieldNumber:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureUSB31SearchIndex(self._vi, searchName, fieldNumber, condition, min, max)

    def ConfigureUSB31SearchBitState(self, searchName, fieldNumber, bitState):
        """

        :param searchName:
        :type searchName:
        :param fieldNumber:
        :type fieldNumber:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureUSB31SearchBitState(self._vi, searchName, fieldNumber, bitState)

    def ConfigureUSB31SearchErrorTypeNameEnabled(self, searchName, errorName, enabled):
        """

        :param searchName:
        :type searchName:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31SearchErrorTypeNameEnabled(self._vi, searchName, errorName, enabled)

    def ConfigureUSB31SearchErrorTypeNumericEnabled(self, searchName, errorNumber, enabled):
        """

        :param searchName:
        :type searchName:
        :param errorNumber:
        :type errorNumber:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31SearchErrorTypeNumericEnabled(self._vi, searchName, errorNumber, enabled)

    def ConfigureUSB31SearchFrameTypeNameEnabled(self, searchName, frame, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31SearchFrameTypeNameEnabled(self._vi, searchName, frame, enabled)

    def ConfigureUSB31SearchFrameTypeNumericEnabled(self, searchName, frame, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31SearchFrameTypeNumericEnabled(self._vi, searchName, frame, enabled)

    def ConfigureUSB31SearchFrameFieldNameEnabled(self, searchName, frame, field, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31SearchFrameFieldNameEnabled(self._vi, searchName, frame, field, enabled)

    def ConfigureUSB31SearchFrameFieldNumericEnabled(self, searchName, frame, field, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSB31SearchFrameFieldNumericEnabled(self._vi, searchName, frame, field, enabled)

    def ConfigureUSB31SearchFrameFieldNameBitState(self, searchName, frame, field, bitState):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureUSB31SearchFrameFieldNameBitState(self._vi, searchName, frame, field, bitState)

    def ConfigureUSB31SearchFrameFieldNumericBitState(self, searchName, frame, field, bitState):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureUSB31SearchFrameFieldNumericBitState(self._vi, searchName, frame, field, bitState)

    def ConfigureUSB31SearchFrameFieldNameData(self, searchName, frame, field, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSB31SearchFrameFieldNameData(
            self._vi, searchName, frame, field, condition, minimum, maximum
        )

    def ConfigureUSB31SearchFrameFieldNumericData(self, searchName, frame, field, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSB31SearchFrameFieldNumericData(
            self._vi, searchName, frame, field, condition, minimum, maximum
        )

    def ConfigureUSB31SearchFrameFieldNameIndex(self, searchName, frame, field, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSB31SearchFrameFieldNameIndex(
            self._vi, searchName, frame, field, condition, minimum, maximum
        )

    def ConfigureUSB31SearchFrameFieldNumericIndex(self, searchName, frame, field, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSB31SearchFrameFieldNumericIndex(
            self._vi, searchName, frame, field, condition, minimum, maximum
        )

    def QueryUSB31SearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryUSB31SearchFrameCount(self._vi, searchName)

    def QueryUSB31SearchFrameStatus(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryUSB31SearchFrameStatus(self._vi, searchName, frame)

    def QueryUSB31SearchFrameInfo(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryUSB31SearchFrameInfo(self._vi, searchName, frame)

    def QueryUSB31SearchFrameFieldType(self, searchName, frame, field):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSB31SearchFrameFieldType(self._vi, searchName, frame, field)

    def QueryUSB31SearchFrameFieldStatus(self, searchName, field, frame):
        """

        :param searchName:
        :type searchName:
        :param field:
        :type field:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryUSB31SearchFrameFieldStatus(self._vi, searchName, field, frame)

    def QueryUSB31SearchFrameFieldStartStop(self, searchName, field, frame):
        """

        :param searchName:
        :type searchName:
        :param field:
        :type field:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryUSB31SearchFrameFieldStartStop(self._vi, searchName, field, frame)

    def QueryUSB31SearchFrameFieldValue(self, searchName, frame, field):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSB31SearchFrameFieldValue(self._vi, searchName, frame, field)

    def QueryUSB31SearchFrameFieldFormatedValue(self, searchName, frame, field, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryUSB31SearchFrameFieldFormatedValue(self._vi, searchName, frame, field, bufferSize)

    def ConfigureUSBPDDataSource(self, serialBus, dataSource):
        """

        :param serialBus:
        :type serialBus:
        :param dataSource:
        :type dataSource:
        """
        return self._dllwrap.ConfigureUSBPDDataSource(self._vi, serialBus, dataSource)

    def ConfigureUSBPDThresholds(self, serialBus, dataThreshold, hysteresis, VRD15, VRDUSB, VRA):
        """

        :param serialBus:
        :type serialBus:
        :param dataThreshold:
        :type dataThreshold:
        :param hysteresis:
        :type hysteresis:
        :param VRD15:
        :type VRD15:
        :param VRDUSB:
        :type VRDUSB:
        :param VRA:
        :type VRA:
        """
        return self._dllwrap.ConfigureUSBPDThresholds(
            self._vi, serialBus, dataThreshold, hysteresis, VRD15, VRDUSB, VRA
        )

    def ConfigureUSBPDShowDecodeDetail(self, serialBus, showDecodeDetail):
        """

        :param serialBus:
        :type serialBus:
        :param showDecodeDetail:
        :type showDecodeDetail:
        """
        return self._dllwrap.ConfigureUSBPDShowDecodeDetail(self._vi, serialBus, showDecodeDetail)

    def ConfigureUSBPDTriggerType(self, trigger, triggerType):
        """

        :param trigger:
        :type trigger:
        :param triggerType:
        :type triggerType:
        """
        return self._dllwrap.ConfigureUSBPDTriggerType(self._vi, trigger, triggerType)

    def ConfigureUSBPDTriggerPacketType(self, trigger, packetType):
        """

        :param trigger:
        :type trigger:
        :param packetType:
        :type packetType:
        """
        return self._dllwrap.ConfigureUSBPDTriggerPacketType(self._vi, trigger, packetType)

    def ConfigureUSBPDTriggerErrorEnabled(self, trigger, errorName, enabled):
        """

        :param trigger:
        :type trigger:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDTriggerErrorEnabled(self._vi, trigger, errorName, enabled)

    def ConfigureUSBPDTriggerFieldNameEnabled(self, trigger, fieldNumber, frameName, enable):
        """

        :param trigger:
        :type trigger:
        :param fieldNumber:
        :type fieldNumber:
        :param frameName:
        :type frameName:
        :param enable:
        :type enable:
        """
        return self._dllwrap.ConfigureUSBPDTriggerFieldNameEnabled(self._vi, trigger, fieldNumber, frameName, enable)

    def ConfigureUSBPDTriggerData(self, trigger, fieldNumber, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param fieldNumber:
        :type fieldNumber:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureUSBPDTriggerData(self._vi, trigger, fieldNumber, condition, min, max)

    def ConfigureUSBPDTriggerIndex(self, trigger, fieldNumber, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param fieldNumber:
        :type fieldNumber:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureUSBPDTriggerIndex(self._vi, trigger, fieldNumber, condition, min, max)

    def ConfigureUSBPDTriggerBitState(self, trigger, fieldNumber, bitState):
        """

        :param trigger:
        :type trigger:
        :param fieldNumber:
        :type fieldNumber:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureUSBPDTriggerBitState(self._vi, trigger, fieldNumber, bitState)

    def ConfigureUSBPDTriggerErrorTypeNameEnabled(self, trigger, errorName, enabled):
        """

        :param trigger:
        :type trigger:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDTriggerErrorTypeNameEnabled(self._vi, trigger, errorName, enabled)

    def ConfigureUSBPDTriggerErrorTypeNumericEnabled(self, trigger, errorName, enabled):
        """

        :param trigger:
        :type trigger:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDTriggerErrorTypeNumericEnabled(self._vi, trigger, errorName, enabled)

    def ConfigureUSBPDTriggerFrameTypeNameEnabled(self, trigger, frame, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDTriggerFrameTypeNameEnabled(self._vi, trigger, frame, enabled)

    def ConfigureUSBPDTriggerFrameTypeNumericEnabled(self, trigger, frame, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDTriggerFrameTypeNumericEnabled(self._vi, trigger, frame, enabled)

    def ConfigureUSBPDTriggerFrameFieldNameEnabled(self, trigger, frame, field, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDTriggerFrameFieldNameEnabled(self._vi, trigger, frame, field, enabled)

    def ConfigureUSBPDTriggerFrameFieldNumericEnabled(self, trigger, frame, field, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDTriggerFrameFieldNumericEnabled(self._vi, trigger, frame, field, enabled)

    def ConfigureUSBPDTriggerFrameFieldNameBitState(self, trigger, frame, field, bitState):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureUSBPDTriggerFrameFieldNameBitState(self._vi, trigger, frame, field, bitState)

    def ConfigureUSBPDTriggerFrameFieldNumericBitState(self, trigger, frame, field, bitState):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureUSBPDTriggerFrameFieldNumericBitState(self._vi, trigger, frame, field, bitState)

    def ConfigureUSBPDTriggerFrameFieldNameData(self, trigger, frame, field, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBPDTriggerFrameFieldNameData(
            self._vi, trigger, frame, field, condition, minimum, maximum
        )

    def ConfigureUSBPDTriggerFrameFieldNumericData(self, trigger, frame, field, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBPDTriggerFrameFieldNumericData(
            self._vi, trigger, frame, field, condition, minimum, maximum
        )

    def ConfigureUSBPDTriggerFrameFieldNameIndex(self, trigger, frame, field, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBPDTriggerFrameFieldNameIndex(
            self._vi, trigger, frame, field, condition, minimum, maximum
        )

    def ConfigureUSBPDTriggerFrameFieldNumericIndex(self, trigger, frame, field, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBPDTriggerFrameFieldNumericIndex(
            self._vi, trigger, frame, field, condition, minimum, maximum
        )

    def QueryUSBPDFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryUSBPDFrameCount(self._vi, serialBus)

    def QueryUSBPDFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryUSBPDFrameStatus(self._vi, serialBus, frame)

    def QueryUSBPDFrameInfo(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryUSBPDFrameInfo(self._vi, serialBus, frame)

    def QueryUSBPDFrameDataBytes(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryUSBPDFrameDataBytes(self._vi, serialBus, frame, bufferSize)

    def QueryUSBPDFrameFieldType(self, serialBus, frame, field):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSBPDFrameFieldType(self._vi, serialBus, frame, field)

    def QueryUSBPDFrameFieldStatus(self, serialBus, frame, field):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSBPDFrameFieldStatus(self._vi, serialBus, frame, field)

    def QueryUSBPDFrameFieldStartStop(self, serialBus, frame, field):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSBPDFrameFieldStartStop(self._vi, serialBus, frame, field)

    def QueryUSBPDFrameFieldValue(self, serialBus, frame, field):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSBPDFrameFieldValue(self._vi, serialBus, frame, field)

    def QueryUSBPDFrameFieldFormatedValue(self, serialBus, frame, field, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryUSBPDFrameFieldFormatedValue(self._vi, serialBus, frame, field, bufferSize)

    def ConfigureUSBPDSearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureUSBPDSearchType(self._vi, searchName, type)

    def ConfigureUSBPDSearchPacketType(self, searchName, packetType):
        """

        :param searchName:
        :type searchName:
        :param packetType:
        :type packetType:
        """
        return self._dllwrap.ConfigureUSBPDSearchPacketType(self._vi, searchName, packetType)

    def ConfigureUSBPDSearchErrorEnabled(self, searchName, errorName, enabled):
        """

        :param searchName:
        :type searchName:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDSearchErrorEnabled(self._vi, searchName, errorName, enabled)

    def ConfigureUSBPDSearchFieldNameEnabled(self, searchName, fieldNumber, frameName, enable):
        """

        :param searchName:
        :type searchName:
        :param fieldNumber:
        :type fieldNumber:
        :param frameName:
        :type frameName:
        :param enable:
        :type enable:
        """
        return self._dllwrap.ConfigureUSBPDSearchFieldNameEnabled(self._vi, searchName, fieldNumber, frameName, enable)

    def ConfigureUSBPDSearchData(self, searchName, fieldNumber, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param fieldNumber:
        :type fieldNumber:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureUSBPDSearchData(self._vi, searchName, fieldNumber, condition, min, max)

    def ConfigureUSBPDSearchIndex(self, searchName, fieldNumber, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param fieldNumber:
        :type fieldNumber:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureUSBPDSearchIndex(self._vi, searchName, fieldNumber, condition, min, max)

    def ConfigureUSBPDSearchBitState(self, searchName, fieldNumber, bitState):
        """

        :param searchName:
        :type searchName:
        :param fieldNumber:
        :type fieldNumber:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureUSBPDSearchBitState(self._vi, searchName, fieldNumber, bitState)

    def ConfigureUSBPDSearchErrorTypeNameEnabled(self, searchName, errorName, enabled):
        """

        :param searchName:
        :type searchName:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDSearchErrorTypeNameEnabled(self._vi, searchName, errorName, enabled)

    def ConfigureUSBPDSearchErrorTypeNumericEnabled(self, searchName, errorNumber, enabled):
        """

        :param searchName:
        :type searchName:
        :param errorNumber:
        :type errorNumber:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDSearchErrorTypeNumericEnabled(self._vi, searchName, errorNumber, enabled)

    def ConfigureUSBPDSearchFrameTypeNameEnabled(self, searchName, frame, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDSearchFrameTypeNameEnabled(self._vi, searchName, frame, enabled)

    def ConfigureUSBPDSearchFrameTypeNumericEnabled(self, searchName, frame, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDSearchFrameTypeNumericEnabled(self._vi, searchName, frame, enabled)

    def ConfigureUSBPDSearchFrameFieldNameEnabled(self, searchName, frame, field, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDSearchFrameFieldNameEnabled(self._vi, searchName, frame, field, enabled)

    def ConfigureUSBPDSearchFrameFieldNumericEnabled(self, searchName, frame, field, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureUSBPDSearchFrameFieldNumericEnabled(self._vi, searchName, frame, field, enabled)

    def ConfigureUSBPDSearchFrameFieldNameBitState(self, searchName, frame, field, bitState):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureUSBPDSearchFrameFieldNameBitState(self._vi, searchName, frame, field, bitState)

    def ConfigureUSBPDSearchFrameFieldNumericBitState(self, searchName, frame, field, bitState):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureUSBPDSearchFrameFieldNumericBitState(self._vi, searchName, frame, field, bitState)

    def ConfigureUSBPDSearchFrameFieldNameData(self, searchName, frame, field, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBPDSearchFrameFieldNameData(
            self._vi, searchName, frame, field, condition, minimum, maximum
        )

    def ConfigureUSBPDSearchFrameFieldNumericData(self, searchName, frame, field, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBPDSearchFrameFieldNumericData(
            self._vi, searchName, frame, field, condition, minimum, maximum
        )

    def ConfigureUSBPDSearchFrameFieldNameIndex(self, searchName, frame, field, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBPDSearchFrameFieldNameIndex(
            self._vi, searchName, frame, field, condition, minimum, maximum
        )

    def ConfigureUSBPDSearchFrameFieldNumericIndex(self, searchName, frame, field, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureUSBPDSearchFrameFieldNumericIndex(
            self._vi, searchName, frame, field, condition, minimum, maximum
        )

    def QueryUSBPDSearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryUSBPDSearchFrameCount(self._vi, searchName)

    def QueryUSBPDSearchFrameStatus(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryUSBPDSearchFrameStatus(self._vi, searchName, frame)

    def QueryUSBPDSearchFrameInfo(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryUSBPDSearchFrameInfo(self._vi, searchName, frame)

    def QueryUSBPDSearchFrameDataBytes(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryUSBPDSearchFrameDataBytes(self._vi, searchName, frame, bufferSize)

    def QueryUSBPDSearchFrameFieldType(self, searchName, frame, field):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSBPDSearchFrameFieldType(self._vi, searchName, frame, field)

    def QueryUSBPDSearchFrameFieldStatus(self, searchName, frame, field):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSBPDSearchFrameFieldStatus(self._vi, searchName, frame, field)

    def QueryUSBPDSearchFrameFieldStartStop(self, searchName, frame, field):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSBPDSearchFrameFieldStartStop(self._vi, searchName, frame, field)

    def QueryUSBPDSearchFrameFieldValue(self, searchName, frame, field):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QueryUSBPDSearchFrameFieldValue(self._vi, searchName, frame, field)

    def QueryUSBPDSearchFrameFieldFormatedValue(self, searchName, frame, field, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryUSBPDSearchFrameFieldFormatedValue(self._vi, searchName, frame, field, bufferSize)

    def ConfigureManchesterNRZCodingStandard(self, serialBus, standard):
        """

        :param serialBus:
        :type serialBus:
        :param standard:
        :type standard:
        """
        return self._dllwrap.ConfigureManchesterNRZCodingStandard(self._vi, serialBus, standard)

    def ConfigureManchesterNRZBitrate(self, serialBus, bitrateState, bitrate):
        """

        :param serialBus:
        :type serialBus:
        :param bitrateState:
        :type bitrateState:
        :param bitrate:
        :type bitrate:
        """
        return self._dllwrap.ConfigureManchesterNRZBitrate(self._vi, serialBus, bitrateState, bitrate)

    def ConfigureManchesterNRZGapTime(self, serialBus, gapTimeState, gapTime):
        """

        :param serialBus:
        :type serialBus:
        :param gapTimeState:
        :type gapTimeState:
        :param gapTime:
        :type gapTime:
        """
        return self._dllwrap.ConfigureManchesterNRZGapTime(self._vi, serialBus, gapTimeState, gapTime)

    def ConfigureManchesterSettings(self, serialBus, source, polarity, clockPhase):
        """

        :param serialBus:
        :type serialBus:
        :param source:
        :type source:
        :param polarity:
        :type polarity:
        :param clockPhase:
        :type clockPhase:
        """
        return self._dllwrap.ConfigureManchesterSettings(self._vi, serialBus, source, polarity, clockPhase)

    def ConfigureManchesterThreshold(self, serialBus, preset, thresholdHigh, thresholdLow):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param thresholdHigh:
        :type thresholdHigh:
        :param thresholdLow:
        :type thresholdLow:
        """
        return self._dllwrap.ConfigureManchesterThreshold(self._vi, serialBus, preset, thresholdHigh, thresholdLow)

    def ConfigureManchesterThresholdCoupling(self, serialBus, coupling):
        """

        :param serialBus:
        :type serialBus:
        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureManchesterThresholdCoupling(self._vi, serialBus, coupling)

    def ConfigureNRZEnable(self, serialBus, source):
        """

        :param serialBus:
        :type serialBus:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureNRZEnable(self._vi, serialBus, source)

    def ConfigureNRZSource(self, serialBus, line, waveformSource):
        """

        :param serialBus:
        :type serialBus:
        :param line:
        :type line:
        :param waveformSource:
        :type waveformSource:
        """
        return self._dllwrap.ConfigureNRZSource(self._vi, serialBus, line, waveformSource)

    def ConfigureNRZPolarity(self, serialBus, polarity):
        """

        :param serialBus:
        :type serialBus:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.ConfigureNRZPolarity(self._vi, serialBus, polarity)

    def ConfigureNRZENAPolarity(self, serialBus, polarity):
        """

        :param serialBus:
        :type serialBus:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.ConfigureNRZENAPolarity(self._vi, serialBus, polarity)

    def ConfigureNRZIdlePolarity(self, serialBus, line, polarity):
        """

        :param serialBus:
        :type serialBus:
        :param line:
        :type line:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.ConfigureNRZIdlePolarity(self._vi, serialBus, line, polarity)

    def ConfigureNRZClockPhase(self, serialBus, clockPhase):
        """

        :param serialBus:
        :type serialBus:
        :param clockPhase:
        :type clockPhase:
        """
        return self._dllwrap.ConfigureNRZClockPhase(self._vi, serialBus, clockPhase)

    def ConfigureNRZThreshold(self, serialBus, preset, thresholdClock, thresholdData):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        :param thresholdClock:
        :type thresholdClock:
        :param thresholdData:
        :type thresholdData:
        """
        return self._dllwrap.ConfigureNRZThreshold(self._vi, serialBus, preset, thresholdClock, thresholdData)

    def ConfigureNRZThresholdCoupling(self, serialBus, coupling):
        """

        :param serialBus:
        :type serialBus:
        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureNRZThresholdCoupling(self._vi, serialBus, coupling)

    def ConfigureNRZThresholdValue(self, serialBus, enabled):
        """

        :param serialBus:
        :type serialBus:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureNRZThresholdValue(self._vi, serialBus, enabled)

    def QueryManchesterNRZFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryManchesterNRZFrameCount(self._vi, serialBus)

    def ConfigureManchesterNRZFrameType(self, serialBus, frame, type):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureManchesterNRZFrameType(self._vi, serialBus, frame, type)

    def ManchesterNRZAddFrame(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.ManchesterNRZAddFrame(self._vi, serialBus)

    def ManchesterNRZFrameClear(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.ManchesterNRZFrameClear(self._vi, serialBus)

    def ManchesterNRZFrameDescription(self, serialBus, operation, file):
        """

        :param serialBus:
        :type serialBus:
        :param operation:
        :type operation:
        :param file:
        :type file:
        """
        return self._dllwrap.ManchesterNRZFrameDescription(self._vi, serialBus, operation, file)

    def ManchesterNRZExportFramesAsRawBits(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.ManchesterNRZExportFramesAsRawBits(self._vi, serialBus)

    def QueryManchesterNRZCellCount(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryManchesterNRZCellCount(self._vi, serialBus, frame)

    def ManchesterNRZAddCell(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.ManchesterNRZAddCell(self._vi, serialBus, frame)

    def ConfigureManchesterNRZCell(
        self,
        serialBus,
        frame,
        cell,
        name,
        bitCount,
        condition,
        cellFormat,
        bitOrder,
        color,
        resultColumn,
    ):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param cell:
        :type cell:
        :param name:
        :type name:
        :param bitCount:
        :type bitCount:
        :param condition:
        :type condition:
        :param cellFormat:
        :type cellFormat:
        :param bitOrder:
        :type bitOrder:
        :param color:
        :type color:
        :param resultColumn:
        :type resultColumn:
        """
        return self._dllwrap.ConfigureManchesterNRZCell(
            self._vi,
            serialBus,
            frame,
            cell,
            name,
            bitCount,
            condition,
            cellFormat,
            bitOrder,
            color,
            resultColumn,
        )

    def ConfigureManchesterNRZCellColorCRGB(self, serialBus, frame, cell, colorRGB):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param cell:
        :type cell:
        :param colorRGB:
        :type colorRGB:
        """
        return self._dllwrap.ConfigureManchesterNRZCellColorCRGB(self._vi, serialBus, frame, cell, colorRGB)

    def ConfigureManchesterNRZTriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerType(self._vi, trigger, type)

    def ConfigureManchesterNRZTriggerDataPattern(self, trigger, dataPattern):
        """

        :param trigger:
        :type trigger:
        :param dataPattern:
        :type dataPattern:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerDataPattern(self._vi, trigger, dataPattern)

    def ConfigureManchesterNRZTriggerIndex(self, trigger, condition, indexMin, indexMax):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param indexMin:
        :type indexMin:
        :param indexMax:
        :type indexMax:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerIndex(self._vi, trigger, condition, indexMin, indexMax)

    def ConfigureNRZTriggerWordLength(self, trigger, wordLength):
        """

        :param trigger:
        :type trigger:
        :param wordLength:
        :type wordLength:
        """
        return self._dllwrap.ConfigureNRZTriggerWordLength(self._vi, trigger, wordLength)

    def ConfigureManchesterNRZTriggerErrorNameEnabled(self, trigger, errorName, enabled):
        """

        :param trigger:
        :type trigger:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerErrorNameEnabled(self._vi, trigger, errorName, enabled)

    def ConfigureManchesterNRZTriggerErrorNumericEnabled(self, trigger, errorNumber, enabled):
        """

        :param trigger:
        :type trigger:
        :param errorNumber:
        :type errorNumber:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerErrorNumericEnabled(self._vi, trigger, errorNumber, enabled)

    def ConfigureManchesterNRZTriggerFrameTypeNameEnabled(self, trigger, frame, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerFrameTypeNameEnabled(self._vi, trigger, frame, enabled)

    def ConfigureManchesterNRZTriggerFrameTypeNumericEnabled(self, trigger, frame, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerFrameTypeNumericEnabled(self._vi, trigger, frame, enabled)

    def ConfigureManchesterNRZTriggerFrameFieldNameEnabled(self, trigger, frame, field, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerFrameFieldNameEnabled(
            self._vi, trigger, frame, field, enabled
        )

    def ConfigureManchesterNRZTriggerFrameFieldNumericEnabled(self, trigger, frame, field, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerFrameFieldNumericEnabled(
            self._vi, trigger, frame, field, enabled
        )

    def ConfigureManchesterNRZTriggerFrameFieldNameBitState(self, trigger, frame, field, bitState):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerFrameFieldNameBitState(
            self._vi, trigger, frame, field, bitState
        )

    def ConfigureManchesterNRZTriggerFrameFieldNumericBitState(self, trigger, frame, field, bitState):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerFrameFieldNumericBitState(
            self._vi, trigger, frame, field, bitState
        )

    def ConfigureManchesterNRZTriggerFrameFieldNameData(self, trigger, frame, field, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerFrameFieldNameData(
            self._vi, trigger, frame, field, condition, minimum, maximum
        )

    def ConfigureManchesterNRZTriggerFrameFieldNumericData(self, trigger, frame, field, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerFrameFieldNumericData(
            self._vi, trigger, frame, field, condition, minimum, maximum
        )

    def ConfigureManchesterNRZTriggerFrameFieldNameIndex(self, trigger, frame, field, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerFrameFieldNameIndex(
            self._vi, trigger, frame, field, condition, minimum, maximum
        )

    def ConfigureManchesterNRZTriggerFrameFieldNumericIndex(self, trigger, frame, field, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureManchesterNRZTriggerFrameFieldNumericIndex(
            self._vi, trigger, frame, field, condition, minimum, maximum
        )

    def QueryManchesterNRZResultCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryManchesterNRZResultCount(self._vi, serialBus)

    def QueryManchesterNRZResultStatus(self, serialBus, result, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param result:
        :type result:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryManchesterNRZResultStatus(self._vi, serialBus, result, bufferSize)

    def QueryManchesterNRZResultContent(self, serialBus, result, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param result:
        :type result:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryManchesterNRZResultContent(self._vi, serialBus, result, bufferSize)

    def QueryManchesterNRZResultCellCount(self, serialBus, result):
        """

        :param serialBus:
        :type serialBus:
        :param result:
        :type result:
        """
        return self._dllwrap.QueryManchesterNRZResultCellCount(self._vi, serialBus, result)

    def QueryManchesterNRZResultCellStatus(self, serialBus, result, cell, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param result:
        :type result:
        :param cell:
        :type cell:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryManchesterNRZResultCellStatus(self._vi, serialBus, result, cell, bufferSize)

    def QueryManchesterNRZResultCellStartStop(self, serialBus, result, cell):
        """

        :param serialBus:
        :type serialBus:
        :param result:
        :type result:
        :param cell:
        :type cell:
        """
        return self._dllwrap.QueryManchesterNRZResultCellStartStop(self._vi, serialBus, result, cell)

    def ConfigureManchesterNRZSearchErrorTypeNameEnabled(self, searchName, errorName, enabled):
        """

        :param searchName:
        :type searchName:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZSearchErrorTypeNameEnabled(self._vi, searchName, errorName, enabled)

    def ConfigureManchesterNRZSearchErrorTypeNumericEnabled(self, errorNumber, searchName, enabled):
        """

        :param errorNumber:
        :type errorNumber:
        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZSearchErrorTypeNumericEnabled(
            self._vi, errorNumber, searchName, enabled
        )

    def ConfigureManchesterNRZSearchFrameTypeNameEnabled(self, searchName, frame, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZSearchFrameTypeNameEnabled(self._vi, searchName, frame, enabled)

    def ConfigureManchesterNRZSearchFrameTypeNumericEnabled(self, frameNumber, searchName, enabled):
        """

        :param frameNumber:
        :type frameNumber:
        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZSearchFrameTypeNumericEnabled(
            self._vi, frameNumber, searchName, enabled
        )

    def ConfigureManchesterNRZSearchFrameFieldNameEnabled(self, searchName, frame, field, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZSearchFrameFieldNameEnabled(
            self._vi, searchName, frame, field, enabled
        )

    def ConfigureManchesterNRZSearchFrameFieldNumericEnabled(self, frame, field, searchName, enabled):
        """

        :param frame:
        :type frame:
        :param field:
        :type field:
        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZSearchFrameFieldNumericEnabled(
            self._vi, frame, field, searchName, enabled
        )

    def ConfigureManchesterNRZSearchFrameFieldNameBitState(self, searchName, frame, field, bitState):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureManchesterNRZSearchFrameFieldNameBitState(
            self._vi, searchName, frame, field, bitState
        )

    def ConfigureManchesterNRZSearchFrameFieldNumericBitState(self, frame, field, searchName, bitState):
        """

        :param frame:
        :type frame:
        :param field:
        :type field:
        :param searchName:
        :type searchName:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureManchesterNRZSearchFrameFieldNumericBitState(
            self._vi, frame, field, searchName, bitState
        )

    def ConfigureManchesterNRZSearchFrameFieldNameData(self, searchName, frame, field, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureManchesterNRZSearchFrameFieldNameData(
            self._vi, searchName, frame, field, condition, min, max
        )

    def ConfigureManchesterNRZSearchFrameFieldNumericData(self, frame, field, searchName, condition, min, max):
        """

        :param frame:
        :type frame:
        :param field:
        :type field:
        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureManchesterNRZSearchFrameFieldNumericData(
            self._vi, frame, field, searchName, condition, min, max
        )

    def ConfigureManchesterNRZSearchFrameFieldNameIndex(self, searchName, frame, field, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureManchesterNRZSearchFrameFieldNameIndex(
            self._vi, searchName, frame, field, condition, min, max
        )

    def ConfigureManchesterNRZSearchFrameFieldNumericIndex(self, frame, field, searchName, condition, min, max):
        """

        :param frame:
        :type frame:
        :param field:
        :type field:
        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureManchesterNRZSearchFrameFieldNumericIndex(
            self._vi, frame, field, searchName, condition, min, max
        )

    def QueryManchesterNRZSearchFrameCount(self, searchName, index):
        """

        :param searchName:
        :type searchName:
        :param index:
        :type index:
        """
        return self._dllwrap.QueryManchesterNRZSearchFrameCount(self._vi, searchName, index)

    def QueryManchesterNRZSearchFrameStatus(self, searchName, index, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param index:
        :type index:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryManchesterNRZSearchFrameStatus(self._vi, searchName, index, frame, bufferSize)

    def QueryManchesterNRZSearchFrameContent(self, searchName, index, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param index:
        :type index:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryManchesterNRZSearchFrameContent(self._vi, searchName, index, frame, bufferSize)

    def QueryManchesterNRZSearchCellCount(self, searchName, index, frame):
        """

        :param searchName:
        :type searchName:
        :param index:
        :type index:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryManchesterNRZSearchCellCount(self._vi, searchName, index, frame)

    def QueryManchesterNRZSearchCellStatus(self, searchName, index, frame, cell):
        """

        :param searchName:
        :type searchName:
        :param index:
        :type index:
        :param frame:
        :type frame:
        :param cell:
        :type cell:
        """
        return self._dllwrap.QueryManchesterNRZSearchCellStatus(self._vi, searchName, index, frame, cell)

    def QueryManchesterNRZSearchCellTime(self, searchName, index, frame, cell):
        """

        :param searchName:
        :type searchName:
        :param index:
        :type index:
        :param frame:
        :type frame:
        :param cell:
        :type cell:
        """
        return self._dllwrap.QueryManchesterNRZSearchCellTime(self._vi, searchName, index, frame, cell)

    def QueryManchesterNRZSearchCellName(self, searchName, index, frame, cell, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param index:
        :type index:
        :param frame:
        :type frame:
        :param cell:
        :type cell:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryManchesterNRZSearchCellName(self._vi, searchName, index, frame, cell, bufferSize)

    def QueryManchesterNRZSearchCellValue(self, searchName, index, frame, cell):
        """

        :param searchName:
        :type searchName:
        :param index:
        :type index:
        :param frame:
        :type frame:
        :param cell:
        :type cell:
        """
        return self._dllwrap.QueryManchesterNRZSearchCellValue(self._vi, searchName, index, frame, cell)

    def ConfigureManchesterNRZFilterEnabled(self, serialBus, enabled):
        """

        :param serialBus:
        :type serialBus:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZFilterEnabled(self._vi, serialBus, enabled)

    def ConfigureManchesterNRZFilterFrameTypeNumericEnabled(self, serialBus, frame, enabled):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZFilterFrameTypeNumericEnabled(self._vi, serialBus, frame, enabled)

    def ConfigureManchesterNRZFilterFrameTypeNameEnabled(self, serialBus, frame, enabled):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZFilterFrameTypeNameEnabled(self._vi, serialBus, frame, enabled)

    def ConfigureManchesterNRZFilterErrorTypeNumericEnabled(self, serialBus, error, enabled):
        """

        :param serialBus:
        :type serialBus:
        :param error:
        :type error:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZFilterErrorTypeNumericEnabled(self._vi, serialBus, error, enabled)

    def ConfigureManchesterNRZFilterErrorTypeNameEnabled(self, serialBus, error, enabled):
        """

        :param serialBus:
        :type serialBus:
        :param error:
        :type error:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZFilterErrorTypeNameEnabled(self._vi, serialBus, error, enabled)

    def ConfigureManchesterNRZFilterFieldEnabled(self, serialBus, frame, field, enabled):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureManchesterNRZFilterFieldEnabled(self._vi, serialBus, frame, field, enabled)

    def ConfigureManchesterNRZFilterBitState(self, serialBus, frame, field, bitState):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureManchesterNRZFilterBitState(self._vi, serialBus, frame, field, bitState)

    def ConfigureManchesterNRZFilterDataPattern(self, serialBus, frame, field, condition, min, max):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureManchesterNRZFilterDataPattern(
            self._vi, serialBus, frame, field, condition, min, max
        )

    def ConfigureManchesterNRZFilterIndexPattern(self, serialBus, frame, field, condition, min, max):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureManchesterNRZFilterIndexPattern(
            self._vi, serialBus, frame, field, condition, min, max
        )

    def ConfigureEBTBSignalType(self, serialBus, signalType):
        """

        :param serialBus:
        :type serialBus:
        :param signalType:
        :type signalType:
        """
        return self._dllwrap.ConfigureEBTBSignalType(self._vi, serialBus, signalType)

    def ConfigureEBTBSource(self, serialBus, protocolType, source):
        """

        :param serialBus:
        :type serialBus:
        :param protocolType:
        :type protocolType:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureEBTBSource(self._vi, serialBus, protocolType, source)

    def ConfigureEBTBFullAutoset(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.ConfigureEBTBFullAutoset(self._vi, serialBus)

    def ConfigureEBTBThreshold(self, serialBus, signalType, thresholdLow, thresholdHigh):
        """

        :param serialBus:
        :type serialBus:
        :param signalType:
        :type signalType:
        :param thresholdLow:
        :type thresholdLow:
        :param thresholdHigh:
        :type thresholdHigh:
        """
        return self._dllwrap.ConfigureEBTBThreshold(self._vi, serialBus, signalType, thresholdLow, thresholdHigh)

    def ConfigureEBTBBitrate(self, serialBus, bitrate):
        """

        :param serialBus:
        :type serialBus:
        :param bitrate:
        :type bitrate:
        """
        return self._dllwrap.ConfigureEBTBBitrate(self._vi, serialBus, bitrate)

    def ConfigureEBTBBitrateDetermination(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.ConfigureEBTBBitrateDetermination(self._vi, serialBus)

    def ConfigureEBTBEstimatedBitrate(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.ConfigureEBTBEstimatedBitrate(self._vi, serialBus)

    def ConfigureEBTBSWCDRBitrate(self, serialBus, state):
        """

        :param serialBus:
        :type serialBus:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureEBTBSWCDRBitrate(self._vi, serialBus, state)

    def ConfigureEBTBSyncSymbol(self, serialBus, syncSymbol):
        """

        :param serialBus:
        :type serialBus:
        :param syncSymbol:
        :type syncSymbol:
        """
        return self._dllwrap.ConfigureEBTBSyncSymbol(self._vi, serialBus, syncSymbol)

    def ConfigureEBTBPattern(self, serialBus, pattern):
        """

        :param serialBus:
        :type serialBus:
        :param pattern:
        :type pattern:
        """
        return self._dllwrap.ConfigureEBTBPattern(self._vi, serialBus, pattern)

    def ConfigureEBTBSecondPattern(self, serialBus, state, pattern):
        """

        :param serialBus:
        :type serialBus:
        :param state:
        :type state:
        :param pattern:
        :type pattern:
        """
        return self._dllwrap.ConfigureEBTBSecondPattern(self._vi, serialBus, state, pattern)

    def ConfigureEBTBDisplayFormat(self, serialBus, displayFormat):
        """

        :param serialBus:
        :type serialBus:
        :param displayFormat:
        :type displayFormat:
        """
        return self._dllwrap.ConfigureEBTBDisplayFormat(self._vi, serialBus, displayFormat)

    def ConfigureEBTBTriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureEBTBTriggerType(self._vi, trigger, type)

    def ConfigureEBTBTriggerDataCharacter(self, trigger, dataCharacter):
        """

        :param trigger:
        :type trigger:
        :param dataCharacter:
        :type dataCharacter:
        """
        return self._dllwrap.ConfigureEBTBTriggerDataCharacter(self._vi, trigger, dataCharacter)

    def ConfigureEBTBTriggerDXSymbol(self, trigger, DXSymbol):
        """

        :param trigger:
        :type trigger:
        :param DXSymbol:
        :type DXSymbol:
        """
        return self._dllwrap.ConfigureEBTBTriggerDXSymbol(self._vi, trigger, DXSymbol)

    def ConfigureEBTBTriggerDYSymbol(self, trigger, DYSymbol):
        """

        :param trigger:
        :type trigger:
        :param DYSymbol:
        :type DYSymbol:
        """
        return self._dllwrap.ConfigureEBTBTriggerDYSymbol(self._vi, trigger, DYSymbol)

    def ConfigureEBTBTriggerPattern(self, trigger, symbolFormat, EBPattern, TBPattern):
        """

        :param trigger:
        :type trigger:
        :param symbolFormat:
        :type symbolFormat:
        :param EBPattern:
        :type EBPattern:
        :param TBPattern:
        :type TBPattern:
        """
        return self._dllwrap.ConfigureEBTBTriggerPattern(self._vi, trigger, symbolFormat, EBPattern, TBPattern)

    def ConfigureEBTBTriggerSymbol(self, trigger, type, expression):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        :param expression:
        :type expression:
        """
        return self._dllwrap.ConfigureEBTBTriggerSymbol(self._vi, trigger, type, expression)

    def ConfigureEBTBTriggerErrorConditions(self, trigger, disparityError, glitchError, unknownError):
        """

        :param trigger:
        :type trigger:
        :param disparityError:
        :type disparityError:
        :param glitchError:
        :type glitchError:
        :param unknownError:
        :type unknownError:
        """
        return self._dllwrap.ConfigureEBTBTriggerErrorConditions(
            self._vi, trigger, disparityError, glitchError, unknownError
        )

    def QuerEBTBSymbolCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QuerEBTBSymbolCount(self._vi, serialBus)

    def QueryEBTBSymbolStatus(self, serialBus, symbol):
        """

        :param serialBus:
        :type serialBus:
        :param symbol:
        :type symbol:
        """
        return self._dllwrap.QueryEBTBSymbolStatus(self._vi, serialBus, symbol)

    def QueryEBTBSymbolDataBytes(self, serialBus, symbol, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param symbol:
        :type symbol:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryEBTBSymbolDataBytes(self._vi, serialBus, symbol, bufferSize)

    def QueryEBTBSymbolParameters(self, serialBus, symbol, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param symbol:
        :type symbol:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryEBTBSymbolParameters(self._vi, serialBus, symbol, bufferSize)

    def ConfigureEBTBSearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureEBTBSearchType(self._vi, searchName, type)

    def ConfigureEBTBSearchError(self, searchName, disparityError, glitchingError, unknownSymbolError):
        """

        :param searchName:
        :type searchName:
        :param disparityError:
        :type disparityError:
        :param glitchingError:
        :type glitchingError:
        :param unknownSymbolError:
        :type unknownSymbolError:
        """
        return self._dllwrap.ConfigureEBTBSearchError(
            self._vi, searchName, disparityError, glitchingError, unknownSymbolError
        )

    def ConfigureEBTBSearchSymbolType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureEBTBSearchSymbolType(self._vi, searchName, type)

    def ConfigureEBTBSearchSymbolFormat(self, searchName, format):
        """

        :param searchName:
        :type searchName:
        :param format:
        :type format:
        """
        return self._dllwrap.ConfigureEBTBSearchSymbolFormat(self._vi, searchName, format)

    def ConfigureEBTBSearchKDCodeSymbol(self, searchName, KDCodeSymbol):
        """

        :param searchName:
        :type searchName:
        :param KDCodeSymbol:
        :type KDCodeSymbol:
        """
        return self._dllwrap.ConfigureEBTBSearchKDCodeSymbol(self._vi, searchName, KDCodeSymbol)

    def ConfigureEBTBSearchDXY(self, searchName, DX, DY):
        """

        :param searchName:
        :type searchName:
        :param DX:
        :type DX:
        :param DY:
        :type DY:
        """
        return self._dllwrap.ConfigureEBTBSearchDXY(self._vi, searchName, DX, DY)

    def ConfigureEBTBSearchEightBitPattern(self, searchName, pattern):
        """

        :param searchName:
        :type searchName:
        :param pattern:
        :type pattern:
        """
        return self._dllwrap.ConfigureEBTBSearchEightBitPattern(self._vi, searchName, pattern)

    def ConfigureEBTBSearchTenBitPattern(self, searchName, pattern):
        """

        :param searchName:
        :type searchName:
        :param pattern:
        :type pattern:
        """
        return self._dllwrap.ConfigureEBTBSearchTenBitPattern(self._vi, searchName, pattern)

    def ConfigureEBTBSearchExpression(self, searchName, expression):
        """

        :param searchName:
        :type searchName:
        :param expression:
        :type expression:
        """
        return self._dllwrap.ConfigureEBTBSearchExpression(self._vi, searchName, expression)

    def QueryEBTBSearchSymbolCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryEBTBSearchSymbolCount(self._vi, searchName)

    def QueryEBTBSearchSymbolStatus(self, searchName, symbol):
        """

        :param searchName:
        :type searchName:
        :param symbol:
        :type symbol:
        """
        return self._dllwrap.QueryEBTBSearchSymbolStatus(self._vi, searchName, symbol)

    def QueryEBTBSearchSymbolDataBytes(self, searchName, symbol, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param symbol:
        :type symbol:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryEBTBSearchSymbolDataBytes(self._vi, searchName, symbol, bufferSize)

    def ConfigureSENTDataSource(self, serialBus, source):
        """

        :param serialBus:
        :type serialBus:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureSENTDataSource(self._vi, serialBus, source)

    def ConfigureSENTThreshold(self, serialBus, technology, threshold):
        """

        :param serialBus:
        :type serialBus:
        :param technology:
        :type technology:
        :param threshold:
        :type threshold:
        """
        return self._dllwrap.ConfigureSENTThreshold(self._vi, serialBus, technology, threshold)

    def ConfigureSENTTransmission(
        self,
        serialBus,
        clockPeriod,
        clockTolerance,
        dataNibbles,
        serialFormat,
        CRCVersion,
        CRCCalculation,
        pausePulse,
    ):
        """

        :param serialBus:
        :type serialBus:
        :param clockPeriod:
        :type clockPeriod:
        :param clockTolerance:
        :type clockTolerance:
        :param dataNibbles:
        :type dataNibbles:
        :param serialFormat:
        :type serialFormat:
        :param CRCVersion:
        :type CRCVersion:
        :param CRCCalculation:
        :type CRCCalculation:
        :param pausePulse:
        :type pausePulse:
        """
        return self._dllwrap.ConfigureSENTTransmission(
            self._vi,
            serialBus,
            clockPeriod,
            clockTolerance,
            dataNibbles,
            serialFormat,
            CRCVersion,
            CRCCalculation,
            pausePulse,
        )

    def ConfigureSENTFrameLength(self, serialBus, frameLength):
        """

        :param serialBus:
        :type serialBus:
        :param frameLength:
        :type frameLength:
        """
        return self._dllwrap.ConfigureSENTFrameLength(self._vi, serialBus, frameLength)

    def ConfigureSENTResultDisplay(self, serialBus, resultDisplay):
        """

        :param serialBus:
        :type serialBus:
        :param resultDisplay:
        :type resultDisplay:
        """
        return self._dllwrap.ConfigureSENTResultDisplay(self._vi, serialBus, resultDisplay)

    def ConfigureSENTTriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSENTTriggerType(self._vi, trigger, type)

    def ConfigureSENTTriggerTransmissionSequenceType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSENTTriggerTransmissionSequenceType(self._vi, trigger, type)

    def ConfigureSENTTriggerTransmissionSequence(self, trigger, status, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param status:
        :type status:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureSENTTriggerTransmissionSequence(
            self._vi, trigger, status, condition, minimum, maximum
        )

    def ConfigureSENTTriggerSerialMessageType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSENTTriggerSerialMessageType(self._vi, trigger, type)

    def ConfigureSENTTriggerSerialMessageID(self, trigger, type, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureSENTTriggerSerialMessageID(self._vi, trigger, type, condition, minimum, maximum)

    def ConfigureSENTTriggerSerialMessageData(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureSENTTriggerSerialMessageData(self._vi, trigger, condition, minimum, maximum)

    def ConfigureSENTTriggerErrorConditions(
        self,
        trigger,
        formError,
        calibrationPulseError,
        pulsePeriodError,
        CRCError,
        irregularFrameLengthError,
    ):
        """

        :param trigger:
        :type trigger:
        :param formError:
        :type formError:
        :param calibrationPulseError:
        :type calibrationPulseError:
        :param pulsePeriodError:
        :type pulsePeriodError:
        :param CRCError:
        :type CRCError:
        :param irregularFrameLengthError:
        :type irregularFrameLengthError:
        """
        return self._dllwrap.ConfigureSENTTriggerErrorConditions(
            self._vi,
            trigger,
            formError,
            calibrationPulseError,
            pulsePeriodError,
            CRCError,
            irregularFrameLengthError,
        )

    def QuerySENTFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QuerySENTFrameCount(self._vi, serialBus)

    def QuerySENTFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySENTFrameStatus(self._vi, serialBus, frame)

    def QuerySENTFrameID(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySENTFrameID(self._vi, serialBus, frame)

    def QuerySENTFrameCSValue(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySENTFrameCSValue(self._vi, serialBus, frame)

    def QuerySENTFramePulsePauseTicks(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySENTFramePulsePauseTicks(self._vi, serialBus, frame)

    def QuerySENTFrameLabel(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySENTFrameLabel(self._vi, serialBus, frame, bufferSize)

    def QuerySENTFrameDataBytes(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySENTFrameDataBytes(self._vi, serialBus, frame, bufferSize)

    def QuerySENTFrameAllSymbolicData(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySENTFrameAllSymbolicData(self._vi, serialBus, frame, bufferSize)

    def ExportSENTFrameAllSymbolicDataToFile(self, serialBus, frame, fileName, timeout):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param fileName:
        :type fileName:
        :param timeout:
        :type timeout:
        """
        return self._dllwrap.ExportSENTFrameAllSymbolicDataToFile(self._vi, serialBus, frame, fileName, timeout)

    def QuerySENTFrameNibbleData(self, serialBus, frame, nibble):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param nibble:
        :type nibble:
        """
        return self._dllwrap.QuerySENTFrameNibbleData(self._vi, serialBus, frame, nibble)

    def ConfigureSENTSearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSENTSearchType(self._vi, searchName, type)

    def ConfigureSENTSearchCalibrationState(self, searchName, state):
        """

        :param searchName:
        :type searchName:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureSENTSearchCalibrationState(self._vi, searchName, state)

    def ConfigureSENTSearchTransmissionSequenceState(self, searchName, state):
        """

        :param searchName:
        :type searchName:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureSENTSearchTransmissionSequenceState(self._vi, searchName, state)

    def ConfigureSENTSearchTransmissionSequenceType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSENTSearchTransmissionSequenceType(self._vi, searchName, type)

    def ConfigureSENTSearchTransmissionSequence(self, searchName, status, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param status:
        :type status:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureSENTSearchTransmissionSequence(
            self._vi, searchName, status, condition, minimum, maximum
        )

    def ConfigureSENTSearchSerialMessageState(self, searchName, state):
        """

        :param searchName:
        :type searchName:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureSENTSearchSerialMessageState(self._vi, searchName, state)

    def ConfigureSENTSearchSerialMessageType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSENTSearchSerialMessageType(self._vi, searchName, type)

    def ConfigureSENTSearchSerialMessageID(self, searchName, type, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureSENTSearchSerialMessageID(self._vi, searchName, type, condition, minimum, maximum)

    def ConfigureSENTSearchSerialMessageData(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureSENTSearchSerialMessageData(self._vi, searchName, condition, minimum, maximum)

    def ConfigureSENTSearchErrorConditionsState(self, searchName, state):
        """

        :param searchName:
        :type searchName:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureSENTSearchErrorConditionsState(self._vi, searchName, state)

    def ConfigureSENTSearchErrorConditions(
        self,
        searchName,
        formError,
        calibrationPulseError,
        pulsePeriodError,
        CRCError,
        irregularFrameLengthError,
    ):
        """

        :param searchName:
        :type searchName:
        :param formError:
        :type formError:
        :param calibrationPulseError:
        :type calibrationPulseError:
        :param pulsePeriodError:
        :type pulsePeriodError:
        :param CRCError:
        :type CRCError:
        :param irregularFrameLengthError:
        :type irregularFrameLengthError:
        """
        return self._dllwrap.ConfigureSENTSearchErrorConditions(
            self._vi,
            searchName,
            formError,
            calibrationPulseError,
            pulsePeriodError,
            CRCError,
            irregularFrameLengthError,
        )

    def QuerySENTSearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QuerySENTSearchFrameCount(self._vi, searchName)

    def QuerySENTSearchFrameStatus(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySENTSearchFrameStatus(self._vi, searchName, frame)

    def QuerySENTSearchFrameID(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySENTSearchFrameID(self._vi, searchName, frame)

    def QuerySENTSearchFrameCSValue(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySENTSearchFrameCSValue(self._vi, searchName, frame)

    def QuerySENTSearchFramePulsePauseTicks(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySENTSearchFramePulsePauseTicks(self._vi, searchName, frame)

    def QuerySENTSearchFrameLabel(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySENTSearchFrameLabel(self._vi, searchName, frame, bufferSize)

    def QuerySENTSearchFrameDataBytes(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySENTSearchFrameDataBytes(self._vi, searchName, frame, bufferSize)

    def QuerySENTSearchFrameAllSymbolicData(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySENTSearchFrameAllSymbolicData(self._vi, searchName, frame, bufferSize)

    def QuerySENTSearchFrameNibbleData(self, searchName, frame, nibble):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param nibble:
        :type nibble:
        """
        return self._dllwrap.QuerySENTSearchFrameNibbleData(self._vi, searchName, frame, nibble)

    def ConfigureDPHYVariant(self, serialBus, variant):
        """

        :param serialBus:
        :type serialBus:
        :param variant:
        :type variant:
        """
        return self._dllwrap.ConfigureDPHYVariant(self._vi, serialBus, variant)

    def ConfigureDPHYPhysicalConfiguration(self, serialBus, physicalConfiguration):
        """

        :param serialBus:
        :type serialBus:
        :param physicalConfiguration:
        :type physicalConfiguration:
        """
        return self._dllwrap.ConfigureDPHYPhysicalConfiguration(self._vi, serialBus, physicalConfiguration)

    def ConfigureDPHYDataLanes(self, serialBus, dataLanes):
        """

        :param serialBus:
        :type serialBus:
        :param dataLanes:
        :type dataLanes:
        """
        return self._dllwrap.ConfigureDPHYDataLanes(self._vi, serialBus, dataLanes)

    def ConfigureDPHYSource(self, serialBus, lane, source):
        """

        :param serialBus:
        :type serialBus:
        :param lane:
        :type lane:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureDPHYSource(self._vi, serialBus, lane, source)

    def ConfigureDPHYProbe(self, serialBus, lane, probe):
        """

        :param serialBus:
        :type serialBus:
        :param lane:
        :type lane:
        :param probe:
        :type probe:
        """
        return self._dllwrap.ConfigureDPHYProbe(self._vi, serialBus, lane, probe)

    def ConfigureDPHYDataRate(self, serialBus, dataRate):
        """

        :param serialBus:
        :type serialBus:
        :param dataRate:
        :type dataRate:
        """
        return self._dllwrap.ConfigureDPHYDataRate(self._vi, serialBus, dataRate)

    def ConfigureDPHYDisplayDataVector(self, serialBus, state):
        """

        :param serialBus:
        :type serialBus:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureDPHYDisplayDataVector(self._vi, serialBus, state)

    def ConfigureDPHYThresholdPreset(self, serialBus, preset):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        """
        return self._dllwrap.ConfigureDPHYThresholdPreset(self._vi, serialBus, preset)

    def ConfigureDPHYThresholdCoupling(self, serialBus, state):
        """

        :param serialBus:
        :type serialBus:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureDPHYThresholdCoupling(self._vi, serialBus, state)

    def ConfigureDPHYHighSpeedThreshold(self, serialBus, lane, threshold, hysteresis):
        """

        :param serialBus:
        :type serialBus:
        :param lane:
        :type lane:
        :param threshold:
        :type threshold:
        :param hysteresis:
        :type hysteresis:
        """
        return self._dllwrap.ConfigureDPHYHighSpeedThreshold(self._vi, serialBus, lane, threshold, hysteresis)

    def ConfigureDPHYLowPowerThreshold(self, serialBus, lane, thresholdLower, thresholdUpper):
        """

        :param serialBus:
        :type serialBus:
        :param lane:
        :type lane:
        :param thresholdLower:
        :type thresholdLower:
        :param thresholdUpper:
        :type thresholdUpper:
        """
        return self._dllwrap.ConfigureDPHYLowPowerThreshold(self._vi, serialBus, lane, thresholdLower, thresholdUpper)

    def ConfigureDPHYTriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureDPHYTriggerType(self._vi, trigger, type)

    def ConfigureDPHYTriggerVirtualChannel(self, trigger, virtualChannel):
        """

        :param trigger:
        :type trigger:
        :param virtualChannel:
        :type virtualChannel:
        """
        return self._dllwrap.ConfigureDPHYTriggerVirtualChannel(self._vi, trigger, virtualChannel)

    def ConfigureDPHYTriggerDataType(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureDPHYTriggerDataType(self._vi, trigger, condition, minimum, maximum)

    def ConfigureDPHYTriggerWordCount(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureDPHYTriggerWordCount(self._vi, trigger, condition, minimum, maximum)

    def ConfigureDPHYTriggerData(self, trigger, type, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureDPHYTriggerData(self._vi, trigger, type, condition, minimum, maximum)

    def ConfigureDPHYTriggerDataIndex(self, trigger, type, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureDPHYTriggerDataIndex(self._vi, trigger, type, condition, minimum, maximum)

    def ConfigureDPHYTriggerEscapeMode(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureDPHYTriggerEscapeMode(self._vi, trigger, condition, minimum, maximum)

    def QueryDPHYFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryDPHYFrameCount(self._vi, serialBus)

    def QueryDPHYFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDPHYFrameStatus(self._vi, serialBus, frame)

    def QueryDPHYFrameChecksum(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDPHYFrameChecksum(self._vi, serialBus, frame)

    def QueryDPHYFrameDataTypeName(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryDPHYFrameDataTypeName(self._vi, serialBus, frame, bufferSize)

    def QueryDPHYFrameDataType(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDPHYFrameDataType(self._vi, serialBus, frame)

    def QueryDPHYFrameErrorCorrectionCode(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDPHYFrameErrorCorrectionCode(self._vi, serialBus, frame)

    def QueryDPHYFrameNumberOfVirtualChannels(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDPHYFrameNumberOfVirtualChannels(self._vi, serialBus, frame)

    def QueryDPHYFrameDataBytes(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryDPHYFrameDataBytes(self._vi, serialBus, frame, bufferSize)

    def QueryDPHYFrameNumberOfPackets(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDPHYFrameNumberOfPackets(self._vi, serialBus, frame)

    def QueryDPHYFramePacketPayload(self, serialBus, frame, packet):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryDPHYFramePacketPayload(self._vi, serialBus, frame, packet)

    def ConfigureDPHYSearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureDPHYSearchType(self._vi, searchName, type)

    def ConfigureDPHYSearchVirtualChannel(self, searchName, virtualChannel):
        """

        :param searchName:
        :type searchName:
        :param virtualChannel:
        :type virtualChannel:
        """
        return self._dllwrap.ConfigureDPHYSearchVirtualChannel(self._vi, searchName, virtualChannel)

    def ConfigureDPHYSearchDataType(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureDPHYSearchDataType(self._vi, searchName, condition, minimum, maximum)

    def ConfigureDPHYSearchWordCount(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureDPHYSearchWordCount(self._vi, searchName, condition, minimum, maximum)

    def ConfigureDPHYSearchData(self, searchName, type, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureDPHYSearchData(self._vi, searchName, type, condition, minimum, maximum)

    def ConfigureDPHYSearchDataIndex(self, searchName, type, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureDPHYSearchDataIndex(self._vi, searchName, type, condition, minimum, maximum)

    def ConfigureDPHYSearchEscapeMode(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureDPHYSearchEscapeMode(self._vi, searchName, condition, minimum, maximum)

    def QueryDPHYSearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryDPHYSearchFrameCount(self._vi, searchName)

    def QueryDPHYSearchFrameStatus(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDPHYSearchFrameStatus(self._vi, searchName, frame)

    def QueryDPHYSearchFrameChecksum(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDPHYSearchFrameChecksum(self._vi, searchName, frame)

    def QueryDPHYSearchFrameDataTypeName(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryDPHYSearchFrameDataTypeName(self._vi, searchName, frame, bufferSize)

    def QueryDPHYSearchFrameDataType(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDPHYSearchFrameDataType(self._vi, searchName, frame)

    def QueryDPHYSearchFrameErrorCorrectionCode(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDPHYSearchFrameErrorCorrectionCode(self._vi, searchName, frame)

    def QueryDPHYSearchFrameNumberOfVirtualChannels(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDPHYSearchFrameNumberOfVirtualChannels(self._vi, searchName, frame)

    def QueryDPHYSearchFrameDataBytes(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryDPHYSearchFrameDataBytes(self._vi, searchName, frame, bufferSize)

    def QueryDPHYSearchFramePacketPayload(self, searchName, frame, packet):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryDPHYSearchFramePacketPayload(self._vi, searchName, frame, packet)

    def ConfigureMPHYProtocol(self, serialBus, protocol):
        """

        :param serialBus:
        :type serialBus:
        :param protocol:
        :type protocol:
        """
        return self._dllwrap.ConfigureMPHYProtocol(self._vi, serialBus, protocol)

    def ConfigureMPHYDataLanes(self, serialBus, dataLanes):
        """

        :param serialBus:
        :type serialBus:
        :param dataLanes:
        :type dataLanes:
        """
        return self._dllwrap.ConfigureMPHYDataLanes(self._vi, serialBus, dataLanes)

    def ConfigureMPHYDataSource(self, serialBus, dataLane, dataSource):
        """

        :param serialBus:
        :type serialBus:
        :param dataLane:
        :type dataLane:
        :param dataSource:
        :type dataSource:
        """
        return self._dllwrap.ConfigureMPHYDataSource(self._vi, serialBus, dataLane, dataSource)

    def ConfigureMPHYThreshold(self, serialBus, dataLane, threshold):
        """

        :param serialBus:
        :type serialBus:
        :param dataLane:
        :type dataLane:
        :param threshold:
        :type threshold:
        """
        return self._dllwrap.ConfigureMPHYThreshold(self._vi, serialBus, dataLane, threshold)

    def ConfigureMPHYThresholdCouplingEnabled(self, serialBus, enabled):
        """

        :param serialBus:
        :type serialBus:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYThresholdCouplingEnabled(self._vi, serialBus, enabled)

    def ConfigureMPHYThresholdPreset(self, serialBus, preset):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        """
        return self._dllwrap.ConfigureMPHYThresholdPreset(self._vi, serialBus, preset)

    def ConfigureMPHYScrambledMode(self, serialBus, scrambledMode):
        """

        :param serialBus:
        :type serialBus:
        :param scrambledMode:
        :type scrambledMode:
        """
        return self._dllwrap.ConfigureMPHYScrambledMode(self._vi, serialBus, scrambledMode)

    def ConfigureMPHYTriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureMPHYTriggerType(self._vi, trigger, type)

    def ConfigureMPHYTriggerLCCType(self, trigger, LCCType):
        """

        :param trigger:
        :type trigger:
        :param LCCType:
        :type LCCType:
        """
        return self._dllwrap.ConfigureMPHYTriggerLCCType(self._vi, trigger, LCCType)

    def ConfigureMPHYTriggerWord(self, trigger, word, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param word:
        :type word:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYTriggerWord(self._vi, trigger, word, condition, minimum, maximum)

    def ConfigureMPHYTriggerTCPattern(self, trigger, TCPattern):
        """

        :param trigger:
        :type trigger:
        :param TCPattern:
        :type TCPattern:
        """
        return self._dllwrap.ConfigureMPHYTriggerTCPattern(self._vi, trigger, TCPattern)

    def ConfigureMPHYTriggerCREQPattern(self, trigger, CREQPattern):
        """

        :param trigger:
        :type trigger:
        :param CREQPattern:
        :type CREQPattern:
        """
        return self._dllwrap.ConfigureMPHYTriggerCREQPattern(self._vi, trigger, CREQPattern)

    def ConfigureMPHYTriggerRREQPattern(self, trigger, RREQPattern):
        """

        :param trigger:
        :type trigger:
        :param RREQPattern:
        :type RREQPattern:
        """
        return self._dllwrap.ConfigureMPHYTriggerRREQPattern(self._vi, trigger, RREQPattern)

    def ConfigureMPHYTriggerData(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYTriggerData(self._vi, trigger, condition, minimum, maximum)

    def ConfigureMPHYTriggerIndex(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYTriggerIndex(self._vi, trigger, condition, minimum, maximum)

    def ConfigureMPHYTriggerFSN(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYTriggerFSN(self._vi, trigger, condition, minimum, maximum)

    def ConfigureMPHYTriggerCRC(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYTriggerCRC(self._vi, trigger, condition, minimum, maximum)

    def ConfigureMPHYTriggerCredit(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYTriggerCredit(self._vi, trigger, condition, minimum, maximum)

    def ConfigureMPHYTriggerPACPBegin(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYTriggerPACPBegin(self._vi, trigger, condition, minimum, maximum)

    def ConfigureMPHYTriggerPACPID(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYTriggerPACPID(self._vi, trigger, condition, minimum, maximum)

    def ConfigureMPHYTriggerErrors(self, trigger, LCC, length, reserved, symbol, uniProFrame):
        """

        :param trigger:
        :type trigger:
        :param LCC:
        :type LCC:
        :param length:
        :type length:
        :param reserved:
        :type reserved:
        :param symbol:
        :type symbol:
        :param uniProFrame:
        :type uniProFrame:
        """
        return self._dllwrap.ConfigureMPHYTriggerErrors(self._vi, trigger, LCC, length, reserved, symbol, uniProFrame)

    def ConfigureMPHYTriggerPRPWidth(self, trigger, width):
        """

        :param trigger:
        :type trigger:
        :param width:
        :type width:
        """
        return self._dllwrap.ConfigureMPHYTriggerPRPWidth(self._vi, trigger, width)

    def ConfigureMPHYSSICTriggerErrorTypeNameEnabled(self, trigger, errorName, enabled):
        """

        :param trigger:
        :type trigger:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYSSICTriggerErrorTypeNameEnabled(self._vi, trigger, errorName, enabled)

    def ConfigureMPHYSSICTriggerErrorTypeNumericEnabled(self, trigger, errorNumber, enabled):
        """

        :param trigger:
        :type trigger:
        :param errorNumber:
        :type errorNumber:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYSSICTriggerErrorTypeNumericEnabled(self._vi, trigger, errorNumber, enabled)

    def ConfigureMPHYSSICTriggerFrameTypeNameEnabled(self, trigger, frame, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYSSICTriggerFrameTypeNameEnabled(self._vi, trigger, frame, enabled)

    def ConfigureMPHYSSICTriggerFrameTypeNumericEnabled(self, trigger, frame, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYSSICTriggerFrameTypeNumericEnabled(self._vi, trigger, frame, enabled)

    def ConfigureMPHYSSICTriggerFrameFieldNameEnabled(self, trigger, frame, field, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYSSICTriggerFrameFieldNameEnabled(self._vi, trigger, frame, field, enabled)

    def ConfigureMPHYSSICTriggerFrameFieldNumericEnabled(self, trigger, frame, field, enabled):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYSSICTriggerFrameFieldNumericEnabled(self._vi, trigger, frame, field, enabled)

    def ConfigureMPHYSSICTriggerFrameFieldNameBitState(self, trigger, frame, field, bitState):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureMPHYSSICTriggerFrameFieldNameBitState(self._vi, trigger, frame, field, bitState)

    def ConfigureMPHYSSICTriggerFrameFieldNumericBitState(self, trigger, frame, field, bitState):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureMPHYSSICTriggerFrameFieldNumericBitState(
            self._vi, trigger, frame, field, bitState
        )

    def ConfigureMPHYSSICTriggerFrameFieldNameData(self, trigger, frame, field, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureMPHYSSICTriggerFrameFieldNameData(
            self._vi, trigger, frame, field, condition, min, max
        )

    def ConfigureMPHYSSICTriggerFrameFieldNumericData(self, trigger, frame, field, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureMPHYSSICTriggerFrameFieldNumericData(
            self._vi, trigger, frame, field, condition, min, max
        )

    def ConfigureMPHYSSICTriggerFrameFieldNameIndex(self, trigger, frame, field, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureMPHYSSICTriggerFrameFieldNameIndex(
            self._vi, trigger, frame, field, condition, min, max
        )

    def ConfigureMPHYSSICTriggerFrameFieldNumericIndex(self, trigger, frame, field, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureMPHYSSICTriggerFrameFieldNumericIndex(
            self._vi, trigger, frame, field, condition, min, max
        )

    def QueryMPHYFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryMPHYFrameCount(self._vi, serialBus)

    def QueryMPHYFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryMPHYFrameStatus(self._vi, serialBus, frame)

    def QueryMPHYFrameDataBytes(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMPHYFrameDataBytes(self._vi, serialBus, frame, bufferSize)

    def QueryMPHYFrameInfo(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMPHYFrameInfo(self._vi, serialBus, frame, bufferSize)

    def QueryMPHYFrameCellCount(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryMPHYFrameCellCount(self._vi, serialBus, frame)

    def QueryMPHYFrameCellStatus(self, serialBus, frame, cell):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param cell:
        :type cell:
        """
        return self._dllwrap.QueryMPHYFrameCellStatus(self._vi, serialBus, frame, cell)

    def QueryMPHYFrameCellType(self, serialBus, frame, cell):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param cell:
        :type cell:
        """
        return self._dllwrap.QueryMPHYFrameCellType(self._vi, serialBus, frame, cell)

    def QueryMPHYFrameCellData(self, serialBus, frame, cell):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param cell:
        :type cell:
        """
        return self._dllwrap.QueryMPHYFrameCellData(self._vi, serialBus, frame, cell)

    def QueryMPHYSSICFrameType(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryMPHYSSICFrameType(self._vi, serialBus, frame)

    def ConfigureMPHYSearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureMPHYSearchType(self._vi, searchName, type)

    def ConfigureMPHYSearchLCCType(self, searchName, LCCType):
        """

        :param searchName:
        :type searchName:
        :param LCCType:
        :type LCCType:
        """
        return self._dllwrap.ConfigureMPHYSearchLCCType(self._vi, searchName, LCCType)

    def ConfigureMPHYSearchWord(self, searchName, word, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param word:
        :type word:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYSearchWord(self._vi, searchName, word, condition, minimum, maximum)

    def ConfigureMPHYSearchTCPattern(self, searchName, TCPattern):
        """

        :param searchName:
        :type searchName:
        :param TCPattern:
        :type TCPattern:
        """
        return self._dllwrap.ConfigureMPHYSearchTCPattern(self._vi, searchName, TCPattern)

    def ConfigureMPHYSearchCREQPattern(self, searchName, CREQPattern):
        """

        :param searchName:
        :type searchName:
        :param CREQPattern:
        :type CREQPattern:
        """
        return self._dllwrap.ConfigureMPHYSearchCREQPattern(self._vi, searchName, CREQPattern)

    def ConfigureMPHYSearchRREQPattern(self, searchName, RREQPattern):
        """

        :param searchName:
        :type searchName:
        :param RREQPattern:
        :type RREQPattern:
        """
        return self._dllwrap.ConfigureMPHYSearchRREQPattern(self._vi, searchName, RREQPattern)

    def ConfigureMPHYSearchData(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYSearchData(self._vi, searchName, condition, minimum, maximum)

    def ConfigureMPHYSearchIndex(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYSearchIndex(self._vi, searchName, condition, minimum, maximum)

    def ConfigureMPHYSearchFSN(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYSearchFSN(self._vi, searchName, condition, minimum, maximum)

    def ConfigureMPHYSearchCRC(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYSearchCRC(self._vi, searchName, condition, minimum, maximum)

    def ConfigureMPHYSearchCredit(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYSearchCredit(self._vi, searchName, condition, minimum, maximum)

    def ConfigureMPHYSearchPACPBegin(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYSearchPACPBegin(self._vi, searchName, condition, minimum, maximum)

    def ConfigureMPHYSearchPACPID(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureMPHYSearchPACPID(self._vi, searchName, condition, minimum, maximum)

    def ConfigureMPHYSearchErrors(self, searchName, LCC, length, reserved, symbol, uniProFrame):
        """

        :param searchName:
        :type searchName:
        :param LCC:
        :type LCC:
        :param length:
        :type length:
        :param reserved:
        :type reserved:
        :param symbol:
        :type symbol:
        :param uniProFrame:
        :type uniProFrame:
        """
        return self._dllwrap.ConfigureMPHYSearchErrors(self._vi, searchName, LCC, length, reserved, symbol, uniProFrame)

    def QueryMPHYSearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryMPHYSearchFrameCount(self._vi, searchName)

    def QueryMPHYSearchFrameStatus(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryMPHYSearchFrameStatus(self._vi, searchName, frame)

    def QueryMPHYSearchFrameDataBytes(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMPHYSearchFrameDataBytes(self._vi, searchName, frame, bufferSize)

    def QueryMPHYSearchFrameCellCount(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryMPHYSearchFrameCellCount(self._vi, searchName, frame)

    def QueryMPHYSearchFrameCellStatus(self, searchName, frame, cell):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param cell:
        :type cell:
        """
        return self._dllwrap.QueryMPHYSearchFrameCellStatus(self._vi, searchName, frame, cell)

    def QueryMPHYSearchFrameCellType(self, searchName, frame, cell):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param cell:
        :type cell:
        """
        return self._dllwrap.QueryMPHYSearchFrameCellType(self._vi, searchName, frame, cell)

    def QueryMPHYSearchFrameCellData(self, searchName, frame, cell):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param cell:
        :type cell:
        """
        return self._dllwrap.QueryMPHYSearchFrameCellData(self._vi, searchName, frame, cell)

    def ConfigureMPHYSSICSearchErrorTypeNameEnabled(self, searchName, errorName, enabled):
        """

        :param searchName:
        :type searchName:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYSSICSearchErrorTypeNameEnabled(self._vi, searchName, errorName, enabled)

    def ConfigureMPHYSSICSearchErrorTypeNumericEnabled(self, errorNumber, searchName, enabled):
        """

        :param errorNumber:
        :type errorNumber:
        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYSSICSearchErrorTypeNumericEnabled(self._vi, errorNumber, searchName, enabled)

    def ConfigureMPHYSSICSearchFrameTypeNameEnabled(self, searchName, frame, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYSSICSearchFrameTypeNameEnabled(self._vi, searchName, frame, enabled)

    def ConfigureMPHYSSICSearchFrameTypeNumericEnabled(self, frame, searchName, enabled):
        """

        :param frame:
        :type frame:
        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYSSICSearchFrameTypeNumericEnabled(self._vi, frame, searchName, enabled)

    def ConfigureMPHYSSICSearchFrameFieldNameEnabled(self, searchName, frame, field, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYSSICSearchFrameFieldNameEnabled(self._vi, searchName, frame, field, enabled)

    def ConfigureMPHYSSICSearchFrameFieldNumericEnabled(self, frame, field, searchName, enabled):
        """

        :param frame:
        :type frame:
        :param field:
        :type field:
        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureMPHYSSICSearchFrameFieldNumericEnabled(
            self._vi, frame, field, searchName, enabled
        )

    def ConfigureMPHYSSICSearchFrameFieldNameBitState(self, searchName, frame, field, bitState):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureMPHYSSICSearchFrameFieldNameBitState(self._vi, searchName, frame, field, bitState)

    def ConfigureMPHYSSICSearchFrameFieldNumericBitState(self, frame, field, searchName, bitState):
        """

        :param frame:
        :type frame:
        :param field:
        :type field:
        :param searchName:
        :type searchName:
        :param bitState:
        :type bitState:
        """
        return self._dllwrap.ConfigureMPHYSSICSearchFrameFieldNumericBitState(
            self._vi, frame, field, searchName, bitState
        )

    def ConfigureMPHYSSICSearchFrameFieldNameData(self, searchName, frame, field, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureMPHYSSICSearchFrameFieldNameData(
            self._vi, searchName, frame, field, condition, min, max
        )

    def ConfigureMPHYSSICSearchFrameFieldNumericData(self, frame, field, searchName, condition, min, max):
        """

        :param frame:
        :type frame:
        :param field:
        :type field:
        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureMPHYSSICSearchFrameFieldNumericData(
            self._vi, frame, field, searchName, condition, min, max
        )

    def ConfigureMPHYSSICSearchFrameFieldNameIndex(self, searchName, frame, field, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureMPHYSSICSearchFrameFieldNameIndex(
            self._vi, searchName, frame, field, condition, min, max
        )

    def ConfigureMPHYSSICSearchFrameFieldNumericIndex(self, frame, field, searchName, condition, min, max):
        """

        :param frame:
        :type frame:
        :param field:
        :type field:
        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureMPHYSSICSearchFrameFieldNumericIndex(
            self._vi, frame, field, searchName, condition, min, max
        )

    def ConfigureSpaceWireSource(self, serialBus, signal, source):
        """

        :param serialBus:
        :type serialBus:
        :param signal:
        :type signal:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureSpaceWireSource(self._vi, serialBus, signal, source)

    def ConfigureSpaceWireThresholdPreset(self, serialBus, preset):
        """

        :param serialBus:
        :type serialBus:
        :param preset:
        :type preset:
        """
        return self._dllwrap.ConfigureSpaceWireThresholdPreset(self._vi, serialBus, preset)

    def ConfigureSpaceWireThresholdCoupling(self, serialBus, state):
        """

        :param serialBus:
        :type serialBus:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureSpaceWireThresholdCoupling(self._vi, serialBus, state)

    def ConfigureSpaceWireThreshold(self, serialBus, signal, threshold, hysteresis):
        """

        :param serialBus:
        :type serialBus:
        :param signal:
        :type signal:
        :param threshold:
        :type threshold:
        :param hysteresis:
        :type hysteresis:
        """
        return self._dllwrap.ConfigureSpaceWireThreshold(self._vi, serialBus, signal, threshold, hysteresis)

    def ConfigureSpaceWireSyncSettings(self, serialBus, mode, bitPosition):
        """

        :param serialBus:
        :type serialBus:
        :param mode:
        :type mode:
        :param bitPosition:
        :type bitPosition:
        """
        return self._dllwrap.ConfigureSpaceWireSyncSettings(self._vi, serialBus, mode, bitPosition)

    def ConfigureSpaceWireMinGap(self, serialBus, minGap):
        """

        :param serialBus:
        :type serialBus:
        :param minGap:
        :type minGap:
        """
        return self._dllwrap.ConfigureSpaceWireMinGap(self._vi, serialBus, minGap)

    def ConfigureSpaceWireTriggerType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSpaceWireTriggerType(self._vi, trigger, type)

    def ConfigureSpaceWireTriggerControlType(self, trigger, type):
        """

        :param trigger:
        :type trigger:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSpaceWireTriggerControlType(self._vi, trigger, type)

    def ConfigureSpaceWireTriggerTimeCode(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureSpaceWireTriggerTimeCode(self._vi, trigger, condition, minimum, maximum)

    def ConfigureSpaceWireTriggerData(self, trigger, condition, minimum, maximum):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureSpaceWireTriggerData(self._vi, trigger, condition, minimum, maximum)

    def ConfigureSpaceWireTriggerErrorConditions(self, trigger, parityError, escapeError):
        """

        :param trigger:
        :type trigger:
        :param parityError:
        :type parityError:
        :param escapeError:
        :type escapeError:
        """
        return self._dllwrap.ConfigureSpaceWireTriggerErrorConditions(self._vi, trigger, parityError, escapeError)

    def QuerySpaceWireFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QuerySpaceWireFrameCount(self._vi, serialBus)

    def QuerySpaceWireFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySpaceWireFrameStatus(self._vi, serialBus, frame)

    def QuerySpaceWireFrameDataBytes(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySpaceWireFrameDataBytes(self._vi, serialBus, frame, bufferSize)

    def QuerySpaceWireFrameFieldStatus(self, serialBus, frame, field):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        """
        return self._dllwrap.QuerySpaceWireFrameFieldStatus(self._vi, serialBus, frame, field)

    def QuerySpaceWireFrameFieldDataBytes(self, serialBus, frame, field, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySpaceWireFrameFieldDataBytes(self._vi, serialBus, frame, field, bufferSize)

    def QuerySpaceWireFrameFieldFormattedValue(self, serialBus, frame, field, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySpaceWireFrameFieldFormattedValue(self._vi, serialBus, frame, field, bufferSize)

    def ConfigureSpaceWireSearchType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSpaceWireSearchType(self._vi, searchName, type)

    def ConfigureSpaceWireSearchControlType(self, searchName, type):
        """

        :param searchName:
        :type searchName:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureSpaceWireSearchControlType(self._vi, searchName, type)

    def ConfigureSpaceWireSearchTimeCode(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureSpaceWireSearchTimeCode(self._vi, searchName, condition, minimum, maximum)

    def ConfigureSpaceWireSearchData(self, searchName, condition, minimum, maximum):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param minimum:
        :type minimum:
        :param maximum:
        :type maximum:
        """
        return self._dllwrap.ConfigureSpaceWireSearchData(self._vi, searchName, condition, minimum, maximum)

    def ConfigureSpaceWireSearchErrorConditions(self, searchName, parityError, escapeError):
        """

        :param searchName:
        :type searchName:
        :param parityError:
        :type parityError:
        :param escapeError:
        :type escapeError:
        """
        return self._dllwrap.ConfigureSpaceWireSearchErrorConditions(self._vi, searchName, parityError, escapeError)

    def QuerySpaceWireSearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QuerySpaceWireSearchFrameCount(self._vi, searchName)

    def QuerySpaceWireSearchFrameStatus(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QuerySpaceWireSearchFrameStatus(self._vi, searchName, frame)

    def QuerySpaceWireSearchFrameDataBytes(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QuerySpaceWireSearchFrameDataBytes(self._vi, searchName, frame, bufferSize)

    def ConfigurePCIe(self, serialBus, generation, link, descrambling):
        """

        :param serialBus:
        :type serialBus:
        :param generation:
        :type generation:
        :param link:
        :type link:
        :param descrambling:
        :type descrambling:
        """
        return self._dllwrap.ConfigurePCIe(self._vi, serialBus, generation, link, descrambling)

    def ConfigurePCIeFilterIdle(self, serialBus, filterIdlePackets):
        """

        :param serialBus:
        :type serialBus:
        :param filterIdlePackets:
        :type filterIdlePackets:
        """
        return self._dllwrap.ConfigurePCIeFilterIdle(self._vi, serialBus, filterIdlePackets)

    def ConfigurePCIeLane(self, serialBus, lane, source, thresholdLow, thresholdHigh):
        """

        :param serialBus:
        :type serialBus:
        :param lane:
        :type lane:
        :param source:
        :type source:
        :param thresholdLow:
        :type thresholdLow:
        :param thresholdHigh:
        :type thresholdHigh:
        """
        return self._dllwrap.ConfigurePCIeLane(self._vi, serialBus, lane, source, thresholdLow, thresholdHigh)

    def ConfigurePCIeCDR(self, serialBus, nominalBitRate, initialPhaseSync, selectedResults):
        """

        :param serialBus:
        :type serialBus:
        :param nominalBitRate:
        :type nominalBitRate:
        :param initialPhaseSync:
        :type initialPhaseSync:
        :param selectedResults:
        :type selectedResults:
        """
        return self._dllwrap.ConfigurePCIeCDR(self._vi, serialBus, nominalBitRate, initialPhaseSync, selectedResults)

    def ConfigurePCIeCDRPLL(self, serialBus, order, damping, bandwidth):
        """

        :param serialBus:
        :type serialBus:
        :param order:
        :type order:
        :param damping:
        :type damping:
        :param bandwidth:
        :type bandwidth:
        """
        return self._dllwrap.ConfigurePCIeCDRPLL(self._vi, serialBus, order, damping, bandwidth)

    def ConfigurePCIeCDRPLLRelativeBandwidth(self, serialBus, relativeBandwidth):
        """

        :param serialBus:
        :type serialBus:
        :param relativeBandwidth:
        :type relativeBandwidth:
        """
        return self._dllwrap.ConfigurePCIeCDRPLLRelativeBandwidth(self._vi, serialBus, relativeBandwidth)

    def ConfigurePCIeTriggerType(self, trigger, triggerType):
        """

        :param trigger:
        :type trigger:
        :param triggerType:
        :type triggerType:
        """
        return self._dllwrap.ConfigurePCIeTriggerType(self._vi, trigger, triggerType)

    def ConfigurePCIeTriggerOSET(self, trigger, orderedSetCondition):
        """

        :param trigger:
        :type trigger:
        :param orderedSetCondition:
        :type orderedSetCondition:
        """
        return self._dllwrap.ConfigurePCIeTriggerOSET(self._vi, trigger, orderedSetCondition)

    def ConfigurePCIeTriggerError(self, trigger, CRC16, LCRC, ECRC, invalidSymbol, disparityError):
        """

        :param trigger:
        :type trigger:
        :param CRC16:
        :type CRC16:
        :param LCRC:
        :type LCRC:
        :param ECRC:
        :type ECRC:
        :param invalidSymbol:
        :type invalidSymbol:
        :param disparityError:
        :type disparityError:
        """
        return self._dllwrap.ConfigurePCIeTriggerError(
            self._vi, trigger, CRC16, LCRC, ECRC, invalidSymbol, disparityError
        )

    def ConfigurePCIeTriggerTLPType(self, trigger, TLP):
        """

        :param trigger:
        :type trigger:
        :param TLP:
        :type TLP:
        """
        return self._dllwrap.ConfigurePCIeTriggerTLPType(self._vi, trigger, TLP)

    def ConfigurePCIeTriggerTLPAnyType(self, trigger, sequenceNumber, TC, ordering, snoop, requesterID):
        """

        :param trigger:
        :type trigger:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param requesterID:
        :type requesterID:
        """
        return self._dllwrap.ConfigurePCIeTriggerTLPAnyType(
            self._vi, trigger, sequenceNumber, TC, ordering, snoop, requesterID
        )

    def ConfigurePCIeTriggerTLPMem(
        self,
        trigger,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        readWrite,
        requesterID,
        addressType,
    ):
        """

        :param trigger:
        :type trigger:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param readWrite:
        :type readWrite:
        :param requesterID:
        :type requesterID:
        :param addressType:
        :type addressType:
        """
        return self._dllwrap.ConfigurePCIeTriggerTLPMem(
            self._vi,
            trigger,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            readWrite,
            requesterID,
            addressType,
        )

    def ConfigurePCIeTriggerTLPIO(self, trigger, sequenceNumber, TC, ordering, snoop, readWrite, requesterID):
        """

        :param trigger:
        :type trigger:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param readWrite:
        :type readWrite:
        :param requesterID:
        :type requesterID:
        """
        return self._dllwrap.ConfigurePCIeTriggerTLPIO(
            self._vi, trigger, sequenceNumber, TC, ordering, snoop, readWrite, requesterID
        )

    def ConfigurePCIeTriggerTLPCfg(
        self,
        trigger,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        readWrite,
        requesterID,
        type,
        deviceID,
    ):
        """

        :param trigger:
        :type trigger:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param readWrite:
        :type readWrite:
        :param requesterID:
        :type requesterID:
        :param type:
        :type type:
        :param deviceID:
        :type deviceID:
        """
        return self._dllwrap.ConfigurePCIeTriggerTLPCfg(
            self._vi,
            trigger,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            readWrite,
            requesterID,
            type,
            deviceID,
        )

    def ConfigurePCIeTriggerTLPMsg(
        self,
        trigger,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        routing,
        messageCode,
    ):
        """

        :param trigger:
        :type trigger:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param requesterID:
        :type requesterID:
        :param routing:
        :type routing:
        :param messageCode:
        :type messageCode:
        """
        return self._dllwrap.ConfigurePCIeTriggerTLPMsg(
            self._vi,
            trigger,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            requesterID,
            routing,
            messageCode,
        )

    def ConfigurePCIeTriggerTLPCpl(
        self,
        trigger,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        status,
        completerID,
    ):
        """

        :param trigger:
        :type trigger:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param requesterID:
        :type requesterID:
        :param status:
        :type status:
        :param completerID:
        :type completerID:
        """
        return self._dllwrap.ConfigurePCIeTriggerTLPCpl(
            self._vi,
            trigger,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            requesterID,
            status,
            completerID,
        )

    def ConfigurePCIeTriggerTLPFetchAdd(self, trigger, sequenceNumber, TC, ordering, snoop, requesterID, addressType):
        """

        :param trigger:
        :type trigger:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param requesterID:
        :type requesterID:
        :param addressType:
        :type addressType:
        """
        return self._dllwrap.ConfigurePCIeTriggerTLPFetchAdd(
            self._vi,
            trigger,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            requesterID,
            addressType,
        )

    def ConfigurePCIeTriggerTLPSwap(self, trigger, sequenceNumber, TC, ordering, snoop, requesterID, addressType):
        """

        :param trigger:
        :type trigger:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param requesterID:
        :type requesterID:
        :param addressType:
        :type addressType:
        """
        return self._dllwrap.ConfigurePCIeTriggerTLPSwap(
            self._vi,
            trigger,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            requesterID,
            addressType,
        )

    def ConfigurePCIeTriggerTLPCAS(self, trigger, sequenceNumber, TC, ordering, snoop, requesterID, addressType):
        """

        :param trigger:
        :type trigger:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param requesterID:
        :type requesterID:
        :param addressType:
        :type addressType:
        """
        return self._dllwrap.ConfigurePCIeTriggerTLPCAS(
            self._vi,
            trigger,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            requesterID,
            addressType,
        )

    def ConfigurePCIeTriggerDLLPType(self, trigger, DLLP):
        """

        :param trigger:
        :type trigger:
        :param DLLP:
        :type DLLP:
        """
        return self._dllwrap.ConfigurePCIeTriggerDLLPType(self._vi, trigger, DLLP)

    def ConfigurePCIeTriggerDLLPMRType(self, trigger, MRDLLP):
        """

        :param trigger:
        :type trigger:
        :param MRDLLP:
        :type MRDLLP:
        """
        return self._dllwrap.ConfigurePCIeTriggerDLLPMRType(self._vi, trigger, MRDLLP)

    def ConfigurePCIeTriggerDLLPMRInit(self, trigger, phase, VHFC, mixedType, authorized, devicePortType):
        """

        :param trigger:
        :type trigger:
        :param phase:
        :type phase:
        :param VHFC:
        :type VHFC:
        :param mixedType:
        :type mixedType:
        :param authorized:
        :type authorized:
        :param devicePortType:
        :type devicePortType:
        """
        return self._dllwrap.ConfigurePCIeTriggerDLLPMRInit(
            self._vi, trigger, phase, VHFC, mixedType, authorized, devicePortType
        )

    def ConfigurePCIeTriggerDLLPMRReset(self, trigger, a, VHGroup):
        """

        :param trigger:
        :type trigger:
        :param a:
        :type a:
        :param VHGroup:
        :type VHGroup:
        """
        return self._dllwrap.ConfigurePCIeTriggerDLLPMRReset(self._vi, trigger, a, VHGroup)

    def ConfigurePCIeTriggerDLLPMRFC(self, trigger, MRDLLP, VLNumber, VHAbsent, TLPType, creditType):
        """

        :param trigger:
        :type trigger:
        :param MRDLLP:
        :type MRDLLP:
        :param VLNumber:
        :type VLNumber:
        :param VHAbsent:
        :type VHAbsent:
        :param TLPType:
        :type TLPType:
        :param creditType:
        :type creditType:
        """
        return self._dllwrap.ConfigurePCIeTriggerDLLPMRFC(
            self._vi, trigger, MRDLLP, VLNumber, VHAbsent, TLPType, creditType
        )

    def ConfigurePCIeTriggerDLLPAck(self, trigger, DLLP, sequence):
        """

        :param trigger:
        :type trigger:
        :param DLLP:
        :type DLLP:
        :param sequence:
        :type sequence:
        """
        return self._dllwrap.ConfigurePCIeTriggerDLLPAck(self._vi, trigger, DLLP, sequence)

    def ConfigurePCIeTriggerDLLPFC(self, trigger, DLLP, creditType, VCID):
        """

        :param trigger:
        :type trigger:
        :param DLLP:
        :type DLLP:
        :param creditType:
        :type creditType:
        :param VCID:
        :type VCID:
        """
        return self._dllwrap.ConfigurePCIeTriggerDLLPFC(self._vi, trigger, DLLP, creditType, VCID)

    def ConfigurePCIeTriggerDLLPPM(self, trigger, PMType):
        """

        :param trigger:
        :type trigger:
        :param PMType:
        :type PMType:
        """
        return self._dllwrap.ConfigurePCIeTriggerDLLPPM(self._vi, trigger, PMType)

    def ConfigurePCIeTriggerDLLPVendor(self, trigger, vendorPattern):
        """

        :param trigger:
        :type trigger:
        :param vendorPattern:
        :type vendorPattern:
        """
        return self._dllwrap.ConfigurePCIeTriggerDLLPVendor(self._vi, trigger, vendorPattern)

    def QueryPCIePacketCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryPCIePacketCount(self._vi, serialBus)

    def QueryPCIePacketStatus(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIePacketStatus(self._vi, serialBus, packet)

    def QueryPCIePacketDataBytes(self, serialBus, packet, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryPCIePacketDataBytes(self._vi, serialBus, packet, bufferSize)

    def QueryPCIePacketSequenceNumber(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIePacketSequenceNumber(self._vi, serialBus, packet)

    def QueryPCIePacketTag(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIePacketTag(self._vi, serialBus, packet)

    def QueryPCIePacketLength(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIePacketLength(self._vi, serialBus, packet)

    def QueryPCIePacketAddress(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIePacketAddress(self._vi, serialBus, packet)

    def QueryPCIePacketHFC(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIePacketHFC(self._vi, serialBus, packet)

    def QueryPCIePacketDFC(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIePacketDFC(self._vi, serialBus, packet)

    def QueryPCIePacketCompletionStatus(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIePacketCompletionStatus(self._vi, serialBus, packet)

    def QueryPCIePacketRequesterID(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIePacketRequesterID(self._vi, serialBus, packet)

    def QueryPCIePacketCompleterID(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIePacketCompleterID(self._vi, serialBus, packet)

    def QueryPCIePacketDecodedFieldsCount(self, serialBus, packet):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIePacketDecodedFieldsCount(self._vi, serialBus, packet)

    def QueryPCIePacketField(self, serialBus, packet, field, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        :param field:
        :type field:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryPCIePacketField(self._vi, serialBus, packet, field, bufferSize)

    def QueryPCIePacketFormattedValue(self, serialBus, packet, field, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param packet:
        :type packet:
        :param field:
        :type field:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryPCIePacketFormattedValue(self._vi, serialBus, packet, field, bufferSize)

    def ConfigurePCIeSearchType(self, searchName, searchType):
        """

        :param searchName:
        :type searchName:
        :param searchType:
        :type searchType:
        """
        return self._dllwrap.ConfigurePCIeSearchType(self._vi, searchName, searchType)

    def ConfigurePCIeSearchOrderedSets(
        self,
        searchName,
        TS1,
        TS2,
        fastTrainingSeq,
        electricalIdle,
        electricalIdleExit,
        SKP,
        compliancePattern,
    ):
        """

        :param searchName:
        :type searchName:
        :param TS1:
        :type TS1:
        :param TS2:
        :type TS2:
        :param fastTrainingSeq:
        :type fastTrainingSeq:
        :param electricalIdle:
        :type electricalIdle:
        :param electricalIdleExit:
        :type electricalIdleExit:
        :param SKP:
        :type SKP:
        :param compliancePattern:
        :type compliancePattern:
        """
        return self._dllwrap.ConfigurePCIeSearchOrderedSets(
            self._vi,
            searchName,
            TS1,
            TS2,
            fastTrainingSeq,
            electricalIdle,
            electricalIdleExit,
            SKP,
            compliancePattern,
        )

    def ConfigurePCIeSearchError(self, searchName, CRC16, LCRC, ECRC, invalidSymbol, disparityError):
        """

        :param searchName:
        :type searchName:
        :param CRC16:
        :type CRC16:
        :param LCRC:
        :type LCRC:
        :param ECRC:
        :type ECRC:
        :param invalidSymbol:
        :type invalidSymbol:
        :param disparityError:
        :type disparityError:
        """
        return self._dllwrap.ConfigurePCIeSearchError(
            self._vi, searchName, CRC16, LCRC, ECRC, invalidSymbol, disparityError
        )

    def ConfigurePCIeSearchTLPType(self, searchName, TLP):
        """

        :param searchName:
        :type searchName:
        :param TLP:
        :type TLP:
        """
        return self._dllwrap.ConfigurePCIeSearchTLPType(self._vi, searchName, TLP)

    def ConfigurePCIeSearchTLPAnyType(self, searchName, sequenceNumber, TC, ordering, snoop, requesterID):
        """

        :param searchName:
        :type searchName:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param requesterID:
        :type requesterID:
        """
        return self._dllwrap.ConfigurePCIeSearchTLPAnyType(
            self._vi, searchName, sequenceNumber, TC, ordering, snoop, requesterID
        )

    def ConfigurePCIeSearchTLPMem(
        self,
        searchName,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        readWrite,
        requesterID,
        addressType,
    ):
        """

        :param searchName:
        :type searchName:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param readWrite:
        :type readWrite:
        :param requesterID:
        :type requesterID:
        :param addressType:
        :type addressType:
        """
        return self._dllwrap.ConfigurePCIeSearchTLPMem(
            self._vi,
            searchName,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            readWrite,
            requesterID,
            addressType,
        )

    def ConfigurePCIeSearchTLPIO(self, searchName, sequenceNumber, TC, ordering, snoop, readWrite, requesterID):
        """

        :param searchName:
        :type searchName:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param readWrite:
        :type readWrite:
        :param requesterID:
        :type requesterID:
        """
        return self._dllwrap.ConfigurePCIeSearchTLPIO(
            self._vi,
            searchName,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            readWrite,
            requesterID,
        )

    def ConfigurePCIeSearchTLPCfg(
        self,
        searchName,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        readWrite,
        requesterID,
        type,
        deviceID,
    ):
        """

        :param searchName:
        :type searchName:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param readWrite:
        :type readWrite:
        :param requesterID:
        :type requesterID:
        :param type:
        :type type:
        :param deviceID:
        :type deviceID:
        """
        return self._dllwrap.ConfigurePCIeSearchTLPCfg(
            self._vi,
            searchName,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            readWrite,
            requesterID,
            type,
            deviceID,
        )

    def ConfigurePCIeSearchTLPMsg(
        self,
        searchName,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        routing,
        messageCode,
    ):
        """

        :param searchName:
        :type searchName:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param requesterID:
        :type requesterID:
        :param routing:
        :type routing:
        :param messageCode:
        :type messageCode:
        """
        return self._dllwrap.ConfigurePCIeSearchTLPMsg(
            self._vi,
            searchName,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            requesterID,
            routing,
            messageCode,
        )

    def ConfigurePCIeSearchTLPCpl(
        self,
        searchName,
        sequenceNumber,
        TC,
        ordering,
        snoop,
        requesterID,
        status,
        completerID,
    ):
        """

        :param searchName:
        :type searchName:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param requesterID:
        :type requesterID:
        :param status:
        :type status:
        :param completerID:
        :type completerID:
        """
        return self._dllwrap.ConfigurePCIeSearchTLPCpl(
            self._vi,
            searchName,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            requesterID,
            status,
            completerID,
        )

    def ConfigurePCIeSearchTLPFetchAdd(self, searchName, sequenceNumber, TC, ordering, snoop, requesterID, addressType):
        """

        :param searchName:
        :type searchName:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param requesterID:
        :type requesterID:
        :param addressType:
        :type addressType:
        """
        return self._dllwrap.ConfigurePCIeSearchTLPFetchAdd(
            self._vi,
            searchName,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            requesterID,
            addressType,
        )

    def ConfigurePCIeSearchTLPSwap(self, searchName, sequenceNumber, TC, ordering, snoop, requesterID, addressType):
        """

        :param searchName:
        :type searchName:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param requesterID:
        :type requesterID:
        :param addressType:
        :type addressType:
        """
        return self._dllwrap.ConfigurePCIeSearchTLPSwap(
            self._vi,
            searchName,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            requesterID,
            addressType,
        )

    def ConfigurePCIeSearchTLPCAS(self, searchName, sequenceNumber, TC, ordering, snoop, requesterID, addressType):
        """

        :param searchName:
        :type searchName:
        :param sequenceNumber:
        :type sequenceNumber:
        :param TC:
        :type TC:
        :param ordering:
        :type ordering:
        :param snoop:
        :type snoop:
        :param requesterID:
        :type requesterID:
        :param addressType:
        :type addressType:
        """
        return self._dllwrap.ConfigurePCIeSearchTLPCAS(
            self._vi,
            searchName,
            sequenceNumber,
            TC,
            ordering,
            snoop,
            requesterID,
            addressType,
        )

    def ConfigurePCIeSearchDLLPType(self, searchName, DLLP):
        """

        :param searchName:
        :type searchName:
        :param DLLP:
        :type DLLP:
        """
        return self._dllwrap.ConfigurePCIeSearchDLLPType(self._vi, searchName, DLLP)

    def ConfigurePCIeSearchDLLPMRType(self, searchName, MRDLLP):
        """

        :param searchName:
        :type searchName:
        :param MRDLLP:
        :type MRDLLP:
        """
        return self._dllwrap.ConfigurePCIeSearchDLLPMRType(self._vi, searchName, MRDLLP)

    def ConfigurePCIeSearchDLLPMRInit(self, searchName, phase, VHFC, mixedType, authorized, devicePortType):
        """

        :param searchName:
        :type searchName:
        :param phase:
        :type phase:
        :param VHFC:
        :type VHFC:
        :param mixedType:
        :type mixedType:
        :param authorized:
        :type authorized:
        :param devicePortType:
        :type devicePortType:
        """
        return self._dllwrap.ConfigurePCIeSearchDLLPMRInit(
            self._vi, searchName, phase, VHFC, mixedType, authorized, devicePortType
        )

    def ConfigurePCIeSearchDLLPMRReset(self, searchName, a, VHGroup):
        """

        :param searchName:
        :type searchName:
        :param a:
        :type a:
        :param VHGroup:
        :type VHGroup:
        """
        return self._dllwrap.ConfigurePCIeSearchDLLPMRReset(self._vi, searchName, a, VHGroup)

    def ConfigurePCIeSearchDLLPMRFC(self, searchName, MRDLLP, VLNumber, VHAbsent, TLPType, creditType):
        """

        :param searchName:
        :type searchName:
        :param MRDLLP:
        :type MRDLLP:
        :param VLNumber:
        :type VLNumber:
        :param VHAbsent:
        :type VHAbsent:
        :param TLPType:
        :type TLPType:
        :param creditType:
        :type creditType:
        """
        return self._dllwrap.ConfigurePCIeSearchDLLPMRFC(
            self._vi, searchName, MRDLLP, VLNumber, VHAbsent, TLPType, creditType
        )

    def ConfigurePCIeSearchDLLPAck(self, searchName, DLLP, sequence):
        """

        :param searchName:
        :type searchName:
        :param DLLP:
        :type DLLP:
        :param sequence:
        :type sequence:
        """
        return self._dllwrap.ConfigurePCIeSearchDLLPAck(self._vi, searchName, DLLP, sequence)

    def ConfigurePCIeSearchDLLPFC(self, searchName, DLLP, creditType, VCID):
        """

        :param searchName:
        :type searchName:
        :param DLLP:
        :type DLLP:
        :param creditType:
        :type creditType:
        :param VCID:
        :type VCID:
        """
        return self._dllwrap.ConfigurePCIeSearchDLLPFC(self._vi, searchName, DLLP, creditType, VCID)

    def ConfigurePCIeSearchDLLPPM(self, searchName, PMType):
        """

        :param searchName:
        :type searchName:
        :param PMType:
        :type PMType:
        """
        return self._dllwrap.ConfigurePCIeSearchDLLPPM(self._vi, searchName, PMType)

    def ConfigurePCIeSearchDLLPVendor(self, searchName, vendorPattern):
        """

        :param searchName:
        :type searchName:
        :param vendorPattern:
        :type vendorPattern:
        """
        return self._dllwrap.ConfigurePCIeSearchDLLPVendor(self._vi, searchName, vendorPattern)

    def QueryPCIeSearchPacketCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryPCIeSearchPacketCount(self._vi, searchName)

    def QueryPCIeSearchPacketStatus(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIeSearchPacketStatus(self._vi, searchName, packet)

    def QueryPCIeSearchPacketDataBytes(self, searchName, packet, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryPCIeSearchPacketDataBytes(self._vi, searchName, packet, bufferSize)

    def QueryPCIeSearchPacketSequenceNumber(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIeSearchPacketSequenceNumber(self._vi, searchName, packet)

    def QueryPCIeSearchPacketTag(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIeSearchPacketTag(self._vi, searchName, packet)

    def QueryPCIeSearchPacketLength(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIeSearchPacketLength(self._vi, searchName, packet)

    def QueryPCIeSearchPacketAddress(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIeSearchPacketAddress(self._vi, searchName, packet)

    def QueryPCIeSearchPacketHFC(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIeSearchPacketHFC(self._vi, searchName, packet)

    def QueryPCIeSearchPacketDFC(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIeSearchPacketDFC(self._vi, searchName, packet)

    def QueryPCIeSearchPacketCompletionStatus(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIeSearchPacketCompletionStatus(self._vi, searchName, packet)

    def QueryPCIeSearchPacketRequesterID(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIeSearchPacketRequesterID(self._vi, searchName, packet)

    def QueryPCIeSearchPacketCompleterID(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIeSearchPacketCompleterID(self._vi, searchName, packet)

    def QueryPCIeSearchPacketDecodedFieldsCount(self, searchName, packet):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        """
        return self._dllwrap.QueryPCIeSearchPacketDecodedFieldsCount(self._vi, searchName, packet)

    def QueryPCIeSearchPacketField(self, searchName, packet, field, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        :param field:
        :type field:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryPCIeSearchPacketField(self._vi, searchName, packet, field, bufferSize)

    def QueryPCIeSearchPacketFormattedValue(self, searchName, packet, field, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param packet:
        :type packet:
        :param field:
        :type field:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryPCIeSearchPacketFormattedValue(self._vi, searchName, packet, field, bufferSize)

    def ConfigureCXPI(self, serialBus, source, polarity):
        """

        :param serialBus:
        :type serialBus:
        :param source:
        :type source:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.ConfigureCXPI(self._vi, serialBus, source, polarity)

    def ConfigureCXPIThresholds(self, serialBus, threshold, hysteresis):
        """

        :param serialBus:
        :type serialBus:
        :param threshold:
        :type threshold:
        :param hysteresis:
        :type hysteresis:
        """
        return self._dllwrap.ConfigureCXPIThresholds(self._vi, serialBus, threshold, hysteresis)

    def ConfigureCXPIDisplayOrder(self, serialBus, displayOrder):
        """

        :param serialBus:
        :type serialBus:
        :param displayOrder:
        :type displayOrder:
        """
        return self._dllwrap.ConfigureCXPIDisplayOrder(self._vi, serialBus, displayOrder)

    def ConfigureCXPIBitRate(self, serialBus, enabled, bitRateValue):
        """

        :param serialBus:
        :type serialBus:
        :param enabled:
        :type enabled:
        :param bitRateValue:
        :type bitRateValue:
        """
        return self._dllwrap.ConfigureCXPIBitRate(self._vi, serialBus, enabled, bitRateValue)

    def QueryCXPIMeasuredBitRate(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryCXPIMeasuredBitRate(self._vi, serialBus)

    def ConfigureCXPISpacing(self, serialBus, IBSMin, IBSMax, IFSMin, IFSMax):
        """

        :param serialBus:
        :type serialBus:
        :param IBSMin:
        :type IBSMin:
        :param IBSMax:
        :type IBSMax:
        :param IFSMin:
        :type IFSMin:
        :param IFSMax:
        :type IFSMax:
        """
        return self._dllwrap.ConfigureCXPISpacing(self._vi, serialBus, IBSMin, IBSMax, IFSMin, IFSMax)

    def ConfigureCXPITriggerType(self, trigger, triggerType):
        """

        :param trigger:
        :type trigger:
        :param triggerType:
        :type triggerType:
        """
        return self._dllwrap.ConfigureCXPITriggerType(self._vi, trigger, triggerType)

    def ConfigureCXPITrigger(self, trigger, NM, CT):
        """

        :param trigger:
        :type trigger:
        :param NM:
        :type NM:
        :param CT:
        :type CT:
        """
        return self._dllwrap.ConfigureCXPITrigger(self._vi, trigger, NM, CT)

    def ConfigureCXPITriggerFrameID(self, trigger, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureCXPITriggerFrameID(self._vi, trigger, condition, min, max)

    def ConfigureCXPITriggerDLC(self, trigger, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureCXPITriggerDLC(self._vi, trigger, condition, min, max)

    def ConfigureCXPITriggerDLCExtend(self, trigger, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureCXPITriggerDLCExtend(self._vi, trigger, condition, min, max)

    def ConfigureCXPITriggerData(self, trigger, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureCXPITriggerData(self._vi, trigger, condition, min, max)

    def ConfigureCXPITriggerIndex(self, trigger, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureCXPITriggerIndex(self._vi, trigger, condition, min, max)

    def ConfigureCXPITriggerError(self, trigger, CRC, DLC, IBS, IFS, length, parity, UART):
        """

        :param trigger:
        :type trigger:
        :param CRC:
        :type CRC:
        :param DLC:
        :type DLC:
        :param IBS:
        :type IBS:
        :param IFS:
        :type IFS:
        :param length:
        :type length:
        :param parity:
        :type parity:
        :param UART:
        :type UART:
        """
        return self._dllwrap.ConfigureCXPITriggerError(self._vi, trigger, CRC, DLC, IBS, IFS, length, parity, UART)

    def QueryCXPIFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryCXPIFrameCount(self._vi, serialBus)

    def QueryCXPIFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryCXPIFrameStatus(self._vi, serialBus, frame)

    def QueryCXPIFrameDataBytes(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryCXPIFrameDataBytes(self._vi, serialBus, frame, bufferSize)

    def QueryCXPIFrameDLCField(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryCXPIFrameDLCField(self._vi, serialBus, frame)

    def QueryCXPIFrameWordStatus(self, serialBus, frame, word):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param word:
        :type word:
        """
        return self._dllwrap.QueryCXPIFrameWordStatus(self._vi, serialBus, frame, word)

    def ConfigureCXPISearchType(self, searchName, searchType):
        """

        :param searchName:
        :type searchName:
        :param searchType:
        :type searchType:
        """
        return self._dllwrap.ConfigureCXPISearchType(self._vi, searchName, searchType)

    def ConfigureCXPISearch(self, searchName, NM, CT):
        """

        :param searchName:
        :type searchName:
        :param NM:
        :type NM:
        :param CT:
        :type CT:
        """
        return self._dllwrap.ConfigureCXPISearch(self._vi, searchName, NM, CT)

    def ConfigureCXPISearchFrameID(self, searchName, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureCXPISearchFrameID(self._vi, searchName, condition, min, max)

    def ConfigureCXPISearchDLC(self, searchName, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureCXPISearchDLC(self._vi, searchName, condition, min, max)

    def ConfigureCXPISearchDLCExtend(self, searchName, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureCXPISearchDLCExtend(self._vi, searchName, condition, min, max)

    def ConfigureCXPISearchData(self, searchName, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureCXPISearchData(self._vi, searchName, condition, min, max)

    def ConfigureCXPISearchIndex(self, searchName, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureCXPISearchIndex(self._vi, searchName, condition, min, max)

    def ConfigureCXPISearchError(self, searchName, CRC, DLC, IBS, IFS, length, parity, UART):
        """

        :param searchName:
        :type searchName:
        :param CRC:
        :type CRC:
        :param DLC:
        :type DLC:
        :param IBS:
        :type IBS:
        :param IFS:
        :type IFS:
        :param length:
        :type length:
        :param parity:
        :type parity:
        :param UART:
        :type UART:
        """
        return self._dllwrap.ConfigureCXPISearchError(self._vi, searchName, CRC, DLC, IBS, IFS, length, parity, UART)

    def QueryCXPISearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryCXPISearchFrameCount(self._vi, searchName)

    def QueryCXPISearchFrameStatus(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryCXPISearchFrameStatus(self._vi, searchName, frame)

    def QueryCXPISearchFrameDLCField(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryCXPISearchFrameDLCField(self._vi, searchName, frame)

    def QueryCXPISearchFrameDataBytes(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryCXPISearchFrameDataBytes(self._vi, searchName, frame, bufferSize)

    def QueryCXPISearchFrameWordStatus(self, searchName, frame, word):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param word:
        :type word:
        """
        return self._dllwrap.QueryCXPISearchFrameWordStatus(self._vi, searchName, frame, word)

    def ConfigureDDR(self, serialBus, type, source, threshold, hysteresis):
        """

        :param serialBus:
        :type serialBus:
        :param type:
        :type type:
        :param source:
        :type source:
        :param threshold:
        :type threshold:
        :param hysteresis:
        :type hysteresis:
        """
        return self._dllwrap.ConfigureDDR(self._vi, serialBus, type, source, threshold, hysteresis)

    def QueryDDRFrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.QueryDDRFrameCount(self._vi, serialBus)

    def QueryDDRFrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDDRFrameStatus(self._vi, serialBus, frame)

    def QueryDDRFrameNumberOfWords(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDDRFrameNumberOfWords(self._vi, serialBus, frame)

    def QueryDDRFrameFieldStatus(self, serialBus, frame, field, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryDDRFrameFieldStatus(self._vi, serialBus, frame, field, bufferSize)

    def ConfigureDDREyeDiagramDisplay(self, eyeDiagram, maxSlicesPerAcquisition, stripeDisplayMode):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param maxSlicesPerAcquisition:
        :type maxSlicesPerAcquisition:
        :param stripeDisplayMode:
        :type stripeDisplayMode:
        """
        return self._dllwrap.ConfigureDDREyeDiagramDisplay(
            self._vi, eyeDiagram, maxSlicesPerAcquisition, stripeDisplayMode
        )

    def ConfigureDDREyeDiagramEnabled(self, eyeDiagram, enabled):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDDREyeDiagramEnabled(self._vi, eyeDiagram, enabled)

    def ConfigureDDREyeDiagramSource(self, eyeDiagram, source):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureDDREyeDiagramSource(self._vi, eyeDiagram, source)

    def ConfigureDDREyeDiagramBitRate(self, eyeDiagram, bitRate):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param bitRate:
        :type bitRate:
        """
        return self._dllwrap.ConfigureDDREyeDiagramBitRate(self._vi, eyeDiagram, bitRate)

    def ConfigureDDREyeDiagramTimingReference(self, eyeDiagram, timingReferenceSource, slope, level):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param timingReferenceSource:
        :type timingReferenceSource:
        :param slope:
        :type slope:
        :param level:
        :type level:
        """
        return self._dllwrap.ConfigureDDREyeDiagramTimingReference(
            self._vi, eyeDiagram, timingReferenceSource, slope, level
        )

    def ConfigureDDREyeDiagramHorizontalSettings(
        self,
        eyeDiagram,
        timeSettings,
        timeRange,
        timePosition,
        bitRate,
        rangeUI,
        positionUI,
    ):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param timeSettings:
        :type timeSettings:
        :param timeRange:
        :type timeRange:
        :param timePosition:
        :type timePosition:
        :param bitRate:
        :type bitRate:
        :param rangeUI:
        :type rangeUI:
        :param positionUI:
        :type positionUI:
        """
        return self._dllwrap.ConfigureDDREyeDiagramHorizontalSettings(
            self._vi,
            eyeDiagram,
            timeSettings,
            timeRange,
            timePosition,
            bitRate,
            rangeUI,
            positionUI,
        )

    def ConfigureDDREyeDiagramGate(self, eyeDiagram, enabled, couplingMode, mode, start, stop, cursor, diagram, zoom):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param enabled:
        :type enabled:
        :param couplingMode:
        :type couplingMode:
        :param mode:
        :type mode:
        :param start:
        :type start:
        :param stop:
        :type stop:
        :param cursor:
        :type cursor:
        :param diagram:
        :type diagram:
        :param zoom:
        :type zoom:
        """
        return self._dllwrap.ConfigureDDREyeDiagramGate(
            self._vi,
            eyeDiagram,
            enabled,
            couplingMode,
            mode,
            start,
            stop,
            cursor,
            diagram,
            zoom,
        )

    def ConfigureDDREyeDiagramSignal(self, eyeDiagram, enabled, source, condition, verticalReferenceLevel):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param enabled:
        :type enabled:
        :param source:
        :type source:
        :param condition:
        :type condition:
        :param verticalReferenceLevel:
        :type verticalReferenceLevel:
        """
        return self._dllwrap.ConfigureDDREyeDiagramSignal(
            self._vi, eyeDiagram, enabled, source, condition, verticalReferenceLevel
        )

    def ConfigureDDREyeDiagramFilterEnabled(self, eyeDiagram, enabled):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDDREyeDiagramFilterEnabled(self._vi, eyeDiagram, enabled)

    def ConfigureDDREyeDiagramFilterReset(self, eyeDiagram):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        """
        return self._dllwrap.ConfigureDDREyeDiagramFilterReset(self._vi, eyeDiagram)

    def ConfigureDDREyeDiagramFilterBitSequenceMode(self, eyeDiagram, mode):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param mode:
        :type mode:
        """
        return self._dllwrap.ConfigureDDREyeDiagramFilterBitSequenceMode(self._vi, eyeDiagram, mode)

    def ConfigureDDREyeDiagramFilterPatternPrefixBit(self, eyeDiagram, bit, bitValue):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param bit:
        :type bit:
        :param bitValue:
        :type bitValue:
        """
        return self._dllwrap.ConfigureDDREyeDiagramFilterPatternPrefixBit(self._vi, eyeDiagram, bit, bitValue)

    def ConfigureDDREyeDiagramFilterPatternCenterBit(self, eyeDiagram, bitValue):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param bitValue:
        :type bitValue:
        """
        return self._dllwrap.ConfigureDDREyeDiagramFilterPatternCenterBit(self._vi, eyeDiagram, bitValue)

    def ConfigureDDREyeDiagramFilterPatternSuffixBit(self, eyeDiagram, bit, bitValue):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param bit:
        :type bit:
        :param bitValue:
        :type bitValue:
        """
        return self._dllwrap.ConfigureDDREyeDiagramFilterPatternSuffixBit(self._vi, eyeDiagram, bit, bitValue)

    def ConfigureDDREyeDiagramFilterPatternShiftBit(self, eyeDiagram, shift):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param shift:
        :type shift:
        """
        return self._dllwrap.ConfigureDDREyeDiagramFilterPatternShiftBit(self._vi, eyeDiagram, shift)

    def ConfigureDDREyeDiagramFilterFrameType(self, eyeDiagram, frameType):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param frameType:
        :type frameType:
        """
        return self._dllwrap.ConfigureDDREyeDiagramFilterFrameType(self._vi, eyeDiagram, frameType)

    def ConfigureDDREyeDiagramFilterLengthErrors(self, eyeDiagram, lengthErrorsEnabled):
        """

        :param eyeDiagram:
        :type eyeDiagram:
        :param lengthErrorsEnabled:
        :type lengthErrorsEnabled:
        """
        return self._dllwrap.ConfigureDDREyeDiagramFilterLengthErrors(self._vi, eyeDiagram, lengthErrorsEnabled)

    def ConfigureDDREyeDiagramMaskTestsSlices(self):
        """"""
        return self._dllwrap.ConfigureDDREyeDiagramMaskTestsSlices(self._vi)

    def ConfigureDDREyeDiagramMaskTestsViolation(self, violation):
        """

        :param violation:
        :type violation:
        """
        return self._dllwrap.ConfigureDDREyeDiagramMaskTestsViolation(self._vi, violation)

    def ConfigureDDRSearchErrorTypeNameEnabled(self, searchName, errorName, enabled):
        """

        :param searchName:
        :type searchName:
        :param errorName:
        :type errorName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDDRSearchErrorTypeNameEnabled(self._vi, searchName, errorName, enabled)

    def ConfigureDDRSearchErrorTypeNumericEnabled(self, errorNumber, searchName, enabled):
        """

        :param errorNumber:
        :type errorNumber:
        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDDRSearchErrorTypeNumericEnabled(self._vi, errorNumber, searchName, enabled)

    def ConfigureDDRSearchFrameTypeNameEnabled(self, searchName, frame, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDDRSearchFrameTypeNameEnabled(self._vi, searchName, frame, enabled)

    def ConfigureDDRSearchFrameTypeNumericEnabled(self, frameNumber, searchName, enabled):
        """

        :param frameNumber:
        :type frameNumber:
        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDDRSearchFrameTypeNumericEnabled(self._vi, frameNumber, searchName, enabled)

    def ConfigureDDRSearchFrameFieldNameEnabled(self, searchName, frame, field, enabled):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDDRSearchFrameFieldNameEnabled(self._vi, searchName, frame, field, enabled)

    def ConfigureDDRSearchFrameFieldNumericEnabled(self, frame, field, searchName, enabled):
        """

        :param frame:
        :type frame:
        :param field:
        :type field:
        :param searchName:
        :type searchName:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDDRSearchFrameFieldNumericEnabled(self._vi, frame, field, searchName, enabled)

    def ConfigureDDRSearchFrameFieldNameData(self, searchName, frame, field, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureDDRSearchFrameFieldNameData(
            self._vi, searchName, frame, field, condition, min, max
        )

    def ConfigureDDRSearchFrameFieldNameIndex(self, searchName, frame, field, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureDDRSearchFrameFieldNameIndex(
            self._vi, searchName, frame, field, condition, min, max
        )

    def ConfigureDDRSearchFrameFieldNumericData(self, frame, field, searchName, condition, min, max):
        """

        :param frame:
        :type frame:
        :param field:
        :type field:
        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureDDRSearchFrameFieldNumericData(
            self._vi, frame, field, searchName, condition, min, max
        )

    def ConfigureDDRSearchFrameFieldNumericIndex(self, frame, field, searchName, condition, min, max):
        """

        :param frame:
        :type frame:
        :param field:
        :type field:
        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.ConfigureDDRSearchFrameFieldNumericIndex(
            self._vi, frame, field, searchName, condition, min, max
        )

    def QueryDDRSearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.QueryDDRSearchFrameCount(self._vi, searchName)

    def QueryDDRSearchFrameStatus(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDDRSearchFrameStatus(self._vi, searchName, frame)

    def QueryDDRSearchFrameNumberOfWords(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.QueryDDRSearchFrameNumberOfWords(self._vi, searchName, frame)

    def QueryDDRSearchFrameFieldStatus(self, searchName, frame, field, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param field:
        :type field:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryDDRSearchFrameFieldStatus(self._vi, searchName, frame, field, bufferSize)

    def Configure100BASET1(self, serialBus, attenuation, polarity, threshold, mode, symbolRate):
        """

        :param serialBus:
        :type serialBus:
        :param attenuation:
        :type attenuation:
        :param polarity:
        :type polarity:
        :param threshold:
        :type threshold:
        :param mode:
        :type mode:
        :param symbolRate:
        :type symbolRate:
        """
        return self._dllwrap.Configure100BASET1(self._vi, serialBus, attenuation, polarity, threshold, mode, symbolRate)

    def Configure100BASET1Source(self, serialBus, direction, positiveSource, negativeSource, differentialSource):
        """

        :param serialBus:
        :type serialBus:
        :param direction:
        :type direction:
        :param positiveSource:
        :type positiveSource:
        :param negativeSource:
        :type negativeSource:
        :param differentialSource:
        :type differentialSource:
        """
        return self._dllwrap.Configure100BASET1Source(
            self._vi,
            serialBus,
            direction,
            positiveSource,
            negativeSource,
            differentialSource,
        )

    def Configure100BASET1SignalType(self, serialBus, direction, type):
        """

        :param serialBus:
        :type serialBus:
        :param direction:
        :type direction:
        :param type:
        :type type:
        """
        return self._dllwrap.Configure100BASET1SignalType(self._vi, serialBus, direction, type)

    def Configure100BASET1TriggerType(self, trigger, triggerType):
        """

        :param trigger:
        :type trigger:
        :param triggerType:
        :type triggerType:
        """
        return self._dllwrap.Configure100BASET1TriggerType(self._vi, trigger, triggerType)

    def Configure100BASET1TriggerDestinationAddress(self, trigger, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.Configure100BASET1TriggerDestinationAddress(self._vi, trigger, condition, min, max)

    def Configure100BASET1TriggerSourceAddress(self, trigger, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.Configure100BASET1TriggerSourceAddress(self._vi, trigger, condition, min, max)

    def Configure100BASET1TriggerTypeLength(self, trigger, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.Configure100BASET1TriggerTypeLength(self._vi, trigger, condition, min, max)

    def Configure100BASET1TriggerCRC(self, trigger, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.Configure100BASET1TriggerCRC(self._vi, trigger, condition, min, max)

    def Configure100BASET1TriggerData(self, trigger, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.Configure100BASET1TriggerData(self._vi, trigger, condition, min, max)

    def Configure100BASET1TriggerIndex(self, trigger, condition, min, max):
        """

        :param trigger:
        :type trigger:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.Configure100BASET1TriggerIndex(self._vi, trigger, condition, min, max)

    def Configure100BASET1TriggerError(self, trigger, preamble, CRC, SFD):
        """

        :param trigger:
        :type trigger:
        :param preamble:
        :type preamble:
        :param CRC:
        :type CRC:
        :param SFD:
        :type SFD:
        """
        return self._dllwrap.Configure100BASET1TriggerError(self._vi, trigger, preamble, CRC, SFD)

    def Query100BASET1FrameCount(self, serialBus):
        """

        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.Query100BASET1FrameCount(self._vi, serialBus)

    def Query100BASET1FrameStatus(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.Query100BASET1FrameStatus(self._vi, serialBus, frame)

    def Query100BASET1FrameAddress(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.Query100BASET1FrameAddress(self._vi, serialBus, frame, bufferSize)

    def Query100BASET1FrameCRC(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.Query100BASET1FrameCRC(self._vi, serialBus, frame)

    def Query100BASET1FrameType(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.Query100BASET1FrameType(self._vi, serialBus, frame)

    def Query100BASET1FrameLabel(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.Query100BASET1FrameLabel(self._vi, serialBus, frame, bufferSize)

    def Query100BASET1FrameBitRate(self, frame, serialBus):
        """

        :param frame:
        :type frame:
        :param serialBus:
        :type serialBus:
        """
        return self._dllwrap.Query100BASET1FrameBitRate(self._vi, frame, serialBus)

    def Query100BASET1FrameDataBytes(self, serialBus, frame, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.Query100BASET1FrameDataBytes(self._vi, serialBus, frame, bufferSize)

    def Query100BASET1FrameNumberOfWords(self, serialBus, frame):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        """
        return self._dllwrap.Query100BASET1FrameNumberOfWords(self._vi, serialBus, frame)

    def Query100BASET1FrameWordStatus(self, serialBus, frame, word, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.Query100BASET1FrameWordStatus(self._vi, serialBus, frame, word, bufferSize)

    def Query100BASET1FrameWordStringValue(self, serialBus, frame, word, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param frame:
        :type frame:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.Query100BASET1FrameWordStringValue(self._vi, serialBus, frame, word, bufferSize)

    def Configure100BASET1SearchType(self, searchName, triggerType):
        """

        :param searchName:
        :type searchName:
        :param triggerType:
        :type triggerType:
        """
        return self._dllwrap.Configure100BASET1SearchType(self._vi, searchName, triggerType)

    def Configure100BASET1SearchDestinationAddress(self, searchName, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.Configure100BASET1SearchDestinationAddress(self._vi, searchName, condition, min, max)

    def Configure100BASET1SearchSourceAddress(self, searchName, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.Configure100BASET1SearchSourceAddress(self._vi, searchName, condition, min, max)

    def Configure100BASET1SearchTypeLength(self, searchName, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.Configure100BASET1SearchTypeLength(self._vi, searchName, condition, min, max)

    def Configure100BASET1SearchCRC(self, searchName, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.Configure100BASET1SearchCRC(self._vi, searchName, condition, min, max)

    def Configure100BASET1SearchData(self, searchName, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.Configure100BASET1SearchData(self._vi, searchName, condition, min, max)

    def Configure100BASET1SearchIndex(self, searchName, condition, min, max):
        """

        :param searchName:
        :type searchName:
        :param condition:
        :type condition:
        :param min:
        :type min:
        :param max:
        :type max:
        """
        return self._dllwrap.Configure100BASET1SearchIndex(self._vi, searchName, condition, min, max)

    def Configure100BASET1SearchError(self, searchName, preamble, CRC, SFD):
        """

        :param searchName:
        :type searchName:
        :param preamble:
        :type preamble:
        :param CRC:
        :type CRC:
        :param SFD:
        :type SFD:
        """
        return self._dllwrap.Configure100BASET1SearchError(self._vi, searchName, preamble, CRC, SFD)

    def Query100BASET1SearchFrameCount(self, searchName):
        """

        :param searchName:
        :type searchName:
        """
        return self._dllwrap.Query100BASET1SearchFrameCount(self._vi, searchName)

    def Query100BASET1SearchFrameStatus(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.Query100BASET1SearchFrameStatus(self._vi, searchName, frame)

    def Query100BASET1SearchFrameAddress(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.Query100BASET1SearchFrameAddress(self._vi, searchName, frame, bufferSize)

    def Query100BASET1SearchFrameCRC(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.Query100BASET1SearchFrameCRC(self._vi, searchName, frame)

    def Query100BASET1SearchFrameType(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.Query100BASET1SearchFrameType(self._vi, searchName, frame)

    def Query100BASET1SearchFrameLabel(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.Query100BASET1SearchFrameLabel(self._vi, searchName, frame, bufferSize)

    def Query100BASET1SearchFrameDataBytes(self, searchName, frame, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.Query100BASET1SearchFrameDataBytes(self._vi, searchName, frame, bufferSize)

    def Query100BASET1SearchFrameNumberOfWords(self, searchName, frame):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        """
        return self._dllwrap.Query100BASET1SearchFrameNumberOfWords(self._vi, searchName, frame)

    def Query100BASET1SearchFrameWordStatus(self, searchName, frame, word, bufferSize):
        """

        :param searchName:
        :type searchName:
        :param frame:
        :type frame:
        :param word:
        :type word:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.Query100BASET1SearchFrameWordStatus(self._vi, searchName, frame, word, bufferSize)

    def HardcopySetFileName(self, name):
        """

        :param name:
        :type name:
        """
        return self._dllwrap.HardcopySetFileName(self._vi, name)

    def ConfigureHardcopyDevice(self, device, destination, color, pageOrientation):
        """

        :param device:
        :type device:
        :param destination:
        :type destination:
        :param color:
        :type color:
        :param pageOrientation:
        :type pageOrientation:
        """
        return self._dllwrap.ConfigureHardcopyDevice(self._vi, device, destination, color, pageOrientation)

    def ConfigureHardcopyWhiteBackground(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureHardcopyWhiteBackground(self._vi, state)

    def ConfigureHardcopyInverseColors(self, device, inverseColors):
        """

        :param device:
        :type device:
        :param inverseColors:
        :type inverseColors:
        """
        return self._dllwrap.ConfigureHardcopyInverseColors(self._vi, device, inverseColors)

    def ConfigureHardcopyPrintColorSet(self, device, colorSet):
        """

        :param device:
        :type device:
        :param colorSet:
        :type colorSet:
        """
        return self._dllwrap.ConfigureHardcopyPrintColorSet(self._vi, device, colorSet)

    def HardcopyPrint(self):
        """"""
        return self._dllwrap.HardcopyPrint(self._vi)

    def HardcopyPrintNext(self):
        """"""
        return self._dllwrap.HardcopyPrintNext(self._vi)

    def HardcopyGetPrinterList(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.HardcopyGetPrinterList(self._vi, bufferSize)

    def HardcopySetPrinter(self, device, printerName):
        """

        :param device:
        :type device:
        :param printerName:
        :type printerName:
        """
        return self._dllwrap.HardcopySetPrinter(self._vi, device, printerName)

    def FirmwareShutdown(self):
        """"""
        return self._dllwrap.FirmwareShutdown(self._vi)

    def ConfigureComputerName(self, computerName):
        """

        :param computerName:
        :type computerName:
        """
        return self._dllwrap.ConfigureComputerName(self._vi, computerName)

    def QueryInstrumentInformation(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryInstrumentInformation(self._vi, bufferSize)

    def StartSelftest(self):
        """"""
        return self._dllwrap.StartSelftest(self._vi)

    def SelftestStatus(self):
        """"""
        return self._dllwrap.SelftestStatus(self._vi)

    def ConfigureExternalApplication(self, name, parameter, workingDirectory):
        """

        :param name:
        :type name:
        :param parameter:
        :type parameter:
        :param workingDirectory:
        :type workingDirectory:
        """
        return self._dllwrap.ConfigureExternalApplication(self._vi, name, parameter, workingDirectory)

    def ConfigureQuickAction(self, mode, name, parameter, workingDirectory):
        """

        :param mode:
        :type mode:
        :param name:
        :type name:
        :param parameter:
        :type parameter:
        :param workingDirectory:
        :type workingDirectory:
        """
        return self._dllwrap.ConfigureQuickAction(self._vi, mode, name, parameter, workingDirectory)

    def ExecuteQuickAction(self):
        """"""
        return self._dllwrap.ExecuteQuickAction(self._vi)

    def ConfigureRemoteTraceState(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureRemoteTraceState(self._vi, enabled)

    def ConfigureRemoteTraceStartMode(self, startMode):
        """

        :param startMode:
        :type startMode:
        """
        return self._dllwrap.ConfigureRemoteTraceStartMode(self._vi, startMode)

    def ConfigureRemoteTraceStopMode(self, stopMode):
        """

        :param stopMode:
        :type stopMode:
        """
        return self._dllwrap.ConfigureRemoteTraceStopMode(self._vi, stopMode)

    def ConfigureRemoteTraceFile(self, fileName, format, maximumFileSize):
        """

        :param fileName:
        :type fileName:
        :param format:
        :type format:
        :param maximumFileSize:
        :type maximumFileSize:
        """
        return self._dllwrap.ConfigureRemoteTraceFile(self._vi, fileName, format, maximumFileSize)

    def ConfigureRemoteTraceFileContent(
        self,
        input,
        output,
        error,
        trigger,
        deviceClear,
        statusRegister,
        connection,
        remoteLocalEvents,
        locking,
    ):
        """

        :param input:
        :type input:
        :param output:
        :type output:
        :param error:
        :type error:
        :param trigger:
        :type trigger:
        :param deviceClear:
        :type deviceClear:
        :param statusRegister:
        :type statusRegister:
        :param connection:
        :type connection:
        :param remoteLocalEvents:
        :type remoteLocalEvents:
        :param locking:
        :type locking:
        """
        return self._dllwrap.ConfigureRemoteTraceFileContent(
            self._vi,
            input,
            output,
            error,
            trigger,
            deviceClear,
            statusRegister,
            connection,
            remoteLocalEvents,
            locking,
        )

    def ConfigureRemoteTraceDiagnostic(
        self,
        commandExecutionDuration,
        RPCOutput,
        parserTransitionsOutput,
        functionNamesOutput,
    ):
        """

        :param commandExecutionDuration:
        :type commandExecutionDuration:
        :param RPCOutput:
        :type RPCOutput:
        :param parserTransitionsOutput:
        :type parserTransitionsOutput:
        :param functionNamesOutput:
        :type functionNamesOutput:
        """
        return self._dllwrap.ConfigureRemoteTraceDiagnostic(
            self._vi,
            commandExecutionDuration,
            RPCOutput,
            parserTransitionsOutput,
            functionNamesOutput,
        )

    def SetAttributeViInt32(self, channelName, attributeID, attributeValue):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        :param attributeValue:
        :type attributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attributeID, attributeValue)

    def SetAttributeViInt64(self, channelName, attributeID, attributeValue):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        :param attributeValue:
        :type attributeValue:
        """
        return self._dllwrap.SetAttributeViInt64(self._vi, channelName, attributeID, attributeValue)

    def SetAttributeViReal64(self, channelName, attributeID, attributeValue):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        :param attributeValue:
        :type attributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attributeID, attributeValue)

    def SetAttributeViString(self, channelName, attributeID, attributeValue):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        :param attributeValue:
        :type attributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attributeID, attributeValue)

    def SetAttributeViBoolean(self, channelName, attributeID, attributeValue):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        :param attributeValue:
        :type attributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attributeID, attributeValue)

    def SetAttributeViSession(self, channelName, attributeID, attributeValue):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        :param attributeValue:
        :type attributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attributeID, attributeValue)

    def GetAttributeViInt32(self, channelName, attributeID):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attributeID)

    def GetAttributeViInt64(self, channelName, attributeID):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        """
        return self._dllwrap.GetAttributeViInt64(self._vi, channelName, attributeID)

    def GetAttributeViReal64(self, channelName, attributeID):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attributeID)

    def GetAttributeViString(self, channelName, attributeID, bufferSize):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attributeID, bufferSize)

    def GetAttributeViBoolean(self, channelName, attributeID):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attributeID)

    def GetAttributeViSession(self, channelName, attributeID):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attributeID)

    def CheckAttributeViInt32(self, channelName, attributeID, attributeValue):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        :param attributeValue:
        :type attributeValue:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attributeID, attributeValue)

    def CheckAttributeViReal64(self, channelName, attributeID, attributeValue):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        :param attributeValue:
        :type attributeValue:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attributeID, attributeValue)

    def CheckAttributeViString(self, channelName, attributeID, attributeValue):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        :param attributeValue:
        :type attributeValue:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attributeID, attributeValue)

    def CheckAttributeViBoolean(self, channelName, attributeID, attributeValue):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        :param attributeValue:
        :type attributeValue:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attributeID, attributeValue)

    def CheckAttributeViSession(self, channelName, attributeID, attributeValue):
        """

        :param channelName:
        :type channelName:
        :param attributeID:
        :type attributeID:
        :param attributeValue:
        :type attributeValue:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attributeID, attributeValue)

    def GetAttributeRepCapName(self, attributeID, repCapNameID, index, bufferSize):
        """

        :param attributeID:
        :type attributeID:
        :param repCapNameID:
        :type repCapNameID:
        :param index:
        :type index:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetAttributeRepCapName(self._vi, attributeID, repCapNameID, index, bufferSize)

    def GetAttributeRepeatedCapabilityIds(self, attributeID, bufferSize):
        """

        :param attributeID:
        :type attributeID:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetAttributeRepeatedCapabilityIds(self._vi, attributeID, bufferSize)

    def GetAttributeRepeatedCapabilityIdNames(self, attributeID, repeatedCapabilityId, bufferSize):
        """

        :param attributeID:
        :type attributeID:
        :param repeatedCapabilityId:
        :type repeatedCapabilityId:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetAttributeRepeatedCapabilityIdNames(
            self._vi, attributeID, repeatedCapabilityId, bufferSize
        )

    def ConfigureMathEnabled(self, mathNumber, mathEnabled):
        """

        :param mathNumber:
        :type mathNumber:
        :param mathEnabled:
        :type mathEnabled:
        """
        return self._dllwrap.ConfigureMathEnabled(self._vi, mathNumber, mathEnabled)

    def ConfigureMathSetup(self, mathNumber, calculationMethod, expression):
        """

        :param mathNumber:
        :type mathNumber:
        :param calculationMethod:
        :type calculationMethod:
        :param expression:
        :type expression:
        """
        return self._dllwrap.ConfigureMathSetup(self._vi, mathNumber, calculationMethod, expression)

    def ConfigureMathEnvelopeWaveformSelection(self, mathNumber, envelopeSelection):
        """

        :param mathNumber:
        :type mathNumber:
        :param envelopeSelection:
        :type envelopeSelection:
        """
        return self._dllwrap.ConfigureMathEnvelopeWaveformSelection(self._vi, mathNumber, envelopeSelection)

    def ConfigureMathVerticalRange(self, mathNumber, verticalRange):
        """

        :param mathNumber:
        :type mathNumber:
        :param verticalRange:
        :type verticalRange:
        """
        return self._dllwrap.ConfigureMathVerticalRange(self._vi, mathNumber, verticalRange)

    def ConfigureMathVerticalScale(self, mathNumber, verticalScale):
        """

        :param mathNumber:
        :type mathNumber:
        :param verticalScale:
        :type verticalScale:
        """
        return self._dllwrap.ConfigureMathVerticalScale(self._vi, mathNumber, verticalScale)

    def ConfigureMathVerticalOffset(self, mathNumber, verticalOffset):
        """

        :param mathNumber:
        :type mathNumber:
        :param verticalOffset:
        :type verticalOffset:
        """
        return self._dllwrap.ConfigureMathVerticalOffset(self._vi, mathNumber, verticalOffset)

    def MathReset(self):
        """"""
        return self._dllwrap.MathReset(self._vi)

    def ConfigureMathResetMode(self, resetMode, envelopeTimeout, acquiredWaveforms):
        """

        :param resetMode:
        :type resetMode:
        :param envelopeTimeout:
        :type envelopeTimeout:
        :param acquiredWaveforms:
        :type acquiredWaveforms:
        """
        return self._dllwrap.ConfigureMathResetMode(self._vi, resetMode, envelopeTimeout, acquiredWaveforms)

    def ConfigureFFTFrequencyAxis(self, mathNumber, frequencyAxis):
        """

        :param mathNumber:
        :type mathNumber:
        :param frequencyAxis:
        :type frequencyAxis:
        """
        return self._dllwrap.ConfigureFFTFrequencyAxis(self._vi, mathNumber, frequencyAxis)

    def ConfigureFFTFrequencyCenterSpan(self, mathNumber, centerFrequency, frequencySpan):
        """

        :param mathNumber:
        :type mathNumber:
        :param centerFrequency:
        :type centerFrequency:
        :param frequencySpan:
        :type frequencySpan:
        """
        return self._dllwrap.ConfigureFFTFrequencyCenterSpan(self._vi, mathNumber, centerFrequency, frequencySpan)

    def ConfigureFFTFrequencySpanFull(self, mathNumber):
        """

        :param mathNumber:
        :type mathNumber:
        """
        return self._dllwrap.ConfigureFFTFrequencySpanFull(self._vi, mathNumber)

    def ConfigureFFTFrequencyStartStop(self, mathNumber, startFrequency, stopFrequency):
        """

        :param mathNumber:
        :type mathNumber:
        :param startFrequency:
        :type startFrequency:
        :param stopFrequency:
        :type stopFrequency:
        """
        return self._dllwrap.ConfigureFFTFrequencyStartStop(self._vi, mathNumber, startFrequency, stopFrequency)

    def ConfigureFFTResolutionBandwidth(self, mathNumber, RBWAndSpanCouplingEnabled, RBWRatio, resolutionBandwidth):
        """

        :param mathNumber:
        :type mathNumber:
        :param RBWAndSpanCouplingEnabled:
        :type RBWAndSpanCouplingEnabled:
        :param RBWRatio:
        :type RBWRatio:
        :param resolutionBandwidth:
        :type resolutionBandwidth:
        """
        return self._dllwrap.ConfigureFFTResolutionBandwidth(
            self._vi, mathNumber, RBWAndSpanCouplingEnabled, RBWRatio, resolutionBandwidth
        )

    def QueryFFTAdjustedResolutionBandwidth(self, mathNumber):
        """

        :param mathNumber:
        :type mathNumber:
        """
        return self._dllwrap.QueryFFTAdjustedResolutionBandwidth(self._vi, mathNumber)

    def ConfigureFFTWindowType(self, mathNumber, windowType):
        """

        :param mathNumber:
        :type mathNumber:
        :param windowType:
        :type windowType:
        """
        return self._dllwrap.ConfigureFFTWindowType(self._vi, mathNumber, windowType)

    def ConfigureFFTFrameSetup(self, mathNumber, arithmetic, overlapFactor, maxFrameCount):
        """

        :param mathNumber:
        :type mathNumber:
        :param arithmetic:
        :type arithmetic:
        :param overlapFactor:
        :type overlapFactor:
        :param maxFrameCount:
        :type maxFrameCount:
        """
        return self._dllwrap.ConfigureFFTFrameSetup(self._vi, mathNumber, arithmetic, overlapFactor, maxFrameCount)

    def QueryFFTFrameCoverage(self, mathNumber):
        """

        :param mathNumber:
        :type mathNumber:
        """
        return self._dllwrap.QueryFFTFrameCoverage(self._vi, mathNumber)

    def ConfigureFFTUseColorTable(self, mathNumber, useColorTable):
        """

        :param mathNumber:
        :type mathNumber:
        :param useColorTable:
        :type useColorTable:
        """
        return self._dllwrap.ConfigureFFTUseColorTable(self._vi, mathNumber, useColorTable)

    def ConfigureFFTMagnitude(self, mathNumber, magnitudeUnit, referenceLevel, magnitudeRange):
        """

        :param mathNumber:
        :type mathNumber:
        :param magnitudeUnit:
        :type magnitudeUnit:
        :param referenceLevel:
        :type referenceLevel:
        :param magnitudeRange:
        :type magnitudeRange:
        """
        return self._dllwrap.ConfigureFFTMagnitude(self._vi, mathNumber, magnitudeUnit, referenceLevel, magnitudeRange)

    def ConfigureFFTPhase(
        self,
        mathNumber,
        phaseUnit,
        phaseUnwrapEnabled,
        suppressionEnabled,
        suppressionThreshold,
    ):
        """

        :param mathNumber:
        :type mathNumber:
        :param phaseUnit:
        :type phaseUnit:
        :param phaseUnwrapEnabled:
        :type phaseUnwrapEnabled:
        :param suppressionEnabled:
        :type suppressionEnabled:
        :param suppressionThreshold:
        :type suppressionThreshold:
        """
        return self._dllwrap.ConfigureFFTPhase(
            self._vi,
            mathNumber,
            phaseUnit,
            phaseUnwrapEnabled,
            suppressionEnabled,
            suppressionThreshold,
        )

    def ConfigureFFTGateState(self, mathNumber, useGate):
        """

        :param mathNumber:
        :type mathNumber:
        :param useGate:
        :type useGate:
        """
        return self._dllwrap.ConfigureFFTGateState(self._vi, mathNumber, useGate)

    def ConfigureFFTGateShow(self, mathNumber, showGate):
        """

        :param mathNumber:
        :type mathNumber:
        :param showGate:
        :type showGate:
        """
        return self._dllwrap.ConfigureFFTGateShow(self._vi, mathNumber, showGate)

    def ConfigureFFTGateDefinitionZoom(self, mathNumber, zoomCoupling, reserved):
        """

        :param mathNumber:
        :type mathNumber:
        :param zoomCoupling:
        :type zoomCoupling:
        :param reserved:
        :type reserved:
        """
        return self._dllwrap.ConfigureFFTGateDefinitionZoom(self._vi, mathNumber, zoomCoupling, reserved)

    def ConfigureFFTGateDefinitionStartStop(self, mathNumber, mode, start, stop):
        """

        :param mathNumber:
        :type mathNumber:
        :param mode:
        :type mode:
        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.ConfigureFFTGateDefinitionStartStop(self._vi, mathNumber, mode, start, stop)

    def ConfigureFFTGateRecordLengthRBWCoupling(self, mathNumber, coupling):
        """

        :param mathNumber:
        :type mathNumber:
        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureFFTGateRecordLengthRBWCoupling(self._vi, mathNumber, coupling)

    def QueryFFTGateRequiredAcquisitionTime(self):
        """"""
        return self._dllwrap.QueryFFTGateRequiredAcquisitionTime(self._vi)

    def ConfigureFFTCoupledSpectrum(self, mathNumber, mathNumber2, coupledSpectrum):
        """

        :param mathNumber:
        :type mathNumber:
        :param mathNumber2:
        :type mathNumber2:
        :param coupledSpectrum:
        :type coupledSpectrum:
        """
        return self._dllwrap.ConfigureFFTCoupledSpectrum(self._vi, mathNumber, mathNumber2, coupledSpectrum)

    def ConfigureFFTSpectrumEnabled(self, mathNumber, enabled):
        """

        :param mathNumber:
        :type mathNumber:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureFFTSpectrumEnabled(self._vi, mathNumber, enabled)

    def ConfigureFFTSpectrumColorTableMode(self, mathNumber, colorTableMode):
        """

        :param mathNumber:
        :type mathNumber:
        :param colorTableMode:
        :type colorTableMode:
        """
        return self._dllwrap.ConfigureFFTSpectrumColorTableMode(self._vi, mathNumber, colorTableMode)

    def ConfigureFFTSpectrumTimeLine(self, mathNumber, timeLine, enabled, position):
        """

        :param mathNumber:
        :type mathNumber:
        :param timeLine:
        :type timeLine:
        :param enabled:
        :type enabled:
        :param position:
        :type position:
        """
        return self._dllwrap.ConfigureFFTSpectrumTimeLine(self._vi, mathNumber, timeLine, enabled, position)

    def ConfigureReferenceWaveformSource(self, referenceNumber, source):
        """

        :param referenceNumber:
        :type referenceNumber:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureReferenceWaveformSource(self._vi, referenceNumber, source)

    def UpdateReferenceWaveformWithSelectedSource(self, referenceNumber):
        """

        :param referenceNumber:
        :type referenceNumber:
        """
        return self._dllwrap.UpdateReferenceWaveformWithSelectedSource(self._vi, referenceNumber)

    def ConfigureReferenceWaveformDisplayState(self, referenceNumber, displayEnabled):
        """

        :param referenceNumber:
        :type referenceNumber:
        :param displayEnabled:
        :type displayEnabled:
        """
        return self._dllwrap.ConfigureReferenceWaveformDisplayState(self._vi, referenceNumber, displayEnabled)

    def ClearReferenceWaveform(self, referenceNumber):
        """

        :param referenceNumber:
        :type referenceNumber:
        """
        return self._dllwrap.ClearReferenceWaveform(self._vi, referenceNumber)

    def ReferenceWaveformFileOperations(self, referenceNumber, waveformName, operation):
        """

        :param referenceNumber:
        :type referenceNumber:
        :param waveformName:
        :type waveformName:
        :param operation:
        :type operation:
        """
        return self._dllwrap.ReferenceWaveformFileOperations(self._vi, referenceNumber, waveformName, operation)

    def ConfigureReferenceWaveformVerticalScaling(
        self, referenceNumber, verticalCoupling, verticalScale, verticalPosition
    ):
        """

        :param referenceNumber:
        :type referenceNumber:
        :param verticalCoupling:
        :type verticalCoupling:
        :param verticalScale:
        :type verticalScale:
        :param verticalPosition:
        :type verticalPosition:
        """
        return self._dllwrap.ConfigureReferenceWaveformVerticalScaling(
            self._vi, referenceNumber, verticalCoupling, verticalScale, verticalPosition
        )

    def ReferenceWaveformVerticalScalingSetToOriginal(self, referenceNumber):
        """

        :param referenceNumber:
        :type referenceNumber:
        """
        return self._dllwrap.ReferenceWaveformVerticalScalingSetToOriginal(self._vi, referenceNumber)

    def ConfigureReferenceWaveformVerticalStretching(self, referenceNumber, verticalStretchingEnabled, factor, offset):
        """

        :param referenceNumber:
        :type referenceNumber:
        :param verticalStretchingEnabled:
        :type verticalStretchingEnabled:
        :param factor:
        :type factor:
        :param offset:
        :type offset:
        """
        return self._dllwrap.ConfigureReferenceWaveformVerticalStretching(
            self._vi, referenceNumber, verticalStretchingEnabled, factor, offset
        )

    def ResetReferenceWaveformVerticalSettings(self, referenceNumber):
        """

        :param referenceNumber:
        :type referenceNumber:
        """
        return self._dllwrap.ResetReferenceWaveformVerticalSettings(self._vi, referenceNumber)

    def ConfigureReferenceWaveformHorizontalScaling(self, referenceNumber, horizontalCoupling):
        """

        :param referenceNumber:
        :type referenceNumber:
        :param horizontalCoupling:
        :type horizontalCoupling:
        """
        return self._dllwrap.ConfigureReferenceWaveformHorizontalScaling(self._vi, referenceNumber, horizontalCoupling)

    def ConfigureReferenceWaveformHorizontalStretching(
        self, referenceNumber, horizontalStretchingEnabled, factor, offset
    ):
        """

        :param referenceNumber:
        :type referenceNumber:
        :param horizontalStretchingEnabled:
        :type horizontalStretchingEnabled:
        :param factor:
        :type factor:
        :param offset:
        :type offset:
        """
        return self._dllwrap.ConfigureReferenceWaveformHorizontalStretching(
            self._vi, referenceNumber, horizontalStretchingEnabled, factor, offset
        )

    def ConfigureReferenceMultiwaveformName(self, name):
        """

        :param name:
        :type name:
        """
        return self._dllwrap.ConfigureReferenceMultiwaveformName(self._vi, name)

    def ConfigureReferenceMultiwaveformImport(self, Import):
        """

        :param Import:
        :type Import:
        """
        return self._dllwrap.ConfigureReferenceMultiwaveformImport(self._vi, Import)

    def OpenReferenceMultiwaveform(self):
        """"""
        return self._dllwrap.OpenReferenceMultiwaveform(self._vi)

    def ReadWaveform(self, channel, waveform, waveformSize, maximumTime):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param waveformSize:
        :type waveformSize:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadWaveform(self._vi, channel, waveform, waveformSize, maximumTime)

    def ReadMathWaveform(self, mathNumber, waveformSize, maximumTime):
        """

        :param mathNumber:
        :type mathNumber:
        :param waveformSize:
        :type waveformSize:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadMathWaveform(self._vi, mathNumber, waveformSize, maximumTime)

    def ReadMainWaveformMeasurement(self, measurement, statisticType, maximumTime):
        """

        :param measurement:
        :type measurement:
        :param statisticType:
        :type statisticType:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadMainWaveformMeasurement(self._vi, measurement, statisticType, maximumTime)

    def ReadAmplitudeTimeWaveformMeasurement(self, measurement, measurementFunction, statisticType, maximumTime):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param statisticType:
        :type statisticType:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadAmplitudeTimeWaveformMeasurement(
            self._vi, measurement, measurementFunction, statisticType, maximumTime
        )

    def ReadStartStopAmplitudeTimeWaveformMeasurement(self, measurement, measurementFunction, maximumTime):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadStartStopAmplitudeTimeWaveformMeasurement(
            self._vi, measurement, measurementFunction, maximumTime
        )

    def ReadEyeJitterWaveformMeasurement(self, measurement, measurementFunction, statisticType, maximumTime):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param statisticType:
        :type statisticType:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadEyeJitterWaveformMeasurement(
            self._vi, measurement, measurementFunction, statisticType, maximumTime
        )

    def ReadStartStopEyeJitterWaveformMeasurement(self, measurement, measurementFunction, maximumTime):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadStartStopEyeJitterWaveformMeasurement(
            self._vi, measurement, measurementFunction, maximumTime
        )

    def ReadHistogramWaveformMeasurement(self, measurement, measurementFunction, statisticType, maximumTime):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param statisticType:
        :type statisticType:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadHistogramWaveformMeasurement(
            self._vi, measurement, measurementFunction, statisticType, maximumTime
        )

    def ReadStartStopHistogramWaveformMeasurement(self, measurement, measurementFunction, maximumTime):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadStartStopHistogramWaveformMeasurement(
            self._vi, measurement, measurementFunction, maximumTime
        )

    def ReadSpectrumWaveformMeasurement(self, measurement, measurementFunction, statisticType, maximumTime):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param statisticType:
        :type statisticType:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadSpectrumWaveformMeasurement(
            self._vi, measurement, measurementFunction, statisticType, maximumTime
        )

    def ReadStartStopSpectrumWaveformMeasurement(self, measurement, measurementFunction, maximumTime):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadStartStopSpectrumWaveformMeasurement(
            self._vi, measurement, measurementFunction, maximumTime
        )

    def ReadJitterWaveformMeasurement(self, measurement, measurementFunction, statisticType, maximumTime):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param statisticType:
        :type statisticType:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadJitterWaveformMeasurement(
            self._vi, measurement, measurementFunction, statisticType, maximumTime
        )

    def ReadStartStopJitterWaveformMeasurement(self, measurement, measurementFunction, maximumTime):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadStartStopJitterWaveformMeasurement(
            self._vi, measurement, measurementFunction, maximumTime
        )

    def ReadReferenceLevelResult(self, measurement, levelType):
        """

        :param measurement:
        :type measurement:
        :param levelType:
        :type levelType:
        """
        return self._dllwrap.ReadReferenceLevelResult(self._vi, measurement, levelType)

    def InitiateAcquisition(self, action):
        """

        :param action:
        :type action:
        """
        return self._dllwrap.InitiateAcquisition(self._vi, action)

    def IsMeasurementComplete(self):
        """"""
        return self._dllwrap.IsMeasurementComplete(self._vi)

    def WaitForMeasurementComplete(self, timeout):
        """

        :param timeout:
        :type timeout:
        """
        return self._dllwrap.WaitForMeasurementComplete(self._vi, timeout)

    def IsWaitingForTrigger(self):
        """"""
        return self._dllwrap.IsWaitingForTrigger(self._vi)

    def SendSoftwareTrigger(self, maximumTime):
        """

        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.SendSoftwareTrigger(self._vi, maximumTime)

    def FetchWaveform(self, channel, waveform, waveformSize):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchWaveform(self._vi, channel, waveform, waveformSize)

    def FetchWaveformHeader(self, channel, waveform, bufferSize):
        """

        :param channel:
        :type channel:
        :param waveform:
        :type waveform:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.FetchWaveformHeader(self._vi, channel, waveform, bufferSize)

    def FetchMathWaveform(self, mathNumber, waveformSize):
        """

        :param mathNumber:
        :type mathNumber:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchMathWaveform(self._vi, mathNumber, waveformSize)

    def FetchMathWaveformHeader(self, mathNumber, bufferSize):
        """

        :param mathNumber:
        :type mathNumber:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.FetchMathWaveformHeader(self._vi, mathNumber, bufferSize)

    def FetchReferenceWaveform(self, waveformSize):
        """

        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchReferenceWaveform(self._vi, waveformSize)

    def FetchReferenceWaveformHeader(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.FetchReferenceWaveformHeader(self._vi, bufferSize)

    def QueryReferenceWaveformSignalType(self, referenceNumber):
        """

        :param referenceNumber:
        :type referenceNumber:
        """
        return self._dllwrap.QueryReferenceWaveformSignalType(self._vi, referenceNumber)

    def FetchMainWaveformMeasurement(self, measurement, statisticType):
        """

        :param measurement:
        :type measurement:
        :param statisticType:
        :type statisticType:
        """
        return self._dllwrap.FetchMainWaveformMeasurement(self._vi, measurement, statisticType)

    def FetchAmplitudeTimeWaveformMeasurement(self, measurement, measurementFunction, statisticType):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param statisticType:
        :type statisticType:
        """
        return self._dllwrap.FetchAmplitudeTimeWaveformMeasurement(
            self._vi, measurement, measurementFunction, statisticType
        )

    def FetchStartStopAmplitudeTimeWaveformMeasurement(self, measurement, measurementFunction):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.FetchStartStopAmplitudeTimeWaveformMeasurement(self._vi, measurement, measurementFunction)

    def FetchEyeJitterWaveformMeasurement(self, measurement, measurementFunction, statisticType):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param statisticType:
        :type statisticType:
        """
        return self._dllwrap.FetchEyeJitterWaveformMeasurement(
            self._vi, measurement, measurementFunction, statisticType
        )

    def FetchStartStopEyeJitterWaveformMeasurement(self, measurement, measurementFunction):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.FetchStartStopEyeJitterWaveformMeasurement(self._vi, measurement, measurementFunction)

    def FetchHistogramWaveformMeasurement(self, measurement, measurementFunction, statisticType):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param statisticType:
        :type statisticType:
        """
        return self._dllwrap.FetchHistogramWaveformMeasurement(
            self._vi, measurement, measurementFunction, statisticType
        )

    def FetchStartStopHistogramWaveformMeasurement(self, measurement, measurementFunction):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.FetchStartStopHistogramWaveformMeasurement(self._vi, measurement, measurementFunction)

    def FetchSpectrumWaveformMeasurement(self, measurement, measurementFunction, statisticType):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param statisticType:
        :type statisticType:
        """
        return self._dllwrap.FetchSpectrumWaveformMeasurement(self._vi, measurement, measurementFunction, statisticType)

    def FetchSpectrumHarmonicsResultsNumber(self, measurement):
        """

        :param measurement:
        :type measurement:
        """
        return self._dllwrap.FetchSpectrumHarmonicsResultsNumber(self._vi, measurement)

    def FetchStartStopSpectrumWaveformMeasurement(self, measurement, measurementFunction):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.FetchStartStopSpectrumWaveformMeasurement(self._vi, measurement, measurementFunction)

    def FetchJitterWaveformMeasurement(self, measurement, measurementFunction, statisticType):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        :param statisticType:
        :type statisticType:
        """
        return self._dllwrap.FetchJitterWaveformMeasurement(self._vi, measurement, measurementFunction, statisticType)

    def FetchStartStopJitterWaveformMeasurement(self, measurement, measurementFunction):
        """

        :param measurement:
        :type measurement:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.FetchStartStopJitterWaveformMeasurement(self._vi, measurement, measurementFunction)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def ConfigurePowerAnalysisMode(self):
        """"""
        return self._dllwrap.ConfigurePowerAnalysisMode(self._vi)

    def ConfigurePowerAnalysisCurrentSource(self, sourceNumber, channel):
        """

        :param sourceNumber:
        :type sourceNumber:
        :param channel:
        :type channel:
        """
        return self._dllwrap.ConfigurePowerAnalysisCurrentSource(self._vi, sourceNumber, channel)

    def ConfigurePowerAnalysisVoltageSource(self, sourceNumber, channel):
        """

        :param sourceNumber:
        :type sourceNumber:
        :param channel:
        :type channel:
        """
        return self._dllwrap.ConfigurePowerAnalysisVoltageSource(self._vi, sourceNumber, channel)

    def StartPowerAnalysisDeskew(self, maximumTime):
        """

        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.StartPowerAnalysisDeskew(self._vi, maximumTime)

    def ResetPowerAnalysisSkew(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.ResetPowerAnalysisSkew(self._vi, state)

    def UserDefinedPowerAnalysisSkew(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.UserDefinedPowerAnalysisSkew(self._vi, state)

    def PowerAnalysisProbeMode(self, channel, mode):
        """

        :param channel:
        :type channel:
        :param mode:
        :type mode:
        """
        return self._dllwrap.PowerAnalysisProbeMode(self._vi, channel, mode)

    def QueryPowerAnalysisAutoDeskewValue(self):
        """"""
        return self._dllwrap.QueryPowerAnalysisAutoDeskewValue(self._vi)

    def PowerAnalysisAutoDeskewToOffset(self):
        """"""
        return self._dllwrap.PowerAnalysisAutoDeskewToOffset(self._vi)

    def PowerAnalysisReportManagement(self, operation, measurement, index):
        """

        :param operation:
        :type operation:
        :param measurement:
        :type measurement:
        :param index:
        :type index:
        """
        return self._dllwrap.PowerAnalysisReportManagement(self._vi, operation, measurement, index)

    def PowerAnalysisReportLSend(self, measurement):
        """

        :param measurement:
        :type measurement:
        """
        return self._dllwrap.PowerAnalysisReportLSend(self._vi, measurement)

    def PowerAnalysisReportComment(self, measurement, comment):
        """

        :param measurement:
        :type measurement:
        :param comment:
        :type comment:
        """
        return self._dllwrap.PowerAnalysisReportComment(self._vi, measurement, comment)

    def PowerAnalysisReportSelection(self, operation, measurement):
        """

        :param operation:
        :type operation:
        :param measurement:
        :type measurement:
        """
        return self._dllwrap.PowerAnalysisReportSelection(self._vi, operation, measurement)

    def PowerAnalysisReportDirectory(self, measurement, directory):
        """

        :param measurement:
        :type measurement:
        :param directory:
        :type directory:
        """
        return self._dllwrap.PowerAnalysisReportDirectory(self._vi, measurement, directory)

    def PowerAnalysisReportFileManagement(self, operation, fileName):
        """

        :param operation:
        :type operation:
        :param fileName:
        :type fileName:
        """
        return self._dllwrap.PowerAnalysisReportFileManagement(self._vi, operation, fileName)

    def PowerAnalysisReportDUT(self, DUTName, user, site, temperature, description):
        """

        :param DUTName:
        :type DUTName:
        :param user:
        :type user:
        :param site:
        :type site:
        :param temperature:
        :type temperature:
        :param description:
        :type description:
        """
        return self._dllwrap.PowerAnalysisReportDUT(self._vi, DUTName, user, site, temperature, description)

    def PowerAnalysisReportLayout(self, paperSize, font, fontSize, colorFont, logo, invertScreenshotColors):
        """

        :param paperSize:
        :type paperSize:
        :param font:
        :type font:
        :param fontSize:
        :type fontSize:
        :param colorFont:
        :type colorFont:
        :param logo:
        :type logo:
        :param invertScreenshotColors:
        :type invertScreenshotColors:
        """
        return self._dllwrap.PowerAnalysisReportLayout(
            self._vi, paperSize, font, fontSize, colorFont, logo, invertScreenshotColors
        )

    def PowerAnalysisReportContent(
        self,
        title,
        measurementSetup,
        settings,
        verticalSetup,
        triggerSetup,
        horizontalSetup,
        measuredSignals,
        results,
    ):
        """

        :param title:
        :type title:
        :param measurementSetup:
        :type measurementSetup:
        :param settings:
        :type settings:
        :param verticalSetup:
        :type verticalSetup:
        :param triggerSetup:
        :type triggerSetup:
        :param horizontalSetup:
        :type horizontalSetup:
        :param measuredSignals:
        :type measuredSignals:
        :param results:
        :type results:
        """
        return self._dllwrap.PowerAnalysisReportContent(
            self._vi,
            title,
            measurementSetup,
            settings,
            verticalSetup,
            triggerSetup,
            horizontalSetup,
            measuredSignals,
            results,
        )

    def GetPowerAnalysisReportCount(self, measurement):
        """

        :param measurement:
        :type measurement:
        """
        return self._dllwrap.GetPowerAnalysisReportCount(self._vi, measurement)

    def StartPowerQualityMeasurement(self):
        """"""
        return self._dllwrap.StartPowerQualityMeasurement(self._vi)

    def PowerQualityInputFrequency(self, frequency):
        """

        :param frequency:
        :type frequency:
        """
        return self._dllwrap.PowerQualityInputFrequency(self._vi, frequency)

    def PowerQualityCustomFrequency(self, customFrequency):
        """

        :param customFrequency:
        :type customFrequency:
        """
        return self._dllwrap.PowerQualityCustomFrequency(self._vi, customFrequency)

    def PowerQualityScaling(self, scaling):
        """

        :param scaling:
        :type scaling:
        """
        return self._dllwrap.PowerQualityScaling(self._vi, scaling)

    def PowerQualityAddToReport(self):
        """"""
        return self._dllwrap.PowerQualityAddToReport(self._vi)

    def QueryPowerQualityMeasurementVoltageResult(self, type):
        """

        :param type:
        :type type:
        """
        return self._dllwrap.QueryPowerQualityMeasurementVoltageResult(self._vi, type)

    def QueryPowerQualityMeasurementCurrentResult(self, type):
        """

        :param type:
        :type type:
        """
        return self._dllwrap.QueryPowerQualityMeasurementCurrentResult(self._vi, type)

    def QueryPowerQualityMeasurementPowerResult(self, type):
        """

        :param type:
        :type type:
        """
        return self._dllwrap.QueryPowerQualityMeasurementPowerResult(self._vi, type)

    def StartPowerCurrentHarmonicsMeasurement(self):
        """"""
        return self._dllwrap.StartPowerCurrentHarmonicsMeasurement(self._vi)

    def PowerCurrentHarmonicsSettings(self, standard, frequency, scaling):
        """

        :param standard:
        :type standard:
        :param frequency:
        :type frequency:
        :param scaling:
        :type scaling:
        """
        return self._dllwrap.PowerCurrentHarmonicsSettings(self._vi, standard, frequency, scaling)

    def PowerCurrentHarmonicsEvaluation(self, revisedCurrent, voltageResultDisplay):
        """

        :param revisedCurrent:
        :type revisedCurrent:
        :param voltageResultDisplay:
        :type voltageResultDisplay:
        """
        return self._dllwrap.PowerCurrentHarmonicsEvaluation(self._vi, revisedCurrent, voltageResultDisplay)

    def PowerCurrentHarmonicAddToReport(self):
        """"""
        return self._dllwrap.PowerCurrentHarmonicAddToReport(self._vi)

    def QueryPowerCurrentHarmonicsUsedStandard(self, resultNumber):
        """

        :param resultNumber:
        :type resultNumber:
        """
        return self._dllwrap.QueryPowerCurrentHarmonicsUsedStandard(self._vi, resultNumber)

    def QueryPowerCurrentHarmonicsResult(self, type, resultNumber, harmonic):
        """

        :param type:
        :type type:
        :param resultNumber:
        :type resultNumber:
        :param harmonic:
        :type harmonic:
        """
        return self._dllwrap.QueryPowerCurrentHarmonicsResult(self._vi, type, resultNumber, harmonic)

    def StartPowerInrushCurrentMeasurement(self):
        """"""
        return self._dllwrap.StartPowerInrushCurrentMeasurement(self._vi)

    def PowerInrushCurrentSettings(self, maxCurrent, trigger):
        """

        :param maxCurrent:
        :type maxCurrent:
        :param trigger:
        :type trigger:
        """
        return self._dllwrap.PowerInrushCurrentSettings(self._vi, maxCurrent, trigger)

    def PowerInrushCurrentGateSettings(self, gate, start, stop):
        """

        :param gate:
        :type gate:
        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.PowerInrushCurrentGateSettings(self._vi, gate, start, stop)

    def PowerInrushCurrentGateValue(self, gate, numValue):
        """

        :param gate:
        :type gate:
        :param numValue:
        :type numValue:
        """
        return self._dllwrap.PowerInrushCurrentGateValue(self._vi, gate, numValue)

    def PowerInrushCurrentGateManagement(self, operation, gateIndex):
        """

        :param operation:
        :type operation:
        :param gateIndex:
        :type gateIndex:
        """
        return self._dllwrap.PowerInrushCurrentGateManagement(self._vi, operation, gateIndex)

    def PowerInrushCurrentGateAddToReport(self):
        """"""
        return self._dllwrap.PowerInrushCurrentGateAddToReport(self._vi)

    def QueryInrushCurrentGateCount(self):
        """"""
        return self._dllwrap.QueryInrushCurrentGateCount(self._vi)

    def QueryPowerInrushCurrentMeasurementResult(self, gateNumber):
        """

        :param gateNumber:
        :type gateNumber:
        """
        return self._dllwrap.QueryPowerInrushCurrentMeasurementResult(self._vi, gateNumber)

    def StartPowerRippleMeasurement(self):
        """"""
        return self._dllwrap.StartPowerRippleMeasurement(self._vi)

    def PowerRippleCurrent(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.PowerRippleCurrent(self._vi, state)

    def PowerRippleSettings(self, frequency, scaling):
        """

        :param frequency:
        :type frequency:
        :param scaling:
        :type scaling:
        """
        return self._dllwrap.PowerRippleSettings(self._vi, frequency, scaling)

    def PowerRippleAddToReport(self):
        """"""
        return self._dllwrap.PowerRippleAddToReport(self._vi)

    def QueryPowerRippleMeasurementResult(self, statistics, measType):
        """

        :param statistics:
        :type statistics:
        :param measType:
        :type measType:
        """
        return self._dllwrap.QueryPowerRippleMeasurementResult(self._vi, statistics, measType)

    def QueryPowerRippleMeasureResult(self, statistics, rippleType, measType):
        """

        :param statistics:
        :type statistics:
        :param rippleType:
        :type rippleType:
        :param measType:
        :type measType:
        """
        return self._dllwrap.QueryPowerRippleMeasureResult(self._vi, statistics, rippleType, measType)

    def StartPowerSpectrumMeasurement(self):
        """"""
        return self._dllwrap.StartPowerSpectrumMeasurement(self._vi)

    def PowerSpectrumSettings(self, frequency, scaling):
        """

        :param frequency:
        :type frequency:
        :param scaling:
        :type scaling:
        """
        return self._dllwrap.PowerSpectrumSettings(self._vi, frequency, scaling)

    def PowerSpectrumAddToReport(self):
        """"""
        return self._dllwrap.PowerSpectrumAddToReport(self._vi)

    def QueryPowerSpectrumMeasurementResult(self, resultNumber, type):
        """

        :param resultNumber:
        :type resultNumber:
        :param type:
        :type type:
        """
        return self._dllwrap.QueryPowerSpectrumMeasurementResult(self._vi, resultNumber, type)

    def QueryPowerSpectrumHarmonicsCount(self):
        """"""
        return self._dllwrap.QueryPowerSpectrumHarmonicsCount(self._vi)

    def StartPowerSlewRateMeasurement(self):
        """"""
        return self._dllwrap.StartPowerSlewRateMeasurement(self._vi)

    def PowerSlewRateSettings(self, source, average, scaling):
        """

        :param source:
        :type source:
        :param average:
        :type average:
        :param scaling:
        :type scaling:
        """
        return self._dllwrap.PowerSlewRateSettings(self._vi, source, average, scaling)

    def PowerSlewRateAddToReport(self):
        """"""
        return self._dllwrap.PowerSlewRateAddToReport(self._vi)

    def PowerSlewRateGateSettings(self, start, stop):
        """

        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.PowerSlewRateGateSettings(self._vi, start, stop)

    def QueryPowerSlewRateMeasurementResult(self, statistics, type):
        """

        :param statistics:
        :type statistics:
        :param type:
        :type type:
        """
        return self._dllwrap.QueryPowerSlewRateMeasurementResult(self._vi, statistics, type)

    def StartPowerSafeOperatingAreaMeasurement(self):
        """"""
        return self._dllwrap.StartPowerSafeOperatingAreaMeasurement(self._vi)

    def PowerSafeOperatingAreaSettings(self, maskTest, scale):
        """

        :param maskTest:
        :type maskTest:
        :param scale:
        :type scale:
        """
        return self._dllwrap.PowerSafeOperatingAreaSettings(self._vi, maskTest, scale)

    def PowerSafeOperatingAreaSwitch(self, scale):
        """

        :param scale:
        :type scale:
        """
        return self._dllwrap.PowerSafeOperatingAreaSwitch(self._vi, scale)

    def PowerSafeOperatingAreaLinPointManagement(self, operation, pointNumber):
        """

        :param operation:
        :type operation:
        :param pointNumber:
        :type pointNumber:
        """
        return self._dllwrap.PowerSafeOperatingAreaLinPointManagement(self._vi, operation, pointNumber)

    def PowerSafeOperatingAreaLinPointValue(self, pointNumber, valueType, pointValue):
        """

        :param pointNumber:
        :type pointNumber:
        :param valueType:
        :type valueType:
        :param pointValue:
        :type pointValue:
        """
        return self._dllwrap.PowerSafeOperatingAreaLinPointValue(self._vi, pointNumber, valueType, pointValue)

    def PowerSafeOperatingAreaLogPointManagement(self, operation, pointNumber):
        """

        :param operation:
        :type operation:
        :param pointNumber:
        :type pointNumber:
        """
        return self._dllwrap.PowerSafeOperatingAreaLogPointManagement(self._vi, operation, pointNumber)

    def PowerSafeOperatingAreaLogPointValue(self, pointNumber, valueType, pointValue):
        """

        :param pointNumber:
        :type pointNumber:
        :param valueType:
        :type valueType:
        :param pointValue:
        :type pointValue:
        """
        return self._dllwrap.PowerSafeOperatingAreaLogPointValue(self._vi, pointNumber, valueType, pointValue)

    def PowerSafeOperatingAreaAddToReport(self):
        """"""
        return self._dllwrap.PowerSafeOperatingAreaAddToReport(self._vi)

    def QueryPowerSafeOperatingAreaLinCount(self):
        """"""
        return self._dllwrap.QueryPowerSafeOperatingAreaLinCount(self._vi)

    def QueryPowerSafeOperatingAreaLogCount(self):
        """"""
        return self._dllwrap.QueryPowerSafeOperatingAreaLogCount(self._vi)

    def StartPowerModulationMeasurement(self):
        """"""
        return self._dllwrap.StartPowerModulationMeasurement(self._vi)

    def PowerModulationSettings(self, source, type, displayHistogram, scaling):
        """

        :param source:
        :type source:
        :param type:
        :type type:
        :param displayHistogram:
        :type displayHistogram:
        :param scaling:
        :type scaling:
        """
        return self._dllwrap.PowerModulationSettings(self._vi, source, type, displayHistogram, scaling)

    def PowerModulationAddToReport(self):
        """"""
        return self._dllwrap.PowerModulationAddToReport(self._vi)

    def QueryPowerModulationMeasurementResult(self, statistics, type):
        """

        :param statistics:
        :type statistics:
        :param type:
        :type type:
        """
        return self._dllwrap.QueryPowerModulationMeasurementResult(self._vi, statistics, type)

    def StartPowerDynamicOnResistanceMeasurement(self):
        """"""
        return self._dllwrap.StartPowerDynamicOnResistanceMeasurement(self._vi)

    def PowerDynamicOnResistanceSettings(self, average, scaling):
        """

        :param average:
        :type average:
        :param scaling:
        :type scaling:
        """
        return self._dllwrap.PowerDynamicOnResistanceSettings(self._vi, average, scaling)

    def PowerDynamicOnResistanceAddToReport(self):
        """"""
        return self._dllwrap.PowerDynamicOnResistanceAddToReport(self._vi)

    def PowerDynamicOnResistanceGateSettings(self, gate, start, stop):
        """

        :param gate:
        :type gate:
        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.PowerDynamicOnResistanceGateSettings(self._vi, gate, start, stop)

    def QueryPowerDynamicOnResistanceMeasurementResult(self):
        """"""
        return self._dllwrap.QueryPowerDynamicOnResistanceMeasurementResult(self._vi)

    def StartPowerEfficiencyMeasurement(self):
        """"""
        return self._dllwrap.StartPowerEfficiencyMeasurement(self._vi)

    def PowerEfficiencyScaling(self, scaling):
        """

        :param scaling:
        :type scaling:
        """
        return self._dllwrap.PowerEfficiencyScaling(self._vi, scaling)

    def PowerEfficiencyAddToReport(self):
        """"""
        return self._dllwrap.PowerEfficiencyAddToReport(self._vi)

    def QueryPowerEfficiencyMeasurementResult(self, resultNumber, statistics):
        """

        :param resultNumber:
        :type resultNumber:
        :param statistics:
        :type statistics:
        """
        return self._dllwrap.QueryPowerEfficiencyMeasurementResult(self._vi, resultNumber, statistics)

    def StartPowerSwitchinglossMeasurement(self):
        """"""
        return self._dllwrap.StartPowerSwitchinglossMeasurement(self._vi)

    def PowerSwitchinglossSettings(
        self,
        switchingFrequency,
        turnOn,
        conduction,
        turnOff,
        nonConduction,
        total,
        scaling,
    ):
        """

        :param switchingFrequency:
        :type switchingFrequency:
        :param turnOn:
        :type turnOn:
        :param conduction:
        :type conduction:
        :param turnOff:
        :type turnOff:
        :param nonConduction:
        :type nonConduction:
        :param total:
        :type total:
        :param scaling:
        :type scaling:
        """
        return self._dllwrap.PowerSwitchinglossSettings(
            self._vi,
            switchingFrequency,
            turnOn,
            conduction,
            turnOff,
            nonConduction,
            total,
            scaling,
        )

    def PowerSwitchinglossFrequency(self, switchingFrequency):
        """

        :param switchingFrequency:
        :type switchingFrequency:
        """
        return self._dllwrap.PowerSwitchinglossFrequency(self._vi, switchingFrequency)

    def PowerSwitchinglossGateSettings(self, period, start, stop):
        """

        :param period:
        :type period:
        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.PowerSwitchinglossGateSettings(self._vi, period, start, stop)

    def PowerSwitchinglossAddToReport(self):
        """"""
        return self._dllwrap.PowerSwitchinglossAddToReport(self._vi)

    def QueryPowerSwitchinglossEnergyResult(self, statistics, type):
        """

        :param statistics:
        :type statistics:
        :param type:
        :type type:
        """
        return self._dllwrap.QueryPowerSwitchinglossEnergyResult(self._vi, statistics, type)

    def QueryPowerSwitchinglossPowerResult(self, statistics, type):
        """

        :param statistics:
        :type statistics:
        :param type:
        :type type:
        """
        return self._dllwrap.QueryPowerSwitchinglossPowerResult(self._vi, statistics, type)

    def StartPowerOnOffMeasurement(self):
        """"""
        return self._dllwrap.StartPowerOnOffMeasurement(self._vi)

    def PowerOnOffInputType(self, input):
        """

        :param input:
        :type input:
        """
        return self._dllwrap.PowerOnOffInputType(self._vi, input)

    def PowerOnOffSettings(self, type, reserved, triggerLevel, steadyStateLevel, time):
        """

        :param type:
        :type type:
        :param reserved:
        :type reserved:
        :param triggerLevel:
        :type triggerLevel:
        :param steadyStateLevel:
        :type steadyStateLevel:
        :param time:
        :type time:
        """
        return self._dllwrap.PowerOnOffSettings(self._vi, type, reserved, triggerLevel, steadyStateLevel, time)

    def PowerOnOffDCLevel(self, type, triggerLevel):
        """

        :param type:
        :type type:
        :param triggerLevel:
        :type triggerLevel:
        """
        return self._dllwrap.PowerOnOffDCLevel(self._vi, type, triggerLevel)

    def PowerOnOffAddToReport(self):
        """"""
        return self._dllwrap.PowerOnOffAddToReport(self._vi)

    def QueryPowerOnOffMeasurementResult(self, type):
        """

        :param type:
        :type type:
        """
        return self._dllwrap.QueryPowerOnOffMeasurementResult(self._vi, type)

    def StartPowerTransientResponseMeasurement(self):
        """"""
        return self._dllwrap.StartPowerTransientResponseMeasurement(self._vi)

    def TransientResponseInputVoltage(self, inputVoltage):
        """

        :param inputVoltage:
        :type inputVoltage:
        """
        return self._dllwrap.TransientResponseInputVoltage(self._vi, inputVoltage)

    def TransientResponseTrigger(self, source, level, edgeTriggerSlope):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param edgeTriggerSlope:
        :type edgeTriggerSlope:
        """
        return self._dllwrap.TransientResponseTrigger(self._vi, source, level, edgeTriggerSlope)

    def TransientResponseSettings(self, frequency, scaling, tubeTolerance, signalHigh, signalLow):
        """

        :param frequency:
        :type frequency:
        :param scaling:
        :type scaling:
        :param tubeTolerance:
        :type tubeTolerance:
        :param signalHigh:
        :type signalHigh:
        :param signalLow:
        :type signalLow:
        """
        return self._dllwrap.TransientResponseSettings(
            self._vi, frequency, scaling, tubeTolerance, signalHigh, signalLow
        )

    def TransientResponseAddToReport(self):
        """"""
        return self._dllwrap.TransientResponseAddToReport(self._vi)

    def QueryPowerTransientResponseResult(self, type):
        """

        :param type:
        :type type:
        """
        return self._dllwrap.QueryPowerTransientResponseResult(self._vi, type)

    def ConfigureDeembeddingEnabled(self, channel, enabled):
        """

        :param channel:
        :type channel:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDeembeddingEnabled(self._vi, channel, enabled)

    def ConfigureDeembeddingEffectiveBandwidth(self, channel, effectiveBandwidth):
        """

        :param channel:
        :type channel:
        :param effectiveBandwidth:
        :type effectiveBandwidth:
        """
        return self._dllwrap.ConfigureDeembeddingEffectiveBandwidth(self._vi, channel, effectiveBandwidth)

    def ConfigureDeembeddingDelayCompensation(self, channel, compensation):
        """

        :param channel:
        :type channel:
        :param compensation:
        :type compensation:
        """
        return self._dllwrap.ConfigureDeembeddingDelayCompensation(self._vi, channel, compensation)

    def ConfigureDeembeddingAddComponent(self, channel, index, type):
        """

        :param channel:
        :type channel:
        :param index:
        :type index:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureDeembeddingAddComponent(self._vi, channel, index, type)

    def ConfigureDeembeddingRemoveComponent(self, channel, component):
        """

        :param channel:
        :type channel:
        :param component:
        :type component:
        """
        return self._dllwrap.ConfigureDeembeddingRemoveComponent(self._vi, channel, component)

    def QueryDeembeddingComponentCount(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.QueryDeembeddingComponentCount(self._vi, channel)

    def ConfigureDeembeddingFile(self, channel, fileName, action):
        """

        :param channel:
        :type channel:
        :param fileName:
        :type fileName:
        :param action:
        :type action:
        """
        return self._dllwrap.ConfigureDeembeddingFile(self._vi, channel, fileName, action)

    def ConfigureDeembeddingPreset(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.ConfigureDeembeddingPreset(self._vi, channel)

    def ConfigureDeembeddingComponentEnabled(self, channel, component, enabled):
        """

        :param channel:
        :type channel:
        :param component:
        :type component:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDeembeddingComponentEnabled(self._vi, channel, component, enabled)

    def ConfigureDeembeddingComponentType(self, channel, component, type, name):
        """

        :param channel:
        :type channel:
        :param component:
        :type component:
        :param type:
        :type type:
        :param name:
        :type name:
        """
        return self._dllwrap.ConfigureDeembeddingComponentType(self._vi, channel, component, type, name)

    def QueryDeembeddingComponentPortCount(self, channel, component):
        """

        :param channel:
        :type channel:
        :param component:
        :type component:
        """
        return self._dllwrap.QueryDeembeddingComponentPortCount(self._vi, channel, component)

    def ConfigureDeembeddingComponentMode(self, channel, component, mode):
        """

        :param channel:
        :type channel:
        :param component:
        :type component:
        :param mode:
        :type mode:
        """
        return self._dllwrap.ConfigureDeembeddingComponentMode(self._vi, channel, component, mode)

    def ConfigureDeembeddingComponentRemoveProbeLoading(self, channel, component, loading):
        """

        :param channel:
        :type channel:
        :param component:
        :type component:
        :param loading:
        :type loading:
        """
        return self._dllwrap.ConfigureDeembeddingComponentRemoveProbeLoading(self._vi, channel, component, loading)

    def ConfigureDeembeddingComponentImpedance(self, channel, component, impedanceType, impedance):
        """

        :param channel:
        :type channel:
        :param component:
        :type component:
        :param impedanceType:
        :type impedanceType:
        :param impedance:
        :type impedance:
        """
        return self._dllwrap.ConfigureDeembeddingComponentImpedance(
            self._vi, channel, component, impedanceType, impedance
        )

    def ConfigureDeembeddingComponentLoadSParameterFile(self, channel, component, fileName):
        """

        :param channel:
        :type channel:
        :param component:
        :type component:
        :param fileName:
        :type fileName:
        """
        return self._dllwrap.ConfigureDeembeddingComponentLoadSParameterFile(self._vi, channel, component, fileName)

    def ConfigureDeembeddingComponentIdenticalPaths(self, channel, component, identicalPaths):
        """

        :param channel:
        :type channel:
        :param component:
        :type component:
        :param identicalPaths:
        :type identicalPaths:
        """
        return self._dllwrap.ConfigureDeembeddingComponentIdenticalPaths(self._vi, channel, component, identicalPaths)

    def ConfigureDeembeddingComponentInputPorts(self, channel, component, port1, port2):
        """

        :param channel:
        :type channel:
        :param component:
        :type component:
        :param port1:
        :type port1:
        :param port2:
        :type port2:
        """
        return self._dllwrap.ConfigureDeembeddingComponentInputPorts(self._vi, channel, component, port1, port2)

    def ConfigureDeembeddingComponentOutputPorts(self, channel, component, port1, port2):
        """

        :param channel:
        :type channel:
        :param component:
        :type component:
        :param port1:
        :type port1:
        :param port2:
        :type port2:
        """
        return self._dllwrap.ConfigureDeembeddingComponentOutputPorts(self._vi, channel, component, port1, port2)

    def ConfigureDeembeddingComponentLoadSParameterFilePort(self, channel, component, port, fileName):
        """

        :param channel:
        :type channel:
        :param component:
        :type component:
        :param port:
        :type port:
        :param fileName:
        :type fileName:
        """
        return self._dllwrap.ConfigureDeembeddingComponentLoadSParameterFilePort(
            self._vi, channel, component, port, fileName
        )

    def QueryDeembeddingAttenuation(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.QueryDeembeddingAttenuation(self._vi, channel)

    def QueryDeembeddingMaxGain(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.QueryDeembeddingMaxGain(self._vi, channel)

    def ConfigureMSOBusState(self, bus, state):
        """

        :param bus:
        :type bus:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureMSOBusState(self._vi, bus, state)

    def ConfigureMSOVisualization(self, bus, showDigitalSignals, showBus, busRepresentation):
        """

        :param bus:
        :type bus:
        :param showDigitalSignals:
        :type showDigitalSignals:
        :param showBus:
        :type showBus:
        :param busRepresentation:
        :type busRepresentation:
        """
        return self._dllwrap.ConfigureMSOVisualization(self._vi, bus, showDigitalSignals, showBus, busRepresentation)

    def ConfigureMSOClockedBusState(self, bus, enableClockedBus):
        """

        :param bus:
        :type bus:
        :param enableClockedBus:
        :type enableClockedBus:
        """
        return self._dllwrap.ConfigureMSOClockedBusState(self._vi, bus, enableClockedBus)

    def ConfigureMSOClockedBus(self, bus, clockSource):
        """

        :param bus:
        :type bus:
        :param clockSource:
        :type clockSource:
        """
        return self._dllwrap.ConfigureMSOClockedBus(self._vi, bus, clockSource)

    def ConfigureMSOClockedBusSlope(self, bus, clockSlope):
        """

        :param bus:
        :type bus:
        :param clockSlope:
        :type clockSlope:
        """
        return self._dllwrap.ConfigureMSOClockedBusSlope(self._vi, bus, clockSlope)

    def ConfigureMSOAssignChannels(self, bus, digitalChannel, assignState):
        """

        :param bus:
        :type bus:
        :param digitalChannel:
        :type digitalChannel:
        :param assignState:
        :type assignState:
        """
        return self._dllwrap.ConfigureMSOAssignChannels(self._vi, bus, digitalChannel, assignState)

    def ConfigureMSOSignalSelection(self, digitalChannel, label, deskew):
        """

        :param digitalChannel:
        :type digitalChannel:
        :param label:
        :type label:
        :param deskew:
        :type deskew:
        """
        return self._dllwrap.ConfigureMSOSignalSelection(self._vi, digitalChannel, label, deskew)

    def ConfigureMSOBusSignalSelection(self, bus, digitalChannel, label, deskew):
        """

        :param bus:
        :type bus:
        :param digitalChannel:
        :type digitalChannel:
        :param label:
        :type label:
        :param deskew:
        :type deskew:
        """
        return self._dllwrap.ConfigureMSOBusSignalSelection(self._vi, bus, digitalChannel, label, deskew)

    def ConfigureMSODeskew(self, bus, deskew):
        """

        :param bus:
        :type bus:
        :param deskew:
        :type deskew:
        """
        return self._dllwrap.ConfigureMSODeskew(self._vi, bus, deskew)

    def ConfigureMSOTechnology(self, digitalChannel, technology):
        """

        :param digitalChannel:
        :type digitalChannel:
        :param technology:
        :type technology:
        """
        return self._dllwrap.ConfigureMSOTechnology(self._vi, digitalChannel, technology)

    def ConfigureMSOTresholdSetup(self, digitalChannel, treshold, hysteresis):
        """

        :param digitalChannel:
        :type digitalChannel:
        :param treshold:
        :type treshold:
        :param hysteresis:
        :type hysteresis:
        """
        return self._dllwrap.ConfigureMSOTresholdSetup(self._vi, digitalChannel, treshold, hysteresis)

    def ConfigureMSOTresholdAllChannels(self, bus, technology, channelGroup, treshold, hysteresis):
        """

        :param bus:
        :type bus:
        :param technology:
        :type technology:
        :param channelGroup:
        :type channelGroup:
        :param treshold:
        :type treshold:
        :param hysteresis:
        :type hysteresis:
        """
        return self._dllwrap.ConfigureMSOTresholdAllChannels(
            self._vi, bus, technology, channelGroup, treshold, hysteresis
        )

    def ConfigureMSOChannelCoupling(self, bus, coupling):
        """

        :param bus:
        :type bus:
        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureMSOChannelCoupling(self._vi, bus, coupling)

    def ConfigureMSODigitalChannelCoupling(self, coupling):
        """

        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureMSODigitalChannelCoupling(self._vi, coupling)

    def QueryMSODigitalResolution(self):
        """"""
        return self._dllwrap.QueryMSODigitalResolution(self._vi)

    def MSORemoveAllAssignedChannels(self, bus):
        """

        :param bus:
        :type bus:
        """
        return self._dllwrap.MSORemoveAllAssignedChannels(self._vi, bus)

    def ReadSignals(self, digitalChannel, bufferSize, maximumTime):
        """

        :param digitalChannel:
        :type digitalChannel:
        :param bufferSize:
        :type bufferSize:
        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.ReadSignals(self._vi, digitalChannel, bufferSize, maximumTime)

    def ConfigureMSODecodeTableShow(self, serialBus, decodeTable, tableEnabled):
        """

        :param serialBus:
        :type serialBus:
        :param decodeTable:
        :type decodeTable:
        :param tableEnabled:
        :type tableEnabled:
        """
        return self._dllwrap.ConfigureMSODecodeTableShow(self._vi, serialBus, decodeTable, tableEnabled)

    def ConfigureMSOTrigger(self, triggerType):
        """

        :param triggerType:
        :type triggerType:
        """
        return self._dllwrap.ConfigureMSOTrigger(self._vi, triggerType)

    def ConfigureMSOEdgeTriggerSource(self, triggerSource, triggerSlope, expression):
        """

        :param triggerSource:
        :type triggerSource:
        :param triggerSlope:
        :type triggerSlope:
        :param expression:
        :type expression:
        """
        return self._dllwrap.ConfigureMSOEdgeTriggerSource(self._vi, triggerSource, triggerSlope, expression)

    def ConfigureMSOWidthTriggerSource(
        self, triggerSource, widthPolarity, widthCondition, width, widthDelta, expression
    ):
        """

        :param triggerSource:
        :type triggerSource:
        :param widthPolarity:
        :type widthPolarity:
        :param widthCondition:
        :type widthCondition:
        :param width:
        :type width:
        :param widthDelta:
        :type widthDelta:
        :param expression:
        :type expression:
        """
        return self._dllwrap.ConfigureMSOWidthTriggerSource(
            self._vi,
            triggerSource,
            widthPolarity,
            widthCondition,
            width,
            widthDelta,
            expression,
        )

    def ConfigureMSOTimeoutTriggerSource(self, triggerSource, timeoutValue, timeoutCondition, expression):
        """

        :param triggerSource:
        :type triggerSource:
        :param timeoutValue:
        :type timeoutValue:
        :param timeoutCondition:
        :type timeoutCondition:
        :param expression:
        :type expression:
        """
        return self._dllwrap.ConfigureMSOTimeoutTriggerSource(
            self._vi, triggerSource, timeoutValue, timeoutCondition, expression
        )

    def ConfigureMSOData2ClockTriggerSource(self, triggerSource, clockSource, data2ClockPolarity, holdTime, setupTime):
        """

        :param triggerSource:
        :type triggerSource:
        :param clockSource:
        :type clockSource:
        :param data2ClockPolarity:
        :type data2ClockPolarity:
        :param holdTime:
        :type holdTime:
        :param setupTime:
        :type setupTime:
        """
        return self._dllwrap.ConfigureMSOData2ClockTriggerSource(
            self._vi, triggerSource, clockSource, data2ClockPolarity, holdTime, setupTime
        )

    def ConfigureMSOStateTriggerSource(self, triggerSource, clockSource, clockPolarity, expression):
        """

        :param triggerSource:
        :type triggerSource:
        :param clockSource:
        :type clockSource:
        :param clockPolarity:
        :type clockPolarity:
        :param expression:
        :type expression:
        """
        return self._dllwrap.ConfigureMSOStateTriggerSource(
            self._vi, triggerSource, clockSource, clockPolarity, expression
        )

    def ConfigureMSOTriggerChannelState(self, digitalChannel, triggerType, statusBit):
        """

        :param digitalChannel:
        :type digitalChannel:
        :param triggerType:
        :type triggerType:
        :param statusBit:
        :type statusBit:
        """
        return self._dllwrap.ConfigureMSOTriggerChannelState(self._vi, digitalChannel, triggerType, statusBit)

    def ConfigureMSOPatternTriggerSource(
        self,
        triggerSource,
        patternMode,
        timeoutCondition,
        timeout,
        patternWidth,
        patternDelta,
        patternCondition,
        expression,
    ):
        """

        :param triggerSource:
        :type triggerSource:
        :param patternMode:
        :type patternMode:
        :param timeoutCondition:
        :type timeoutCondition:
        :param timeout:
        :type timeout:
        :param patternWidth:
        :type patternWidth:
        :param patternDelta:
        :type patternDelta:
        :param patternCondition:
        :type patternCondition:
        :param expression:
        :type expression:
        """
        return self._dllwrap.ConfigureMSOPatternTriggerSource(
            self._vi,
            triggerSource,
            patternMode,
            timeoutCondition,
            timeout,
            patternWidth,
            patternDelta,
            patternCondition,
            expression,
        )

    def ConfigureMSOSerialPatternTriggerSource(self, triggerSource, patternPolarity, clockSource, pattern, expression):
        """

        :param triggerSource:
        :type triggerSource:
        :param patternPolarity:
        :type patternPolarity:
        :param clockSource:
        :type clockSource:
        :param pattern:
        :type pattern:
        :param expression:
        :type expression:
        """
        return self._dllwrap.ConfigureMSOSerialPatternTriggerSource(
            self._vi, triggerSource, patternPolarity, clockSource, pattern, expression
        )

    def QueryMSOBusData(self, bus, bufferSize):
        """

        :param bus:
        :type bus:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMSOBusData(self._vi, bus, bufferSize)

    def QueryMSOChannelData(self, digitalChannel, bufferSize):
        """

        :param digitalChannel:
        :type digitalChannel:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMSOChannelData(self._vi, digitalChannel, bufferSize)

    def QueryMSOBusDataHeader(self, bus):
        """

        :param bus:
        :type bus:
        """
        return self._dllwrap.QueryMSOBusDataHeader(self._vi, bus)

    def QueryMSOChannelDataHeader(self, digitalChannel):
        """

        :param digitalChannel:
        :type digitalChannel:
        """
        return self._dllwrap.QueryMSOChannelDataHeader(self._vi, digitalChannel)

    def QueryMSODecodeTable(self, serialBus, decodeTable, bufferSize):
        """

        :param serialBus:
        :type serialBus:
        :param decodeTable:
        :type decodeTable:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryMSODecodeTable(self._vi, serialBus, decodeTable, bufferSize)

    def ConfigurePulseSourceSetup(self, enabled, outputLevel, repetitionRate, dutyCycle, clockMode):
        """

        :param enabled:
        :type enabled:
        :param outputLevel:
        :type outputLevel:
        :param repetitionRate:
        :type repetitionRate:
        :param dutyCycle:
        :type dutyCycle:
        :param clockMode:
        :type clockMode:
        """
        return self._dllwrap.ConfigurePulseSourceSetup(
            self._vi, enabled, outputLevel, repetitionRate, dutyCycle, clockMode
        )

    def ResetPulseSource(self):
        """"""
        return self._dllwrap.ResetPulseSource(self._vi)

    def ConfigureTDRTDTMeasurement(self, measurementType, configuration):
        """

        :param measurementType:
        :type measurementType:
        :param configuration:
        :type configuration:
        """
        return self._dllwrap.ConfigureTDRTDTMeasurement(self._vi, measurementType, configuration)

    def ConfigureTDRTDTSingleEndedChannels(self, referenceChannel, outChannel):
        """

        :param referenceChannel:
        :type referenceChannel:
        :param outChannel:
        :type outChannel:
        """
        return self._dllwrap.ConfigureTDRTDTSingleEndedChannels(self._vi, referenceChannel, outChannel)

    def ConfigureTDRTDTDifferentialChannels(self, referenceChannel, outChannel, diffOutChannel, diffReferenceChannel):
        """

        :param referenceChannel:
        :type referenceChannel:
        :param outChannel:
        :type outChannel:
        :param diffOutChannel:
        :type diffOutChannel:
        :param diffReferenceChannel:
        :type diffReferenceChannel:
        """
        return self._dllwrap.ConfigureTDRTDTDifferentialChannels(
            self._vi, referenceChannel, outChannel, diffOutChannel, diffReferenceChannel
        )

    def MeasureTDRTDTWithDefaultValues(self):
        """"""
        return self._dllwrap.MeasureTDRTDTWithDefaultValues(self._vi)

    def ConfigureTDRTDTCalibrationLoad(self, filename):
        """

        :param filename:
        :type filename:
        """
        return self._dllwrap.ConfigureTDRTDTCalibrationLoad(self._vi, filename)

    def ConfigureTDRTDTCalibrationSave(self, filename):
        """

        :param filename:
        :type filename:
        """
        return self._dllwrap.ConfigureTDRTDTCalibrationSave(self._vi, filename)

    def ConfigureTDRTDTPulseReferenceChannel(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.ConfigureTDRTDTPulseReferenceChannel(self._vi, channel)

    def ConfigureTDRTDTShortLength(self, shortLength):
        """

        :param shortLength:
        :type shortLength:
        """
        return self._dllwrap.ConfigureTDRTDTShortLength(self._vi, shortLength)

    def ConfigureTDRTDTUseCalibration(self, enabled):
        """

        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureTDRTDTUseCalibration(self._vi, enabled)

    def ConfigureTDRTDTMeasurementParameters(self, averaging, bandwidth, domain, permittivity):
        """

        :param averaging:
        :type averaging:
        :param bandwidth:
        :type bandwidth:
        :param domain:
        :type domain:
        :param permittivity:
        :type permittivity:
        """
        return self._dllwrap.ConfigureTDRTDTMeasurementParameters(self._vi, averaging, bandwidth, domain, permittivity)

    def ConfigureTDRTDTSignal(self, signal, state, verticalScale, offset, position):
        """

        :param signal:
        :type signal:
        :param state:
        :type state:
        :param verticalScale:
        :type verticalScale:
        :param offset:
        :type offset:
        :param position:
        :type position:
        """
        return self._dllwrap.ConfigureTDRTDTSignal(self._vi, signal, state, verticalScale, offset, position)

    def FetchTDRTDTSignalWaveformHeader(self, signal):
        """

        :param signal:
        :type signal:
        """
        return self._dllwrap.FetchTDRTDTSignalWaveformHeader(self._vi, signal)

    def FetchTDRTDTSignalCompleteWaveform(self, signal, timeout, bufferLength):
        """

        :param signal:
        :type signal:
        :param timeout:
        :type timeout:
        :param bufferLength:
        :type bufferLength:
        """
        return self._dllwrap.FetchTDRTDTSignalCompleteWaveform(self._vi, signal, timeout, bufferLength)

    def FetchTDRTDTSignalPartialWaveform(self, signal, timeout, offset, bufferLength):
        """

        :param signal:
        :type signal:
        :param timeout:
        :type timeout:
        :param offset:
        :type offset:
        :param bufferLength:
        :type bufferLength:
        """
        return self._dllwrap.FetchTDRTDTSignalPartialWaveform(self._vi, signal, timeout, offset, bufferLength)

    def ConfigureWaveformGeneratorState(self, generator, enable):
        """

        :param generator:
        :type generator:
        :param enable:
        :type enable:
        """
        return self._dllwrap.ConfigureWaveformGeneratorState(self._vi, generator, enable)

    def WaveformGeneratorPreset(self, generator):
        """

        :param generator:
        :type generator:
        """
        return self._dllwrap.WaveformGeneratorPreset(self._vi, generator)

    def ConfigureWaveformGeneratorOperationMode(self, generator, operationMode):
        """

        :param generator:
        :type generator:
        :param operationMode:
        :type operationMode:
        """
        return self._dllwrap.ConfigureWaveformGeneratorOperationMode(self._vi, generator, operationMode)

    def WaveformGeneratorCopySettings(self, generator):
        """

        :param generator:
        :type generator:
        """
        return self._dllwrap.WaveformGeneratorCopySettings(self._vi, generator)

    def ConfigureWaveformGeneratorFunctionType(self, generator, functionType):
        """

        :param generator:
        :type generator:
        :param functionType:
        :type functionType:
        """
        return self._dllwrap.ConfigureWaveformGeneratorFunctionType(self._vi, generator, functionType)

    def ConfigureWaveformGeneratorFrequency(self, generator, frequency):
        """

        :param generator:
        :type generator:
        :param frequency:
        :type frequency:
        """
        return self._dllwrap.ConfigureWaveformGeneratorFrequency(self._vi, generator, frequency)

    def ConfigureWaveformGeneratorPeriod(self, generator, period):
        """

        :param generator:
        :type generator:
        :param period:
        :type period:
        """
        return self._dllwrap.ConfigureWaveformGeneratorPeriod(self._vi, generator, period)

    def ConfigureWaveformGeneratorDutyCycle(self, generator, dutyCycle):
        """

        :param generator:
        :type generator:
        :param dutyCycle:
        :type dutyCycle:
        """
        return self._dllwrap.ConfigureWaveformGeneratorDutyCycle(self._vi, generator, dutyCycle)

    def ConfigureWaveformGeneratorSymmetry(self, generator, symmetry):
        """

        :param generator:
        :type generator:
        :param symmetry:
        :type symmetry:
        """
        return self._dllwrap.ConfigureWaveformGeneratorSymmetry(self._vi, generator, symmetry)

    def ConfigureWaveformGeneratorPulseWidth(self, generator, pulseWidth):
        """

        :param generator:
        :type generator:
        :param pulseWidth:
        :type pulseWidth:
        """
        return self._dllwrap.ConfigureWaveformGeneratorPulseWidth(self._vi, generator, pulseWidth)

    def ConfigureWaveformGeneratorModulationType(self, generator, modulationType):
        """

        :param generator:
        :type generator:
        :param modulationType:
        :type modulationType:
        """
        return self._dllwrap.ConfigureWaveformGeneratorModulationType(self._vi, generator, modulationType)

    def ConfigureWaveformGeneratorCarrierFrequency(self, generator, carrierFrequency):
        """

        :param generator:
        :type generator:
        :param carrierFrequency:
        :type carrierFrequency:
        """
        return self._dllwrap.ConfigureWaveformGeneratorCarrierFrequency(self._vi, generator, carrierFrequency)

    def ConfigureWaveformGeneratorCarrierPeriod(self, generator, carrierPeriod):
        """

        :param generator:
        :type generator:
        :param carrierPeriod:
        :type carrierPeriod:
        """
        return self._dllwrap.ConfigureWaveformGeneratorCarrierPeriod(self._vi, generator, carrierPeriod)

    def ConfigureWaveformGeneratorAMModulation(self, generator, signal, frequency, depth):
        """

        :param generator:
        :type generator:
        :param signal:
        :type signal:
        :param frequency:
        :type frequency:
        :param depth:
        :type depth:
        """
        return self._dllwrap.ConfigureWaveformGeneratorAMModulation(self._vi, generator, signal, frequency, depth)

    def ConfigureWaveformGeneratorAMModulationDutyCycle(self, generator, dutyCycle):
        """

        :param generator:
        :type generator:
        :param dutyCycle:
        :type dutyCycle:
        """
        return self._dllwrap.ConfigureWaveformGeneratorAMModulationDutyCycle(self._vi, generator, dutyCycle)

    def ConfigureWaveformGeneratorAMModulationSymmetry(self, generator, symmetry):
        """

        :param generator:
        :type generator:
        :param symmetry:
        :type symmetry:
        """
        return self._dllwrap.ConfigureWaveformGeneratorAMModulationSymmetry(self._vi, generator, symmetry)

    def ConfigureWaveformGeneratorFMModulation(self, generator, signal, frequency, frequencyDeviation):
        """

        :param generator:
        :type generator:
        :param signal:
        :type signal:
        :param frequency:
        :type frequency:
        :param frequencyDeviation:
        :type frequencyDeviation:
        """
        return self._dllwrap.ConfigureWaveformGeneratorFMModulation(
            self._vi, generator, signal, frequency, frequencyDeviation
        )

    def ConfigureWaveformGeneratorFMModulationDutyCycle(self, generator, dutyCycle):
        """

        :param generator:
        :type generator:
        :param dutyCycle:
        :type dutyCycle:
        """
        return self._dllwrap.ConfigureWaveformGeneratorFMModulationDutyCycle(self._vi, generator, dutyCycle)

    def ConfigureWaveformGeneratorFMModulationSymmetry(self, generator, symmetry):
        """

        :param generator:
        :type generator:
        :param symmetry:
        :type symmetry:
        """
        return self._dllwrap.ConfigureWaveformGeneratorFMModulationSymmetry(self._vi, generator, symmetry)

    def ConfigureWaveformGeneratorPWMModulation(self, generator, signal, frequency, depth):
        """

        :param generator:
        :type generator:
        :param signal:
        :type signal:
        :param frequency:
        :type frequency:
        :param depth:
        :type depth:
        """
        return self._dllwrap.ConfigureWaveformGeneratorPWMModulation(self._vi, generator, signal, frequency, depth)

    def ConfigureWaveformGeneratorPWMModulationDutyCycle(self, generator, dutyCycle):
        """

        :param generator:
        :type generator:
        :param dutyCycle:
        :type dutyCycle:
        """
        return self._dllwrap.ConfigureWaveformGeneratorPWMModulationDutyCycle(self._vi, generator, dutyCycle)

    def ConfigureWaveformGeneratorPWMModulationSymmetry(self, generator, symmetry):
        """

        :param generator:
        :type generator:
        :param symmetry:
        :type symmetry:
        """
        return self._dllwrap.ConfigureWaveformGeneratorPWMModulationSymmetry(self._vi, generator, symmetry)

    def ConfigureWaveformGeneratorFSKModulation(self, generator, frequency1, frequency2, hopRate):
        """

        :param generator:
        :type generator:
        :param frequency1:
        :type frequency1:
        :param frequency2:
        :type frequency2:
        :param hopRate:
        :type hopRate:
        """
        return self._dllwrap.ConfigureWaveformGeneratorFSKModulation(
            self._vi, generator, frequency1, frequency2, hopRate
        )

    def ConfigureWaveformGeneratorSweep(self, generator, startFrequency, stopFrequency, sweepTime):
        """

        :param generator:
        :type generator:
        :param startFrequency:
        :type startFrequency:
        :param stopFrequency:
        :type stopFrequency:
        :param sweepTime:
        :type sweepTime:
        """
        return self._dllwrap.ConfigureWaveformGeneratorSweep(
            self._vi, generator, startFrequency, stopFrequency, sweepTime
        )

    def ConfigureWaveformGeneratorArbitrarySource(self, generator, source):
        """

        :param generator:
        :type generator:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureWaveformGeneratorArbitrarySource(self._vi, generator, source)

    def ConfigureWaveformGeneratorArbitraryRunMode(self, generator, runMode):
        """

        :param generator:
        :type generator:
        :param runMode:
        :type runMode:
        """
        return self._dllwrap.ConfigureWaveformGeneratorArbitraryRunMode(self._vi, generator, runMode)

    def ConfigureWaveformGeneratorArbitrarySampleRate(self, generator, sampleRate):
        """

        :param generator:
        :type generator:
        :param sampleRate:
        :type sampleRate:
        """
        return self._dllwrap.ConfigureWaveformGeneratorArbitrarySampleRate(self._vi, generator, sampleRate)

    def QueryWaveformGeneratorArbitrarySamples(self, generator):
        """

        :param generator:
        :type generator:
        """
        return self._dllwrap.QueryWaveformGeneratorArbitrarySamples(self._vi, generator)

    def WaveformGeneratorArbitraryOpenFile(self, generator, file):
        """

        :param generator:
        :type generator:
        :param file:
        :type file:
        """
        return self._dllwrap.WaveformGeneratorArbitraryOpenFile(self._vi, generator, file)

    def WaveformGeneratorArbitraryMultichannelOpenFile(self, generator, file):
        """

        :param generator:
        :type generator:
        :param file:
        :type file:
        """
        return self._dllwrap.WaveformGeneratorArbitraryMultichannelOpenFile(self._vi, generator, file)

    def ConfigureWaveformGeneratorArbitraryMultichannelWaveform(self, generator, source):
        """

        :param generator:
        :type generator:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureWaveformGeneratorArbitraryMultichannelWaveform(self._vi, generator, source)

    def ConfigureWaveformGeneratorArbitraryScopeSource(self, generator, source):
        """

        :param generator:
        :type generator:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureWaveformGeneratorArbitraryScopeSource(self._vi, generator, source)

    def WaveformGeneratorArbitraryScopeOpen(self, generator):
        """

        :param generator:
        :type generator:
        """
        return self._dllwrap.WaveformGeneratorArbitraryScopeOpen(self._vi, generator)

    def ConfigureWaveformGeneratorOutputAmplitude(self, generator, amplitude, offset):
        """

        :param generator:
        :type generator:
        :param amplitude:
        :type amplitude:
        :param offset:
        :type offset:
        """
        return self._dllwrap.ConfigureWaveformGeneratorOutputAmplitude(self._vi, generator, amplitude, offset)

    def ConfigureWaveformGeneratorOutputLevel(self, generator, lowLevel, highLevel):
        """

        :param generator:
        :type generator:
        :param lowLevel:
        :type lowLevel:
        :param highLevel:
        :type highLevel:
        """
        return self._dllwrap.ConfigureWaveformGeneratorOutputLevel(self._vi, generator, lowLevel, highLevel)

    def ConfigureWaveformGeneratorOutputInversion(self, generator, inversion):
        """

        :param generator:
        :type generator:
        :param inversion:
        :type inversion:
        """
        return self._dllwrap.ConfigureWaveformGeneratorOutputInversion(self._vi, generator, inversion)

    def ConfigureWaveformGeneratorOutputUserLoad(self, generator, userLoad):
        """

        :param generator:
        :type generator:
        :param userLoad:
        :type userLoad:
        """
        return self._dllwrap.ConfigureWaveformGeneratorOutputUserLoad(self._vi, generator, userLoad)

    def ConfigureWaveformGeneratorOutputDCLevel(self, generator, DCLevel):
        """

        :param generator:
        :type generator:
        :param DCLevel:
        :type DCLevel:
        """
        return self._dllwrap.ConfigureWaveformGeneratorOutputDCLevel(self._vi, generator, DCLevel)

    def ConfigureWaveformGeneratorAddNoise(self, generator, addNoise):
        """

        :param generator:
        :type generator:
        :param addNoise:
        :type addNoise:
        """
        return self._dllwrap.ConfigureWaveformGeneratorAddNoise(self._vi, generator, addNoise)

    def ConfigureWaveformGeneratorNoiseLevelPercent(self, generator, level):
        """

        :param generator:
        :type generator:
        :param level:
        :type level:
        """
        return self._dllwrap.ConfigureWaveformGeneratorNoiseLevelPercent(self._vi, generator, level)

    def QueryWaveformGeneratorNoiseAbsoluteLevel(self, generator):
        """

        :param generator:
        :type generator:
        """
        return self._dllwrap.QueryWaveformGeneratorNoiseAbsoluteLevel(self._vi, generator)

    def ConfigureWaveformGeneratorNoiseDCLevel(self, generator, DCLevel):
        """

        :param generator:
        :type generator:
        :param DCLevel:
        :type DCLevel:
        """
        return self._dllwrap.ConfigureWaveformGeneratorNoiseDCLevel(self._vi, generator, DCLevel)

    def ConfigureWaveformGeneratorCouplingAll(self, generator, couplingAll):
        """

        :param generator:
        :type generator:
        :param couplingAll:
        :type couplingAll:
        """
        return self._dllwrap.ConfigureWaveformGeneratorCouplingAll(self._vi, generator, couplingAll)

    def ConfigureWaveformGeneratorCouplingAmplitude(self, generator, couplingAmplitude):
        """

        :param generator:
        :type generator:
        :param couplingAmplitude:
        :type couplingAmplitude:
        """
        return self._dllwrap.ConfigureWaveformGeneratorCouplingAmplitude(self._vi, generator, couplingAmplitude)

    def ConfigureWaveformGeneratorCouplingPhaseShift(self, generator, phaseShift):
        """

        :param generator:
        :type generator:
        :param phaseShift:
        :type phaseShift:
        """
        return self._dllwrap.ConfigureWaveformGeneratorCouplingPhaseShift(self._vi, generator, phaseShift)

    def ConfigureWaveformGeneratorCouplingFrequency(self, generator, couplingFrequency):
        """

        :param generator:
        :type generator:
        :param couplingFrequency:
        :type couplingFrequency:
        """
        return self._dllwrap.ConfigureWaveformGeneratorCouplingFrequency(self._vi, generator, couplingFrequency)

    def ConfigurePatternGeneratorState(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.ConfigurePatternGeneratorState(self._vi, state)

    def PatternGeneratorPreset(self):
        """"""
        return self._dllwrap.PatternGeneratorPreset(self._vi)

    def ConfigurePatternGeneratorRunMode(self, runMode):
        """

        :param runMode:
        :type runMode:
        """
        return self._dllwrap.ConfigurePatternGeneratorRunMode(self._vi, runMode)

    def ConfigurePatternGeneratorBitRate(self, bitRate):
        """

        :param bitRate:
        :type bitRate:
        """
        return self._dllwrap.ConfigurePatternGeneratorBitRate(self._vi, bitRate)

    def ConfigurePatternGeneratorHighLevel(self, highLevel):
        """

        :param highLevel:
        :type highLevel:
        """
        return self._dllwrap.ConfigurePatternGeneratorHighLevel(self._vi, highLevel)

    def PatternGeneratorLoadPattern(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.PatternGeneratorLoadPattern(self._vi, fileName)

    def ConfigureGeneratorSynchronization(self, generatorSynchronization):
        """

        :param generatorSynchronization:
        :type generatorSynchronization:
        """
        return self._dllwrap.ConfigureGeneratorSynchronization(self._vi, generatorSynchronization)

    def GeneratorStartAlignment(self):
        """"""
        return self._dllwrap.GeneratorStartAlignment(self._vi)

    def GeneratorStartAlignmentWithOPC(self, maximumTime):
        """

        :param maximumTime:
        :type maximumTime:
        """
        return self._dllwrap.GeneratorStartAlignmentWithOPC(self._vi, maximumTime)

    def GeneratorAbortAlignment(self):
        """"""
        return self._dllwrap.GeneratorAbortAlignment(self._vi)

    def QueryGeneratorAlignmentDate(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryGeneratorAlignmentDate(self._vi, bufferSize)

    def QueryGeneratorAlignmentTime(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryGeneratorAlignmentTime(self._vi, bufferSize)

    def QueryGeneratorAlignmentOverallState(self):
        """"""
        return self._dllwrap.QueryGeneratorAlignmentOverallState(self._vi)

    def ConfigureIQModeState(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureIQModeState(self._vi, state)

    def ConfigureIQSamplingInputSettings(self, relativeBandwidth, sampleRate, recordLength):
        """

        :param relativeBandwidth:
        :type relativeBandwidth:
        :param sampleRate:
        :type sampleRate:
        :param recordLength:
        :type recordLength:
        """
        return self._dllwrap.ConfigureIQSamplingInputSettings(self._vi, relativeBandwidth, sampleRate, recordLength)

    def QueryIQSamplingFilterBandwidth(self):
        """"""
        return self._dllwrap.QueryIQSamplingFilterBandwidth(self._vi)

    def ConfigureIQSamplingInputType(self, channel, inputType, inputMode):
        """

        :param channel:
        :type channel:
        :param inputType:
        :type inputType:
        :param inputMode:
        :type inputMode:
        """
        return self._dllwrap.ConfigureIQSamplingInputType(self._vi, channel, inputType, inputMode)

    def ConfigureIQSamplingRealInput(self, channel, carrierFrequency, sideband):
        """

        :param channel:
        :type channel:
        :param carrierFrequency:
        :type carrierFrequency:
        :param sideband:
        :type sideband:
        """
        return self._dllwrap.ConfigureIQSamplingRealInput(self._vi, channel, carrierFrequency, sideband)

    def ConfigureIQSamplingComplexInput(self, channel, carrierFrequency, sideband):
        """

        :param channel:
        :type channel:
        :param carrierFrequency:
        :type carrierFrequency:
        :param sideband:
        :type sideband:
        """
        return self._dllwrap.ConfigureIQSamplingComplexInput(self._vi, channel, carrierFrequency, sideband)

    def QueryIQData(self, channel, bufferSize):
        """

        :param channel:
        :type channel:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryIQData(self._vi, channel, bufferSize)

    def QueryIQDataHeader(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.QueryIQDataHeader(self._vi, channel)

    def ConfigureSpectrumAnalysisSpectrogramEnabled(self, mathNumber, spectrogram):
        """

        :param mathNumber:
        :type mathNumber:
        :param spectrogram:
        :type spectrogram:
        """
        return self._dllwrap.ConfigureSpectrumAnalysisSpectrogramEnabled(self._vi, mathNumber, spectrogram)

    def ConfigureSpectrumAnalysisXScaling(self, mathNumber, xScaling):
        """

        :param mathNumber:
        :type mathNumber:
        :param xScaling:
        :type xScaling:
        """
        return self._dllwrap.ConfigureSpectrumAnalysisXScaling(self._vi, mathNumber, xScaling)

    def ConfigureSpectrumAnalysisCoupledSpectrum(self, mathNumber, mathNumber2, coupled):
        """

        :param mathNumber:
        :type mathNumber:
        :param mathNumber2:
        :type mathNumber2:
        :param coupled:
        :type coupled:
        """
        return self._dllwrap.ConfigureSpectrumAnalysisCoupledSpectrum(self._vi, mathNumber, mathNumber2, coupled)

    def QuerySpectrumAnalysisDataSignalType(self, mathNumber):
        """

        :param mathNumber:
        :type mathNumber:
        """
        return self._dllwrap.QuerySpectrumAnalysisDataSignalType(self._vi, mathNumber)

    def ConfigureSpectrumAnalysisColorTable(self, mathNumber, enabled, colorTableMode):
        """

        :param mathNumber:
        :type mathNumber:
        :param enabled:
        :type enabled:
        :param colorTableMode:
        :type colorTableMode:
        """
        return self._dllwrap.ConfigureSpectrumAnalysisColorTable(self._vi, mathNumber, enabled, colorTableMode)

    def ConfigureSpectrumAnalysisTimeline(self, mathNumber, timeline, enabled, position):
        """

        :param mathNumber:
        :type mathNumber:
        :param timeline:
        :type timeline:
        :param enabled:
        :type enabled:
        :param position:
        :type position:
        """
        return self._dllwrap.ConfigureSpectrumAnalysisTimeline(self._vi, mathNumber, timeline, enabled, position)

    def ConfigureCDRSoftware(self, softwareNumber, nominalBitRate, dataEdges, initialPhaseSync, selectedResults):
        """

        :param softwareNumber:
        :type softwareNumber:
        :param nominalBitRate:
        :type nominalBitRate:
        :param dataEdges:
        :type dataEdges:
        :param initialPhaseSync:
        :type initialPhaseSync:
        :param selectedResults:
        :type selectedResults:
        """
        return self._dllwrap.ConfigureCDRSoftware(
            self._vi,
            softwareNumber,
            nominalBitRate,
            dataEdges,
            initialPhaseSync,
            selectedResults,
        )

    def ConfigureCDRSoftwarePLL(self, softwareNumber, order, damping, bandwidth, relativeBandwidth):
        """

        :param softwareNumber:
        :type softwareNumber:
        :param order:
        :type order:
        :param damping:
        :type damping:
        :param bandwidth:
        :type bandwidth:
        :param relativeBandwidth:
        :type relativeBandwidth:
        """
        return self._dllwrap.ConfigureCDRSoftwarePLL(
            self._vi, softwareNumber, order, damping, bandwidth, relativeBandwidth
        )

    def ConfigureCDRSoftwareSerialStandard(self, softwareNumber, serialStandard):
        """

        :param softwareNumber:
        :type softwareNumber:
        :param serialStandard:
        :type serialStandard:
        """
        return self._dllwrap.ConfigureCDRSoftwareSerialStandard(self._vi, softwareNumber, serialStandard)

    def ConfigureCDRSoftwareBitRateCorrection(self, softwareNumber, enabled, source):
        """

        :param softwareNumber:
        :type softwareNumber:
        :param enabled:
        :type enabled:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureCDRSoftwareBitRateCorrection(self._vi, softwareNumber, enabled, source)

    def CDRSoftwareEstimateBitRateOnce(self, softwareNumber):
        """

        :param softwareNumber:
        :type softwareNumber:
        """
        return self._dllwrap.CDRSoftwareEstimateBitRateOnce(self._vi, softwareNumber)

    def ConfigureCDRHardware(self, source, nominalBitRate, dataEdges):
        """

        :param source:
        :type source:
        :param nominalBitRate:
        :type nominalBitRate:
        :param dataEdges:
        :type dataEdges:
        """
        return self._dllwrap.ConfigureCDRHardware(self._vi, source, nominalBitRate, dataEdges)

    def ConfigureCDRHardwarePLL(self, order, damping, bandwidth, relativeBandwidth):
        """

        :param order:
        :type order:
        :param damping:
        :type damping:
        :param bandwidth:
        :type bandwidth:
        :param relativeBandwidth:
        :type relativeBandwidth:
        """
        return self._dllwrap.ConfigureCDRHardwarePLL(self._vi, order, damping, bandwidth, relativeBandwidth)

    def ConfigureCDRHardwareSerialStandard(self, serialStandard):
        """

        :param serialStandard:
        :type serialStandard:
        """
        return self._dllwrap.ConfigureCDRHardwareSerialStandard(self._vi, serialStandard)

    def CDRHardwareEstimateBitRateOnce(self):
        """"""
        return self._dllwrap.CDRHardwareEstimateBitRateOnce(self._vi)

    def ConfigureCDRHardwareTriggerUIOffset(self, UIOffset):
        """

        :param UIOffset:
        :type UIOffset:
        """
        return self._dllwrap.ConfigureCDRHardwareTriggerUIOffset(self._vi, UIOffset)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def FetchAllSystemErrors(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.FetchAllSystemErrors(self._vi, bufferSize)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def ByteOrder(self, byteOrder):
        """

        :param byteOrder:
        :type byteOrder:
        """
        return self._dllwrap.ByteOrder(self._vi, byteOrder)

    def SetStatusRegister(self, questionableRegister, enable, PTransition, NTransition):
        """

        :param questionableRegister:
        :type questionableRegister:
        :param enable:
        :type enable:
        :param PTransition:
        :type PTransition:
        :param NTransition:
        :type NTransition:
        """
        return self._dllwrap.SetStatusRegister(self._vi, questionableRegister, enable, PTransition, NTransition)

    def GetStatusRegister(self, questionableRegister, registerPart):
        """

        :param questionableRegister:
        :type questionableRegister:
        :param registerPart:
        :type registerPart:
        """
        return self._dllwrap.GetStatusRegister(self._vi, questionableRegister, registerPart)

    def ConfigureErrorChecking(self, optionChecking, rangeChecking, statusChecking):
        """

        :param optionChecking:
        :type optionChecking:
        :param rangeChecking:
        :type rangeChecking:
        :param statusChecking:
        :type statusChecking:
        """
        return self._dllwrap.ConfigureErrorChecking(self._vi, optionChecking, rangeChecking, statusChecking)

    def SetOPCTimeout(self, OPCTimeout):
        """

        :param OPCTimeout:
        :type OPCTimeout:
        """
        return self._dllwrap.SetOPCTimeout(self._vi, OPCTimeout)

    def GetOPCTimeout(self):
        """"""
        return self._dllwrap.GetOPCTimeout(self._vi)

    def SetVISATimeout(self, VISATimeout):
        """

        :param VISATimeout:
        :type VISATimeout:
        """
        return self._dllwrap.SetVISATimeout(self._vi, VISATimeout)

    def GetVISATimeout(self):
        """"""
        return self._dllwrap.GetVISATimeout(self._vi)

    def ClearStatus(self):
        """"""
        return self._dllwrap.ClearStatus(self._vi)

    def IDQueryResponse(self):
        """"""
        return self._dllwrap.IDQueryResponse(self._vi)

    def QueryDeviceSerialNumber(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryDeviceSerialNumber(self._vi, bufferSize)

    def ProcessAllPreviousCommands(self):
        """"""
        return self._dllwrap.ProcessAllPreviousCommands(self._vi)

    def QueryOPC(self):
        """"""
        return self._dllwrap.QueryOPC(self._vi)

    def ScopeModel(self):
        """"""
        return self._dllwrap.ScopeModel(self._vi)

    def ScopeSeries(self):
        """"""
        return self._dllwrap.ScopeSeries(self._vi)

    def ScopeFamily(self):
        """"""
        return self._dllwrap.ScopeFamily(self._vi)

    def ConfigureAutoSystemErrQuery(self, autoSystErrQuery):
        """

        :param autoSystErrQuery:
        :type autoSystErrQuery:
        """
        return self._dllwrap.ConfigureAutoSystemErrQuery(self._vi, autoSystErrQuery)

    def ConfigureMultiThreadLocking(self, multiThreadLocking):
        """

        :param multiThreadLocking:
        :type multiThreadLocking:
        """
        return self._dllwrap.ConfigureMultiThreadLocking(self._vi, multiThreadLocking)

    def SetSystemDate(self, year, month, day):
        """

        :param year:
        :type year:
        :param month:
        :type month:
        :param day:
        :type day:
        """
        return self._dllwrap.SetSystemDate(self._vi, year, month, day)

    def QuerySystemDate(self):
        """"""
        return self._dllwrap.QuerySystemDate(self._vi)

    def QuerySystemTime(self):
        """"""
        return self._dllwrap.QuerySystemTime(self._vi)

    def GetError(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numberOfBytesToRead):
        """

        :param numberOfBytesToRead:
        :type numberOfBytesToRead:
        """
        return self._dllwrap.ReadInstrData(self._vi, numberOfBytesToRead)

    def QueryViBoolean(self, command):
        """

        :param command:
        :type command:
        """
        return self._dllwrap.QueryViBoolean(self._vi, command)

    def QueryViInt32(self, command):
        """

        :param command:
        :type command:
        """
        return self._dllwrap.QueryViInt32(self._vi, command)

    def QueryViReal64(self, command):
        """

        :param command:
        :type command:
        """
        return self._dllwrap.QueryViReal64(self._vi, command)

    def QueryViString(self, command, bufferSize):
        """

        :param command:
        :type command:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.QueryViString(self._vi, command, bufferSize)

    def SaveInstrumentSettings(self, number):
        """

        :param number:
        :type number:
        """
        return self._dllwrap.SaveInstrumentSettings(self._vi, number)

    def RecallInstrumentSettings(self, number):
        """

        :param number:
        :type number:
        """
        return self._dllwrap.RecallInstrumentSettings(self._vi, number)

    def FileManagerOperations(self, operation, source, destination):
        """

        :param operation:
        :type operation:
        :param source:
        :type source:
        :param destination:
        :type destination:
        """
        return self._dllwrap.FileManagerOperations(self._vi, operation, source, destination)

    def ChangeFileAttributes(self, file, attributes):
        """

        :param file:
        :type file:
        :param attributes:
        :type attributes:
        """
        return self._dllwrap.ChangeFileAttributes(self._vi, file, attributes)

    def FileCount(self, directory):
        """

        :param directory:
        :type directory:
        """
        return self._dllwrap.FileCount(self._vi, directory)

    def FileDirectoryContent(self, directory, bufferSize):
        """

        :param directory:
        :type directory:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.FileDirectoryContent(self._vi, directory, bufferSize)

    def FileSubdirectoriesCount(self, directory):
        """

        :param directory:
        :type directory:
        """
        return self._dllwrap.FileSubdirectoriesCount(self._vi, directory)

    def FileSubdirectories(self, directory, bufferSize):
        """

        :param directory:
        :type directory:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.FileSubdirectories(self._vi, directory, bufferSize)

    def FileDrives(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.FileDrives(self._vi, bufferSize)

    def ReadToFileFromInstrument(self, source, destination):
        """

        :param source:
        :type source:
        :param destination:
        :type destination:
        """
        return self._dllwrap.ReadToFileFromInstrument(self._vi, source, destination)

    def WriteFromFileToInstrument(self, source, destination):
        """

        :param source:
        :type source:
        :param destination:
        :type destination:
        """
        return self._dllwrap.WriteFromFileToInstrument(self._vi, source, destination)

    def DataSetFileOperations(self, operation, stateNumber, path):
        """

        :param operation:
        :type operation:
        :param stateNumber:
        :type stateNumber:
        :param path:
        :type path:
        """
        return self._dllwrap.DataSetFileOperations(self._vi, operation, stateNumber, path)

    def ConfigureSavesetPreviewImage(self, include):
        """

        :param include:
        :type include:
        """
        return self._dllwrap.ConfigureSavesetPreviewImage(self._vi, include)

    def OneFileOperations(self, operation, name):
        """

        :param operation:
        :type operation:
        :param name:
        :type name:
        """
        return self._dllwrap.OneFileOperations(self._vi, operation, name)

    def ConfigureWaveformExportChannel(self, channel, exportChannel):
        """

        :param channel:
        :type channel:
        :param exportChannel:
        :type exportChannel:
        """
        return self._dllwrap.ConfigureWaveformExportChannel(self._vi, channel, exportChannel)

    def ConfigureWaveformExportMultichannel(self, multichannelExport):
        """

        :param multichannelExport:
        :type multichannelExport:
        """
        return self._dllwrap.ConfigureWaveformExportMultichannel(self._vi, multichannelExport)

    def ConfigureWaveformExportSource(self, source):
        """

        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureWaveformExportSource(self._vi, source)

    def ConfigureWaveformExportScopeZoom(self, diagramName, zoomName):
        """

        :param diagramName:
        :type diagramName:
        :param zoomName:
        :type zoomName:
        """
        return self._dllwrap.ConfigureWaveformExportScopeZoom(self._vi, diagramName, zoomName)

    def ConfigureWaveformExportScopeCursor(self, cursor):
        """

        :param cursor:
        :type cursor:
        """
        return self._dllwrap.ConfigureWaveformExportScopeCursor(self._vi, cursor)

    def ConfigureWaveformExportScopeGate(self, measurement):
        """

        :param measurement:
        :type measurement:
        """
        return self._dllwrap.ConfigureWaveformExportScopeGate(self._vi, measurement)

    def ConfigureWaveformExportScopeManual(self, start, stop):
        """

        :param start:
        :type start:
        :param stop:
        :type stop:
        """
        return self._dllwrap.ConfigureWaveformExportScopeManual(self._vi, start, stop)

    def ConfigureWaveformExportScopeComplete(self):
        """"""
        return self._dllwrap.ConfigureWaveformExportScopeComplete(self._vi)

    def ConfigureWaveformExportScopeDataLogging(self, dataLogging):
        """

        :param dataLogging:
        :type dataLogging:
        """
        return self._dllwrap.ConfigureWaveformExportScopeDataLogging(self._vi, dataLogging)

    def ConfigureWaveformExportTimestamps(self, timestamps):
        """

        :param timestamps:
        :type timestamps:
        """
        return self._dllwrap.ConfigureWaveformExportTimestamps(self._vi, timestamps)

    def ConfigureWaveformExportFastExport(self, fastExport):
        """

        :param fastExport:
        :type fastExport:
        """
        return self._dllwrap.ConfigureWaveformExportFastExport(self._vi, fastExport)

    def WaveformExportInterleavedXY(self, interleavedXY):
        """

        :param interleavedXY:
        :type interleavedXY:
        """
        return self._dllwrap.WaveformExportInterleavedXY(self._vi, interleavedXY)

    def WaveformExportRawValues(self, rawValues):
        """

        :param rawValues:
        :type rawValues:
        """
        return self._dllwrap.WaveformExportRawValues(self._vi, rawValues)

    def WaveformExportFile(self, file):
        """

        :param file:
        :type file:
        """
        return self._dllwrap.WaveformExportFile(self._vi, file)

    def ConfigureWaveformNxSingleAcquisitionDisplayUpdate(self, displayUpdate):
        """

        :param displayUpdate:
        :type displayUpdate:
        """
        return self._dllwrap.ConfigureWaveformNxSingleAcquisitionDisplayUpdate(self._vi, displayUpdate)

    def ConfigureHistogramExportName(self, histogramName):
        """

        :param histogramName:
        :type histogramName:
        """
        return self._dllwrap.ConfigureHistogramExportName(self._vi, histogramName)

    def ConfigureHistogramExportIncidence(self, incidence):
        """

        :param incidence:
        :type incidence:
        """
        return self._dllwrap.ConfigureHistogramExportIncidence(self._vi, incidence)

    def HistogramExportFile(self, file):
        """

        :param file:
        :type file:
        """
        return self._dllwrap.HistogramExportFile(self._vi, file)

    def FetchHistogramExportData(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.FetchHistogramExportData(self._vi, bufferSize)

    def NumericResultsSelectItem(self, item, select):
        """

        :param item:
        :type item:
        :param select:
        :type select:
        """
        return self._dllwrap.NumericResultsSelectItem(self._vi, item, select)

    def ConfigureNumericResultsParameters(self, delimiter, omitUnits):
        """

        :param delimiter:
        :type delimiter:
        :param omitUnits:
        :type omitUnits:
        """
        return self._dllwrap.ConfigureNumericResultsParameters(self._vi, delimiter, omitUnits)

    def SaveNumericResultsBoxes(self, file):
        """

        :param file:
        :type file:
        """
        return self._dllwrap.SaveNumericResultsBoxes(self._vi, file)

    def ConfigureLongTermExportResult(self, measurement):
        """

        :param measurement:
        :type measurement:
        """
        return self._dllwrap.ConfigureLongTermExportResult(self._vi, measurement)

    def ConfigureLongTermExportType(self, type):
        """

        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureLongTermExportType(self._vi, type)

    def LongTermExportFile(self, file):
        """

        :param file:
        :type file:
        """
        return self._dllwrap.LongTermExportFile(self._vi, file)

    def FetchLongTermExportData(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.FetchLongTermExportData(self._vi, bufferSize)

    def ReportControl(self, language, paperSize):
        """

        :param language:
        :type language:
        :param paperSize:
        :type paperSize:
        """
        return self._dllwrap.ReportControl(self._vi, language, paperSize)

    def ReportComment(self, user, comment):
        """

        :param user:
        :type user:
        :param comment:
        :type comment:
        """
        return self._dllwrap.ReportComment(self._vi, user, comment)

    def ReportLogo(self, logoType, logoFile):
        """

        :param logoType:
        :type logoType:
        :param logoFile:
        :type logoFile:
        """
        return self._dllwrap.ReportLogo(self._vi, logoType, logoFile)

    def ReportFileName(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.ReportFileName(self._vi, fileName)

    def SaveReport(self):
        """"""
        return self._dllwrap.SaveReport(self._vi)

    def AutonamingFilePattern(self, textInput, prefix, userText, date, index, time):
        """

        :param textInput:
        :type textInput:
        :param prefix:
        :type prefix:
        :param userText:
        :type userText:
        :param date:
        :type date:
        :param index:
        :type index:
        :param time:
        :type time:
        """
        return self._dllwrap.AutonamingFilePattern(self._vi, textInput, prefix, userText, date, index, time)

    def AutonamingDefaultPath(self, defaultPath):
        """

        :param defaultPath:
        :type defaultPath:
        """
        return self._dllwrap.AutonamingDefaultPath(self._vi, defaultPath)

    def AutonamingResetPath(self):
        """"""
        return self._dllwrap.AutonamingResetPath(self._vi)

    def AutonamingResetAllSettings(self):
        """"""
        return self._dllwrap.AutonamingResetAllSettings(self._vi)
