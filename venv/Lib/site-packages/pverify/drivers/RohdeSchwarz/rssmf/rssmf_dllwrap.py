from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import rssmf_const as const
from .rssmf_const import *


class rssmf_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("rssmf_32.dll", "rssmf_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "rssmf"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        instrumentHandle = ViSession()
        status = self.dll.rssmf_init(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            byref(instrumentHandle),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(instrumentHandle.value)

    def confLFFreqSweep(
        self,
        instrumentHandle,
        mode,
        startFrequency,
        stopFrequency,
        spacing,
        step,
        dwellTime,
    ):
        status = self.dll.rssmf_confLFFreqSweep(
            ViSession(instrumentHandle),
            ViInt32(mode),
            ViReal64(startFrequency),
            ViReal64(stopFrequency),
            ViInt32(spacing),
            ViReal64(step),
            ViReal64(dwellTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LFSweepTrigger(self, instrumentHandle):
        status = self.dll.rssmf_LFSweepTrigger(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLFSweepMarker(
        self,
        instrumentHandle,
        channel,
        state,
        amplitudeMarker,
        frequency,
        amplitude,
        polarity,
        activeMarker,
    ):
        status = self.dll.rssmf_ConfigureLFSweepMarker(
            ViSession(instrumentHandle),
            ViUInt32(channel),
            ViBoolean(state),
            ViBoolean(amplitudeMarker),
            ViReal64(frequency),
            ViReal64(amplitude),
            ViInt32(polarity),
            ViInt32(activeMarker),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLFSweepMode(self, instrumentHandle, mode):
        status = self.dll.rssmf_SetLFSweepMode(ViSession(instrumentHandle), ViInt32(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLFSweepSource(self, instrumentHandle, source):
        status = self.dll.rssmf_SetLFSweepSource(ViSession(instrumentHandle), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepSource(self, instrumentHandle):
        source = ViInt32()
        status = self.dll.rssmf_GetLFSweepSource(ViSession(instrumentHandle), byref(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(source.value)

    def SetLFSweepStartFreq(self, instrumentHandle, startFrequency):
        status = self.dll.rssmf_SetLFSweepStartFreq(ViSession(instrumentHandle), ViReal64(startFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepStartFreq(self, instrumentHandle):
        startFrequency = ViReal64()
        status = self.dll.rssmf_GetLFSweepStartFreq(ViSession(instrumentHandle), byref(startFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(startFrequency.value)

    def SetLFSweepStopFreq(self, instrumentHandle, stopFrequency):
        status = self.dll.rssmf_SetLFSweepStopFreq(ViSession(instrumentHandle), ViReal64(stopFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepStopFreq(self, instrumentHandle):
        stopFrequency = ViReal64()
        status = self.dll.rssmf_GetLFSweepStopFreq(ViSession(instrumentHandle), byref(stopFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(stopFrequency.value)

    def SetLFSweepShape(self, instrumentHandle, shape):
        status = self.dll.rssmf_SetLFSweepShape(ViSession(instrumentHandle), ViInt32(shape))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepShape(self, instrumentHandle):
        shape = ViInt32()
        status = self.dll.rssmf_GetLFSweepShape(ViSession(instrumentHandle), byref(shape))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(shape.value)

    def SetLFSweepSpacing(self, instrumentHandle, spacing):
        status = self.dll.rssmf_SetLFSweepSpacing(ViSession(instrumentHandle), ViInt32(spacing))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepSpacing(self, instrumentHandle):
        spacing = ViInt32()
        status = self.dll.rssmf_GetLFSweepSpacing(ViSession(instrumentHandle), byref(spacing))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(spacing.value)

    def SetLFSweepStepLin(self, instrumentHandle, stepLin):
        status = self.dll.rssmf_SetLFSweepStepLin(ViSession(instrumentHandle), ViReal64(stepLin))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepStepLin(self, instrumentHandle):
        stepLin = ViReal64()
        status = self.dll.rssmf_GetLFSweepStepLin(ViSession(instrumentHandle), byref(stepLin))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(stepLin.value)

    def SetLFSweepStepLog(self, instrumentHandle, stepLog):
        status = self.dll.rssmf_SetLFSweepStepLog(ViSession(instrumentHandle), ViReal64(stepLog))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepStepLog(self, instrumentHandle):
        stepLog = ViReal64()
        status = self.dll.rssmf_GetLFSweepStepLog(ViSession(instrumentHandle), byref(stepLog))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(stepLog.value)

    def SetLFSweepDwellTime(self, instrumentHandle, dwellTime):
        status = self.dll.rssmf_SetLFSweepDwellTime(ViSession(instrumentHandle), ViReal64(dwellTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepDwellTime(self, instrumentHandle):
        dwellTime = ViReal64()
        status = self.dll.rssmf_GetLFSweepDwellTime(ViSession(instrumentHandle), byref(dwellTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(dwellTime.value)

    def SetLFSweepManualStep(self, instrumentHandle, manualLFSweep):
        status = self.dll.rssmf_SetLFSweepManualStep(ViSession(instrumentHandle), ViReal64(manualLFSweep))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepManualStep(self, instrumentHandle):
        manualLFSweep = ViReal64()
        status = self.dll.rssmf_GetLFSweepManualStep(ViSession(instrumentHandle), byref(manualLFSweep))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(manualLFSweep.value)

    def SetLFSweepPoints(self, instrumentHandle, LFSweepPoints):
        status = self.dll.rssmf_SetLFSweepPoints(ViSession(instrumentHandle), ViUInt32(LFSweepPoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepPoints(self, instrumentHandle):
        LFSweepPoints = ViUInt32()
        status = self.dll.rssmf_GetLFSweepPoints(ViSession(instrumentHandle), byref(LFSweepPoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(LFSweepPoints.value)

    def SetLFSweepMarkerState(self, instrumentHandle, channel, state):
        status = self.dll.rssmf_SetLFSweepMarkerState(ViSession(instrumentHandle), ViUInt32(channel), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepMarkerState(self, instrumentHandle, channel):
        state = ViBoolean()
        status = self.dll.rssmf_GetLFSweepMarkerState(ViSession(instrumentHandle), ViUInt32(channel), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetLFSweepMarkerFrequency(self, instrumentHandle, channel, frequency):
        status = self.dll.rssmf_SetLFSweepMarkerFrequency(
            ViSession(instrumentHandle), ViUInt32(channel), ViReal64(frequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepMarkerFrequency(self, instrumentHandle, channel):
        frequency = ViReal64()
        status = self.dll.rssmf_GetLFSweepMarkerFrequency(
            ViSession(instrumentHandle), ViUInt32(channel), byref(frequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(frequency.value)

    def SetLFSweepAmplitudeMarkerState(self, instrumentHandle, channel, amplitudeMarker):
        status = self.dll.rssmf_SetLFSweepAmplitudeMarkerState(
            ViSession(instrumentHandle), ViUInt32(channel), ViBoolean(amplitudeMarker)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepAmplitudeMarkerState(self, instrumentHandle, channel):
        amplitudeMarker = ViBoolean()
        status = self.dll.rssmf_GetLFSweepAmplitudeMarkerState(
            ViSession(instrumentHandle), ViUInt32(channel), byref(amplitudeMarker)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(amplitudeMarker.value)

    def SetLFSweepAmplitudeMarkerAttenuation(self, instrumentHandle, amplitude):
        status = self.dll.rssmf_SetLFSweepAmplitudeMarkerAttenuation(ViSession(instrumentHandle), ViReal64(amplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepAmplitudeMarkerAttenuation(self, instrumentHandle):
        amplitude = ViReal64()
        status = self.dll.rssmf_GetLFSweepAmplitudeMarkerAttenuation(ViSession(instrumentHandle), byref(amplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(amplitude.value)

    def SetLFSweepMarkerPolarity(self, instrumentHandle, polarity):
        status = self.dll.rssmf_SetLFSweepMarkerPolarity(ViSession(instrumentHandle), ViInt32(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepMarkerPolarity(self, instrumentHandle):
        polarity = ViInt32()
        status = self.dll.rssmf_GetLFSweepMarkerPolarity(ViSession(instrumentHandle), byref(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(polarity.value)

    def SetLFSweepActiveMarker(self, instrumentHandle, activeMarker):
        status = self.dll.rssmf_SetLFSweepActiveMarker(ViSession(instrumentHandle), ViInt32(activeMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFSweepActiveMarker(self, instrumentHandle):
        activeMarker = ViInt32()
        status = self.dll.rssmf_GetLFSweepActiveMarker(ViSession(instrumentHandle), byref(activeMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(activeMarker.value)

    def SetLFSweepAllMarkersOff(self, instrumentHandle):
        status = self.dll.rssmf_SetLFSweepAllMarkersOff(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLFGenBandwidth(self, instrumentHandle, channel, bandwidth):
        status = self.dll.rssmf_SetLFGenBandwidth(ViSession(instrumentHandle), ViInt32(channel), ViInt32(bandwidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFGenBandwidth(self, instrumentHandle, channel):
        bandwidth = ViInt32()
        status = self.dll.rssmf_GetLFGenBandwidth(ViSession(instrumentHandle), ViInt32(channel), byref(bandwidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(bandwidth.value)

    def SetLFGenFrequency(self, instrumentHandle, channel, LFGenFrequency):
        status = self.dll.rssmf_SetLFGenFrequency(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(LFGenFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFGenFrequency(self, instrumentHandle, channel):
        LFGenFrequency = ViReal64()
        status = self.dll.rssmf_GetLFGenFrequency(ViSession(instrumentHandle), ViInt32(channel), byref(LFGenFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(LFGenFrequency.value)

    def SetLFGenShape(self, instrumentHandle, channel, shape):
        status = self.dll.rssmf_SetLFGenShape(ViSession(instrumentHandle), ViInt32(channel), ViInt32(shape))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFGenShape(self, instrumentHandle, channel):
        shape = ViInt32()
        status = self.dll.rssmf_GetLFGenShape(ViSession(instrumentHandle), ViInt32(channel), byref(shape))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(shape.value)

    def SetLFGenShapeTrapeze(self, instrumentHandle, channel, trapeze, time):
        status = self.dll.rssmf_SetLFGenShapeTrapeze(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(trapeze),
            ViReal64(time),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFGenShapeTrapeze(self, instrumentHandle, channel, trapeze):
        time = ViReal64()
        status = self.dll.rssmf_GetLFGenShapeTrapeze(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(trapeze), byref(time)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(time.value)

    def SetLFGenShapeTriangle(self, instrumentHandle, channel, triangle, time):
        status = self.dll.rssmf_SetLFGenShapeTriangle(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViInt32(triangle),
            ViReal64(time),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFGenShapeTriangle(self, instrumentHandle, channel, triangle):
        time = ViReal64()
        status = self.dll.rssmf_GetLFGenShapeTriangle(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(triangle), byref(time)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(time.value)

    def SetLFGenShapePulse(self, instrumentHandle, channel, pulse, time):
        status = self.dll.rssmf_SetLFGenShapePulse(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(pulse), ViReal64(time)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFGenShapePulse(self, instrumentHandle, channel, pulse):
        time = ViReal64()
        status = self.dll.rssmf_GetLFGenShapePulse(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(pulse), byref(time)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(time.value)

    def confNoise(self, instrumentHandle, bandwidth, distribution):
        status = self.dll.rssmf_confNoise(ViSession(instrumentHandle), ViReal64(bandwidth), ViInt32(distribution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetNOISEBandwidth(self, instrumentHandle, bandwidth):
        status = self.dll.rssmf_SetNOISEBandwidth(ViSession(instrumentHandle), ViReal64(bandwidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNOISEBandwidth(self, instrumentHandle):
        bandwidth = ViReal64()
        status = self.dll.rssmf_GetNOISEBandwidth(ViSession(instrumentHandle), byref(bandwidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(bandwidth.value)

    def SetNOISEDistribution(self, instrumentHandle, distribution):
        status = self.dll.rssmf_SetNOISEDistribution(ViSession(instrumentHandle), ViInt32(distribution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNOISEDistribution(self, instrumentHandle):
        distribution = ViInt32()
        status = self.dll.rssmf_GetNOISEDistribution(ViSession(instrumentHandle), byref(distribution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(distribution.value)

    def GetNOISERelativeLevel(self, instrumentHandle):
        relativeLevel = ViReal64()
        status = self.dll.rssmf_GetNOISERelativeLevel(ViSession(instrumentHandle), byref(relativeLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(relativeLevel.value)

    def GetNOISEAbsoluteLevel(self, instrumentHandle):
        absoluteLevel = ViReal64()
        status = self.dll.rssmf_GetNOISEAbsoluteLevel(ViSession(instrumentHandle), byref(absoluteLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(absoluteLevel.value)

    def SetNOISEBandwidthState(self, instrumentHandle, bandwidthState):
        status = self.dll.rssmf_SetNOISEBandwidthState(ViSession(instrumentHandle), ViBoolean(bandwidthState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNOISEBandwidthState(self, instrumentHandle):
        bandwidthState = ViBoolean()
        status = self.dll.rssmf_GetNOISEBandwidthState(ViSession(instrumentHandle), byref(bandwidthState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(bandwidthState.value)

    def confLFOutput(self, instrumentHandle, channel, state, source, outputVoltage):
        status = self.dll.rssmf_confLFOutput(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViBoolean(state),
            ViInt32(source),
            ViReal64(outputVoltage),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLFOutputMonitoring(self, instrumentHandle, monitoring):
        status = self.dll.rssmf_SetLFOutputMonitoring(ViSession(instrumentHandle), ViInt32(monitoring))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLFOutputDCOffset(self, instrumentHandle, DCOffset):
        status = self.dll.rssmf_SetLFOutputDCOffset(ViSession(instrumentHandle), ViReal64(DCOffset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFOutputMonitoring(self, instrumentHandle):
        monitoring = ViInt32()
        status = self.dll.rssmf_GetLFOutputMonitoring(ViSession(instrumentHandle), byref(monitoring))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(monitoring.value)

    def GetLFOutputDCOffset(self, instrumentHandle):
        DCOffset = ViReal64()
        status = self.dll.rssmf_GetLFOutputDCOffset(ViSession(instrumentHandle), byref(DCOffset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(DCOffset.value)

    def SetLFOutputState(self, instrumentHandle, LFOutputState):
        status = self.dll.rssmf_SetLFOutputState(ViSession(instrumentHandle), ViBoolean(LFOutputState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFOutputState(self, instrumentHandle):
        LFOutputState = ViBoolean()
        status = self.dll.rssmf_GetLFOutputState(ViSession(instrumentHandle), byref(LFOutputState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(LFOutputState.value)

    def SetLFOutputSource(self, instrumentHandle, channel, source):
        status = self.dll.rssmf_SetLFOutputSource(ViSession(instrumentHandle), ViInt32(channel), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFOutputSource(self, instrumentHandle, channel):
        source = ViInt32()
        status = self.dll.rssmf_GetLFOutputSource(ViSession(instrumentHandle), ViInt32(channel), byref(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(source.value)

    def SetLFOutputVoltage(self, instrumentHandle, channel, outputVoltage):
        status = self.dll.rssmf_SetLFOutputVoltage(
            ViSession(instrumentHandle), ViInt32(channel), ViReal64(outputVoltage)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFOutputVoltage(self, instrumentHandle, channel):
        LFGenVoltage = ViReal64()
        status = self.dll.rssmf_GetLFOutputVoltage(ViSession(instrumentHandle), ViInt32(channel), byref(LFGenVoltage))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(LFGenVoltage.value)

    def ConfigureLFLevelSweepMode(self, instrumentHandle, mode, source, startLevel, stopLevel, step, dwellTime):
        status = self.dll.rssmf_ConfigureLFLevelSweepMode(
            ViSession(instrumentHandle),
            ViInt32(mode),
            ViInt32(source),
            ViReal64(startLevel),
            ViReal64(stopLevel),
            ViReal64(step),
            ViReal64(dwellTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LFLevelSweepTrigger(self, instrumentHandle):
        status = self.dll.rssmf_LFLevelSweepTrigger(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLFLevelSweepMarker(self, instrumentHandle, channel, state, level, polarity, activeMarker):
        status = self.dll.rssmf_ConfigureLFLevelSweepMarker(
            ViSession(instrumentHandle),
            ViUInt32(channel),
            ViBoolean(state),
            ViReal64(level),
            ViInt32(polarity),
            ViInt32(activeMarker),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLFLevelSweepMode(self, instrumentHandle, mode):
        status = self.dll.rssmf_SetLFLevelSweepMode(ViSession(instrumentHandle), ViInt32(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLFLevelSweepSource(self, instrumentHandle, source):
        status = self.dll.rssmf_SetLFLevelSweepSource(ViSession(instrumentHandle), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFLevelSweepSource(self, instrumentHandle):
        source = ViInt32()
        status = self.dll.rssmf_GetLFLevelSweepSource(ViSession(instrumentHandle), byref(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(source.value)

    def SetLFLevelSweepStartLevel(self, instrumentHandle, startLevel):
        status = self.dll.rssmf_SetLFLevelSweepStartLevel(ViSession(instrumentHandle), ViReal64(startLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFLevelSweepStartLevel(self, instrumentHandle):
        startLevel = ViReal64()
        status = self.dll.rssmf_GetLFLevelSweepStartLevel(ViSession(instrumentHandle), byref(startLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(startLevel.value)

    def SetLFLevelSweepStopLevel(self, instrumentHandle, stopLevel):
        status = self.dll.rssmf_SetLFLevelSweepStopLevel(ViSession(instrumentHandle), ViReal64(stopLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFLevelSweepStopLevel(self, instrumentHandle):
        stopLevel = ViReal64()
        status = self.dll.rssmf_GetLFLevelSweepStopLevel(ViSession(instrumentHandle), byref(stopLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(stopLevel.value)

    def SetLFLevelSweepStep(self, instrumentHandle, step):
        status = self.dll.rssmf_SetLFLevelSweepStep(ViSession(instrumentHandle), ViReal64(step))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFLevelSweepStep(self, instrumentHandle):
        step = ViReal64()
        status = self.dll.rssmf_GetLFLevelSweepStep(ViSession(instrumentHandle), byref(step))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(step.value)

    def SetLFLevelSweepCount(self, instrumentHandle, count):
        status = self.dll.rssmf_SetLFLevelSweepCount(ViSession(instrumentHandle), ViUInt32(count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFLevelSweepCount(self, instrumentHandle):
        count = ViUInt32()
        status = self.dll.rssmf_GetLFLevelSweepCount(ViSession(instrumentHandle), byref(count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(count.value)

    def SetLFLevelSweepShape(self, instrumentHandle, shape):
        status = self.dll.rssmf_SetLFLevelSweepShape(ViSession(instrumentHandle), ViInt32(shape))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFLevelSweepShape(self, instrumentHandle):
        shape = ViInt32()
        status = self.dll.rssmf_GetLFLevelSweepShape(ViSession(instrumentHandle), byref(shape))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(shape.value)

    def SetLFLevelSweepDwellTime(self, instrumentHandle, dwellTime):
        status = self.dll.rssmf_SetLFLevelSweepDwellTime(ViSession(instrumentHandle), ViReal64(dwellTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFLevelSweepDwellTime(self, instrumentHandle):
        dwellTime = ViReal64()
        status = self.dll.rssmf_GetLFLevelSweepDwellTime(ViSession(instrumentHandle), byref(dwellTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(dwellTime.value)

    def SetLFLevelSweepManualStep(self, instrumentHandle, manualLFSweep):
        status = self.dll.rssmf_SetLFLevelSweepManualStep(ViSession(instrumentHandle), ViReal64(manualLFSweep))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFLevelSweepManualStep(self, instrumentHandle):
        manualLFSweep = ViReal64()
        status = self.dll.rssmf_GetLFLevelSweepManualStep(ViSession(instrumentHandle), byref(manualLFSweep))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(manualLFSweep.value)

    def SetLFLevelSweepMarkerState(self, instrumentHandle, channel, state):
        status = self.dll.rssmf_SetLFLevelSweepMarkerState(
            ViSession(instrumentHandle), ViUInt32(channel), ViBoolean(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFLevelSweepMarkerState(self, instrumentHandle, channel):
        state = ViBoolean()
        status = self.dll.rssmf_GetLFLevelSweepMarkerState(ViSession(instrumentHandle), ViUInt32(channel), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetLFLevelSweepMarkerLevel(self, instrumentHandle, channel, level):
        status = self.dll.rssmf_SetLFLevelSweepMarkerLevel(
            ViSession(instrumentHandle), ViUInt32(channel), ViReal64(level)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFLevelSweepMarkerLevel(self, instrumentHandle, channel):
        level = ViReal64()
        status = self.dll.rssmf_GetLFLevelSweepMarkerLevel(ViSession(instrumentHandle), ViUInt32(channel), byref(level))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(level.value)

    def SetLFLevelSweepMarkerPolarity(self, instrumentHandle, polarity):
        status = self.dll.rssmf_SetLFLevelSweepMarkerPolarity(ViSession(instrumentHandle), ViInt32(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFLevelSweepMarkerPolarity(self, instrumentHandle):
        polarity = ViInt32()
        status = self.dll.rssmf_GetLFLevelSweepMarkerPolarity(ViSession(instrumentHandle), byref(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(polarity.value)

    def SetLFLevelSweepActiveMarker(self, instrumentHandle, activeMarker):
        status = self.dll.rssmf_SetLFLevelSweepActiveMarker(ViSession(instrumentHandle), ViInt32(activeMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLFLevelSweepActiveMarker(self, instrumentHandle):
        activeMarker = ViInt32()
        status = self.dll.rssmf_GetLFLevelSweepActiveMarker(ViSession(instrumentHandle), byref(activeMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(activeMarker.value)

    def SetLFLevelSweepAllMarkersOff(self, instrumentHandle):
        status = self.dll.rssmf_SetLFLevelSweepAllMarkersOff(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureExternalInput(self, instrumentHandle, input, coupling, impedance, bandwidth):
        status = self.dll.rssmf_ConfigureExternalInput(
            ViSession(instrumentHandle),
            ViInt32(input),
            ViInt32(coupling),
            ViInt32(impedance),
            ViInt32(bandwidth),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetExternalInputCoupling(self, instrumentHandle, input, coupling):
        status = self.dll.rssmf_SetExternalInputCoupling(ViSession(instrumentHandle), ViInt32(input), ViInt32(coupling))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetExternalInputCoupling(self, instrumentHandle, input):
        coupling = ViInt32()
        status = self.dll.rssmf_GetExternalInputCoupling(ViSession(instrumentHandle), ViInt32(input), byref(coupling))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(coupling.value)

    def SetExternalInputImpedance(self, instrumentHandle, input, impedance):
        status = self.dll.rssmf_SetExternalInputImpedance(
            ViSession(instrumentHandle), ViInt32(input), ViInt32(impedance)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetExternalInputImpedance(self, instrumentHandle, input):
        impedance = ViInt32()
        status = self.dll.rssmf_GetExternalInputImpedance(ViSession(instrumentHandle), ViInt32(input), byref(impedance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(impedance.value)

    def SetExternalInputBandwidth(self, instrumentHandle, input, bandwidth):
        status = self.dll.rssmf_SetExternalInputBandwidth(
            ViSession(instrumentHandle), ViInt32(input), ViInt32(bandwidth)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetExternalInputBandwidth(self, instrumentHandle, input):
        bandwidth = ViInt32()
        status = self.dll.rssmf_GetExternalInputBandwidth(ViSession(instrumentHandle), ViInt32(input), byref(bandwidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(bandwidth.value)

    def SetAllModulationsState(self, instrumentHandle, state):
        status = self.dll.rssmf_SetAllModulationsState(ViSession(instrumentHandle), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def confPulm(self, instrumentHandle, state, source, externalPolarity, videoPolarity):
        status = self.dll.rssmf_confPulm(
            ViSession(instrumentHandle),
            ViBoolean(state),
            ViInt32(source),
            ViInt32(externalPolarity),
            ViInt32(videoPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def confPulmGen(
        self,
        instrumentHandle,
        pulseOutputState,
        pulsePeriod,
        pulseWidth,
        pulseDelay,
        doublePulseState,
        doublePulseDelay,
        outputPolarity,
    ):
        status = self.dll.rssmf_confPulmGen(
            ViSession(instrumentHandle),
            ViBoolean(pulseOutputState),
            ViReal64(pulsePeriod),
            ViReal64(pulseWidth),
            ViReal64(pulseDelay),
            ViBoolean(doublePulseState),
            ViReal64(doublePulseDelay),
            ViInt32(outputPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPULMState(self, instrumentHandle, state):
        status = self.dll.rssmf_SetPULMState(ViSession(instrumentHandle), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMState(self, instrumentHandle):
        state = ViBoolean()
        status = self.dll.rssmf_GetPULMState(ViSession(instrumentHandle), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetPULMSource(self, instrumentHandle, source):
        status = self.dll.rssmf_SetPULMSource(ViSession(instrumentHandle), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMSource(self, instrumentHandle):
        source = ViInt32()
        status = self.dll.rssmf_GetPULMSource(ViSession(instrumentHandle), byref(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(source.value)

    def SetPULMExternalPolarity(self, instrumentHandle, polarity):
        status = self.dll.rssmf_SetPULMExternalPolarity(ViSession(instrumentHandle), ViInt32(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMExternalPolarity(self, instrumentHandle):
        polarity = ViInt32()
        status = self.dll.rssmf_GetPULMExternalPolarity(ViSession(instrumentHandle), byref(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(polarity.value)

    def SetPULMVideoPolarity(self, instrumentHandle, polarity):
        status = self.dll.rssmf_SetPULMVideoPolarity(ViSession(instrumentHandle), ViInt32(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMVideoPolarity(self, instrumentHandle):
        polarity = ViInt32()
        status = self.dll.rssmf_GetPULMVideoPolarity(ViSession(instrumentHandle), byref(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(polarity.value)

    def SetPULMSyncToInternalClock(self, instrumentHandle, synchronizeToInternalClock):
        status = self.dll.rssmf_SetPULMSyncToInternalClock(
            ViSession(instrumentHandle), ViBoolean(synchronizeToInternalClock)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMSyncToInternalClock(self, instrumentHandle):
        synchronizeToInternalClock = ViBoolean()
        status = self.dll.rssmf_GetPULMSyncToInternalClock(
            ViSession(instrumentHandle), byref(synchronizeToInternalClock)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(synchronizeToInternalClock.value)

    def SetPULMPeriod(self, instrumentHandle, pulsePeriod):
        status = self.dll.rssmf_SetPULMPeriod(ViSession(instrumentHandle), ViReal64(pulsePeriod))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMPeriod(self, instrumentHandle):
        pulsePeriod = ViReal64()
        status = self.dll.rssmf_GetPULMPeriod(ViSession(instrumentHandle), byref(pulsePeriod))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(pulsePeriod.value)

    def SetPULMWidth(self, instrumentHandle, pulseWidth):
        status = self.dll.rssmf_SetPULMWidth(ViSession(instrumentHandle), ViReal64(pulseWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMWidth(self, instrumentHandle):
        pulseWidth = ViReal64()
        status = self.dll.rssmf_GetPULMWidth(ViSession(instrumentHandle), byref(pulseWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(pulseWidth.value)

    def SetPULMDelay(self, instrumentHandle, pulseDelay):
        status = self.dll.rssmf_SetPULMDelay(ViSession(instrumentHandle), ViReal64(pulseDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMDelay(self, instrumentHandle):
        pulseDelay = ViReal64()
        status = self.dll.rssmf_GetPULMDelay(ViSession(instrumentHandle), byref(pulseDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(pulseDelay.value)

    def SetPULMDoubleState(self, instrumentHandle, doublePulseState):
        status = self.dll.rssmf_SetPULMDoubleState(ViSession(instrumentHandle), ViBoolean(doublePulseState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMDoubleState(self, instrumentHandle):
        doublePulseState = ViBoolean()
        status = self.dll.rssmf_GetPULMDoubleState(ViSession(instrumentHandle), byref(doublePulseState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(doublePulseState.value)

    def SetPULMDoubleDelay(self, instrumentHandle, doublePulseDelay):
        status = self.dll.rssmf_SetPULMDoubleDelay(ViSession(instrumentHandle), ViReal64(doublePulseDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMDoubleDelay(self, instrumentHandle):
        doublePulseDelay = ViReal64()
        status = self.dll.rssmf_GetPULMDoubleDelay(ViSession(instrumentHandle), byref(doublePulseDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(doublePulseDelay.value)

    def SetPULMDoubleWidth(self, instrumentHandle, doubleWidth):
        status = self.dll.rssmf_SetPULMDoubleWidth(ViSession(instrumentHandle), ViReal64(doubleWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMDoubleWidth(self, instrumentHandle):
        doubleWidth = ViReal64()
        status = self.dll.rssmf_GetPULMDoubleWidth(ViSession(instrumentHandle), byref(doubleWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(doubleWidth.value)

    def SetPULMGeneratorOutputState(self, instrumentHandle, outputState):
        status = self.dll.rssmf_SetPULMGeneratorOutputState(ViSession(instrumentHandle), ViBoolean(outputState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMGeneratorOutputState(self, instrumentHandle):
        outputState = ViBoolean()
        status = self.dll.rssmf_GetPULMGeneratorOutputState(ViSession(instrumentHandle), byref(outputState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(outputState.value)

    def SetPULMOutputPolarity(self, instrumentHandle, polarity):
        status = self.dll.rssmf_SetPULMOutputPolarity(ViSession(instrumentHandle), ViInt32(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMOutputPolarity(self, instrumentHandle):
        polarity = ViInt32()
        status = self.dll.rssmf_GetPULMOutputPolarity(ViSession(instrumentHandle), byref(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(polarity.value)

    def PULMPulseTrainCatalog(self, instrumentHandle, directoryPath, arraySize):
        catalogList = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_PULMPulseTrainCatalog(
            ViSession(instrumentHandle),
            ViString(directoryPath),
            ViInt32(arraySize),
            catalogList,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(catalogList)

    def PULMDeletePulseTrainFile(self, instrumentHandle, fileName):
        status = self.dll.rssmf_PULMDeletePulseTrainFile(ViSession(instrumentHandle), ViString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PULMSelectPulseTrainFile(self, instrumentHandle, fileName):
        status = self.dll.rssmf_PULMSelectPulseTrainFile(ViSession(instrumentHandle), ViString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMPulseTrainLength(self, instrumentHandle):
        pulseTrainLength = ViInt32()
        status = self.dll.rssmf_GetPULMPulseTrainLength(ViSession(instrumentHandle), byref(pulseTrainLength))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(pulseTrainLength.value)

    def SetPULMMode(self, instrumentHandle, mode):
        status = self.dll.rssmf_SetPULMMode(ViSession(instrumentHandle), ViInt32(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMMode(self, instrumentHandle):
        mode = ViInt32()
        status = self.dll.rssmf_GetPULMMode(ViSession(instrumentHandle), byref(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(mode.value)

    def SetPULMTrainOfftime(self, instrumentHandle, arraySize):
        offtime = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_SetPULMTrainOfftime(ViSession(instrumentHandle), ViInt32(arraySize), offtime)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(offtime)

    def GetPULMTrainOfftime(self, instrumentHandle, arraySize):
        offtime = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_GetPULMTrainOfftime(ViSession(instrumentHandle), ViInt32(arraySize), offtime)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(offtime)

    def GetTrainOfftimePoints(self, instrumentHandle):
        numberOfOfftimePoints = ViInt32()
        status = self.dll.rssmf_GetTrainOfftimePoints(ViSession(instrumentHandle), byref(numberOfOfftimePoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(numberOfOfftimePoints.value)

    def SetPULMTrainOntime(self, instrumentHandle, arraySize):
        ontime = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_SetPULMTrainOntime(ViSession(instrumentHandle), ViInt32(arraySize), ontime)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(ontime)

    def GetPULMTrainOntime(self, instrumentHandle, arraySize):
        ontime = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_GetPULMTrainOntime(ViSession(instrumentHandle), ViInt32(arraySize), ontime)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(ontime)

    def GetTrainOntimePoints(self, instrumentHandle):
        numberOfOntimePoints = ViInt32()
        status = self.dll.rssmf_GetTrainOntimePoints(ViSession(instrumentHandle), byref(numberOfOntimePoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(numberOfOntimePoints.value)

    def SetPULMTrainRepetition(self, instrumentHandle, arraySize):
        repetition = ARRAY_ViInt32(arraySize)
        status = self.dll.rssmf_SetPULMTrainRepetition(ViSession(instrumentHandle), ViInt32(arraySize), repetition)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return repetition

    def GetPULMTrainRepetition(self, instrumentHandle, arraySize):
        repetition = ARRAY_ViInt32(arraySize)
        status = self.dll.rssmf_GetPULMTrainRepetition(ViSession(instrumentHandle), ViInt32(arraySize), repetition)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return repetition

    def SetPULMTrainImportExportListMode(self, instrumentHandle, listMode):
        status = self.dll.rssmf_SetPULMTrainImportExportListMode(ViSession(instrumentHandle), ViInt32(listMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMTrainImportExportListMode(self, instrumentHandle):
        listMode = ViInt32()
        status = self.dll.rssmf_GetPULMTrainImportExportListMode(ViSession(instrumentHandle), byref(listMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(listMode.value)

    def SetPULMTrainImportExportListFile(self, instrumentHandle, sourceFile):
        status = self.dll.rssmf_SetPULMTrainImportExportListFile(ViSession(instrumentHandle), ViString(sourceFile))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMTrainImportExportListFile(self, instrumentHandle):
        sourceFile = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetPULMTrainImportExportListFile(ViSession(instrumentHandle), sourceFile)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(sourceFile)

    def PULMTrainImportExportExecute(self, instrumentHandle):
        status = self.dll.rssmf_PULMTrainImportExportExecute(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPULMTrainImportExportASCIIFile(self, instrumentHandle, ASCIISourceFile):
        status = self.dll.rssmf_SetPULMTrainImportExportASCIIFile(
            ViSession(instrumentHandle), ViString(ASCIISourceFile)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMTrainImportExportASCIIFile(self, instrumentHandle):
        ASCIISourceFile = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetPULMTrainImportExportASCIIFile(ViSession(instrumentHandle), ASCIISourceFile)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ASCIISourceFile)

    def SetPULMTrainImportExportASCIIExtension(self, instrumentHandle, extension):
        status = self.dll.rssmf_SetPULMTrainImportExportASCIIExtension(ViSession(instrumentHandle), ViInt32(extension))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMTrainImportExportASCIIExtension(self, instrumentHandle):
        extension = ViInt32()
        status = self.dll.rssmf_GetPULMTrainImportExportASCIIExtension(ViSession(instrumentHandle), byref(extension))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(extension.value)

    def SetPULMTrainImportExportASCIIColumnSeparator(self, instrumentHandle, separator):
        status = self.dll.rssmf_SetPULMTrainImportExportASCIIColumnSeparator(
            ViSession(instrumentHandle), ViInt32(separator)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMTrainImportExportASCIIColumnSeparator(self, instrumentHandle):
        separator = ViInt32()
        status = self.dll.rssmf_GetPULMTrainImportExportASCIIColumnSeparator(
            ViSession(instrumentHandle), byref(separator)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(separator.value)

    def SetPULMTrainImportExportASCIIDecimalSeparator(self, instrumentHandle, decimalSeparator):
        status = self.dll.rssmf_SetPULMTrainImportExportASCIIDecimalSeparator(
            ViSession(instrumentHandle), ViInt32(decimalSeparator)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMTrainImportExportASCIIDecimalSeparator(self, instrumentHandle):
        decimalSeparator = ViInt32()
        status = self.dll.rssmf_GetPULMTrainImportExportASCIIDecimalSeparator(
            ViSession(instrumentHandle), byref(decimalSeparator)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(decimalSeparator.value)

    def PULMTrainImportExportCatalog(self, instrumentHandle, arraySize):
        catalogList = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_PULMTrainImportExportCatalog(
            ViSession(instrumentHandle), ViInt32(arraySize), catalogList
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(catalogList)

    def confPulmTrigger(
        self,
        instrumentHandle,
        triggerLevel,
        externalInputImpedance,
        triggerMode,
        extTriggerInputSlope,
        gateInputPolarity,
    ):
        status = self.dll.rssmf_confPulmTrigger(
            ViSession(instrumentHandle),
            ViInt32(triggerLevel),
            ViInt32(externalInputImpedance),
            ViInt32(triggerMode),
            ViInt32(extTriggerInputSlope),
            ViInt32(gateInputPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPULMTriggerLevel(self, instrumentHandle, triggerLevel):
        status = self.dll.rssmf_SetPULMTriggerLevel(ViSession(instrumentHandle), ViInt32(triggerLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMTriggerLevel(self, instrumentHandle):
        triggerLevel = ViInt32()
        status = self.dll.rssmf_GetPULMTriggerLevel(ViSession(instrumentHandle), byref(triggerLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(triggerLevel.value)

    def SetPULMExternalInputImpedance(self, instrumentHandle, externalInputImpedance):
        status = self.dll.rssmf_SetPULMExternalInputImpedance(
            ViSession(instrumentHandle), ViInt32(externalInputImpedance)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMExternalInputImpedance(self, instrumentHandle):
        externalInputImpedance = ViInt32()
        status = self.dll.rssmf_GetPULMExternalInputImpedance(
            ViSession(instrumentHandle), byref(externalInputImpedance)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(externalInputImpedance.value)

    def SetPULMTriggerMode(self, instrumentHandle, triggerMode):
        status = self.dll.rssmf_SetPULMTriggerMode(ViSession(instrumentHandle), ViInt32(triggerMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMTriggerMode(self, instrumentHandle):
        triggerMode = ViInt32()
        status = self.dll.rssmf_GetPULMTriggerMode(ViSession(instrumentHandle), byref(triggerMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(triggerMode.value)

    def SetPULMExtTriggerInputSlope(self, instrumentHandle, extTriggerInputSlope):
        status = self.dll.rssmf_SetPULMExtTriggerInputSlope(ViSession(instrumentHandle), ViInt32(extTriggerInputSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMExtTriggerInputSlope(self, instrumentHandle):
        extTriggerInputSlope = ViInt32()
        status = self.dll.rssmf_GetPULMExtTriggerInputSlope(ViSession(instrumentHandle), byref(extTriggerInputSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(extTriggerInputSlope.value)

    def SetPULMGateInputPolarity(self, instrumentHandle, polarity):
        status = self.dll.rssmf_SetPULMGateInputPolarity(ViSession(instrumentHandle), ViInt32(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPULMGateInputPolarity(self, instrumentHandle):
        polarity = ViInt32()
        status = self.dll.rssmf_GetPULMGateInputPolarity(ViSession(instrumentHandle), byref(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(polarity.value)

    def configAM(
        self,
        instrumentHandle,
        channel,
        AMState,
        AMSource,
        AMDepth,
        scanState,
        AMSensitivity,
        ratio,
    ):
        status = self.dll.rssmf_configAM(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViBoolean(AMState),
            ViInt32(AMSource),
            ViReal64(AMDepth),
            ViBoolean(scanState),
            ViReal64(AMSensitivity),
            ViReal64(ratio),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAMState(self, instrumentHandle, channel, AMState):
        status = self.dll.rssmf_SetAMState(ViSession(instrumentHandle), ViInt32(channel), ViBoolean(AMState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAMState(self, instrumentHandle, channel):
        AMState = ViBoolean()
        status = self.dll.rssmf_GetAMState(ViSession(instrumentHandle), ViInt32(channel), byref(AMState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AMState.value)

    def SetAMSource(self, instrumentHandle, channel, AMSource):
        status = self.dll.rssmf_SetAMSource(ViSession(instrumentHandle), ViInt32(channel), ViInt32(AMSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAMSource(self, instrumentHandle, channel):
        AMSource = ViInt32()
        status = self.dll.rssmf_GetAMSource(ViSession(instrumentHandle), ViInt32(channel), byref(AMSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AMSource.value)

    def SetAMDepth(self, instrumentHandle, channel, AMDepth):
        status = self.dll.rssmf_SetAMDepth(ViSession(instrumentHandle), ViInt32(channel), ViReal64(AMDepth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAMDepth(self, instrumentHandle, channel):
        AMDepth = ViReal64()
        status = self.dll.rssmf_GetAMDepth(ViSession(instrumentHandle), ViInt32(channel), byref(AMDepth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AMDepth.value)

    def SetAMSensitivity(self, instrumentHandle, channel, AMSensitivity):
        status = self.dll.rssmf_SetAMSensitivity(ViSession(instrumentHandle), ViInt32(channel), ViReal64(AMSensitivity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAMSensitivity(self, instrumentHandle, channel):
        AMSensitivity = ViReal64()
        status = self.dll.rssmf_GetAMSensitivity(ViSession(instrumentHandle), ViInt32(channel), byref(AMSensitivity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AMSensitivity.value)

    def SetAMScanState(self, instrumentHandle, scanState):
        status = self.dll.rssmf_SetAMScanState(ViSession(instrumentHandle), ViBoolean(scanState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAMScanState(self, instrumentHandle):
        scanState = ViBoolean()
        status = self.dll.rssmf_GetAMScanState(ViSession(instrumentHandle), byref(scanState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(scanState.value)

    def SetAMRatio(self, instrumentHandle, ratio):
        status = self.dll.rssmf_SetAMRatio(ViSession(instrumentHandle), ViReal64(ratio))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAMRatio(self, instrumentHandle):
        ratio = ViReal64()
        status = self.dll.rssmf_GetAMRatio(ViSession(instrumentHandle), byref(ratio))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(ratio.value)

    def confFM(self, instrumentHandle, channel, state, FMSource, deviation, ratio, mode):
        status = self.dll.rssmf_confFM(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViBoolean(state),
            ViInt32(FMSource),
            ViReal64(deviation),
            ViReal64(ratio),
            ViInt32(mode),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetFMState(self, instrumentHandle, channel, state):
        status = self.dll.rssmf_SetFMState(ViSession(instrumentHandle), ViInt32(channel), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFMState(self, instrumentHandle, channel):
        state = ViBoolean()
        status = self.dll.rssmf_GetFMState(ViSession(instrumentHandle), ViInt32(channel), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetFMSource(self, instrumentHandle, channel, FMSource):
        status = self.dll.rssmf_SetFMSource(ViSession(instrumentHandle), ViInt32(channel), ViInt32(FMSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFMSource(self, instrumentHandle, channel):
        FMSource = ViInt32()
        status = self.dll.rssmf_GetFMSource(ViSession(instrumentHandle), ViInt32(channel), byref(FMSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(FMSource.value)

    def SetFMDeviation(self, instrumentHandle, channel, deviation):
        status = self.dll.rssmf_SetFMDeviation(ViSession(instrumentHandle), ViInt32(channel), ViReal64(deviation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFMDeviation(self, instrumentHandle, channel):
        deviation = ViReal64()
        status = self.dll.rssmf_GetFMDeviation(ViSession(instrumentHandle), ViInt32(channel), byref(deviation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(deviation.value)

    def SetFMRatio(self, instrumentHandle, ratio):
        status = self.dll.rssmf_SetFMRatio(ViSession(instrumentHandle), ViReal64(ratio))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFMRatio(self, instrumentHandle):
        ratio = ViReal64()
        status = self.dll.rssmf_GetFMRatio(ViSession(instrumentHandle), byref(ratio))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(ratio.value)

    def SetFMMode(self, instrumentHandle, mode):
        status = self.dll.rssmf_SetFMMode(ViSession(instrumentHandle), ViInt32(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFMMode(self, instrumentHandle):
        mode = ViInt32()
        status = self.dll.rssmf_GetFMMode(ViSession(instrumentHandle), byref(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(mode.value)

    def confPM(self, instrumentHandle, channel, state, PMSource, deviation, ratio, mode):
        status = self.dll.rssmf_confPM(
            ViSession(instrumentHandle),
            ViInt32(channel),
            ViBoolean(state),
            ViInt32(PMSource),
            ViReal64(deviation),
            ViReal64(ratio),
            ViInt32(mode),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPMState(self, instrumentHandle, channel, state):
        status = self.dll.rssmf_SetPMState(ViSession(instrumentHandle), ViInt32(channel), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPMState(self, instrumentHandle, channel):
        state = ViBoolean()
        status = self.dll.rssmf_GetPMState(ViSession(instrumentHandle), ViInt32(channel), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetPMSource(self, instrumentHandle, channel, PMSource):
        status = self.dll.rssmf_SetPMSource(ViSession(instrumentHandle), ViInt32(channel), ViInt32(PMSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPMSource(self, instrumentHandle, channel):
        PMSource = ViInt32()
        status = self.dll.rssmf_GetPMSource(ViSession(instrumentHandle), ViInt32(channel), byref(PMSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(PMSource.value)

    def SetPMDeviation(self, instrumentHandle, channel, deviation):
        status = self.dll.rssmf_SetPMDeviation(ViSession(instrumentHandle), ViInt32(channel), ViReal64(deviation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPMDeviation(self, instrumentHandle, channel):
        deviation = ViReal64()
        status = self.dll.rssmf_GetPMDeviation(ViSession(instrumentHandle), ViInt32(channel), byref(deviation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(deviation.value)

    def SetPMRatio(self, instrumentHandle, ratio):
        status = self.dll.rssmf_SetPMRatio(ViSession(instrumentHandle), ViReal64(ratio))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPMRatio(self, instrumentHandle):
        ratio = ViReal64()
        status = self.dll.rssmf_GetPMRatio(ViSession(instrumentHandle), byref(ratio))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(ratio.value)

    def SetPMMode(self, instrumentHandle, mode):
        status = self.dll.rssmf_SetPMMode(ViSession(instrumentHandle), ViInt32(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPMMode(self, instrumentHandle):
        mode = ViInt32()
        status = self.dll.rssmf_GetPMMode(ViSession(instrumentHandle), byref(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(mode.value)

    def SetDMExternalInputsPolarity(self, instrumentHandle, channel, polarity):
        status = self.dll.rssmf_SetDMExternalInputsPolarity(
            ViSession(instrumentHandle), ViInt32(channel), ViInt32(polarity)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetDMExternalInputsPolarity(self, instrumentHandle, channel):
        polarity = ViInt32()
        status = self.dll.rssmf_GetDMExternalInputsPolarity(
            ViSession(instrumentHandle), ViInt32(channel), byref(polarity)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(polarity.value)

    def configASK(self, instrumentHandle, ASKState, ASKSource, ASKDepth):
        status = self.dll.rssmf_configASK(
            ViSession(instrumentHandle),
            ViBoolean(ASKState),
            ViInt32(ASKSource),
            ViReal64(ASKDepth),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetASKState(self, instrumentHandle, ASKState):
        status = self.dll.rssmf_SetASKState(ViSession(instrumentHandle), ViBoolean(ASKState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetASKState(self, instrumentHandle):
        ASKState = ViBoolean()
        status = self.dll.rssmf_GetASKState(ViSession(instrumentHandle), byref(ASKState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(ASKState.value)

    def SetASKSource(self, instrumentHandle, ASKSource):
        status = self.dll.rssmf_SetASKSource(ViSession(instrumentHandle), ViInt32(ASKSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetASKSource(self, instrumentHandle):
        ASKSource = ViInt32()
        status = self.dll.rssmf_GetASKSource(ViSession(instrumentHandle), byref(ASKSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ASKSource.value)

    def SetASKDepth(self, instrumentHandle, ASKDepth):
        status = self.dll.rssmf_SetASKDepth(ViSession(instrumentHandle), ViReal64(ASKDepth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetASKDepth(self, instrumentHandle):
        ASKDepth = ViReal64()
        status = self.dll.rssmf_GetASKDepth(ViSession(instrumentHandle), byref(ASKDepth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(ASKDepth.value)

    def configFSK(self, instrumentHandle, FSKState, FSKSource, FSKDeviation):
        status = self.dll.rssmf_configFSK(
            ViSession(instrumentHandle),
            ViBoolean(FSKState),
            ViInt32(FSKSource),
            ViReal64(FSKDeviation),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetFSKState(self, instrumentHandle, FSKState):
        status = self.dll.rssmf_SetFSKState(ViSession(instrumentHandle), ViBoolean(FSKState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFSKState(self, instrumentHandle):
        FSKState = ViBoolean()
        status = self.dll.rssmf_GetFSKState(ViSession(instrumentHandle), byref(FSKState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(FSKState.value)

    def SetFSKSource(self, instrumentHandle, FSKSource):
        status = self.dll.rssmf_SetFSKSource(ViSession(instrumentHandle), ViInt32(FSKSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFSKSource(self, instrumentHandle):
        FSKSource = ViInt32()
        status = self.dll.rssmf_GetFSKSource(ViSession(instrumentHandle), byref(FSKSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(FSKSource.value)

    def SetFSKDeviation(self, instrumentHandle, FSKDeviation):
        status = self.dll.rssmf_SetFSKDeviation(ViSession(instrumentHandle), ViReal64(FSKDeviation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFSKDeviation(self, instrumentHandle):
        FSKDeviation = ViReal64()
        status = self.dll.rssmf_GetFSKDeviation(ViSession(instrumentHandle), byref(FSKDeviation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(FSKDeviation.value)

    def configPSK(self, instrumentHandle, PSKState, PSKSource, PSKDeviation):
        status = self.dll.rssmf_configPSK(
            ViSession(instrumentHandle),
            ViBoolean(PSKState),
            ViInt32(PSKSource),
            ViReal64(PSKDeviation),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPSKState(self, instrumentHandle, PSKState):
        status = self.dll.rssmf_SetPSKState(ViSession(instrumentHandle), ViBoolean(PSKState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPSKState(self, instrumentHandle):
        PSKState = ViBoolean()
        status = self.dll.rssmf_GetPSKState(ViSession(instrumentHandle), byref(PSKState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(PSKState.value)

    def SetPSKSource(self, instrumentHandle, PSKSource):
        status = self.dll.rssmf_SetPSKSource(ViSession(instrumentHandle), ViInt32(PSKSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPSKSource(self, instrumentHandle):
        PSKSource = ViInt32()
        status = self.dll.rssmf_GetPSKSource(ViSession(instrumentHandle), byref(PSKSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(PSKSource.value)

    def SetPSKDeviation(self, instrumentHandle, PSKDeviation):
        status = self.dll.rssmf_SetPSKDeviation(ViSession(instrumentHandle), ViReal64(PSKDeviation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPSKDeviation(self, instrumentHandle):
        PSKDeviation = ViReal64()
        status = self.dll.rssmf_GetPSKDeviation(ViSession(instrumentHandle), byref(PSKDeviation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(PSKDeviation.value)

    def confCHIRP(
        self,
        instrumentHandle,
        CHRIPState,
        direction,
        bandwidth,
        pulsePeriod,
        pulseWidth,
        triggerMode,
        triggerSlope,
        impedance,
    ):
        status = self.dll.rssmf_confCHIRP(
            ViSession(instrumentHandle),
            ViBoolean(CHRIPState),
            ViInt32(direction),
            ViReal64(bandwidth),
            ViReal64(pulsePeriod),
            ViReal64(pulseWidth),
            ViInt32(triggerMode),
            ViInt32(triggerSlope),
            ViInt32(impedance),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def confCHIRPTrigger(
        self,
        instrumentHandle,
        triggerSlope,
        gatePolarity,
        impedance,
        triggerMode,
        triggerLevel,
    ):
        status = self.dll.rssmf_confCHIRPTrigger(
            ViSession(instrumentHandle),
            ViInt32(triggerSlope),
            ViInt32(gatePolarity),
            ViInt32(impedance),
            ViInt32(triggerMode),
            ViInt32(triggerLevel),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetCHIRPTriggerMode(self, instrumentHandle, triggerMode):
        status = self.dll.rssmf_SetCHIRPTriggerMode(ViSession(instrumentHandle), ViInt32(triggerMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCHIRPTriggerMode(self, instrumentHandle):
        triggerMode = ViInt32()
        status = self.dll.rssmf_GetCHIRPTriggerMode(ViSession(instrumentHandle), byref(triggerMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(triggerMode.value)

    def SetCHIRPTriggerSlope(self, instrumentHandle, triggerSlope):
        status = self.dll.rssmf_SetCHIRPTriggerSlope(ViSession(instrumentHandle), ViInt32(triggerSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCHIRPTriggerSlope(self, instrumentHandle):
        triggerSlope = ViInt32()
        status = self.dll.rssmf_GetCHIRPTriggerSlope(ViSession(instrumentHandle), byref(triggerSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(triggerSlope.value)

    def SetCHIRPTriggerLevel(self, instrumentHandle, triggerLevel):
        status = self.dll.rssmf_SetCHIRPTriggerLevel(ViSession(instrumentHandle), ViInt32(triggerLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCHIRPTriggerLevel(self, instrumentHandle):
        triggerLevel = ViInt32()
        status = self.dll.rssmf_GetCHIRPTriggerLevel(ViSession(instrumentHandle), byref(triggerLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(triggerLevel.value)

    def SetCHIRPGatePolarity(self, instrumentHandle, gatePolarity):
        status = self.dll.rssmf_SetCHIRPGatePolarity(ViSession(instrumentHandle), ViInt32(gatePolarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCHIRPGatePolarity(self, instrumentHandle):
        gatePolarity = ViInt32()
        status = self.dll.rssmf_GetCHIRPGatePolarity(ViSession(instrumentHandle), byref(gatePolarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(gatePolarity.value)

    def SetCHIRPExternalImpedance(self, instrumentHandle, impedance):
        status = self.dll.rssmf_SetCHIRPExternalImpedance(ViSession(instrumentHandle), ViInt32(impedance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCHIRPExternalImpedance(self, instrumentHandle):
        impedance = ViInt32()
        status = self.dll.rssmf_GetCHIRPExternalImpedance(ViSession(instrumentHandle), byref(impedance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(impedance.value)

    def SetCHIRPDirection(self, instrumentHandle, direction):
        status = self.dll.rssmf_SetCHIRPDirection(ViSession(instrumentHandle), ViInt32(direction))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCHIRPDirection(self, instrumentHandle):
        direction = ViInt32()
        status = self.dll.rssmf_GetCHIRPDirection(ViSession(instrumentHandle), byref(direction))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(direction.value)

    def SetCHIRPState(self, instrumentHandle, CHRIPState):
        status = self.dll.rssmf_SetCHIRPState(ViSession(instrumentHandle), ViBoolean(CHRIPState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCHIRPState(self, instrumentHandle):
        CHRIPState = ViBoolean()
        status = self.dll.rssmf_GetCHIRPState(ViSession(instrumentHandle), byref(CHRIPState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CHRIPState.value)

    def SetCHIRPBandwidth(self, instrumentHandle, bandwidth):
        status = self.dll.rssmf_SetCHIRPBandwidth(ViSession(instrumentHandle), ViReal64(bandwidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCHIRPBandwidth(self, instrumentHandle):
        bandwidth = ViReal64()
        status = self.dll.rssmf_GetCHIRPBandwidth(ViSession(instrumentHandle), byref(bandwidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(bandwidth.value)

    def SetCHIRPPulsePeriod(self, instrumentHandle, pulsePeriod):
        status = self.dll.rssmf_SetCHIRPPulsePeriod(ViSession(instrumentHandle), ViReal64(pulsePeriod))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCHIRPPulsePeriod(self, instrumentHandle):
        pulsePeriod = ViReal64()
        status = self.dll.rssmf_GetCHIRPPulsePeriod(ViSession(instrumentHandle), byref(pulsePeriod))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(pulsePeriod.value)

    def SetCHIRPPulseWidth(self, instrumentHandle, pulseWidth):
        status = self.dll.rssmf_SetCHIRPPulseWidth(ViSession(instrumentHandle), ViReal64(pulseWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCHIRPPulseWidth(self, instrumentHandle):
        pulseWidth = ViReal64()
        status = self.dll.rssmf_GetCHIRPPulseWidth(ViSession(instrumentHandle), byref(pulseWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(pulseWidth.value)

    def GetCHIRPCompressionRatio(self, instrumentHandle):
        compressionRatio = ViReal64()
        status = self.dll.rssmf_GetCHIRPCompressionRatio(ViSession(instrumentHandle), byref(compressionRatio))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(compressionRatio.value)

    def SetOutputState(self, instrumentHandle, RFOutputState):
        status = self.dll.rssmf_SetOutputState(ViSession(instrumentHandle), ViBoolean(RFOutputState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetOutputState(self, instrumentHandle):
        RFOutputState = ViBoolean()
        status = self.dll.rssmf_GetOutputState(ViSession(instrumentHandle), byref(RFOutputState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RFOutputState.value)

    def confRFFreq(
        self,
        instrumentHandle,
        frequency,
        offset,
        multiplier,
        variationActive,
        variationStep,
    ):
        status = self.dll.rssmf_confRFFreq(
            ViSession(instrumentHandle),
            ViReal64(frequency),
            ViReal64(offset),
            ViReal64(multiplier),
            ViBoolean(variationActive),
            ViReal64(variationStep),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetRFFrequency(self, instrumentHandle, frequency):
        status = self.dll.rssmf_SetRFFrequency(ViSession(instrumentHandle), ViReal64(frequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFFrequency(self, instrumentHandle):
        frequency = ViReal64()
        status = self.dll.rssmf_GetRFFrequency(ViSession(instrumentHandle), byref(frequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(frequency.value)

    def SetRFFrequencyOffset(self, instrumentHandle, frequencyOffset):
        status = self.dll.rssmf_SetRFFrequencyOffset(ViSession(instrumentHandle), ViReal64(frequencyOffset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFFrequencyOffset(self, instrumentHandle):
        frequencyOffset = ViReal64()
        status = self.dll.rssmf_GetRFFrequencyOffset(ViSession(instrumentHandle), byref(frequencyOffset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(frequencyOffset.value)

    def SetRFFrequencyMultiplier(self, instrumentHandle, multiplier):
        status = self.dll.rssmf_SetRFFrequencyMultiplier(ViSession(instrumentHandle), ViReal64(multiplier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFFrequencyMultiplier(self, instrumentHandle):
        multiplier = ViReal64()
        status = self.dll.rssmf_GetRFFrequencyMultiplier(ViSession(instrumentHandle), byref(multiplier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(multiplier.value)

    def SetRFVariationActive(self, instrumentHandle, variationActive):
        status = self.dll.rssmf_SetRFVariationActive(ViSession(instrumentHandle), ViBoolean(variationActive))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFVariationActive(self, instrumentHandle):
        variationActive = ViBoolean()
        status = self.dll.rssmf_GetRFVariationActive(ViSession(instrumentHandle), byref(variationActive))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(variationActive.value)

    def SetRFVariationStep(self, instrumentHandle, variationStep):
        status = self.dll.rssmf_SetRFVariationStep(ViSession(instrumentHandle), ViReal64(variationStep))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFVariationStep(self, instrumentHandle):
        variationStep = ViReal64()
        status = self.dll.rssmf_GetRFVariationStep(ViSession(instrumentHandle), byref(variationStep))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(variationStep.value)

    def SetRFFrequencyonRecall(self, instrumentHandle, RFFrequencyOnRecall):
        status = self.dll.rssmf_SetRFFrequencyonRecall(ViSession(instrumentHandle), ViInt32(RFFrequencyOnRecall))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFFrequencyonRecall(self, instrumentHandle):
        RFFrequencyOnRecall = ViInt32()
        status = self.dll.rssmf_GetRFFrequencyonRecall(ViSession(instrumentHandle), byref(RFFrequencyOnRecall))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RFFrequencyOnRecall.value)

    def SetRFDeltaPhase(self, instrumentHandle, deltaPhase):
        status = self.dll.rssmf_SetRFDeltaPhase(ViSession(instrumentHandle), ViReal64(deltaPhase))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFDeltaPhase(self, instrumentHandle):
        deltaPhase = ViReal64()
        status = self.dll.rssmf_GetRFDeltaPhase(ViSession(instrumentHandle), byref(deltaPhase))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(deltaPhase.value)

    def ResetRFDeltaPhaseDisplay(self, instrumentHandle):
        status = self.dll.rssmf_ResetRFDeltaPhaseDisplay(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def confFrequencySweep(
        self,
        instrumentHandle,
        mode,
        frequencySetting,
        centerFrequency,
        span,
        startFrequency,
        stopFrequency,
        spacing,
        step,
        dwellTime,
    ):
        status = self.dll.rssmf_confFrequencySweep(
            ViSession(instrumentHandle),
            ViInt32(mode),
            ViInt32(frequencySetting),
            ViReal64(centerFrequency),
            ViReal64(span),
            ViReal64(startFrequency),
            ViReal64(stopFrequency),
            ViInt32(spacing),
            ViReal64(step),
            ViReal64(dwellTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencySweepExecute(self, instrumentHandle):
        status = self.dll.rssmf_FrequencySweepExecute(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetInstrumentTriggerInputSlope(self, instrumentHandle, inputTriggerSlope):
        status = self.dll.rssmf_SetInstrumentTriggerInputSlope(ViSession(instrumentHandle), ViInt32(inputTriggerSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencySweepMarker(
        self,
        instrumentHandle,
        channel,
        state,
        amplitudeMarker,
        frequency,
        amplitude,
        polarity,
        activeMarker,
    ):
        status = self.dll.rssmf_ConfigureFrequencySweepMarker(
            ViSession(instrumentHandle),
            ViUInt32(channel),
            ViBoolean(state),
            ViBoolean(amplitudeMarker),
            ViReal64(frequency),
            ViReal64(amplitude),
            ViInt32(polarity),
            ViInt32(activeMarker),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetFrequencySweepMode(self, instrumentHandle, mode):
        status = self.dll.rssmf_SetFrequencySweepMode(ViSession(instrumentHandle), ViInt32(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetFrequencySweepStartFreq(self, instrumentHandle, startFrequency):
        status = self.dll.rssmf_SetFrequencySweepStartFreq(ViSession(instrumentHandle), ViReal64(startFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepStartFreq(self, instrumentHandle):
        startFrequency = ViReal64()
        status = self.dll.rssmf_GetFrequencySweepStartFreq(ViSession(instrumentHandle), byref(startFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(startFrequency.value)

    def SetFrequencySweepStopFreq(self, instrumentHandle, stopFrequency):
        status = self.dll.rssmf_SetFrequencySweepStopFreq(ViSession(instrumentHandle), ViReal64(stopFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepStopFreq(self, instrumentHandle):
        stopFrequency = ViReal64()
        status = self.dll.rssmf_GetFrequencySweepStopFreq(ViSession(instrumentHandle), byref(stopFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(stopFrequency.value)

    def SetFrequencySweepCenterFreq(self, instrumentHandle, centerFrequency):
        status = self.dll.rssmf_SetFrequencySweepCenterFreq(ViSession(instrumentHandle), ViReal64(centerFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepCenterFreq(self, instrumentHandle):
        centerFrequency = ViReal64()
        status = self.dll.rssmf_GetFrequencySweepCenterFreq(ViSession(instrumentHandle), byref(centerFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(centerFrequency.value)

    def SetFrequencySweepSpan(self, instrumentHandle, span):
        status = self.dll.rssmf_SetFrequencySweepSpan(ViSession(instrumentHandle), ViReal64(span))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepSpan(self, instrumentHandle):
        span = ViReal64()
        status = self.dll.rssmf_GetFrequencySweepSpan(ViSession(instrumentHandle), byref(span))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(span.value)

    def SetFrequencySweepSpacing(self, instrumentHandle, spacing):
        status = self.dll.rssmf_SetFrequencySweepSpacing(ViSession(instrumentHandle), ViInt32(spacing))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepSpacing(self, instrumentHandle):
        spacing = ViInt32()
        status = self.dll.rssmf_GetFrequencySweepSpacing(ViSession(instrumentHandle), byref(spacing))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(spacing.value)

    def SetFrequencySweepStepLin(self, instrumentHandle, stepLin):
        status = self.dll.rssmf_SetFrequencySweepStepLin(ViSession(instrumentHandle), ViReal64(stepLin))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepStepLin(self, instrumentHandle):
        stepLin = ViReal64()
        status = self.dll.rssmf_GetFrequencySweepStepLin(ViSession(instrumentHandle), byref(stepLin))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(stepLin.value)

    def SetFrequencySweepStepLog(self, instrumentHandle, stepLog):
        status = self.dll.rssmf_SetFrequencySweepStepLog(ViSession(instrumentHandle), ViReal64(stepLog))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepStepLog(self, instrumentHandle):
        stepLog = ViReal64()
        status = self.dll.rssmf_GetFrequencySweepStepLog(ViSession(instrumentHandle), byref(stepLog))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(stepLog.value)

    def SetFrequencySweepTime(self, instrumentHandle, time):
        status = self.dll.rssmf_SetFrequencySweepTime(ViSession(instrumentHandle), ViReal64(time))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepTime(self, instrumentHandle):
        time = ViReal64()
        status = self.dll.rssmf_GetFrequencySweepTime(ViSession(instrumentHandle), byref(time))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(time.value)

    def SetFrequencySweepRampTime(self, instrumentHandle, rampTime):
        status = self.dll.rssmf_SetFrequencySweepRampTime(ViSession(instrumentHandle), ViReal64(rampTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepRampTime(self, instrumentHandle):
        rampTime = ViReal64()
        status = self.dll.rssmf_GetFrequencySweepRampTime(ViSession(instrumentHandle), byref(rampTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(rampTime.value)

    def SetFrequencySweepDwellTime(self, instrumentHandle, dwellTime):
        status = self.dll.rssmf_SetFrequencySweepDwellTime(ViSession(instrumentHandle), ViReal64(dwellTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepDwellTime(self, instrumentHandle):
        dwellTime = ViReal64()
        status = self.dll.rssmf_GetFrequencySweepDwellTime(ViSession(instrumentHandle), byref(dwellTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(dwellTime.value)

    def SetFrequencySweepManualStep(self, instrumentHandle, manualStep):
        status = self.dll.rssmf_SetFrequencySweepManualStep(ViSession(instrumentHandle), ViReal64(manualStep))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepManualStep(self, instrumentHandle):
        manualStep = ViReal64()
        status = self.dll.rssmf_GetFrequencySweepManualStep(ViSession(instrumentHandle), byref(manualStep))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(manualStep.value)

    def SetFrequencySweepPoints(self, instrumentHandle, frequencySweepPoints):
        status = self.dll.rssmf_SetFrequencySweepPoints(ViSession(instrumentHandle), ViInt32(frequencySweepPoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepPoints(self, instrumentHandle):
        frequencySweepPoints = ViInt32()
        status = self.dll.rssmf_GetFrequencySweepPoints(ViSession(instrumentHandle), byref(frequencySweepPoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(frequencySweepPoints.value)

    def GetInstrumentTriggerInputSlope(self, instrumentHandle):
        inputTriggerSlope = ViInt32()
        status = self.dll.rssmf_GetInstrumentTriggerInputSlope(ViSession(instrumentHandle), byref(inputTriggerSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(inputTriggerSlope.value)

    def SetFrequencySweepShape(self, instrumentHandle, shape):
        status = self.dll.rssmf_SetFrequencySweepShape(ViSession(instrumentHandle), ViInt32(shape))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepShape(self, instrumentHandle):
        shape = ViInt32()
        status = self.dll.rssmf_GetFrequencySweepShape(ViSession(instrumentHandle), byref(shape))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(shape.value)

    def SetFrequencySweepMarkerState(self, instrumentHandle, channel, state):
        status = self.dll.rssmf_SetFrequencySweepMarkerState(
            ViSession(instrumentHandle), ViUInt32(channel), ViBoolean(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepMarkerState(self, instrumentHandle, channel):
        state = ViBoolean()
        status = self.dll.rssmf_GetFrequencySweepMarkerState(
            ViSession(instrumentHandle), ViUInt32(channel), byref(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetFrequencySweepMarkerFrequency(self, instrumentHandle, channel, frequency):
        status = self.dll.rssmf_SetFrequencySweepMarkerFrequency(
            ViSession(instrumentHandle), ViUInt32(channel), ViReal64(frequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepMarkerFrequency(self, instrumentHandle, channel):
        frequency = ViReal64()
        status = self.dll.rssmf_GetFrequencySweepMarkerFrequency(
            ViSession(instrumentHandle), ViUInt32(channel), byref(frequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(frequency.value)

    def SetFrequencySweepAmplitudeMarkerState(self, instrumentHandle, channel, amplitudeMarker):
        status = self.dll.rssmf_SetFrequencySweepAmplitudeMarkerState(
            ViSession(instrumentHandle), ViUInt32(channel), ViBoolean(amplitudeMarker)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepAmplitudeMarkerState(self, instrumentHandle, channel):
        amplitudeMarker = ViBoolean()
        status = self.dll.rssmf_GetFrequencySweepAmplitudeMarkerState(
            ViSession(instrumentHandle), ViUInt32(channel), byref(amplitudeMarker)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(amplitudeMarker.value)

    def SetFrequencySweepAmplitudeMarkerAttenuation(self, instrumentHandle, amplitude):
        status = self.dll.rssmf_SetFrequencySweepAmplitudeMarkerAttenuation(
            ViSession(instrumentHandle), ViReal64(amplitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepAmplitudeMarkerAttenuation(self, instrumentHandle):
        amplitude = ViReal64()
        status = self.dll.rssmf_GetFrequencySweepAmplitudeMarkerAttenuation(
            ViSession(instrumentHandle), byref(amplitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(amplitude.value)

    def SetFrequencySweepMarkerPolarity(self, instrumentHandle, polarity):
        status = self.dll.rssmf_SetFrequencySweepMarkerPolarity(ViSession(instrumentHandle), ViInt32(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepMarkerPolarity(self, instrumentHandle):
        polarity = ViInt32()
        status = self.dll.rssmf_GetFrequencySweepMarkerPolarity(ViSession(instrumentHandle), byref(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(polarity.value)

    def SetFrequencySweepActiveMarker(self, instrumentHandle, activeMarker):
        status = self.dll.rssmf_SetFrequencySweepActiveMarker(ViSession(instrumentHandle), ViInt32(activeMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFrequencySweepActiveMarker(self, instrumentHandle):
        activeMarker = ViInt32()
        status = self.dll.rssmf_GetFrequencySweepActiveMarker(ViSession(instrumentHandle), byref(activeMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(activeMarker.value)

    def SetFrequencySweepAllMarkersOff(self, instrumentHandle):
        status = self.dll.rssmf_SetFrequencySweepAllMarkersOff(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetFrequencySweepMarkerTransfer(self, instrumentHandle):
        status = self.dll.rssmf_SetFrequencySweepMarkerTransfer(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def confList(self, instrumentHandle, listName, listMode, arraySize, dwellTime):
        frequencyValues = ARRAY_ViReal64(arraySize)
        powerValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_confList(
            ViSession(instrumentHandle),
            ViString(listName),
            ViInt32(listMode),
            ViInt32(arraySize),
            frequencyValues,
            powerValues,
            ViReal64(dwellTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        frequencyValues = list(frequencyValues)
        powerValues = list(powerValues)
        return frequencyValues, powerValues

    def LISTCatalog(self, instrumentHandle, directoryPath, arraySize):
        catalogList = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_LISTCatalog(
            ViSession(instrumentHandle),
            ViString(directoryPath),
            ViInt32(arraySize),
            catalogList,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(catalogList)

    def LISTDeleteList(self, instrumentHandle, listName):
        status = self.dll.rssmf_LISTDeleteList(ViSession(instrumentHandle), ViString(listName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LISTDeleteAll(self, instrumentHandle):
        status = self.dll.rssmf_LISTDeleteAll(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LISTResetList(self, instrumentHandle):
        status = self.dll.rssmf_LISTResetList(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LISTTriggerExecute(self, instrumentHandle):
        status = self.dll.rssmf_LISTTriggerExecute(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLISTMode(self, instrumentHandle, listMode):
        status = self.dll.rssmf_SetLISTMode(ViSession(instrumentHandle), ViInt32(listMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLISTDwellTime(self, instrumentHandle, dwellTime):
        status = self.dll.rssmf_SetLISTDwellTime(ViSession(instrumentHandle), ViReal64(dwellTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLISTDwellTime(self, instrumentHandle):
        dwellTime = ViReal64()
        status = self.dll.rssmf_GetLISTDwellTime(ViSession(instrumentHandle), byref(dwellTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(dwellTime.value)

    def SetLISTSelectList(self, instrumentHandle, listName):
        status = self.dll.rssmf_SetLISTSelectList(ViSession(instrumentHandle), ViString(listName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLISTSelectList(self, instrumentHandle):
        listName = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetLISTSelectList(ViSession(instrumentHandle), listName)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(listName)

    def SetLISTFrequencyValues(self, instrumentHandle, arraySize):
        frequencyValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_SetLISTFrequencyValues(ViSession(instrumentHandle), ViInt32(arraySize), frequencyValues)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(frequencyValues)

    def GetLISTFrequencyValues(self, instrumentHandle, arraySize):
        frequencyValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_GetLISTFrequencyValues(ViSession(instrumentHandle), ViInt32(arraySize), frequencyValues)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(frequencyValues)

    def GetLISTFrequencyPoints(self, instrumentHandle):
        numberOfFrequencyPoints = ViInt32()
        status = self.dll.rssmf_GetLISTFrequencyPoints(ViSession(instrumentHandle), byref(numberOfFrequencyPoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(numberOfFrequencyPoints.value)

    def SetLISTPowerValues(self, instrumentHandle, arraySize):
        powerValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_SetLISTPowerValues(ViSession(instrumentHandle), ViInt32(arraySize), powerValues)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(powerValues)

    def GetLISTPowerValues(self, instrumentHandle, arraySize):
        powerValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_GetLISTPowerValues(ViSession(instrumentHandle), ViInt32(arraySize), powerValues)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(powerValues)

    def GetLISTPowerPoints(self, instrumentHandle):
        numberOfPowerPoints = ViInt32()
        status = self.dll.rssmf_GetLISTPowerPoints(ViSession(instrumentHandle), byref(numberOfPowerPoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(numberOfPowerPoints.value)

    def SetLISTAttenuatorMode(self, instrumentHandle, attenuatorMode):
        status = self.dll.rssmf_SetLISTAttenuatorMode(ViSession(instrumentHandle), ViInt32(attenuatorMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLISTAttenuatorMode(self, instrumentHandle):
        attenuatorMode = ViInt32()
        status = self.dll.rssmf_GetLISTAttenuatorMode(ViSession(instrumentHandle), byref(attenuatorMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(attenuatorMode.value)

    def SetLISTStepIndex(self, instrumentHandle, stepIndex):
        status = self.dll.rssmf_SetLISTStepIndex(ViSession(instrumentHandle), ViInt32(stepIndex))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLISTStepIndex(self, instrumentHandle):
        stepIndex = ViInt32()
        status = self.dll.rssmf_GetLISTStepIndex(ViSession(instrumentHandle), byref(stepIndex))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(stepIndex.value)

    def SetLISTStartIndex(self, instrumentHandle, startIndex):
        status = self.dll.rssmf_SetLISTStartIndex(ViSession(instrumentHandle), ViInt32(startIndex))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLISTStartIndex(self, instrumentHandle):
        startIndex = ViInt32()
        status = self.dll.rssmf_GetLISTStartIndex(ViSession(instrumentHandle), byref(startIndex))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(startIndex.value)

    def SetLISTStopIndex(self, instrumentHandle, stopIndex):
        status = self.dll.rssmf_SetLISTStopIndex(ViSession(instrumentHandle), ViInt32(stopIndex))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLISTStopIndex(self, instrumentHandle):
        stopIndex = ViInt32()
        status = self.dll.rssmf_GetLISTStopIndex(ViSession(instrumentHandle), byref(stopIndex))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(stopIndex.value)

    def LearnLISTModeData(self, instrumentHandle):
        status = self.dll.rssmf_LearnLISTModeData(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLISTImportExportListMode(self, instrumentHandle, listMode):
        status = self.dll.rssmf_SetLISTImportExportListMode(ViSession(instrumentHandle), ViInt32(listMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLISTImportExportListMode(self, instrumentHandle):
        listMode = ViInt32()
        status = self.dll.rssmf_GetLISTImportExportListMode(ViSession(instrumentHandle), byref(listMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(listMode.value)

    def SetLISTImportExportListFile(self, instrumentHandle, sourceFile):
        status = self.dll.rssmf_SetLISTImportExportListFile(ViSession(instrumentHandle), ViString(sourceFile))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLISTImportExportListFile(self, instrumentHandle):
        sourceFile = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetLISTImportExportListFile(ViSession(instrumentHandle), sourceFile)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(sourceFile)

    def ImportExportExecute(self, instrumentHandle):
        status = self.dll.rssmf_ImportExportExecute(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLISTImportExportASCIIFile(self, instrumentHandle, ASCIISourceFile):
        status = self.dll.rssmf_SetLISTImportExportASCIIFile(ViSession(instrumentHandle), ViString(ASCIISourceFile))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLISTImportExportASCIIFile(self, instrumentHandle):
        ASCIISourceFile = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetLISTImportExportASCIIFile(ViSession(instrumentHandle), ASCIISourceFile)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ASCIISourceFile)

    def SetLISTImportExportASCIIExtension(self, instrumentHandle, extension):
        status = self.dll.rssmf_SetLISTImportExportASCIIExtension(ViSession(instrumentHandle), ViInt32(extension))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLISTImportExportASCIIExtension(self, instrumentHandle):
        extension = ViInt32()
        status = self.dll.rssmf_GetLISTImportExportASCIIExtension(ViSession(instrumentHandle), byref(extension))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(extension.value)

    def SetLISTImportExportASCIIColumnSeparator(self, instrumentHandle, separator):
        status = self.dll.rssmf_SetLISTImportExportASCIIColumnSeparator(ViSession(instrumentHandle), ViInt32(separator))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLISTImportExportASCIIColumnSeparator(self, instrumentHandle):
        separator = ViInt32()
        status = self.dll.rssmf_GetLISTImportExportASCIIColumnSeparator(ViSession(instrumentHandle), byref(separator))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(separator.value)

    def SetLISTImportExportASCIIColumnDecimalSeparator(self, instrumentHandle, decimalSeparator):
        status = self.dll.rssmf_SetLISTImportExportASCIIColumnDecimalSeparator(
            ViSession(instrumentHandle), ViInt32(decimalSeparator)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLISTImportExportASCIIColumnDecimalSeparator(self, instrumentHandle):
        decimalSeparator = ViInt32()
        status = self.dll.rssmf_GetLISTImportExportASCIIColumnDecimalSeparator(
            ViSession(instrumentHandle), byref(decimalSeparator)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(decimalSeparator.value)

    def LISTImportExportCatalog(self, instrumentHandle, arraySize):
        catalogList = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_LISTImportExportCatalog(ViSession(instrumentHandle), ViInt32(arraySize), catalogList)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(catalogList)

    def confRosc(
        self,
        instrumentHandle,
        ROSCSource,
        externalReferenceFrequency,
        ROSCSynchronizationBandwidth,
        ROSCOutput,
        EFCState,
        adjustmentActive,
        adjustmentFrequency,
    ):
        status = self.dll.rssmf_confRosc(
            ViSession(instrumentHandle),
            ViInt32(ROSCSource),
            ViInt32(externalReferenceFrequency),
            ViInt32(ROSCSynchronizationBandwidth),
            ViInt32(ROSCOutput),
            ViBoolean(EFCState),
            ViBoolean(adjustmentActive),
            ViInt32(adjustmentFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetROSCSource(self, instrumentHandle, ROSCSource):
        status = self.dll.rssmf_SetROSCSource(ViSession(instrumentHandle), ViInt32(ROSCSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetROSCSource(self, instrumentHandle):
        ROSCSource = ViInt32()
        status = self.dll.rssmf_GetROSCSource(ViSession(instrumentHandle), byref(ROSCSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ROSCSource.value)

    def SetROSCRFOutput(self, instrumentHandle, RFOutput):
        status = self.dll.rssmf_SetROSCRFOutput(ViSession(instrumentHandle), ViBoolean(RFOutput))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetROSCRFOutput(self, instrumentHandle):
        RFOutput = ViBoolean()
        status = self.dll.rssmf_GetROSCRFOutput(ViSession(instrumentHandle), byref(RFOutput))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RFOutput.value)

    def SetROSCExternalReferenceFrequency(self, instrumentHandle, externalReferenceFrequency):
        status = self.dll.rssmf_SetROSCExternalReferenceFrequency(
            ViSession(instrumentHandle), ViInt32(externalReferenceFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetROSCExternalReferenceFrequency(self, instrumentHandle):
        externalReferenceFrequency = ViInt32()
        status = self.dll.rssmf_GetROSCExternalReferenceFrequency(
            ViSession(instrumentHandle), byref(externalReferenceFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(externalReferenceFrequency.value)

    def SetROSCSynchronizationBandwidth(self, instrumentHandle, ROSCSynchronizationBandwidth):
        status = self.dll.rssmf_SetROSCSynchronizationBandwidth(
            ViSession(instrumentHandle), ViInt32(ROSCSynchronizationBandwidth)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetROSCSynchronizationBandwidth(self, instrumentHandle):
        ROSCSynchronizationBandwidth = ViInt32()
        status = self.dll.rssmf_GetROSCSynchronizationBandwidth(
            ViSession(instrumentHandle), byref(ROSCSynchronizationBandwidth)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ROSCSynchronizationBandwidth.value)

    def SetROSCOutput(self, instrumentHandle, ROSCOutput):
        status = self.dll.rssmf_SetROSCOutput(ViSession(instrumentHandle), ViInt32(ROSCOutput))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetROSCOutput(self, instrumentHandle):
        ROSCOutput = ViInt32()
        status = self.dll.rssmf_GetROSCOutput(ViSession(instrumentHandle), byref(ROSCOutput))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ROSCOutput.value)

    def SetROSCEFCState(self, instrumentHandle, EFCState):
        status = self.dll.rssmf_SetROSCEFCState(ViSession(instrumentHandle), ViBoolean(EFCState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetROSCEFCState(self, instrumentHandle):
        EFCState = ViBoolean()
        status = self.dll.rssmf_GetROSCEFCState(ViSession(instrumentHandle), byref(EFCState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(EFCState.value)

    def SetROSCAdjustmentActive(self, instrumentHandle, adjustmentActive):
        status = self.dll.rssmf_SetROSCAdjustmentActive(ViSession(instrumentHandle), ViBoolean(adjustmentActive))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetROSCAdjustmentActive(self, instrumentHandle):
        adjustmentActive = ViBoolean()
        status = self.dll.rssmf_GetROSCAdjustmentActive(ViSession(instrumentHandle), byref(adjustmentActive))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(adjustmentActive.value)

    def SetROSCAdjustmentFrequency(self, instrumentHandle, adjustmentFrequency):
        status = self.dll.rssmf_SetROSCAdjustmentFrequency(ViSession(instrumentHandle), ViInt32(adjustmentFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetROSCAdjustmentFrequency(self, instrumentHandle):
        adjustmentFrequency = ViInt32()
        status = self.dll.rssmf_GetROSCAdjustmentFrequency(ViSession(instrumentHandle), byref(adjustmentFrequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(adjustmentFrequency.value)

    def confPowerSense(
        self,
        instrumentHandle,
        sense,
        initPowerMeas,
        unit,
        permanentDisplay,
        source,
        frequency,
        filterMode,
        useSParameters,
    ):
        status = self.dll.rssmf_confPowerSense(
            ViSession(instrumentHandle),
            ViInt32(sense),
            ViBoolean(initPowerMeas),
            ViInt32(unit),
            ViBoolean(permanentDisplay),
            ViInt32(source),
            ViReal64(frequency),
            ViInt32(filterMode),
            ViBoolean(useSParameters),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def confPowerResponseMeasurement(self, instrumentHandle, sense, sweepMode, start, stop, timing, steps, spacing):
        status = self.dll.rssmf_confPowerResponseMeasurement(
            ViSession(instrumentHandle),
            ViInt32(sense),
            ViInt32(sweepMode),
            ViReal64(start),
            ViReal64(stop),
            ViInt32(timing),
            ViInt32(steps),
            ViInt32(spacing),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def confPowerResponseMeasurementDiagram(
        self,
        instrumentHandle,
        sense,
        frequencyYScaleMinimum,
        frequencyYScaleMaximum,
        powerYScaleMinimum,
        powerYScaleMaximum,
        senseMode,
    ):
        status = self.dll.rssmf_confPowerResponseMeasurementDiagram(
            ViSession(instrumentHandle),
            ViInt32(sense),
            ViReal64(frequencyYScaleMinimum),
            ViReal64(frequencyYScaleMaximum),
            ViReal64(powerYScaleMinimum),
            ViReal64(powerYScaleMaximum),
            ViInt32(senseMode),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PowerZero(self, instrumentHandle, sense):
        status = self.dll.rssmf_PowerZero(ViSession(instrumentHandle), ViInt32(sense))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetInitiatePowerMeasurement(self, instrumentHandle, sense, initPowerMeas):
        status = self.dll.rssmf_SetInitiatePowerMeasurement(
            ViSession(instrumentHandle), ViInt32(sense), ViBoolean(initPowerMeas)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetInitiatePowerMeasurement(self, instrumentHandle, sense):
        initPowerMeas = ViBoolean()
        status = self.dll.rssmf_GetInitiatePowerMeasurement(
            ViSession(instrumentHandle), ViInt32(sense), byref(initPowerMeas)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(initPowerMeas.value)

    def GetPowerUseSParameters(self, instrumentHandle, sense):
        useSParameters = ViBoolean()
        status = self.dll.rssmf_GetPowerUseSParameters(
            ViSession(instrumentHandle), ViInt32(sense), byref(useSParameters)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(useSParameters.value)

    def SetPowerFrequency(self, instrumentHandle, sense, frequency):
        status = self.dll.rssmf_SetPowerFrequency(ViSession(instrumentHandle), ViInt32(sense), ViReal64(frequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerFrequency(self, instrumentHandle, sense):
        frequency = ViReal64()
        status = self.dll.rssmf_GetPowerFrequency(ViSession(instrumentHandle), ViInt32(sense), byref(frequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(frequency.value)

    def SetPowerOffset(self, instrumentHandle, sense, offset):
        status = self.dll.rssmf_SetPowerOffset(ViSession(instrumentHandle), ViInt32(sense), ViReal64(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerOffset(self, instrumentHandle, sense):
        offset = ViReal64()
        status = self.dll.rssmf_GetPowerOffset(ViSession(instrumentHandle), ViInt32(sense), byref(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(offset.value)

    def SetPowerOffsetState(self, instrumentHandle, sense, offsetState):
        status = self.dll.rssmf_SetPowerOffsetState(ViSession(instrumentHandle), ViInt32(sense), ViBoolean(offsetState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerOffsetState(self, instrumentHandle, sense):
        offsetState = ViBoolean()
        status = self.dll.rssmf_GetPowerOffsetState(ViSession(instrumentHandle), ViInt32(sense), byref(offsetState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(offsetState.value)

    def SetPowerSource(self, instrumentHandle, sense, source):
        status = self.dll.rssmf_SetPowerSource(ViSession(instrumentHandle), ViInt32(sense), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSource(self, instrumentHandle, sense):
        source = ViInt32()
        status = self.dll.rssmf_GetPowerSource(ViSession(instrumentHandle), ViInt32(sense), byref(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(source.value)

    def SetPowerUnit(self, instrumentHandle, sense, unit):
        status = self.dll.rssmf_SetPowerUnit(ViSession(instrumentHandle), ViInt32(sense), ViInt32(unit))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerUnit(self, instrumentHandle, sense):
        unit = ViInt32()
        status = self.dll.rssmf_GetPowerUnit(ViSession(instrumentHandle), ViInt32(sense), byref(unit))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(unit.value)

    def SetPowerDisplayPermanentState(self, instrumentHandle, sense, permanentDisplay):
        status = self.dll.rssmf_SetPowerDisplayPermanentState(
            ViSession(instrumentHandle), ViInt32(sense), ViBoolean(permanentDisplay)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerDisplayPermanentState(self, instrumentHandle, sense):
        permanentDisplay = ViBoolean()
        status = self.dll.rssmf_GetPowerDisplayPermanentState(
            ViSession(instrumentHandle), ViInt32(sense), byref(permanentDisplay)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(permanentDisplay.value)

    def SetPowerDisplayPermanentPriority(self, instrumentHandle, trace, priority):
        status = self.dll.rssmf_SetPowerDisplayPermanentPriority(
            ViSession(instrumentHandle), ViInt32(trace), ViInt32(priority)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerDisplayPermanentPriority(self, instrumentHandle, trace):
        priority = ViInt32()
        status = self.dll.rssmf_GetPowerDisplayPermanentPriority(
            ViSession(instrumentHandle), ViInt32(trace), byref(priority)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(priority.value)

    def confPowerFilter(self, instrumentHandle, sense, filterMode, noiseContent, timeout):
        status = self.dll.rssmf_confPowerFilter(
            ViSession(instrumentHandle),
            ViInt32(sense),
            ViInt32(filterMode),
            ViReal64(noiseContent),
            ViReal64(timeout),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerFilterLength(self, instrumentHandle, sense, filterLength):
        status = self.dll.rssmf_SetPowerFilterLength(ViSession(instrumentHandle), ViInt32(sense), ViInt32(filterLength))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerFilterLength(self, instrumentHandle, sense):
        filterLength = ViInt32()
        status = self.dll.rssmf_GetPowerFilterLength(ViSession(instrumentHandle), ViInt32(sense), byref(filterLength))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(filterLength.value)

    def SetPowerFilterMode(self, instrumentHandle, sense, filterMode):
        status = self.dll.rssmf_SetPowerFilterMode(ViSession(instrumentHandle), ViInt32(sense), ViInt32(filterMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerFilterMode(self, instrumentHandle, sense):
        filterMode = ViInt32()
        status = self.dll.rssmf_GetPowerFilterMode(ViSession(instrumentHandle), ViInt32(sense), byref(filterMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(filterMode.value)

    def SetPowerFilterFixedNoiseContent(self, instrumentHandle, sense, noiseContent):
        status = self.dll.rssmf_SetPowerFilterFixedNoiseContent(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(noiseContent)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerFilterFixedNoiseContent(self, instrumentHandle, sense):
        noiseContent = ViReal64()
        status = self.dll.rssmf_GetPowerFilterFixedNoiseContent(
            ViSession(instrumentHandle), ViInt32(sense), byref(noiseContent)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(noiseContent.value)

    def SetPowerFilterFixedNoiseTimeout(self, instrumentHandle, sense, timeout):
        status = self.dll.rssmf_SetPowerFilterFixedNoiseTimeout(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(timeout)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerFilterFixedNoiseTimeout(self, instrumentHandle, sense):
        timeout = ViReal64()
        status = self.dll.rssmf_GetPowerFilterFixedNoiseTimeout(
            ViSession(instrumentHandle), ViInt32(sense), byref(timeout)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(timeout.value)

    def GetPowerFilterLengthAuto(self, instrumentHandle, sense):
        filterLengthAuto = ViInt32()
        status = self.dll.rssmf_GetPowerFilterLengthAuto(
            ViSession(instrumentHandle), ViInt32(sense), byref(filterLengthAuto)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(filterLengthAuto.value)

    def PowerFilterSearchOnce(self, instrumentHandle, sense):
        status = self.dll.rssmf_PowerFilterSearchOnce(ViSession(instrumentHandle), ViInt32(sense))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerSensorGateState(self, instrumentHandle, state):
        status = self.dll.rssmf_SetPowerSensorGateState(ViSession(instrumentHandle), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSensorGateState(self, instrumentHandle):
        state = ViBoolean()
        status = self.dll.rssmf_GetPowerSensorGateState(ViSession(instrumentHandle), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetPowerSensorGateStart(self, instrumentHandle, gate, start):
        status = self.dll.rssmf_SetPowerSensorGateStart(ViSession(instrumentHandle), ViInt32(gate), ViReal64(start))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSensorGateStart(self, instrumentHandle, gate):
        start = ViReal64()
        status = self.dll.rssmf_GetPowerSensorGateStart(ViSession(instrumentHandle), ViInt32(gate), byref(start))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(start.value)

    def SetPowerSensorGateStop(self, instrumentHandle, gate, stop):
        status = self.dll.rssmf_SetPowerSensorGateStop(ViSession(instrumentHandle), ViInt32(gate), ViReal64(stop))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSensorGateStop(self, instrumentHandle, gate):
        stop = ViReal64()
        status = self.dll.rssmf_GetPowerSensorGateStop(ViSession(instrumentHandle), ViInt32(gate), byref(stop))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(stop.value)

    def SetPowerSensorGateTrace(self, instrumentHandle, trace):
        status = self.dll.rssmf_SetPowerSensorGateTrace(ViSession(instrumentHandle), ViInt32(trace))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSensorGateTrace(self, instrumentHandle):
        trace = ViInt32()
        status = self.dll.rssmf_GetPowerSensorGateTrace(ViSession(instrumentHandle), byref(trace))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(trace.value)

    def GetPowerSensorGateAveragePower(self, instrumentHandle, gate):
        averagePower = ViReal64()
        status = self.dll.rssmf_GetPowerSensorGateAveragePower(
            ViSession(instrumentHandle), ViInt32(gate), byref(averagePower)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(averagePower.value)

    def GetPowerSensorGatePeakPower(self, instrumentHandle, gate):
        peakPower = ViReal64()
        status = self.dll.rssmf_GetPowerSensorGatePeakPower(
            ViSession(instrumentHandle), ViInt32(gate), byref(peakPower)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(peakPower.value)

    def PowerSweepInitiate(self, instrumentHandle, sense, timeout):
        status = self.dll.rssmf_PowerSweepInitiate(ViSession(instrumentHandle), ViInt32(sense), ViInt32(timeout))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PowerSweepAbort(self, instrumentHandle, sense):
        status = self.dll.rssmf_PowerSweepAbort(ViSession(instrumentHandle), ViInt32(sense))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def confPowerSweepFrequencySeparateFrequencyRange(
        self,
        instrumentHandle,
        sense,
        state,
        separateFrequencyStart,
        separateFrequencyStop,
    ):
        status = self.dll.rssmf_confPowerSweepFrequencySeparateFrequencyRange(
            ViSession(instrumentHandle),
            ViInt32(sense),
            ViBoolean(state),
            ViReal64(separateFrequencyStart),
            ViReal64(separateFrequencyStop),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerSweepFrequencyStart(self, instrumentHandle, sense, frequencyStart):
        status = self.dll.rssmf_SetPowerSweepFrequencyStart(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(frequencyStart)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencyStart(self, instrumentHandle, sense):
        frequencyStart = ViReal64()
        status = self.dll.rssmf_GetPowerSweepFrequencyStart(
            ViSession(instrumentHandle), ViInt32(sense), byref(frequencyStart)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(frequencyStart.value)

    def SetPowerSweepFrequencyStop(self, instrumentHandle, sense, frequencyStop):
        status = self.dll.rssmf_SetPowerSweepFrequencyStop(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(frequencyStop)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencyStop(self, instrumentHandle, sense):
        frequencyStop = ViReal64()
        status = self.dll.rssmf_GetPowerSweepFrequencyStop(
            ViSession(instrumentHandle), ViInt32(sense), byref(frequencyStop)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(frequencyStop.value)

    def SetPowerSweepFrequencySlope(self, instrumentHandle, sense, triggerSlope):
        status = self.dll.rssmf_SetPowerSweepFrequencySlope(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(triggerSlope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencySlope(self, instrumentHandle, sense):
        triggerSlope = ViInt32()
        status = self.dll.rssmf_GetPowerSweepFrequencySlope(
            ViSession(instrumentHandle), ViInt32(sense), byref(triggerSlope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(triggerSlope.value)

    def SetPowerSweepFrequencyTiming(self, instrumentHandle, sense, frequencyTiming):
        status = self.dll.rssmf_SetPowerSweepFrequencyTiming(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(frequencyTiming)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencyTiming(self, instrumentHandle, sense):
        frequencyTiming = ViInt32()
        status = self.dll.rssmf_GetPowerSweepFrequencyTiming(
            ViSession(instrumentHandle), ViInt32(sense), byref(frequencyTiming)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(frequencyTiming.value)

    def SetPowerSweepFrequencySpacing(self, instrumentHandle, sense, frequencySpacing):
        status = self.dll.rssmf_SetPowerSweepFrequencySpacing(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(frequencySpacing)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencySpacing(self, instrumentHandle, sense):
        frequencySpacing = ViInt32()
        status = self.dll.rssmf_GetPowerSweepFrequencySpacing(
            ViSession(instrumentHandle), ViInt32(sense), byref(frequencySpacing)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(frequencySpacing.value)

    def SetPowerSweepFrequencySteps(self, instrumentHandle, sense, frequencySteps):
        status = self.dll.rssmf_SetPowerSweepFrequencySteps(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(frequencySteps)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencySteps(self, instrumentHandle, sense):
        frequencySteps = ViInt32()
        status = self.dll.rssmf_GetPowerSweepFrequencySteps(
            ViSession(instrumentHandle), ViInt32(sense), byref(frequencySteps)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(frequencySteps.value)

    def SetPowerSweepFrequencyYScaleMinimum(self, instrumentHandle, sense, yScaleMinimum):
        status = self.dll.rssmf_SetPowerSweepFrequencyYScaleMinimum(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(yScaleMinimum)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencyYScaleMinimum(self, instrumentHandle, sense):
        yScaleMinimum = ViReal64()
        status = self.dll.rssmf_GetPowerSweepFrequencyYScaleMinimum(
            ViSession(instrumentHandle), ViInt32(sense), byref(yScaleMinimum)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(yScaleMinimum.value)

    def SetPowerSweepFrequencyYScaleMaximum(self, instrumentHandle, sense, yScaleMaximum):
        status = self.dll.rssmf_SetPowerSweepFrequencyYScaleMaximum(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(yScaleMaximum)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencyYScaleMaximum(self, instrumentHandle, sense):
        yScaleMaximum = ViReal64()
        status = self.dll.rssmf_GetPowerSweepFrequencyYScaleMaximum(
            ViSession(instrumentHandle), ViInt32(sense), byref(yScaleMaximum)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(yScaleMaximum.value)

    def SetPowerSweepFrequencyExecution(self, instrumentHandle, execution):
        status = self.dll.rssmf_SetPowerSweepFrequencyExecution(ViSession(instrumentHandle), ViInt32(execution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencyExecution(self, instrumentHandle):
        execution = ViInt32()
        status = self.dll.rssmf_GetPowerSweepFrequencyExecution(ViSession(instrumentHandle), byref(execution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(execution.value)

    def SetPowerSweepFrequencyYAutoScale(self, instrumentHandle, autoScale):
        status = self.dll.rssmf_SetPowerSweepFrequencyYAutoScale(ViSession(instrumentHandle), ViInt32(autoScale))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencyYAutoScale(self, instrumentHandle):
        autoScale = ViInt32()
        status = self.dll.rssmf_GetPowerSweepFrequencyYAutoScale(ViSession(instrumentHandle), byref(autoScale))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(autoScale.value)

    def ResetPowerSweepFrequencyYScale(self, instrumentHandle):
        status = self.dll.rssmf_ResetPowerSweepFrequencyYScale(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerSweepFrequencySeparateFrequencyRange(self, instrumentHandle, sense, state):
        status = self.dll.rssmf_SetPowerSweepFrequencySeparateFrequencyRange(
            ViSession(instrumentHandle), ViInt32(sense), ViBoolean(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencySeparateFrequencyRange(self, instrumentHandle, sense):
        state = ViBoolean()
        status = self.dll.rssmf_GetPowerSweepFrequencySeparateFrequencyRange(
            ViSession(instrumentHandle), ViInt32(sense), byref(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetPowerSweepFrequencySeparateFrequencyStart(self, instrumentHandle, sense, separateFrequencyStart):
        status = self.dll.rssmf_SetPowerSweepFrequencySeparateFrequencyStart(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(separateFrequencyStart)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencySeparateFrequencyStart(self, instrumentHandle, sense):
        separateFrequencyStart = ViReal64()
        status = self.dll.rssmf_GetPowerSweepFrequencySeparateFrequencyStart(
            ViSession(instrumentHandle), ViInt32(sense), byref(separateFrequencyStart)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(separateFrequencyStart.value)

    def SetPowerSweepFrequencySeparateFrequencyStop(self, instrumentHandle, sense, separateFrequencyStop):
        status = self.dll.rssmf_SetPowerSweepFrequencySeparateFrequencyStop(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(separateFrequencyStop)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencySeparateFrequencyStop(self, instrumentHandle, sense):
        separateFrequencyStop = ViReal64()
        status = self.dll.rssmf_GetPowerSweepFrequencySeparateFrequencyStop(
            ViSession(instrumentHandle), ViInt32(sense), byref(separateFrequencyStop)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(separateFrequencyStop.value)

    def SetPowerSweepFrequencyReferenceXValues(self, instrumentHandle, frequencyXPointA, frequencyXPointB):
        status = self.dll.rssmf_SetPowerSweepFrequencyReferenceXValues(
            ViSession(instrumentHandle),
            ViReal64(frequencyXPointA),
            ViReal64(frequencyXPointB),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencyReferenceXValues(self, instrumentHandle):
        frequencyXPointA = ViReal64()
        frequencyXPointB = ViReal64()
        status = self.dll.rssmf_GetPowerSweepFrequencyReferenceXValues(
            ViSession(instrumentHandle), byref(frequencyXPointA), byref(frequencyXPointB)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        frequencyXPointA = float(frequencyXPointA.value)
        frequencyXPointB = float(frequencyXPointB.value)
        return frequencyXPointA, frequencyXPointB

    def SetPowerSweepFrequencyReferenceYValues(self, instrumentHandle, powerYPointA, powerYPointB):
        status = self.dll.rssmf_SetPowerSweepFrequencyReferenceYValues(
            ViSession(instrumentHandle), ViReal64(powerYPointA), ViReal64(powerYPointB)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepFrequencyReferenceYValues(self, instrumentHandle):
        powerYPointA = ViReal64()
        powerYPointB = ViReal64()
        status = self.dll.rssmf_GetPowerSweepFrequencyReferenceYValues(
            ViSession(instrumentHandle), byref(powerYPointA), byref(powerYPointB)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        powerYPointA = float(powerYPointA.value)
        powerYPointB = float(powerYPointB.value)
        return powerYPointA, powerYPointB

    def GeneratePowerSweepFrequencyReferenceCurve(self, instrumentHandle):
        status = self.dll.rssmf_GeneratePowerSweepFrequencyReferenceCurve(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def confPowerSweepPowerSeparateFrequencyRange(self, instrumentHandle, sense, state, separateFrequency):
        status = self.dll.rssmf_confPowerSweepPowerSeparateFrequencyRange(
            ViSession(instrumentHandle),
            ViInt32(sense),
            ViBoolean(state),
            ViReal64(separateFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerSweepPowerStart(self, instrumentHandle, sense, powerStart):
        status = self.dll.rssmf_SetPowerSweepPowerStart(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(powerStart)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerStart(self, instrumentHandle, sense):
        powerStart = ViReal64()
        status = self.dll.rssmf_GetPowerSweepPowerStart(ViSession(instrumentHandle), ViInt32(sense), byref(powerStart))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(powerStart.value)

    def SetPowerSweepPowerStop(self, instrumentHandle, sense, powerStop):
        status = self.dll.rssmf_SetPowerSweepPowerStop(ViSession(instrumentHandle), ViInt32(sense), ViReal64(powerStop))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerStop(self, instrumentHandle, sense):
        powerStop = ViReal64()
        status = self.dll.rssmf_GetPowerSweepPowerStop(ViSession(instrumentHandle), ViInt32(sense), byref(powerStop))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(powerStop.value)

    def SetPowerSweepPowerSpacing(self, instrumentHandle, sense, powerSpacing):
        status = self.dll.rssmf_SetPowerSweepPowerSpacing(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(powerSpacing)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerSpacing(self, instrumentHandle, sense):
        powerSpacing = ViInt32()
        status = self.dll.rssmf_GetPowerSweepPowerSpacing(
            ViSession(instrumentHandle), ViInt32(sense), byref(powerSpacing)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(powerSpacing.value)

    def SetPowerSweepPowerTiming(self, instrumentHandle, sense, powerTiming):
        status = self.dll.rssmf_SetPowerSweepPowerTiming(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(powerTiming)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerTiming(self, instrumentHandle, sense):
        powerTiming = ViInt32()
        status = self.dll.rssmf_GetPowerSweepPowerTiming(
            ViSession(instrumentHandle), ViInt32(sense), byref(powerTiming)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(powerTiming.value)

    def SetPowerSweepPowerSteps(self, instrumentHandle, sense, powerSteps):
        status = self.dll.rssmf_SetPowerSweepPowerSteps(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(powerSteps)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerSteps(self, instrumentHandle, sense):
        powerSteps = ViInt32()
        status = self.dll.rssmf_GetPowerSweepPowerSteps(ViSession(instrumentHandle), ViInt32(sense), byref(powerSteps))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(powerSteps.value)

    def SetPowerSweepPowerYScaleMinimum(self, instrumentHandle, sense, yScaleMinimum):
        status = self.dll.rssmf_SetPowerSweepPowerYScaleMinimum(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(yScaleMinimum)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerYScaleMinimum(self, instrumentHandle, sense):
        yScaleMinimum = ViReal64()
        status = self.dll.rssmf_GetPowerSweepPowerYScaleMinimum(
            ViSession(instrumentHandle), ViInt32(sense), byref(yScaleMinimum)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(yScaleMinimum.value)

    def SetPowerSweepPowerYScaleMaximum(self, instrumentHandle, sense, yScaleMaximum):
        status = self.dll.rssmf_SetPowerSweepPowerYScaleMaximum(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(yScaleMaximum)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerYScaleMaximum(self, instrumentHandle, sense):
        yScaleMaximum = ViReal64()
        status = self.dll.rssmf_GetPowerSweepPowerYScaleMaximum(
            ViSession(instrumentHandle), ViInt32(sense), byref(yScaleMaximum)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(yScaleMaximum.value)

    def SetPowerSweepPowerExecution(self, instrumentHandle, execution):
        status = self.dll.rssmf_SetPowerSweepPowerExecution(ViSession(instrumentHandle), ViInt32(execution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerExecution(self, instrumentHandle):
        execution = ViInt32()
        status = self.dll.rssmf_GetPowerSweepPowerExecution(ViSession(instrumentHandle), byref(execution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(execution.value)

    def SetPowerSweepPowerYAutoScale(self, instrumentHandle, autoScale):
        status = self.dll.rssmf_SetPowerSweepPowerYAutoScale(ViSession(instrumentHandle), ViInt32(autoScale))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerYAutoScale(self, instrumentHandle):
        autoScale = ViInt32()
        status = self.dll.rssmf_GetPowerSweepPowerYAutoScale(ViSession(instrumentHandle), byref(autoScale))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(autoScale.value)

    def ResetPowerSweepPowerYScale(self, instrumentHandle):
        status = self.dll.rssmf_ResetPowerSweepPowerYScale(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerSweepPowerSeparateFrequencyState(self, instrumentHandle, sense, state):
        status = self.dll.rssmf_SetPowerSweepPowerSeparateFrequencyState(
            ViSession(instrumentHandle), ViInt32(sense), ViBoolean(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerSeparateFrequencyState(self, instrumentHandle, sense):
        state = ViBoolean()
        status = self.dll.rssmf_GetPowerSweepPowerSeparateFrequencyState(
            ViSession(instrumentHandle), ViInt32(sense), byref(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetPowerSweepPowerSeparateFrequency(self, instrumentHandle, sense, separateFrequency):
        status = self.dll.rssmf_SetPowerSweepPowerSeparateFrequency(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(separateFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerSeparateFrequency(self, instrumentHandle, sense):
        separateFrequency = ViReal64()
        status = self.dll.rssmf_GetPowerSweepPowerSeparateFrequency(
            ViSession(instrumentHandle), ViInt32(sense), byref(separateFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(separateFrequency.value)

    def SetPowerSweepPowerReferenceXValues(self, instrumentHandle, powerXPointA, powerXPointB):
        status = self.dll.rssmf_SetPowerSweepPowerReferenceXValues(
            ViSession(instrumentHandle), ViReal64(powerXPointA), ViReal64(powerXPointB)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerReferenceXValues(self, instrumentHandle):
        powerXPointA = ViReal64()
        powerXPointB = ViReal64()
        status = self.dll.rssmf_GetPowerSweepPowerReferenceXValues(
            ViSession(instrumentHandle), byref(powerXPointA), byref(powerXPointB)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        powerXPointA = float(powerXPointA.value)
        powerXPointB = float(powerXPointB.value)
        return powerXPointA, powerXPointB

    def SetPowerSweepPowerReferenceYValues(self, instrumentHandle, powerYPointA, powerYPointB):
        status = self.dll.rssmf_SetPowerSweepPowerReferenceYValues(
            ViSession(instrumentHandle), ViReal64(powerYPointA), ViReal64(powerYPointB)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepPowerReferenceYValues(self, instrumentHandle):
        powerYPointA = ViReal64()
        powerYPointB = ViReal64()
        status = self.dll.rssmf_GetPowerSweepPowerReferenceYValues(
            ViSession(instrumentHandle), byref(powerYPointA), byref(powerYPointB)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        powerYPointA = float(powerYPointA.value)
        powerYPointB = float(powerYPointB.value)
        return powerYPointA, powerYPointB

    def GetPowerSweepPowerReferenceNumberOfPoints(self, instrumentHandle):
        numberOfPoints = ViReal64()
        status = self.dll.rssmf_GetPowerSweepPowerReferenceNumberOfPoints(
            ViSession(instrumentHandle), byref(numberOfPoints)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(numberOfPoints.value)

    def GeneratePowerSweepPowerReferenceCurve(self, instrumentHandle):
        status = self.dll.rssmf_GeneratePowerSweepPowerReferenceCurve(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def confPowerSweepTimeSeparateFrequencyRange(self, instrumentHandle, sense, state, separateFrequency):
        status = self.dll.rssmf_confPowerSweepTimeSeparateFrequencyRange(
            ViSession(instrumentHandle),
            ViInt32(sense),
            ViBoolean(state),
            ViReal64(separateFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerSweepTimePulseDataAnalysisState(self, instrumentHandle, sense, state):
        status = self.dll.rssmf_SetPowerSweepTimePulseDataAnalysisState(
            ViSession(instrumentHandle), ViInt32(sense), ViBoolean(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimePulseDataAnalysisState(self, instrumentHandle, sense):
        state = ViBoolean()
        status = self.dll.rssmf_GetPowerSweepTimePulseDataAnalysisState(
            ViSession(instrumentHandle), ViInt32(sense), byref(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetPowerSweepTimePulseThresholdBase(self, instrumentHandle, sense, base):
        status = self.dll.rssmf_SetPowerSweepTimePulseThresholdBase(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(base)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimePulseThresholdBase(self, instrumentHandle, sense):
        base = ViInt32()
        status = self.dll.rssmf_GetPowerSweepTimePulseThresholdBase(
            ViSession(instrumentHandle), ViInt32(sense), byref(base)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(base.value)

    def SetPowerSweepTimePulseThresholdReferenceLevel(self, instrumentHandle, sense, mode, referenceLevel):
        status = self.dll.rssmf_SetPowerSweepTimePulseThresholdReferenceLevel(
            ViSession(instrumentHandle),
            ViInt32(sense),
            ViInt32(mode),
            ViReal64(referenceLevel),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimePulseThresholdReferenceLevel(self, instrumentHandle, sense, mode):
        referenceLevel = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTimePulseThresholdReferenceLevel(
            ViSession(instrumentHandle),
            ViInt32(sense),
            ViInt32(mode),
            byref(referenceLevel),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(referenceLevel.value)

    def SetPowerSweepTimeTriggerSource(self, instrumentHandle, sense, source):
        status = self.dll.rssmf_SetPowerSweepTimeTriggerSource(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(source)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeTriggerSource(self, instrumentHandle, sense):
        source = ViInt32()
        status = self.dll.rssmf_GetPowerSweepTimeTriggerSource(
            ViSession(instrumentHandle), ViInt32(sense), byref(source)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(source.value)

    def SetPowerSweepTimeTriggerDropOutTime(self, instrumentHandle, sense, dropOutTime):
        status = self.dll.rssmf_SetPowerSweepTimeTriggerDropOutTime(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(dropOutTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeTriggerDropOutTime(self, instrumentHandle, sense):
        dropOutTime = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTimeTriggerDropOutTime(
            ViSession(instrumentHandle), ViInt32(sense), byref(dropOutTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(dropOutTime.value)

    def SetPowerSweepTimeTriggerHysteresis(self, instrumentHandle, sense, hysteresis):
        status = self.dll.rssmf_SetPowerSweepTimeTriggerHysteresis(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(hysteresis)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeTriggerHysteresis(self, instrumentHandle, sense):
        hysteresis = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTimeTriggerHysteresis(
            ViSession(instrumentHandle), ViInt32(sense), byref(hysteresis)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(hysteresis.value)

    def SetPowerSweepTimeTriggerThreshold(self, instrumentHandle, sense, threshold):
        status = self.dll.rssmf_SetPowerSweepTimeTriggerThreshold(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(threshold)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeTriggerThreshold(self, instrumentHandle, sense):
        threshold = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTimeTriggerThreshold(
            ViSession(instrumentHandle), ViInt32(sense), byref(threshold)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(threshold.value)

    def SetPowerSweepTimeTriggerAutoSet(self, instrumentHandle, sense, timeout):
        status = self.dll.rssmf_SetPowerSweepTimeTriggerAutoSet(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(timeout)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerSweepTimeStart(self, instrumentHandle, sense, timeStart):
        status = self.dll.rssmf_SetPowerSweepTimeStart(ViSession(instrumentHandle), ViInt32(sense), ViReal64(timeStart))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeStart(self, instrumentHandle, sense):
        timeStart = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTimeStart(ViSession(instrumentHandle), ViInt32(sense), byref(timeStart))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(timeStart.value)

    def SetPowerSweepTimeStop(self, instrumentHandle, sense, timeStop):
        status = self.dll.rssmf_SetPowerSweepTimeStop(ViSession(instrumentHandle), ViInt32(sense), ViReal64(timeStop))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeStop(self, instrumentHandle, sense):
        timeStop = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTimeStop(ViSession(instrumentHandle), ViInt32(sense), byref(timeStop))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(timeStop.value)

    def SetPowerSweepTimeTriggerEvents(self, instrumentHandle, sense, triggerEvents):
        status = self.dll.rssmf_SetPowerSweepTimeTriggerEvents(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(triggerEvents)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeTriggerEvents(self, instrumentHandle, sense):
        triggerEvents = ViInt32()
        status = self.dll.rssmf_GetPowerSweepTimeTriggerEvents(
            ViSession(instrumentHandle), ViInt32(sense), byref(triggerEvents)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(triggerEvents.value)

    def SetPowerSweepTimeSpacing(self, instrumentHandle, sense, timeSpacing):
        status = self.dll.rssmf_SetPowerSweepTimeSpacing(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(timeSpacing)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeSpacing(self, instrumentHandle, sense):
        timeSpacing = ViInt32()
        status = self.dll.rssmf_GetPowerSweepTimeSpacing(
            ViSession(instrumentHandle), ViInt32(sense), byref(timeSpacing)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(timeSpacing.value)

    def SetPowerSweepTimeAveragingFactor(self, instrumentHandle, averagingFactor):
        status = self.dll.rssmf_SetPowerSweepTimeAveragingFactor(ViSession(instrumentHandle), ViInt32(averagingFactor))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeAveragingFactor(self, instrumentHandle):
        averagingFactor = ViInt32()
        status = self.dll.rssmf_GetPowerSweepTimeAveragingFactor(ViSession(instrumentHandle), byref(averagingFactor))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(averagingFactor.value)

    def SetPowerSweepTimeSteps(self, instrumentHandle, sense, timeSteps):
        status = self.dll.rssmf_SetPowerSweepTimeSteps(ViSession(instrumentHandle), ViInt32(sense), ViInt32(timeSteps))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeSteps(self, instrumentHandle, sense):
        timeSteps = ViInt32()
        status = self.dll.rssmf_GetPowerSweepTimeSteps(ViSession(instrumentHandle), ViInt32(sense), byref(timeSteps))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(timeSteps.value)

    def SetPowerTimeTriggerSource(self, instrumentHandle, sense, source):
        status = self.dll.rssmf_SetPowerTimeTriggerSource(ViSession(instrumentHandle), ViInt32(sense), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerTimeTriggerSource(self, instrumentHandle, sense):
        source = ViInt32()
        status = self.dll.rssmf_GetPowerTimeTriggerSource(ViSession(instrumentHandle), ViInt32(sense), byref(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(source.value)

    def SetPowerSweepTimeYScaleMinimum(self, instrumentHandle, sense, yScaleMinimum):
        status = self.dll.rssmf_SetPowerSweepTimeYScaleMinimum(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(yScaleMinimum)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeYScaleMinimum(self, instrumentHandle, sense):
        yScaleMinimum = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTimeYScaleMinimum(
            ViSession(instrumentHandle), ViInt32(sense), byref(yScaleMinimum)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(yScaleMinimum.value)

    def SetPowerSweepTimeYScaleMaximum(self, instrumentHandle, sense, yScaleMaximum):
        status = self.dll.rssmf_SetPowerSweepTimeYScaleMaximum(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(yScaleMaximum)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeYScaleMaximum(self, instrumentHandle, sense):
        yScaleMaximum = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTimeYScaleMaximum(
            ViSession(instrumentHandle), ViInt32(sense), byref(yScaleMaximum)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(yScaleMaximum.value)

    def SetPowerSweepTimeExecution(self, instrumentHandle, execution):
        status = self.dll.rssmf_SetPowerSweepTimeExecution(ViSession(instrumentHandle), ViInt32(execution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeExecution(self, instrumentHandle):
        execution = ViInt32()
        status = self.dll.rssmf_GetPowerSweepTimeExecution(ViSession(instrumentHandle), byref(execution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(execution.value)

    def SetPowerSweepTimeYAutoScale(self, instrumentHandle, autoScale):
        status = self.dll.rssmf_SetPowerSweepTimeYAutoScale(ViSession(instrumentHandle), ViInt32(autoScale))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeYAutoScale(self, instrumentHandle):
        autoScale = ViInt32()
        status = self.dll.rssmf_GetPowerSweepTimeYAutoScale(ViSession(instrumentHandle), byref(autoScale))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(autoScale.value)

    def ResetPowerSweepTimeYScale(self, instrumentHandle):
        status = self.dll.rssmf_ResetPowerSweepTimeYScale(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerSweepTimeSeparateFrequencyState(self, instrumentHandle, sense, state):
        status = self.dll.rssmf_SetPowerSweepTimeSeparateFrequencyState(
            ViSession(instrumentHandle), ViInt32(sense), ViBoolean(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeSeparateFrequencyState(self, instrumentHandle, sense):
        state = ViBoolean()
        status = self.dll.rssmf_GetPowerSweepTimeSeparateFrequencyState(
            ViSession(instrumentHandle), ViInt32(sense), byref(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetPowerSweepTimeSeparateFrequency(self, instrumentHandle, sense, separateFrequency):
        status = self.dll.rssmf_SetPowerSweepTimeSeparateFrequency(
            ViSession(instrumentHandle), ViInt32(sense), ViReal64(separateFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeSeparateFrequency(self, instrumentHandle, sense):
        separateFrequency = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTimeSeparateFrequency(
            ViSession(instrumentHandle), ViInt32(sense), byref(separateFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(separateFrequency.value)

    def SetPowerSweepTimeReferenceXValues(self, instrumentHandle, timeXPointA, timeXPointB):
        status = self.dll.rssmf_SetPowerSweepTimeReferenceXValues(
            ViSession(instrumentHandle), ViReal64(timeXPointA), ViReal64(timeXPointB)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeReferenceXValues(self, instrumentHandle):
        timeXPointA = ViReal64()
        timeXPointB = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTimeReferenceXValues(
            ViSession(instrumentHandle), byref(timeXPointA), byref(timeXPointB)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        timeXPointA = float(timeXPointA.value)
        timeXPointB = float(timeXPointB.value)
        return timeXPointA, timeXPointB

    def SetPowerSweepTimeReferenceYValues(self, instrumentHandle, powerYPointA, powerYPointB):
        status = self.dll.rssmf_SetPowerSweepTimeReferenceYValues(
            ViSession(instrumentHandle), ViReal64(powerYPointA), ViReal64(powerYPointB)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTimeReferenceYValues(self, instrumentHandle):
        powerYPointA = ViReal64()
        powerYPointB = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTimeReferenceYValues(
            ViSession(instrumentHandle), byref(powerYPointA), byref(powerYPointB)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        powerYPointA = float(powerYPointA.value)
        powerYPointB = float(powerYPointB.value)
        return powerYPointA, powerYPointB

    def GetPowerSweepTimeReferenceNumberOfPoints(self, instrumentHandle):
        numberOfPoints = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTimeReferenceNumberOfPoints(
            ViSession(instrumentHandle), byref(numberOfPoints)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(numberOfPoints.value)

    def GeneratePowerSweepTimeReferenceCurve(self, instrumentHandle):
        status = self.dll.rssmf_GeneratePowerSweepTimeReferenceCurve(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerSweepTraceState(self, instrumentHandle, trace, state):
        status = self.dll.rssmf_SetPowerSweepTraceState(ViSession(instrumentHandle), ViInt32(trace), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTraceState(self, instrumentHandle, trace):
        state = ViBoolean()
        status = self.dll.rssmf_GetPowerSweepTraceState(ViSession(instrumentHandle), ViInt32(trace), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetPowerSweepTraceColor(self, instrumentHandle, trace, color):
        status = self.dll.rssmf_SetPowerSweepTraceColor(ViSession(instrumentHandle), ViInt32(trace), ViInt32(color))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTraceColor(self, instrumentHandle, trace):
        color = ViInt32()
        status = self.dll.rssmf_GetPowerSweepTraceColor(ViSession(instrumentHandle), ViInt32(trace), byref(color))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(color.value)

    def copyPowerSweepTrace(self, instrumentHandle, trace, copyMode):
        status = self.dll.rssmf_copyPowerSweepTrace(ViSession(instrumentHandle), ViInt32(trace), ViInt32(copyMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTraceDataPoints(self, instrumentHandle, trace):
        dataPoints = ViInt32()
        status = self.dll.rssmf_GetPowerSweepTraceDataPoints(
            ViSession(instrumentHandle), ViInt32(trace), byref(dataPoints)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(dataPoints.value)

    def GetPowerSweepTraceXValues(self, instrumentHandle, trace, arraySize):
        xValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_GetPowerSweepTraceXValues(
            ViSession(instrumentHandle), ViInt32(trace), ViInt32(arraySize), xValues
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(xValues)

    def GetPowerSweepTraceYValues(self, instrumentHandle, trace, arraySize):
        yValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_GetPowerSweepTraceYValues(
            ViSession(instrumentHandle), ViInt32(trace), ViInt32(arraySize), yValues
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(yValues)

    def SetPowerSweepTraceSource(self, instrumentHandle, trace, source):
        status = self.dll.rssmf_SetPowerSweepTraceSource(ViSession(instrumentHandle), ViInt32(trace), ViInt32(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepTraceSource(self, instrumentHandle, trace):
        source = ViInt32()
        status = self.dll.rssmf_GetPowerSweepTraceSource(ViSession(instrumentHandle), ViInt32(trace), byref(source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(source.value)

    def GetPowerSweepTracePulseDataAnalysisState(self, instrumentHandle, trace):
        state = ViBoolean()
        status = self.dll.rssmf_GetPowerSweepTracePulseDataAnalysisState(
            ViSession(instrumentHandle), ViInt32(trace), byref(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def GetPowerSweepTracePulseThresholdBase(self, instrumentHandle, trace):
        base = ViInt32()
        status = self.dll.rssmf_GetPowerSweepTracePulseThresholdBase(
            ViSession(instrumentHandle), ViInt32(trace), byref(base)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(base.value)

    def GetPowerSweepTracePulseThresholdReferenceLevel(self, instrumentHandle, trace, mode):
        referenceLevel = ViReal64()
        status = self.dll.rssmf_GetPowerSweepTracePulseThresholdReferenceLevel(
            ViSession(instrumentHandle),
            ViInt32(trace),
            ViInt32(mode),
            byref(referenceLevel),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(referenceLevel.value)

    def SetPowerSweepSenseMode(self, instrumentHandle, sense, senseMode):
        status = self.dll.rssmf_SetPowerSweepSenseMode(ViSession(instrumentHandle), ViInt32(sense), ViInt32(senseMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepSenseMode(self, instrumentHandle, sense):
        senseMode = ViInt32()
        status = self.dll.rssmf_GetPowerSweepSenseMode(ViSession(instrumentHandle), ViInt32(sense), byref(senseMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(senseMode.value)

    def SetPowerSweepMode(self, instrumentHandle, sense, sweepMode):
        status = self.dll.rssmf_SetPowerSweepMode(ViSession(instrumentHandle), ViInt32(sense), ViInt32(sweepMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepMode(self, instrumentHandle, sense):
        sweepMode = ViInt32()
        status = self.dll.rssmf_GetPowerSweepMode(ViSession(instrumentHandle), ViInt32(sense), byref(sweepMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(sweepMode.value)

    def GetPowerSweepDataPoints(self, instrumentHandle, sense):
        dataPoints = ViInt32()
        status = self.dll.rssmf_GetPowerSweepDataPoints(ViSession(instrumentHandle), ViInt32(sense), byref(dataPoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(dataPoints.value)

    def GetPowerSweepDataXValues(self, instrumentHandle, sense, arraySize):
        dataXValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_GetPowerSweepDataXValues(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(arraySize), dataXValues
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(dataXValues)

    def GetPowerSweepDataYValues(self, instrumentHandle, sense, arraySize):
        dataYValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_GetPowerSweepDataYValues(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(arraySize), dataYValues
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(dataYValues)

    def SetPowerDisplayIndication(self, instrumentHandle, trace, type, indication):
        status = self.dll.rssmf_SetPowerDisplayIndication(
            ViSession(instrumentHandle),
            ViInt32(trace),
            ViInt32(type),
            ViBoolean(indication),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerDisplayIndication(self, instrumentHandle, trace, type):
        indication = ViBoolean()
        status = self.dll.rssmf_GetPowerDisplayIndication(
            ViSession(instrumentHandle), ViInt32(trace), ViInt32(type), byref(indication)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(indication.value)

    def GetPowerDisplayPulseDataAnalysis(self, instrumentHandle, trace, type):
        pulseDataAnalysis = ViReal64()
        status = self.dll.rssmf_GetPowerDisplayPulseDataAnalysis(
            ViSession(instrumentHandle),
            ViInt32(trace),
            ViInt32(type),
            byref(pulseDataAnalysis),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(pulseDataAnalysis.value)

    def SetPowerSensorMathematicsState(self, instrumentHandle, trace, sweepMode, state):
        status = self.dll.rssmf_SetPowerSensorMathematicsState(
            ViSession(instrumentHandle),
            ViInt32(trace),
            ViInt32(sweepMode),
            ViBoolean(state),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSensorMathematicsState(self, instrumentHandle, trace, sweepMode):
        state = ViBoolean()
        status = self.dll.rssmf_GetPowerSensorMathematicsState(
            ViSession(instrumentHandle), ViInt32(trace), ViInt32(sweepMode), byref(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetPowerSensorMathematicsSubtraction(
        self, instrumentHandle, resultTrace, sweepMode, firstOperand, secondOperand
    ):
        status = self.dll.rssmf_SetPowerSensorMathematicsSubtraction(
            ViSession(instrumentHandle),
            ViInt32(resultTrace),
            ViInt32(sweepMode),
            ViInt32(firstOperand),
            ViInt32(secondOperand),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PowerSensorDevice(self, instrumentHandle, sense):
        device = ViInt32()
        status = self.dll.rssmf_PowerSensorDevice(ViSession(instrumentHandle), ViInt32(sense), byref(device))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(device.value)

    def PowerSensorType(self, instrumentHandle, sense):
        type = ARRAY_ViChar(1024)
        status = self.dll.rssmf_PowerSensorType(ViSession(instrumentHandle), ViInt32(sense), type)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(type)

    def PowerReadPower(self, instrumentHandle, read):
        power = ViReal64()
        status = self.dll.rssmf_PowerReadPower(ViSession(instrumentHandle), ViInt32(read), byref(power))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(power.value)

    def PowerReadPowers(self, instrumentHandle, read):
        averagePower = ViReal64()
        peakPower = ViReal64()
        status = self.dll.rssmf_PowerReadPowers(
            ViSession(instrumentHandle),
            ViInt32(read),
            byref(averagePower),
            byref(peakPower),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        averagePower = float(averagePower.value)
        peakPower = float(peakPower.value)
        return averagePower, peakPower

    def GetPowerSensorVersion(self, instrumentHandle, sense):
        version = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetPowerSensorVersion(ViSession(instrumentHandle), ViInt32(sense), version)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(version)

    def PowerSensorSerialNumber(self, instrumentHandle, sense):
        serialNumber = ARRAY_ViChar(1024)
        status = self.dll.rssmf_PowerSensorSerialNumber(ViSession(instrumentHandle), ViInt32(sense), serialNumber)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(serialNumber)

    def confDiagramDisplay(self, instrumentHandle, grid, backgroundColor):
        status = self.dll.rssmf_confDiagramDisplay(
            ViSession(instrumentHandle), ViBoolean(grid), ViInt32(backgroundColor)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetDiagramGrid(self, instrumentHandle, grid):
        status = self.dll.rssmf_SetDiagramGrid(ViSession(instrumentHandle), ViBoolean(grid))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetDiagramGrid(self, instrumentHandle):
        grid = ViBoolean()
        status = self.dll.rssmf_GetDiagramGrid(ViSession(instrumentHandle), byref(grid))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(grid.value)

    def SetDiagramBackgroundColor(self, instrumentHandle, backgroundColor):
        status = self.dll.rssmf_SetDiagramBackgroundColor(ViSession(instrumentHandle), ViInt32(backgroundColor))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetDiagramBackgroundColor(self, instrumentHandle):
        backgroundColor = ViInt32()
        status = self.dll.rssmf_GetDiagramBackgroundColor(ViSession(instrumentHandle), byref(backgroundColor))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(backgroundColor.value)

    def SetPowerSweepHardcopyLNGFormat(self, instrumentHandle, sense, sweepHardcopyFormat):
        status = self.dll.rssmf_SetPowerSweepHardcopyLNGFormat(
            ViSession(instrumentHandle), ViInt32(sense), ViInt32(sweepHardcopyFormat)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyLNGFormat(self, instrumentHandle, sense):
        sweepHardcopyFormat = ViInt32()
        status = self.dll.rssmf_GetPowerSweepHardcopyLNGFormat(
            ViSession(instrumentHandle), ViInt32(sense), byref(sweepHardcopyFormat)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(sweepHardcopyFormat.value)

    def SetPowerSweepHardcopyFile(self, instrumentHandle, fileName):
        status = self.dll.rssmf_SetPowerSweepHardcopyFile(ViSession(instrumentHandle), ViString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyFile(self, instrumentHandle):
        fileName = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetPowerSweepHardcopyFile(ViSession(instrumentHandle), fileName)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(fileName)

    def SetPowerSweepHardcopyDevice(self, instrumentHandle, hardcopyDevice):
        status = self.dll.rssmf_SetPowerSweepHardcopyDevice(ViSession(instrumentHandle), ViInt32(hardcopyDevice))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyDevice(self, instrumentHandle):
        hardcopyDevice = ViInt32()
        status = self.dll.rssmf_GetPowerSweepHardcopyDevice(ViSession(instrumentHandle), byref(hardcopyDevice))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(hardcopyDevice.value)

    def SetPowerSweepHardcopyImageSize(self, instrumentHandle, imageSize):
        status = self.dll.rssmf_SetPowerSweepHardcopyImageSize(ViSession(instrumentHandle), ViInt32(imageSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyImageSize(self, instrumentHandle):
        imageSize = ViInt32()
        status = self.dll.rssmf_GetPowerSweepHardcopyImageSize(ViSession(instrumentHandle), byref(imageSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(imageSize.value)

    def SetPowerSweepHardcopyMarkerState(self, instrumentHandle, state):
        status = self.dll.rssmf_SetPowerSweepHardcopyMarkerState(ViSession(instrumentHandle), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyMarkerState(self, instrumentHandle):
        state = ViBoolean()
        status = self.dll.rssmf_GetPowerSweepHardcopyMarkerState(ViSession(instrumentHandle), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SavePowerSweepHardcopy(self, instrumentHandle):
        status = self.dll.rssmf_SavePowerSweepHardcopy(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerSweepHardcopyCSVHeader(self, instrumentHandle, CSVHeader):
        status = self.dll.rssmf_SetPowerSweepHardcopyCSVHeader(ViSession(instrumentHandle), ViInt32(CSVHeader))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyCSVHeader(self, instrumentHandle):
        CSVHeader = ViInt32()
        status = self.dll.rssmf_GetPowerSweepHardcopyCSVHeader(ViSession(instrumentHandle), byref(CSVHeader))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(CSVHeader.value)

    def SetPowerSweepHardcopyCSVOrientation(self, instrumentHandle, CSVOrientation):
        status = self.dll.rssmf_SetPowerSweepHardcopyCSVOrientation(
            ViSession(instrumentHandle), ViInt32(CSVOrientation)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyCSVOrientation(self, instrumentHandle):
        CSVOrientation = ViInt32()
        status = self.dll.rssmf_GetPowerSweepHardcopyCSVOrientation(ViSession(instrumentHandle), byref(CSVOrientation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(CSVOrientation.value)

    def SetPowerSweepHardcopyCSVColumnSeparator(self, instrumentHandle, CSVColumnSeparator):
        status = self.dll.rssmf_SetPowerSweepHardcopyCSVColumnSeparator(
            ViSession(instrumentHandle), ViInt32(CSVColumnSeparator)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyCSVColumnSeparator(self, instrumentHandle):
        CSVColumnSeparator = ViInt32()
        status = self.dll.rssmf_GetPowerSweepHardcopyCSVColumnSeparator(
            ViSession(instrumentHandle), byref(CSVColumnSeparator)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(CSVColumnSeparator.value)

    def SetPowerSweepHardcopyCSVDecimalPoint(self, instrumentHandle, CSVDecimalPoint):
        status = self.dll.rssmf_SetPowerSweepHardcopyCSVDecimalPoint(
            ViSession(instrumentHandle), ViInt32(CSVDecimalPoint)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyCSVDecimalPoint(self, instrumentHandle):
        CSVDecimalPoint = ViInt32()
        status = self.dll.rssmf_GetPowerSweepHardcopyCSVDecimalPoint(
            ViSession(instrumentHandle), byref(CSVDecimalPoint)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(CSVDecimalPoint.value)

    def GetPowerSweepHardcopyCSVData(self, instrumentHandle, destination):
        status = self.dll.rssmf_GetPowerSweepHardcopyCSVData(ViSession(instrumentHandle), ViString(destination))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerSweepHardcopyAutomaticNamingState(self, instrumentHandle, state):
        status = self.dll.rssmf_SetPowerSweepHardcopyAutomaticNamingState(ViSession(instrumentHandle), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyAutomaticNamingState(self, instrumentHandle):
        state = ViBoolean()
        status = self.dll.rssmf_GetPowerSweepHardcopyAutomaticNamingState(ViSession(instrumentHandle), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def GetPowerSweepHardcopyAutomaticFileName(self, instrumentHandle):
        fileName = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetPowerSweepHardcopyAutomaticFileName(ViSession(instrumentHandle), fileName)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(fileName)

    def SetPowerSweepHardcopyAutomaticDirectory(self, instrumentHandle, directoryName):
        status = self.dll.rssmf_SetPowerSweepHardcopyAutomaticDirectory(
            ViSession(instrumentHandle), ViString(directoryName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyAutomaticDirectory(self, instrumentHandle):
        directoryName = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetPowerSweepHardcopyAutomaticDirectory(ViSession(instrumentHandle), directoryName)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(directoryName)

    def DeletePowerSweepHardcopyImageFiles(self, instrumentHandle):
        status = self.dll.rssmf_DeletePowerSweepHardcopyImageFiles(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetPowerSweepHardcopyAutomaticFileDateState(self, instrumentHandle, fileNamePart, state):
        status = self.dll.rssmf_SetPowerSweepHardcopyAutomaticFileDateState(
            ViSession(instrumentHandle), ViInt32(fileNamePart), ViBoolean(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyAutomaticFileDateState(self, instrumentHandle, fileNamePart):
        state = ViBoolean()
        status = self.dll.rssmf_GetPowerSweepHardcopyAutomaticFileDateState(
            ViSession(instrumentHandle), ViInt32(fileNamePart), byref(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def GetPowerSweepHardcopyAutomaticFileDate(self, instrumentHandle, fileNamePart):
        part = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetPowerSweepHardcopyAutomaticFileDate(
            ViSession(instrumentHandle), ViInt32(fileNamePart), part
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(part)

    def SetPowerSweepHardcopyAutomaticFilePrefixState(self, instrumentHandle, state):
        status = self.dll.rssmf_SetPowerSweepHardcopyAutomaticFilePrefixState(
            ViSession(instrumentHandle), ViBoolean(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyAutomaticFilePrefixState(self, instrumentHandle):
        state = ViBoolean()
        status = self.dll.rssmf_GetPowerSweepHardcopyAutomaticFilePrefixState(ViSession(instrumentHandle), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetPowerSweepHardcopyAutomaticFilePrefix(self, instrumentHandle, prefix):
        status = self.dll.rssmf_SetPowerSweepHardcopyAutomaticFilePrefix(ViSession(instrumentHandle), ViString(prefix))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerSweepHardcopyAutomaticFilePrefix(self, instrumentHandle):
        prefix = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetPowerSweepHardcopyAutomaticFilePrefix(ViSession(instrumentHandle), prefix)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(prefix)

    def GetPowerSweepHardcopyAutomaticFileNumber(self, instrumentHandle):
        number = ViInt32()
        status = self.dll.rssmf_GetPowerSweepHardcopyAutomaticFileNumber(ViSession(instrumentHandle), byref(number))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(number.value)

    def SetAllRFOutputsState(self, instrumentHandle, RFOutputStates):
        status = self.dll.rssmf_SetAllRFOutputsState(ViSession(instrumentHandle), ViBoolean(RFOutputStates))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def confRFLevel(
        self,
        instrumentHandle,
        amplitude,
        offset,
        limit,
        powerResolution,
        variationActive,
        variationStep,
        RFLevelOnRecall,
    ):
        status = self.dll.rssmf_confRFLevel(
            ViSession(instrumentHandle),
            ViReal64(amplitude),
            ViReal64(offset),
            ViReal64(limit),
            ViInt32(powerResolution),
            ViBoolean(variationActive),
            ViReal64(variationStep),
            ViInt32(RFLevelOnRecall),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetRFAmplitude(self, instrumentHandle, amplitude):
        status = self.dll.rssmf_SetRFAmplitude(ViSession(instrumentHandle), ViReal64(amplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFAmplitude(self, instrumentHandle):
        amplitude = ViReal64()
        status = self.dll.rssmf_GetRFAmplitude(ViSession(instrumentHandle), byref(amplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(amplitude.value)

    def SetRFAmplitudeIgnoreOffset(self, instrumentHandle, amplitude):
        status = self.dll.rssmf_SetRFAmplitudeIgnoreOffset(ViSession(instrumentHandle), ViReal64(amplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetRFLevelLimit(self, instrumentHandle, limit):
        status = self.dll.rssmf_SetRFLevelLimit(ViSession(instrumentHandle), ViReal64(limit))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFLevelLimit(self, instrumentHandle):
        limit = ViReal64()
        status = self.dll.rssmf_GetRFLevelLimit(ViSession(instrumentHandle), byref(limit))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(limit.value)

    def SetRFLevelOffset(self, instrumentHandle, offset):
        status = self.dll.rssmf_SetRFLevelOffset(ViSession(instrumentHandle), ViReal64(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFLevelOffset(self, instrumentHandle):
        offset = ViReal64()
        status = self.dll.rssmf_GetRFLevelOffset(ViSession(instrumentHandle), byref(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(offset.value)

    def SetRFPowerResolution(self, instrumentHandle, powerResolution):
        status = self.dll.rssmf_SetRFPowerResolution(ViSession(instrumentHandle), ViInt32(powerResolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFPowerResolution(self, instrumentHandle):
        powerResolution = ViInt32()
        status = self.dll.rssmf_GetRFPowerResolution(ViSession(instrumentHandle), byref(powerResolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(powerResolution.value)

    def SetRFLevelonRecall(self, instrumentHandle, RFLevelOnRecall):
        status = self.dll.rssmf_SetRFLevelonRecall(ViSession(instrumentHandle), ViInt32(RFLevelOnRecall))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFLevelonRecall(self, instrumentHandle):
        RFLevelOnRecall = ViInt32()
        status = self.dll.rssmf_GetRFLevelonRecall(ViSession(instrumentHandle), byref(RFLevelOnRecall))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RFLevelOnRecall.value)

    def SetRFLevelVariationActive(self, instrumentHandle, variationActive):
        status = self.dll.rssmf_SetRFLevelVariationActive(ViSession(instrumentHandle), ViBoolean(variationActive))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFLevelVariationActive(self, instrumentHandle):
        variationActive = ViBoolean()
        status = self.dll.rssmf_GetRFLevelVariationActive(ViSession(instrumentHandle), byref(variationActive))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(variationActive.value)

    def SetRFLevelVariationStep(self, instrumentHandle, variationStep):
        status = self.dll.rssmf_SetRFLevelVariationStep(ViSession(instrumentHandle), ViReal64(variationStep))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFLevelVariationStep(self, instrumentHandle):
        variationStep = ViReal64()
        status = self.dll.rssmf_GetRFLevelVariationStep(ViSession(instrumentHandle), byref(variationStep))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(variationStep.value)

    def SetRFPowerOnState(self, instrumentHandle, powerOnState):
        status = self.dll.rssmf_SetRFPowerOnState(ViSession(instrumentHandle), ViInt32(powerOnState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFPowerOnState(self, instrumentHandle):
        powerOnState = ViInt32()
        status = self.dll.rssmf_GetRFPowerOnState(ViSession(instrumentHandle), byref(powerOnState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(powerOnState.value)

    def SetALCState(self, instrumentHandle, ALCState):
        status = self.dll.rssmf_SetALCState(ViSession(instrumentHandle), ViBoolean(ALCState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetALCState(self, instrumentHandle):
        ALCState = ViBoolean()
        status = self.dll.rssmf_GetALCState(ViSession(instrumentHandle), byref(ALCState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(ALCState.value)

    def SetALCRFPowerDuringPowerSearch(self, instrumentHandle, RFPowerDuringSearch):
        status = self.dll.rssmf_SetALCRFPowerDuringPowerSearch(
            ViSession(instrumentHandle), ViInt32(RFPowerDuringSearch)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetALCRFPowerDuringPowerSearch(self, instrumentHandle):
        RFPowerDuringSearch = ViInt32()
        status = self.dll.rssmf_GetALCRFPowerDuringPowerSearch(ViSession(instrumentHandle), byref(RFPowerDuringSearch))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RFPowerDuringSearch.value)

    def ALCSearchOnce(self, instrumentHandle):
        status = self.dll.rssmf_ALCSearchOnce(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetALCDetector(self, instrumentHandle, detector):
        status = self.dll.rssmf_SetALCDetector(ViSession(instrumentHandle), ViInt32(detector))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetALCDetector(self, instrumentHandle):
        detector = ViInt32()
        status = self.dll.rssmf_GetALCDetector(ViSession(instrumentHandle), byref(detector))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(detector.value)

    def SetALCPowerSensorType(self, instrumentHandle, powerSensorType):
        status = self.dll.rssmf_SetALCPowerSensorType(ViSession(instrumentHandle), ViInt32(powerSensorType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetALCPowerSensorType(self, instrumentHandle):
        powerSensorType = ViInt32()
        status = self.dll.rssmf_GetALCPowerSensorType(ViSession(instrumentHandle), byref(powerSensorType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(powerSensorType.value)

    def SetALCReferenceVoltage(self, instrumentHandle, referenceVoltage):
        status = self.dll.rssmf_SetALCReferenceVoltage(ViSession(instrumentHandle), ViReal64(referenceVoltage))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetALCReferenceVoltage(self, instrumentHandle):
        referenceVoltage = ViReal64()
        status = self.dll.rssmf_GetALCReferenceVoltage(ViSession(instrumentHandle), byref(referenceVoltage))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(referenceVoltage.value)

    def SetUserCorrectionDataState(self, instrumentHandle, correctionState):
        status = self.dll.rssmf_SetUserCorrectionDataState(ViSession(instrumentHandle), ViBoolean(correctionState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetUserCorrectionDataState(self, instrumentHandle):
        correctionState = ViBoolean()
        status = self.dll.rssmf_GetUserCorrectionDataState(ViSession(instrumentHandle), byref(correctionState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(correctionState.value)

    def GetUserCorrectionCurrentValue(self, instrumentHandle):
        correctionCurrentValue = ViReal64()
        status = self.dll.rssmf_GetUserCorrectionCurrentValue(
            ViSession(instrumentHandle), byref(correctionCurrentValue)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(correctionCurrentValue.value)

    def TriggerUserCorrectionMeasurement(self, instrumentHandle):
        status = self.dll.rssmf_TriggerUserCorrectionMeasurement(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetUserCorrectionDataCatalog(self, instrumentHandle, directoryPath, arraySize):
        catalogList = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetUserCorrectionDataCatalog(
            ViSession(instrumentHandle),
            ViString(directoryPath),
            ViInt32(arraySize),
            catalogList,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(catalogList)

    def SetUserCorrectionDataTable(self, instrumentHandle, correctionTable):
        status = self.dll.rssmf_SetUserCorrectionDataTable(ViSession(instrumentHandle), ViString(correctionTable))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetUserCorrectionDataTable(self, instrumentHandle):
        correctionTable = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetUserCorrectionDataTable(ViSession(instrumentHandle), correctionTable)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(correctionTable)

    def SetUserCorrectionDataFrequencyValues(self, instrumentHandle, arraySize):
        frequencyValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_SetUserCorrectionDataFrequencyValues(
            ViSession(instrumentHandle), ViInt32(arraySize), frequencyValues
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(frequencyValues)

    def GetUserCorrectionDataFrequencyValues(self, instrumentHandle, arraySize):
        frequencyValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_GetUserCorrectionDataFrequencyValues(
            ViSession(instrumentHandle), ViInt32(arraySize), frequencyValues
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(frequencyValues)

    def GetUserCorrectionDataNumberofFrequencyValues(self, instrumentHandle):
        numberOfFrequencyValues = ViInt32()
        status = self.dll.rssmf_GetUserCorrectionDataNumberofFrequencyValues(
            ViSession(instrumentHandle), byref(numberOfFrequencyValues)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(numberOfFrequencyValues.value)

    def SetUserCorrectionDataLevelValues(self, instrumentHandle, arraySize):
        levelValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_SetUserCorrectionDataLevelValues(
            ViSession(instrumentHandle), ViInt32(arraySize), levelValues
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(levelValues)

    def GetUserCorrectionDataLevelValues(self, instrumentHandle, arraySize):
        levelValues = ARRAY_ViReal64(arraySize)
        status = self.dll.rssmf_GetUserCorrectionDataLevelValues(
            ViSession(instrumentHandle), ViInt32(arraySize), levelValues
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(levelValues)

    def GetUserCorrectionDataNumberofLevelValues(self, instrumentHandle):
        numberOfLevelValues = ViInt32()
        status = self.dll.rssmf_GetUserCorrectionDataNumberofLevelValues(
            ViSession(instrumentHandle), byref(numberOfLevelValues)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(numberOfLevelValues.value)

    def SetUserCorrectionPowerSensorType(self, instrumentHandle, powerSensorType):
        status = self.dll.rssmf_SetUserCorrectionPowerSensorType(ViSession(instrumentHandle), ViInt32(powerSensorType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetUserCorrectionPowerSensorType(self, instrumentHandle):
        powerSensorType = ViInt32()
        status = self.dll.rssmf_GetUserCorrectionPowerSensorType(ViSession(instrumentHandle), byref(powerSensorType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(powerSensorType.value)

    def UserCorrectionFillListWithSensor(self, instrumentHandle, sensor, timeout):
        status = self.dll.rssmf_UserCorrectionFillListWithSensor(
            ViSession(instrumentHandle), ViInt32(sensor), ViInt32(timeout)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def UserCorrectionDataDeleteTable(self, instrumentHandle, tableName):
        status = self.dll.rssmf_UserCorrectionDataDeleteTable(ViSession(instrumentHandle), ViString(tableName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetCORRectionImportExportListMode(self, instrumentHandle, listMode):
        status = self.dll.rssmf_SetCORRectionImportExportListMode(ViSession(instrumentHandle), ViInt32(listMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCORRectionImportExportListMode(self, instrumentHandle):
        listMode = ViInt32()
        status = self.dll.rssmf_GetCORRectionImportExportListMode(ViSession(instrumentHandle), byref(listMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(listMode.value)

    def SetCORRectionImportExportListFile(self, instrumentHandle, sourceFile):
        status = self.dll.rssmf_SetCORRectionImportExportListFile(ViSession(instrumentHandle), ViString(sourceFile))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCORRectionImportExportListFile(self, instrumentHandle):
        sourceFile = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetCORRectionImportExportListFile(ViSession(instrumentHandle), sourceFile)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(sourceFile)

    def CORRectionImportExportExecute(self, instrumentHandle):
        status = self.dll.rssmf_CORRectionImportExportExecute(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetCORRectionImportExportASCIIFile(self, instrumentHandle, ASCIISourceFile):
        status = self.dll.rssmf_SetCORRectionImportExportASCIIFile(
            ViSession(instrumentHandle), ViString(ASCIISourceFile)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCORRectionImportExportASCIIFile(self, instrumentHandle):
        ASCIISourceFile = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetCORRectionImportExportASCIIFile(ViSession(instrumentHandle), ASCIISourceFile)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ASCIISourceFile)

    def SetCORRectionImportExportASCIIExtension(self, instrumentHandle, extension):
        status = self.dll.rssmf_SetCORRectionImportExportASCIIExtension(ViSession(instrumentHandle), ViInt32(extension))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCORRectionImportExportASCIIExtension(self, instrumentHandle):
        extension = ViInt32()
        status = self.dll.rssmf_GetCORRectionImportExportASCIIExtension(ViSession(instrumentHandle), byref(extension))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(extension.value)

    def SetCORRectionImportExportASCIIColumnSeparator(self, instrumentHandle, separator):
        status = self.dll.rssmf_SetCORRectionImportExportASCIIColumnSeparator(
            ViSession(instrumentHandle), ViInt32(separator)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCORRectionImportExportASCIIColumnSeparator(self, instrumentHandle):
        separator = ViInt32()
        status = self.dll.rssmf_GetCORRectionImportExportASCIIColumnSeparator(
            ViSession(instrumentHandle), byref(separator)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(separator.value)

    def SetCORRectionImportExportASCIIColumnDecimalSeparator(self, instrumentHandle, decimalSeparator):
        status = self.dll.rssmf_SetCORRectionImportExportASCIIColumnDecimalSeparator(
            ViSession(instrumentHandle), ViInt32(decimalSeparator)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCORRectionImportExportASCIIColumnDecimalSeparator(self, instrumentHandle):
        decimalSeparator = ViInt32()
        status = self.dll.rssmf_GetCORRectionImportExportASCIIColumnDecimalSeparator(
            ViSession(instrumentHandle), byref(decimalSeparator)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(decimalSeparator.value)

    def CORRectionImportExportCatalog(self, instrumentHandle, directoryPath, arraySize):
        catalogList = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_CORRectionImportExportCatalog(
            ViSession(instrumentHandle),
            ViString(directoryPath),
            ViInt32(arraySize),
            catalogList,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(catalogList)

    def confRFLevelSweep(self, instrumentHandle, levelSweepMode, startLevel, stopLevel, stepLin, dwellTime):
        status = self.dll.rssmf_confRFLevelSweep(
            ViSession(instrumentHandle),
            ViInt32(levelSweepMode),
            ViReal64(startLevel),
            ViReal64(stopLevel),
            ViReal64(stepLin),
            ViReal64(dwellTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LevelSweepExecute(self, instrumentHandle):
        status = self.dll.rssmf_LevelSweepExecute(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLevelSweepMarker(self, instrumentHandle, channel, state, level, polarity, activeMarker):
        status = self.dll.rssmf_ConfigureLevelSweepMarker(
            ViSession(instrumentHandle),
            ViUInt32(channel),
            ViBoolean(state),
            ViReal64(level),
            ViInt32(polarity),
            ViInt32(activeMarker),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLevelSweepMode(self, instrumentHandle, mode):
        status = self.dll.rssmf_SetLevelSweepMode(ViSession(instrumentHandle), ViInt32(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLevelSweepStartLevel(self, instrumentHandle, startLevel):
        status = self.dll.rssmf_SetLevelSweepStartLevel(ViSession(instrumentHandle), ViReal64(startLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLevelSweepStartLevel(self, instrumentHandle):
        startLevel = ViReal64()
        status = self.dll.rssmf_GetLevelSweepStartLevel(ViSession(instrumentHandle), byref(startLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(startLevel.value)

    def SetLevelSweepStopLevel(self, instrumentHandle, stopLevel):
        status = self.dll.rssmf_SetLevelSweepStopLevel(ViSession(instrumentHandle), ViReal64(stopLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLevelSweepStopLevel(self, instrumentHandle):
        stopLevel = ViReal64()
        status = self.dll.rssmf_GetLevelSweepStopLevel(ViSession(instrumentHandle), byref(stopLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(stopLevel.value)

    def SetLevelSweepStep(self, instrumentHandle, step):
        status = self.dll.rssmf_SetLevelSweepStep(ViSession(instrumentHandle), ViReal64(step))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLevelSweepStep(self, instrumentHandle):
        step = ViReal64()
        status = self.dll.rssmf_GetLevelSweepStep(ViSession(instrumentHandle), byref(step))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(step.value)

    def SetLevelSweepDwell(self, instrumentHandle, dwellTime):
        status = self.dll.rssmf_SetLevelSweepDwell(ViSession(instrumentHandle), ViReal64(dwellTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLevelSweepDwell(self, instrumentHandle):
        dwellTime = ViReal64()
        status = self.dll.rssmf_GetLevelSweepDwell(ViSession(instrumentHandle), byref(dwellTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(dwellTime.value)

    def SetLevelSweepManualStep(self, instrumentHandle, manualStep):
        status = self.dll.rssmf_SetLevelSweepManualStep(ViSession(instrumentHandle), ViReal64(manualStep))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLevelSweepManualStep(self, instrumentHandle):
        manualStep = ViReal64()
        status = self.dll.rssmf_GetLevelSweepManualStep(ViSession(instrumentHandle), byref(manualStep))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(manualStep.value)

    def SetLevelSweepPoints(self, instrumentHandle, levelSweepPoints):
        status = self.dll.rssmf_SetLevelSweepPoints(ViSession(instrumentHandle), ViInt32(levelSweepPoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLevelSweepPoints(self, instrumentHandle):
        levelSweepPoints = ViInt32()
        status = self.dll.rssmf_GetLevelSweepPoints(ViSession(instrumentHandle), byref(levelSweepPoints))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(levelSweepPoints.value)

    def SetLevelSweepAttenuatorMode(self, instrumentHandle, attenuatorMode):
        status = self.dll.rssmf_SetLevelSweepAttenuatorMode(ViSession(instrumentHandle), ViInt32(attenuatorMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLevelSweepAttenuatorMode(self, instrumentHandle):
        attenuatorMode = ViInt32()
        status = self.dll.rssmf_GetLevelSweepAttenuatorMode(ViSession(instrumentHandle), byref(attenuatorMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(attenuatorMode.value)

    def SetLevelSweepShape(self, instrumentHandle, shape):
        status = self.dll.rssmf_SetLevelSweepShape(ViSession(instrumentHandle), ViInt32(shape))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLevelSweepShape(self, instrumentHandle):
        shape = ViInt32()
        status = self.dll.rssmf_GetLevelSweepShape(ViSession(instrumentHandle), byref(shape))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(shape.value)

    def GetLevelSweepSpacing(self, instrumentHandle):
        spacing = ViInt32()
        status = self.dll.rssmf_GetLevelSweepSpacing(ViSession(instrumentHandle), byref(spacing))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(spacing.value)

    def ResetLevelSweep(self, instrumentHandle):
        status = self.dll.rssmf_ResetLevelSweep(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLevelSweepMarkerState(self, instrumentHandle, channel, state):
        status = self.dll.rssmf_SetLevelSweepMarkerState(
            ViSession(instrumentHandle), ViUInt32(channel), ViBoolean(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLevelSweepMarkerState(self, instrumentHandle, channel):
        state = ViBoolean()
        status = self.dll.rssmf_GetLevelSweepMarkerState(ViSession(instrumentHandle), ViUInt32(channel), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetLevelSweepMarkerLevel(self, instrumentHandle, channel, level):
        status = self.dll.rssmf_SetLevelSweepMarkerLevel(
            ViSession(instrumentHandle), ViUInt32(channel), ViReal64(level)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLevelSweepMarkerLevel(self, instrumentHandle, channel):
        level = ViReal64()
        status = self.dll.rssmf_GetLevelSweepMarkerLevel(ViSession(instrumentHandle), ViUInt32(channel), byref(level))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(level.value)

    def SetLevelSweepMarkerPolarity(self, instrumentHandle, polarity):
        status = self.dll.rssmf_SetLevelSweepMarkerPolarity(ViSession(instrumentHandle), ViInt32(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLevelSweepMarkerPolarity(self, instrumentHandle):
        polarity = ViInt32()
        status = self.dll.rssmf_GetLevelSweepMarkerPolarity(ViSession(instrumentHandle), byref(polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(polarity.value)

    def SetLevelSweepActiveMarker(self, instrumentHandle, activeMarker):
        status = self.dll.rssmf_SetLevelSweepActiveMarker(ViSession(instrumentHandle), ViInt32(activeMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLevelSweepActiveMarker(self, instrumentHandle):
        activeMarker = ViInt32()
        status = self.dll.rssmf_GetLevelSweepActiveMarker(ViSession(instrumentHandle), byref(activeMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(activeMarker.value)

    def SetLevelSweepAllMarkersOff(self, instrumentHandle):
        status = self.dll.rssmf_SetLevelSweepAllMarkersOff(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetRFAttenuatorMode(self, instrumentHandle, attenuatorMode):
        status = self.dll.rssmf_SetRFAttenuatorMode(ViSession(instrumentHandle), ViInt32(attenuatorMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFAttenuatorMode(self, instrumentHandle):
        attenuatorMode = ViInt32()
        status = self.dll.rssmf_GetRFAttenuatorMode(ViSession(instrumentHandle), byref(attenuatorMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(attenuatorMode.value)

    def SetRFAttenuation(self, instrumentHandle, attenuation):
        status = self.dll.rssmf_SetRFAttenuation(ViSession(instrumentHandle), ViReal64(attenuation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFAttenuation(self, instrumentHandle):
        attenuation = ViReal64()
        status = self.dll.rssmf_GetRFAttenuation(ViSession(instrumentHandle), byref(attenuation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(attenuation.value)

    def GetRFAttenuatorLowerRange(self, instrumentHandle):
        attenuatorLowerRange = ViReal64()
        status = self.dll.rssmf_GetRFAttenuatorLowerRange(ViSession(instrumentHandle), byref(attenuatorLowerRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(attenuatorLowerRange.value)

    def GetRFAttenuatorUpperRange(self, instrumentHandle):
        attenuatorUpperRange = ViReal64()
        status = self.dll.rssmf_GetRFAttenuatorUpperRange(ViSession(instrumentHandle), byref(attenuatorUpperRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(attenuatorUpperRange.value)

    def SetRFOFFAttenuatorMode(self, instrumentHandle, OFFAttenuatorMode):
        status = self.dll.rssmf_SetRFOFFAttenuatorMode(ViSession(instrumentHandle), ViInt32(OFFAttenuatorMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRFOFFAttenuatorMode(self, instrumentHandle):
        OFFAttenuatorMode = ViInt32()
        status = self.dll.rssmf_GetRFOFFAttenuatorMode(ViSession(instrumentHandle), byref(OFFAttenuatorMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(OFFAttenuatorMode.value)

    def CALibrationAll(self, instrumentHandle, timeout):
        response = ViInt32()
        status = self.dll.rssmf_CALibrationAll(ViSession(instrumentHandle), ViInt32(timeout), byref(response))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(response.value)

    def CALibrationFrequency(self, instrumentHandle, timeout):
        response = ViInt32()
        status = self.dll.rssmf_CALibrationFrequency(ViSession(instrumentHandle), ViInt32(timeout), byref(response))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(response.value)

    def CALibrationModulationGenerators(self, instrumentHandle, timeout):
        response = ViInt32()
        status = self.dll.rssmf_CALibrationModulationGenerators(
            ViSession(instrumentHandle), ViInt32(timeout), byref(response)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(response.value)

    def CALibrationLevel(self, instrumentHandle, timeout):
        response = ViInt32()
        status = self.dll.rssmf_CALibrationLevel(ViSession(instrumentHandle), ViInt32(timeout), byref(response))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(response.value)

    def SetCALibrationLevelState(self, instrumentHandle, levelState):
        status = self.dll.rssmf_SetCALibrationLevelState(ViSession(instrumentHandle), ViBoolean(levelState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCALibrationLevelState(self, instrumentHandle):
        levelState = ViBoolean()
        status = self.dll.rssmf_GetCALibrationLevelState(ViSession(instrumentHandle), byref(levelState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(levelState.value)

    def SetCALibrationLevelLoopGainState(self, instrumentHandle, levelLoopGainState):
        status = self.dll.rssmf_SetCALibrationLevelLoopGainState(
            ViSession(instrumentHandle), ViBoolean(levelLoopGainState)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetCALibrationLevelLoopGainState(self, instrumentHandle):
        levelLoopGainState = ViBoolean()
        status = self.dll.rssmf_GetCALibrationLevelLoopGainState(ViSession(instrumentHandle), byref(levelLoopGainState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(levelLoopGainState.value)

    def ClearStatus(self, instrumentHandle):
        status = self.dll.rssmf_ClearStatus(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def EventStatusEnable(self, instrumentHandle, registerValue):
        status = self.dll.rssmf_EventStatusEnable(ViSession(instrumentHandle), ViInt32(registerValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def EventStatusQuery(self, instrumentHandle):
        registerValue = ViInt32()
        status = self.dll.rssmf_EventStatusQuery(ViSession(instrumentHandle), byref(registerValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(registerValue.value)

    def IdentificationQuery(self, instrumentHandle):
        instrumentIdentification = ARRAY_ViChar(1024)
        status = self.dll.rssmf_IdentificationQuery(ViSession(instrumentHandle), instrumentIdentification)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(instrumentIdentification)

    def IndividualStatusQuery(self, instrumentHandle):
        ISTFlag = ViInt32()
        status = self.dll.rssmf_IndividualStatusQuery(ViSession(instrumentHandle), byref(ISTFlag))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ISTFlag.value)

    def OperationComplete(self, instrumentHandle):
        status = self.dll.rssmf_OperationComplete(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def OperationCompleteQuery(self, instrumentHandle):
        OPCState = ViInt32()
        status = self.dll.rssmf_OperationCompleteQuery(ViSession(instrumentHandle), byref(OPCState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(OPCState.value)

    def OptionIdentificationQuery(self, instrumentHandle):
        optionIdentification = ARRAY_ViChar(1024)
        status = self.dll.rssmf_OptionIdentificationQuery(ViSession(instrumentHandle), optionIdentification)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(optionIdentification)

    def ParallelPollRegisterEnable(self, instrumentHandle, registerValue):
        status = self.dll.rssmf_ParallelPollRegisterEnable(ViSession(instrumentHandle), ViInt32(registerValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ParallelPollRegisterQuery(self, instrumentHandle):
        registerValue = ViInt32()
        status = self.dll.rssmf_ParallelPollRegisterQuery(ViSession(instrumentHandle), byref(registerValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(registerValue.value)

    def PowerOnStatusClear(self, instrumentHandle, registerValue):
        status = self.dll.rssmf_PowerOnStatusClear(ViSession(instrumentHandle), ViInt32(registerValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PowerOnStatusClearQuery(self, instrumentHandle):
        registerValue = ViInt32()
        status = self.dll.rssmf_PowerOnStatusClearQuery(ViSession(instrumentHandle), byref(registerValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(registerValue.value)

    def Recall(self, instrumentHandle, instrumentStatus):
        status = self.dll.rssmf_Recall(ViSession(instrumentHandle), ViInt32(instrumentStatus))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Save(self, instrumentHandle, instrumentStatus):
        status = self.dll.rssmf_Save(ViSession(instrumentHandle), ViInt32(instrumentStatus))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ServiceRequestEnable(self, instrumentHandle, registerValue):
        status = self.dll.rssmf_ServiceRequestEnable(ViSession(instrumentHandle), ViInt32(registerValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ServiceRequestEnableQuery(self, instrumentHandle):
        registerValue = ViInt32()
        status = self.dll.rssmf_ServiceRequestEnableQuery(ViSession(instrumentHandle), byref(registerValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(registerValue.value)

    def StatusByteQuery(self, instrumentHandle):
        statusByte = ViInt32()
        status = self.dll.rssmf_StatusByteQuery(ViSession(instrumentHandle), byref(statusByte))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(statusByte.value)

    def Trigger(self, instrumentHandle):
        status = self.dll.rssmf_Trigger(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerWaitOPC(self, instrumentHandle, timeout):
        status = self.dll.rssmf_TriggerWaitOPC(ViSession(instrumentHandle), ViInt32(timeout))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SelfTestQuery(self, instrumentHandle):
        errorCode = ViInt32()
        status = self.dll.rssmf_SelfTestQuery(ViSession(instrumentHandle), byref(errorCode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(errorCode.value)

    def WaittoContinue(self, instrumentHandle):
        status = self.dll.rssmf_WaittoContinue(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PresetSignalPath(self, instrumentHandle):
        status = self.dll.rssmf_PresetSignalPath(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetImageFileName(self, instrumentHandle, fileName):
        status = self.dll.rssmf_SetImageFileName(ViSession(instrumentHandle), ViString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetImageFileName(self, instrumentHandle):
        fileName = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetImageFileName(ViSession(instrumentHandle), fileName)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(fileName)

    def SetImageFormat(self, instrumentHandle, imageFormat):
        status = self.dll.rssmf_SetImageFormat(ViSession(instrumentHandle), ViInt32(imageFormat))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetImageFormat(self, instrumentHandle):
        imageFormat = ViInt32()
        status = self.dll.rssmf_GetImageFormat(ViSession(instrumentHandle), byref(imageFormat))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(imageFormat.value)

    def GetImageSnapshot(self, instrumentHandle, destination):
        status = self.dll.rssmf_GetImageSnapshot(ViSession(instrumentHandle), ViString(destination))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetImageSize(self, instrumentHandle, imageSize):
        status = self.dll.rssmf_SetImageSize(ViSession(instrumentHandle), ViInt32(imageSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetImageSize(self, instrumentHandle):
        imageSize = ViInt32()
        status = self.dll.rssmf_GetImageSize(ViSession(instrumentHandle), byref(imageSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(imageSize.value)

    def SetOutputDevice(self, instrumentHandle, outputDevice):
        status = self.dll.rssmf_SetOutputDevice(ViSession(instrumentHandle), ViInt32(outputDevice))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetOutputDevice(self, instrumentHandle):
        outputDevice = ViInt32()
        status = self.dll.rssmf_GetOutputDevice(ViSession(instrumentHandle), byref(outputDevice))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(outputDevice.value)

    def SaveHardCopy(self, instrumentHandle):
        status = self.dll.rssmf_SaveHardCopy(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAutomaticNamingState(self, instrumentHandle, state):
        status = self.dll.rssmf_SetAutomaticNamingState(ViSession(instrumentHandle), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAutomaticNamingState(self, instrumentHandle):
        state = ViBoolean()
        status = self.dll.rssmf_GetAutomaticNamingState(ViSession(instrumentHandle), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def GetAutomaticFilePath(self, instrumentHandle, arraySize):
        filePath = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetAutomaticFilePath(ViSession(instrumentHandle), ViInt32(arraySize), filePath)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(filePath)

    def GetAutomaticFileName(self, instrumentHandle):
        fileName = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetAutomaticFileName(ViSession(instrumentHandle), fileName)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(fileName)

    def SetAutomaticDirectory(self, instrumentHandle, directoryName):
        status = self.dll.rssmf_SetAutomaticDirectory(ViSession(instrumentHandle), ViString(directoryName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAutomaticDirectory(self, instrumentHandle):
        directory = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetAutomaticDirectory(ViSession(instrumentHandle), directory)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(directory)

    def DeleteImageFiles(self, instrumentHandle):
        status = self.dll.rssmf_DeleteImageFiles(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAutomaticFileDateState(self, instrumentHandle, fileNamePart, state):
        status = self.dll.rssmf_SetAutomaticFileDateState(
            ViSession(instrumentHandle), ViInt32(fileNamePart), ViBoolean(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAutomaticFileDateState(self, instrumentHandle, fileNamePart):
        state = ViBoolean()
        status = self.dll.rssmf_GetAutomaticFileDateState(
            ViSession(instrumentHandle), ViInt32(fileNamePart), byref(state)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def GetAutomaticFileDate(self, instrumentHandle, fileNamePart):
        part = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetAutomaticFileDate(ViSession(instrumentHandle), ViInt32(fileNamePart), part)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(part)

    def SetAutomaticFilePrefixState(self, instrumentHandle, state):
        status = self.dll.rssmf_SetAutomaticFilePrefixState(ViSession(instrumentHandle), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAutomaticFilePrefixState(self, instrumentHandle):
        state = ViBoolean()
        status = self.dll.rssmf_GetAutomaticFilePrefixState(ViSession(instrumentHandle), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetAutomaticFilePrefix(self, instrumentHandle, prefix):
        status = self.dll.rssmf_SetAutomaticFilePrefix(ViSession(instrumentHandle), ViString(prefix))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAutomaticFilePrefix(self, instrumentHandle):
        fileName = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetAutomaticFilePrefix(ViSession(instrumentHandle), fileName)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(fileName)

    def GetAutomaticFileNumber(self, instrumentHandle):
        number = ViInt32()
        status = self.dll.rssmf_GetAutomaticFileNumber(ViSession(instrumentHandle), byref(number))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(number.value)

    def DIAGnosticModules(self, instrumentHandle, moduleName, arraySize):
        moduleConfiguration = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_DIAGnosticModules(
            ViSession(instrumentHandle),
            ViString(moduleName),
            ViInt32(arraySize),
            moduleConfiguration,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(moduleConfiguration)

    def DIAGnosticModuleNames(self, instrumentHandle, arraySize):
        moduleNames = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_DIAGnosticModuleNames(ViSession(instrumentHandle), ViInt32(arraySize), moduleNames)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(moduleNames)

    def DIAGnosticTestPoints(self, instrumentHandle, arraySize):
        testPoints = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_DIAGnosticTestPoints(ViSession(instrumentHandle), ViInt32(arraySize), testPoints)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(testPoints)

    def DIAGnosticTestPointVoltages(self, instrumentHandle, testPointName):
        measuredVoltage = ViReal64()
        status = self.dll.rssmf_DIAGnosticTestPointVoltages(
            ViSession(instrumentHandle), ViString(testPointName), byref(measuredVoltage)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measuredVoltage.value)

    def DIAGnosticOperationTime(self, instrumentHandle):
        operationTime = ViUInt32()
        status = self.dll.rssmf_DIAGnosticOperationTime(ViSession(instrumentHandle), byref(operationTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(operationTime.value)

    def DIAGnosticPowerOnEvents(self, instrumentHandle):
        powerOnEvents = ViUInt32()
        status = self.dll.rssmf_DIAGnosticPowerOnEvents(ViSession(instrumentHandle), byref(powerOnEvents))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(powerOnEvents.value)

    def TESTDirect(self, instrumentHandle, command):
        assemblyResponse = ARRAY_ViChar(1024)
        status = self.dll.rssmf_TESTDirect(ViSession(instrumentHandle), ViInt32(command), assemblyResponse)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(assemblyResponse)

    def SetKeyboardLock(self, instrumentHandle, keyboardLock):
        status = self.dll.rssmf_SetKeyboardLock(ViSession(instrumentHandle), ViBoolean(keyboardLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetKeyboardLock(self, instrumentHandle):
        keyboardLock = ViBoolean()
        status = self.dll.rssmf_GetKeyboardLock(ViSession(instrumentHandle), byref(keyboardLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(keyboardLock.value)

    def SetDisplayPowerSaveState(self, instrumentHandle, state):
        status = self.dll.rssmf_SetDisplayPowerSaveState(ViSession(instrumentHandle), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetDisplayPowerSaveState(self, instrumentHandle):
        state = ViBoolean()
        status = self.dll.rssmf_GetDisplayPowerSaveState(ViSession(instrumentHandle), byref(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(state.value)

    def SetDisplayPowerSaveHoldoff(self, instrumentHandle, holdoff):
        status = self.dll.rssmf_SetDisplayPowerSaveHoldoff(ViSession(instrumentHandle), ViInt32(holdoff))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetDisplayPowerSaveHoldoff(self, instrumentHandle):
        holdoff = ViInt32()
        status = self.dll.rssmf_GetDisplayPowerSaveHoldoff(ViSession(instrumentHandle), byref(holdoff))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(holdoff.value)

    def SetDisplayBlankMode(self, instrumentHandle, blankMode):
        status = self.dll.rssmf_SetDisplayBlankMode(ViSession(instrumentHandle), ViInt32(blankMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetDisplayBlankMode(self, instrumentHandle):
        blankMode = ViInt32()
        status = self.dll.rssmf_GetDisplayBlankMode(ViSession(instrumentHandle), byref(blankMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(blankMode.value)

    def SetDisplayProportionalScale(self, instrumentHandle, proportionalScale):
        status = self.dll.rssmf_SetDisplayProportionalScale(ViSession(instrumentHandle), ViInt32(proportionalScale))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetDisplayProportionalScale(self, instrumentHandle):
        proportionalScale = ViInt32()
        status = self.dll.rssmf_GetDisplayProportionalScale(ViSession(instrumentHandle), byref(proportionalScale))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(proportionalScale.value)

    def SetDisplayUpdate(self, instrumentHandle, displayUpdate):
        status = self.dll.rssmf_SetDisplayUpdate(ViSession(instrumentHandle), ViBoolean(displayUpdate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetDisplayUpdate(self, instrumentHandle):
        displayUpdate = ViBoolean()
        status = self.dll.rssmf_GetDisplayUpdate(ViSession(instrumentHandle), byref(displayUpdate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(displayUpdate.value)

    def SetDisplayLock(self, instrumentHandle, displayLock):
        status = self.dll.rssmf_SetDisplayLock(ViSession(instrumentHandle), ViBoolean(displayLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetDisplayLock(self, instrumentHandle):
        displayLock = ViBoolean()
        status = self.dll.rssmf_GetDisplayLock(ViSession(instrumentHandle), byref(displayLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(displayLock.value)

    def MMEMoryCatalog(self, instrumentHandle, directoryPath, arraySize):
        catalogList = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_MMEMoryCatalog(
            ViSession(instrumentHandle),
            ViString(directoryPath),
            ViInt32(arraySize),
            catalogList,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(catalogList)

    def MMEMoryCatalogLength(self, instrumentHandle, directoryPath):
        catalogLength = ViInt32()
        status = self.dll.rssmf_MMEMoryCatalogLength(
            ViSession(instrumentHandle), ViString(directoryPath), byref(catalogLength)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(catalogLength.value)

    def MMEMoryChangeDirectory(self, instrumentHandle, directoryName):
        status = self.dll.rssmf_MMEMoryChangeDirectory(ViSession(instrumentHandle), ViString(directoryName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MMEMoryCopy(self, instrumentHandle, sourcePath, destinationPath):
        status = self.dll.rssmf_MMEMoryCopy(
            ViSession(instrumentHandle), ViString(sourcePath), ViString(destinationPath)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MMEMoryBlockDataWrite(self, instrumentHandle, fileName, binaryBlockLength):
        binaryBlockData = ARRAY_ViChar(binaryBlockLength)
        status = self.dll.rssmf_MMEMoryBlockDataWrite(
            ViSession(instrumentHandle),
            ViString(fileName),
            ViInt32(binaryBlockLength),
            binaryBlockData,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(binaryBlockData)

    def MMEMoryBlockDataRead(self, instrumentHandle, fileName, binaryBlockLength):
        binaryBlockData = ARRAY_ViChar(binaryBlockLength)
        status = self.dll.rssmf_MMEMoryBlockDataRead(
            ViSession(instrumentHandle),
            ViString(fileName),
            ViInt32(binaryBlockLength),
            binaryBlockData,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(binaryBlockData)

    def MMEMoryDirectoryCatalog(self, instrumentHandle, directoryPath, arraySize):
        catalogList = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_MMEMoryDirectoryCatalog(
            ViSession(instrumentHandle),
            ViString(directoryPath),
            ViInt32(arraySize),
            catalogList,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(catalogList)

    def MMEMoryDirectoryCatalogLength(self, instrumentHandle, directoryPath):
        catalogLength = ViInt32()
        status = self.dll.rssmf_MMEMoryDirectoryCatalogLength(
            ViSession(instrumentHandle), ViString(directoryPath), byref(catalogLength)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(catalogLength.value)

    def MMEMoryDelete(self, instrumentHandle, fileName):
        status = self.dll.rssmf_MMEMoryDelete(ViSession(instrumentHandle), ViString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MMEMoryLoad(self, instrumentHandle, instrumentSetting, fileName):
        status = self.dll.rssmf_MMEMoryLoad(ViSession(instrumentHandle), ViInt32(instrumentSetting), ViString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MMEMoryMakeDirectory(self, instrumentHandle, directoryName):
        status = self.dll.rssmf_MMEMoryMakeDirectory(ViSession(instrumentHandle), ViString(directoryName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MMEMoryMove(self, instrumentHandle, fileSource, fileDestination):
        status = self.dll.rssmf_MMEMoryMove(
            ViSession(instrumentHandle), ViString(fileSource), ViString(fileDestination)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MMEMoryRemoveDirectory(self, instrumentHandle, directoryName):
        status = self.dll.rssmf_MMEMoryRemoveDirectory(ViSession(instrumentHandle), ViString(directoryName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MMEMoryStore(self, instrumentHandle, instrumentSetting, fileName):
        status = self.dll.rssmf_MMEMoryStore(
            ViSession(instrumentHandle), ViInt32(instrumentSetting), ViString(fileName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def setRegister(self, instrumentHandle, registerGroup, registerType, value):
        status = self.dll.rssmf_setRegister(
            ViSession(instrumentHandle),
            ViInt32(registerGroup),
            ViInt32(registerType),
            ViInt32(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def getRegister(self, instrumentHandle, registerGroup, registerType):
        value = ViInt32()
        status = self.dll.rssmf_getRegister(
            ViSession(instrumentHandle),
            ViInt32(registerGroup),
            ViInt32(registerType),
            byref(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def STATusPRESet(self, instrumentHandle):
        status = self.dll.rssmf_STATusPRESet(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetSYSTemBeeper(self, instrumentHandle, systemBeeper):
        status = self.dll.rssmf_SetSYSTemBeeper(ViSession(instrumentHandle), ViBoolean(systemBeeper))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemBeeper(self, instrumentHandle):
        systemBeeper = ViBoolean()
        status = self.dll.rssmf_GetSYSTemBeeper(ViSession(instrumentHandle), byref(systemBeeper))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(systemBeeper.value)

    def SYSTemErrorQueueAll(self, instrumentHandle, arraySize):
        errorQueue = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_SYSTemErrorQueueAll(ViSession(instrumentHandle), ViInt32(arraySize), errorQueue)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(errorQueue)

    def SYSTemErrorQueueCodeAll(self, instrumentHandle, arraySize):
        errorQueueCode = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_SYSTemErrorQueueCodeAll(ViSession(instrumentHandle), ViInt32(arraySize), errorQueueCode)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(errorQueueCode)

    def SYSTemErrorQueueCodeNext(self, instrumentHandle):
        errorQueueCodeNext = ViInt32()
        status = self.dll.rssmf_SYSTemErrorQueueCodeNext(ViSession(instrumentHandle), byref(errorQueueCodeNext))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(errorQueueCodeNext.value)

    def SYSTemErrorQueueCount(self, instrumentHandle):
        errorQueueCount = ViInt32()
        status = self.dll.rssmf_SYSTemErrorQueueCount(ViSession(instrumentHandle), byref(errorQueueCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(errorQueueCount.value)

    def SYSTemUSBResource(self, instrumentHandle, arraySize):
        USBResource = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_SYSTemUSBResource(ViSession(instrumentHandle), ViInt32(arraySize), USBResource)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(USBResource)

    def SYSTemGPIBResource(self, instrumentHandle, arraySize):
        GPIBResource = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_SYSTemGPIBResource(ViSession(instrumentHandle), ViInt32(arraySize), GPIBResource)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(GPIBResource)

    def SYSTemSerialResource(self, instrumentHandle, arraySize):
        serialResource = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_SYSTemSerialResource(ViSession(instrumentHandle), ViInt32(arraySize), serialResource)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(serialResource)

    def SYSTemOptionUserDefined(self, instrumentHandle, userDefinedIdentification):
        status = self.dll.rssmf_SYSTemOptionUserDefined(
            ViSession(instrumentHandle), ViString(userDefinedIdentification)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetSYSTemProtect(self, instrumentHandle, protectionLevel, protection, password):
        status = self.dll.rssmf_SetSYSTemProtect(
            ViSession(instrumentHandle),
            ViInt32(protectionLevel),
            ViBoolean(protection),
            ViString(password),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemVersion(self, instrumentHandle):
        SCPIVersion = ARRAY_ViChar(1024)
        status = self.dll.rssmf_GetSYSTemVersion(ViSession(instrumentHandle), SCPIVersion)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(SCPIVersion)

    def GetSYSTemStartupStatus(self, instrumentHandle):
        startupComplete = ViInt32()
        status = self.dll.rssmf_GetSYSTemStartupStatus(ViSession(instrumentHandle), byref(startupComplete))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(startupComplete.value)

    def SYSTemFactoryPreset(self, instrumentHandle):
        status = self.dll.rssmf_SYSTemFactoryPreset(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemErrorList(self, instrumentHandle, arraySize):
        errorQueue = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemErrorList(ViSession(instrumentHandle), ViInt32(arraySize), errorQueue)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(errorQueue)

    def SetSYSTemNetworkIPAddress(self, instrumentHandle, IPAddress):
        status = self.dll.rssmf_SetSYSTemNetworkIPAddress(ViSession(instrumentHandle), ViString(IPAddress))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkIPAddress(self, instrumentHandle, arraySize):
        IPAddress = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkIPAddress(ViSession(instrumentHandle), ViInt32(arraySize), IPAddress)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(IPAddress)

    def SetSYSTemNetworkIPAddressSubnetMask(self, instrumentHandle, IPAddressSubnetMask):
        status = self.dll.rssmf_SetSYSTemNetworkIPAddressSubnetMask(
            ViSession(instrumentHandle), ViString(IPAddressSubnetMask)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkIPAddressSubnetMask(self, instrumentHandle, arraySize):
        IPAddressSubnetMask = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkIPAddressSubnetMask(
            ViSession(instrumentHandle), ViInt32(arraySize), IPAddressSubnetMask
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(IPAddressSubnetMask)

    def SetSYSTemNetworkIPAddressGateway(self, instrumentHandle, IPAddressGateway):
        status = self.dll.rssmf_SetSYSTemNetworkIPAddressGateway(
            ViSession(instrumentHandle), ViString(IPAddressGateway)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkIPAddressGateway(self, instrumentHandle, arraySize):
        IPAddressGateway = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkIPAddressGateway(
            ViSession(instrumentHandle), ViInt32(arraySize), IPAddressGateway
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(IPAddressGateway)

    def SetSYSTemNetworkIPAddressMode(self, instrumentHandle, IPAddressMode):
        status = self.dll.rssmf_SetSYSTemNetworkIPAddressMode(ViSession(instrumentHandle), ViInt32(IPAddressMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkIPAddressMode(self, instrumentHandle):
        IPAddressMode = ViInt32()
        status = self.dll.rssmf_GetSYSTemNetworkIPAddressMode(ViSession(instrumentHandle), byref(IPAddressMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(IPAddressMode.value)

    def SYSTemNetworkIPAddressExecute(self, instrumentHandle):
        status = self.dll.rssmf_SYSTemNetworkIPAddressExecute(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetSYSTemNetworkCommonWorkgroup(self, instrumentHandle, commonWorkgroup):
        status = self.dll.rssmf_SetSYSTemNetworkCommonWorkgroup(ViSession(instrumentHandle), ViString(commonWorkgroup))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkCommonWorkgroup(self, instrumentHandle, arraySize):
        commonWorkgroup = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkCommonWorkgroup(
            ViSession(instrumentHandle), ViInt32(arraySize), commonWorkgroup
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(commonWorkgroup)

    def SetSYSTemNetworkCommonDomain(self, instrumentHandle, commonDomain):
        status = self.dll.rssmf_SetSYSTemNetworkCommonDomain(ViSession(instrumentHandle), ViString(commonDomain))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkCommonDomain(self, instrumentHandle, arraySize):
        commonDomain = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkCommonDomain(
            ViSession(instrumentHandle), ViInt32(arraySize), commonDomain
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(commonDomain)

    def SetSYSTemNetworkCommonHostname(self, instrumentHandle, commonHostname):
        status = self.dll.rssmf_SetSYSTemNetworkCommonHostname(ViSession(instrumentHandle), ViString(commonHostname))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkCommonHostname(self, instrumentHandle, arraySize):
        commonHostname = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkCommonHostname(
            ViSession(instrumentHandle), ViInt32(arraySize), commonHostname
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(commonHostname)

    def SYSTemNetworkCommonExecute(self, instrumentHandle):
        status = self.dll.rssmf_SYSTemNetworkCommonExecute(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetSYSTemNetworkPreferedDNS(self, instrumentHandle, preferedDNS):
        status = self.dll.rssmf_SetSYSTemNetworkPreferedDNS(ViSession(instrumentHandle), ViString(preferedDNS))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkPreferedDNS(self, instrumentHandle, arraySize):
        preferedDNS = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkPreferedDNS(
            ViSession(instrumentHandle), ViInt32(arraySize), preferedDNS
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(preferedDNS)

    def SetSYSTemNetworkAlternateDNS(self, instrumentHandle, alternateDNS):
        status = self.dll.rssmf_SetSYSTemNetworkAlternateDNS(ViSession(instrumentHandle), ViString(alternateDNS))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkAlternateDNS(self, instrumentHandle, arraySize):
        alternateDNS = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkAlternateDNS(
            ViSession(instrumentHandle), ViInt32(arraySize), alternateDNS
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(alternateDNS)

    def SetSYSTemNetworkDNSMode(self, instrumentHandle, DNSMode):
        status = self.dll.rssmf_SetSYSTemNetworkDNSMode(ViSession(instrumentHandle), ViInt32(DNSMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkDNSMode(self, instrumentHandle):
        DNSMode = ViInt32()
        status = self.dll.rssmf_GetSYSTemNetworkDNSMode(ViSession(instrumentHandle), byref(DNSMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(DNSMode.value)

    def SYSTemNetworkDNSExecute(self, instrumentHandle):
        status = self.dll.rssmf_SYSTemNetworkDNSExecute(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetSYSTemNetworkDomain(self, instrumentHandle, domain):
        status = self.dll.rssmf_SetSYSTemNetworkDomain(ViSession(instrumentHandle), ViString(domain))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkDomain(self, instrumentHandle, arraySize):
        domain = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkDomain(ViSession(instrumentHandle), ViInt32(arraySize), domain)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(domain)

    def SetSYSTemNetworkGateway(self, instrumentHandle, gateway):
        status = self.dll.rssmf_SetSYSTemNetworkGateway(ViSession(instrumentHandle), ViString(gateway))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkGateway(self, instrumentHandle, arraySize):
        gateway = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkGateway(ViSession(instrumentHandle), ViInt32(arraySize), gateway)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(gateway)

    def GetSYSTemNetworkResource(self, instrumentHandle, arraySize):
        resource = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkResource(ViSession(instrumentHandle), ViInt32(arraySize), resource)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(resource)

    def SetSYSTemNetworkSubnetMask(self, instrumentHandle, subnetMask):
        status = self.dll.rssmf_SetSYSTemNetworkSubnetMask(ViSession(instrumentHandle), ViString(subnetMask))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkSubnetMask(self, instrumentHandle, arraySize):
        subnetMask = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkSubnetMask(ViSession(instrumentHandle), ViInt32(arraySize), subnetMask)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(subnetMask)

    def SetSYSTemNetworkWorkgroup(self, instrumentHandle, workgroup):
        status = self.dll.rssmf_SetSYSTemNetworkWorkgroup(ViSession(instrumentHandle), ViString(workgroup))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSYSTemNetworkWorkgroup(self, instrumentHandle, arraySize):
        workgroup = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkWorkgroup(ViSession(instrumentHandle), ViInt32(arraySize), workgroup)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(workgroup)

    def GetSYSTemNetworkMACAddress(self, instrumentHandle, arraySize):
        MACAddress = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_GetSYSTemNetworkMACAddress(ViSession(instrumentHandle), ViInt32(arraySize), MACAddress)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(MACAddress)

    def GetSYSTemNetwork(self, instrumentHandle):
        status = self.dll.rssmf_GetSYSTemNetwork(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerSourceAllSweeps(self, instrumentHandle, triggerSourceAllSweeps):
        status = self.dll.rssmf_TriggerSourceAllSweeps(ViSession(instrumentHandle), ViInt32(triggerSourceAllSweeps))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerAllSweeps(self, instrumentHandle):
        status = self.dll.rssmf_TriggerAllSweeps(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SweepReset(self, instrumentHandle):
        status = self.dll.rssmf_SweepReset(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerRFFrequencySweep(self, instrumentHandle):
        status = self.dll.rssmf_TriggerRFFrequencySweep(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerRFLevelSweep(self, instrumentHandle):
        status = self.dll.rssmf_TriggerRFLevelSweep(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetNoSignalMarkerPolarity(self, instrumentHandle, markerPolarity):
        status = self.dll.rssmf_SetNoSignalMarkerPolarity(ViSession(instrumentHandle), ViInt32(markerPolarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNoSignalMarkerPolarity(self, instrumentHandle):
        markerPolarity = ViInt32()
        status = self.dll.rssmf_GetNoSignalMarkerPolarity(ViSession(instrumentHandle), byref(markerPolarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(markerPolarity.value)

    def SetBlankWidth(self, instrumentHandle, blankWidth):
        status = self.dll.rssmf_SetBlankWidth(ViSession(instrumentHandle), ViInt32(blankWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetBlankWidth(self, instrumentHandle):
        blankWidth = ViInt32()
        status = self.dll.rssmf_GetBlankWidth(ViSession(instrumentHandle), byref(blankWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(blankWidth.value)

    def SetAngleUnits(self, instrumentHandle, angleUnits):
        status = self.dll.rssmf_SetAngleUnits(ViSession(instrumentHandle), ViInt32(angleUnits))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAngleUnits(self, instrumentHandle):
        angleUnits = ViInt32()
        status = self.dll.rssmf_GetAngleUnits(ViSession(instrumentHandle), byref(angleUnits))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(angleUnits.value)

    def SetPowerUnits(self, instrumentHandle, powerUnits):
        status = self.dll.rssmf_SetPowerUnits(ViSession(instrumentHandle), ViInt32(powerUnits))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPowerUnits(self, instrumentHandle):
        powerUnits = ViInt32()
        status = self.dll.rssmf_GetPowerUnits(ViSession(instrumentHandle), byref(powerUnits))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(powerUnits.value)

    def SetVelocityUnits(self, instrumentHandle, velocityUnits):
        status = self.dll.rssmf_SetVelocityUnits(ViSession(instrumentHandle), ViInt32(velocityUnits))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetVelocityUnits(self, instrumentHandle):
        velocityUnits = ViInt32()
        status = self.dll.rssmf_GetVelocityUnits(ViSession(instrumentHandle), byref(velocityUnits))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(velocityUnits.value)

    def readToFile(self, instrumentHandle, source, destination):
        status = self.dll.rssmf_readToFile(ViSession(instrumentHandle), ViString(source), ViString(destination))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def writeFromFile(self, instrumentHandle, source, destination):
        status = self.dll.rssmf_writeFromFile(ViSession(instrumentHandle), ViString(source), ViString(destination))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def errorCheckState(self, instrumentHandle, stateChecking):
        status = self.dll.rssmf_errorCheckState(ViSession(instrumentHandle), ViBoolean(stateChecking))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def optionCheckState(self, instrumentHandle, stateChecking):
        status = self.dll.rssmf_optionCheckState(ViSession(instrumentHandle), ViBoolean(stateChecking))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def rangeCheckState(self, instrumentHandle, rangeChecking):
        status = self.dll.rssmf_rangeCheckState(ViSession(instrumentHandle), ViBoolean(rangeChecking))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def writeInstrData(self, instrumentHandle, writeBuffer):
        status = self.dll.rssmf_writeInstrData(ViSession(instrumentHandle), ViString(writeBuffer))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def readInstrData(self, instrumentHandle, numberBytesToRead):
        readBuffer = ARRAY_ViChar(numberBytesToRead)
        numBytesRead = ViInt32()
        status = self.dll.rssmf_readInstrData(
            ViSession(instrumentHandle),
            ViInt32(numberBytesToRead),
            readBuffer,
            byref(numBytesRead),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        readBuffer = decode(readBuffer)
        numBytesRead = int(numBytesRead.value)
        return readBuffer, numBytesRead

    def DevicePreset(self, instrumentHandle):
        status = self.dll.rssmf_DevicePreset(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def reset(self, instrumentHandle):
        status = self.dll.rssmf_reset(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, instrumentHandle):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        status = self.dll.rssmf_self_test(ViSession(instrumentHandle), byref(selfTestResult), selfTestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def error_query(self, instrumentHandle):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        status = self.dll.rssmf_error_query(ViSession(instrumentHandle), byref(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def error_message(self, instrumentHandle, statusCode):
        message = ARRAY_ViChar(1024)
        status = self.dll.rssmf_error_message(ViSession(instrumentHandle), ViStatus(statusCode), message)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(message)

    def revision_query(self, instrumentHandle):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        status = self.dll.rssmf_revision_query(ViSession(instrumentHandle), instrumentDriverRevision, firmwareRevision)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def delay(self, instrumentHandle, seconds):
        status = self.dll.rssmf_delay(ViSession(instrumentHandle), ViReal64(seconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IDQueryResponse(self, instrumentHandle, bufferSize):
        IDQueryResponse = ARRAY_ViChar(bufferSize)
        status = self.dll.rssmf_IDQueryResponse(ViSession(instrumentHandle), ViUInt32(bufferSize), IDQueryResponse)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(IDQueryResponse)

    def ProcessAllPreviousCommands(self, instrumentHandle):
        status = self.dll.rssmf_ProcessAllPreviousCommands(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryOPC(self, instrumentHandle):
        OPC = ViInt32()
        status = self.dll.rssmf_QueryOPC(ViSession(instrumentHandle), byref(OPC))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(OPC.value)

    def close(self, instrumentHandle):
        status = self.dll.rssmf_close(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def checkStatus(self, instrSession):
        status = self.dll.rssmf_checkStatus(ViSession(instrSession))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def waitOPC(self, instrSession, timeout):
        command = ViString()
        instrResp = ViString()
        status = self.dll.rssmf_waitOPC(ViSession(instrSession), byref(command), byref(instrResp), ViInt32(timeout))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return command, instrResp

    def sendCmd(self, instrSession, cmd):
        status = self.dll.rssmf_sendCmd(ViSession(instrSession), ViString(cmd))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def setViInt32(self, instrSession, cmd, value, min, max, parameterName):
        status = self.dll.rssmf_setViInt32(
            ViSession(instrSession),
            ViString(cmd),
            ViInt32(value),
            ViInt32(min),
            ViInt32(max),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def getViInt32(self, instrSession, cmd, parameterName):
        value = ViInt32()
        status = self.dll.rssmf_getViInt32(
            ViSession(instrSession), ViString(cmd), byref(value), ViString(parameterName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def setViBoolean(self, instrSession, cmd, value, parameterName):
        status = self.dll.rssmf_setViBoolean(
            ViSession(instrSession),
            ViString(cmd),
            ViBoolean(value),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def getViBoolean(self, instrSession, cmd, parameterName):
        value = ViBoolean()
        status = self.dll.rssmf_getViBoolean(
            ViSession(instrSession), ViString(cmd), byref(value), ViString(parameterName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(value.value)

    def setViBooleanPath(self, instrSession, cmd, path, value, parameterName):
        status = self.dll.rssmf_setViBooleanPath(
            ViSession(instrSession),
            ViString(cmd),
            ViInt32(path),
            ViBoolean(value),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def getViBooleanPath(self, instrSession, cmd, path, parameterName):
        value = ViBoolean()
        status = self.dll.rssmf_getViBooleanPath(
            ViSession(instrSession),
            ViString(cmd),
            ViInt32(path),
            byref(value),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(value.value)

    def setViReal64(self, vi, cmd, value, min, max, parameterName):
        status = self.dll.rssmf_setViReal64(
            ViSession(vi),
            ViString(cmd),
            ViReal64(value),
            ViReal64(min),
            ViReal64(max),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def setViReal64Path(self, instrSession, cmd, path, value, min, max, parameterName):
        status = self.dll.rssmf_setViReal64Path(
            ViSession(instrSession),
            ViString(cmd),
            ViInt32(path),
            ViReal64(value),
            ViReal64(min),
            ViReal64(max),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def getViReal64Path(self, instrSession, cmd, path, parameterName):
        value = ViReal64()
        status = self.dll.rssmf_getViReal64Path(
            ViSession(instrSession),
            ViString(cmd),
            ViInt32(path),
            byref(value),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(value.value)

    def getViReal64(self, instrSession, cmd, parameterName):
        value = ViReal64()
        status = self.dll.rssmf_getViReal64(
            ViSession(instrSession), ViString(cmd), byref(value), ViString(parameterName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(value.value)

    def setViReal64Units(self, instrSession, cmd, value, units, min, max, parameterName):
        status = self.dll.rssmf_setViReal64Units(
            ViSession(instrSession),
            ViString(cmd),
            ViReal64(value),
            ViString(units),
            ViReal64(min),
            ViReal64(max),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def setViString(self, instrSession, cmd, value, parameterName):
        status = self.dll.rssmf_setViString(
            ViSession(instrSession),
            ViString(cmd),
            ViString(value),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def getViString(self, instrSession, cmd, value, buffer_size, parameterName):
        status = self.dll.rssmf_getViString(
            ViSession(instrSession),
            ViString(cmd),
            ViString(value),
            ViUInt32(buffer_size),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def setViStringQuoted(self, instrSession, cmd, quotes, value, parameterName):
        status = self.dll.rssmf_setViStringQuoted(
            ViSession(instrSession),
            ViString(cmd),
            ViString(quotes),
            ViString(value),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def getViStringQuoted(self, instrSession, cmd, quotes, arraySize, parameterName):
        value = ARRAY_ViChar(arraySize)
        status = self.dll.rssmf_getViStringQuoted(
            ViSession(instrSession),
            ViString(cmd),
            ViString(quotes),
            ViInt32(arraySize),
            value,
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(value)

    def setViStringPath(self, instrSession, cmd, path, value, parameterName):
        status = self.dll.rssmf_setViStringPath(
            ViSession(instrSession),
            ViString(cmd),
            ViInt32(path),
            ViString(value),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def setEnum(self, instrSession, cmd, value, parameterName):
        list = ARRAY_ViChar(1024)
        status = self.dll.rssmf_setEnum(
            ViSession(instrSession),
            ViString(cmd),
            ViInt32(value),
            list,
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return list

    def getEnum(self, instrSession, cmd, parameterName):
        value = ViInt32()
        list = ARRAY_ViChar(1024)
        status = self.dll.rssmf_getEnum(
            ViSession(instrSession),
            ViString(cmd),
            byref(value),
            list,
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        value = int(value.value)
        return value, list

    def setEnumPath(self, instrSession, cmd, path, value, parameterName):
        list = ARRAY_ViChar(1024)
        status = self.dll.rssmf_setEnumPath(
            ViSession(instrSession),
            ViString(cmd),
            ViInt32(path),
            ViInt32(value),
            list,
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return list

    def getEnumPath(self, instrSession, cmd, path, parameterName):
        value = ViInt32()
        list = ARRAY_ViChar(1024)
        status = self.dll.rssmf_getEnumPath(
            ViSession(instrSession),
            ViString(cmd),
            ViInt32(path),
            byref(value),
            list,
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        value = int(value.value)
        return value, list

    def setViUInt32(self, instrSession, cmd, value, min, max, parameterName):
        status = self.dll.rssmf_setViUInt32(
            ViSession(instrSession),
            ViString(cmd),
            ViUInt32(value),
            ViUInt32(min),
            ViUInt32(max),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def getViUInt32(self, instrSession, cmd, parameterName):
        value = ViUInt32()
        status = self.dll.rssmf_getViUInt32(
            ViSession(instrSession), ViString(cmd), byref(value), ViString(parameterName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def checkIndexInList(self, instrSession, index, parameterName):
        list = ARRAY_ViChar(1024)
        status = self.dll.rssmf_checkIndexInList(ViSession(instrSession), ViInt32(index), list, ViString(parameterName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return list

    def getIndexFromString(self, string):
        list = ViString()
        index = ViInt32()
        status = self.dll.rssmf_getIndexFromString(ViString(string), byref(list), byref(index))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        index = int(index.value)
        return list, index

    def getCatalog(self, instrSession, cmd, arraySize, parameterName):
        array = ARRAY_ViChar(1024)
        status = self.dll.rssmf_getCatalog(
            ViSession(instrSession),
            ViString(cmd),
            ViUInt32(arraySize),
            byref(array),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return array

    def getViReal64Array(self, instrSession, cmd, count, parameterName):
        value = ViReal64()
        status = self.dll.rssmf_getViReal64Array(
            ViSession(instrSession),
            ViString(cmd),
            byref(value),
            ViInt32(count),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(value.value)

    def getViInt32Array(self, instrSession, cmd, count, parameterName):
        value = ViInt32()
        status = self.dll.rssmf_getViInt32Array(
            ViSession(instrSession),
            ViString(cmd),
            byref(value),
            ViInt32(count),
            ViString(parameterName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def readDataUnknownLength(self, instrSession):
        count = ViUInt32()
        status = self.dll.rssmf_readDataUnknownLength(ViSession(instrSession), byref(count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(count.value)

    def readDataToFile(self, instrSession, cmd, destination):
        status = self.dll.rssmf_readDataToFile(ViSession(instrSession), ViString(cmd), ViString(destination))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ParameterError(self, io, parameterName):
        status = self.dll.rssmf_ParameterError(ViSession(io), ViString(parameterName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadToFile(self, io, filename, maxBytesToRead, fileAction):
        status = self.dll.rssmf_ReadToFile(
            ViSession(io),
            ViConstString(filename),
            ViUInt64(maxBytesToRead),
            ViInt32(fileAction),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def WriteFromFile(self, instrSession, filename, maxBytesToWrite, byteOffset):
        status = self.dll.rssmf_WriteFromFile(
            ViSession(instrSession),
            ViConstString(filename),
            ViUInt64(maxBytesToWrite),
            ViUInt64(byteOffset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
