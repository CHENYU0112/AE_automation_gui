from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .rssmf_dllwrap import *


class rssmf(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = rssmf_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.init(ResourceName, IdQuery, Reset)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def confLFFreqSweep(self, mode, startFrequency, stopFrequency, spacing, step, dwellTime):
        """

        :param mode:
        :type mode:
        :param startFrequency:
        :type startFrequency:
        :param stopFrequency:
        :type stopFrequency:
        :param spacing:
        :type spacing:
        :param step:
        :type step:
        :param dwellTime:
        :type dwellTime:
        """
        return self._dllwrap.confLFFreqSweep(self._vi, mode, startFrequency, stopFrequency, spacing, step, dwellTime)

    def LFSweepTrigger(self):
        """"""
        return self._dllwrap.LFSweepTrigger(self._vi)

    def ConfigureLFSweepMarker(
        self,
        channel,
        state,
        amplitudeMarker,
        frequency,
        amplitude,
        polarity,
        activeMarker,
    ):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        :param amplitudeMarker:
        :type amplitudeMarker:
        :param frequency:
        :type frequency:
        :param amplitude:
        :type amplitude:
        :param polarity:
        :type polarity:
        :param activeMarker:
        :type activeMarker:
        """
        return self._dllwrap.ConfigureLFSweepMarker(
            self._vi,
            channel,
            state,
            amplitudeMarker,
            frequency,
            amplitude,
            polarity,
            activeMarker,
        )

    def SetLFSweepMode(self, mode):
        """

        :param mode:
        :type mode:
        """
        return self._dllwrap.SetLFSweepMode(self._vi, mode)

    def SetLFSweepSource(self, source):
        """

        :param source:
        :type source:
        """
        return self._dllwrap.SetLFSweepSource(self._vi, source)

    def GetLFSweepSource(self):
        """"""
        return self._dllwrap.GetLFSweepSource(self._vi)

    def SetLFSweepStartFreq(self, startFrequency):
        """

        :param startFrequency:
        :type startFrequency:
        """
        return self._dllwrap.SetLFSweepStartFreq(self._vi, startFrequency)

    def GetLFSweepStartFreq(self):
        """"""
        return self._dllwrap.GetLFSweepStartFreq(self._vi)

    def SetLFSweepStopFreq(self, stopFrequency):
        """

        :param stopFrequency:
        :type stopFrequency:
        """
        return self._dllwrap.SetLFSweepStopFreq(self._vi, stopFrequency)

    def GetLFSweepStopFreq(self):
        """"""
        return self._dllwrap.GetLFSweepStopFreq(self._vi)

    def SetLFSweepShape(self, shape):
        """

        :param shape:
        :type shape:
        """
        return self._dllwrap.SetLFSweepShape(self._vi, shape)

    def GetLFSweepShape(self):
        """"""
        return self._dllwrap.GetLFSweepShape(self._vi)

    def SetLFSweepSpacing(self, spacing):
        """

        :param spacing:
        :type spacing:
        """
        return self._dllwrap.SetLFSweepSpacing(self._vi, spacing)

    def GetLFSweepSpacing(self):
        """"""
        return self._dllwrap.GetLFSweepSpacing(self._vi)

    def SetLFSweepStepLin(self, stepLin):
        """

        :param stepLin:
        :type stepLin:
        """
        return self._dllwrap.SetLFSweepStepLin(self._vi, stepLin)

    def GetLFSweepStepLin(self):
        """"""
        return self._dllwrap.GetLFSweepStepLin(self._vi)

    def SetLFSweepStepLog(self, stepLog):
        """

        :param stepLog:
        :type stepLog:
        """
        return self._dllwrap.SetLFSweepStepLog(self._vi, stepLog)

    def GetLFSweepStepLog(self):
        """"""
        return self._dllwrap.GetLFSweepStepLog(self._vi)

    def SetLFSweepDwellTime(self, dwellTime):
        """

        :param dwellTime:
        :type dwellTime:
        """
        return self._dllwrap.SetLFSweepDwellTime(self._vi, dwellTime)

    def GetLFSweepDwellTime(self):
        """"""
        return self._dllwrap.GetLFSweepDwellTime(self._vi)

    def SetLFSweepManualStep(self, manualLFSweep):
        """

        :param manualLFSweep:
        :type manualLFSweep:
        """
        return self._dllwrap.SetLFSweepManualStep(self._vi, manualLFSweep)

    def GetLFSweepManualStep(self):
        """"""
        return self._dllwrap.GetLFSweepManualStep(self._vi)

    def SetLFSweepPoints(self, LFSweepPoints):
        """

        :param LFSweepPoints:
        :type LFSweepPoints:
        """
        return self._dllwrap.SetLFSweepPoints(self._vi, LFSweepPoints)

    def GetLFSweepPoints(self):
        """"""
        return self._dllwrap.GetLFSweepPoints(self._vi)

    def SetLFSweepMarkerState(self, channel, state):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        """
        return self._dllwrap.SetLFSweepMarkerState(self._vi, channel, state)

    def GetLFSweepMarkerState(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetLFSweepMarkerState(self._vi, channel)

    def SetLFSweepMarkerFrequency(self, channel, frequency):
        """

        :param channel:
        :type channel:
        :param frequency:
        :type frequency:
        """
        return self._dllwrap.SetLFSweepMarkerFrequency(self._vi, channel, frequency)

    def GetLFSweepMarkerFrequency(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetLFSweepMarkerFrequency(self._vi, channel)

    def SetLFSweepAmplitudeMarkerState(self, channel, amplitudeMarker):
        """

        :param channel:
        :type channel:
        :param amplitudeMarker:
        :type amplitudeMarker:
        """
        return self._dllwrap.SetLFSweepAmplitudeMarkerState(self._vi, channel, amplitudeMarker)

    def GetLFSweepAmplitudeMarkerState(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetLFSweepAmplitudeMarkerState(self._vi, channel)

    def SetLFSweepAmplitudeMarkerAttenuation(self, amplitude):
        """

        :param amplitude:
        :type amplitude:
        """
        return self._dllwrap.SetLFSweepAmplitudeMarkerAttenuation(self._vi, amplitude)

    def GetLFSweepAmplitudeMarkerAttenuation(self):
        """"""
        return self._dllwrap.GetLFSweepAmplitudeMarkerAttenuation(self._vi)

    def SetLFSweepMarkerPolarity(self, polarity):
        """

        :param polarity:
        :type polarity:
        """
        return self._dllwrap.SetLFSweepMarkerPolarity(self._vi, polarity)

    def GetLFSweepMarkerPolarity(self):
        """"""
        return self._dllwrap.GetLFSweepMarkerPolarity(self._vi)

    def SetLFSweepActiveMarker(self, activeMarker):
        """

        :param activeMarker:
        :type activeMarker:
        """
        return self._dllwrap.SetLFSweepActiveMarker(self._vi, activeMarker)

    def GetLFSweepActiveMarker(self):
        """"""
        return self._dllwrap.GetLFSweepActiveMarker(self._vi)

    def SetLFSweepAllMarkersOff(self):
        """"""
        return self._dllwrap.SetLFSweepAllMarkersOff(self._vi)

    def SetLFGenBandwidth(self, channel, bandwidth):
        """

        :param channel:
        :type channel:
        :param bandwidth:
        :type bandwidth:
        """
        return self._dllwrap.SetLFGenBandwidth(self._vi, channel, bandwidth)

    def GetLFGenBandwidth(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetLFGenBandwidth(self._vi, channel)

    def SetLFGenFrequency(self, channel, LFGenFrequency):
        """

        :param channel:
        :type channel:
        :param LFGenFrequency:
        :type LFGenFrequency:
        """
        return self._dllwrap.SetLFGenFrequency(self._vi, channel, LFGenFrequency)

    def GetLFGenFrequency(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetLFGenFrequency(self._vi, channel)

    def SetLFGenShape(self, channel, shape):
        """

        :param channel:
        :type channel:
        :param shape:
        :type shape:
        """
        return self._dllwrap.SetLFGenShape(self._vi, channel, shape)

    def GetLFGenShape(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetLFGenShape(self._vi, channel)

    def SetLFGenShapeTrapeze(self, channel, trapeze, time):
        """

        :param channel:
        :type channel:
        :param trapeze:
        :type trapeze:
        :param time:
        :type time:
        """
        return self._dllwrap.SetLFGenShapeTrapeze(self._vi, channel, trapeze, time)

    def GetLFGenShapeTrapeze(self, channel, trapeze):
        """

        :param channel:
        :type channel:
        :param trapeze:
        :type trapeze:
        """
        return self._dllwrap.GetLFGenShapeTrapeze(self._vi, channel, trapeze)

    def SetLFGenShapeTriangle(self, channel, triangle, time):
        """

        :param channel:
        :type channel:
        :param triangle:
        :type triangle:
        :param time:
        :type time:
        """
        return self._dllwrap.SetLFGenShapeTriangle(self._vi, channel, triangle, time)

    def GetLFGenShapeTriangle(self, channel, triangle):
        """

        :param channel:
        :type channel:
        :param triangle:
        :type triangle:
        """
        return self._dllwrap.GetLFGenShapeTriangle(self._vi, channel, triangle)

    def SetLFGenShapePulse(self, channel, pulse, time):
        """

        :param channel:
        :type channel:
        :param pulse:
        :type pulse:
        :param time:
        :type time:
        """
        return self._dllwrap.SetLFGenShapePulse(self._vi, channel, pulse, time)

    def GetLFGenShapePulse(self, channel, pulse):
        """

        :param channel:
        :type channel:
        :param pulse:
        :type pulse:
        """
        return self._dllwrap.GetLFGenShapePulse(self._vi, channel, pulse)

    def confNoise(self, bandwidth, distribution):
        """

        :param bandwidth:
        :type bandwidth:
        :param distribution:
        :type distribution:
        """
        return self._dllwrap.confNoise(self._vi, bandwidth, distribution)

    def SetNOISEBandwidth(self, bandwidth):
        """

        :param bandwidth:
        :type bandwidth:
        """
        return self._dllwrap.SetNOISEBandwidth(self._vi, bandwidth)

    def GetNOISEBandwidth(self):
        """"""
        return self._dllwrap.GetNOISEBandwidth(self._vi)

    def SetNOISEDistribution(self, distribution):
        """

        :param distribution:
        :type distribution:
        """
        return self._dllwrap.SetNOISEDistribution(self._vi, distribution)

    def GetNOISEDistribution(self):
        """"""
        return self._dllwrap.GetNOISEDistribution(self._vi)

    def GetNOISERelativeLevel(self):
        """"""
        return self._dllwrap.GetNOISERelativeLevel(self._vi)

    def GetNOISEAbsoluteLevel(self):
        """"""
        return self._dllwrap.GetNOISEAbsoluteLevel(self._vi)

    def SetNOISEBandwidthState(self, bandwidthState):
        """

        :param bandwidthState:
        :type bandwidthState:
        """
        return self._dllwrap.SetNOISEBandwidthState(self._vi, bandwidthState)

    def GetNOISEBandwidthState(self):
        """"""
        return self._dllwrap.GetNOISEBandwidthState(self._vi)

    def confLFOutput(self, channel, state, source, outputVoltage):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        :param source:
        :type source:
        :param outputVoltage:
        :type outputVoltage:
        """
        return self._dllwrap.confLFOutput(self._vi, channel, state, source, outputVoltage)

    def SetLFOutputMonitoring(self, monitoring):
        """

        :param monitoring:
        :type monitoring:
        """
        return self._dllwrap.SetLFOutputMonitoring(self._vi, monitoring)

    def SetLFOutputDCOffset(self, DCOffset):
        """

        :param DCOffset:
        :type DCOffset:
        """
        return self._dllwrap.SetLFOutputDCOffset(self._vi, DCOffset)

    def GetLFOutputMonitoring(self):
        """"""
        return self._dllwrap.GetLFOutputMonitoring(self._vi)

    def GetLFOutputDCOffset(self):
        """"""
        return self._dllwrap.GetLFOutputDCOffset(self._vi)

    def SetLFOutputState(self, LFOutputState):
        """

        :param LFOutputState:
        :type LFOutputState:
        """
        return self._dllwrap.SetLFOutputState(self._vi, LFOutputState)

    def GetLFOutputState(self):
        """"""
        return self._dllwrap.GetLFOutputState(self._vi)

    def SetLFOutputSource(self, channel, source):
        """

        :param channel:
        :type channel:
        :param source:
        :type source:
        """
        return self._dllwrap.SetLFOutputSource(self._vi, channel, source)

    def GetLFOutputSource(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetLFOutputSource(self._vi, channel)

    def SetLFOutputVoltage(self, channel, outputVoltage):
        """

        :param channel:
        :type channel:
        :param outputVoltage:
        :type outputVoltage:
        """
        return self._dllwrap.SetLFOutputVoltage(self._vi, channel, outputVoltage)

    def GetLFOutputVoltage(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetLFOutputVoltage(self._vi, channel)

    def ConfigureLFLevelSweepMode(self, mode, source, startLevel, stopLevel, step, dwellTime):
        """

        :param mode:
        :type mode:
        :param source:
        :type source:
        :param startLevel:
        :type startLevel:
        :param stopLevel:
        :type stopLevel:
        :param step:
        :type step:
        :param dwellTime:
        :type dwellTime:
        """
        return self._dllwrap.ConfigureLFLevelSweepMode(self._vi, mode, source, startLevel, stopLevel, step, dwellTime)

    def LFLevelSweepTrigger(self):
        """"""
        return self._dllwrap.LFLevelSweepTrigger(self._vi)

    def ConfigureLFLevelSweepMarker(self, channel, state, level, polarity, activeMarker):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        :param level:
        :type level:
        :param polarity:
        :type polarity:
        :param activeMarker:
        :type activeMarker:
        """
        return self._dllwrap.ConfigureLFLevelSweepMarker(self._vi, channel, state, level, polarity, activeMarker)

    def SetLFLevelSweepMode(self, mode):
        """

        :param mode:
        :type mode:
        """
        return self._dllwrap.SetLFLevelSweepMode(self._vi, mode)

    def SetLFLevelSweepSource(self, source):
        """

        :param source:
        :type source:
        """
        return self._dllwrap.SetLFLevelSweepSource(self._vi, source)

    def GetLFLevelSweepSource(self):
        """"""
        return self._dllwrap.GetLFLevelSweepSource(self._vi)

    def SetLFLevelSweepStartLevel(self, startLevel):
        """

        :param startLevel:
        :type startLevel:
        """
        return self._dllwrap.SetLFLevelSweepStartLevel(self._vi, startLevel)

    def GetLFLevelSweepStartLevel(self):
        """"""
        return self._dllwrap.GetLFLevelSweepStartLevel(self._vi)

    def SetLFLevelSweepStopLevel(self, stopLevel):
        """

        :param stopLevel:
        :type stopLevel:
        """
        return self._dllwrap.SetLFLevelSweepStopLevel(self._vi, stopLevel)

    def GetLFLevelSweepStopLevel(self):
        """"""
        return self._dllwrap.GetLFLevelSweepStopLevel(self._vi)

    def SetLFLevelSweepStep(self, step):
        """

        :param step:
        :type step:
        """
        return self._dllwrap.SetLFLevelSweepStep(self._vi, step)

    def GetLFLevelSweepStep(self):
        """"""
        return self._dllwrap.GetLFLevelSweepStep(self._vi)

    def SetLFLevelSweepCount(self, count):
        """

        :param count:
        :type count:
        """
        return self._dllwrap.SetLFLevelSweepCount(self._vi, count)

    def GetLFLevelSweepCount(self):
        """"""
        return self._dllwrap.GetLFLevelSweepCount(self._vi)

    def SetLFLevelSweepShape(self, shape):
        """

        :param shape:
        :type shape:
        """
        return self._dllwrap.SetLFLevelSweepShape(self._vi, shape)

    def GetLFLevelSweepShape(self):
        """"""
        return self._dllwrap.GetLFLevelSweepShape(self._vi)

    def SetLFLevelSweepDwellTime(self, dwellTime):
        """

        :param dwellTime:
        :type dwellTime:
        """
        return self._dllwrap.SetLFLevelSweepDwellTime(self._vi, dwellTime)

    def GetLFLevelSweepDwellTime(self):
        """"""
        return self._dllwrap.GetLFLevelSweepDwellTime(self._vi)

    def SetLFLevelSweepManualStep(self, manualLFSweep):
        """

        :param manualLFSweep:
        :type manualLFSweep:
        """
        return self._dllwrap.SetLFLevelSweepManualStep(self._vi, manualLFSweep)

    def GetLFLevelSweepManualStep(self):
        """"""
        return self._dllwrap.GetLFLevelSweepManualStep(self._vi)

    def SetLFLevelSweepMarkerState(self, channel, state):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        """
        return self._dllwrap.SetLFLevelSweepMarkerState(self._vi, channel, state)

    def GetLFLevelSweepMarkerState(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetLFLevelSweepMarkerState(self._vi, channel)

    def SetLFLevelSweepMarkerLevel(self, channel, level):
        """

        :param channel:
        :type channel:
        :param level:
        :type level:
        """
        return self._dllwrap.SetLFLevelSweepMarkerLevel(self._vi, channel, level)

    def GetLFLevelSweepMarkerLevel(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetLFLevelSweepMarkerLevel(self._vi, channel)

    def SetLFLevelSweepMarkerPolarity(self, polarity):
        """

        :param polarity:
        :type polarity:
        """
        return self._dllwrap.SetLFLevelSweepMarkerPolarity(self._vi, polarity)

    def GetLFLevelSweepMarkerPolarity(self):
        """"""
        return self._dllwrap.GetLFLevelSweepMarkerPolarity(self._vi)

    def SetLFLevelSweepActiveMarker(self, activeMarker):
        """

        :param activeMarker:
        :type activeMarker:
        """
        return self._dllwrap.SetLFLevelSweepActiveMarker(self._vi, activeMarker)

    def GetLFLevelSweepActiveMarker(self):
        """"""
        return self._dllwrap.GetLFLevelSweepActiveMarker(self._vi)

    def SetLFLevelSweepAllMarkersOff(self):
        """"""
        return self._dllwrap.SetLFLevelSweepAllMarkersOff(self._vi)

    def ConfigureExternalInput(self, input, coupling, impedance, bandwidth):
        """

        :param input:
        :type input:
        :param coupling:
        :type coupling:
        :param impedance:
        :type impedance:
        :param bandwidth:
        :type bandwidth:
        """
        return self._dllwrap.ConfigureExternalInput(self._vi, input, coupling, impedance, bandwidth)

    def SetExternalInputCoupling(self, input, coupling):
        """

        :param input:
        :type input:
        :param coupling:
        :type coupling:
        """
        return self._dllwrap.SetExternalInputCoupling(self._vi, input, coupling)

    def GetExternalInputCoupling(self, input):
        """

        :param input:
        :type input:
        """
        return self._dllwrap.GetExternalInputCoupling(self._vi, input)

    def SetExternalInputImpedance(self, input, impedance):
        """

        :param input:
        :type input:
        :param impedance:
        :type impedance:
        """
        return self._dllwrap.SetExternalInputImpedance(self._vi, input, impedance)

    def GetExternalInputImpedance(self, input):
        """

        :param input:
        :type input:
        """
        return self._dllwrap.GetExternalInputImpedance(self._vi, input)

    def SetExternalInputBandwidth(self, input, bandwidth):
        """

        :param input:
        :type input:
        :param bandwidth:
        :type bandwidth:
        """
        return self._dllwrap.SetExternalInputBandwidth(self._vi, input, bandwidth)

    def GetExternalInputBandwidth(self, input):
        """

        :param input:
        :type input:
        """
        return self._dllwrap.GetExternalInputBandwidth(self._vi, input)

    def SetAllModulationsState(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.SetAllModulationsState(self._vi, state)

    def confPulm(self, state, source, externalPolarity, videoPolarity):
        """

        :param state:
        :type state:
        :param source:
        :type source:
        :param externalPolarity:
        :type externalPolarity:
        :param videoPolarity:
        :type videoPolarity:
        """
        return self._dllwrap.confPulm(self._vi, state, source, externalPolarity, videoPolarity)

    def confPulmGen(
        self,
        pulseOutputState,
        pulsePeriod,
        pulseWidth,
        pulseDelay,
        doublePulseState,
        doublePulseDelay,
        outputPolarity,
    ):
        """

        :param pulseOutputState:
        :type pulseOutputState:
        :param pulsePeriod:
        :type pulsePeriod:
        :param pulseWidth:
        :type pulseWidth:
        :param pulseDelay:
        :type pulseDelay:
        :param doublePulseState:
        :type doublePulseState:
        :param doublePulseDelay:
        :type doublePulseDelay:
        :param outputPolarity:
        :type outputPolarity:
        """
        return self._dllwrap.confPulmGen(
            self._vi,
            pulseOutputState,
            pulsePeriod,
            pulseWidth,
            pulseDelay,
            doublePulseState,
            doublePulseDelay,
            outputPolarity,
        )

    def SetPULMState(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.SetPULMState(self._vi, state)

    def GetPULMState(self):
        """"""
        return self._dllwrap.GetPULMState(self._vi)

    def SetPULMSource(self, source):
        """

        :param source:
        :type source:
        """
        return self._dllwrap.SetPULMSource(self._vi, source)

    def GetPULMSource(self):
        """"""
        return self._dllwrap.GetPULMSource(self._vi)

    def SetPULMExternalPolarity(self, polarity):
        """

        :param polarity:
        :type polarity:
        """
        return self._dllwrap.SetPULMExternalPolarity(self._vi, polarity)

    def GetPULMExternalPolarity(self):
        """"""
        return self._dllwrap.GetPULMExternalPolarity(self._vi)

    def SetPULMVideoPolarity(self, polarity):
        """

        :param polarity:
        :type polarity:
        """
        return self._dllwrap.SetPULMVideoPolarity(self._vi, polarity)

    def GetPULMVideoPolarity(self):
        """"""
        return self._dllwrap.GetPULMVideoPolarity(self._vi)

    def SetPULMSyncToInternalClock(self, synchronizeToInternalClock):
        """

        :param synchronizeToInternalClock:
        :type synchronizeToInternalClock:
        """
        return self._dllwrap.SetPULMSyncToInternalClock(self._vi, synchronizeToInternalClock)

    def GetPULMSyncToInternalClock(self):
        """"""
        return self._dllwrap.GetPULMSyncToInternalClock(self._vi)

    def SetPULMPeriod(self, pulsePeriod):
        """

        :param pulsePeriod:
        :type pulsePeriod:
        """
        return self._dllwrap.SetPULMPeriod(self._vi, pulsePeriod)

    def GetPULMPeriod(self):
        """"""
        return self._dllwrap.GetPULMPeriod(self._vi)

    def SetPULMWidth(self, pulseWidth):
        """

        :param pulseWidth:
        :type pulseWidth:
        """
        return self._dllwrap.SetPULMWidth(self._vi, pulseWidth)

    def GetPULMWidth(self):
        """"""
        return self._dllwrap.GetPULMWidth(self._vi)

    def SetPULMDelay(self, pulseDelay):
        """

        :param pulseDelay:
        :type pulseDelay:
        """
        return self._dllwrap.SetPULMDelay(self._vi, pulseDelay)

    def GetPULMDelay(self):
        """"""
        return self._dllwrap.GetPULMDelay(self._vi)

    def SetPULMDoubleState(self, doublePulseState):
        """

        :param doublePulseState:
        :type doublePulseState:
        """
        return self._dllwrap.SetPULMDoubleState(self._vi, doublePulseState)

    def GetPULMDoubleState(self):
        """"""
        return self._dllwrap.GetPULMDoubleState(self._vi)

    def SetPULMDoubleDelay(self, doublePulseDelay):
        """

        :param doublePulseDelay:
        :type doublePulseDelay:
        """
        return self._dllwrap.SetPULMDoubleDelay(self._vi, doublePulseDelay)

    def GetPULMDoubleDelay(self):
        """"""
        return self._dllwrap.GetPULMDoubleDelay(self._vi)

    def SetPULMDoubleWidth(self, doubleWidth):
        """

        :param doubleWidth:
        :type doubleWidth:
        """
        return self._dllwrap.SetPULMDoubleWidth(self._vi, doubleWidth)

    def GetPULMDoubleWidth(self):
        """"""
        return self._dllwrap.GetPULMDoubleWidth(self._vi)

    def SetPULMGeneratorOutputState(self, outputState):
        """

        :param outputState:
        :type outputState:
        """
        return self._dllwrap.SetPULMGeneratorOutputState(self._vi, outputState)

    def GetPULMGeneratorOutputState(self):
        """"""
        return self._dllwrap.GetPULMGeneratorOutputState(self._vi)

    def SetPULMOutputPolarity(self, polarity):
        """

        :param polarity:
        :type polarity:
        """
        return self._dllwrap.SetPULMOutputPolarity(self._vi, polarity)

    def GetPULMOutputPolarity(self):
        """"""
        return self._dllwrap.GetPULMOutputPolarity(self._vi)

    def PULMPulseTrainCatalog(self, directoryPath, arraySize):
        """

        :param directoryPath:
        :type directoryPath:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.PULMPulseTrainCatalog(self._vi, directoryPath, arraySize)

    def PULMDeletePulseTrainFile(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.PULMDeletePulseTrainFile(self._vi, fileName)

    def PULMSelectPulseTrainFile(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.PULMSelectPulseTrainFile(self._vi, fileName)

    def GetPULMPulseTrainLength(self):
        """"""
        return self._dllwrap.GetPULMPulseTrainLength(self._vi)

    def SetPULMMode(self, mode):
        """

        :param mode:
        :type mode:
        """
        return self._dllwrap.SetPULMMode(self._vi, mode)

    def GetPULMMode(self):
        """"""
        return self._dllwrap.GetPULMMode(self._vi)

    def SetPULMTrainOfftime(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.SetPULMTrainOfftime(self._vi, arraySize)

    def GetPULMTrainOfftime(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetPULMTrainOfftime(self._vi, arraySize)

    def GetTrainOfftimePoints(self):
        """"""
        return self._dllwrap.GetTrainOfftimePoints(self._vi)

    def SetPULMTrainOntime(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.SetPULMTrainOntime(self._vi, arraySize)

    def GetPULMTrainOntime(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetPULMTrainOntime(self._vi, arraySize)

    def GetTrainOntimePoints(self):
        """"""
        return self._dllwrap.GetTrainOntimePoints(self._vi)

    def SetPULMTrainRepetition(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.SetPULMTrainRepetition(self._vi, arraySize)

    def GetPULMTrainRepetition(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetPULMTrainRepetition(self._vi, arraySize)

    def SetPULMTrainImportExportListMode(self, listMode):
        """

        :param listMode:
        :type listMode:
        """
        return self._dllwrap.SetPULMTrainImportExportListMode(self._vi, listMode)

    def GetPULMTrainImportExportListMode(self):
        """"""
        return self._dllwrap.GetPULMTrainImportExportListMode(self._vi)

    def SetPULMTrainImportExportListFile(self, sourceFile):
        """

        :param sourceFile:
        :type sourceFile:
        """
        return self._dllwrap.SetPULMTrainImportExportListFile(self._vi, sourceFile)

    def GetPULMTrainImportExportListFile(self):
        """"""
        return self._dllwrap.GetPULMTrainImportExportListFile(self._vi)

    def PULMTrainImportExportExecute(self):
        """"""
        return self._dllwrap.PULMTrainImportExportExecute(self._vi)

    def SetPULMTrainImportExportASCIIFile(self, ASCIISourceFile):
        """

        :param ASCIISourceFile:
        :type ASCIISourceFile:
        """
        return self._dllwrap.SetPULMTrainImportExportASCIIFile(self._vi, ASCIISourceFile)

    def GetPULMTrainImportExportASCIIFile(self):
        """"""
        return self._dllwrap.GetPULMTrainImportExportASCIIFile(self._vi)

    def SetPULMTrainImportExportASCIIExtension(self, extension):
        """

        :param extension:
        :type extension:
        """
        return self._dllwrap.SetPULMTrainImportExportASCIIExtension(self._vi, extension)

    def GetPULMTrainImportExportASCIIExtension(self):
        """"""
        return self._dllwrap.GetPULMTrainImportExportASCIIExtension(self._vi)

    def SetPULMTrainImportExportASCIIColumnSeparator(self, separator):
        """

        :param separator:
        :type separator:
        """
        return self._dllwrap.SetPULMTrainImportExportASCIIColumnSeparator(self._vi, separator)

    def GetPULMTrainImportExportASCIIColumnSeparator(self):
        """"""
        return self._dllwrap.GetPULMTrainImportExportASCIIColumnSeparator(self._vi)

    def SetPULMTrainImportExportASCIIDecimalSeparator(self, decimalSeparator):
        """

        :param decimalSeparator:
        :type decimalSeparator:
        """
        return self._dllwrap.SetPULMTrainImportExportASCIIDecimalSeparator(self._vi, decimalSeparator)

    def GetPULMTrainImportExportASCIIDecimalSeparator(self):
        """"""
        return self._dllwrap.GetPULMTrainImportExportASCIIDecimalSeparator(self._vi)

    def PULMTrainImportExportCatalog(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.PULMTrainImportExportCatalog(self._vi, arraySize)

    def confPulmTrigger(
        self,
        triggerLevel,
        externalInputImpedance,
        triggerMode,
        extTriggerInputSlope,
        gateInputPolarity,
    ):
        """

        :param triggerLevel:
        :type triggerLevel:
        :param externalInputImpedance:
        :type externalInputImpedance:
        :param triggerMode:
        :type triggerMode:
        :param extTriggerInputSlope:
        :type extTriggerInputSlope:
        :param gateInputPolarity:
        :type gateInputPolarity:
        """
        return self._dllwrap.confPulmTrigger(
            self._vi,
            triggerLevel,
            externalInputImpedance,
            triggerMode,
            extTriggerInputSlope,
            gateInputPolarity,
        )

    def SetPULMTriggerLevel(self, triggerLevel):
        """

        :param triggerLevel:
        :type triggerLevel:
        """
        return self._dllwrap.SetPULMTriggerLevel(self._vi, triggerLevel)

    def GetPULMTriggerLevel(self):
        """"""
        return self._dllwrap.GetPULMTriggerLevel(self._vi)

    def SetPULMExternalInputImpedance(self, externalInputImpedance):
        """

        :param externalInputImpedance:
        :type externalInputImpedance:
        """
        return self._dllwrap.SetPULMExternalInputImpedance(self._vi, externalInputImpedance)

    def GetPULMExternalInputImpedance(self):
        """"""
        return self._dllwrap.GetPULMExternalInputImpedance(self._vi)

    def SetPULMTriggerMode(self, triggerMode):
        """

        :param triggerMode:
        :type triggerMode:
        """
        return self._dllwrap.SetPULMTriggerMode(self._vi, triggerMode)

    def GetPULMTriggerMode(self):
        """"""
        return self._dllwrap.GetPULMTriggerMode(self._vi)

    def SetPULMExtTriggerInputSlope(self, extTriggerInputSlope):
        """

        :param extTriggerInputSlope:
        :type extTriggerInputSlope:
        """
        return self._dllwrap.SetPULMExtTriggerInputSlope(self._vi, extTriggerInputSlope)

    def GetPULMExtTriggerInputSlope(self):
        """"""
        return self._dllwrap.GetPULMExtTriggerInputSlope(self._vi)

    def SetPULMGateInputPolarity(self, polarity):
        """

        :param polarity:
        :type polarity:
        """
        return self._dllwrap.SetPULMGateInputPolarity(self._vi, polarity)

    def GetPULMGateInputPolarity(self):
        """"""
        return self._dllwrap.GetPULMGateInputPolarity(self._vi)

    def configAM(self, channel, AMState, AMSource, AMDepth, scanState, AMSensitivity, ratio):
        """

        :param channel:
        :type channel:
        :param AMState:
        :type AMState:
        :param AMSource:
        :type AMSource:
        :param AMDepth:
        :type AMDepth:
        :param scanState:
        :type scanState:
        :param AMSensitivity:
        :type AMSensitivity:
        :param ratio:
        :type ratio:
        """
        return self._dllwrap.configAM(self._vi, channel, AMState, AMSource, AMDepth, scanState, AMSensitivity, ratio)

    def SetAMState(self, channel, AMState):
        """

        :param channel:
        :type channel:
        :param AMState:
        :type AMState:
        """
        return self._dllwrap.SetAMState(self._vi, channel, AMState)

    def GetAMState(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetAMState(self._vi, channel)

    def SetAMSource(self, channel, AMSource):
        """

        :param channel:
        :type channel:
        :param AMSource:
        :type AMSource:
        """
        return self._dllwrap.SetAMSource(self._vi, channel, AMSource)

    def GetAMSource(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetAMSource(self._vi, channel)

    def SetAMDepth(self, channel, AMDepth):
        """

        :param channel:
        :type channel:
        :param AMDepth:
        :type AMDepth:
        """
        return self._dllwrap.SetAMDepth(self._vi, channel, AMDepth)

    def GetAMDepth(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetAMDepth(self._vi, channel)

    def SetAMSensitivity(self, channel, AMSensitivity):
        """

        :param channel:
        :type channel:
        :param AMSensitivity:
        :type AMSensitivity:
        """
        return self._dllwrap.SetAMSensitivity(self._vi, channel, AMSensitivity)

    def GetAMSensitivity(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetAMSensitivity(self._vi, channel)

    def SetAMScanState(self, scanState):
        """

        :param scanState:
        :type scanState:
        """
        return self._dllwrap.SetAMScanState(self._vi, scanState)

    def GetAMScanState(self):
        """"""
        return self._dllwrap.GetAMScanState(self._vi)

    def SetAMRatio(self, ratio):
        """

        :param ratio:
        :type ratio:
        """
        return self._dllwrap.SetAMRatio(self._vi, ratio)

    def GetAMRatio(self):
        """"""
        return self._dllwrap.GetAMRatio(self._vi)

    def confFM(self, channel, state, FMSource, deviation, ratio, mode):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        :param FMSource:
        :type FMSource:
        :param deviation:
        :type deviation:
        :param ratio:
        :type ratio:
        :param mode:
        :type mode:
        """
        return self._dllwrap.confFM(self._vi, channel, state, FMSource, deviation, ratio, mode)

    def SetFMState(self, channel, state):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        """
        return self._dllwrap.SetFMState(self._vi, channel, state)

    def GetFMState(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetFMState(self._vi, channel)

    def SetFMSource(self, channel, FMSource):
        """

        :param channel:
        :type channel:
        :param FMSource:
        :type FMSource:
        """
        return self._dllwrap.SetFMSource(self._vi, channel, FMSource)

    def GetFMSource(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetFMSource(self._vi, channel)

    def SetFMDeviation(self, channel, deviation):
        """

        :param channel:
        :type channel:
        :param deviation:
        :type deviation:
        """
        return self._dllwrap.SetFMDeviation(self._vi, channel, deviation)

    def GetFMDeviation(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetFMDeviation(self._vi, channel)

    def SetFMRatio(self, ratio):
        """

        :param ratio:
        :type ratio:
        """
        return self._dllwrap.SetFMRatio(self._vi, ratio)

    def GetFMRatio(self):
        """"""
        return self._dllwrap.GetFMRatio(self._vi)

    def SetFMMode(self, mode):
        """

        :param mode:
        :type mode:
        """
        return self._dllwrap.SetFMMode(self._vi, mode)

    def GetFMMode(self):
        """"""
        return self._dllwrap.GetFMMode(self._vi)

    def confPM(self, channel, state, PMSource, deviation, ratio, mode):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        :param PMSource:
        :type PMSource:
        :param deviation:
        :type deviation:
        :param ratio:
        :type ratio:
        :param mode:
        :type mode:
        """
        return self._dllwrap.confPM(self._vi, channel, state, PMSource, deviation, ratio, mode)

    def SetPMState(self, channel, state):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        """
        return self._dllwrap.SetPMState(self._vi, channel, state)

    def GetPMState(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetPMState(self._vi, channel)

    def SetPMSource(self, channel, PMSource):
        """

        :param channel:
        :type channel:
        :param PMSource:
        :type PMSource:
        """
        return self._dllwrap.SetPMSource(self._vi, channel, PMSource)

    def GetPMSource(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetPMSource(self._vi, channel)

    def SetPMDeviation(self, channel, deviation):
        """

        :param channel:
        :type channel:
        :param deviation:
        :type deviation:
        """
        return self._dllwrap.SetPMDeviation(self._vi, channel, deviation)

    def GetPMDeviation(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetPMDeviation(self._vi, channel)

    def SetPMRatio(self, ratio):
        """

        :param ratio:
        :type ratio:
        """
        return self._dllwrap.SetPMRatio(self._vi, ratio)

    def GetPMRatio(self):
        """"""
        return self._dllwrap.GetPMRatio(self._vi)

    def SetPMMode(self, mode):
        """

        :param mode:
        :type mode:
        """
        return self._dllwrap.SetPMMode(self._vi, mode)

    def GetPMMode(self):
        """"""
        return self._dllwrap.GetPMMode(self._vi)

    def SetDMExternalInputsPolarity(self, channel, polarity):
        """

        :param channel:
        :type channel:
        :param polarity:
        :type polarity:
        """
        return self._dllwrap.SetDMExternalInputsPolarity(self._vi, channel, polarity)

    def GetDMExternalInputsPolarity(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetDMExternalInputsPolarity(self._vi, channel)

    def configASK(self, ASKState, ASKSource, ASKDepth):
        """

        :param ASKState:
        :type ASKState:
        :param ASKSource:
        :type ASKSource:
        :param ASKDepth:
        :type ASKDepth:
        """
        return self._dllwrap.configASK(self._vi, ASKState, ASKSource, ASKDepth)

    def SetASKState(self, ASKState):
        """

        :param ASKState:
        :type ASKState:
        """
        return self._dllwrap.SetASKState(self._vi, ASKState)

    def GetASKState(self):
        """"""
        return self._dllwrap.GetASKState(self._vi)

    def SetASKSource(self, ASKSource):
        """

        :param ASKSource:
        :type ASKSource:
        """
        return self._dllwrap.SetASKSource(self._vi, ASKSource)

    def GetASKSource(self):
        """"""
        return self._dllwrap.GetASKSource(self._vi)

    def SetASKDepth(self, ASKDepth):
        """

        :param ASKDepth:
        :type ASKDepth:
        """
        return self._dllwrap.SetASKDepth(self._vi, ASKDepth)

    def GetASKDepth(self):
        """"""
        return self._dllwrap.GetASKDepth(self._vi)

    def configFSK(self, FSKState, FSKSource, FSKDeviation):
        """

        :param FSKState:
        :type FSKState:
        :param FSKSource:
        :type FSKSource:
        :param FSKDeviation:
        :type FSKDeviation:
        """
        return self._dllwrap.configFSK(self._vi, FSKState, FSKSource, FSKDeviation)

    def SetFSKState(self, FSKState):
        """

        :param FSKState:
        :type FSKState:
        """
        return self._dllwrap.SetFSKState(self._vi, FSKState)

    def GetFSKState(self):
        """"""
        return self._dllwrap.GetFSKState(self._vi)

    def SetFSKSource(self, FSKSource):
        """

        :param FSKSource:
        :type FSKSource:
        """
        return self._dllwrap.SetFSKSource(self._vi, FSKSource)

    def GetFSKSource(self):
        """"""
        return self._dllwrap.GetFSKSource(self._vi)

    def SetFSKDeviation(self, FSKDeviation):
        """

        :param FSKDeviation:
        :type FSKDeviation:
        """
        return self._dllwrap.SetFSKDeviation(self._vi, FSKDeviation)

    def GetFSKDeviation(self):
        """"""
        return self._dllwrap.GetFSKDeviation(self._vi)

    def configPSK(self, PSKState, PSKSource, PSKDeviation):
        """

        :param PSKState:
        :type PSKState:
        :param PSKSource:
        :type PSKSource:
        :param PSKDeviation:
        :type PSKDeviation:
        """
        return self._dllwrap.configPSK(self._vi, PSKState, PSKSource, PSKDeviation)

    def SetPSKState(self, PSKState):
        """

        :param PSKState:
        :type PSKState:
        """
        return self._dllwrap.SetPSKState(self._vi, PSKState)

    def GetPSKState(self):
        """"""
        return self._dllwrap.GetPSKState(self._vi)

    def SetPSKSource(self, PSKSource):
        """

        :param PSKSource:
        :type PSKSource:
        """
        return self._dllwrap.SetPSKSource(self._vi, PSKSource)

    def GetPSKSource(self):
        """"""
        return self._dllwrap.GetPSKSource(self._vi)

    def SetPSKDeviation(self, PSKDeviation):
        """

        :param PSKDeviation:
        :type PSKDeviation:
        """
        return self._dllwrap.SetPSKDeviation(self._vi, PSKDeviation)

    def GetPSKDeviation(self):
        """"""
        return self._dllwrap.GetPSKDeviation(self._vi)

    def confCHIRP(
        self,
        CHRIPState,
        direction,
        bandwidth,
        pulsePeriod,
        pulseWidth,
        triggerMode,
        triggerSlope,
        impedance,
    ):
        """

        :param CHRIPState:
        :type CHRIPState:
        :param direction:
        :type direction:
        :param bandwidth:
        :type bandwidth:
        :param pulsePeriod:
        :type pulsePeriod:
        :param pulseWidth:
        :type pulseWidth:
        :param triggerMode:
        :type triggerMode:
        :param triggerSlope:
        :type triggerSlope:
        :param impedance:
        :type impedance:
        """
        return self._dllwrap.confCHIRP(
            self._vi,
            CHRIPState,
            direction,
            bandwidth,
            pulsePeriod,
            pulseWidth,
            triggerMode,
            triggerSlope,
            impedance,
        )

    def confCHIRPTrigger(self, triggerSlope, gatePolarity, impedance, triggerMode, triggerLevel):
        """

        :param triggerSlope:
        :type triggerSlope:
        :param gatePolarity:
        :type gatePolarity:
        :param impedance:
        :type impedance:
        :param triggerMode:
        :type triggerMode:
        :param triggerLevel:
        :type triggerLevel:
        """
        return self._dllwrap.confCHIRPTrigger(
            self._vi, triggerSlope, gatePolarity, impedance, triggerMode, triggerLevel
        )

    def SetCHIRPTriggerMode(self, triggerMode):
        """

        :param triggerMode:
        :type triggerMode:
        """
        return self._dllwrap.SetCHIRPTriggerMode(self._vi, triggerMode)

    def GetCHIRPTriggerMode(self):
        """"""
        return self._dllwrap.GetCHIRPTriggerMode(self._vi)

    def SetCHIRPTriggerSlope(self, triggerSlope):
        """

        :param triggerSlope:
        :type triggerSlope:
        """
        return self._dllwrap.SetCHIRPTriggerSlope(self._vi, triggerSlope)

    def GetCHIRPTriggerSlope(self):
        """"""
        return self._dllwrap.GetCHIRPTriggerSlope(self._vi)

    def SetCHIRPTriggerLevel(self, triggerLevel):
        """

        :param triggerLevel:
        :type triggerLevel:
        """
        return self._dllwrap.SetCHIRPTriggerLevel(self._vi, triggerLevel)

    def GetCHIRPTriggerLevel(self):
        """"""
        return self._dllwrap.GetCHIRPTriggerLevel(self._vi)

    def SetCHIRPGatePolarity(self, gatePolarity):
        """

        :param gatePolarity:
        :type gatePolarity:
        """
        return self._dllwrap.SetCHIRPGatePolarity(self._vi, gatePolarity)

    def GetCHIRPGatePolarity(self):
        """"""
        return self._dllwrap.GetCHIRPGatePolarity(self._vi)

    def SetCHIRPExternalImpedance(self, impedance):
        """

        :param impedance:
        :type impedance:
        """
        return self._dllwrap.SetCHIRPExternalImpedance(self._vi, impedance)

    def GetCHIRPExternalImpedance(self):
        """"""
        return self._dllwrap.GetCHIRPExternalImpedance(self._vi)

    def SetCHIRPDirection(self, direction):
        """

        :param direction:
        :type direction:
        """
        return self._dllwrap.SetCHIRPDirection(self._vi, direction)

    def GetCHIRPDirection(self):
        """"""
        return self._dllwrap.GetCHIRPDirection(self._vi)

    def SetCHIRPState(self, CHRIPState):
        """

        :param CHRIPState:
        :type CHRIPState:
        """
        return self._dllwrap.SetCHIRPState(self._vi, CHRIPState)

    def GetCHIRPState(self):
        """"""
        return self._dllwrap.GetCHIRPState(self._vi)

    def SetCHIRPBandwidth(self, bandwidth):
        """

        :param bandwidth:
        :type bandwidth:
        """
        return self._dllwrap.SetCHIRPBandwidth(self._vi, bandwidth)

    def GetCHIRPBandwidth(self):
        """"""
        return self._dllwrap.GetCHIRPBandwidth(self._vi)

    def SetCHIRPPulsePeriod(self, pulsePeriod):
        """

        :param pulsePeriod:
        :type pulsePeriod:
        """
        return self._dllwrap.SetCHIRPPulsePeriod(self._vi, pulsePeriod)

    def GetCHIRPPulsePeriod(self):
        """"""
        return self._dllwrap.GetCHIRPPulsePeriod(self._vi)

    def SetCHIRPPulseWidth(self, pulseWidth):
        """

        :param pulseWidth:
        :type pulseWidth:
        """
        return self._dllwrap.SetCHIRPPulseWidth(self._vi, pulseWidth)

    def GetCHIRPPulseWidth(self):
        """"""
        return self._dllwrap.GetCHIRPPulseWidth(self._vi)

    def GetCHIRPCompressionRatio(self):
        """"""
        return self._dllwrap.GetCHIRPCompressionRatio(self._vi)

    def SetOutputState(self, RFOutputState):
        """

        :param RFOutputState:
        :type RFOutputState:
        """
        return self._dllwrap.SetOutputState(self._vi, RFOutputState)

    def GetOutputState(self):
        """"""
        return self._dllwrap.GetOutputState(self._vi)

    def confRFFreq(self, frequency, offset, multiplier, variationActive, variationStep):
        """

        :param frequency:
        :type frequency:
        :param offset:
        :type offset:
        :param multiplier:
        :type multiplier:
        :param variationActive:
        :type variationActive:
        :param variationStep:
        :type variationStep:
        """
        return self._dllwrap.confRFFreq(self._vi, frequency, offset, multiplier, variationActive, variationStep)

    def SetRFFrequency(self, frequency):
        """

        :param frequency:
        :type frequency:
        """
        return self._dllwrap.SetRFFrequency(self._vi, frequency)

    def GetRFFrequency(self):
        """"""
        return self._dllwrap.GetRFFrequency(self._vi)

    def SetRFFrequencyOffset(self, frequencyOffset):
        """

        :param frequencyOffset:
        :type frequencyOffset:
        """
        return self._dllwrap.SetRFFrequencyOffset(self._vi, frequencyOffset)

    def GetRFFrequencyOffset(self):
        """"""
        return self._dllwrap.GetRFFrequencyOffset(self._vi)

    def SetRFFrequencyMultiplier(self, multiplier):
        """

        :param multiplier:
        :type multiplier:
        """
        return self._dllwrap.SetRFFrequencyMultiplier(self._vi, multiplier)

    def GetRFFrequencyMultiplier(self):
        """"""
        return self._dllwrap.GetRFFrequencyMultiplier(self._vi)

    def SetRFVariationActive(self, variationActive):
        """

        :param variationActive:
        :type variationActive:
        """
        return self._dllwrap.SetRFVariationActive(self._vi, variationActive)

    def GetRFVariationActive(self):
        """"""
        return self._dllwrap.GetRFVariationActive(self._vi)

    def SetRFVariationStep(self, variationStep):
        """

        :param variationStep:
        :type variationStep:
        """
        return self._dllwrap.SetRFVariationStep(self._vi, variationStep)

    def GetRFVariationStep(self):
        """"""
        return self._dllwrap.GetRFVariationStep(self._vi)

    def SetRFFrequencyonRecall(self, RFFrequencyOnRecall):
        """

        :param RFFrequencyOnRecall:
        :type RFFrequencyOnRecall:
        """
        return self._dllwrap.SetRFFrequencyonRecall(self._vi, RFFrequencyOnRecall)

    def GetRFFrequencyonRecall(self):
        """"""
        return self._dllwrap.GetRFFrequencyonRecall(self._vi)

    def SetRFDeltaPhase(self, deltaPhase):
        """

        :param deltaPhase:
        :type deltaPhase:
        """
        return self._dllwrap.SetRFDeltaPhase(self._vi, deltaPhase)

    def GetRFDeltaPhase(self):
        """"""
        return self._dllwrap.GetRFDeltaPhase(self._vi)

    def ResetRFDeltaPhaseDisplay(self):
        """"""
        return self._dllwrap.ResetRFDeltaPhaseDisplay(self._vi)

    def confFrequencySweep(
        self,
        mode,
        frequencySetting,
        centerFrequency,
        span,
        startFrequency,
        stopFrequency,
        spacing,
        step,
        dwellTime,
    ):
        """

        :param mode:
        :type mode:
        :param frequencySetting:
        :type frequencySetting:
        :param centerFrequency:
        :type centerFrequency:
        :param span:
        :type span:
        :param startFrequency:
        :type startFrequency:
        :param stopFrequency:
        :type stopFrequency:
        :param spacing:
        :type spacing:
        :param step:
        :type step:
        :param dwellTime:
        :type dwellTime:
        """
        return self._dllwrap.confFrequencySweep(
            self._vi,
            mode,
            frequencySetting,
            centerFrequency,
            span,
            startFrequency,
            stopFrequency,
            spacing,
            step,
            dwellTime,
        )

    def FrequencySweepExecute(self):
        """"""
        return self._dllwrap.FrequencySweepExecute(self._vi)

    def SetInstrumentTriggerInputSlope(self, inputTriggerSlope):
        """

        :param inputTriggerSlope:
        :type inputTriggerSlope:
        """
        return self._dllwrap.SetInstrumentTriggerInputSlope(self._vi, inputTriggerSlope)

    def ConfigureFrequencySweepMarker(
        self,
        channel,
        state,
        amplitudeMarker,
        frequency,
        amplitude,
        polarity,
        activeMarker,
    ):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        :param amplitudeMarker:
        :type amplitudeMarker:
        :param frequency:
        :type frequency:
        :param amplitude:
        :type amplitude:
        :param polarity:
        :type polarity:
        :param activeMarker:
        :type activeMarker:
        """
        return self._dllwrap.ConfigureFrequencySweepMarker(
            self._vi,
            channel,
            state,
            amplitudeMarker,
            frequency,
            amplitude,
            polarity,
            activeMarker,
        )

    def SetFrequencySweepMode(self, mode):
        """

        :param mode:
        :type mode:
        """
        return self._dllwrap.SetFrequencySweepMode(self._vi, mode)

    def SetFrequencySweepStartFreq(self, startFrequency):
        """

        :param startFrequency:
        :type startFrequency:
        """
        return self._dllwrap.SetFrequencySweepStartFreq(self._vi, startFrequency)

    def GetFrequencySweepStartFreq(self):
        """"""
        return self._dllwrap.GetFrequencySweepStartFreq(self._vi)

    def SetFrequencySweepStopFreq(self, stopFrequency):
        """

        :param stopFrequency:
        :type stopFrequency:
        """
        return self._dllwrap.SetFrequencySweepStopFreq(self._vi, stopFrequency)

    def GetFrequencySweepStopFreq(self):
        """"""
        return self._dllwrap.GetFrequencySweepStopFreq(self._vi)

    def SetFrequencySweepCenterFreq(self, centerFrequency):
        """

        :param centerFrequency:
        :type centerFrequency:
        """
        return self._dllwrap.SetFrequencySweepCenterFreq(self._vi, centerFrequency)

    def GetFrequencySweepCenterFreq(self):
        """"""
        return self._dllwrap.GetFrequencySweepCenterFreq(self._vi)

    def SetFrequencySweepSpan(self, span):
        """

        :param span:
        :type span:
        """
        return self._dllwrap.SetFrequencySweepSpan(self._vi, span)

    def GetFrequencySweepSpan(self):
        """"""
        return self._dllwrap.GetFrequencySweepSpan(self._vi)

    def SetFrequencySweepSpacing(self, spacing):
        """

        :param spacing:
        :type spacing:
        """
        return self._dllwrap.SetFrequencySweepSpacing(self._vi, spacing)

    def GetFrequencySweepSpacing(self):
        """"""
        return self._dllwrap.GetFrequencySweepSpacing(self._vi)

    def SetFrequencySweepStepLin(self, stepLin):
        """

        :param stepLin:
        :type stepLin:
        """
        return self._dllwrap.SetFrequencySweepStepLin(self._vi, stepLin)

    def GetFrequencySweepStepLin(self):
        """"""
        return self._dllwrap.GetFrequencySweepStepLin(self._vi)

    def SetFrequencySweepStepLog(self, stepLog):
        """

        :param stepLog:
        :type stepLog:
        """
        return self._dllwrap.SetFrequencySweepStepLog(self._vi, stepLog)

    def GetFrequencySweepStepLog(self):
        """"""
        return self._dllwrap.GetFrequencySweepStepLog(self._vi)

    def SetFrequencySweepTime(self, time):
        """

        :param time:
        :type time:
        """
        return self._dllwrap.SetFrequencySweepTime(self._vi, time)

    def GetFrequencySweepTime(self):
        """"""
        return self._dllwrap.GetFrequencySweepTime(self._vi)

    def SetFrequencySweepRampTime(self, rampTime):
        """

        :param rampTime:
        :type rampTime:
        """
        return self._dllwrap.SetFrequencySweepRampTime(self._vi, rampTime)

    def GetFrequencySweepRampTime(self):
        """"""
        return self._dllwrap.GetFrequencySweepRampTime(self._vi)

    def SetFrequencySweepDwellTime(self, dwellTime):
        """

        :param dwellTime:
        :type dwellTime:
        """
        return self._dllwrap.SetFrequencySweepDwellTime(self._vi, dwellTime)

    def GetFrequencySweepDwellTime(self):
        """"""
        return self._dllwrap.GetFrequencySweepDwellTime(self._vi)

    def SetFrequencySweepManualStep(self, manualStep):
        """

        :param manualStep:
        :type manualStep:
        """
        return self._dllwrap.SetFrequencySweepManualStep(self._vi, manualStep)

    def GetFrequencySweepManualStep(self):
        """"""
        return self._dllwrap.GetFrequencySweepManualStep(self._vi)

    def SetFrequencySweepPoints(self, frequencySweepPoints):
        """

        :param frequencySweepPoints:
        :type frequencySweepPoints:
        """
        return self._dllwrap.SetFrequencySweepPoints(self._vi, frequencySweepPoints)

    def GetFrequencySweepPoints(self):
        """"""
        return self._dllwrap.GetFrequencySweepPoints(self._vi)

    def GetInstrumentTriggerInputSlope(self):
        """"""
        return self._dllwrap.GetInstrumentTriggerInputSlope(self._vi)

    def SetFrequencySweepShape(self, shape):
        """

        :param shape:
        :type shape:
        """
        return self._dllwrap.SetFrequencySweepShape(self._vi, shape)

    def GetFrequencySweepShape(self):
        """"""
        return self._dllwrap.GetFrequencySweepShape(self._vi)

    def SetFrequencySweepMarkerState(self, channel, state):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        """
        return self._dllwrap.SetFrequencySweepMarkerState(self._vi, channel, state)

    def GetFrequencySweepMarkerState(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetFrequencySweepMarkerState(self._vi, channel)

    def SetFrequencySweepMarkerFrequency(self, channel, frequency):
        """

        :param channel:
        :type channel:
        :param frequency:
        :type frequency:
        """
        return self._dllwrap.SetFrequencySweepMarkerFrequency(self._vi, channel, frequency)

    def GetFrequencySweepMarkerFrequency(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetFrequencySweepMarkerFrequency(self._vi, channel)

    def SetFrequencySweepAmplitudeMarkerState(self, channel, amplitudeMarker):
        """

        :param channel:
        :type channel:
        :param amplitudeMarker:
        :type amplitudeMarker:
        """
        return self._dllwrap.SetFrequencySweepAmplitudeMarkerState(self._vi, channel, amplitudeMarker)

    def GetFrequencySweepAmplitudeMarkerState(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetFrequencySweepAmplitudeMarkerState(self._vi, channel)

    def SetFrequencySweepAmplitudeMarkerAttenuation(self, amplitude):
        """

        :param amplitude:
        :type amplitude:
        """
        return self._dllwrap.SetFrequencySweepAmplitudeMarkerAttenuation(self._vi, amplitude)

    def GetFrequencySweepAmplitudeMarkerAttenuation(self):
        """"""
        return self._dllwrap.GetFrequencySweepAmplitudeMarkerAttenuation(self._vi)

    def SetFrequencySweepMarkerPolarity(self, polarity):
        """

        :param polarity:
        :type polarity:
        """
        return self._dllwrap.SetFrequencySweepMarkerPolarity(self._vi, polarity)

    def GetFrequencySweepMarkerPolarity(self):
        """"""
        return self._dllwrap.GetFrequencySweepMarkerPolarity(self._vi)

    def SetFrequencySweepActiveMarker(self, activeMarker):
        """

        :param activeMarker:
        :type activeMarker:
        """
        return self._dllwrap.SetFrequencySweepActiveMarker(self._vi, activeMarker)

    def GetFrequencySweepActiveMarker(self):
        """"""
        return self._dllwrap.GetFrequencySweepActiveMarker(self._vi)

    def SetFrequencySweepAllMarkersOff(self):
        """"""
        return self._dllwrap.SetFrequencySweepAllMarkersOff(self._vi)

    def SetFrequencySweepMarkerTransfer(self):
        """"""
        return self._dllwrap.SetFrequencySweepMarkerTransfer(self._vi)

    def confList(self, listName, listMode, arraySize, dwellTime):
        """

        :param listName:
        :type listName:
        :param listMode:
        :type listMode:
        :param arraySize:
        :type arraySize:
        :param dwellTime:
        :type dwellTime:
        """
        return self._dllwrap.confList(self._vi, listName, listMode, arraySize, dwellTime)

    def LISTCatalog(self, directoryPath, arraySize):
        """

        :param directoryPath:
        :type directoryPath:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.LISTCatalog(self._vi, directoryPath, arraySize)

    def LISTDeleteList(self, listName):
        """

        :param listName:
        :type listName:
        """
        return self._dllwrap.LISTDeleteList(self._vi, listName)

    def LISTDeleteAll(self):
        """"""
        return self._dllwrap.LISTDeleteAll(self._vi)

    def LISTResetList(self):
        """"""
        return self._dllwrap.LISTResetList(self._vi)

    def LISTTriggerExecute(self):
        """"""
        return self._dllwrap.LISTTriggerExecute(self._vi)

    def SetLISTMode(self, listMode):
        """

        :param listMode:
        :type listMode:
        """
        return self._dllwrap.SetLISTMode(self._vi, listMode)

    def SetLISTDwellTime(self, dwellTime):
        """

        :param dwellTime:
        :type dwellTime:
        """
        return self._dllwrap.SetLISTDwellTime(self._vi, dwellTime)

    def GetLISTDwellTime(self):
        """"""
        return self._dllwrap.GetLISTDwellTime(self._vi)

    def SetLISTSelectList(self, listName):
        """

        :param listName:
        :type listName:
        """
        return self._dllwrap.SetLISTSelectList(self._vi, listName)

    def GetLISTSelectList(self):
        """"""
        return self._dllwrap.GetLISTSelectList(self._vi)

    def SetLISTFrequencyValues(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.SetLISTFrequencyValues(self._vi, arraySize)

    def GetLISTFrequencyValues(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetLISTFrequencyValues(self._vi, arraySize)

    def GetLISTFrequencyPoints(self):
        """"""
        return self._dllwrap.GetLISTFrequencyPoints(self._vi)

    def SetLISTPowerValues(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.SetLISTPowerValues(self._vi, arraySize)

    def GetLISTPowerValues(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetLISTPowerValues(self._vi, arraySize)

    def GetLISTPowerPoints(self):
        """"""
        return self._dllwrap.GetLISTPowerPoints(self._vi)

    def SetLISTAttenuatorMode(self, attenuatorMode):
        """

        :param attenuatorMode:
        :type attenuatorMode:
        """
        return self._dllwrap.SetLISTAttenuatorMode(self._vi, attenuatorMode)

    def GetLISTAttenuatorMode(self):
        """"""
        return self._dllwrap.GetLISTAttenuatorMode(self._vi)

    def SetLISTStepIndex(self, stepIndex):
        """

        :param stepIndex:
        :type stepIndex:
        """
        return self._dllwrap.SetLISTStepIndex(self._vi, stepIndex)

    def GetLISTStepIndex(self):
        """"""
        return self._dllwrap.GetLISTStepIndex(self._vi)

    def SetLISTStartIndex(self, startIndex):
        """

        :param startIndex:
        :type startIndex:
        """
        return self._dllwrap.SetLISTStartIndex(self._vi, startIndex)

    def GetLISTStartIndex(self):
        """"""
        return self._dllwrap.GetLISTStartIndex(self._vi)

    def SetLISTStopIndex(self, stopIndex):
        """

        :param stopIndex:
        :type stopIndex:
        """
        return self._dllwrap.SetLISTStopIndex(self._vi, stopIndex)

    def GetLISTStopIndex(self):
        """"""
        return self._dllwrap.GetLISTStopIndex(self._vi)

    def LearnLISTModeData(self):
        """"""
        return self._dllwrap.LearnLISTModeData(self._vi)

    def SetLISTImportExportListMode(self, listMode):
        """

        :param listMode:
        :type listMode:
        """
        return self._dllwrap.SetLISTImportExportListMode(self._vi, listMode)

    def GetLISTImportExportListMode(self):
        """"""
        return self._dllwrap.GetLISTImportExportListMode(self._vi)

    def SetLISTImportExportListFile(self, sourceFile):
        """

        :param sourceFile:
        :type sourceFile:
        """
        return self._dllwrap.SetLISTImportExportListFile(self._vi, sourceFile)

    def GetLISTImportExportListFile(self):
        """"""
        return self._dllwrap.GetLISTImportExportListFile(self._vi)

    def ImportExportExecute(self):
        """"""
        return self._dllwrap.ImportExportExecute(self._vi)

    def SetLISTImportExportASCIIFile(self, ASCIISourceFile):
        """

        :param ASCIISourceFile:
        :type ASCIISourceFile:
        """
        return self._dllwrap.SetLISTImportExportASCIIFile(self._vi, ASCIISourceFile)

    def GetLISTImportExportASCIIFile(self):
        """"""
        return self._dllwrap.GetLISTImportExportASCIIFile(self._vi)

    def SetLISTImportExportASCIIExtension(self, extension):
        """

        :param extension:
        :type extension:
        """
        return self._dllwrap.SetLISTImportExportASCIIExtension(self._vi, extension)

    def GetLISTImportExportASCIIExtension(self):
        """"""
        return self._dllwrap.GetLISTImportExportASCIIExtension(self._vi)

    def SetLISTImportExportASCIIColumnSeparator(self, separator):
        """

        :param separator:
        :type separator:
        """
        return self._dllwrap.SetLISTImportExportASCIIColumnSeparator(self._vi, separator)

    def GetLISTImportExportASCIIColumnSeparator(self):
        """"""
        return self._dllwrap.GetLISTImportExportASCIIColumnSeparator(self._vi)

    def SetLISTImportExportASCIIColumnDecimalSeparator(self, decimalSeparator):
        """

        :param decimalSeparator:
        :type decimalSeparator:
        """
        return self._dllwrap.SetLISTImportExportASCIIColumnDecimalSeparator(self._vi, decimalSeparator)

    def GetLISTImportExportASCIIColumnDecimalSeparator(self):
        """"""
        return self._dllwrap.GetLISTImportExportASCIIColumnDecimalSeparator(self._vi)

    def LISTImportExportCatalog(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.LISTImportExportCatalog(self._vi, arraySize)

    def confRosc(
        self,
        ROSCSource,
        externalReferenceFrequency,
        ROSCSynchronizationBandwidth,
        ROSCOutput,
        EFCState,
        adjustmentActive,
        adjustmentFrequency,
    ):
        """

        :param ROSCSource:
        :type ROSCSource:
        :param externalReferenceFrequency:
        :type externalReferenceFrequency:
        :param ROSCSynchronizationBandwidth:
        :type ROSCSynchronizationBandwidth:
        :param ROSCOutput:
        :type ROSCOutput:
        :param EFCState:
        :type EFCState:
        :param adjustmentActive:
        :type adjustmentActive:
        :param adjustmentFrequency:
        :type adjustmentFrequency:
        """
        return self._dllwrap.confRosc(
            self._vi,
            ROSCSource,
            externalReferenceFrequency,
            ROSCSynchronizationBandwidth,
            ROSCOutput,
            EFCState,
            adjustmentActive,
            adjustmentFrequency,
        )

    def SetROSCSource(self, ROSCSource):
        """

        :param ROSCSource:
        :type ROSCSource:
        """
        return self._dllwrap.SetROSCSource(self._vi, ROSCSource)

    def GetROSCSource(self):
        """"""
        return self._dllwrap.GetROSCSource(self._vi)

    def SetROSCRFOutput(self, RFOutput):
        """

        :param RFOutput:
        :type RFOutput:
        """
        return self._dllwrap.SetROSCRFOutput(self._vi, RFOutput)

    def GetROSCRFOutput(self):
        """"""
        return self._dllwrap.GetROSCRFOutput(self._vi)

    def SetROSCExternalReferenceFrequency(self, externalReferenceFrequency):
        """

        :param externalReferenceFrequency:
        :type externalReferenceFrequency:
        """
        return self._dllwrap.SetROSCExternalReferenceFrequency(self._vi, externalReferenceFrequency)

    def GetROSCExternalReferenceFrequency(self):
        """"""
        return self._dllwrap.GetROSCExternalReferenceFrequency(self._vi)

    def SetROSCSynchronizationBandwidth(self, ROSCSynchronizationBandwidth):
        """

        :param ROSCSynchronizationBandwidth:
        :type ROSCSynchronizationBandwidth:
        """
        return self._dllwrap.SetROSCSynchronizationBandwidth(self._vi, ROSCSynchronizationBandwidth)

    def GetROSCSynchronizationBandwidth(self):
        """"""
        return self._dllwrap.GetROSCSynchronizationBandwidth(self._vi)

    def SetROSCOutput(self, ROSCOutput):
        """

        :param ROSCOutput:
        :type ROSCOutput:
        """
        return self._dllwrap.SetROSCOutput(self._vi, ROSCOutput)

    def GetROSCOutput(self):
        """"""
        return self._dllwrap.GetROSCOutput(self._vi)

    def SetROSCEFCState(self, EFCState):
        """

        :param EFCState:
        :type EFCState:
        """
        return self._dllwrap.SetROSCEFCState(self._vi, EFCState)

    def GetROSCEFCState(self):
        """"""
        return self._dllwrap.GetROSCEFCState(self._vi)

    def SetROSCAdjustmentActive(self, adjustmentActive):
        """

        :param adjustmentActive:
        :type adjustmentActive:
        """
        return self._dllwrap.SetROSCAdjustmentActive(self._vi, adjustmentActive)

    def GetROSCAdjustmentActive(self):
        """"""
        return self._dllwrap.GetROSCAdjustmentActive(self._vi)

    def SetROSCAdjustmentFrequency(self, adjustmentFrequency):
        """

        :param adjustmentFrequency:
        :type adjustmentFrequency:
        """
        return self._dllwrap.SetROSCAdjustmentFrequency(self._vi, adjustmentFrequency)

    def GetROSCAdjustmentFrequency(self):
        """"""
        return self._dllwrap.GetROSCAdjustmentFrequency(self._vi)

    def confPowerSense(
        self,
        sense,
        initPowerMeas,
        unit,
        permanentDisplay,
        source,
        frequency,
        filterMode,
        useSParameters,
    ):
        """

        :param sense:
        :type sense:
        :param initPowerMeas:
        :type initPowerMeas:
        :param unit:
        :type unit:
        :param permanentDisplay:
        :type permanentDisplay:
        :param source:
        :type source:
        :param frequency:
        :type frequency:
        :param filterMode:
        :type filterMode:
        :param useSParameters:
        :type useSParameters:
        """
        return self._dllwrap.confPowerSense(
            self._vi,
            sense,
            initPowerMeas,
            unit,
            permanentDisplay,
            source,
            frequency,
            filterMode,
            useSParameters,
        )

    def confPowerResponseMeasurement(self, sense, sweepMode, start, stop, timing, steps, spacing):
        """

        :param sense:
        :type sense:
        :param sweepMode:
        :type sweepMode:
        :param start:
        :type start:
        :param stop:
        :type stop:
        :param timing:
        :type timing:
        :param steps:
        :type steps:
        :param spacing:
        :type spacing:
        """
        return self._dllwrap.confPowerResponseMeasurement(
            self._vi, sense, sweepMode, start, stop, timing, steps, spacing
        )

    def confPowerResponseMeasurementDiagram(
        self,
        sense,
        frequencyYScaleMinimum,
        frequencyYScaleMaximum,
        powerYScaleMinimum,
        powerYScaleMaximum,
        senseMode,
    ):
        """

        :param sense:
        :type sense:
        :param frequencyYScaleMinimum:
        :type frequencyYScaleMinimum:
        :param frequencyYScaleMaximum:
        :type frequencyYScaleMaximum:
        :param powerYScaleMinimum:
        :type powerYScaleMinimum:
        :param powerYScaleMaximum:
        :type powerYScaleMaximum:
        :param senseMode:
        :type senseMode:
        """
        return self._dllwrap.confPowerResponseMeasurementDiagram(
            self._vi,
            sense,
            frequencyYScaleMinimum,
            frequencyYScaleMaximum,
            powerYScaleMinimum,
            powerYScaleMaximum,
            senseMode,
        )

    def PowerZero(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.PowerZero(self._vi, sense)

    def SetInitiatePowerMeasurement(self, sense, initPowerMeas):
        """

        :param sense:
        :type sense:
        :param initPowerMeas:
        :type initPowerMeas:
        """
        return self._dllwrap.SetInitiatePowerMeasurement(self._vi, sense, initPowerMeas)

    def GetInitiatePowerMeasurement(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetInitiatePowerMeasurement(self._vi, sense)

    def GetPowerUseSParameters(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerUseSParameters(self._vi, sense)

    def SetPowerFrequency(self, sense, frequency):
        """

        :param sense:
        :type sense:
        :param frequency:
        :type frequency:
        """
        return self._dllwrap.SetPowerFrequency(self._vi, sense, frequency)

    def GetPowerFrequency(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerFrequency(self._vi, sense)

    def SetPowerOffset(self, sense, offset):
        """

        :param sense:
        :type sense:
        :param offset:
        :type offset:
        """
        return self._dllwrap.SetPowerOffset(self._vi, sense, offset)

    def GetPowerOffset(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerOffset(self._vi, sense)

    def SetPowerOffsetState(self, sense, offsetState):
        """

        :param sense:
        :type sense:
        :param offsetState:
        :type offsetState:
        """
        return self._dllwrap.SetPowerOffsetState(self._vi, sense, offsetState)

    def GetPowerOffsetState(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerOffsetState(self._vi, sense)

    def SetPowerSource(self, sense, source):
        """

        :param sense:
        :type sense:
        :param source:
        :type source:
        """
        return self._dllwrap.SetPowerSource(self._vi, sense, source)

    def GetPowerSource(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSource(self._vi, sense)

    def SetPowerUnit(self, sense, unit):
        """

        :param sense:
        :type sense:
        :param unit:
        :type unit:
        """
        return self._dllwrap.SetPowerUnit(self._vi, sense, unit)

    def GetPowerUnit(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerUnit(self._vi, sense)

    def SetPowerDisplayPermanentState(self, sense, permanentDisplay):
        """

        :param sense:
        :type sense:
        :param permanentDisplay:
        :type permanentDisplay:
        """
        return self._dllwrap.SetPowerDisplayPermanentState(self._vi, sense, permanentDisplay)

    def GetPowerDisplayPermanentState(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerDisplayPermanentState(self._vi, sense)

    def SetPowerDisplayPermanentPriority(self, trace, priority):
        """

        :param trace:
        :type trace:
        :param priority:
        :type priority:
        """
        return self._dllwrap.SetPowerDisplayPermanentPriority(self._vi, trace, priority)

    def GetPowerDisplayPermanentPriority(self, trace):
        """

        :param trace:
        :type trace:
        """
        return self._dllwrap.GetPowerDisplayPermanentPriority(self._vi, trace)

    def confPowerFilter(self, sense, filterMode, noiseContent, timeout):
        """

        :param sense:
        :type sense:
        :param filterMode:
        :type filterMode:
        :param noiseContent:
        :type noiseContent:
        :param timeout:
        :type timeout:
        """
        return self._dllwrap.confPowerFilter(self._vi, sense, filterMode, noiseContent, timeout)

    def SetPowerFilterLength(self, sense, filterLength):
        """

        :param sense:
        :type sense:
        :param filterLength:
        :type filterLength:
        """
        return self._dllwrap.SetPowerFilterLength(self._vi, sense, filterLength)

    def GetPowerFilterLength(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerFilterLength(self._vi, sense)

    def SetPowerFilterMode(self, sense, filterMode):
        """

        :param sense:
        :type sense:
        :param filterMode:
        :type filterMode:
        """
        return self._dllwrap.SetPowerFilterMode(self._vi, sense, filterMode)

    def GetPowerFilterMode(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerFilterMode(self._vi, sense)

    def SetPowerFilterFixedNoiseContent(self, sense, noiseContent):
        """

        :param sense:
        :type sense:
        :param noiseContent:
        :type noiseContent:
        """
        return self._dllwrap.SetPowerFilterFixedNoiseContent(self._vi, sense, noiseContent)

    def GetPowerFilterFixedNoiseContent(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerFilterFixedNoiseContent(self._vi, sense)

    def SetPowerFilterFixedNoiseTimeout(self, sense, timeout):
        """

        :param sense:
        :type sense:
        :param timeout:
        :type timeout:
        """
        return self._dllwrap.SetPowerFilterFixedNoiseTimeout(self._vi, sense, timeout)

    def GetPowerFilterFixedNoiseTimeout(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerFilterFixedNoiseTimeout(self._vi, sense)

    def GetPowerFilterLengthAuto(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerFilterLengthAuto(self._vi, sense)

    def PowerFilterSearchOnce(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.PowerFilterSearchOnce(self._vi, sense)

    def SetPowerSensorGateState(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.SetPowerSensorGateState(self._vi, state)

    def GetPowerSensorGateState(self):
        """"""
        return self._dllwrap.GetPowerSensorGateState(self._vi)

    def SetPowerSensorGateStart(self, gate, start):
        """

        :param gate:
        :type gate:
        :param start:
        :type start:
        """
        return self._dllwrap.SetPowerSensorGateStart(self._vi, gate, start)

    def GetPowerSensorGateStart(self, gate):
        """

        :param gate:
        :type gate:
        """
        return self._dllwrap.GetPowerSensorGateStart(self._vi, gate)

    def SetPowerSensorGateStop(self, gate, stop):
        """

        :param gate:
        :type gate:
        :param stop:
        :type stop:
        """
        return self._dllwrap.SetPowerSensorGateStop(self._vi, gate, stop)

    def GetPowerSensorGateStop(self, gate):
        """

        :param gate:
        :type gate:
        """
        return self._dllwrap.GetPowerSensorGateStop(self._vi, gate)

    def SetPowerSensorGateTrace(self, trace):
        """

        :param trace:
        :type trace:
        """
        return self._dllwrap.SetPowerSensorGateTrace(self._vi, trace)

    def GetPowerSensorGateTrace(self):
        """"""
        return self._dllwrap.GetPowerSensorGateTrace(self._vi)

    def GetPowerSensorGateAveragePower(self, gate):
        """

        :param gate:
        :type gate:
        """
        return self._dllwrap.GetPowerSensorGateAveragePower(self._vi, gate)

    def GetPowerSensorGatePeakPower(self, gate):
        """

        :param gate:
        :type gate:
        """
        return self._dllwrap.GetPowerSensorGatePeakPower(self._vi, gate)

    def PowerSweepInitiate(self, sense, timeout):
        """

        :param sense:
        :type sense:
        :param timeout:
        :type timeout:
        """
        return self._dllwrap.PowerSweepInitiate(self._vi, sense, timeout)

    def PowerSweepAbort(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.PowerSweepAbort(self._vi, sense)

    def confPowerSweepFrequencySeparateFrequencyRange(
        self, sense, state, separateFrequencyStart, separateFrequencyStop
    ):
        """

        :param sense:
        :type sense:
        :param state:
        :type state:
        :param separateFrequencyStart:
        :type separateFrequencyStart:
        :param separateFrequencyStop:
        :type separateFrequencyStop:
        """
        return self._dllwrap.confPowerSweepFrequencySeparateFrequencyRange(
            self._vi, sense, state, separateFrequencyStart, separateFrequencyStop
        )

    def SetPowerSweepFrequencyStart(self, sense, frequencyStart):
        """

        :param sense:
        :type sense:
        :param frequencyStart:
        :type frequencyStart:
        """
        return self._dllwrap.SetPowerSweepFrequencyStart(self._vi, sense, frequencyStart)

    def GetPowerSweepFrequencyStart(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepFrequencyStart(self._vi, sense)

    def SetPowerSweepFrequencyStop(self, sense, frequencyStop):
        """

        :param sense:
        :type sense:
        :param frequencyStop:
        :type frequencyStop:
        """
        return self._dllwrap.SetPowerSweepFrequencyStop(self._vi, sense, frequencyStop)

    def GetPowerSweepFrequencyStop(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepFrequencyStop(self._vi, sense)

    def SetPowerSweepFrequencySlope(self, sense, triggerSlope):
        """

        :param sense:
        :type sense:
        :param triggerSlope:
        :type triggerSlope:
        """
        return self._dllwrap.SetPowerSweepFrequencySlope(self._vi, sense, triggerSlope)

    def GetPowerSweepFrequencySlope(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepFrequencySlope(self._vi, sense)

    def SetPowerSweepFrequencyTiming(self, sense, frequencyTiming):
        """

        :param sense:
        :type sense:
        :param frequencyTiming:
        :type frequencyTiming:
        """
        return self._dllwrap.SetPowerSweepFrequencyTiming(self._vi, sense, frequencyTiming)

    def GetPowerSweepFrequencyTiming(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepFrequencyTiming(self._vi, sense)

    def SetPowerSweepFrequencySpacing(self, sense, frequencySpacing):
        """

        :param sense:
        :type sense:
        :param frequencySpacing:
        :type frequencySpacing:
        """
        return self._dllwrap.SetPowerSweepFrequencySpacing(self._vi, sense, frequencySpacing)

    def GetPowerSweepFrequencySpacing(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepFrequencySpacing(self._vi, sense)

    def SetPowerSweepFrequencySteps(self, sense, frequencySteps):
        """

        :param sense:
        :type sense:
        :param frequencySteps:
        :type frequencySteps:
        """
        return self._dllwrap.SetPowerSweepFrequencySteps(self._vi, sense, frequencySteps)

    def GetPowerSweepFrequencySteps(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepFrequencySteps(self._vi, sense)

    def SetPowerSweepFrequencyYScaleMinimum(self, sense, yScaleMinimum):
        """

        :param sense:
        :type sense:
        :param yScaleMinimum:
        :type yScaleMinimum:
        """
        return self._dllwrap.SetPowerSweepFrequencyYScaleMinimum(self._vi, sense, yScaleMinimum)

    def GetPowerSweepFrequencyYScaleMinimum(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepFrequencyYScaleMinimum(self._vi, sense)

    def SetPowerSweepFrequencyYScaleMaximum(self, sense, yScaleMaximum):
        """

        :param sense:
        :type sense:
        :param yScaleMaximum:
        :type yScaleMaximum:
        """
        return self._dllwrap.SetPowerSweepFrequencyYScaleMaximum(self._vi, sense, yScaleMaximum)

    def GetPowerSweepFrequencyYScaleMaximum(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepFrequencyYScaleMaximum(self._vi, sense)

    def SetPowerSweepFrequencyExecution(self, execution):
        """

        :param execution:
        :type execution:
        """
        return self._dllwrap.SetPowerSweepFrequencyExecution(self._vi, execution)

    def GetPowerSweepFrequencyExecution(self):
        """"""
        return self._dllwrap.GetPowerSweepFrequencyExecution(self._vi)

    def SetPowerSweepFrequencyYAutoScale(self, autoScale):
        """

        :param autoScale:
        :type autoScale:
        """
        return self._dllwrap.SetPowerSweepFrequencyYAutoScale(self._vi, autoScale)

    def GetPowerSweepFrequencyYAutoScale(self):
        """"""
        return self._dllwrap.GetPowerSweepFrequencyYAutoScale(self._vi)

    def ResetPowerSweepFrequencyYScale(self):
        """"""
        return self._dllwrap.ResetPowerSweepFrequencyYScale(self._vi)

    def SetPowerSweepFrequencySeparateFrequencyRange(self, sense, state):
        """

        :param sense:
        :type sense:
        :param state:
        :type state:
        """
        return self._dllwrap.SetPowerSweepFrequencySeparateFrequencyRange(self._vi, sense, state)

    def GetPowerSweepFrequencySeparateFrequencyRange(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepFrequencySeparateFrequencyRange(self._vi, sense)

    def SetPowerSweepFrequencySeparateFrequencyStart(self, sense, separateFrequencyStart):
        """

        :param sense:
        :type sense:
        :param separateFrequencyStart:
        :type separateFrequencyStart:
        """
        return self._dllwrap.SetPowerSweepFrequencySeparateFrequencyStart(self._vi, sense, separateFrequencyStart)

    def GetPowerSweepFrequencySeparateFrequencyStart(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepFrequencySeparateFrequencyStart(self._vi, sense)

    def SetPowerSweepFrequencySeparateFrequencyStop(self, sense, separateFrequencyStop):
        """

        :param sense:
        :type sense:
        :param separateFrequencyStop:
        :type separateFrequencyStop:
        """
        return self._dllwrap.SetPowerSweepFrequencySeparateFrequencyStop(self._vi, sense, separateFrequencyStop)

    def GetPowerSweepFrequencySeparateFrequencyStop(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepFrequencySeparateFrequencyStop(self._vi, sense)

    def SetPowerSweepFrequencyReferenceXValues(self, frequencyXPointA, frequencyXPointB):
        """

        :param frequencyXPointA:
        :type frequencyXPointA:
        :param frequencyXPointB:
        :type frequencyXPointB:
        """
        return self._dllwrap.SetPowerSweepFrequencyReferenceXValues(self._vi, frequencyXPointA, frequencyXPointB)

    def GetPowerSweepFrequencyReferenceXValues(self):
        """"""
        return self._dllwrap.GetPowerSweepFrequencyReferenceXValues(self._vi)

    def SetPowerSweepFrequencyReferenceYValues(self, powerYPointA, powerYPointB):
        """

        :param powerYPointA:
        :type powerYPointA:
        :param powerYPointB:
        :type powerYPointB:
        """
        return self._dllwrap.SetPowerSweepFrequencyReferenceYValues(self._vi, powerYPointA, powerYPointB)

    def GetPowerSweepFrequencyReferenceYValues(self):
        """"""
        return self._dllwrap.GetPowerSweepFrequencyReferenceYValues(self._vi)

    def GeneratePowerSweepFrequencyReferenceCurve(self):
        """"""
        return self._dllwrap.GeneratePowerSweepFrequencyReferenceCurve(self._vi)

    def confPowerSweepPowerSeparateFrequencyRange(self, sense, state, separateFrequency):
        """

        :param sense:
        :type sense:
        :param state:
        :type state:
        :param separateFrequency:
        :type separateFrequency:
        """
        return self._dllwrap.confPowerSweepPowerSeparateFrequencyRange(self._vi, sense, state, separateFrequency)

    def SetPowerSweepPowerStart(self, sense, powerStart):
        """

        :param sense:
        :type sense:
        :param powerStart:
        :type powerStart:
        """
        return self._dllwrap.SetPowerSweepPowerStart(self._vi, sense, powerStart)

    def GetPowerSweepPowerStart(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepPowerStart(self._vi, sense)

    def SetPowerSweepPowerStop(self, sense, powerStop):
        """

        :param sense:
        :type sense:
        :param powerStop:
        :type powerStop:
        """
        return self._dllwrap.SetPowerSweepPowerStop(self._vi, sense, powerStop)

    def GetPowerSweepPowerStop(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepPowerStop(self._vi, sense)

    def SetPowerSweepPowerSpacing(self, sense, powerSpacing):
        """

        :param sense:
        :type sense:
        :param powerSpacing:
        :type powerSpacing:
        """
        return self._dllwrap.SetPowerSweepPowerSpacing(self._vi, sense, powerSpacing)

    def GetPowerSweepPowerSpacing(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepPowerSpacing(self._vi, sense)

    def SetPowerSweepPowerTiming(self, sense, powerTiming):
        """

        :param sense:
        :type sense:
        :param powerTiming:
        :type powerTiming:
        """
        return self._dllwrap.SetPowerSweepPowerTiming(self._vi, sense, powerTiming)

    def GetPowerSweepPowerTiming(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepPowerTiming(self._vi, sense)

    def SetPowerSweepPowerSteps(self, sense, powerSteps):
        """

        :param sense:
        :type sense:
        :param powerSteps:
        :type powerSteps:
        """
        return self._dllwrap.SetPowerSweepPowerSteps(self._vi, sense, powerSteps)

    def GetPowerSweepPowerSteps(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepPowerSteps(self._vi, sense)

    def SetPowerSweepPowerYScaleMinimum(self, sense, yScaleMinimum):
        """

        :param sense:
        :type sense:
        :param yScaleMinimum:
        :type yScaleMinimum:
        """
        return self._dllwrap.SetPowerSweepPowerYScaleMinimum(self._vi, sense, yScaleMinimum)

    def GetPowerSweepPowerYScaleMinimum(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepPowerYScaleMinimum(self._vi, sense)

    def SetPowerSweepPowerYScaleMaximum(self, sense, yScaleMaximum):
        """

        :param sense:
        :type sense:
        :param yScaleMaximum:
        :type yScaleMaximum:
        """
        return self._dllwrap.SetPowerSweepPowerYScaleMaximum(self._vi, sense, yScaleMaximum)

    def GetPowerSweepPowerYScaleMaximum(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepPowerYScaleMaximum(self._vi, sense)

    def SetPowerSweepPowerExecution(self, execution):
        """

        :param execution:
        :type execution:
        """
        return self._dllwrap.SetPowerSweepPowerExecution(self._vi, execution)

    def GetPowerSweepPowerExecution(self):
        """"""
        return self._dllwrap.GetPowerSweepPowerExecution(self._vi)

    def SetPowerSweepPowerYAutoScale(self, autoScale):
        """

        :param autoScale:
        :type autoScale:
        """
        return self._dllwrap.SetPowerSweepPowerYAutoScale(self._vi, autoScale)

    def GetPowerSweepPowerYAutoScale(self):
        """"""
        return self._dllwrap.GetPowerSweepPowerYAutoScale(self._vi)

    def ResetPowerSweepPowerYScale(self):
        """"""
        return self._dllwrap.ResetPowerSweepPowerYScale(self._vi)

    def SetPowerSweepPowerSeparateFrequencyState(self, sense, state):
        """

        :param sense:
        :type sense:
        :param state:
        :type state:
        """
        return self._dllwrap.SetPowerSweepPowerSeparateFrequencyState(self._vi, sense, state)

    def GetPowerSweepPowerSeparateFrequencyState(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepPowerSeparateFrequencyState(self._vi, sense)

    def SetPowerSweepPowerSeparateFrequency(self, sense, separateFrequency):
        """

        :param sense:
        :type sense:
        :param separateFrequency:
        :type separateFrequency:
        """
        return self._dllwrap.SetPowerSweepPowerSeparateFrequency(self._vi, sense, separateFrequency)

    def GetPowerSweepPowerSeparateFrequency(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepPowerSeparateFrequency(self._vi, sense)

    def SetPowerSweepPowerReferenceXValues(self, powerXPointA, powerXPointB):
        """

        :param powerXPointA:
        :type powerXPointA:
        :param powerXPointB:
        :type powerXPointB:
        """
        return self._dllwrap.SetPowerSweepPowerReferenceXValues(self._vi, powerXPointA, powerXPointB)

    def GetPowerSweepPowerReferenceXValues(self):
        """"""
        return self._dllwrap.GetPowerSweepPowerReferenceXValues(self._vi)

    def SetPowerSweepPowerReferenceYValues(self, powerYPointA, powerYPointB):
        """

        :param powerYPointA:
        :type powerYPointA:
        :param powerYPointB:
        :type powerYPointB:
        """
        return self._dllwrap.SetPowerSweepPowerReferenceYValues(self._vi, powerYPointA, powerYPointB)

    def GetPowerSweepPowerReferenceYValues(self):
        """"""
        return self._dllwrap.GetPowerSweepPowerReferenceYValues(self._vi)

    def GetPowerSweepPowerReferenceNumberOfPoints(self):
        """"""
        return self._dllwrap.GetPowerSweepPowerReferenceNumberOfPoints(self._vi)

    def GeneratePowerSweepPowerReferenceCurve(self):
        """"""
        return self._dllwrap.GeneratePowerSweepPowerReferenceCurve(self._vi)

    def confPowerSweepTimeSeparateFrequencyRange(self, sense, state, separateFrequency):
        """

        :param sense:
        :type sense:
        :param state:
        :type state:
        :param separateFrequency:
        :type separateFrequency:
        """
        return self._dllwrap.confPowerSweepTimeSeparateFrequencyRange(self._vi, sense, state, separateFrequency)

    def SetPowerSweepTimePulseDataAnalysisState(self, sense, state):
        """

        :param sense:
        :type sense:
        :param state:
        :type state:
        """
        return self._dllwrap.SetPowerSweepTimePulseDataAnalysisState(self._vi, sense, state)

    def GetPowerSweepTimePulseDataAnalysisState(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimePulseDataAnalysisState(self._vi, sense)

    def SetPowerSweepTimePulseThresholdBase(self, sense, base):
        """

        :param sense:
        :type sense:
        :param base:
        :type base:
        """
        return self._dllwrap.SetPowerSweepTimePulseThresholdBase(self._vi, sense, base)

    def GetPowerSweepTimePulseThresholdBase(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimePulseThresholdBase(self._vi, sense)

    def SetPowerSweepTimePulseThresholdReferenceLevel(self, sense, mode, referenceLevel):
        """

        :param sense:
        :type sense:
        :param mode:
        :type mode:
        :param referenceLevel:
        :type referenceLevel:
        """
        return self._dllwrap.SetPowerSweepTimePulseThresholdReferenceLevel(self._vi, sense, mode, referenceLevel)

    def GetPowerSweepTimePulseThresholdReferenceLevel(self, sense, mode):
        """

        :param sense:
        :type sense:
        :param mode:
        :type mode:
        """
        return self._dllwrap.GetPowerSweepTimePulseThresholdReferenceLevel(self._vi, sense, mode)

    def SetPowerSweepTimeTriggerSource(self, sense, source):
        """

        :param sense:
        :type sense:
        :param source:
        :type source:
        """
        return self._dllwrap.SetPowerSweepTimeTriggerSource(self._vi, sense, source)

    def GetPowerSweepTimeTriggerSource(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeTriggerSource(self._vi, sense)

    def SetPowerSweepTimeTriggerDropOutTime(self, sense, dropOutTime):
        """

        :param sense:
        :type sense:
        :param dropOutTime:
        :type dropOutTime:
        """
        return self._dllwrap.SetPowerSweepTimeTriggerDropOutTime(self._vi, sense, dropOutTime)

    def GetPowerSweepTimeTriggerDropOutTime(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeTriggerDropOutTime(self._vi, sense)

    def SetPowerSweepTimeTriggerHysteresis(self, sense, hysteresis):
        """

        :param sense:
        :type sense:
        :param hysteresis:
        :type hysteresis:
        """
        return self._dllwrap.SetPowerSweepTimeTriggerHysteresis(self._vi, sense, hysteresis)

    def GetPowerSweepTimeTriggerHysteresis(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeTriggerHysteresis(self._vi, sense)

    def SetPowerSweepTimeTriggerThreshold(self, sense, threshold):
        """

        :param sense:
        :type sense:
        :param threshold:
        :type threshold:
        """
        return self._dllwrap.SetPowerSweepTimeTriggerThreshold(self._vi, sense, threshold)

    def GetPowerSweepTimeTriggerThreshold(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeTriggerThreshold(self._vi, sense)

    def SetPowerSweepTimeTriggerAutoSet(self, sense, timeout):
        """

        :param sense:
        :type sense:
        :param timeout:
        :type timeout:
        """
        return self._dllwrap.SetPowerSweepTimeTriggerAutoSet(self._vi, sense, timeout)

    def SetPowerSweepTimeStart(self, sense, timeStart):
        """

        :param sense:
        :type sense:
        :param timeStart:
        :type timeStart:
        """
        return self._dllwrap.SetPowerSweepTimeStart(self._vi, sense, timeStart)

    def GetPowerSweepTimeStart(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeStart(self._vi, sense)

    def SetPowerSweepTimeStop(self, sense, timeStop):
        """

        :param sense:
        :type sense:
        :param timeStop:
        :type timeStop:
        """
        return self._dllwrap.SetPowerSweepTimeStop(self._vi, sense, timeStop)

    def GetPowerSweepTimeStop(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeStop(self._vi, sense)

    def SetPowerSweepTimeTriggerEvents(self, sense, triggerEvents):
        """

        :param sense:
        :type sense:
        :param triggerEvents:
        :type triggerEvents:
        """
        return self._dllwrap.SetPowerSweepTimeTriggerEvents(self._vi, sense, triggerEvents)

    def GetPowerSweepTimeTriggerEvents(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeTriggerEvents(self._vi, sense)

    def SetPowerSweepTimeSpacing(self, sense, timeSpacing):
        """

        :param sense:
        :type sense:
        :param timeSpacing:
        :type timeSpacing:
        """
        return self._dllwrap.SetPowerSweepTimeSpacing(self._vi, sense, timeSpacing)

    def GetPowerSweepTimeSpacing(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeSpacing(self._vi, sense)

    def SetPowerSweepTimeAveragingFactor(self, averagingFactor):
        """

        :param averagingFactor:
        :type averagingFactor:
        """
        return self._dllwrap.SetPowerSweepTimeAveragingFactor(self._vi, averagingFactor)

    def GetPowerSweepTimeAveragingFactor(self):
        """"""
        return self._dllwrap.GetPowerSweepTimeAveragingFactor(self._vi)

    def SetPowerSweepTimeSteps(self, sense, timeSteps):
        """

        :param sense:
        :type sense:
        :param timeSteps:
        :type timeSteps:
        """
        return self._dllwrap.SetPowerSweepTimeSteps(self._vi, sense, timeSteps)

    def GetPowerSweepTimeSteps(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeSteps(self._vi, sense)

    def SetPowerTimeTriggerSource(self, sense, source):
        """

        :param sense:
        :type sense:
        :param source:
        :type source:
        """
        return self._dllwrap.SetPowerTimeTriggerSource(self._vi, sense, source)

    def GetPowerTimeTriggerSource(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerTimeTriggerSource(self._vi, sense)

    def SetPowerSweepTimeYScaleMinimum(self, sense, yScaleMinimum):
        """

        :param sense:
        :type sense:
        :param yScaleMinimum:
        :type yScaleMinimum:
        """
        return self._dllwrap.SetPowerSweepTimeYScaleMinimum(self._vi, sense, yScaleMinimum)

    def GetPowerSweepTimeYScaleMinimum(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeYScaleMinimum(self._vi, sense)

    def SetPowerSweepTimeYScaleMaximum(self, sense, yScaleMaximum):
        """

        :param sense:
        :type sense:
        :param yScaleMaximum:
        :type yScaleMaximum:
        """
        return self._dllwrap.SetPowerSweepTimeYScaleMaximum(self._vi, sense, yScaleMaximum)

    def GetPowerSweepTimeYScaleMaximum(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeYScaleMaximum(self._vi, sense)

    def SetPowerSweepTimeExecution(self, execution):
        """

        :param execution:
        :type execution:
        """
        return self._dllwrap.SetPowerSweepTimeExecution(self._vi, execution)

    def GetPowerSweepTimeExecution(self):
        """"""
        return self._dllwrap.GetPowerSweepTimeExecution(self._vi)

    def SetPowerSweepTimeYAutoScale(self, autoScale):
        """

        :param autoScale:
        :type autoScale:
        """
        return self._dllwrap.SetPowerSweepTimeYAutoScale(self._vi, autoScale)

    def GetPowerSweepTimeYAutoScale(self):
        """"""
        return self._dllwrap.GetPowerSweepTimeYAutoScale(self._vi)

    def ResetPowerSweepTimeYScale(self):
        """"""
        return self._dllwrap.ResetPowerSweepTimeYScale(self._vi)

    def SetPowerSweepTimeSeparateFrequencyState(self, sense, state):
        """

        :param sense:
        :type sense:
        :param state:
        :type state:
        """
        return self._dllwrap.SetPowerSweepTimeSeparateFrequencyState(self._vi, sense, state)

    def GetPowerSweepTimeSeparateFrequencyState(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeSeparateFrequencyState(self._vi, sense)

    def SetPowerSweepTimeSeparateFrequency(self, sense, separateFrequency):
        """

        :param sense:
        :type sense:
        :param separateFrequency:
        :type separateFrequency:
        """
        return self._dllwrap.SetPowerSweepTimeSeparateFrequency(self._vi, sense, separateFrequency)

    def GetPowerSweepTimeSeparateFrequency(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepTimeSeparateFrequency(self._vi, sense)

    def SetPowerSweepTimeReferenceXValues(self, timeXPointA, timeXPointB):
        """

        :param timeXPointA:
        :type timeXPointA:
        :param timeXPointB:
        :type timeXPointB:
        """
        return self._dllwrap.SetPowerSweepTimeReferenceXValues(self._vi, timeXPointA, timeXPointB)

    def GetPowerSweepTimeReferenceXValues(self):
        """"""
        return self._dllwrap.GetPowerSweepTimeReferenceXValues(self._vi)

    def SetPowerSweepTimeReferenceYValues(self, powerYPointA, powerYPointB):
        """

        :param powerYPointA:
        :type powerYPointA:
        :param powerYPointB:
        :type powerYPointB:
        """
        return self._dllwrap.SetPowerSweepTimeReferenceYValues(self._vi, powerYPointA, powerYPointB)

    def GetPowerSweepTimeReferenceYValues(self):
        """"""
        return self._dllwrap.GetPowerSweepTimeReferenceYValues(self._vi)

    def GetPowerSweepTimeReferenceNumberOfPoints(self):
        """"""
        return self._dllwrap.GetPowerSweepTimeReferenceNumberOfPoints(self._vi)

    def GeneratePowerSweepTimeReferenceCurve(self):
        """"""
        return self._dllwrap.GeneratePowerSweepTimeReferenceCurve(self._vi)

    def SetPowerSweepTraceState(self, trace, state):
        """

        :param trace:
        :type trace:
        :param state:
        :type state:
        """
        return self._dllwrap.SetPowerSweepTraceState(self._vi, trace, state)

    def GetPowerSweepTraceState(self, trace):
        """

        :param trace:
        :type trace:
        """
        return self._dllwrap.GetPowerSweepTraceState(self._vi, trace)

    def SetPowerSweepTraceColor(self, trace, color):
        """

        :param trace:
        :type trace:
        :param color:
        :type color:
        """
        return self._dllwrap.SetPowerSweepTraceColor(self._vi, trace, color)

    def GetPowerSweepTraceColor(self, trace):
        """

        :param trace:
        :type trace:
        """
        return self._dllwrap.GetPowerSweepTraceColor(self._vi, trace)

    def copyPowerSweepTrace(self, trace, copyMode):
        """

        :param trace:
        :type trace:
        :param copyMode:
        :type copyMode:
        """
        return self._dllwrap.copyPowerSweepTrace(self._vi, trace, copyMode)

    def GetPowerSweepTraceDataPoints(self, trace):
        """

        :param trace:
        :type trace:
        """
        return self._dllwrap.GetPowerSweepTraceDataPoints(self._vi, trace)

    def GetPowerSweepTraceXValues(self, trace, arraySize):
        """

        :param trace:
        :type trace:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetPowerSweepTraceXValues(self._vi, trace, arraySize)

    def GetPowerSweepTraceYValues(self, trace, arraySize):
        """

        :param trace:
        :type trace:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetPowerSweepTraceYValues(self._vi, trace, arraySize)

    def SetPowerSweepTraceSource(self, trace, source):
        """

        :param trace:
        :type trace:
        :param source:
        :type source:
        """
        return self._dllwrap.SetPowerSweepTraceSource(self._vi, trace, source)

    def GetPowerSweepTraceSource(self, trace):
        """

        :param trace:
        :type trace:
        """
        return self._dllwrap.GetPowerSweepTraceSource(self._vi, trace)

    def GetPowerSweepTracePulseDataAnalysisState(self, trace):
        """

        :param trace:
        :type trace:
        """
        return self._dllwrap.GetPowerSweepTracePulseDataAnalysisState(self._vi, trace)

    def GetPowerSweepTracePulseThresholdBase(self, trace):
        """

        :param trace:
        :type trace:
        """
        return self._dllwrap.GetPowerSweepTracePulseThresholdBase(self._vi, trace)

    def GetPowerSweepTracePulseThresholdReferenceLevel(self, trace, mode):
        """

        :param trace:
        :type trace:
        :param mode:
        :type mode:
        """
        return self._dllwrap.GetPowerSweepTracePulseThresholdReferenceLevel(self._vi, trace, mode)

    def SetPowerSweepSenseMode(self, sense, senseMode):
        """

        :param sense:
        :type sense:
        :param senseMode:
        :type senseMode:
        """
        return self._dllwrap.SetPowerSweepSenseMode(self._vi, sense, senseMode)

    def GetPowerSweepSenseMode(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepSenseMode(self._vi, sense)

    def SetPowerSweepMode(self, sense, sweepMode):
        """

        :param sense:
        :type sense:
        :param sweepMode:
        :type sweepMode:
        """
        return self._dllwrap.SetPowerSweepMode(self._vi, sense, sweepMode)

    def GetPowerSweepMode(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepMode(self._vi, sense)

    def GetPowerSweepDataPoints(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepDataPoints(self._vi, sense)

    def GetPowerSweepDataXValues(self, sense, arraySize):
        """

        :param sense:
        :type sense:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetPowerSweepDataXValues(self._vi, sense, arraySize)

    def GetPowerSweepDataYValues(self, sense, arraySize):
        """

        :param sense:
        :type sense:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetPowerSweepDataYValues(self._vi, sense, arraySize)

    def SetPowerDisplayIndication(self, trace, type, indication):
        """

        :param trace:
        :type trace:
        :param type:
        :type type:
        :param indication:
        :type indication:
        """
        return self._dllwrap.SetPowerDisplayIndication(self._vi, trace, type, indication)

    def GetPowerDisplayIndication(self, trace, type):
        """

        :param trace:
        :type trace:
        :param type:
        :type type:
        """
        return self._dllwrap.GetPowerDisplayIndication(self._vi, trace, type)

    def GetPowerDisplayPulseDataAnalysis(self, trace, type):
        """

        :param trace:
        :type trace:
        :param type:
        :type type:
        """
        return self._dllwrap.GetPowerDisplayPulseDataAnalysis(self._vi, trace, type)

    def SetPowerSensorMathematicsState(self, trace, sweepMode, state):
        """

        :param trace:
        :type trace:
        :param sweepMode:
        :type sweepMode:
        :param state:
        :type state:
        """
        return self._dllwrap.SetPowerSensorMathematicsState(self._vi, trace, sweepMode, state)

    def GetPowerSensorMathematicsState(self, trace, sweepMode):
        """

        :param trace:
        :type trace:
        :param sweepMode:
        :type sweepMode:
        """
        return self._dllwrap.GetPowerSensorMathematicsState(self._vi, trace, sweepMode)

    def SetPowerSensorMathematicsSubtraction(self, resultTrace, sweepMode, firstOperand, secondOperand):
        """

        :param resultTrace:
        :type resultTrace:
        :param sweepMode:
        :type sweepMode:
        :param firstOperand:
        :type firstOperand:
        :param secondOperand:
        :type secondOperand:
        """
        return self._dllwrap.SetPowerSensorMathematicsSubtraction(
            self._vi, resultTrace, sweepMode, firstOperand, secondOperand
        )

    def PowerSensorDevice(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.PowerSensorDevice(self._vi, sense)

    def PowerSensorType(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.PowerSensorType(self._vi, sense)

    def PowerReadPower(self, read):
        """

        :param read:
        :type read:
        """
        return self._dllwrap.PowerReadPower(self._vi, read)

    def PowerReadPowers(self, read):
        """

        :param read:
        :type read:
        """
        return self._dllwrap.PowerReadPowers(self._vi, read)

    def GetPowerSensorVersion(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSensorVersion(self._vi, sense)

    def PowerSensorSerialNumber(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.PowerSensorSerialNumber(self._vi, sense)

    def confDiagramDisplay(self, grid, backgroundColor):
        """

        :param grid:
        :type grid:
        :param backgroundColor:
        :type backgroundColor:
        """
        return self._dllwrap.confDiagramDisplay(self._vi, grid, backgroundColor)

    def SetDiagramGrid(self, grid):
        """

        :param grid:
        :type grid:
        """
        return self._dllwrap.SetDiagramGrid(self._vi, grid)

    def GetDiagramGrid(self):
        """"""
        return self._dllwrap.GetDiagramGrid(self._vi)

    def SetDiagramBackgroundColor(self, backgroundColor):
        """

        :param backgroundColor:
        :type backgroundColor:
        """
        return self._dllwrap.SetDiagramBackgroundColor(self._vi, backgroundColor)

    def GetDiagramBackgroundColor(self):
        """"""
        return self._dllwrap.GetDiagramBackgroundColor(self._vi)

    def SetPowerSweepHardcopyLNGFormat(self, sense, sweepHardcopyFormat):
        """

        :param sense:
        :type sense:
        :param sweepHardcopyFormat:
        :type sweepHardcopyFormat:
        """
        return self._dllwrap.SetPowerSweepHardcopyLNGFormat(self._vi, sense, sweepHardcopyFormat)

    def GetPowerSweepHardcopyLNGFormat(self, sense):
        """

        :param sense:
        :type sense:
        """
        return self._dllwrap.GetPowerSweepHardcopyLNGFormat(self._vi, sense)

    def SetPowerSweepHardcopyFile(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.SetPowerSweepHardcopyFile(self._vi, fileName)

    def GetPowerSweepHardcopyFile(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyFile(self._vi)

    def SetPowerSweepHardcopyDevice(self, hardcopyDevice):
        """

        :param hardcopyDevice:
        :type hardcopyDevice:
        """
        return self._dllwrap.SetPowerSweepHardcopyDevice(self._vi, hardcopyDevice)

    def GetPowerSweepHardcopyDevice(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyDevice(self._vi)

    def SetPowerSweepHardcopyImageSize(self, imageSize):
        """

        :param imageSize:
        :type imageSize:
        """
        return self._dllwrap.SetPowerSweepHardcopyImageSize(self._vi, imageSize)

    def GetPowerSweepHardcopyImageSize(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyImageSize(self._vi)

    def SetPowerSweepHardcopyMarkerState(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.SetPowerSweepHardcopyMarkerState(self._vi, state)

    def GetPowerSweepHardcopyMarkerState(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyMarkerState(self._vi)

    def SavePowerSweepHardcopy(self):
        """"""
        return self._dllwrap.SavePowerSweepHardcopy(self._vi)

    def SetPowerSweepHardcopyCSVHeader(self, CSVHeader):
        """

        :param CSVHeader:
        :type CSVHeader:
        """
        return self._dllwrap.SetPowerSweepHardcopyCSVHeader(self._vi, CSVHeader)

    def GetPowerSweepHardcopyCSVHeader(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyCSVHeader(self._vi)

    def SetPowerSweepHardcopyCSVOrientation(self, CSVOrientation):
        """

        :param CSVOrientation:
        :type CSVOrientation:
        """
        return self._dllwrap.SetPowerSweepHardcopyCSVOrientation(self._vi, CSVOrientation)

    def GetPowerSweepHardcopyCSVOrientation(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyCSVOrientation(self._vi)

    def SetPowerSweepHardcopyCSVColumnSeparator(self, CSVColumnSeparator):
        """

        :param CSVColumnSeparator:
        :type CSVColumnSeparator:
        """
        return self._dllwrap.SetPowerSweepHardcopyCSVColumnSeparator(self._vi, CSVColumnSeparator)

    def GetPowerSweepHardcopyCSVColumnSeparator(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyCSVColumnSeparator(self._vi)

    def SetPowerSweepHardcopyCSVDecimalPoint(self, CSVDecimalPoint):
        """

        :param CSVDecimalPoint:
        :type CSVDecimalPoint:
        """
        return self._dllwrap.SetPowerSweepHardcopyCSVDecimalPoint(self._vi, CSVDecimalPoint)

    def GetPowerSweepHardcopyCSVDecimalPoint(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyCSVDecimalPoint(self._vi)

    def GetPowerSweepHardcopyCSVData(self, destination):
        """

        :param destination:
        :type destination:
        """
        return self._dllwrap.GetPowerSweepHardcopyCSVData(self._vi, destination)

    def SetPowerSweepHardcopyAutomaticNamingState(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.SetPowerSweepHardcopyAutomaticNamingState(self._vi, state)

    def GetPowerSweepHardcopyAutomaticNamingState(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyAutomaticNamingState(self._vi)

    def GetPowerSweepHardcopyAutomaticFileName(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyAutomaticFileName(self._vi)

    def SetPowerSweepHardcopyAutomaticDirectory(self, directoryName):
        """

        :param directoryName:
        :type directoryName:
        """
        return self._dllwrap.SetPowerSweepHardcopyAutomaticDirectory(self._vi, directoryName)

    def GetPowerSweepHardcopyAutomaticDirectory(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyAutomaticDirectory(self._vi)

    def DeletePowerSweepHardcopyImageFiles(self):
        """"""
        return self._dllwrap.DeletePowerSweepHardcopyImageFiles(self._vi)

    def SetPowerSweepHardcopyAutomaticFileDateState(self, fileNamePart, state):
        """

        :param fileNamePart:
        :type fileNamePart:
        :param state:
        :type state:
        """
        return self._dllwrap.SetPowerSweepHardcopyAutomaticFileDateState(self._vi, fileNamePart, state)

    def GetPowerSweepHardcopyAutomaticFileDateState(self, fileNamePart):
        """

        :param fileNamePart:
        :type fileNamePart:
        """
        return self._dllwrap.GetPowerSweepHardcopyAutomaticFileDateState(self._vi, fileNamePart)

    def GetPowerSweepHardcopyAutomaticFileDate(self, fileNamePart):
        """

        :param fileNamePart:
        :type fileNamePart:
        """
        return self._dllwrap.GetPowerSweepHardcopyAutomaticFileDate(self._vi, fileNamePart)

    def SetPowerSweepHardcopyAutomaticFilePrefixState(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.SetPowerSweepHardcopyAutomaticFilePrefixState(self._vi, state)

    def GetPowerSweepHardcopyAutomaticFilePrefixState(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyAutomaticFilePrefixState(self._vi)

    def SetPowerSweepHardcopyAutomaticFilePrefix(self, prefix):
        """

        :param prefix:
        :type prefix:
        """
        return self._dllwrap.SetPowerSweepHardcopyAutomaticFilePrefix(self._vi, prefix)

    def GetPowerSweepHardcopyAutomaticFilePrefix(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyAutomaticFilePrefix(self._vi)

    def GetPowerSweepHardcopyAutomaticFileNumber(self):
        """"""
        return self._dllwrap.GetPowerSweepHardcopyAutomaticFileNumber(self._vi)

    def SetAllRFOutputsState(self, RFOutputStates):
        """

        :param RFOutputStates:
        :type RFOutputStates:
        """
        return self._dllwrap.SetAllRFOutputsState(self._vi, RFOutputStates)

    def confRFLevel(
        self,
        amplitude,
        offset,
        limit,
        powerResolution,
        variationActive,
        variationStep,
        RFLevelOnRecall,
    ):
        """

        :param amplitude:
        :type amplitude:
        :param offset:
        :type offset:
        :param limit:
        :type limit:
        :param powerResolution:
        :type powerResolution:
        :param variationActive:
        :type variationActive:
        :param variationStep:
        :type variationStep:
        :param RFLevelOnRecall:
        :type RFLevelOnRecall:
        """
        return self._dllwrap.confRFLevel(
            self._vi,
            amplitude,
            offset,
            limit,
            powerResolution,
            variationActive,
            variationStep,
            RFLevelOnRecall,
        )

    def SetRFAmplitude(self, amplitude):
        """

        :param amplitude:
        :type amplitude:
        """
        return self._dllwrap.SetRFAmplitude(self._vi, amplitude)

    def GetRFAmplitude(self):
        """"""
        return self._dllwrap.GetRFAmplitude(self._vi)

    def SetRFAmplitudeIgnoreOffset(self, amplitude):
        """

        :param amplitude:
        :type amplitude:
        """
        return self._dllwrap.SetRFAmplitudeIgnoreOffset(self._vi, amplitude)

    def SetRFLevelLimit(self, limit):
        """

        :param limit:
        :type limit:
        """
        return self._dllwrap.SetRFLevelLimit(self._vi, limit)

    def GetRFLevelLimit(self):
        """"""
        return self._dllwrap.GetRFLevelLimit(self._vi)

    def SetRFLevelOffset(self, offset):
        """

        :param offset:
        :type offset:
        """
        return self._dllwrap.SetRFLevelOffset(self._vi, offset)

    def GetRFLevelOffset(self):
        """"""
        return self._dllwrap.GetRFLevelOffset(self._vi)

    def SetRFPowerResolution(self, powerResolution):
        """

        :param powerResolution:
        :type powerResolution:
        """
        return self._dllwrap.SetRFPowerResolution(self._vi, powerResolution)

    def GetRFPowerResolution(self):
        """"""
        return self._dllwrap.GetRFPowerResolution(self._vi)

    def SetRFLevelonRecall(self, RFLevelOnRecall):
        """

        :param RFLevelOnRecall:
        :type RFLevelOnRecall:
        """
        return self._dllwrap.SetRFLevelonRecall(self._vi, RFLevelOnRecall)

    def GetRFLevelonRecall(self):
        """"""
        return self._dllwrap.GetRFLevelonRecall(self._vi)

    def SetRFLevelVariationActive(self, variationActive):
        """

        :param variationActive:
        :type variationActive:
        """
        return self._dllwrap.SetRFLevelVariationActive(self._vi, variationActive)

    def GetRFLevelVariationActive(self):
        """"""
        return self._dllwrap.GetRFLevelVariationActive(self._vi)

    def SetRFLevelVariationStep(self, variationStep):
        """

        :param variationStep:
        :type variationStep:
        """
        return self._dllwrap.SetRFLevelVariationStep(self._vi, variationStep)

    def GetRFLevelVariationStep(self):
        """"""
        return self._dllwrap.GetRFLevelVariationStep(self._vi)

    def SetRFPowerOnState(self, powerOnState):
        """

        :param powerOnState:
        :type powerOnState:
        """
        return self._dllwrap.SetRFPowerOnState(self._vi, powerOnState)

    def GetRFPowerOnState(self):
        """"""
        return self._dllwrap.GetRFPowerOnState(self._vi)

    def SetALCState(self, ALCState):
        """

        :param ALCState:
        :type ALCState:
        """
        return self._dllwrap.SetALCState(self._vi, ALCState)

    def GetALCState(self):
        """"""
        return self._dllwrap.GetALCState(self._vi)

    def SetALCRFPowerDuringPowerSearch(self, RFPowerDuringSearch):
        """

        :param RFPowerDuringSearch:
        :type RFPowerDuringSearch:
        """
        return self._dllwrap.SetALCRFPowerDuringPowerSearch(self._vi, RFPowerDuringSearch)

    def GetALCRFPowerDuringPowerSearch(self):
        """"""
        return self._dllwrap.GetALCRFPowerDuringPowerSearch(self._vi)

    def ALCSearchOnce(self):
        """"""
        return self._dllwrap.ALCSearchOnce(self._vi)

    def SetALCDetector(self, detector):
        """

        :param detector:
        :type detector:
        """
        return self._dllwrap.SetALCDetector(self._vi, detector)

    def GetALCDetector(self):
        """"""
        return self._dllwrap.GetALCDetector(self._vi)

    def SetALCPowerSensorType(self, powerSensorType):
        """

        :param powerSensorType:
        :type powerSensorType:
        """
        return self._dllwrap.SetALCPowerSensorType(self._vi, powerSensorType)

    def GetALCPowerSensorType(self):
        """"""
        return self._dllwrap.GetALCPowerSensorType(self._vi)

    def SetALCReferenceVoltage(self, referenceVoltage):
        """

        :param referenceVoltage:
        :type referenceVoltage:
        """
        return self._dllwrap.SetALCReferenceVoltage(self._vi, referenceVoltage)

    def GetALCReferenceVoltage(self):
        """"""
        return self._dllwrap.GetALCReferenceVoltage(self._vi)

    def SetUserCorrectionDataState(self, correctionState):
        """

        :param correctionState:
        :type correctionState:
        """
        return self._dllwrap.SetUserCorrectionDataState(self._vi, correctionState)

    def GetUserCorrectionDataState(self):
        """"""
        return self._dllwrap.GetUserCorrectionDataState(self._vi)

    def GetUserCorrectionCurrentValue(self):
        """"""
        return self._dllwrap.GetUserCorrectionCurrentValue(self._vi)

    def TriggerUserCorrectionMeasurement(self):
        """"""
        return self._dllwrap.TriggerUserCorrectionMeasurement(self._vi)

    def GetUserCorrectionDataCatalog(self, directoryPath, arraySize):
        """

        :param directoryPath:
        :type directoryPath:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetUserCorrectionDataCatalog(self._vi, directoryPath, arraySize)

    def SetUserCorrectionDataTable(self, correctionTable):
        """

        :param correctionTable:
        :type correctionTable:
        """
        return self._dllwrap.SetUserCorrectionDataTable(self._vi, correctionTable)

    def GetUserCorrectionDataTable(self):
        """"""
        return self._dllwrap.GetUserCorrectionDataTable(self._vi)

    def SetUserCorrectionDataFrequencyValues(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.SetUserCorrectionDataFrequencyValues(self._vi, arraySize)

    def GetUserCorrectionDataFrequencyValues(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetUserCorrectionDataFrequencyValues(self._vi, arraySize)

    def GetUserCorrectionDataNumberofFrequencyValues(self):
        """"""
        return self._dllwrap.GetUserCorrectionDataNumberofFrequencyValues(self._vi)

    def SetUserCorrectionDataLevelValues(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.SetUserCorrectionDataLevelValues(self._vi, arraySize)

    def GetUserCorrectionDataLevelValues(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetUserCorrectionDataLevelValues(self._vi, arraySize)

    def GetUserCorrectionDataNumberofLevelValues(self):
        """"""
        return self._dllwrap.GetUserCorrectionDataNumberofLevelValues(self._vi)

    def SetUserCorrectionPowerSensorType(self, powerSensorType):
        """

        :param powerSensorType:
        :type powerSensorType:
        """
        return self._dllwrap.SetUserCorrectionPowerSensorType(self._vi, powerSensorType)

    def GetUserCorrectionPowerSensorType(self):
        """"""
        return self._dllwrap.GetUserCorrectionPowerSensorType(self._vi)

    def UserCorrectionFillListWithSensor(self, sensor, timeout):
        """

        :param sensor:
        :type sensor:
        :param timeout:
        :type timeout:
        """
        return self._dllwrap.UserCorrectionFillListWithSensor(self._vi, sensor, timeout)

    def UserCorrectionDataDeleteTable(self, tableName):
        """

        :param tableName:
        :type tableName:
        """
        return self._dllwrap.UserCorrectionDataDeleteTable(self._vi, tableName)

    def SetCORRectionImportExportListMode(self, listMode):
        """

        :param listMode:
        :type listMode:
        """
        return self._dllwrap.SetCORRectionImportExportListMode(self._vi, listMode)

    def GetCORRectionImportExportListMode(self):
        """"""
        return self._dllwrap.GetCORRectionImportExportListMode(self._vi)

    def SetCORRectionImportExportListFile(self, sourceFile):
        """

        :param sourceFile:
        :type sourceFile:
        """
        return self._dllwrap.SetCORRectionImportExportListFile(self._vi, sourceFile)

    def GetCORRectionImportExportListFile(self):
        """"""
        return self._dllwrap.GetCORRectionImportExportListFile(self._vi)

    def CORRectionImportExportExecute(self):
        """"""
        return self._dllwrap.CORRectionImportExportExecute(self._vi)

    def SetCORRectionImportExportASCIIFile(self, ASCIISourceFile):
        """

        :param ASCIISourceFile:
        :type ASCIISourceFile:
        """
        return self._dllwrap.SetCORRectionImportExportASCIIFile(self._vi, ASCIISourceFile)

    def GetCORRectionImportExportASCIIFile(self):
        """"""
        return self._dllwrap.GetCORRectionImportExportASCIIFile(self._vi)

    def SetCORRectionImportExportASCIIExtension(self, extension):
        """

        :param extension:
        :type extension:
        """
        return self._dllwrap.SetCORRectionImportExportASCIIExtension(self._vi, extension)

    def GetCORRectionImportExportASCIIExtension(self):
        """"""
        return self._dllwrap.GetCORRectionImportExportASCIIExtension(self._vi)

    def SetCORRectionImportExportASCIIColumnSeparator(self, separator):
        """

        :param separator:
        :type separator:
        """
        return self._dllwrap.SetCORRectionImportExportASCIIColumnSeparator(self._vi, separator)

    def GetCORRectionImportExportASCIIColumnSeparator(self):
        """"""
        return self._dllwrap.GetCORRectionImportExportASCIIColumnSeparator(self._vi)

    def SetCORRectionImportExportASCIIColumnDecimalSeparator(self, decimalSeparator):
        """

        :param decimalSeparator:
        :type decimalSeparator:
        """
        return self._dllwrap.SetCORRectionImportExportASCIIColumnDecimalSeparator(self._vi, decimalSeparator)

    def GetCORRectionImportExportASCIIColumnDecimalSeparator(self):
        """"""
        return self._dllwrap.GetCORRectionImportExportASCIIColumnDecimalSeparator(self._vi)

    def CORRectionImportExportCatalog(self, directoryPath, arraySize):
        """

        :param directoryPath:
        :type directoryPath:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.CORRectionImportExportCatalog(self._vi, directoryPath, arraySize)

    def confRFLevelSweep(self, levelSweepMode, startLevel, stopLevel, stepLin, dwellTime):
        """

        :param levelSweepMode:
        :type levelSweepMode:
        :param startLevel:
        :type startLevel:
        :param stopLevel:
        :type stopLevel:
        :param stepLin:
        :type stepLin:
        :param dwellTime:
        :type dwellTime:
        """
        return self._dllwrap.confRFLevelSweep(self._vi, levelSweepMode, startLevel, stopLevel, stepLin, dwellTime)

    def LevelSweepExecute(self):
        """"""
        return self._dllwrap.LevelSweepExecute(self._vi)

    def ConfigureLevelSweepMarker(self, channel, state, level, polarity, activeMarker):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        :param level:
        :type level:
        :param polarity:
        :type polarity:
        :param activeMarker:
        :type activeMarker:
        """
        return self._dllwrap.ConfigureLevelSweepMarker(self._vi, channel, state, level, polarity, activeMarker)

    def SetLevelSweepMode(self, mode):
        """

        :param mode:
        :type mode:
        """
        return self._dllwrap.SetLevelSweepMode(self._vi, mode)

    def SetLevelSweepStartLevel(self, startLevel):
        """

        :param startLevel:
        :type startLevel:
        """
        return self._dllwrap.SetLevelSweepStartLevel(self._vi, startLevel)

    def GetLevelSweepStartLevel(self):
        """"""
        return self._dllwrap.GetLevelSweepStartLevel(self._vi)

    def SetLevelSweepStopLevel(self, stopLevel):
        """

        :param stopLevel:
        :type stopLevel:
        """
        return self._dllwrap.SetLevelSweepStopLevel(self._vi, stopLevel)

    def GetLevelSweepStopLevel(self):
        """"""
        return self._dllwrap.GetLevelSweepStopLevel(self._vi)

    def SetLevelSweepStep(self, step):
        """

        :param step:
        :type step:
        """
        return self._dllwrap.SetLevelSweepStep(self._vi, step)

    def GetLevelSweepStep(self):
        """"""
        return self._dllwrap.GetLevelSweepStep(self._vi)

    def SetLevelSweepDwell(self, dwellTime):
        """

        :param dwellTime:
        :type dwellTime:
        """
        return self._dllwrap.SetLevelSweepDwell(self._vi, dwellTime)

    def GetLevelSweepDwell(self):
        """"""
        return self._dllwrap.GetLevelSweepDwell(self._vi)

    def SetLevelSweepManualStep(self, manualStep):
        """

        :param manualStep:
        :type manualStep:
        """
        return self._dllwrap.SetLevelSweepManualStep(self._vi, manualStep)

    def GetLevelSweepManualStep(self):
        """"""
        return self._dllwrap.GetLevelSweepManualStep(self._vi)

    def SetLevelSweepPoints(self, levelSweepPoints):
        """

        :param levelSweepPoints:
        :type levelSweepPoints:
        """
        return self._dllwrap.SetLevelSweepPoints(self._vi, levelSweepPoints)

    def GetLevelSweepPoints(self):
        """"""
        return self._dllwrap.GetLevelSweepPoints(self._vi)

    def SetLevelSweepAttenuatorMode(self, attenuatorMode):
        """

        :param attenuatorMode:
        :type attenuatorMode:
        """
        return self._dllwrap.SetLevelSweepAttenuatorMode(self._vi, attenuatorMode)

    def GetLevelSweepAttenuatorMode(self):
        """"""
        return self._dllwrap.GetLevelSweepAttenuatorMode(self._vi)

    def SetLevelSweepShape(self, shape):
        """

        :param shape:
        :type shape:
        """
        return self._dllwrap.SetLevelSweepShape(self._vi, shape)

    def GetLevelSweepShape(self):
        """"""
        return self._dllwrap.GetLevelSweepShape(self._vi)

    def GetLevelSweepSpacing(self):
        """"""
        return self._dllwrap.GetLevelSweepSpacing(self._vi)

    def ResetLevelSweep(self):
        """"""
        return self._dllwrap.ResetLevelSweep(self._vi)

    def SetLevelSweepMarkerState(self, channel, state):
        """

        :param channel:
        :type channel:
        :param state:
        :type state:
        """
        return self._dllwrap.SetLevelSweepMarkerState(self._vi, channel, state)

    def GetLevelSweepMarkerState(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetLevelSweepMarkerState(self._vi, channel)

    def SetLevelSweepMarkerLevel(self, channel, level):
        """

        :param channel:
        :type channel:
        :param level:
        :type level:
        """
        return self._dllwrap.SetLevelSweepMarkerLevel(self._vi, channel, level)

    def GetLevelSweepMarkerLevel(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.GetLevelSweepMarkerLevel(self._vi, channel)

    def SetLevelSweepMarkerPolarity(self, polarity):
        """

        :param polarity:
        :type polarity:
        """
        return self._dllwrap.SetLevelSweepMarkerPolarity(self._vi, polarity)

    def GetLevelSweepMarkerPolarity(self):
        """"""
        return self._dllwrap.GetLevelSweepMarkerPolarity(self._vi)

    def SetLevelSweepActiveMarker(self, activeMarker):
        """

        :param activeMarker:
        :type activeMarker:
        """
        return self._dllwrap.SetLevelSweepActiveMarker(self._vi, activeMarker)

    def GetLevelSweepActiveMarker(self):
        """"""
        return self._dllwrap.GetLevelSweepActiveMarker(self._vi)

    def SetLevelSweepAllMarkersOff(self):
        """"""
        return self._dllwrap.SetLevelSweepAllMarkersOff(self._vi)

    def SetRFAttenuatorMode(self, attenuatorMode):
        """

        :param attenuatorMode:
        :type attenuatorMode:
        """
        return self._dllwrap.SetRFAttenuatorMode(self._vi, attenuatorMode)

    def GetRFAttenuatorMode(self):
        """"""
        return self._dllwrap.GetRFAttenuatorMode(self._vi)

    def SetRFAttenuation(self, attenuation):
        """

        :param attenuation:
        :type attenuation:
        """
        return self._dllwrap.SetRFAttenuation(self._vi, attenuation)

    def GetRFAttenuation(self):
        """"""
        return self._dllwrap.GetRFAttenuation(self._vi)

    def GetRFAttenuatorLowerRange(self):
        """"""
        return self._dllwrap.GetRFAttenuatorLowerRange(self._vi)

    def GetRFAttenuatorUpperRange(self):
        """"""
        return self._dllwrap.GetRFAttenuatorUpperRange(self._vi)

    def SetRFOFFAttenuatorMode(self, OFFAttenuatorMode):
        """

        :param OFFAttenuatorMode:
        :type OFFAttenuatorMode:
        """
        return self._dllwrap.SetRFOFFAttenuatorMode(self._vi, OFFAttenuatorMode)

    def GetRFOFFAttenuatorMode(self):
        """"""
        return self._dllwrap.GetRFOFFAttenuatorMode(self._vi)

    def CALibrationAll(self, timeout):
        """

        :param timeout:
        :type timeout:
        """
        return self._dllwrap.CALibrationAll(self._vi, timeout)

    def CALibrationFrequency(self, timeout):
        """

        :param timeout:
        :type timeout:
        """
        return self._dllwrap.CALibrationFrequency(self._vi, timeout)

    def CALibrationModulationGenerators(self, timeout):
        """

        :param timeout:
        :type timeout:
        """
        return self._dllwrap.CALibrationModulationGenerators(self._vi, timeout)

    def CALibrationLevel(self, timeout):
        """

        :param timeout:
        :type timeout:
        """
        return self._dllwrap.CALibrationLevel(self._vi, timeout)

    def SetCALibrationLevelState(self, levelState):
        """

        :param levelState:
        :type levelState:
        """
        return self._dllwrap.SetCALibrationLevelState(self._vi, levelState)

    def GetCALibrationLevelState(self):
        """"""
        return self._dllwrap.GetCALibrationLevelState(self._vi)

    def SetCALibrationLevelLoopGainState(self, levelLoopGainState):
        """

        :param levelLoopGainState:
        :type levelLoopGainState:
        """
        return self._dllwrap.SetCALibrationLevelLoopGainState(self._vi, levelLoopGainState)

    def GetCALibrationLevelLoopGainState(self):
        """"""
        return self._dllwrap.GetCALibrationLevelLoopGainState(self._vi)

    def ClearStatus(self):
        """"""
        return self._dllwrap.ClearStatus(self._vi)

    def EventStatusEnable(self, registerValue):
        """

        :param registerValue:
        :type registerValue:
        """
        return self._dllwrap.EventStatusEnable(self._vi, registerValue)

    def EventStatusQuery(self):
        """"""
        return self._dllwrap.EventStatusQuery(self._vi)

    def IdentificationQuery(self):
        """"""
        return self._dllwrap.IdentificationQuery(self._vi)

    def IndividualStatusQuery(self):
        """"""
        return self._dllwrap.IndividualStatusQuery(self._vi)

    def OperationComplete(self):
        """"""
        return self._dllwrap.OperationComplete(self._vi)

    def OperationCompleteQuery(self):
        """"""
        return self._dllwrap.OperationCompleteQuery(self._vi)

    def OptionIdentificationQuery(self):
        """"""
        return self._dllwrap.OptionIdentificationQuery(self._vi)

    def ParallelPollRegisterEnable(self, registerValue):
        """

        :param registerValue:
        :type registerValue:
        """
        return self._dllwrap.ParallelPollRegisterEnable(self._vi, registerValue)

    def ParallelPollRegisterQuery(self):
        """"""
        return self._dllwrap.ParallelPollRegisterQuery(self._vi)

    def PowerOnStatusClear(self, registerValue):
        """

        :param registerValue:
        :type registerValue:
        """
        return self._dllwrap.PowerOnStatusClear(self._vi, registerValue)

    def PowerOnStatusClearQuery(self):
        """"""
        return self._dllwrap.PowerOnStatusClearQuery(self._vi)

    def Recall(self, instrumentStatus):
        """

        :param instrumentStatus:
        :type instrumentStatus:
        """
        return self._dllwrap.Recall(self._vi, instrumentStatus)

    def Save(self, instrumentStatus):
        """

        :param instrumentStatus:
        :type instrumentStatus:
        """
        return self._dllwrap.Save(self._vi, instrumentStatus)

    def ServiceRequestEnable(self, registerValue):
        """

        :param registerValue:
        :type registerValue:
        """
        return self._dllwrap.ServiceRequestEnable(self._vi, registerValue)

    def ServiceRequestEnableQuery(self):
        """"""
        return self._dllwrap.ServiceRequestEnableQuery(self._vi)

    def StatusByteQuery(self):
        """"""
        return self._dllwrap.StatusByteQuery(self._vi)

    def Trigger(self):
        """"""
        return self._dllwrap.Trigger(self._vi)

    def TriggerWaitOPC(self, timeout):
        """

        :param timeout:
        :type timeout:
        """
        return self._dllwrap.TriggerWaitOPC(self._vi, timeout)

    def SelfTestQuery(self):
        """"""
        return self._dllwrap.SelfTestQuery(self._vi)

    def WaittoContinue(self):
        """"""
        return self._dllwrap.WaittoContinue(self._vi)

    def PresetSignalPath(self):
        """"""
        return self._dllwrap.PresetSignalPath(self._vi)

    def SetImageFileName(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.SetImageFileName(self._vi, fileName)

    def GetImageFileName(self):
        """"""
        return self._dllwrap.GetImageFileName(self._vi)

    def SetImageFormat(self, imageFormat):
        """

        :param imageFormat:
        :type imageFormat:
        """
        return self._dllwrap.SetImageFormat(self._vi, imageFormat)

    def GetImageFormat(self):
        """"""
        return self._dllwrap.GetImageFormat(self._vi)

    def GetImageSnapshot(self, destination):
        """

        :param destination:
        :type destination:
        """
        return self._dllwrap.GetImageSnapshot(self._vi, destination)

    def SetImageSize(self, imageSize):
        """

        :param imageSize:
        :type imageSize:
        """
        return self._dllwrap.SetImageSize(self._vi, imageSize)

    def GetImageSize(self):
        """"""
        return self._dllwrap.GetImageSize(self._vi)

    def SetOutputDevice(self, outputDevice):
        """

        :param outputDevice:
        :type outputDevice:
        """
        return self._dllwrap.SetOutputDevice(self._vi, outputDevice)

    def GetOutputDevice(self):
        """"""
        return self._dllwrap.GetOutputDevice(self._vi)

    def SaveHardCopy(self):
        """"""
        return self._dllwrap.SaveHardCopy(self._vi)

    def SetAutomaticNamingState(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.SetAutomaticNamingState(self._vi, state)

    def GetAutomaticNamingState(self):
        """"""
        return self._dllwrap.GetAutomaticNamingState(self._vi)

    def GetAutomaticFilePath(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetAutomaticFilePath(self._vi, arraySize)

    def GetAutomaticFileName(self):
        """"""
        return self._dllwrap.GetAutomaticFileName(self._vi)

    def SetAutomaticDirectory(self, directoryName):
        """

        :param directoryName:
        :type directoryName:
        """
        return self._dllwrap.SetAutomaticDirectory(self._vi, directoryName)

    def GetAutomaticDirectory(self):
        """"""
        return self._dllwrap.GetAutomaticDirectory(self._vi)

    def DeleteImageFiles(self):
        """"""
        return self._dllwrap.DeleteImageFiles(self._vi)

    def SetAutomaticFileDateState(self, fileNamePart, state):
        """

        :param fileNamePart:
        :type fileNamePart:
        :param state:
        :type state:
        """
        return self._dllwrap.SetAutomaticFileDateState(self._vi, fileNamePart, state)

    def GetAutomaticFileDateState(self, fileNamePart):
        """

        :param fileNamePart:
        :type fileNamePart:
        """
        return self._dllwrap.GetAutomaticFileDateState(self._vi, fileNamePart)

    def GetAutomaticFileDate(self, fileNamePart):
        """

        :param fileNamePart:
        :type fileNamePart:
        """
        return self._dllwrap.GetAutomaticFileDate(self._vi, fileNamePart)

    def SetAutomaticFilePrefixState(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.SetAutomaticFilePrefixState(self._vi, state)

    def GetAutomaticFilePrefixState(self):
        """"""
        return self._dllwrap.GetAutomaticFilePrefixState(self._vi)

    def SetAutomaticFilePrefix(self, prefix):
        """

        :param prefix:
        :type prefix:
        """
        return self._dllwrap.SetAutomaticFilePrefix(self._vi, prefix)

    def GetAutomaticFilePrefix(self):
        """"""
        return self._dllwrap.GetAutomaticFilePrefix(self._vi)

    def GetAutomaticFileNumber(self):
        """"""
        return self._dllwrap.GetAutomaticFileNumber(self._vi)

    def DIAGnosticModules(self, moduleName, arraySize):
        """

        :param moduleName:
        :type moduleName:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.DIAGnosticModules(self._vi, moduleName, arraySize)

    def DIAGnosticModuleNames(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.DIAGnosticModuleNames(self._vi, arraySize)

    def DIAGnosticTestPoints(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.DIAGnosticTestPoints(self._vi, arraySize)

    def DIAGnosticTestPointVoltages(self, testPointName):
        """

        :param testPointName:
        :type testPointName:
        """
        return self._dllwrap.DIAGnosticTestPointVoltages(self._vi, testPointName)

    def DIAGnosticOperationTime(self):
        """"""
        return self._dllwrap.DIAGnosticOperationTime(self._vi)

    def DIAGnosticPowerOnEvents(self):
        """"""
        return self._dllwrap.DIAGnosticPowerOnEvents(self._vi)

    def TESTDirect(self, command):
        """

        :param command:
        :type command:
        """
        return self._dllwrap.TESTDirect(self._vi, command)

    def SetKeyboardLock(self, keyboardLock):
        """

        :param keyboardLock:
        :type keyboardLock:
        """
        return self._dllwrap.SetKeyboardLock(self._vi, keyboardLock)

    def GetKeyboardLock(self):
        """"""
        return self._dllwrap.GetKeyboardLock(self._vi)

    def SetDisplayPowerSaveState(self, state):
        """

        :param state:
        :type state:
        """
        return self._dllwrap.SetDisplayPowerSaveState(self._vi, state)

    def GetDisplayPowerSaveState(self):
        """"""
        return self._dllwrap.GetDisplayPowerSaveState(self._vi)

    def SetDisplayPowerSaveHoldoff(self, holdoff):
        """

        :param holdoff:
        :type holdoff:
        """
        return self._dllwrap.SetDisplayPowerSaveHoldoff(self._vi, holdoff)

    def GetDisplayPowerSaveHoldoff(self):
        """"""
        return self._dllwrap.GetDisplayPowerSaveHoldoff(self._vi)

    def SetDisplayBlankMode(self, blankMode):
        """

        :param blankMode:
        :type blankMode:
        """
        return self._dllwrap.SetDisplayBlankMode(self._vi, blankMode)

    def GetDisplayBlankMode(self):
        """"""
        return self._dllwrap.GetDisplayBlankMode(self._vi)

    def SetDisplayProportionalScale(self, proportionalScale):
        """

        :param proportionalScale:
        :type proportionalScale:
        """
        return self._dllwrap.SetDisplayProportionalScale(self._vi, proportionalScale)

    def GetDisplayProportionalScale(self):
        """"""
        return self._dllwrap.GetDisplayProportionalScale(self._vi)

    def SetDisplayUpdate(self, displayUpdate):
        """

        :param displayUpdate:
        :type displayUpdate:
        """
        return self._dllwrap.SetDisplayUpdate(self._vi, displayUpdate)

    def GetDisplayUpdate(self):
        """"""
        return self._dllwrap.GetDisplayUpdate(self._vi)

    def SetDisplayLock(self, displayLock):
        """

        :param displayLock:
        :type displayLock:
        """
        return self._dllwrap.SetDisplayLock(self._vi, displayLock)

    def GetDisplayLock(self):
        """"""
        return self._dllwrap.GetDisplayLock(self._vi)

    def MMEMoryCatalog(self, directoryPath, arraySize):
        """

        :param directoryPath:
        :type directoryPath:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.MMEMoryCatalog(self._vi, directoryPath, arraySize)

    def MMEMoryCatalogLength(self, directoryPath):
        """

        :param directoryPath:
        :type directoryPath:
        """
        return self._dllwrap.MMEMoryCatalogLength(self._vi, directoryPath)

    def MMEMoryChangeDirectory(self, directoryName):
        """

        :param directoryName:
        :type directoryName:
        """
        return self._dllwrap.MMEMoryChangeDirectory(self._vi, directoryName)

    def MMEMoryCopy(self, sourcePath, destinationPath):
        """

        :param sourcePath:
        :type sourcePath:
        :param destinationPath:
        :type destinationPath:
        """
        return self._dllwrap.MMEMoryCopy(self._vi, sourcePath, destinationPath)

    def MMEMoryBlockDataWrite(self, fileName, binaryBlockLength):
        """

        :param fileName:
        :type fileName:
        :param binaryBlockLength:
        :type binaryBlockLength:
        """
        return self._dllwrap.MMEMoryBlockDataWrite(self._vi, fileName, binaryBlockLength)

    def MMEMoryBlockDataRead(self, fileName, binaryBlockLength):
        """

        :param fileName:
        :type fileName:
        :param binaryBlockLength:
        :type binaryBlockLength:
        """
        return self._dllwrap.MMEMoryBlockDataRead(self._vi, fileName, binaryBlockLength)

    def MMEMoryDirectoryCatalog(self, directoryPath, arraySize):
        """

        :param directoryPath:
        :type directoryPath:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.MMEMoryDirectoryCatalog(self._vi, directoryPath, arraySize)

    def MMEMoryDirectoryCatalogLength(self, directoryPath):
        """

        :param directoryPath:
        :type directoryPath:
        """
        return self._dllwrap.MMEMoryDirectoryCatalogLength(self._vi, directoryPath)

    def MMEMoryDelete(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.MMEMoryDelete(self._vi, fileName)

    def MMEMoryLoad(self, instrumentSetting, fileName):
        """

        :param instrumentSetting:
        :type instrumentSetting:
        :param fileName:
        :type fileName:
        """
        return self._dllwrap.MMEMoryLoad(self._vi, instrumentSetting, fileName)

    def MMEMoryMakeDirectory(self, directoryName):
        """

        :param directoryName:
        :type directoryName:
        """
        return self._dllwrap.MMEMoryMakeDirectory(self._vi, directoryName)

    def MMEMoryMove(self, fileSource, fileDestination):
        """

        :param fileSource:
        :type fileSource:
        :param fileDestination:
        :type fileDestination:
        """
        return self._dllwrap.MMEMoryMove(self._vi, fileSource, fileDestination)

    def MMEMoryRemoveDirectory(self, directoryName):
        """

        :param directoryName:
        :type directoryName:
        """
        return self._dllwrap.MMEMoryRemoveDirectory(self._vi, directoryName)

    def MMEMoryStore(self, instrumentSetting, fileName):
        """

        :param instrumentSetting:
        :type instrumentSetting:
        :param fileName:
        :type fileName:
        """
        return self._dllwrap.MMEMoryStore(self._vi, instrumentSetting, fileName)

    def setRegister(self, registerGroup, registerType, value):
        """

        :param registerGroup:
        :type registerGroup:
        :param registerType:
        :type registerType:
        :param value:
        :type value:
        """
        return self._dllwrap.setRegister(self._vi, registerGroup, registerType, value)

    def getRegister(self, registerGroup, registerType):
        """

        :param registerGroup:
        :type registerGroup:
        :param registerType:
        :type registerType:
        """
        return self._dllwrap.getRegister(self._vi, registerGroup, registerType)

    def STATusPRESet(self):
        """"""
        return self._dllwrap.STATusPRESet(self._vi)

    def SetSYSTemBeeper(self, systemBeeper):
        """

        :param systemBeeper:
        :type systemBeeper:
        """
        return self._dllwrap.SetSYSTemBeeper(self._vi, systemBeeper)

    def GetSYSTemBeeper(self):
        """"""
        return self._dllwrap.GetSYSTemBeeper(self._vi)

    def SYSTemErrorQueueAll(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.SYSTemErrorQueueAll(self._vi, arraySize)

    def SYSTemErrorQueueCodeAll(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.SYSTemErrorQueueCodeAll(self._vi, arraySize)

    def SYSTemErrorQueueCodeNext(self):
        """"""
        return self._dllwrap.SYSTemErrorQueueCodeNext(self._vi)

    def SYSTemErrorQueueCount(self):
        """"""
        return self._dllwrap.SYSTemErrorQueueCount(self._vi)

    def SYSTemUSBResource(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.SYSTemUSBResource(self._vi, arraySize)

    def SYSTemGPIBResource(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.SYSTemGPIBResource(self._vi, arraySize)

    def SYSTemSerialResource(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.SYSTemSerialResource(self._vi, arraySize)

    def SYSTemOptionUserDefined(self, userDefinedIdentification):
        """

        :param userDefinedIdentification:
        :type userDefinedIdentification:
        """
        return self._dllwrap.SYSTemOptionUserDefined(self._vi, userDefinedIdentification)

    def SetSYSTemProtect(self, protectionLevel, protection, password):
        """

        :param protectionLevel:
        :type protectionLevel:
        :param protection:
        :type protection:
        :param password:
        :type password:
        """
        return self._dllwrap.SetSYSTemProtect(self._vi, protectionLevel, protection, password)

    def GetSYSTemVersion(self):
        """"""
        return self._dllwrap.GetSYSTemVersion(self._vi)

    def GetSYSTemStartupStatus(self):
        """"""
        return self._dllwrap.GetSYSTemStartupStatus(self._vi)

    def SYSTemFactoryPreset(self):
        """"""
        return self._dllwrap.SYSTemFactoryPreset(self._vi)

    def GetSYSTemErrorList(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemErrorList(self._vi, arraySize)

    def SetSYSTemNetworkIPAddress(self, IPAddress):
        """

        :param IPAddress:
        :type IPAddress:
        """
        return self._dllwrap.SetSYSTemNetworkIPAddress(self._vi, IPAddress)

    def GetSYSTemNetworkIPAddress(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkIPAddress(self._vi, arraySize)

    def SetSYSTemNetworkIPAddressSubnetMask(self, IPAddressSubnetMask):
        """

        :param IPAddressSubnetMask:
        :type IPAddressSubnetMask:
        """
        return self._dllwrap.SetSYSTemNetworkIPAddressSubnetMask(self._vi, IPAddressSubnetMask)

    def GetSYSTemNetworkIPAddressSubnetMask(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkIPAddressSubnetMask(self._vi, arraySize)

    def SetSYSTemNetworkIPAddressGateway(self, IPAddressGateway):
        """

        :param IPAddressGateway:
        :type IPAddressGateway:
        """
        return self._dllwrap.SetSYSTemNetworkIPAddressGateway(self._vi, IPAddressGateway)

    def GetSYSTemNetworkIPAddressGateway(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkIPAddressGateway(self._vi, arraySize)

    def SetSYSTemNetworkIPAddressMode(self, IPAddressMode):
        """

        :param IPAddressMode:
        :type IPAddressMode:
        """
        return self._dllwrap.SetSYSTemNetworkIPAddressMode(self._vi, IPAddressMode)

    def GetSYSTemNetworkIPAddressMode(self):
        """"""
        return self._dllwrap.GetSYSTemNetworkIPAddressMode(self._vi)

    def SYSTemNetworkIPAddressExecute(self):
        """"""
        return self._dllwrap.SYSTemNetworkIPAddressExecute(self._vi)

    def SetSYSTemNetworkCommonWorkgroup(self, commonWorkgroup):
        """

        :param commonWorkgroup:
        :type commonWorkgroup:
        """
        return self._dllwrap.SetSYSTemNetworkCommonWorkgroup(self._vi, commonWorkgroup)

    def GetSYSTemNetworkCommonWorkgroup(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkCommonWorkgroup(self._vi, arraySize)

    def SetSYSTemNetworkCommonDomain(self, commonDomain):
        """

        :param commonDomain:
        :type commonDomain:
        """
        return self._dllwrap.SetSYSTemNetworkCommonDomain(self._vi, commonDomain)

    def GetSYSTemNetworkCommonDomain(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkCommonDomain(self._vi, arraySize)

    def SetSYSTemNetworkCommonHostname(self, commonHostname):
        """

        :param commonHostname:
        :type commonHostname:
        """
        return self._dllwrap.SetSYSTemNetworkCommonHostname(self._vi, commonHostname)

    def GetSYSTemNetworkCommonHostname(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkCommonHostname(self._vi, arraySize)

    def SYSTemNetworkCommonExecute(self):
        """"""
        return self._dllwrap.SYSTemNetworkCommonExecute(self._vi)

    def SetSYSTemNetworkPreferedDNS(self, preferedDNS):
        """

        :param preferedDNS:
        :type preferedDNS:
        """
        return self._dllwrap.SetSYSTemNetworkPreferedDNS(self._vi, preferedDNS)

    def GetSYSTemNetworkPreferedDNS(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkPreferedDNS(self._vi, arraySize)

    def SetSYSTemNetworkAlternateDNS(self, alternateDNS):
        """

        :param alternateDNS:
        :type alternateDNS:
        """
        return self._dllwrap.SetSYSTemNetworkAlternateDNS(self._vi, alternateDNS)

    def GetSYSTemNetworkAlternateDNS(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkAlternateDNS(self._vi, arraySize)

    def SetSYSTemNetworkDNSMode(self, DNSMode):
        """

        :param DNSMode:
        :type DNSMode:
        """
        return self._dllwrap.SetSYSTemNetworkDNSMode(self._vi, DNSMode)

    def GetSYSTemNetworkDNSMode(self):
        """"""
        return self._dllwrap.GetSYSTemNetworkDNSMode(self._vi)

    def SYSTemNetworkDNSExecute(self):
        """"""
        return self._dllwrap.SYSTemNetworkDNSExecute(self._vi)

    def SetSYSTemNetworkDomain(self, domain):
        """

        :param domain:
        :type domain:
        """
        return self._dllwrap.SetSYSTemNetworkDomain(self._vi, domain)

    def GetSYSTemNetworkDomain(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkDomain(self._vi, arraySize)

    def SetSYSTemNetworkGateway(self, gateway):
        """

        :param gateway:
        :type gateway:
        """
        return self._dllwrap.SetSYSTemNetworkGateway(self._vi, gateway)

    def GetSYSTemNetworkGateway(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkGateway(self._vi, arraySize)

    def GetSYSTemNetworkResource(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkResource(self._vi, arraySize)

    def SetSYSTemNetworkSubnetMask(self, subnetMask):
        """

        :param subnetMask:
        :type subnetMask:
        """
        return self._dllwrap.SetSYSTemNetworkSubnetMask(self._vi, subnetMask)

    def GetSYSTemNetworkSubnetMask(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkSubnetMask(self._vi, arraySize)

    def SetSYSTemNetworkWorkgroup(self, workgroup):
        """

        :param workgroup:
        :type workgroup:
        """
        return self._dllwrap.SetSYSTemNetworkWorkgroup(self._vi, workgroup)

    def GetSYSTemNetworkWorkgroup(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkWorkgroup(self._vi, arraySize)

    def GetSYSTemNetworkMACAddress(self, arraySize):
        """

        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.GetSYSTemNetworkMACAddress(self._vi, arraySize)

    def GetSYSTemNetwork(self):
        """"""
        return self._dllwrap.GetSYSTemNetwork(self._vi)

    def TriggerSourceAllSweeps(self, triggerSourceAllSweeps):
        """

        :param triggerSourceAllSweeps:
        :type triggerSourceAllSweeps:
        """
        return self._dllwrap.TriggerSourceAllSweeps(self._vi, triggerSourceAllSweeps)

    def TriggerAllSweeps(self):
        """"""
        return self._dllwrap.TriggerAllSweeps(self._vi)

    def SweepReset(self):
        """"""
        return self._dllwrap.SweepReset(self._vi)

    def TriggerRFFrequencySweep(self):
        """"""
        return self._dllwrap.TriggerRFFrequencySweep(self._vi)

    def TriggerRFLevelSweep(self):
        """"""
        return self._dllwrap.TriggerRFLevelSweep(self._vi)

    def SetNoSignalMarkerPolarity(self, markerPolarity):
        """

        :param markerPolarity:
        :type markerPolarity:
        """
        return self._dllwrap.SetNoSignalMarkerPolarity(self._vi, markerPolarity)

    def GetNoSignalMarkerPolarity(self):
        """"""
        return self._dllwrap.GetNoSignalMarkerPolarity(self._vi)

    def SetBlankWidth(self, blankWidth):
        """

        :param blankWidth:
        :type blankWidth:
        """
        return self._dllwrap.SetBlankWidth(self._vi, blankWidth)

    def GetBlankWidth(self):
        """"""
        return self._dllwrap.GetBlankWidth(self._vi)

    def SetAngleUnits(self, angleUnits):
        """

        :param angleUnits:
        :type angleUnits:
        """
        return self._dllwrap.SetAngleUnits(self._vi, angleUnits)

    def GetAngleUnits(self):
        """"""
        return self._dllwrap.GetAngleUnits(self._vi)

    def SetPowerUnits(self, powerUnits):
        """

        :param powerUnits:
        :type powerUnits:
        """
        return self._dllwrap.SetPowerUnits(self._vi, powerUnits)

    def GetPowerUnits(self):
        """"""
        return self._dllwrap.GetPowerUnits(self._vi)

    def SetVelocityUnits(self, velocityUnits):
        """

        :param velocityUnits:
        :type velocityUnits:
        """
        return self._dllwrap.SetVelocityUnits(self._vi, velocityUnits)

    def GetVelocityUnits(self):
        """"""
        return self._dllwrap.GetVelocityUnits(self._vi)

    def readToFile(self, source, destination):
        """

        :param source:
        :type source:
        :param destination:
        :type destination:
        """
        return self._dllwrap.readToFile(self._vi, source, destination)

    def writeFromFile(self, source, destination):
        """

        :param source:
        :type source:
        :param destination:
        :type destination:
        """
        return self._dllwrap.writeFromFile(self._vi, source, destination)

    def errorCheckState(self, stateChecking):
        """

        :param stateChecking:
        :type stateChecking:
        """
        return self._dllwrap.errorCheckState(self._vi, stateChecking)

    def optionCheckState(self, stateChecking):
        """

        :param stateChecking:
        :type stateChecking:
        """
        return self._dllwrap.optionCheckState(self._vi, stateChecking)

    def rangeCheckState(self, rangeChecking):
        """

        :param rangeChecking:
        :type rangeChecking:
        """
        return self._dllwrap.rangeCheckState(self._vi, rangeChecking)

    def writeInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.writeInstrData(self._vi, writeBuffer)

    def readInstrData(self, numberBytesToRead):
        """

        :param numberBytesToRead:
        :type numberBytesToRead:
        """
        return self._dllwrap.readInstrData(self._vi, numberBytesToRead)

    def DevicePreset(self):
        """"""
        return self._dllwrap.DevicePreset(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def error_message(self, statusCode):
        """

        :param statusCode:
        :type statusCode:
        """
        return self._dllwrap.error_message(self._vi, statusCode)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def delay(self, seconds):
        """

        :param seconds:
        :type seconds:
        """
        return self._dllwrap.delay(self._vi, seconds)

    def IDQueryResponse(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.IDQueryResponse(self._vi, bufferSize)

    def ProcessAllPreviousCommands(self):
        """"""
        return self._dllwrap.ProcessAllPreviousCommands(self._vi)

    def QueryOPC(self):
        """"""
        return self._dllwrap.QueryOPC(self._vi)

    def checkStatus(self):
        """"""
        return self._dllwrap.checkStatus(self._vi)

    def waitOPC(self, timeout):
        """

        :param timeout:
        :type timeout:
        """
        return self._dllwrap.waitOPC(self._vi, timeout)

    def sendCmd(self, cmd):
        """

        :param cmd:
        :type cmd:
        """
        return self._dllwrap.sendCmd(self._vi, cmd)

    def setViInt32(self, cmd, value, min, max, parameterName):
        """

        :param cmd:
        :type cmd:
        :param value:
        :type value:
        :param min:
        :type min:
        :param max:
        :type max:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.setViInt32(self._vi, cmd, value, min, max, parameterName)

    def getViInt32(self, cmd, parameterName):
        """

        :param cmd:
        :type cmd:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getViInt32(self._vi, cmd, parameterName)

    def setViBoolean(self, cmd, value, parameterName):
        """

        :param cmd:
        :type cmd:
        :param value:
        :type value:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.setViBoolean(self._vi, cmd, value, parameterName)

    def getViBoolean(self, cmd, parameterName):
        """

        :param cmd:
        :type cmd:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getViBoolean(self._vi, cmd, parameterName)

    def setViBooleanPath(self, cmd, path, value, parameterName):
        """

        :param cmd:
        :type cmd:
        :param path:
        :type path:
        :param value:
        :type value:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.setViBooleanPath(self._vi, cmd, path, value, parameterName)

    def getViBooleanPath(self, cmd, path, parameterName):
        """

        :param cmd:
        :type cmd:
        :param path:
        :type path:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getViBooleanPath(self._vi, cmd, path, parameterName)

    def setViReal64(self, cmd, value, min, max, parameterName):
        """

        :param cmd:
        :type cmd:
        :param value:
        :type value:
        :param min:
        :type min:
        :param max:
        :type max:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.setViReal64(self._vi, cmd, value, min, max, parameterName)

    def setViReal64Path(self, cmd, path, value, min, max, parameterName):
        """

        :param cmd:
        :type cmd:
        :param path:
        :type path:
        :param value:
        :type value:
        :param min:
        :type min:
        :param max:
        :type max:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.setViReal64Path(self._vi, cmd, path, value, min, max, parameterName)

    def getViReal64Path(self, cmd, path, parameterName):
        """

        :param cmd:
        :type cmd:
        :param path:
        :type path:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getViReal64Path(self._vi, cmd, path, parameterName)

    def getViReal64(self, cmd, parameterName):
        """

        :param cmd:
        :type cmd:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getViReal64(self._vi, cmd, parameterName)

    def setViReal64Units(self, cmd, value, units, min, max, parameterName):
        """

        :param cmd:
        :type cmd:
        :param value:
        :type value:
        :param units:
        :type units:
        :param min:
        :type min:
        :param max:
        :type max:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.setViReal64Units(self._vi, cmd, value, units, min, max, parameterName)

    def setViString(self, cmd, value, parameterName):
        """

        :param cmd:
        :type cmd:
        :param value:
        :type value:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.setViString(self._vi, cmd, value, parameterName)

    def getViString(self, cmd, value, buffer_size, parameterName):
        """

        :param cmd:
        :type cmd:
        :param value:
        :type value:
        :param buffer_size:
        :type buffer_size:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getViString(self._vi, cmd, value, buffer_size, parameterName)

    def setViStringQuoted(self, cmd, quotes, value, parameterName):
        """

        :param cmd:
        :type cmd:
        :param quotes:
        :type quotes:
        :param value:
        :type value:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.setViStringQuoted(self._vi, cmd, quotes, value, parameterName)

    def getViStringQuoted(self, cmd, quotes, arraySize, parameterName):
        """

        :param cmd:
        :type cmd:
        :param quotes:
        :type quotes:
        :param arraySize:
        :type arraySize:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getViStringQuoted(self._vi, cmd, quotes, arraySize, parameterName)

    def setViStringPath(self, cmd, path, value, parameterName):
        """

        :param cmd:
        :type cmd:
        :param path:
        :type path:
        :param value:
        :type value:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.setViStringPath(self._vi, cmd, path, value, parameterName)

    def setEnum(self, cmd, value, parameterName):
        """

        :param cmd:
        :type cmd:
        :param value:
        :type value:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.setEnum(self._vi, cmd, value, parameterName)

    def getEnum(self, cmd, parameterName):
        """

        :param cmd:
        :type cmd:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getEnum(self._vi, cmd, parameterName)

    def setEnumPath(self, cmd, path, value, parameterName):
        """

        :param cmd:
        :type cmd:
        :param path:
        :type path:
        :param value:
        :type value:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.setEnumPath(self._vi, cmd, path, value, parameterName)

    def getEnumPath(self, cmd, path, parameterName):
        """

        :param cmd:
        :type cmd:
        :param path:
        :type path:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getEnumPath(self._vi, cmd, path, parameterName)

    def setViUInt32(self, cmd, value, min, max, parameterName):
        """

        :param cmd:
        :type cmd:
        :param value:
        :type value:
        :param min:
        :type min:
        :param max:
        :type max:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.setViUInt32(self._vi, cmd, value, min, max, parameterName)

    def getViUInt32(self, cmd, parameterName):
        """

        :param cmd:
        :type cmd:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getViUInt32(self._vi, cmd, parameterName)

    def checkIndexInList(self, index, parameterName):
        """

        :param index:
        :type index:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.checkIndexInList(self._vi, index, parameterName)

    def getIndexFromString(self, string):
        """

        :param string:
        :type string:
        """
        return self._dllwrap.getIndexFromString(string)

    def getCatalog(self, cmd, arraySize, parameterName):
        """

        :param cmd:
        :type cmd:
        :param arraySize:
        :type arraySize:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getCatalog(self._vi, cmd, arraySize, parameterName)

    def getViReal64Array(self, cmd, count, parameterName):
        """

        :param cmd:
        :type cmd:
        :param count:
        :type count:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getViReal64Array(self._vi, cmd, count, parameterName)

    def getViInt32Array(self, cmd, count, parameterName):
        """

        :param cmd:
        :type cmd:
        :param count:
        :type count:
        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.getViInt32Array(self._vi, cmd, count, parameterName)

    def readDataUnknownLength(self):
        """"""
        return self._dllwrap.readDataUnknownLength(self._vi)

    def readDataToFile(self, cmd, destination):
        """

        :param cmd:
        :type cmd:
        :param destination:
        :type destination:
        """
        return self._dllwrap.readDataToFile(self._vi, cmd, destination)

    def ParameterError(self, parameterName):
        """

        :param parameterName:
        :type parameterName:
        """
        return self._dllwrap.ParameterError(self._vi, parameterName)

    def ReadToFile(self, filename, maxBytesToRead, fileAction):
        """

        :param filename:
        :type filename:
        :param maxBytesToRead:
        :type maxBytesToRead:
        :param fileAction:
        :type fileAction:
        """
        return self._dllwrap.ReadToFile(self._vi, filename, maxBytesToRead, fileAction)

    def WriteFromFile(self, filename, maxBytesToWrite, byteOffset):
        """

        :param filename:
        :type filename:
        :param maxBytesToWrite:
        :type maxBytesToWrite:
        :param byteOffset:
        :type byteOffset:
        """
        return self._dllwrap.WriteFromFile(self._vi, filename, maxBytesToWrite, byteOffset)
