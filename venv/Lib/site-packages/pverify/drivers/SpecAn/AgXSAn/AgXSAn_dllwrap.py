from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import AgXSAn_const as const
from .AgXSAn_const import *


class AgXSAn_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("AgXSAn.dll", "AgXSAn_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "AgXSAn"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.AgXSAn_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.AgXSAn_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.AgXSAn_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def SelectInstrPersonality(self, Vi, PersonalityName):
        status = self.dll.AgXSAn_SelectInstrPersonality(ViSession(Vi), ViConstString(PersonalityName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.AgXSAn_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.AgXSAn_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        status = self.dll.AgXSAn_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.AgXSAn_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        status = self.dll.AgXSAn_GetNextCoercionRecord(ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.AgXSAn_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.AgXSAn_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.AgXSAn_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.AgXSAn_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.AgXSAn_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.AgXSAn_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.AgXSAn_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.AgXSAn_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.AgXSAn_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.AgXSAn_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.AgXSAn_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.AgXSAn_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        status = self.dll.AgXSAn_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgXSAn_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgXSAn_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgXSAn_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgXSAn_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgXSAn_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyOffset(self, Vi, FrequencyOffset):
        status = self.dll.AgXSAn_ConfigureFrequencyOffset(ViSession(Vi), ViReal64(FrequencyOffset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTraceType(self, Vi, TraceName, TraceType):
        status = self.dll.AgXSAn_ConfigureTraceType(ViSession(Vi), ViConstString(TraceName), ViInt32(TraceType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetTraceName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgXSAn_GetTraceName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def QueryTraceSize(self, Vi, TraceName):
        TraceSize = ViInt32()
        status = self.dll.AgXSAn_QueryTraceSize(ViSession(Vi), ViConstString(TraceName), byref(TraceSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(TraceSize.value)

    def ConfigureAcquisition(
        self,
        Vi,
        SweepModeContinuous,
        NumberOfSweeps,
        DetectorTypeAuto,
        DetectorType,
        VerticalScale,
    ):
        status = self.dll.AgXSAn_ConfigureAcquisition(
            ViSession(Vi),
            ViBoolean(SweepModeContinuous),
            ViInt32(NumberOfSweeps),
            ViBoolean(DetectorTypeAuto),
            ViInt32(DetectorType),
            ViInt32(VerticalScale),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyCenterSpan(self, Vi, CenterFrequency, Span):
        status = self.dll.AgXSAn_ConfigureFrequencyCenterSpan(ViSession(Vi), ViReal64(CenterFrequency), ViReal64(Span))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyStartStop(self, Vi, StartFrequency, StopFrequency):
        status = self.dll.AgXSAn_ConfigureFrequencyStartStop(
            ViSession(Vi), ViReal64(StartFrequency), ViReal64(StopFrequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLevel(
        self,
        Vi,
        AmplitudeUnits,
        InputImpedance,
        ReferenceLevel,
        ReferenceLevelOffset,
        AttenuationAuto,
        Attenuation,
    ):
        status = self.dll.AgXSAn_ConfigureLevel(
            ViSession(Vi),
            ViInt32(AmplitudeUnits),
            ViReal64(InputImpedance),
            ViReal64(ReferenceLevel),
            ViReal64(ReferenceLevelOffset),
            ViBoolean(AttenuationAuto),
            ViReal64(Attenuation),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSweepCoupling(
        self,
        Vi,
        ResolutionBandwidthAuto,
        ResolutionBandwidth,
        VideoBandwidthAuto,
        VideoBandwidth,
        SweepTimeAuto,
        SweepTime,
    ):
        status = self.dll.AgXSAn_ConfigureSweepCoupling(
            ViSession(Vi),
            ViBoolean(ResolutionBandwidthAuto),
            ViReal64(ResolutionBandwidth),
            ViBoolean(VideoBandwidthAuto),
            ViReal64(VideoBandwidth),
            ViBoolean(SweepTimeAuto),
            ViReal64(SweepTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSignalTrackEnabled(self, Vi, SignalTrackEnabled):
        status = self.dll.AgXSAn_ConfigureSignalTrackEnabled(ViSession(Vi), ViBoolean(SignalTrackEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetMarkerName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgXSAn_GetMarkerName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def MoveMarker(self, Vi, MarkerPosition):
        status = self.dll.AgXSAn_MoveMarker(ViSession(Vi), ViReal64(MarkerPosition))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetActiveMarker(self, Vi, ActiveMarker):
        status = self.dll.AgXSAn_SetActiveMarker(ViSession(Vi), ViConstString(ActiveMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryMarkerType(self, Vi):
        MarkerType = ViInt32()
        status = self.dll.AgXSAn_QueryMarkerType(ViSession(Vi), byref(MarkerType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(MarkerType.value)

    def ConfigureMarkerEnabled(self, Vi, MarkerEnabled, MarkerTraceName):
        status = self.dll.AgXSAn_ConfigureMarkerEnabled(
            ViSession(Vi), ViBoolean(MarkerEnabled), ViConstString(MarkerTraceName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMarkerSearch(self, Vi, PeakExcursion, MarkerThreshold):
        status = self.dll.AgXSAn_ConfigureMarkerSearch(
            ViSession(Vi), ViReal64(PeakExcursion), ViReal64(MarkerThreshold)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisableAllMarkers(self, Vi):
        status = self.dll.AgXSAn_DisableAllMarkers(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MakeMarkerDelta(self, Vi, DeltaMarker):
        status = self.dll.AgXSAn_MakeMarkerDelta(ViSession(Vi), ViBoolean(DeltaMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryMarker(self, Vi):
        MarkerPosition = ViReal64()
        MarkerAmplitude = ViReal64()
        status = self.dll.AgXSAn_QueryMarker(ViSession(Vi), byref(MarkerPosition), byref(MarkerAmplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MarkerPosition = float(MarkerPosition.value)
        MarkerAmplitude = float(MarkerAmplitude.value)
        return MarkerPosition, MarkerAmplitude

    def QueryReferenceMarker(self, Vi):
        ReferenceMarkerAmplitude = ViReal64()
        ReferenceMarkerPosition = ViReal64()
        status = self.dll.AgXSAn_QueryReferenceMarker(
            ViSession(Vi), byref(ReferenceMarkerAmplitude), byref(ReferenceMarkerPosition)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReferenceMarkerAmplitude = float(ReferenceMarkerAmplitude.value)
        ReferenceMarkerPosition = float(ReferenceMarkerPosition.value)
        return ReferenceMarkerAmplitude, ReferenceMarkerPosition

    def MarkerSearch(self, Vi, SearchType):
        status = self.dll.AgXSAn_MarkerSearch(ViSession(Vi), ViInt32(SearchType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetInstrumentFromMarker(self, Vi, InstrumentSetting):
        status = self.dll.AgXSAn_SetInstrumentFromMarker(ViSession(Vi), ViInt32(InstrumentSetting))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMarkerFrequencyCounter(self, Vi, Enabled, Resolution):
        status = self.dll.AgXSAn_ConfigureMarkerFrequencyCounter(
            ViSession(Vi), ViBoolean(Enabled), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerSource(self, Vi, TriggerSource):
        status = self.dll.AgXSAn_ConfigureTriggerSource(ViSession(Vi), ViInt32(TriggerSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureExternalTrigger(self, Vi, ExternalTriggerLevel, ExternalTriggerSlope):
        status = self.dll.AgXSAn_ConfigureExternalTrigger(
            ViSession(Vi), ViReal64(ExternalTriggerLevel), ViInt32(ExternalTriggerSlope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureVideoTrigger(self, Vi, VideoTriggerLevel, VideoTriggerSlope):
        status = self.dll.AgXSAn_ConfigureVideoTrigger(
            ViSession(Vi), ViReal64(VideoTriggerLevel), ViInt32(VideoTriggerSlope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_GetTriggerAlarmName(self, Vi, AlarmIndex, AlarmNameBufferSize):
        AlarmName = ARRAY_ViChar(AlarmNameBufferSize)
        status = self.dll.AgXSAn_IviLxiSync_GetTriggerAlarmName(
            ViSession(Vi), ViInt32(AlarmIndex), ViInt32(AlarmNameBufferSize), AlarmName
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AlarmName)

    def IviLxiSync_ConfigureTriggerAlarm(self, Vi, AlarmName, TimeSeconds, TimeFraction, Period, RepeatCount):
        status = self.dll.AgXSAn_IviLxiSync_ConfigureTriggerAlarm(
            ViSession(Vi),
            ViConstString(AlarmName),
            ViReal64(TimeSeconds),
            ViReal64(TimeFraction),
            ViReal64(Period),
            ViInt32(RepeatCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_AddTriggerAlarm(self, Vi, AlarmName):
        status = self.dll.AgXSAn_IviLxiSync_AddTriggerAlarm(ViSession(Vi), ViConstString(AlarmName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_DisableAllTriggerAlarms(self, Vi):
        status = self.dll.AgXSAn_IviLxiSync_DisableAllTriggerAlarms(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveTriggerAlarm(self, Vi, AlarmName):
        status = self.dll.AgXSAn_IviLxiSync_RemoveTriggerAlarm(ViSession(Vi), ViConstString(AlarmName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveAllTriggerAlarms(self, Vi):
        status = self.dll.AgXSAn_IviLxiSync_RemoveAllTriggerAlarms(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_GetTriggerSourceName(self, Vi, SourceIndex, SourceNameBufferSize):
        SourceName = ARRAY_ViChar(SourceNameBufferSize)
        status = self.dll.AgXSAn_IviLxiSync_GetTriggerSourceName(
            ViSession(Vi), ViInt32(SourceIndex), ViInt32(SourceNameBufferSize), SourceName
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(SourceName)

    def IviLxiSync_ConfigureTriggerSource(self, Vi, SourceName, Delay, Detection):
        status = self.dll.AgXSAn_IviLxiSync_ConfigureTriggerSource(
            ViSession(Vi), ViConstString(SourceName), ViReal64(Delay), ViInt32(Detection)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_AddTriggerSource(self, Vi, SourceName):
        status = self.dll.AgXSAn_IviLxiSync_AddTriggerSource(ViSession(Vi), ViConstString(SourceName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveTriggerSource(self, Vi, SourceName):
        status = self.dll.AgXSAn_IviLxiSync_RemoveTriggerSource(ViSession(Vi), ViConstString(SourceName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveAllCustomTriggerSources(self, Vi):
        status = self.dll.AgXSAn_IviLxiSync_RemoveAllCustomTriggerSources(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureConversionLossTableEnabled(self, Vi, ConversionLossTableEnabled):
        status = self.dll.AgXSAn_ConfigureConversionLossTableEnabled(
            ViSession(Vi), ViBoolean(ConversionLossTableEnabled)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureExternalMixerBiasEnabled(self, Vi, BiasEnabled):
        status = self.dll.AgXSAn_ConfigureExternalMixerBiasEnabled(ViSession(Vi), ViBoolean(BiasEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureExternalMixerEnabled(self, Vi, ExternalMixerEnabled):
        status = self.dll.AgXSAn_ConfigureExternalMixerEnabled(ViSession(Vi), ViBoolean(ExternalMixerEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureExternalMixerNumberOfPorts(self, Vi, NumberOfPorts):
        status = self.dll.AgXSAn_ConfigureExternalMixerNumberOfPorts(ViSession(Vi), ViInt32(NumberOfPorts))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureExternalMixer(self, Vi, Harmonic, AverageConversionLoss):
        status = self.dll.AgXSAn_ConfigureExternalMixer(
            ViSession(Vi), ViInt32(Harmonic), ViReal64(AverageConversionLoss)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureExternalMixerBias(self, Vi, Bias, BiasLimit):
        status = self.dll.AgXSAn_ConfigureExternalMixerBias(ViSession(Vi), ViReal64(Bias), ViReal64(BiasLimit))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureConversionLossTable(self, Vi, Count):
        Frequency = ARRAY_ViReal64(Count)
        ConversionLoss = ARRAY_ViReal64(Count)
        status = self.dll.AgXSAn_ConfigureConversionLossTable(ViSession(Vi), ViInt32(Count), Frequency, ConversionLoss)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Frequency = list(Frequency)
        ConversionLoss = list(ConversionLoss)
        return Frequency, ConversionLoss

    def PeakPreselector(self, Vi):
        status = self.dll.AgXSAn_PeakPreselector(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AddTraces(self, Vi, DestinationTrace, Trace1, Trace2):
        status = self.dll.AgXSAn_AddTraces(
            ViSession(Vi),
            ViConstString(DestinationTrace),
            ViConstString(Trace1),
            ViConstString(Trace2),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CopyTrace(self, Vi, DestinationTrace, SourceTrace):
        status = self.dll.AgXSAn_CopyTrace(ViSession(Vi), ViConstString(DestinationTrace), ViConstString(SourceTrace))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ExchangeTraces(self, Vi, Trace1, Trace2):
        status = self.dll.AgXSAn_ExchangeTraces(ViSession(Vi), ViConstString(Trace1), ViConstString(Trace2))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SubtractTraces(self, Vi, DestinationTrace, Trace1, Trace2):
        status = self.dll.AgXSAn_SubtractTraces(
            ViSession(Vi),
            ViConstString(DestinationTrace),
            ViConstString(Trace1),
            ViConstString(Trace2),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_GetArmAlarmName(self, Vi, AlarmIndex, AlarmNameBufferSize):
        AlarmName = ARRAY_ViChar(AlarmNameBufferSize)
        status = self.dll.AgXSAn_IviLxiSync_GetArmAlarmName(
            ViSession(Vi), ViInt32(AlarmIndex), ViInt32(AlarmNameBufferSize), AlarmName
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AlarmName)

    def IviLxiSync_ConfigureArmAlarm(self, Vi, AlarmName, Enabled, TimeSeconds, TimeFraction, Period, RepeatCount):
        status = self.dll.AgXSAn_IviLxiSync_ConfigureArmAlarm(
            ViSession(Vi),
            ViConstString(AlarmName),
            ViBoolean(Enabled),
            ViReal64(TimeSeconds),
            ViReal64(TimeFraction),
            ViReal64(Period),
            ViInt32(RepeatCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_AddArmAlarm(self, Vi, AlarmName):
        status = self.dll.AgXSAn_IviLxiSync_AddArmAlarm(ViSession(Vi), ViConstString(AlarmName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_DisableAllArmAlarms(self, Vi):
        status = self.dll.AgXSAn_IviLxiSync_DisableAllArmAlarms(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveArmAlarm(self, Vi, AlarmName):
        status = self.dll.AgXSAn_IviLxiSync_RemoveArmAlarm(ViSession(Vi), ViConstString(AlarmName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveAllCustomArmAlarms(self, Vi):
        status = self.dll.AgXSAn_IviLxiSync_RemoveAllCustomArmAlarms(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_GetArmSourceName(self, Vi, SourceIndex, SourceNameBufferSize):
        SourceName = ARRAY_ViChar(SourceNameBufferSize)
        status = self.dll.AgXSAn_IviLxiSync_GetArmSourceName(
            ViSession(Vi), ViInt32(SourceIndex), ViInt32(SourceNameBufferSize), SourceName
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(SourceName)

    def IviLxiSync_ConfigureArmSource(self, Vi, SourceName, Enabled, Detection):
        status = self.dll.AgXSAn_IviLxiSync_ConfigureArmSource(
            ViSession(Vi),
            ViConstString(SourceName),
            ViBoolean(Enabled),
            ViInt32(Detection),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_AddArmSource(self, Vi, SourceName):
        status = self.dll.AgXSAn_IviLxiSync_AddArmSource(ViSession(Vi), ViConstString(SourceName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_DisableAllArmSources(self, Vi):
        status = self.dll.AgXSAn_IviLxiSync_DisableAllArmSources(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveArmSource(self, Vi, SourceName):
        status = self.dll.AgXSAn_IviLxiSync_RemoveArmSource(ViSession(Vi), ViConstString(SourceName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveAllCustomArmSources(self, Vi):
        status = self.dll.AgXSAn_IviLxiSync_RemoveAllCustomArmSources(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_GetEventName(self, Vi, EventIndex, EventNameBufferSize):
        EventName = ARRAY_ViChar(EventNameBufferSize)
        status = self.dll.AgXSAn_IviLxiSync_GetEventName(
            ViSession(Vi), ViInt32(EventIndex), ViInt32(EventNameBufferSize), EventName
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(EventName)

    def IviLxiSync_ConfigureEvent(self, Vi, EventName, DriveMode, Source, DestinationPath, Slope):
        status = self.dll.AgXSAn_IviLxiSync_ConfigureEvent(
            ViSession(Vi),
            ViConstString(EventName),
            ViInt32(DriveMode),
            ViConstString(Source),
            ViConstString(DestinationPath),
            ViInt32(Slope),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_AddEvent(self, Vi, EventName):
        status = self.dll.AgXSAn_IviLxiSync_AddEvent(ViSession(Vi), ViConstString(EventName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_DisableAllEvents(self, Vi):
        status = self.dll.AgXSAn_IviLxiSync_DisableAllEvents(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveEvent(self, Vi, EventName):
        status = self.dll.AgXSAn_IviLxiSync_RemoveEvent(ViSession(Vi), ViConstString(EventName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_RemoveAllCustomEvents(self, Vi):
        status = self.dll.AgXSAn_IviLxiSync_RemoveAllCustomEvents(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FetchYTrace(self, Vi, TraceName, ArrayLength):
        ActualPoints = ViInt32()
        Amplitude = ARRAY_ViReal64(ArrayLength)
        status = self.dll.AgXSAn_FetchYTrace(
            ViSession(Vi),
            ViConstString(TraceName),
            ViInt32(ArrayLength),
            byref(ActualPoints),
            Amplitude,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ActualPoints = int(ActualPoints.value)
        Amplitude = list(Amplitude)
        return ActualPoints, Amplitude

    def ReadYTrace(self, Vi, TraceName, MaxTimeMilliseconds, ArrayLength):
        ActualPoints = ViInt32()
        Amplitude = ARRAY_ViReal64(ArrayLength)
        status = self.dll.AgXSAn_ReadYTrace(
            ViSession(Vi),
            ViConstString(TraceName),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ArrayLength),
            byref(ActualPoints),
            Amplitude,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ActualPoints = int(ActualPoints.value)
        Amplitude = list(Amplitude)
        return ActualPoints, Amplitude

    def Abort(self, Vi):
        status = self.dll.AgXSAn_Abort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AcquisitionStatus(self, Vi):
        Status = ViInt32()
        status = self.dll.AgXSAn_AcquisitionStatus(ViSession(Vi), byref(Status))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Status.value)

    def Initiate(self, Vi):
        status = self.dll.AgXSAn_Initiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SendSoftwareTrigger(self, Vi):
        status = self.dll.AgXSAn_SendSoftwareTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerExternalConfigure(self, Vi, ExternalTriggerLevel, ExternalTriggerSlope):
        status = self.dll.AgXSAn_TriggerExternalConfigure(
            ViSession(Vi), ViReal64(ExternalTriggerLevel), ViInt32(ExternalTriggerSlope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerExternal2Configure(self, Vi, External2TriggerLevel, External2TriggerSlope):
        status = self.dll.AgXSAn_TriggerExternal2Configure(
            ViSession(Vi), ViReal64(External2TriggerLevel), ViInt32(External2TriggerSlope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerVideoConfigure(self, Vi, VideoTriggerLevel, VideoTriggerSlope):
        status = self.dll.AgXSAn_TriggerVideoConfigure(
            ViSession(Vi), ViReal64(VideoTriggerLevel), ViInt32(VideoTriggerSlope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_ClearEventLog(self, Vi):
        status = self.dll.AgXSAn_IviLxiSync_ClearEventLog(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviLxiSync_GetNextEventLogEntry(self, Vi, LogEntryBufferSize):
        LogEntry = ARRAY_ViChar(LogEntryBufferSize)
        status = self.dll.AgXSAn_IviLxiSync_GetNextEventLogEntry(ViSession(Vi), ViInt32(LogEntryBufferSize), LogEntry)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(LogEntry)

    def IviLxiSync_GetSystemTime(self, Vi):
        TimeSeconds = ViReal64()
        TimeFractional = ViReal64()
        status = self.dll.AgXSAn_IviLxiSync_GetSystemTime(ViSession(Vi), byref(TimeSeconds), byref(TimeFractional))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TimeSeconds = float(TimeSeconds.value)
        TimeFractional = float(TimeFractional.value)
        return TimeSeconds, TimeFractional

    def FrequencyFullSpan(self, Vi):
        status = self.dll.AgXSAn_FrequencyFullSpan(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyPreviousSpan(self, Vi):
        status = self.dll.AgXSAn_FrequencyPreviousSpan(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyTune(self, Vi):
        status = self.dll.AgXSAn_FrequencyTune(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AcquisitionGetDetectorTrace(self, Vi, TraceNo):
        RetVal = ViInt32()
        status = self.dll.AgXSAn_AcquisitionGetDetectorTrace(ViSession(Vi), ViInt32(TraceNo), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def AcquisitionGetDetectorTraceAutoEnabled(self, Vi, TraceNo):
        RetVal = ViBoolean()
        status = self.dll.AgXSAn_AcquisitionGetDetectorTraceAutoEnabled(ViSession(Vi), ViInt32(TraceNo), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def AcquisitionSetDetectorTrace(self, Vi, TraceNo, DetectorType):
        status = self.dll.AgXSAn_AcquisitionSetDetectorTrace(ViSession(Vi), ViInt32(TraceNo), ViInt32(DetectorType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AcquisitionSetDetectorTraceAutoEnabled(self, Vi, TraceNo, Auto):
        status = self.dll.AgXSAn_AcquisitionSetDetectorTraceAutoEnabled(
            ViSession(Vi), ViInt32(TraceNo), ViBoolean(Auto)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ZoomIn(self, Vi):
        status = self.dll.AgXSAn_ZoomIn(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ZoomOut(self, Vi):
        status = self.dll.AgXSAn_ZoomOut(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TraceClear(self, Vi, RepCapIdentifier):
        status = self.dll.AgXSAn_TraceClear(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TraceFetchX(self, Vi, Trace, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgXSAn_TraceFetchX(
            ViSession(Vi),
            ViConstString(Trace),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def TraceCompress(
        self,
        Vi,
        Trace,
        Method,
        StartOffset,
        Length,
        RepeatOffset,
        RepeatLimit,
        ValBufferSize,
    ):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgXSAn_TraceCompress(
            ViSession(Vi),
            ViConstString(Trace),
            ViInt32(Method),
            ViReal64(StartOffset),
            ViReal64(Length),
            ViReal64(RepeatOffset),
            ViInt32(RepeatLimit),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def TraceImportTraceCSV(self, Vi, Trace, TraceNumber, Filename):
        status = self.dll.AgXSAn_TraceImportTraceCSV(
            ViSession(Vi),
            ViConstString(Trace),
            ViInt32(TraceNumber),
            ViConstString(Filename),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TraceExportTraceCSV(self, Vi, Trace, TraceNumber, Filename):
        status = self.dll.AgXSAn_TraceExportTraceCSV(
            ViSession(Vi),
            ViConstString(Trace),
            ViInt32(TraceNumber),
            ViConstString(Filename),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TracePeaks(self, Vi, Trace, Threshold, Excursion, Sort, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgXSAn_TracePeaks(
            ViSession(Vi),
            ViConstString(Trace),
            ViReal64(Threshold),
            ViReal64(Excursion),
            ViInt32(Sort),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SAACPConfigure(self, Vi):
        status = self.dll.AgXSAn_SAACPConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAACPConfigureNoPreset(self, Vi):
        status = self.dll.AgXSAn_SAACPConfigureNoPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAACPTraceFetch(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPTraceFetch(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPTraceRead(self, Vi, RepCapIdentifier, MaxTime, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPTraceRead(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPTraceReadSignal(self, Vi, RepCapIdentifier, MaxTime, Frequency, Amplitude, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPTraceReadSignal(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPTracesAbort(self, Vi):
        status = self.dll.AgXSAn_SAACPTracesAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAACPTracesInitiate(self, Vi):
        status = self.dll.AgXSAn_SAACPTracesInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAACPTracesInitiateSignal(self, Vi, Frequency, Amplitude):
        status = self.dll.AgXSAn_SAACPTracesInitiateSignal(ViSession(Vi), ViReal64(Frequency), ViReal64(Amplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAACPCarrierListConfigureCarrierMethod(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        StateActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPCarrierListConfigureCarrierMethod(
            ViSession(Vi), ViInt32(StateBufferSize), State, byref(StateActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        State = list(State)
        StateActualSize = int(StateActualSize.value)
        return State, StateActualSize

    def SAACPCarrierListConfigureChannelSpacing(self, Vi, FrequencyDifferenceBufferSize):
        FrequencyDifference = ARRAY_ViReal64(FrequencyDifferenceBufferSize)
        FrequencyDifferenceActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPCarrierListConfigureChannelSpacing(
            ViSession(Vi),
            ViInt32(FrequencyDifferenceBufferSize),
            FrequencyDifference,
            byref(FrequencyDifferenceActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        FrequencyDifference = list(FrequencyDifference)
        FrequencyDifferenceActualSize = int(FrequencyDifferenceActualSize.value)
        return FrequencyDifference, FrequencyDifferenceActualSize

    def SAACPCarrierListConfigureCouplingEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        StateActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPCarrierListConfigureCouplingEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State, byref(StateActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        State = list(State)
        StateActualSize = int(StateActualSize.value)
        return State, StateActualSize

    def SAACPCarrierListConfigureIntegrationBandwidth(self, Vi, BandwidthBufferSize):
        Bandwidth = ARRAY_ViReal64(BandwidthBufferSize)
        BandwidthActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPCarrierListConfigureIntegrationBandwidth(
            ViSession(Vi),
            ViInt32(BandwidthBufferSize),
            Bandwidth,
            byref(BandwidthActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Bandwidth = list(Bandwidth)
        BandwidthActualSize = int(BandwidthActualSize.value)
        return Bandwidth, BandwidthActualSize

    def SAACPCarrierListConfigureMethod(self, Vi, MethodBufferSize):
        Method = ARRAY_ViInt32(MethodBufferSize)
        MethodActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPCarrierListConfigureMethod(
            ViSession(Vi), ViInt32(MethodBufferSize), Method, byref(MethodActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MethodActualSize = int(MethodActualSize.value)
        return Method, MethodActualSize

    def SAACPCarrierListConfigurePowerPresent(self, Vi, EnabledBufferSize):
        Enabled = ARRAY_ViInt32(EnabledBufferSize)
        EnabledActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPCarrierListConfigurePowerPresent(
            ViSession(Vi), ViInt32(EnabledBufferSize), Enabled, byref(EnabledActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        EnabledActualSize = int(EnabledActualSize.value)
        return Enabled, EnabledActualSize

    def SAACPCarrierListQueryCarrierMethod(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPCarrierListQueryCarrierMethod(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPCarrierListQueryChannelSpacing(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPCarrierListQueryChannelSpacing(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPCarrierListQueryCouplingEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPCarrierListQueryCouplingEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPCarrierListQueryIntegrationBandwidth(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPCarrierListQueryIntegrationBandwidth(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPCarrierListQueryMethod(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPCarrierListQueryMethod(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPCarrierListQueryPowerPresent(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPCarrierListQueryPowerPresent(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPFrequencyFullSpan(self, Vi):
        status = self.dll.AgXSAn_SAACPFrequencyFullSpan(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAACPFrequencyLastSpan(self, Vi):
        status = self.dll.AgXSAn_SAACPFrequencyLastSpan(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAACPMarkerConfigureEnabled(self, Vi, Enabled, Trace):
        status = self.dll.AgXSAn_SAACPMarkerConfigureEnabled(ViSession(Vi), ViBoolean(Enabled), ViInt32(Trace))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAACPMarkerDisableAll(self, Vi):
        status = self.dll.AgXSAn_SAACPMarkerDisableAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAACPMarkerQuery(self, Vi):
        pPosition = ViReal64()
        pAmplitude = ViReal64()
        status = self.dll.AgXSAn_SAACPMarkerQuery(ViSession(Vi), byref(pPosition), byref(pAmplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pPosition = float(pPosition.value)
        pAmplitude = float(pAmplitude.value)
        return pPosition, pAmplitude

    def SAACPMarkerSearch(self, Vi, SearchType):
        status = self.dll.AgXSAn_SAACPMarkerSearch(ViSession(Vi), ViInt32(SearchType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAACPOffsetListConfigureAbsoluteLimit(self, Vi, LimitBufferSize):
        Limit = ARRAY_ViReal64(LimitBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListConfigureAbsoluteLimit(ViSession(Vi), ViInt32(LimitBufferSize), Limit)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Limit)

    def SAACPOffsetListConfigureEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListConfigureEnabled(ViSession(Vi), ViInt32(StateBufferSize), State)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SAACPOffsetListConfigureFrequency(self, Vi, FrequencyDifferenceBufferSize):
        FrequencyDifference = ARRAY_ViReal64(FrequencyDifferenceBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListConfigureFrequency(
            ViSession(Vi), ViInt32(FrequencyDifferenceBufferSize), FrequencyDifference
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(FrequencyDifference)

    def SAACPOffsetListConfigureLowerLimit(self, Vi, LimitBufferSize):
        Limit = ARRAY_ViReal64(LimitBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListConfigureLowerLimit(ViSession(Vi), ViInt32(LimitBufferSize), Limit)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Limit)

    def SAACPOffsetListConfigureRelativeLimitCarrier(self, Vi, LimitBufferSize):
        Limit = ARRAY_ViReal64(LimitBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListConfigureRelativeLimitCarrier(
            ViSession(Vi), ViInt32(LimitBufferSize), Limit
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Limit)

    def SAACPOffsetListConfigureRelativeLimitPSD(self, Vi, LimitBufferSize):
        Limit = ARRAY_ViReal64(LimitBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListConfigureRelativeLimitPSD(
            ViSession(Vi), ViInt32(LimitBufferSize), Limit
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Limit)

    def SAACPOffsetListConfigureSidebandSelection(self, Vi, SidebandBufferSize):
        Sideband = ARRAY_ViInt32(SidebandBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListConfigureSidebandSelection(
            ViSession(Vi), ViInt32(SidebandBufferSize), Sideband
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Sideband

    def SAACPOffsetListConfigureTest(self, Vi, TypeBufferSize):
        Type = ARRAY_ViInt32(TypeBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListConfigureTest(ViSession(Vi), ViInt32(TypeBufferSize), Type)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Type

    def SAACPOffsetListConfigureUpperLimit(self, Vi, LimitBufferSize):
        Limit = ARRAY_ViReal64(LimitBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListConfigureUpperLimit(ViSession(Vi), ViInt32(LimitBufferSize), Limit)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Limit)

    def SAACPOffsetListQueryAbsoluteLimit(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListQueryAbsoluteLimit(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListQueryEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListQueryEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListQueryFrequency(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListQueryFrequency(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListQueryLowerLimit(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListQueryLowerLimit(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListQueryRelativeLimitCarrier(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListQueryRelativeLimitCarrier(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListQueryRelativeLimitPSD(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListQueryRelativeLimitPSD(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListQuerySidebandSelection(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListQuerySidebandSelection(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListQueryTest(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListQueryTest(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListQueryUpperLimit(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListQueryUpperLimit(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListBandwidthConfigureReference(self, Vi, BandwidthBufferSize):
        Bandwidth = ARRAY_ViReal64(BandwidthBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthConfigureReference(
            ViSession(Vi), ViInt32(BandwidthBufferSize), Bandwidth
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Bandwidth)

    def SAACPOffsetListBandwidthConfigureResolution(self, Vi, BandwidthBufferSize):
        Bandwidth = ARRAY_ViReal64(BandwidthBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthConfigureResolution(
            ViSession(Vi), ViInt32(BandwidthBufferSize), Bandwidth
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Bandwidth)

    def SAACPOffsetListBandwidthConfigureResolutionAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthConfigureResolutionAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SAACPOffsetListBandwidthConfigureVideo(self, Vi, BandwidthBufferSize):
        Bandwidth = ARRAY_ViReal64(BandwidthBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthConfigureVideo(
            ViSession(Vi), ViInt32(BandwidthBufferSize), Bandwidth
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Bandwidth)

    def SAACPOffsetListBandwidthConfigureVideoAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthConfigureVideoAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SAACPOffsetListBandwidthQueryReference(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthQueryReference(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListBandwidthQueryResolution(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthQueryResolution(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListBandwidthQueryResolutionAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthQueryResolutionAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListBandwidthQueryVideo(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthQueryVideo(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListBandwidthQueryVideoAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthQueryVideoAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListBandwidthConfigureShape(self, Vi, ShapeBufferSize):
        Shape = ARRAY_ViInt32(ShapeBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthConfigureShape(ViSession(Vi), ViInt32(ShapeBufferSize), Shape)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Shape

    def SAACPOffsetListBandwidthQueryShape(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthQueryShape(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListBandwidthConfigureType(self, Vi, TypeBufferSize):
        Type = ARRAY_ViInt32(TypeBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthConfigureType(ViSession(Vi), ViInt32(TypeBufferSize), Type)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Type

    def SAACPOffsetListBandwidthQueryType(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListBandwidthQueryType(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListFilterConfigureAlpha(self, Vi, AlphaValueBufferSize):
        AlphaValue = ARRAY_ViReal64(AlphaValueBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListFilterConfigureAlpha(
            ViSession(Vi), ViInt32(AlphaValueBufferSize), AlphaValue
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(AlphaValue)

    def SAACPOffsetListFilterQueryAlpha(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListFilterQueryAlpha(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAACPOffsetListFilterConfigureEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SAACPOffsetListFilterConfigureEnabled(ViSession(Vi), ViInt32(StateBufferSize), State)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SAACPOffsetListFilterQueryEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAACPOffsetListFilterQueryEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SABurstPowerConfigure(self, Vi):
        status = self.dll.AgXSAn_SABurstPowerConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SABurstPowerConfigureNoPreset(self, Vi):
        status = self.dll.AgXSAn_SABurstPowerConfigureNoPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SABurstPowerTraceFetch(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SABurstPowerTraceFetch(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SABurstPowerTraceRead(self, Vi, RepCapIdentifier, MaxTime, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SABurstPowerTraceRead(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SABurstPowerTraceReadSignal(self, Vi, RepCapIdentifier, MaxTime, Frequency, Amplitude, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SABurstPowerTraceReadSignal(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SABurstPowerTracesAbort(self, Vi):
        status = self.dll.AgXSAn_SABurstPowerTracesAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SABurstPowerTracesInitiate(self, Vi):
        status = self.dll.AgXSAn_SABurstPowerTracesInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SABurstPowerTracesInitiateSignal(self, Vi, Frequency, Amplitude):
        status = self.dll.AgXSAn_SABurstPowerTracesInitiateSignal(
            ViSession(Vi), ViReal64(Frequency), ViReal64(Amplitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SABurstPowerMarkerDisableAll(self, Vi):
        status = self.dll.AgXSAn_SABurstPowerMarkerDisableAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SABurstPowerMarkerConfigureEnabled(self, Vi, Enabled, Trace):
        status = self.dll.AgXSAn_SABurstPowerMarkerConfigureEnabled(ViSession(Vi), ViBoolean(Enabled), ViInt32(Trace))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SABurstPowerMarkerQuery(self, Vi):
        pPosition = ViReal64()
        pAmplitude = ViReal64()
        status = self.dll.AgXSAn_SABurstPowerMarkerQuery(ViSession(Vi), byref(pPosition), byref(pAmplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pPosition = float(pPosition.value)
        pAmplitude = float(pAmplitude.value)
        return pPosition, pAmplitude

    def SABurstPowerMarkerSearch(self, Vi, SearchType):
        status = self.dll.AgXSAn_SABurstPowerMarkerSearch(ViSession(Vi), ViInt32(SearchType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAChannelPowerConfigure(self, Vi):
        status = self.dll.AgXSAn_SAChannelPowerConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAChannelPowerConfigureNoPreset(self, Vi):
        status = self.dll.AgXSAn_SAChannelPowerConfigureNoPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAChannelPowerTraceFetch(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAChannelPowerTraceFetch(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAChannelPowerTraceRead(self, Vi, RepCapIdentifier, MaxTime, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAChannelPowerTraceRead(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAChannelPowerTraceReadSignal(self, Vi, RepCapIdentifier, MaxTime, Frequency, Amplitude, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAChannelPowerTraceReadSignal(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAChannelPowerTracesAbort(self, Vi):
        status = self.dll.AgXSAn_SAChannelPowerTracesAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAChannelPowerTracesInitiate(self, Vi):
        status = self.dll.AgXSAn_SAChannelPowerTracesInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAChannelPowerTracesInitiateSignal(self, Vi, Frequency, Amplitude):
        status = self.dll.AgXSAn_SAChannelPowerTracesInitiateSignal(
            ViSession(Vi), ViReal64(Frequency), ViReal64(Amplitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAChannelPowerFrequencyFullSpan(self, Vi):
        status = self.dll.AgXSAn_SAChannelPowerFrequencyFullSpan(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAChannelPowerFrequencyLastSpan(self, Vi):
        status = self.dll.AgXSAn_SAChannelPowerFrequencyLastSpan(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAChannelPowerMarkerDisableAll(self, Vi):
        status = self.dll.AgXSAn_SAChannelPowerMarkerDisableAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAChannelPowerMarkerQuery(self, Vi):
        pPosition = ViReal64()
        pAmplitude = ViReal64()
        status = self.dll.AgXSAn_SAChannelPowerMarkerQuery(ViSession(Vi), byref(pPosition), byref(pAmplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pPosition = float(pPosition.value)
        pAmplitude = float(pAmplitude.value)
        return pPosition, pAmplitude

    def SAChannelPowerMarkerSearch(self, Vi, SearchType):
        status = self.dll.AgXSAn_SAChannelPowerMarkerSearch(ViSession(Vi), ViInt32(SearchType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAOccupiedBandwidthConfigure(self, Vi):
        status = self.dll.AgXSAn_SAOccupiedBandwidthConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAOccupiedBandwidthConfigureNoPreset(self, Vi):
        status = self.dll.AgXSAn_SAOccupiedBandwidthConfigureNoPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAOccupiedBandwidthTraceFetch(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAOccupiedBandwidthTraceFetch(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAOccupiedBandwidthTraceRead(self, Vi, RepCapIdentifier, MaxTime, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAOccupiedBandwidthTraceRead(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAOccupiedBandwidthTraceReadSignal(self, Vi, RepCapIdentifier, MaxTime, Frequency, Amplitude, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAOccupiedBandwidthTraceReadSignal(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAOccupiedBandwidthTracesAbort(self, Vi):
        status = self.dll.AgXSAn_SAOccupiedBandwidthTracesAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAOccupiedBandwidthTracesInitiate(self, Vi):
        status = self.dll.AgXSAn_SAOccupiedBandwidthTracesInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAOccupiedBandwidthTracesInitiateSignal(self, Vi, Frequency, Amplitude):
        status = self.dll.AgXSAn_SAOccupiedBandwidthTracesInitiateSignal(
            ViSession(Vi), ViReal64(Frequency), ViReal64(Amplitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAOccupiedBandwidthFrequencyFullSpan(self, Vi):
        status = self.dll.AgXSAn_SAOccupiedBandwidthFrequencyFullSpan(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAOccupiedBandwidthFrequencyLastSpan(self, Vi):
        status = self.dll.AgXSAn_SAOccupiedBandwidthFrequencyLastSpan(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAOccupiedBandwidthMarkerDisableAll(self, Vi):
        status = self.dll.AgXSAn_SAOccupiedBandwidthMarkerDisableAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAOccupiedBandwidthMarkerQuery(self, Vi):
        pPosition = ViReal64()
        pAmplitude = ViReal64()
        status = self.dll.AgXSAn_SAOccupiedBandwidthMarkerQuery(ViSession(Vi), byref(pPosition), byref(pAmplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pPosition = float(pPosition.value)
        pAmplitude = float(pAmplitude.value)
        return pPosition, pAmplitude

    def SAOccupiedBandwidthMarkerSearch(self, Vi, SearchType):
        status = self.dll.AgXSAn_SAOccupiedBandwidthMarkerSearch(ViSession(Vi), ViInt32(SearchType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAPowerStatisticsConfigure(self, Vi):
        status = self.dll.AgXSAn_SAPowerStatisticsConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAPowerStatisticsConfigureNoPreset(self, Vi):
        status = self.dll.AgXSAn_SAPowerStatisticsConfigureNoPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAPowerStatisticsTraceFetch(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAPowerStatisticsTraceFetch(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAPowerStatisticsTraceRead(self, Vi, RepCapIdentifier, MaxTime, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAPowerStatisticsTraceRead(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAPowerStatisticsTraceReadSignal(self, Vi, RepCapIdentifier, MaxTime, Frequency, Amplitude, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAPowerStatisticsTraceReadSignal(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAPowerStatisticsTracesAbort(self, Vi):
        status = self.dll.AgXSAn_SAPowerStatisticsTracesAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAPowerStatisticsTracesInitiate(self, Vi):
        status = self.dll.AgXSAn_SAPowerStatisticsTracesInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAPowerStatisticsTracesInitiateSignal(self, Vi, Frequency, Amplitude):
        status = self.dll.AgXSAn_SAPowerStatisticsTracesInitiateSignal(
            ViSession(Vi), ViReal64(Frequency), ViReal64(Amplitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAPowerStatisticsTracesStoreAsReference(self, Vi):
        status = self.dll.AgXSAn_SAPowerStatisticsTracesStoreAsReference(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAPowerStatisticsDisplayStoreReferenceTrace(self, Vi):
        status = self.dll.AgXSAn_SAPowerStatisticsDisplayStoreReferenceTrace(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAPowerStatisticsMarkerConfigureEnabled(self, Vi, Enabled, Trace):
        status = self.dll.AgXSAn_SAPowerStatisticsMarkerConfigureEnabled(
            ViSession(Vi), ViBoolean(Enabled), ViInt32(Trace)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAPowerStatisticsMarkerDisableAll(self, Vi):
        status = self.dll.AgXSAn_SAPowerStatisticsMarkerDisableAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAPowerStatisticsMarkerQuery(self, Vi):
        pPosition = ViReal64()
        pAmplitude = ViReal64()
        status = self.dll.AgXSAn_SAPowerStatisticsMarkerQuery(ViSession(Vi), byref(pPosition), byref(pAmplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pPosition = float(pPosition.value)
        pAmplitude = float(pAmplitude.value)
        return pPosition, pAmplitude

    def SASEMaskConfigure(self, Vi):
        status = self.dll.AgXSAn_SASEMaskConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASEMaskConfigureNoPreset(self, Vi):
        status = self.dll.AgXSAn_SASEMaskConfigureNoPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASEMaskTraceFetch(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskTraceFetch(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskTraceRead(self, Vi, RepCapIdentifier, MaxTime, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskTraceRead(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskTraceReadSignal(self, Vi, SASEMaskTrace, MaxTime, Frequency, Amplitude, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskTraceReadSignal(
            ViSession(Vi),
            ViConstString(SASEMaskTrace),
            ViInt32(MaxTime),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskTracesAbort(self, Vi):
        status = self.dll.AgXSAn_SASEMaskTracesAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASEMaskTracesInitiate(self, Vi):
        status = self.dll.AgXSAn_SASEMaskTracesInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASEMaskTracesInitiateSignal(self, Vi, Frequency, Amplitude):
        status = self.dll.AgXSAn_SASEMaskTracesInitiateSignal(ViSession(Vi), ViReal64(Frequency), ViReal64(Amplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASEMaskMarkerDisableAll(self, Vi):
        status = self.dll.AgXSAn_SASEMaskMarkerDisableAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASEMaskMarkerQuery(self, Vi):
        pPosition = ViReal64()
        pAmplitude = ViReal64()
        status = self.dll.AgXSAn_SASEMaskMarkerQuery(ViSession(Vi), byref(pPosition), byref(pAmplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pPosition = float(pPosition.value)
        pAmplitude = float(pAmplitude.value)
        return pPosition, pAmplitude

    def SASEMaskOffsetListConfigureEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListConfigureEnabled(ViSession(Vi), ViInt32(StateBufferSize), State)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASEMaskOffsetListQueryEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListQueryEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListConfigureSidebandSelection(self, Vi, SidebandBufferSize):
        Sideband = ARRAY_ViInt32(SidebandBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListConfigureSidebandSelection(
            ViSession(Vi), ViInt32(SidebandBufferSize), Sideband
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Sideband

    def SASEMaskOffsetListQuerySidebandSelection(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListQuerySidebandSelection(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListConfigureRelativeAttenuation(self, Vi, AttenuationValueBufferSize):
        AttenuationValue = ARRAY_ViReal64(AttenuationValueBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListConfigureRelativeAttenuation(
            ViSession(Vi), ViInt32(AttenuationValueBufferSize), AttenuationValue
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(AttenuationValue)

    def SASEMaskOffsetListQueryRelativeAttenuation(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListQueryRelativeAttenuation(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListConfigureSweepTime(self, Vi, SweepTimeBufferSize):
        SweepTime = ARRAY_ViReal64(SweepTimeBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListConfigureSweepTime(
            ViSession(Vi), ViInt32(SweepTimeBufferSize), SweepTime
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(SweepTime)

    def SASEMaskOffsetListQuerySweepTime(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListQuerySweepTime(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListConfigureSweepTimeAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListConfigureSweepTimeAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASEMaskOffsetListQuerySweepTimeAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListQuerySweepTimeAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListConfigureTest(self, Vi, TypeBufferSize):
        Type = ARRAY_ViInt32(TypeBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListConfigureTest(ViSession(Vi), ViInt32(TypeBufferSize), Type)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Type

    def SASEMaskOffsetListQueryTest(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListQueryTest(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListBandwidthConfigureMeasurementMultiplier(self, Vi, MultiplierValueBufferSize):
        MultiplierValue = ARRAY_ViInt32(MultiplierValueBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthConfigureMeasurementMultiplier(
            ViSession(Vi), ViInt32(MultiplierValueBufferSize), MultiplierValue
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return MultiplierValue

    def SASEMaskOffsetListBandwidthQueryMeasurementMultiplier(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthQueryMeasurementMultiplier(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListBandwidthConfigureResolution(self, Vi, BandwidthBufferSize):
        Bandwidth = ARRAY_ViReal64(BandwidthBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthConfigureResolution(
            ViSession(Vi), ViInt32(BandwidthBufferSize), Bandwidth
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Bandwidth)

    def SASEMaskOffsetListBandwidthQueryResolution(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthQueryResolution(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListBandwidthConfigureResolutionAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthConfigureResolutionAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASEMaskOffsetListBandwidthConfigureVideo(self, Vi, BandwidthBufferSize):
        Bandwidth = ARRAY_ViReal64(BandwidthBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthConfigureVideo(
            ViSession(Vi), ViInt32(BandwidthBufferSize), Bandwidth
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Bandwidth)

    def SASEMaskOffsetListBandwidthConfigureVideoAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthConfigureVideoAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASEMaskOffsetListBandwidthQueryResolutionAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthQueryResolutionAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListBandwidthQueryVideo(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthQueryVideo(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListBandwidthQueryVideoAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthQueryVideoAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListBandwidthConfigureRatio(self, Vi, RatioValueBufferSize):
        RatioValue = ARRAY_ViReal64(RatioValueBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthConfigureRatio(
            ViSession(Vi), ViInt32(RatioValueBufferSize), RatioValue
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(RatioValue)

    def SASEMaskOffsetListBandwidthQueryRatio(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthQueryRatio(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListBandwidthConfigureRatioAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthConfigureRatioAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASEMaskOffsetListBandwidthQueryRatioAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListBandwidthQueryRatioAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListStartConfigureAbsoluteAmplitudeLimit(self, Vi, LimitBufferSize):
        Limit = ARRAY_ViReal64(LimitBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListStartConfigureAbsoluteAmplitudeLimit(
            ViSession(Vi), ViInt32(LimitBufferSize), Limit
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Limit)

    def SASEMaskOffsetListStartConfigureRelativeAmplitudeLimit(self, Vi, LimitBufferSize):
        Limit = ARRAY_ViReal64(LimitBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListStartConfigureRelativeAmplitudeLimit(
            ViSession(Vi), ViInt32(LimitBufferSize), Limit
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Limit)

    def SASEMaskOffsetListStartQueryAbsoluteAmplitudeLimit(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListStartQueryAbsoluteAmplitudeLimit(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListStartQueryRelativeAmplitudeLimit(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListStartQueryRelativeAmplitudeLimit(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListStartConfigureFrequency(self, Vi, FrequencyBufferSize):
        Frequency = ARRAY_ViReal64(FrequencyBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListStartConfigureFrequency(
            ViSession(Vi), ViInt32(FrequencyBufferSize), Frequency
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Frequency)

    def SASEMaskOffsetListStartQueryFrequency(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListStartQueryFrequency(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListStopConfigureAbsoluteAmplitudeLimit(self, Vi, LimitBufferSize):
        Limit = ARRAY_ViReal64(LimitBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListStopConfigureAbsoluteAmplitudeLimit(
            ViSession(Vi), ViInt32(LimitBufferSize), Limit
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Limit)

    def SASEMaskOffsetListStopConfigureFrequency(self, Vi, FrequencyBufferSize):
        Frequency = ARRAY_ViReal64(FrequencyBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListStopConfigureFrequency(
            ViSession(Vi), ViInt32(FrequencyBufferSize), Frequency
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Frequency)

    def SASEMaskOffsetListStopConfigureRelativeAmplitudeLimit(self, Vi, LimitBufferSize):
        Limit = ARRAY_ViReal64(LimitBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListStopConfigureRelativeAmplitudeLimit(
            ViSession(Vi), ViInt32(LimitBufferSize), Limit
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Limit)

    def SASEMaskOffsetListStopQueryAbsoluteAmplitudeLimit(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListStopQueryAbsoluteAmplitudeLimit(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListStopQueryFrequency(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListStopQueryFrequency(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListStopQueryRelativeAmplitudeLimit(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListStopQueryRelativeAmplitudeLimit(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListStopConfigureRelativeAmplitudeLimitAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListStopConfigureRelativeAmplitudeLimitAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASEMaskOffsetListStopQueryRelativeAmplitudeLimitAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListStopQueryRelativeAmplitudeLimitAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASEMaskOffsetListStopConfigureAbsoluteAmplitudeLimitCoupleEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASEMaskOffsetListStopConfigureAbsoluteAmplitudeLimitCoupleEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASEMaskOffsetListStopQueryAbsoluteAmplitudeLimitCoupleEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASEMaskOffsetListStopQueryAbsoluteAmplitudeLimitCoupleEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsConfigure(self, Vi):
        status = self.dll.AgXSAn_SASpuriousEmissionsConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASpuriousEmissionsConfigureIFGainState(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsConfigureIFGainState(ViSession(Vi), ViInt32(StateBufferSize), State)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASpuriousEmissionsQueryIFGainState(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsQueryIFGainState(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsConfigureIFGainAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsConfigureIFGainAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASpuriousEmissionsQueryIFGainAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsQueryIFGainAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsConfigureNoPreset(self, Vi):
        status = self.dll.AgXSAn_SASpuriousEmissionsConfigureNoPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASpuriousEmissionsTraceFetch(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsTraceFetch(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsTraceRead(self, Vi, RepCapIdentifier, MaxTime, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsTraceRead(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsTraceReadSignal(
        self,
        Vi,
        SASpuriousEmissionsTrace,
        MaxTime,
        Frequency,
        Amplitude,
        RetValBufferSize,
    ):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsTraceReadSignal(
            ViSession(Vi),
            ViConstString(SASpuriousEmissionsTrace),
            ViInt32(MaxTime),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsTracesAbort(self, Vi):
        status = self.dll.AgXSAn_SASpuriousEmissionsTracesAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASpuriousEmissionsTracesInitiate(self, Vi):
        status = self.dll.AgXSAn_SASpuriousEmissionsTracesInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASpuriousEmissionsTracesInitiateSignal(self, Vi, Frequency, Amplitude):
        status = self.dll.AgXSAn_SASpuriousEmissionsTracesInitiateSignal(
            ViSession(Vi), ViReal64(Frequency), ViReal64(Amplitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASpuriousEmissionsMarkerConfigureEnabled(self, Vi, Enabled, Trace):
        status = self.dll.AgXSAn_SASpuriousEmissionsMarkerConfigureEnabled(
            ViSession(Vi), ViBoolean(Enabled), ViInt32(Trace)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASpuriousEmissionsMarkerDisableAll(self, Vi):
        status = self.dll.AgXSAn_SASpuriousEmissionsMarkerDisableAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASpuriousEmissionsMarkerQuery(self, Vi):
        pPosition = ViReal64()
        pAmplitude = ViReal64()
        status = self.dll.AgXSAn_SASpuriousEmissionsMarkerQuery(ViSession(Vi), byref(pPosition), byref(pAmplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pPosition = float(pPosition.value)
        pAmplitude = float(pAmplitude.value)
        return pPosition, pAmplitude

    def SASpuriousEmissionsMarkerSearch(self, Vi, SearchType):
        status = self.dll.AgXSAn_SASpuriousEmissionsMarkerSearch(ViSession(Vi), ViInt32(SearchType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASpuriousEmissionsRangeTableConfigureAttenuation(self, Vi, AttenuationValueBufferSize):
        AttenuationValue = ARRAY_ViReal64(AttenuationValueBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableConfigureAttenuation(
            ViSession(Vi), ViInt32(AttenuationValueBufferSize), AttenuationValue
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(AttenuationValue)

    def SASpuriousEmissionsRangeTableQueryAttenuation(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableQueryAttenuation(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableConfigurePeakExcursion(self, Vi, RelativeAmplitudeBufferSize):
        RelativeAmplitude = ARRAY_ViReal64(RelativeAmplitudeBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableConfigurePeakExcursion(
            ViSession(Vi), ViInt32(RelativeAmplitudeBufferSize), RelativeAmplitude
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(RelativeAmplitude)

    def SASpuriousEmissionsRangeTableQueryPeakExcursion(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableQueryPeakExcursion(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableConfigurePeakThreshold(self, Vi, ThresholdBufferSize):
        Threshold = ARRAY_ViReal64(ThresholdBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableConfigurePeakThreshold(
            ViSession(Vi), ViInt32(ThresholdBufferSize), Threshold
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Threshold)

    def SASpuriousEmissionsRangeTableQueryPeakThreshold(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableQueryPeakThreshold(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableConfigureSweepTime(self, Vi, SweepTimeBufferSize):
        SweepTime = ARRAY_ViReal64(SweepTimeBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableConfigureSweepTime(
            ViSession(Vi), ViInt32(SweepTimeBufferSize), SweepTime
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(SweepTime)

    def SASpuriousEmissionsRangeTableConfigureSweepTimeAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableConfigureSweepTimeAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASpuriousEmissionsRangeTableQuerySweepTime(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableQuerySweepTime(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableQuerySweepTimeAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableQuerySweepTimeAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableConfigureSweepPoints(self, Vi, SweepPointsBufferSize):
        SweepPoints = ARRAY_ViInt32(SweepPointsBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableConfigureSweepPoints(
            ViSession(Vi), ViInt32(SweepPointsBufferSize), SweepPoints
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return SweepPoints

    def SASpuriousEmissionsRangeTableQuerySweepPoints(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableQuerySweepPoints(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableConfigureSweepPointsAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableConfigureSweepPointsAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASpuriousEmissionsRangeTableQuerySweepPointsAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableQuerySweepPointsAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableConfigureEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableConfigureEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASpuriousEmissionsRangeTableQueryEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableQueryEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableConfigureSweepTimeAutoRules(self, Vi, AutoRulesBufferSize):
        AutoRules = ARRAY_ViInt32(AutoRulesBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableConfigureSweepTimeAutoRules(
            ViSession(Vi), ViInt32(AutoRulesBufferSize), AutoRules
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return AutoRules

    def SASpuriousEmissionsRangeTableQuerySweepTimeAutoRules(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableQuerySweepTimeAutoRules(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableConfigureAttenuationAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableConfigureAttenuationAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASpuriousEmissionsRangeTableQueryAttenuationAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableQueryAttenuationAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableConfigureDetector1(self, Vi, DetectorBufferSize):
        Detector = ARRAY_ViInt32(DetectorBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableConfigureDetector1(
            ViSession(Vi), ViInt32(DetectorBufferSize), Detector
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Detector

    def SASpuriousEmissionsRangeTableQueryDetector1(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableQueryDetector1(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableConfigureDetector2(self, Vi, DetectorBufferSize):
        Detector = ARRAY_ViInt32(DetectorBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableConfigureDetector2(
            ViSession(Vi), ViInt32(DetectorBufferSize), Detector
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Detector

    def SASpuriousEmissionsRangeTableQueryDetector2(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableQueryDetector2(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableStartConfigureAbsoluteAmplitudeLimit(self, Vi, LimitBufferSize):
        Limit = ARRAY_ViReal64(LimitBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableStartConfigureAbsoluteAmplitudeLimit(
            ViSession(Vi), ViInt32(LimitBufferSize), Limit
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Limit)

    def SASpuriousEmissionsRangeTableStartConfigureFrequency(self, Vi, FrequencyBufferSize):
        Frequency = ARRAY_ViReal64(FrequencyBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableStartConfigureFrequency(
            ViSession(Vi), ViInt32(FrequencyBufferSize), Frequency
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Frequency)

    def SASpuriousEmissionsRangeTableStartQueryAbsoluteAmplitudeLimit(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableStartQueryAbsoluteAmplitudeLimit(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableStartQueryFrequency(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableStartQueryFrequency(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableStopConfigureAbsoluteAmplitudeLimit(self, Vi, LimitBufferSize):
        Limit = ARRAY_ViReal64(LimitBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableStopConfigureAbsoluteAmplitudeLimit(
            ViSession(Vi), ViInt32(LimitBufferSize), Limit
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Limit)

    def SASpuriousEmissionsRangeTableStopConfigureFrequency(self, Vi, FrequencyBufferSize):
        Frequency = ARRAY_ViReal64(FrequencyBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableStopConfigureFrequency(
            ViSession(Vi), ViInt32(FrequencyBufferSize), Frequency
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Frequency)

    def SASpuriousEmissionsRangeTableStopQueryAbsoluteAmplitudeLimit(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableStopQueryAbsoluteAmplitudeLimit(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableStopQueryFrequency(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableStopQueryFrequency(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableStopConfigureAbsoluteAmplitudeLimitAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableStopConfigureAbsoluteAmplitudeLimitAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASpuriousEmissionsRangeTableStopQueryAbsoluteAmplitudeLimitAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableStopQueryAbsoluteAmplitudeLimitAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableBandwidthConfigureResolution(self, Vi, BandwidthBufferSize):
        Bandwidth = ARRAY_ViReal64(BandwidthBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableBandwidthConfigureResolution(
            ViSession(Vi), ViInt32(BandwidthBufferSize), Bandwidth
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Bandwidth)

    def SASpuriousEmissionsRangeTableBandwidthConfigureResolutionAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableBandwidthConfigureResolutionAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASpuriousEmissionsRangeTableBandwidthConfigureShape(self, Vi, ShapeBufferSize):
        Shape = ARRAY_ViInt32(ShapeBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableBandwidthConfigureShape(
            ViSession(Vi), ViInt32(ShapeBufferSize), Shape
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Shape

    def SASpuriousEmissionsRangeTableBandwidthConfigureVideo(self, Vi, BandwidthBufferSize):
        Bandwidth = ARRAY_ViReal64(BandwidthBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableBandwidthConfigureVideo(
            ViSession(Vi), ViInt32(BandwidthBufferSize), Bandwidth
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Bandwidth)

    def SASpuriousEmissionsRangeTableBandwidthConfigureVideoAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableBandwidthConfigureVideoAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SASpuriousEmissionsRangeTableBandwidthQueryResolution(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableBandwidthQueryResolution(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableBandwidthQueryResolutionAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableBandwidthQueryResolutionAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableBandwidthQueryShape(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableBandwidthQueryShape(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableBandwidthQueryVideo(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableBandwidthQueryVideo(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SASpuriousEmissionsRangeTableBandwidthQueryVideoAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASpuriousEmissionsRangeTableBandwidthQueryVideoAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionConfigure(self, Vi):
        status = self.dll.AgXSAn_SAHarmonicDistortionConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionConfigureNoPreset(self, Vi):
        status = self.dll.AgXSAn_SAHarmonicDistortionConfigureNoPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionTraceFetch(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAHarmonicDistortionTraceFetch(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionTraceRead(self, Vi, RepCapIdentifier, MaxTime, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAHarmonicDistortionTraceRead(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionTraceReadSignal(
        self, Vi, RepCapIdentifier, MaxTime, Frequency, Amplitude, RetValBufferSize
    ):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAHarmonicDistortionTraceReadSignal(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionTracesAbort(self, Vi):
        status = self.dll.AgXSAn_SAHarmonicDistortionTracesAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionTracesInitiate(self, Vi):
        status = self.dll.AgXSAn_SAHarmonicDistortionTracesInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionTracesInitiateSignal(self, Vi, Frequency, Amplitude):
        status = self.dll.AgXSAn_SAHarmonicDistortionTracesInitiateSignal(
            ViSession(Vi), ViReal64(Frequency), ViReal64(Amplitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionRangeTableAutoFill(self, Vi):
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableAutoFill(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionRangeTableConfigureSweepTime(self, Vi, SweepTimeBufferSize):
        SweepTime = ARRAY_ViReal64(SweepTimeBufferSize)
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableConfigureSweepTime(
            ViSession(Vi), ViInt32(SweepTimeBufferSize), SweepTime
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(SweepTime)

    def SAHarmonicDistortionRangeTableConfigureSweepTimeAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableConfigureSweepTimeAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SAHarmonicDistortionRangeTableQuerySweepTime(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableQuerySweepTime(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionRangeTableQuerySweepTimeAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableQuerySweepTimeAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionRangeTableConfigureFrequency(self, Vi, FrequencyBufferSize):
        Frequency = ARRAY_ViReal64(FrequencyBufferSize)
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableConfigureFrequency(
            ViSession(Vi), ViInt32(FrequencyBufferSize), Frequency
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Frequency)

    def SAHarmonicDistortionRangeTableQueryFrequency(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableQueryFrequency(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionRangeTableConfigureToneEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableConfigureToneEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SAHarmonicDistortionRangeTableQueryToneEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableQueryToneEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionRangeTableConfigureSpan(self, Vi, SpanBufferSize):
        Span = ARRAY_ViReal64(SpanBufferSize)
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableConfigureSpan(
            ViSession(Vi), ViInt32(SpanBufferSize), Span
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Span)

    def SAHarmonicDistortionRangeTableQuerySpan(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableQuerySpan(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionRangeTableBandwidthConfigureResolution(self, Vi, BandwidthBufferSize):
        Bandwidth = ARRAY_ViReal64(BandwidthBufferSize)
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableBandwidthConfigureResolution(
            ViSession(Vi), ViInt32(BandwidthBufferSize), Bandwidth
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Bandwidth)

    def SAHarmonicDistortionRangeTableBandwidthConfigureResolutionAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableBandwidthConfigureResolutionAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SAHarmonicDistortionRangeTableBandwidthConfigureVideo(self, Vi, BandwidthBufferSize):
        Bandwidth = ARRAY_ViReal64(BandwidthBufferSize)
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableBandwidthConfigureVideo(
            ViSession(Vi), ViInt32(BandwidthBufferSize), Bandwidth
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Bandwidth)

    def SAHarmonicDistortionRangeTableBandwidthConfigureVideoAutoEnabled(self, Vi, StateBufferSize):
        State = ARRAY_ViBoolean(StateBufferSize)
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableBandwidthConfigureVideoAutoEnabled(
            ViSession(Vi), ViInt32(StateBufferSize), State
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(State)

    def SAHarmonicDistortionRangeTableBandwidthQueryResolution(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableBandwidthQueryResolution(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionRangeTableBandwidthQueryResolutionAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableBandwidthQueryResolutionAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionRangeTableBandwidthQueryVideo(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableBandwidthQueryVideo(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionRangeTableBandwidthQueryVideoAutoEnabled(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViBoolean(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAHarmonicDistortionRangeTableBandwidthQueryVideoAutoEnabled(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAHarmonicDistortionToneConfigureEnabled(self, Vi, HarmonicNumber, State):
        status = self.dll.AgXSAn_SAHarmonicDistortionToneConfigureEnabled(
            ViSession(Vi), ViInt32(HarmonicNumber), ViBoolean(State)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionToneQueryEnabled(self, Vi, HarmonicNumber):
        RetVal = ViBoolean()
        status = self.dll.AgXSAn_SAHarmonicDistortionToneQueryEnabled(
            ViSession(Vi), ViInt32(HarmonicNumber), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def SAHarmonicDistortionToneConfigureSweepTime(self, Vi, HarmonicNumber, SweepTime):
        status = self.dll.AgXSAn_SAHarmonicDistortionToneConfigureSweepTime(
            ViSession(Vi), ViInt32(HarmonicNumber), ViReal64(SweepTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionToneQuerySweepTime(self, Vi, HarmonicNumber):
        RetVal = ViReal64()
        status = self.dll.AgXSAn_SAHarmonicDistortionToneQuerySweepTime(
            ViSession(Vi), ViInt32(HarmonicNumber), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def SAHarmonicDistortionToneConfigureSweepTimeAutoEnabled(self, Vi, HarmonicNumber, State):
        status = self.dll.AgXSAn_SAHarmonicDistortionToneConfigureSweepTimeAutoEnabled(
            ViSession(Vi), ViInt32(HarmonicNumber), ViBoolean(State)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionToneQuerySweepTimeAutoEnabled(self, Vi, HarmonicNumber):
        RetVal = ViBoolean()
        status = self.dll.AgXSAn_SAHarmonicDistortionToneQuerySweepTimeAutoEnabled(
            ViSession(Vi), ViInt32(HarmonicNumber), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def SAHarmonicDistortionToneConfigureSpan(self, Vi, HarmonicNumber, Span):
        status = self.dll.AgXSAn_SAHarmonicDistortionToneConfigureSpan(
            ViSession(Vi), ViInt32(HarmonicNumber), ViReal64(Span)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionToneQuerySpan(self, Vi, HarmonicNumber):
        RetVal = ViReal64()
        status = self.dll.AgXSAn_SAHarmonicDistortionToneQuerySpan(
            ViSession(Vi), ViInt32(HarmonicNumber), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def SAHarmonicDistortionToneConfigureFrequency(self, Vi, HarmonicNumber, Frequency):
        status = self.dll.AgXSAn_SAHarmonicDistortionToneConfigureFrequency(
            ViSession(Vi), ViInt32(HarmonicNumber), ViReal64(Frequency)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionToneQueryFrequency(self, Vi, HarmonicNumber):
        RetVal = ViReal64()
        status = self.dll.AgXSAn_SAHarmonicDistortionToneQueryFrequency(
            ViSession(Vi), ViInt32(HarmonicNumber), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def SAHarmonicDistortionToneBandwidthConfigureResolutionAutoEnabled(self, Vi, HarmonicNumber, State):
        status = self.dll.AgXSAn_SAHarmonicDistortionToneBandwidthConfigureResolutionAutoEnabled(
            ViSession(Vi), ViInt32(HarmonicNumber), ViBoolean(State)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionToneBandwidthConfigureResolution(self, Vi, HarmonicNumber, Bandwidth):
        status = self.dll.AgXSAn_SAHarmonicDistortionToneBandwidthConfigureResolution(
            ViSession(Vi), ViInt32(HarmonicNumber), ViReal64(Bandwidth)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionToneBandwidthQueryResolutionAutoEnabled(self, Vi, HarmonicNumber):
        RetVal = ViBoolean()
        status = self.dll.AgXSAn_SAHarmonicDistortionToneBandwidthQueryResolutionAutoEnabled(
            ViSession(Vi), ViInt32(HarmonicNumber), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def SAHarmonicDistortionToneBandwidthQueryResolution(self, Vi, HarmonicNumber):
        RetVal = ViReal64()
        status = self.dll.AgXSAn_SAHarmonicDistortionToneBandwidthQueryResolution(
            ViSession(Vi), ViInt32(HarmonicNumber), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def SAHarmonicDistortionToneBandwidthConfigureVideoAutoEnabled(self, Vi, HarmonicNumber, State):
        status = self.dll.AgXSAn_SAHarmonicDistortionToneBandwidthConfigureVideoAutoEnabled(
            ViSession(Vi), ViInt32(HarmonicNumber), ViBoolean(State)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionToneBandwidthQueryVideoAutoEnabled(self, Vi, HarmonicNumber):
        RetVal = ViBoolean()
        status = self.dll.AgXSAn_SAHarmonicDistortionToneBandwidthQueryVideoAutoEnabled(
            ViSession(Vi), ViInt32(HarmonicNumber), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def SAHarmonicDistortionToneBandwidthConfigureVideo(self, Vi, HarmonicNumber, Bandwidth):
        status = self.dll.AgXSAn_SAHarmonicDistortionToneBandwidthConfigureVideo(
            ViSession(Vi), ViInt32(HarmonicNumber), ViReal64(Bandwidth)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAHarmonicDistortionToneBandwidthQueryVideo(self, Vi, HarmonicNumber):
        RetVal = ViReal64()
        status = self.dll.AgXSAn_SAHarmonicDistortionToneBandwidthQueryVideo(
            ViSession(Vi), ViInt32(HarmonicNumber), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def SAThirdOrderInterceptConfigure(self, Vi):
        status = self.dll.AgXSAn_SAThirdOrderInterceptConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAThirdOrderInterceptAutoTune(self, Vi):
        status = self.dll.AgXSAn_SAThirdOrderInterceptAutoTune(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAThirdOrderInterceptConfigureNoPreset(self, Vi):
        status = self.dll.AgXSAn_SAThirdOrderInterceptConfigureNoPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAThirdOrderInterceptTraceFetch(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAThirdOrderInterceptTraceFetch(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAThirdOrderInterceptTraceRead(self, Vi, RepCapIdentifier, MaxTime, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAThirdOrderInterceptTraceRead(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAThirdOrderInterceptTraceReadSignal(
        self, Vi, RepCapIdentifier, MaxTime, Frequency, Amplitude, RetValBufferSize
    ):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAThirdOrderInterceptTraceReadSignal(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAThirdOrderInterceptTracesAbort(self, Vi):
        status = self.dll.AgXSAn_SAThirdOrderInterceptTracesAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAThirdOrderInterceptTracesInitiate(self, Vi):
        status = self.dll.AgXSAn_SAThirdOrderInterceptTracesInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAThirdOrderInterceptTracesInitiateSignal(self, Vi, Frequency, Amplitude):
        status = self.dll.AgXSAn_SAThirdOrderInterceptTracesInitiateSignal(
            ViSession(Vi), ViReal64(Frequency), ViReal64(Amplitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SALimitBuildFromExisting(self, Vi, RepCapIdentifier, SourceTraceNumber):
        status = self.dll.AgXSAn_SALimitBuildFromExisting(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(SourceTraceNumber)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SALimitConfigureData(self, Vi, RepCapIdentifier, DataArrayBufferSize):
        DataArray = ARRAY_ViReal64(DataArrayBufferSize)
        status = self.dll.AgXSAn_SALimitConfigureData(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(DataArrayBufferSize),
            DataArray,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(DataArray)

    def SALimitCopy(self, Vi, RepCapIdentifier, SourceLineNumber):
        status = self.dll.AgXSAn_SALimitCopy(ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(SourceLineNumber))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SALimitDelete(self, Vi, RepCapIdentifier):
        status = self.dll.AgXSAn_SALimitDelete(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SALimitMergeData(self, Vi, RepCapIdentifier, DataArrayBufferSize):
        DataArray = ARRAY_ViReal64(DataArrayBufferSize)
        status = self.dll.AgXSAn_SALimitMergeData(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(DataArrayBufferSize),
            DataArray,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(DataArray)

    def SALimitQueryData(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SALimitQueryData(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SALimitUpdateOffsets(self, Vi, RepCapIdentifier):
        status = self.dll.AgXSAn_SALimitUpdateOffsets(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SALimitsDeleteAll(self, Vi):
        status = self.dll.AgXSAn_SALimitsDeleteAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAListSweepAbort(self, Vi):
        status = self.dll.AgXSAn_SAListSweepAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAListSweepConfigure(self, Vi):
        status = self.dll.AgXSAn_SAListSweepConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAListSweepConfigureNoPreset(self, Vi):
        status = self.dll.AgXSAn_SAListSweepConfigureNoPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAListSweepFetch(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepFetch(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepInitiate(self, Vi):
        status = self.dll.AgXSAn_SAListSweepInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAListSweepMeasure(self, Vi, MaxTime, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepMeasure(
            ViSession(Vi),
            ViInt32(MaxTime),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepRead(self, Vi, MaxTime, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepRead(
            ViSession(Vi),
            ViInt32(MaxTime),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepConfigureParameters(
        self,
        Vi,
        PeakMeasurementEnabled,
        RMSMeasurementEnabled,
        AveragingMeasurementEnabled,
        TriggerSource,
        TriggerSlope,
        TriggerOffset,
        GateLength,
    ):
        status = self.dll.AgXSAn_SAListSweepConfigureParameters(
            ViSession(Vi),
            ViBoolean(PeakMeasurementEnabled),
            ViBoolean(RMSMeasurementEnabled),
            ViBoolean(AveragingMeasurementEnabled),
            ViInt32(TriggerSource),
            ViInt32(TriggerSlope),
            ViReal64(TriggerOffset),
            ViReal64(GateLength),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAListSweepBandwidthConfigureResolution(self, Vi, BandwidthBufferSize):
        Bandwidth = ARRAY_ViReal64(BandwidthBufferSize)
        status = self.dll.AgXSAn_SAListSweepBandwidthConfigureResolution(
            ViSession(Vi), ViInt32(BandwidthBufferSize), Bandwidth
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Bandwidth)

    def SAListSweepBandwidthConfigureVideo(self, Vi, BandwidthBufferSize):
        Bandwidth = ARRAY_ViReal64(BandwidthBufferSize)
        status = self.dll.AgXSAn_SAListSweepBandwidthConfigureVideo(
            ViSession(Vi), ViInt32(BandwidthBufferSize), Bandwidth
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Bandwidth)

    def SAListSweepBandwidthQueryResolution(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepBandwidthQueryResolution(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepBandwidthQueryVideo(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepBandwidthQueryVideo(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepBandwidthConfigureResolutionShape(self, Vi, ShapeBufferSize):
        Shape = ARRAY_ViInt32(ShapeBufferSize)
        status = self.dll.AgXSAn_SAListSweepBandwidthConfigureResolutionShape(
            ViSession(Vi), ViInt32(ShapeBufferSize), Shape
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Shape

    def SAListSweepBandwidthQueryResolutionShape(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepBandwidthQueryResolutionShape(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepFrequencyConfigure(self, Vi, FrequencyBufferSize):
        Frequency = ARRAY_ViReal64(FrequencyBufferSize)
        status = self.dll.AgXSAn_SAListSweepFrequencyConfigure(ViSession(Vi), ViInt32(FrequencyBufferSize), Frequency)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Frequency)

    def SAListSweepFrequencyQuery(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepFrequencyQuery(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepSequenceConfigure(self, Vi, SequenceBufferSize):
        Sequence = ARRAY_ViReal64(SequenceBufferSize)
        status = self.dll.AgXSAn_SAListSweepSequenceConfigure(ViSession(Vi), ViInt32(SequenceBufferSize), Sequence)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Sequence)

    def SAListSweepSequenceQuery(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepSequenceQuery(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepTriggerConfigureDelay(self, Vi, TimeBufferSize):
        Time = ARRAY_ViReal64(TimeBufferSize)
        status = self.dll.AgXSAn_SAListSweepTriggerConfigureDelay(ViSession(Vi), ViInt32(TimeBufferSize), Time)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Time)

    def SAListSweepTriggerConfigureHoldoff(self, Vi, TimeBufferSize):
        Time = ARRAY_ViReal64(TimeBufferSize)
        status = self.dll.AgXSAn_SAListSweepTriggerConfigureHoldoff(ViSession(Vi), ViInt32(TimeBufferSize), Time)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Time)

    def SAListSweepTriggerConfigureLevel(self, Vi, AmplitudeBufferSize):
        Amplitude = ARRAY_ViReal64(AmplitudeBufferSize)
        status = self.dll.AgXSAn_SAListSweepTriggerConfigureLevel(
            ViSession(Vi), ViInt32(AmplitudeBufferSize), Amplitude
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Amplitude)

    def SAListSweepTriggerQueryDelay(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepTriggerQueryDelay(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepTriggerQueryHoldoff(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepTriggerQueryHoldoff(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepTriggerQueryLevel(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepTriggerQueryLevel(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepTimeConfigure(self, Vi, TimeBufferSize):
        Time = ARRAY_ViReal64(TimeBufferSize)
        status = self.dll.AgXSAn_SAListSweepTimeConfigure(ViSession(Vi), ViInt32(TimeBufferSize), Time)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Time)

    def SAListSweepTimeQuery(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepTimeQuery(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepDetectorConfigure(self, Vi, DetectorTypeBufferSize):
        DetectorType = ARRAY_ViInt32(DetectorTypeBufferSize)
        status = self.dll.AgXSAn_SAListSweepDetectorConfigure(
            ViSession(Vi), ViInt32(DetectorTypeBufferSize), DetectorType
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return DetectorType

    def SAListSweepDetectorQuery(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepDetectorQuery(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepAttenuationConfigureElectronic(self, Vi, PowerBufferSize):
        Power = ARRAY_ViReal64(PowerBufferSize)
        status = self.dll.AgXSAn_SAListSweepAttenuationConfigureElectronic(
            ViSession(Vi), ViInt32(PowerBufferSize), Power
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Power)

    def SAListSweepAttenuationConfigureMechanical(self, Vi, PowerBufferSize):
        Power = ARRAY_ViReal64(PowerBufferSize)
        status = self.dll.AgXSAn_SAListSweepAttenuationConfigureMechanical(
            ViSession(Vi), ViInt32(PowerBufferSize), Power
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(Power)

    def SAListSweepAttenuationQueryElectronic(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepAttenuationQueryElectronic(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAListSweepAttenuationQueryMechanical(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAListSweepAttenuationQueryMechanical(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def SAMarkerConfigureEnabled(self, Vi, Enabled, Trace):
        status = self.dll.AgXSAn_SAMarkerConfigureEnabled(ViSession(Vi), ViBoolean(Enabled), ViInt32(Trace))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAMarkerConfigureSearch(self, Vi, PeakExcursion, MarkerThreshold):
        status = self.dll.AgXSAn_SAMarkerConfigureSearch(
            ViSession(Vi), ViReal64(PeakExcursion), ViReal64(MarkerThreshold)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAMarkerDisableAll(self, Vi):
        status = self.dll.AgXSAn_SAMarkerDisableAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAMarkerMakeDelta(self, Vi, DeltaMarker):
        status = self.dll.AgXSAn_SAMarkerMakeDelta(ViSession(Vi), ViBoolean(DeltaMarker))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAMarkerQuery(self, Vi):
        MarkerPosition = ViReal64()
        MarkerAmplitude = ViReal64()
        status = self.dll.AgXSAn_SAMarkerQuery(ViSession(Vi), byref(MarkerPosition), byref(MarkerAmplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MarkerPosition = float(MarkerPosition.value)
        MarkerAmplitude = float(MarkerAmplitude.value)
        return MarkerPosition, MarkerAmplitude

    def SAMarkerQueryReference(self, Vi):
        ReferencePosition = ViReal64()
        ReferenceAmplitude = ViReal64()
        status = self.dll.AgXSAn_SAMarkerQueryReference(
            ViSession(Vi), byref(ReferencePosition), byref(ReferenceAmplitude)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReferencePosition = float(ReferencePosition.value)
        ReferenceAmplitude = float(ReferenceAmplitude.value)
        return ReferencePosition, ReferenceAmplitude

    def SAMarkerSearch(self, Vi, SearchType):
        status = self.dll.AgXSAn_SAMarkerSearch(ViSession(Vi), ViInt32(SearchType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAMarkerSetInstrumentFromMarker(self, Vi, InstrumentSetting):
        status = self.dll.AgXSAn_SAMarkerSetInstrumentFromMarker(ViSession(Vi), ViInt32(InstrumentSetting))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAMarkerFrequencyCounterQueryCount(self, Vi):
        RetVal = ViReal64()
        status = self.dll.AgXSAn_SAMarkerFrequencyCounterQueryCount(ViSession(Vi), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def SAMarkerMeasureAtMarkerConfigureDetectorType(self, Vi, DetectorIdentifier, DetectorType):
        status = self.dll.AgXSAn_SAMarkerMeasureAtMarkerConfigureDetectorType(
            ViSession(Vi), ViInt32(DetectorIdentifier), ViInt32(DetectorType)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAMarkerMeasureAtMarkerQueryDetectorType(self, Vi, DetectorIdentifier):
        Val = ViInt32()
        status = self.dll.AgXSAn_SAMarkerMeasureAtMarkerQueryDetectorType(
            ViSession(Vi), ViInt32(DetectorIdentifier), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def SAMarkerMeasureAtMarkeConfigureDetectorDwellTime(self, Vi, DetectorIdentifier, DwellTime):
        status = self.dll.AgXSAn_SAMarkerMeasureAtMarkeConfigureDetectorDwellTime(
            ViSession(Vi), ViInt32(DetectorIdentifier), ViReal64(DwellTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SAMarkerMeasureAtMarkeQueryDetectorDwellTime(self, Vi, DetectorIdentifier):
        Val = ViReal64()
        status = self.dll.AgXSAn_SAMarkerMeasureAtMarkeQueryDetectorDwellTime(
            ViSession(Vi), ViInt32(DetectorIdentifier), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def SAMarkerMeasureAtMarkerRead(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgXSAn_SAMarkerMeasureAtMarkerRead(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SASweptSAFetch(self, Vi, SASweptSA, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASweptSAFetch(
            ViSession(Vi),
            ViConstString(SASweptSA),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SASweptSAMeasure(self, Vi, SASweptSA, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASweptSAMeasure(
            ViSession(Vi),
            ViConstString(SASweptSA),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SASweptSARead(self, Vi, SASweptSA, MaxTime, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASweptSARead(
            ViSession(Vi),
            ViConstString(SASweptSA),
            ViInt32(MaxTime),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SASweptSAsInitiate(self, Vi):
        status = self.dll.AgXSAn_SASweptSAsInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASweptSAsConfigureNoPreset(self, Vi):
        status = self.dll.AgXSAn_SASweptSAsConfigureNoPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASweptSAsConfigure(self, Vi):
        status = self.dll.AgXSAn_SASweptSAsConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASourcePreset(self, Vi):
        status = self.dll.AgXSAn_SASourcePreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SASourceGetSourceSettings(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgXSAn_SASourceGetSourceSettings(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SASourceLevelSetTrackingPeak(self, Vi):
        status = self.dll.AgXSAn_SASourceLevelSetTrackingPeak(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StateTriggerConfigure(self, Vi, RepCapIdentifier, Enabled, Detection, Filter, Identifier):
        status = self.dll.AgXSAn_StateTriggerConfigure(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViBoolean(Enabled),
            ViInt32(Detection),
            ViConstString(Filter),
            ViConstString(Identifier),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StateTriggerDisableAllTriggerSources(self, Vi, RepCapIdentifier):
        status = self.dll.AgXSAn_StateTriggerDisableAllTriggerSources(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StateTriggerRemoveAllCustomStateTriggerSources(self, Vi, RepCapIdentifier):
        status = self.dll.AgXSAn_StateTriggerRemoveAllCustomStateTriggerSources(
            ViSession(Vi), ViConstString(RepCapIdentifier)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemDisableLocalControls(self, Vi):
        status = self.dll.AgXSAn_SystemDisableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemEnableLocalControls(self, Vi):
        status = self.dll.AgXSAn_SystemEnableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemGetScreenImage(self, Vi, ImageBufferSize):
        Image = ARRAY_ViByte(ImageBufferSize)
        ImageActualSize = ViInt32()
        status = self.dll.AgXSAn_SystemGetScreenImage(
            ViSession(Vi), ViInt32(ImageBufferSize), Image, byref(ImageActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ImageActualSize = int(ImageActualSize.value)
        return Image, ImageActualSize

    def SystemGetState(self, Vi, pDataBufferSize):
        pData = ARRAY_ViByte(pDataBufferSize)
        pDataActualSize = ViInt32()
        status = self.dll.AgXSAn_SystemGetState(ViSession(Vi), ViInt32(pDataBufferSize), pData, byref(pDataActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pDataActualSize = int(pDataActualSize.value)
        return pData, pDataActualSize

    def SystemPutState(self, Vi, DataBufferSize):
        Data = ARRAY_ViByte(DataBufferSize)
        status = self.dll.AgXSAn_SystemPutState(ViSession(Vi), ViInt32(DataBufferSize), Data)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Data

    def SystemRecallState(self, Vi, Identifier):
        status = self.dll.AgXSAn_SystemRecallState(ViSession(Vi), ViConstString(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemSaveState(self, Vi, Identifier):
        status = self.dll.AgXSAn_SystemSaveState(ViSession(Vi), ViConstString(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        status = self.dll.AgXSAn_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemReadBytes(self, Vi, ValBufferSize):
        Val = ARRAY_ViByte(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgXSAn_SystemReadBytes(ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgXSAn_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def SystemWriteBytes(self, Vi, BufferBufferSize):
        Buffer = ARRAY_ViByte(BufferBufferSize)
        status = self.dll.AgXSAn_SystemWriteBytes(ViSession(Vi), ViInt32(BufferBufferSize), Buffer)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return Buffer

    def SystemWriteString(self, Vi, Data):
        status = self.dll.AgXSAn_SystemWriteString(ViSession(Vi), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemClearIO(self, Vi):
        status = self.dll.AgXSAn_SystemClearIO(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViByte(BufferSize)
        ReturnCount = ViInt64()
        status = self.dll.AgXSAn_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def viWrite(self, Vi, Count):
        Buffer = ARRAY_ViByte(Count)
        ReturnCount = ViInt64()
        status = self.dll.AgXSAn_viWrite(ViSession(Vi), ViInt64(Count), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def SystemModePreset(self, Vi):
        status = self.dll.AgXSAn_SystemModePreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemUserPresetAllModes(self, Vi):
        status = self.dll.AgXSAn_SystemUserPresetAllModes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InputRFRangeOptimize(self, Vi):
        status = self.dll.AgXSAn_InputRFRangeOptimize(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InputRFCorrectionConfigureData(self, Vi, RepCapIdentifier, DataArrayBufferSize):
        DataArray = ARRAY_ViReal64(DataArrayBufferSize)
        status = self.dll.AgXSAn_InputRFCorrectionConfigureData(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(DataArrayBufferSize),
            DataArray,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(DataArray)

    def InputRFCorrectionDelete(self, Vi, RepCapIdentifier):
        status = self.dll.AgXSAn_InputRFCorrectionDelete(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InputRFCorrectionMergeData(self, Vi, RepCapIdentifier, DataArrayBufferSize):
        DataArray = ARRAY_ViReal64(DataArrayBufferSize)
        status = self.dll.AgXSAn_InputRFCorrectionMergeData(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(DataArrayBufferSize),
            DataArray,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return list(DataArray)

    def InputRFCorrectionQueryData(self, Vi, RepCapIdentifier, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgXSAn_InputRFCorrectionQueryData(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def Copy(self, Vi, InputRFCorrection, DestinationCorrectionSet):
        status = self.dll.AgXSAn_Copy(
            ViSession(Vi),
            ViConstString(InputRFCorrection),
            ViInt32(DestinationCorrectionSet),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InputRFCorrectionsDeleteAll(self, Vi):
        status = self.dll.AgXSAn_InputRFCorrectionsDeleteAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrationCalibrate(self, Vi):
        status = self.dll.AgXSAn_CalibrationCalibrate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrationRFPreselectorCalibrateConductedBand(self, Vi):
        status = self.dll.AgXSAn_CalibrationRFPreselectorCalibrateConductedBand(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrationRFPreselectorCalibrateRadiatedBand(self, Vi):
        status = self.dll.AgXSAn_CalibrationRFPreselectorCalibrateRadiatedBand(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrationRFPreselectorCalibrateFullBand(self, Vi):
        status = self.dll.AgXSAn_CalibrationRFPreselectorCalibrateFullBand(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrationRFPreselectorQueryAlignConductedBandTimestamp(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgXSAn_CalibrationRFPreselectorQueryAlignConductedBandTimestamp(
            ViSession(Vi), ViInt32(ValBufferSize), Val
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def CalibrationRFPreselectorQueryAlignRadiatedBandTimestamp(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgXSAn_CalibrationRFPreselectorQueryAlignRadiatedBandTimestamp(
            ViSession(Vi), ViInt32(ValBufferSize), Val
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def CalibrationRFPreselectorQueryAlignConductedBandTemprature(self, Vi):
        Val = ViReal64()
        status = self.dll.AgXSAn_CalibrationRFPreselectorQueryAlignConductedBandTemprature(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def CalibrationRFPreselectorQueryAlignRadiatedBandTemprature(self, Vi):
        Val = ViReal64()
        status = self.dll.AgXSAn_CalibrationRFPreselectorQueryAlignRadiatedBandTemprature(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def MemoryOperationQueryDirectoryCatalog(self, Vi, FileName, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgXSAn_MemoryOperationQueryDirectoryCatalog(
            ViSession(Vi), ViConstString(FileName), ViInt32(ValBufferSize), Val
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def MemoryOperationSetStorageDirectory(self, Vi, DirectoryPathBufferSize, DirectoryPath):
        status = self.dll.AgXSAn_MemoryOperationSetStorageDirectory(
            ViSession(Vi), ViInt32(DirectoryPathBufferSize), ViConstString(DirectoryPath)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationQueryStorageDirectory(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgXSAn_MemoryOperationQueryStorageDirectory(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def MemoryOperationCopy(
        self,
        Vi,
        SourcePathBufferSize,
        SourcePath,
        DestinationPathBufferSize,
        DestinationPath,
    ):
        status = self.dll.AgXSAn_MemoryOperationCopy(
            ViSession(Vi),
            ViInt32(SourcePathBufferSize),
            ViConstString(SourcePath),
            ViInt32(DestinationPathBufferSize),
            ViConstString(DestinationPath),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationDelete(self, Vi, FilenameBufferSize, Filename):
        status = self.dll.AgXSAn_MemoryOperationDelete(
            ViSession(Vi), ViInt32(FilenameBufferSize), ViConstString(Filename)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationLoadCorrectionFileData(self, Vi, CorrectionIdentifier, FilenameBufferSize, Filename):
        status = self.dll.AgXSAn_MemoryOperationLoadCorrectionFileData(
            ViSession(Vi),
            ViInt32(CorrectionIdentifier),
            ViInt32(FilenameBufferSize),
            ViConstString(Filename),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationLoadLimitFileData(self, Vi, LimitLineIdentifier, FilenameBufferSize, Filename):
        status = self.dll.AgXSAn_MemoryOperationLoadLimitFileData(
            ViSession(Vi),
            ViInt32(LimitLineIdentifier),
            ViInt32(FilenameBufferSize),
            ViConstString(Filename),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationRecallState(self, Vi, Filename):
        status = self.dll.AgXSAn_MemoryOperationRecallState(ViSession(Vi), ViConstString(Filename))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationRecallTraceFromTraceFile(self, Vi, TraceNumber, Filename):
        status = self.dll.AgXSAn_MemoryOperationRecallTraceFromTraceFile(
            ViSession(Vi), ViInt32(TraceNumber), ViConstString(Filename)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationRecallTraceFromRegister(self, Vi, TraceNumber, RegisterIdentifier):
        status = self.dll.AgXSAn_MemoryOperationRecallTraceFromRegister(
            ViSession(Vi), ViInt32(TraceNumber), ViInt32(RegisterIdentifier)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationCreateStorageDirectory(self, Vi, DirectoryPath):
        status = self.dll.AgXSAn_MemoryOperationCreateStorageDirectory(ViSession(Vi), ViConstString(DirectoryPath))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationMove(self, Vi, SourcePath, DestinationPath):
        status = self.dll.AgXSAn_MemoryOperationMove(
            ViSession(Vi), ViConstString(SourcePath), ViConstString(DestinationPath)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationRemoveStorageDirectory(self, Vi, DirectoryPath):
        status = self.dll.AgXSAn_MemoryOperationRemoveStorageDirectory(ViSession(Vi), ViConstString(DirectoryPath))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationStoreCorrectionDataToFile(self, Vi, CorrectionIdentifier, Filename):
        status = self.dll.AgXSAn_MemoryOperationStoreCorrectionDataToFile(
            ViSession(Vi), ViInt32(CorrectionIdentifier), ViConstString(Filename)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationStoreLimitDataToFile(self, Vi, LimitLineIdentifier, Filename):
        status = self.dll.AgXSAn_MemoryOperationStoreLimitDataToFile(
            ViSession(Vi), ViInt32(LimitLineIdentifier), ViConstString(Filename)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationStoreMeasurementResultsToFile(self, Vi, Filename):
        status = self.dll.AgXSAn_MemoryOperationStoreMeasurementResultsToFile(ViSession(Vi), ViConstString(Filename))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationStoreMarkerTableToFile(self, Vi, FilenameBufferSize, Filename):
        status = self.dll.AgXSAn_MemoryOperationStoreMarkerTableToFile(
            ViSession(Vi), ViInt32(FilenameBufferSize), ViConstString(Filename)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationStorePeakTableToFile(self, Vi, Filename):
        status = self.dll.AgXSAn_MemoryOperationStorePeakTableToFile(ViSession(Vi), ViConstString(Filename))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationStoreScreenImageToFile(self, Vi, Filename):
        status = self.dll.AgXSAn_MemoryOperationStoreScreenImageToFile(ViSession(Vi), ViConstString(Filename))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationStoreState(self, Vi, Filename):
        status = self.dll.AgXSAn_MemoryOperationStoreState(ViSession(Vi), ViConstString(Filename))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationStoreTraceToTraceFile(self, Vi, TraceNumber, Filename):
        status = self.dll.AgXSAn_MemoryOperationStoreTraceToTraceFile(
            ViSession(Vi), ViInt32(TraceNumber), ViConstString(Filename)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryOperationStoreTraceToRegister(self, Vi, TraceNumber, RegisterIdentifier):
        status = self.dll.AgXSAn_MemoryOperationStoreTraceToRegister(
            ViSession(Vi), ViInt32(TraceNumber), ViInt32(RegisterIdentifier)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TracesInitiateSignal(self, Vi, Trace, Frequency, Amplitude, Span):
        status = self.dll.AgXSAn_TracesInitiateSignal(
            ViSession(Vi),
            ViConstString(Trace),
            ViReal64(Frequency),
            ViReal64(Amplitude),
            ViReal64(Span),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TracesClearAverage(self, Vi):
        status = self.dll.AgXSAn_TracesClearAverage(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TracesClearAll(self, Vi):
        status = self.dll.AgXSAn_TracesClearAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TracesConfigureFunctions(
        self,
        Vi,
        Trace,
        Destination,
        Function,
        Operand1,
        Operand2,
        LogOffset,
        LogDifferenceReference,
    ):
        status = self.dll.AgXSAn_TracesConfigureFunctions(
            ViSession(Vi),
            ViConstString(Trace),
            ViInt32(Destination),
            ViInt32(Function),
            ViInt32(Operand1),
            ViInt32(Operand2),
            ViReal64(LogOffset),
            ViReal64(LogDifferenceReference),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusClear(self, Vi):
        status = self.dll.AgXSAn_StatusClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusConfigureServiceRequest(self, Vi, Reason):
        status = self.dll.AgXSAn_StatusConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusPreset(self, Vi):
        status = self.dll.AgXSAn_StatusPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Status_GetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.AgXSAn_Status_GetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def Status_SetRegister(self, Vi, Register, SubRegister, Val):
        status = self.dll.AgXSAn_Status_SetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
