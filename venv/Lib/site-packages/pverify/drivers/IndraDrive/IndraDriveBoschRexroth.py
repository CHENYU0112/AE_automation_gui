from __future__ import annotations

import ctypes
import os
import sys
import time
from ctypes import cdll

# Minimum Python 3.3 required
assert sys.version_info >= (3, 3)


# Error-specific class
class Fetch_Error(ctypes.Structure):
    """
    Fetches the Error from the Motor Control System
    """

    _fields_ = [("code", ctypes.c_int32), ("msg", ctypes.c_char * 2048)]

    def get_msg_str(self):
        return str(self.msg, "UTF-8")


indra_error = Fetch_Error(0)


class IndraDriveError(Exception):
    """
    Error-class raising an exception if one should occur
    """

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


def Check_Result(result):
    """
    :param result:
    :return:
    """
    if result == 0:
        return 0
    else:
        # msg = indra_error.get_msg_str()
        msg = "An error occurred. ErrorCode %d: " % result + indra_error.get_msg_str()
        raise IndraDriveError(msg)


class IndraDrive:
    def __init__(self, comport, combaudrate=19200):
        # Load IndraDrive API DLL into memory
        self.libpath = os.path.join(os.path.dirname(__file__), "IndradriveAPI.dll")
        self.indralib = cdll.LoadLibrary(self.libpath)

        self.indralib.init.restype = ctypes.c_longlong
        self.indralib.open.argtypes = [ctypes.c_longlong]
        self.indralib.close.argtypes = [ctypes.c_longlong]
        self.indralib.sequencer_activate.argtypes = [ctypes.c_longlong]
        self.indralib.sequencer_init.argtypes = [ctypes.c_longlong]
        self.indralib.sequencer_write.argtypes = [ctypes.c_longlong]
        self.indralib.sequencer_softtrigger.argtypes = [ctypes.c_longlong]
        self.indralib.sequencer_hardtrigger.argtypes = [ctypes.c_longlong]
        self.indralib.sequencer_getstatus.argtypes = [ctypes.c_longlong]
        self.indralib.speedcontrol_activate.argtypes = [ctypes.c_longlong]
        self.indralib.speedcontrol_init.argtypes = [ctypes.c_longlong]
        self.indralib.speedcontrol_write.argtypes = [ctypes.c_longlong]
        self.indralib.get_opstate.argtypes = [ctypes.c_longlong]
        self.indralib.set_stdenvironment.argtypes = [ctypes.c_longlong]
        self.indralib.get_drivemode.argtypes = [ctypes.c_longlong]
        self.indralib.get_speed.argtypes = [ctypes.c_longlong]
        self.indralib.get_diagnostic_msg.argtypes = [ctypes.c_longlong]
        self.indralib.get_diagnostic_num.argtypes = [ctypes.c_longlong]
        self.indralib.clear_error.argtypes = [ctypes.c_longlong]
        self.indraref = None
        self.diag_num = ctypes.c_uint32(0)
        self.comport = str(comport).encode()
        self.combaudrate = combaudrate

        # Get API reference
        self.indraref = self.indralib.init()

    def Initialize(self, **kwargs):
        # Open communication channel
        result = self.indralib.open(self.indraref, self.comport, self.combaudrate, ctypes.byref(indra_error))
        Check_Result(result)

        # Set standard environment
        result = self.indralib.set_stdenvironment(self.indraref, ctypes.byref(indra_error))
        Check_Result(result)

        self.DeleteCommunicationError()
        self.CheckDriveMode()
        self.CheckOperationState()
        self.SetLimits()

    def GetHexDiagnosticMessage(self):
        result = self.indralib.get_diagnostic_num(self.indraref, ctypes.byref(self.diag_num), ctypes.byref(indra_error))
        Check_Result(result)
        diag_num_str = str(self.diag_num)[8:14]
        return hex(int(diag_num_str))

    def DeleteCommunicationError(self):
        """
        :return:
        """
        diag_num_hex = self.GetHexDiagnosticMessage()
        print("Diagnostic number:")
        print(diag_num_hex)
        diag_num_cls = diag_num_hex[2]
        while True:
            if diag_num_cls != "a":
                self.indralib.clear_error(self.indraref, ctypes.byref(indra_error))
                new = self.GetHexDiagnosticMessage()
                if new[2] == "a":
                    print("Error is cleared.")
                break
            break

    def CheckDriveMode(self):
        """
        :return:
        """
        # Check Drive Mode
        drvmode = ctypes.c_uint32(0)
        result = self.indralib.get_drivemode(self.indraref, ctypes.byref(drvmode), ctypes.byref(indra_error))
        Check_Result(result)
        if drvmode.value != 2:  # Drive Mode is not "Speed Control" -> Change it
            print(
                "Please make sure to DISABLE the drive release before you continue! ----- (Press any key to continue...)"
            )
            while True:
                time.sleep(2)
                result = self.indralib.get_drivemode(self.indraref, ctypes.byref(drvmode), ctypes.byref(indra_error))
                Check_Result(result)
                if drvmode.value == 2:
                    break
            # Activate Speed Control
            result = self.indralib.speedcontrol_activate(self.indraref, ctypes.byref(indra_error))
            Check_Result(result)
        # Return diagnostic message
        diagmsg = ctypes.create_string_buffer(256)
        result = self.indralib.get_diagnostic_msg(self.indraref, diagmsg, ctypes.byref(indra_error))
        Check_Result(result)
        print("Current status:\n" + diagmsg.raw.decode("ascii"))

    def CheckOperationState(self):
        """
        :return:
        """
        # Check Operation State
        while True:
            opstate = ctypes.c_uint8(0)
            result = self.indralib.get_opstate(self.indraref, ctypes.byref(opstate), ctypes.byref(indra_error))
            Check_Result(result)
            if (opstate.value & 0b11) != 0b11:
                Green_Button = False
                Regler_Ein = False
                while True:
                    hex = self.GetHexDiagnosticMessage()
                    if hex == "0xa0013":
                        if Green_Button is False:
                            print(
                                "# Please make sure to RELEASE before you continue: Press green button & switch Reglerfreigabe to 'Ein'. (torque-controlled op.mode)##"
                            )
                            Green_Button = True
                    elif hex == "0xa0012" and Regler_Ein is False:
                        print("Please switch the Reglerfreigabe to 'Ein'.\n(torque-controlled operation mode)")
                        Regler_Ein = True
                    break
                break
            break

    def SetLimits(self):
        """
        :return:
        """
        # Set limits
        result = self.indralib.speedcontrol_init(
            self.indraref,
            ctypes.c_double(1000),
            ctypes.c_double(1000),
            ctypes.byref(indra_error),
        )
        Check_Result(result)

    def SetSpeed(self, speed):
        """
        :return:
        """
        result = self.indralib.speedcontrol_write(
            self.indraref,
            ctypes.c_double(speed),
            ctypes.c_double(50),
            ctypes.byref(indra_error),
        )
        Check_Result(result)

    # def CloseCommunicationChannel(self):
    #     """
    #     :return:
    #     """
    #     # Closing communication channel
    #     result = self.indralib.close(self.indraref, ctypes.byref(indra_error))
    #     Check_Result(result)


if __name__ == "__main__":
    control = IndraDrive(comport="COM8")
    # control.Initialize()
    # control.DeleteCommunicationError()
    # control.CheckDriveMode()
    # control.CheckOperationState()
    # control.SetLimits()
    # control.SetSpeed(0)
