from __future__ import annotations

import argparse
from pathlib import Path

from elftools.elf.elffile import ELFFile
from intelhex import IntelHex


def elf2hex(elffile: str | Path, outputfile: str | Path | None = None) -> Path:
    """
    Converts an ELF/AXF file into an Intel hex file.

    :param elffile: The ELF file to convert
    :param outputfile: The name of the output file. If omitted the file name of the ELF file will be taken.
                       If a name is given e.g. "myfile.hex" it will be stored in the same directory as the ELF file.
                       If an absolute path is given it will be stored there.
    """
    elffile = Path(elffile)
    if not elffile.exists():
        msg = f"File {elffile} does not exist!"
        raise FileNotFoundError(msg)

    if outputfile is None:
        outputfile = elffile.stem + ".hex"
    outputfile = Path(elffile).parent / outputfile if not Path(outputfile).is_absolute() else Path(outputfile)

    data = {}
    with open(str(elffile), "rb") as f:
        e = ELFFile(f)
        for s in e.iter_segments():
            header = s.header
            if header["p_filesz"] != 0:
                startAddr = header["p_paddr"]
                for i, d in enumerate(s.data()):
                    data.update({startAddr + i: d})

        i = IntelHex()
        i.fromdict(data)
        i.start_addr = {"EIP": e.header["e_entry"]}

    outputfile.parent.mkdir(parents=True, exist_ok=True)
    with open(str(outputfile), "w") as of:
        i.write_hex_file(of, byte_count=16)

    return outputfile


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog="elf2hex.py", description="Converts an ELF file into an Intel HEX file.")
    parser.add_argument("elffile", type=str, help="The ELF file to convert")
    parser.add_argument(
        "-o",
        "--output",
        type=str,
        required=False,
        help="""The name of the output file. If omitted the file name of the ELF file will be taken.
If a name is given e.g. "myfile.hex" it will be stored in the same directory as the ELF file.
If an absolute path is given it will be stored there.""",
    )
    args = parser.parse_args()

    outfile = elf2hex(Path(args.elffile), args.output)
    print(f"Converted {args.elffile} to {outfile}!")
