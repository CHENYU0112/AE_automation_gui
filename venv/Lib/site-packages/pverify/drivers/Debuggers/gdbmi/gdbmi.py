from __future__ import annotations

import logging
from pathlib import Path
from typing import Any

from .pygdbmi.gdbcontroller import GdbController


class GdbCtrl(GdbController):
    def __init__(self, elf_file: str | Path):
        self.logger = logging.Logger(__name__, level=logging.CRITICAL)
        self.logger.addHandler(logging.NullHandler())

        self.gdb_path = Path(__file__).parent / "arm-none-eabi-gdb.exe"
        self.elf_file = Path(elf_file).resolve()
        super().__init__([str(self.gdb_path), "--nx", "--quiet", "--interpreter=mi3"])

        self.check_result(self.write(f"file '{self.elf_file.as_posix()!s}'", timeout_sec=5))

    @staticmethod
    def check_result(response: list[dict[str, Any]]) -> list[dict[str, Any]]:
        for frame in response:
            if frame["type"] == "result" and frame["message"] == "error":
                msg = f"{frame['payload']['msg']}"
                raise Exception(msg)
        return response

    @staticmethod
    def merge_console_msg(response: list[dict[str, Any]]) -> str:
        console = ""
        for frame in response:
            if frame["type"] == "console":
                console += frame["payload"]
        return console.replace("\\n", "\n")

    def write_console(self, cmd):
        return self.merge_console_msg(self.check_result(self.write(cmd, timeout_sec=1)))
