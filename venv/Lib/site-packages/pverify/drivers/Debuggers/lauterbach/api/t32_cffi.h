/*
 * TRACE32 Remote API
 *
 * Copyright (c) 1998-2014 Lauterbach GmbH
 * All rights reserved
 *
 * Licensing restrictions apply to this code.
 * Please see documentation (api_remote.pdf) for
 * licensing terms and conditions.
 *
 * $LastChangedRevision: 68891 $
 */


#define T32_PCKLEN_MAX          1472

/************************/
/* returned error codes */
/************************/

#define T32_OK                          0
/* error codes by API client */
#define T32_ERR_COM_RECEIVE_FAIL        -1      /* receiving API response failed */
#define T32_ERR_COM_TRANSMIT_FAIL       -2      /* sending API message failed */
#define T32_ERR_COM_PARA_FAIL           -3      /* function parameter error */
#define T32_ERR_COM_SEQ_FAIL            -4      /* message sequence failed */
#define T32_ERR_NOTIFY_MAX_EVENT        -5      /* max. notify events exceeded */
#define T32_ERR_MALLOC_FAIL             -6      /* malloc() failed */
/* standard error codes */
#define T32_ERR_STD_RUNNING             2       /* target running */
#define T32_ERR_STD_NOTRUNNING          3       /* target not running */
#define T32_ERR_STD_RESET               4       /* target is in reset */
#define T32_ERR_STD_ACCESSTIMEOUT       6       /* access timeout, target running */
#define T32_ERR_STD_INVALID             10      /* not implemented */
#define T32_ERR_STD_REGUNDEF            14      /* registerset undefined */
#define T32_ERR_STD_VERIFY              15      /* verify error */
#define T32_ERR_STD_BUSERROR            16      /* bus error */
#define T32_ERR_STD_NOMEM               22      /* no memory mapped */
#define T32_ERR_STD_RESETDETECTED       48      /* target reset detected */
#define T32_ERR_STD_FDXBUFFER           49      /* FDX buffer error */
#define T32_ERR_STD_RTCKTIMEOUT         57      /* no RTCK detected */
#define T32_ERR_STD_INVALIDLICENSE      60      /* no valid license detected */
#define T32_ERR_STD_USERSIGNAL          67      /* user signal */
#define T32_ERR_STD_NORAPI              83      /* tried to connect to emu */
#define T32_ERR_STD_FAILED              113
#define T32_ERR_STD_LOCKED              123     /* access locked */
#define T32_ERR_STD_POWERFAIL           128     /* power fail */
#define T32_ERR_STD_DEBUGPORTFAIL       140     /* debug port fail */
#define T32_ERR_STD_DEBUGPORTTIMEOUT    144     /* debug port timeout */
#define T32_ERR_STD_RESETFAIL           161     /* target reset fail */
#define T32_ERR_STD_EMUTIMEOUT          162     /* emulator communication timeout */
#define T32_ERR_STD_NORTCK              164     /* no RTCK on emulator */
#define T32_ERR_STD_ATTACH              254     /* T32_Attach() is missing */
#define T32_ERR_STD_FATAL               255
/* function specific error codes */
#define T32_ERR_FN1 90
#define T32_ERR_FN2 91
#define T32_ERR_FN3 92
#define T32_ERR_FN4 93
#define T32_ERR_GETRAM_INTERNAL         0x1000      /* T32_GetRam failed internally */
#define T32_ERR_READREGBYNAME_NOTFOUND  0x1010      /* T32_ReadRegisterByName: register not found */
#define T32_ERR_READREGBYNAME_FAILED    0x1011      /* T32_ReadRegisterByName: reading register failed */
#define T32_ERR_WRITEREGBYNAME_NOTFOUND 0x1020      /* T32_WriteRegisterByName: register not found */
#define T32_ERR_WRITEREGBYNAME_FAILED   0x1021      /* T32_WriteRegisterByName: reading register failed */
#define T32_ERR_READREGOBJ_PARAFAIL     0x1030      /* T32_ReadRegisterObj: wrong parameters */
#define T32_ERR_READREGOBJ_MAXCORE      0x1031      /* T32_ReadRegisterObj: max cores exceeded */
#define T32_ERR_READREGOBJ_NOTFOUND     0x1032      /* T32_ReadRegisterObj: register not found */
#define T32_ERR_READREGSETOBJ_PARAFAIL  0x1033      /* T32_ReadRegisterSetObj: wrong parameters */
#define T32_ERR_READREGSETOBJ_NUMREGS   0x1034      /* T32_ReadRegisterSetObj: number of read registers wrong */
#define T32_ERR_WRITEREGOBJ_PARAFAIL    0x1040      /* T32_WriteRegisterObj: wrong parameters */
#define T32_ERR_WRITEREGOBJ_MAXCORE     0x1041      /* T32_WriteRegisterObj: max cores exceeded */
#define T32_ERR_WRITEREGOBJ_NOTFOUND    0x1042      /* T32_WriteRegisterObj: register not found */
#define T32_ERR_WRITEREGOBJ_FAILED      0x1043      /* T32_WriteRegisterObj: writing register failed */
#define T32_ERR_SETBP_FAILED            0x1050      /* T32_WriteBreakpoint/T32_WriteBreakpointObj: setting breakpoint failed */
#define T32_ERR_READMEMOBJ_PARAFAIL     0x1060      /* T32_ReadMemoryObj: wrong parameters */
#define T32_ERR_WRITEMEMOBJ_PARAFAIL    0x1070      /* T32_WriteMemoryObj: wrong parameters */
#define T32_ERR_READVAR_ALLOC           0x1080      /* T32_ReadVariable*: mem alloc failed */
#define T32_ERR_READVAR_ACCESS          0x1081      /* T32_ReadVariable*: access to symbol failed */
#define T32_ERR_READBPOBJ_PARAFAIL      0x1091      /* T32_ReadBreakpointObj: wrong parameters */
#define T32_ERR_READBPOBJ_NOTFOUND      0x1092      /* T32_ReadBreakpointObj: breakpoint not found */
#define T32_ERR_WRITEBPOBJ_FAILED       0x10a1      /* T32_WriteBreakpointObj: setting BP failed */
/* legacy definitions */
#define T32_COM_RECEIVE_FAIL    -1
#define T32_COM_TRANSMIT_FAIL   -2
#define T32_COM_PARA_FAIL       -3
#define T32_COM_SEQ_FAIL        -4
#define T32_MAX_EVENT_FAIL      -5
#define T32_MALLOC_FAIL         -6


/***********************/
/* basic API functions */
/***********************/

#define T32_DEV_OS              0
#define T32_DEV_ICE             1
#define T32_DEV_ICD             1

int  T32_Errno;
int  T32_Config(const char *String1, const char *String2);
int  T32_Init(void);
int  T32_Attach(int DeviceSpecifier);
int  T32_Terminate(int ShellReturnValue);
int  T32_Exit(void);
int  T32_Ping(void);
int  T32_Nop(void);
int  T32_NopEx(int length, int options);
int  T32_NopFail(void);
int  T32_Cmd(const char *Command);
int  T32_Cmd_f(const char *command, ...);
int  T32_CmdWin(uint32_t WindowHandle, const char *Command);
int  T32_Printf(const char *str, ...);
int  T32_Stop(void);
int  T32_GetPracticeState(int *pPracticeState);
int  T32_EvalGet(uint32_t *pEvaluationResult);
int  T32_EvalGetString(char *EvaluationString);
int  T32_GetMessage(char *AreaMessage, uint16_t *pMessageType);
int  T32_GetTriggerMessage(char *TriggerMessage);
int  T32_GetChannelSize(void);
void T32_GetChannelDefaults(void *ParametersOut);
void T32_SetChannel(void *ParametersIn);
int  T32_APILock(int nTimeoutMS);                                                                                               /* preliminary*/
int  T32_APIUnlock(void);
int  T32_GetApiRevision(uint32_t* pRevNum);


/*******************************/
/* debug related API functions */
/*******************************/


#define T32_MEMORY_ACCESS_DATA                   0x0000
#define T32_MEMORY_ACCESS_PROGRAM                0x0001
#define T32_MEMORY_ACCESS_USR                    0x000f
#define T32_MEMORY_ACCESS_VM                     0x0010
#define T32_MEMORY_ACCESS_ARM_CP0                0x0002
#define T32_MEMORY_ACCESS_ARM_ICE                0x0003
#define T32_MEMORY_ACCESS_ARM_ETM                0x0004
#define T32_MEMORY_ACCESS_ARM_CP14               0x0005
#define T32_MEMORY_ACCESS_ARM_CP15               0x0006
#define T32_MEMORY_ACCESS_ARM_ARM                0x0007
#define T32_MEMORY_ACCESS_ARM_THUMB              0x0008
#define T32_MEMORY_ACCESS_ARM_PHYSICAL_ARM       0x0009
#define T32_MEMORY_ACCESS_ARM_PHYSICAL_THUMB     0x000a
#define T32_MEMORY_ACCESS_ARM_ETB                0x000b
#define T32_MEMORY_ACCESS_ARM_PHYSICAL_DATA      0x000c
#define T32_MEMORY_ACCESS_ARM_PHYSICAL_PROGRAM   0x000d
#define T32_MEMORY_ACCESS_ARM_DAP                0x000e
#define T32_MEMORY_ACCESS_ARM_USR                0x000f
#define T32_MEMORY_ACCESS_ARM_DBG                0x0011
#define T32_MEMORY_ACCESS_ARC_AUX                0x0002
#define T32_MEMORY_ACCESS_PPC_SPR                0x0002
#define T32_MEMORY_ACCESS_PPC_DCR                0x0003
#define T32_MEMORY_ACCESS_X86_LD                 0x0002
#define T32_MEMORY_ACCESS_X86_LP                 0x0003
#define T32_MEMORY_ACCESS_X86_IO                 0x0004
#define T32_MEMORY_ACCESS_X86_MSR                0x0005
#define T32_MEMORY_ACCESS_XTENSA_DAP             0x000e
#define T32_MEMORY_ACCESS_XTENSA_SPR             0x0002
#define T32_MEMORY_ACCESS_MMUBYPASS              0x8000
#define T32_MEMORY_ATTR_WIDTHMASK                0x000f
#define T32_MEMORY_ATTR_DUALPORT                 0x0400
#define T32_MEMORY_ATTR_NOINCREMENT              0x4000

#define T32_MAX_EVENTS                                4
#define T32_E_BREAK                                0x00
#define T32_E_EDIT                                 0x01
#define T32_E_BREAKPOINTCONFIG                     0x02
#define T32_E_ONEVENT                              0x03

#define T32_API_RECEIVE                            0x01
#define T32_API_SYNCREQUEST                        0x02
#define T32_API_NOTIFICATION                       0x06
#define T32_API_SYNCACKN                           0x12
#define T32_API_SYNCBACK                           0x22

/* Flags, which can be used with T32_WriteBreakpoint() / T32_ReadBreakpoint */
#define T32_BPCONFIG_PROGRAM                      0x001 /* program breakpoint / execution breakpoint */
#define T32_BPCONFIG_SPOT                         0x004 /* spot breakpoint */
#define T32_BPCONFIG_READ                         0x008 /* read access breakpoint  */
#define T32_BPCONFIG_WRITE                        0x010 /* write access breakpoint */
#define T32_BPCONFIG_READWRITE                    0x018 /* read/write access breakpoint */
#define T32_BPCONFIG_DELETE                       0x100 /* delete breakpoint */
#define T32_BPCONFIG_ALPHA                        0x020 /* Alpha  breakpoint or marker */
#define T32_BPCONFIG_BETA                         0x040 /* Beta   breakpoint or marker */
#define T32_BPCONFIG_CHARLIE                      0x080 /* Charly breakpoint or marker */
#define T32_BPACCESS_DELTA                         0x10
#define T32_BPACCESS_ECHO                          0x20
#define T32_BPACCESS_E                             0x40
#define T32_BPACCESS_ONCHIP                        0x80

#define T32_PRINTCODE_ASCII                        0x41
#define T32_PRINTCODE_ASCIIP                       0x42
#define T32_PRINTCODE_ASCIIE                       0x43
#define T32_PRINTCODE_CSV                          0x44
#define T32_PRINTCODE_XML                          0x45

typedef struct {
    uint32_t  address;
    uint8_t   enabled;
    uint32_t  type;
    uint32_t  auxtype;
} T32_Breakpoint;

int  T32_Go(void);
int  T32_Break(void);
int  T32_Step(void);
int  T32_StepMode(int Mode);
int  T32_ResetCPU(void);
int  T32_SetMode(int Mode);
int  T32_GetCpuInfo(char **pCPUString, uint16_t *pFPUType, uint16_t *pEndianess, uint16_t *pReserved);
int  T32_GetState(int *pSystemState);
int  T32_ReadMemory     (uint32_t Address, int Access, uint8_t *pBuffer, int Size);
int  T32_WriteMemory    (uint32_t Address, int Access, const uint8_t *pBuffer, int Size);
int  T32_WriteMemoryPipe(uint32_t Address, int Access, const uint8_t *pBuffer, int Size);
int  T32_ReadMemoryEx   (uint32_t Address, int Segment, int Access, int Attribute, uint8_t *pBuffer, int Size);                 /*undocumented*/
int  T32_WriteMemoryEx  (uint32_t Address, int Segment, int Access, int Attribute, uint8_t *pBuffer, int Size);                 /*undocumented*/
int  T32_SetMemoryAccessClass(const char* Access);
int  T32_GetRam(uint32_t *pStartAddress, uint32_t *pEndAddress, uint16_t *pAccess);
int  T32_GetSource(uint32_t Address, char *SourceFile, uint32_t *pSourceLine);
int  T32_GetSelectedSource(          char *SourceFile, uint32_t *pSourceLine);
int  T32_GetSymbol(const char *SymbolName, uint32_t *pAddress, uint32_t *pSize, uint32_t *pAccess);
int  T32_GetSymbolFromAddress (char* SymbolName, uint32_t Address, int StringLength);
int  T32_ReadVariableString(const char *VariableName, char *StringFromNumeric, int StringLength);
int  T32_ReadVariableValue (const char *VariableName, uint32_t *pValueLower32Bit, uint32_t *pValueUpper32Bit);
int  T32_WriteVariableValue (const char *VariableName, uint32_t ValueLower32Bit, uint32_t ValueUpper32Bit);
int  T32_GetWindowContent(const char *command, char * buffer, uint32_t requested, uint32_t offset, uint32_t print_code);
int  T32_ReadRegisterByName (const char *RegisterName, uint32_t *pValueLower32Bit, uint32_t *pValueUpper32Bit);
int  T32_WriteRegisterByName(const char *RegisterName, uint32_t ValueLower32Bit, uint32_t ValueUpper32Bit);
int  T32_ReadPP(uint32_t *pProgramCounter);
int  T32_ReadRegister (uint32_t MaskLower32Bit, uint32_t MaskUpper32Bit, uint32_t *pBuffer);
int  T32_WriteRegister(uint32_t MaskLower32Bit, uint32_t MaskUpper32Bit, uint32_t *pBuffer);
int  T32_ReadBreakpoint (uint32_t Address, int Access, uint16_t *pBPConfiguration, int Size);
int  T32_WriteBreakpoint(uint32_t Address, int Access, int        BPConfiguration, int Size);
int  T32_GetBreakpointList(int *pNumberFetched, T32_Breakpoint *pBPSettings, int FetchLimit);
int  T32_GetTraceState(int TraceType, int *pTraceState, int32_t *pTraceTotalRecords, int32_t *pCurrentRecordMin, int32_t *pCurrentRecordMax);
int  T32_ReadTrace    (int TraceType, int32_t StartRecord, int NumberOfRecords, uint32_t Mask, uint8_t *pBuffer);
int  T32_GetLastErrorMessage(char *ErrorMessage, uint32_t* pLastError, uint32_t* pInternal);


/***********************************/
/*  Object oriented API functions  */
/***********************************/

/*** Obj Interface naming convention
<objtype>:                  Buffer, Address, Register, Memory, Symbol
Object types:               T32_<objtype>Obj
Object handle types:        T32_<objtype>Handle
Allocating objects:         T32_Request<objtype>Obj
                            T32_Request<objtype>Obj<initial>
Reallocating objects:       T32_Resize<objtype>Obj
Freeing objects:            T32_Release<objtype>Obj
                            T32_ReleaseAllObjects
Getting object attributes:  T32_Get<objtype>Obj<attribute>
Setting object attributes:  T32_Set<objtype>Obj<attribute>
Copying existing object:    T32_Copy<objtype>Obj
Copying from/into objects:  T32_Copy<what>From/To<objtype>Obj
Reading from target:        T32_Read<objtype>Obj
Reading by signifier:       T32_Read<objtype>ObjBy<signifier>
Writing to target:          T32_Write<objtype>Obj
Getting info from TRACE32:  T32_Query<objtype>Obj
Sending info to TRACE32:    T32_Send<objtype>Obj
***/

typedef struct sT32_Object T32_Object;
struct sT32_Object {
    T32_Object  *next;
};

int T32_ReleaseAllObjects (void);

/** Buffer Object **/

typedef struct {
    T32_Object     *next;
    uint32_t        used;
    uint8_t        *storage;
    uint32_t        bufsize;
} T32_BufferObj;

/* Buffer handle */
typedef  T32_BufferObj* T32_BufferHandle;

/* request buffer object */
int T32_RequestBufferObj (T32_BufferHandle *pHandle, const int initial_size);
int T32_ReleaseBufferObj (T32_BufferHandle *pHandle);
int T32_ResizeBufferObj  (T32_BufferHandle handle, const int size);

/* buffer access functions */
int T32_CopyDataFromBufferObj (uint8_t *localbuffer, int lbsize, T32_BufferHandle handle);
int T32_CopyDataToBufferObj   (T32_BufferHandle handle, int size, const uint8_t *localbuffer);
int T32_GetBufferObjStoragePointer (uint8_t** ppointer, T32_BufferHandle handle);

/** Address Object **/

/* enumeration for all address types */
typedef enum {
    T32_ADDRTYPE_NONE,
    T32_ADDRTYPE_COMMON,
    T32_ADDRTYPE_A32,
    T32_ADDRTYPE_A64,
    T32_ADDRTYPE_MAX
} T32_AddressObjType;

/* memory access attributes */
#define T32ADDROBJATTR_EACCESS  0x1
#define T32ADDROBJATTR_VERIFY   0x2

/* enumeration for MAU sizes (minumum addressable unit) */
typedef enum {
    T32_SIZEOFMAU_NOTSET    = 0,
    T32_SIZEOFMAU_TARGET    = 1,
    T32_SIZEOFMAU_8BIT      = 8,
    T32_SIZEOFMAU_12BIT     = 12,
    T32_SIZEOFMAU_16BIT     = 16,
    T32_SIZEOFMAU_24BIT     = 24,
    T32_SIZEOFMAU_32BIT     = 32,
    T32_SIZEOFMAU_64BIT     = 64,
    T32_SIZEOFMAU_128BIT    = 128,
    T32_SIZEOFMAU_256BIT    = 256
} T32_SizeOfMauType;

/* common address elements */
typedef struct {
    T32_Object         *next;
    T32_AddressObjType  type;
    char                access[16];
    uint16_t            width;
    uint16_t            core;
    uint32_t            spaceid;
    uint32_t            attr;
    T32_SizeOfMauType   sizeofmau;
    T32_SizeOfMauType   targetsizeofmau;
} T32_AddressObj_Common;

/* address type: 32bit address */
typedef struct {
    T32_AddressObj_Common common;
    uint32_t    address;
} T32_AddressObj_32bit;

/* address type: 64bit address */
typedef struct {
    T32_AddressObj_Common common;
    uint64_t address;
} T32_AddressObj_64bit;

/* address handle for all address types */
typedef union {
    T32_AddressObj_Common   common;
    T32_AddressObj_32bit    a32;
    T32_AddressObj_64bit    a64;
} T32_AddressObj;

/* Address handle */
typedef T32_AddressObj* T32_AddressHandle;

/* request address object */
int T32_RequestAddressObj     (T32_AddressHandle *pHandle);
int T32_RequestAddressObjA32  (T32_AddressHandle *pHandle, const uint32_t address);
int T32_RequestAddressObjA64  (T32_AddressHandle *pHandle, const uint64_t address);
int T32_ReleaseAddressObj     (T32_AddressHandle *pHandle);
int T32_CopyAddressObj        (T32_AddressHandle *pToHandle, T32_AddressHandle fromHandle);

int T32_SetAddressObjAddr32       (T32_AddressHandle handle, uint32_t address);
int T32_GetAddressObjAddr32       (T32_AddressHandle handle, uint32_t *pAddress);
int T32_SetAddressObjAddr64       (T32_AddressHandle handle, uint64_t address);
int T32_GetAddressObjAddr64       (T32_AddressHandle handle, uint64_t *pAddress);
int T32_SetAddressObjAccessString (T32_AddressHandle handle, const char *accessString);
int T32_GetAddressObjAccessString (T32_AddressHandle handle, char* accessString, uint8_t maxlen);

int T32_SetAddressObjWidth            (T32_AddressHandle handle, uint16_t width);
int T32_SetAddressObjCore             (T32_AddressHandle handle, uint16_t core);
int T32_SetAddressObjSpaceId          (T32_AddressHandle handle, uint32_t spaceid);
int T32_SetAddressObjAttr             (T32_AddressHandle handle, uint32_t attributes);
int T32_SetAddressObjSizeOfMau        (T32_AddressHandle handle, T32_SizeOfMauType sizeofmau);
int T32_GetAddressObjSizeOfMau        (T32_AddressHandle handle, T32_SizeOfMauType* pSizeOfMau);
int T32_GetAddressObjTargetSizeOfMau  (T32_AddressHandle handle, T32_SizeOfMauType* pTargetSizeOfMau);


#define T32_MMUTRANSLATION_TO_PHYSICAL  0x1
#define T32_MMUTRANSLATION_TO_LOGICAL   0x2
#define T32_MMUTRANSLATION_TO_LINEAR    0x3
int T32_QueryAddressObjMmuTranslation (T32_AddressHandle handle, uint16_t translation);
int T32_QueryAddressObjTargetSizeOfMau(T32_AddressHandle handle);


/** Register Object **/

/* enumeration for all register types */
typedef enum {
    // don't reorder this list - it's used on T32 side, too!
    T32_REGTYPE_NONE,
    T32_REGTYPE_COMMON,     // common register elements
    T32_REGTYPE_R32,        // 32bit register
    T32_REGTYPE_R64,        // 64bit register
    T32_REGTYPE_R128,       // 128bit register
    T32_REGTYPE_R256,       // 256bit register
    T32_REGTYPE_R512,       // 512bit register
    // add new register types here
    T32_REGTYPE_MAX
} T32_RegisterObjType;

/* common register elements */
#define T32_MAX_REGNAME 15
typedef struct {
    T32_Object         *next;       // object handling
    T32_RegisterObjType type;       // register type
    uint32_t            id;         // register id
    char                name[T32_MAX_REGNAME+1];    // register name
    uint16_t            core;       // core id to access
} T32_RegisterObj_Common;

/* register type: 32bit register */
typedef struct {
    T32_RegisterObj_Common common;
    uint32_t    value;
} T32_RegisterObj_32bit;

/* register type: 64bit register */
typedef struct {
    T32_RegisterObj_Common common;
    uint64_t    value;
} T32_RegisterObj_64bit;

/* register type: 128bit register */
typedef struct {
    T32_RegisterObj_Common common;
    uint64_t    value[2];
} T32_RegisterObj_128bit;

/* register type: 256bit register */
typedef struct {
    T32_RegisterObj_Common common;
    uint64_t    value[4];
} T32_RegisterObj_256bit;

/* register type: 512bit register */
typedef struct {
    T32_RegisterObj_Common common;
    uint64_t    value[8];
} T32_RegisterObj_512bit;

/* register handle for all register types */
typedef union {
    T32_RegisterObj_Common  common;
    T32_RegisterObj_32bit   r32;
    T32_RegisterObj_64bit   r64;
    T32_RegisterObj_128bit  r128;
    T32_RegisterObj_256bit  r256;
    T32_RegisterObj_512bit  r512;
} T32_RegisterObj;

/* Register handle */
typedef T32_RegisterObj* T32_RegisterHandle;

/* request register object */
int T32_RequestRegisterObj        (T32_RegisterHandle *pHandle, const T32_RegisterObjType regType);
int T32_RequestRegisterObjR32     (T32_RegisterHandle *pHandle);
int T32_RequestRegisterObjR64     (T32_RegisterHandle *pHandle);
int T32_RequestRegisterObjR128    (T32_RegisterHandle *pHandle);
int T32_RequestRegisterObjR256    (T32_RegisterHandle *pHandle);
int T32_RequestRegisterObjR512    (T32_RegisterHandle *pHandle);
int T32_RequestRegisterObjR32Name (T32_RegisterHandle *pHandle, const char* regName);
int T32_RequestRegisterObjR64Name (T32_RegisterHandle *pHandle, const char* regName);
int T32_RequestRegisterObjR128Name(T32_RegisterHandle *pHandle, const char* regName);
int T32_RequestRegisterObjR256Name(T32_RegisterHandle *pHandle, const char* regName);
int T32_RequestRegisterObjR512Name(T32_RegisterHandle *pHandle, const char* regName);
int T32_ReleaseRegisterObj        (T32_RegisterHandle *pHandle);

int T32_SetRegisterObjName        (T32_RegisterHandle handle, const char* regName);
int T32_GetRegisterObjName        (T32_RegisterHandle handle, char* regName, uint8_t maxlen);
int T32_SetRegisterObjId          (T32_RegisterHandle handle, uint32_t regId);
int T32_GetRegisterObjId          (T32_RegisterHandle handle, uint32_t *pRegId);

int T32_SetRegisterObjValue32     (T32_RegisterHandle handle, uint32_t value);
int T32_GetRegisterObjValue32     (T32_RegisterHandle handle, uint32_t *pValue);
int T32_SetRegisterObjValue64     (T32_RegisterHandle handle, uint64_t value);
int T32_GetRegisterObjValue64     (T32_RegisterHandle handle, uint64_t *pValue);
int T32_SetRegisterObjValueArray  (T32_RegisterHandle handle, uint8_t *pArray, uint8_t maxlen);
int T32_GetRegisterObjValueArray  (T32_RegisterHandle handle, uint8_t *pArray, uint8_t maxlen);

int T32_SetRegisterObjCore      (T32_RegisterHandle handle, uint16_t core);


/** RegisterSet Object **/

#define T32_MAX_REGISTERS 200

typedef struct {
    T32_Object         *next;       // object handling
    int                 nregs;      // number of registers in set
    T32_RegisterHandle  regs[1];    // registers (dynamic array)
} T32_RegisterSetObj;

/* RegisterSet handle */
typedef T32_RegisterSetObj* T32_RegisterSetHandle;


/** Symbol Object **/

#define T32_MAX_SYMNAME 64
#define T32_MAX_SYMPATH 256
typedef struct {
    T32_Object         *next;                       // object handling
    char                name[T32_MAX_SYMNAME+1];    // symbol name
    char                path[T32_MAX_SYMPATH+1];    // symbol path
    T32_AddressHandle   address;                    // symbol address
    uint64_t            size;                       // symbol size
} T32_SymbolObj;

/* Symbol handle */
typedef T32_SymbolObj* T32_SymbolHandle;

/* request symbol object */
int T32_RequestSymbolObj        (T32_SymbolHandle *pHandle);
int T32_RequestSymbolObjName    (T32_SymbolHandle *pHandle, const char* symName);
int T32_RequestSymbolObjAddr    (T32_SymbolHandle *pSymHandle, const T32_AddressHandle addrHandle);
int T32_ReleaseSymbolObj        (T32_SymbolHandle *pHandle);

/* access object attributes */
int T32_SetSymbolObjName        (T32_SymbolHandle handle, const char* symName);
int T32_GetSymbolObjName        (T32_SymbolHandle handle, char* symName, uint8_t maxlen);
int T32_SetSymbolObjAddress     (T32_SymbolHandle symHandle, T32_AddressHandle addrHandle);
int T32_GetSymbolObjAddress     (T32_SymbolHandle symHandle, T32_AddressHandle* pAddrHandle);
int T32_GetSymbolObjSize        (T32_SymbolHandle symHandle, uint64_t* pSize);

/** Breakpoint Object **/

typedef struct {
    T32_Object         *next;       // object handling
    T32_AddressHandle   address;    // bp start address
    uint64_t            size;       // bp range size
    uint32_t            types;      // bp types (EMU_breakpoint_bptype_t)
    uint32_t            impl;       // bp implementation (EMU_breakpoint_auxtype_t)
    uint8_t             disabled;   // bp is disabled
} T32_BreakpointObj;

#define T32_BP_TYPE_PROGRAM 0x01    // EMU_BREAKSOFT_TYPE_P
#define T32_BP_TYPE_READ    0x02    // EMU_BREAKSOFT_TYPE_R
#define T32_BP_TYPE_WRITE   0x04    // EMU_BREAKSOFT_TYPE_W
#define T32_BP_TYPE_RW      0x06    // EMU_BREAKSOFT_TYPE_RW

#define T32_BP_IMPL_AUTO    0x00    // inactive "AUTO" breakpoint
#define T32_BP_IMPL_SOFT    0x01    // EMU_BREAKSOFT_TYPE_SOFT
#define T32_BP_IMPL_ONCHIP  0x02    // EMU_BREAKSOFT_TYPE_ONCHIP
#define T32_BP_IMPL_HARD    0x04    // EMU_BREAKSOFT_TYPE_HARD
#define T32_BP_IMPL_MARK    0x08    // EMU_BREAKSOFT_TYPE_MARK

/* Breakpoint handle */
typedef T32_BreakpointObj* T32_BreakpointHandle;

/* request breakpoint object */
int T32_RequestBreakpointObj        (T32_BreakpointHandle *pBpHandle);
int T32_RequestBreakpointObjAddr    (T32_BreakpointHandle *pBpHandle, const T32_AddressHandle addrHandle);
int T32_ReleaseBreakpointObj        (T32_BreakpointHandle *pBpHandle);

/* breakpoint object access */
int T32_SetBreakpointObjAddress (T32_BreakpointHandle bpHandle, T32_AddressHandle addrHandle);
int T32_GetBreakpointObjAddress (T32_BreakpointHandle bpHandle, T32_AddressHandle* pAddrHandle);
int T32_SetBreakpointObjType    (T32_BreakpointHandle bpHandle, uint32_t   type);
int T32_GetBreakpointObjType    (T32_BreakpointHandle bpHandle, uint32_t* pType);
int T32_SetBreakpointObjImpl    (T32_BreakpointHandle bpHandle, uint32_t   impl);
int T32_GetBreakpointObjImpl    (T32_BreakpointHandle bpHandle, uint32_t* pImpl);
int T32_SetBreakpointObjEnable  (T32_BreakpointHandle bpHandle, uint8_t   enable);
int T32_GetBreakpointObjEnable  (T32_BreakpointHandle bpHandle, uint8_t* pEnable);

/** Memory access API **/

/* read/write length */
typedef uint32_t T32_Length;

int T32_ReadMemoryObj (T32_BufferHandle bufferHandle,
    const T32_AddressHandle addressHandle, const T32_Length length);

int T32_WriteMemoryObj (T32_BufferHandle bufferHandle,
    const T32_AddressHandle addressHandle, const T32_Length length);

/** Register access API **/

int T32_ReadRegisterObj (
    T32_RegisterHandle registerHandle);

int T32_WriteRegisterObj (
    T32_RegisterHandle registerHandle);

/** Symbol access API **/

int T32_QuerySymbolObj (
    T32_SymbolHandle symbolHandle);             // symbol to query information

/** Breakpoint access API **/

int T32_WriteBreakpointObj          (T32_BreakpointHandle handle, int set);
int T32_QueryBreakpointObjCount     (uint32_t* pCount);
int T32_ReadBreakpointObj           (T32_BreakpointHandle handle);      // by address
int T32_ReadBreakpointObjByIndex    (T32_BreakpointHandle handle, uint32_t index);

/*******************************/
/*  FDX related API functions  */
/*******************************/

int  T32_Fdx_Resolve    (const char *Name);
int  T32_Fdx_Open       (const char *Name, const char *Mode);
int  T32_Fdx_Close      (int Channel);
int  T32_Fdx_Receive    (int Channel, void *pData, int Width, int MaxSize);
int  T32_Fdx_ReceivePoll(int Channel, void *pData, int Width, int MaxSize);
int  T32_Fdx_Send       (int Channel, void *pData, int Width, int Size);
int  T32_Fdx_SendPoll   (int Channel, void *pData, int Width, int Size);

#define SHIFTRAW_OPTION_NONE             0x0000
#define SHIFTRAW_OPTION_LASTTMS_ONE      0x0008
#define SHIFTRAW_OPTION_TMS_ZERO         0x0000
#define SHIFTRAW_OPTION_TMS_ONE          0x0010
#define SHIFTRAW_OPTION_TDI_ZERO         0x0000
#define SHIFTRAW_OPTION_TDI_LASTTDO      0x0020
#define SHIFTRAW_OPTION_TDI_ONE          0x0040

#define T32_I2CACCESS_ACTION_WRITE           0  /* preliminary*/
#define T32_I2CACCESS_ACTION_READ            1  /* preliminary*/
#define T32_I2CACCESS_ACTION_READ_NONAK      2  /* preliminary*/

#define T32_I2CACCESS_RESULT_OK       0  /* preliminary*/
#define T32_I2CACCESS_RESULT_DEVIDNAK 2  /* preliminary*/
#define T32_I2CACCESS_RESULT_CMDNAK   3  /* preliminary*/
#define T32_I2CACCESS_RESULT_DATANAK  4  /* preliminary*/
#define T32_I2CACCESS_RESULT_SDAZERO  5  /* preliminary*/
#define T32_I2CACCESS_RESULT_SCLZERO  6  /* preliminary*/
#define T32_I2CACCESS_RESULT_NODRIVER 7  /* preliminary*/
#define T32_I2CACCESS_RESULT_TIMEOUT  8  /* preliminary*/

#define T32_I2C_RAWACC_SEND_START      0x00000100  /* preliminary*/
#define T32_I2C_RAWACC_SEND_STOP       0x00000200  /* preliminary*/
#define T32_I2C_RAWACC_SEND_ACK        0x00000400  /* preliminary*/
#define T32_I2C_RAWACC_SEND_IGNNAK     0x00000800  /* preliminary*/
#define T32_I2C_RAWACC_RECV_ACK        0x00000100  /* preliminary*/
#define T32_I2C_RAWACC_RECV_ERR        0x00000200  /* preliminary*/
#define T32_I2C_RAWACC_RECVERR_NOACK   0x00010000  /* preliminary*/
#define T32_I2C_RAWACC_RECVERR_ARB     0x00020000  /* preliminary*/
#define T32_I2C_RAWACC_RECVERR_TIMEOUT 0x00030000  /* preliminary*/


typedef union {
    uint32_t uint32;
} T32_Param;



#define LINE_MSIZE                          16640
