from __future__ import annotations


class T32API_STUBS:
    LINE_MSIZE = 16640
    SHIFTRAW_OPTION_LASTTMS_ONE = 8
    SHIFTRAW_OPTION_NONE = 0
    SHIFTRAW_OPTION_TDI_LASTTDO = 32
    SHIFTRAW_OPTION_TDI_ONE = 64
    SHIFTRAW_OPTION_TDI_ZERO = 0
    SHIFTRAW_OPTION_TMS_ONE = 16
    SHIFTRAW_OPTION_TMS_ZERO = 0
    T32ADDROBJATTR_EACCESS = 1
    T32ADDROBJATTR_VERIFY = 2
    T32_ADDRTYPE_A32 = 2
    T32_ADDRTYPE_A64 = 3
    T32_ADDRTYPE_COMMON = 1
    T32_ADDRTYPE_MAX = 4
    T32_ADDRTYPE_NONE = 0
    T32_API_NOTIFICATION = 6
    T32_API_RECEIVE = 1
    T32_API_SYNCACKN = 18
    T32_API_SYNCBACK = 34
    T32_API_SYNCREQUEST = 2
    T32_BPACCESS_DELTA = 16
    T32_BPACCESS_E = 64
    T32_BPACCESS_ECHO = 32
    T32_BPACCESS_ONCHIP = 128
    T32_BPCONFIG_ALPHA = 32
    T32_BPCONFIG_BETA = 64
    T32_BPCONFIG_CHARLIE = 128
    T32_BPCONFIG_DELETE = 256
    T32_BPCONFIG_PROGRAM = 1
    T32_BPCONFIG_READ = 8
    T32_BPCONFIG_READWRITE = 24
    T32_BPCONFIG_SPOT = 4
    T32_BPCONFIG_WRITE = 16
    T32_BP_IMPL_AUTO = 0
    T32_BP_IMPL_HARD = 4
    T32_BP_IMPL_MARK = 8
    T32_BP_IMPL_ONCHIP = 2
    T32_BP_IMPL_SOFT = 1
    T32_BP_TYPE_PROGRAM = 1
    T32_BP_TYPE_READ = 2
    T32_BP_TYPE_RW = 6
    T32_BP_TYPE_WRITE = 4
    T32_COM_PARA_FAIL = -3
    T32_COM_RECEIVE_FAIL = -1
    T32_COM_SEQ_FAIL = -4
    T32_COM_TRANSMIT_FAIL = -2
    T32_DEV_ICD = 1
    T32_DEV_ICE = 1
    T32_DEV_OS = 0
    T32_ERR_COM_PARA_FAIL = -3
    T32_ERR_COM_RECEIVE_FAIL = -1
    T32_ERR_COM_SEQ_FAIL = -4
    T32_ERR_COM_TRANSMIT_FAIL = -2
    T32_ERR_FN1 = 90
    T32_ERR_FN2 = 91
    T32_ERR_FN3 = 92
    T32_ERR_FN4 = 93
    T32_ERR_GETRAM_INTERNAL = 4096
    T32_ERR_MALLOC_FAIL = -6
    T32_ERR_NOTIFY_MAX_EVENT = -5
    T32_ERR_READBPOBJ_NOTFOUND = 4242
    T32_ERR_READBPOBJ_PARAFAIL = 4241
    T32_ERR_READMEMOBJ_PARAFAIL = 4192
    T32_ERR_READREGBYNAME_FAILED = 4113
    T32_ERR_READREGBYNAME_NOTFOUND = 4112
    T32_ERR_READREGOBJ_MAXCORE = 4145
    T32_ERR_READREGOBJ_NOTFOUND = 4146
    T32_ERR_READREGOBJ_PARAFAIL = 4144
    T32_ERR_READREGSETOBJ_NUMREGS = 4148
    T32_ERR_READREGSETOBJ_PARAFAIL = 4147
    T32_ERR_READVAR_ACCESS = 4225
    T32_ERR_READVAR_ALLOC = 4224
    T32_ERR_SETBP_FAILED = 4176
    T32_ERR_STD_ACCESSTIMEOUT = 6
    T32_ERR_STD_ATTACH = 254
    T32_ERR_STD_BUSERROR = 16
    T32_ERR_STD_DEBUGPORTFAIL = 140
    T32_ERR_STD_DEBUGPORTTIMEOUT = 144
    T32_ERR_STD_EMUTIMEOUT = 162
    T32_ERR_STD_FAILED = 113
    T32_ERR_STD_FATAL = 255
    T32_ERR_STD_FDXBUFFER = 49
    T32_ERR_STD_INVALID = 10
    T32_ERR_STD_INVALIDLICENSE = 60
    T32_ERR_STD_LOCKED = 123
    T32_ERR_STD_NOMEM = 22
    T32_ERR_STD_NORAPI = 83
    T32_ERR_STD_NORTCK = 164
    T32_ERR_STD_NOTRUNNING = 3
    T32_ERR_STD_POWERFAIL = 128
    T32_ERR_STD_REGUNDEF = 14
    T32_ERR_STD_RESET = 4
    T32_ERR_STD_RESETDETECTED = 48
    T32_ERR_STD_RESETFAIL = 161
    T32_ERR_STD_RTCKTIMEOUT = 57
    T32_ERR_STD_RUNNING = 2
    T32_ERR_STD_USERSIGNAL = 67
    T32_ERR_STD_VERIFY = 15
    T32_ERR_WRITEBPOBJ_FAILED = 4257
    T32_ERR_WRITEMEMOBJ_PARAFAIL = 4208
    T32_ERR_WRITEREGBYNAME_FAILED = 4129
    T32_ERR_WRITEREGBYNAME_NOTFOUND = 4128
    T32_ERR_WRITEREGOBJ_FAILED = 4163
    T32_ERR_WRITEREGOBJ_MAXCORE = 4161
    T32_ERR_WRITEREGOBJ_NOTFOUND = 4162
    T32_ERR_WRITEREGOBJ_PARAFAIL = 4160
    T32_E_BREAK = 0
    T32_E_BREAKPOINTCONFIG = 2
    T32_E_EDIT = 1
    T32_E_ONEVENT = 3
    T32_Errno = 0
    T32_I2CACCESS_ACTION_READ = 1
    T32_I2CACCESS_ACTION_READ_NONAK = 2
    T32_I2CACCESS_ACTION_WRITE = 0
    T32_I2CACCESS_RESULT_CMDNAK = 3
    T32_I2CACCESS_RESULT_DATANAK = 4
    T32_I2CACCESS_RESULT_DEVIDNAK = 2
    T32_I2CACCESS_RESULT_NODRIVER = 7
    T32_I2CACCESS_RESULT_OK = 0
    T32_I2CACCESS_RESULT_SCLZERO = 6
    T32_I2CACCESS_RESULT_SDAZERO = 5
    T32_I2CACCESS_RESULT_TIMEOUT = 8
    T32_I2C_RAWACC_RECVERR_ARB = 131072
    T32_I2C_RAWACC_RECVERR_NOACK = 65536
    T32_I2C_RAWACC_RECVERR_TIMEOUT = 196608
    T32_I2C_RAWACC_RECV_ACK = 256
    T32_I2C_RAWACC_RECV_ERR = 512
    T32_I2C_RAWACC_SEND_ACK = 1024
    T32_I2C_RAWACC_SEND_IGNNAK = 2048
    T32_I2C_RAWACC_SEND_START = 256
    T32_I2C_RAWACC_SEND_STOP = 512
    T32_MALLOC_FAIL = -6
    T32_MAX_EVENTS = 4
    T32_MAX_EVENT_FAIL = -5
    T32_MAX_REGISTERS = 200
    T32_MAX_REGNAME = 15
    T32_MAX_SYMNAME = 64
    T32_MAX_SYMPATH = 256
    T32_MEMORY_ACCESS_ARC_AUX = 2
    T32_MEMORY_ACCESS_ARM_ARM = 7
    T32_MEMORY_ACCESS_ARM_CP0 = 2
    T32_MEMORY_ACCESS_ARM_CP14 = 5
    T32_MEMORY_ACCESS_ARM_CP15 = 6
    T32_MEMORY_ACCESS_ARM_DAP = 14
    T32_MEMORY_ACCESS_ARM_DBG = 17
    T32_MEMORY_ACCESS_ARM_ETB = 11
    T32_MEMORY_ACCESS_ARM_ETM = 4
    T32_MEMORY_ACCESS_ARM_ICE = 3
    T32_MEMORY_ACCESS_ARM_PHYSICAL_ARM = 9
    T32_MEMORY_ACCESS_ARM_PHYSICAL_DATA = 12
    T32_MEMORY_ACCESS_ARM_PHYSICAL_PROGRAM = 13
    T32_MEMORY_ACCESS_ARM_PHYSICAL_THUMB = 10
    T32_MEMORY_ACCESS_ARM_THUMB = 8
    T32_MEMORY_ACCESS_ARM_USR = 15
    T32_MEMORY_ACCESS_DATA = 0
    T32_MEMORY_ACCESS_MMUBYPASS = 32768
    T32_MEMORY_ACCESS_PPC_DCR = 3
    T32_MEMORY_ACCESS_PPC_SPR = 2
    T32_MEMORY_ACCESS_PROGRAM = 1
    T32_MEMORY_ACCESS_USR = 15
    T32_MEMORY_ACCESS_VM = 16
    T32_MEMORY_ACCESS_X86_IO = 4
    T32_MEMORY_ACCESS_X86_LD = 2
    T32_MEMORY_ACCESS_X86_LP = 3
    T32_MEMORY_ACCESS_X86_MSR = 5
    T32_MEMORY_ACCESS_XTENSA_DAP = 14
    T32_MEMORY_ACCESS_XTENSA_SPR = 2
    T32_MEMORY_ATTR_DUALPORT = 1024
    T32_MEMORY_ATTR_NOINCREMENT = 16384
    T32_MEMORY_ATTR_WIDTHMASK = 15
    T32_MMUTRANSLATION_TO_LINEAR = 3
    T32_MMUTRANSLATION_TO_LOGICAL = 2
    T32_MMUTRANSLATION_TO_PHYSICAL = 1
    T32_OK = 0
    T32_PCKLEN_MAX = 1472
    T32_PRINTCODE_ASCII = 65
    T32_PRINTCODE_ASCIIE = 67
    T32_PRINTCODE_ASCIIP = 66
    T32_PRINTCODE_CSV = 68
    T32_PRINTCODE_XML = 69
    T32_REGTYPE_COMMON = 1
    T32_REGTYPE_MAX = 7
    T32_REGTYPE_NONE = 0
    T32_REGTYPE_R128 = 4
    T32_REGTYPE_R256 = 5
    T32_REGTYPE_R32 = 2
    T32_REGTYPE_R512 = 6
    T32_REGTYPE_R64 = 3
    T32_SIZEOFMAU_128BIT = 128
    T32_SIZEOFMAU_12BIT = 12
    T32_SIZEOFMAU_16BIT = 16
    T32_SIZEOFMAU_24BIT = 24
    T32_SIZEOFMAU_256BIT = 256
    T32_SIZEOFMAU_32BIT = 32
    T32_SIZEOFMAU_64BIT = 64
    T32_SIZEOFMAU_8BIT = 8
    T32_SIZEOFMAU_NOTSET = 0
    T32_SIZEOFMAU_TARGET = 1

    def T32_APILock(self, *args):
        """
        <cdata 'int(*)(int)' 0x00007FFB99301140>

        :arg 0: int nTimeoutMS
        :returns: int
        """

    def T32_APIUnlock(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB99301240>

        :arg 0: void
        :returns: int
        """

    def T32_Attach(self, *args):
        """
        <cdata 'int(*)(int)' 0x00007FFB993016F0>

        :arg 0: int DeviceSpecifier
        :returns: int
        """

    def T32_Break(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB993037C0>

        :arg 0: void
        :returns: int
        """

    def T32_Cmd(self, *args):
        """
        <cdata 'int(*)(char *)' 0x00007FFB99303870>

        :arg 0: const char *Command
        :returns: int
        """

    def T32_CmdWin(self, *args):
        """
        <cdata 'int(*)(uint32_t, char *)' 0x00007FFB99303D10>

        :arg 0: uint32_t WindowHandle
        :arg 1: const char *Command
        :returns: int
        """

    def T32_Cmd_f(self, *args):
        """
        <cdata 'int(*)(char *, ...)' 0x00007FFB99303A10>

        :arg 0: const char *command
        :arg 1: ...
        :returns: int
        """

    def T32_Config(self, *args):
        """
        <cdata 'int(*)(char *, char *)' 0x00007FFB9930FFB0>

        :arg 0: const char *String1
        :arg 1: const char *String2
        :returns: int
        """

    def T32_CopyAddressObj(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj * *, T32_AddressObj *)' 0x00007FFB99305D40>

        :arg 0: T32_AddressHandle *pToHandle
        :arg 1: T32_AddressHandle fromHandle
        :returns: int
        """

    def T32_CopyDataFromBufferObj(self, *args):
        """
        <cdata 'int(*)(uint8_t *, int, T32_BufferObj *)' 0x00007FFB99305A00>

        :arg 0: uint8_t *localbuffer
        :arg 1: int lbsize
        :arg 2: T32_BufferHandle handle
        :returns: int
        """

    def T32_CopyDataToBufferObj(self, *args):
        """
        <cdata 'int(*)(T32_BufferObj *, int, uint8_t *)' 0x00007FFB99305A80>

        :arg 0: T32_BufferHandle handle
        :arg 1: int size
        :arg 2: const uint8_t *localbuffer
        :returns: int
        """

    def T32_EvalGet(self, *args):
        """
        <cdata 'int(*)(uint32_t *)' 0x00007FFB99303ED0>

        :arg 0: uint32_t *pEvaluationResult
        :returns: int
        """

    def T32_EvalGetString(self, *args):
        """
        <cdata 'int(*)(char *)' 0x00007FFB99304160>

        :arg 0: char *EvaluationString
        :returns: int
        """

    def T32_Exit(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB99310050>

        :arg 0: void
        :returns: int
        """

    def T32_Fdx_Close(self, *args):
        """
        <cdata 'int(*)(int)' 0x00007FFB9930A8C0>

        :arg 0: int Channel
        :returns: int
        """

    def T32_Fdx_Open(self, *args):
        """
        <cdata 'int(*)(char *, char *)' 0x00007FFB9930A790>

        :arg 0: const char *Name
        :arg 1: const char *Mode
        :returns: int
        """

    def T32_Fdx_Receive(self, *args):
        """
        <cdata 'int(*)(int, void *, int, int)' 0x00007FFB9930AC60>

        :arg 0: int Channel
        :arg 1: void *pData
        :arg 2: int Width
        :arg 3: int MaxSize
        :returns: int
        """

    def T32_Fdx_ReceivePoll(self, *args):
        """
        <cdata 'int(*)(int, void *, int, int)' 0x00007FFB9930AA80>

        :arg 0: int Channel
        :arg 1: void *pData
        :arg 2: int Width
        :arg 3: int MaxSize
        :returns: int
        """

    def T32_Fdx_Resolve(self, *args):
        """
        <cdata 'int(*)(char *)' 0x00007FFB9930A990>

        :arg 0: const char *Name
        :returns: int
        """

    def T32_Fdx_Send(self, *args):
        """
        <cdata 'int(*)(int, void *, int, int)' 0x00007FFB9930B000>

        :arg 0: int Channel
        :arg 1: void *pData
        :arg 2: int Width
        :arg 3: int Size
        :returns: int
        """

    def T32_Fdx_SendPoll(self, *args):
        """
        <cdata 'int(*)(int, void *, int, int)' 0x00007FFB9930AE60>

        :arg 0: int Channel
        :arg 1: void *pData
        :arg 2: int Width
        :arg 3: int Size
        :returns: int
        """

    def T32_GetAddressObjAccessString(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, char *, uint8_t)' 0x00007FFB99306030>

        :arg 0: T32_AddressHandle handle
        :arg 1: char* accessString
        :arg 2: uint8_t maxlen
        :returns: int
        """

    def T32_GetAddressObjAddr32(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, uint32_t *)' 0x00007FFB99305EB0>

        :arg 0: T32_AddressHandle handle
        :arg 1: uint32_t *pAddress
        :returns: int
        """

    def T32_GetAddressObjAddr64(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, uint64_t *)' 0x00007FFB99305F70>

        :arg 0: T32_AddressHandle handle
        :arg 1: uint64_t *pAddress
        :returns: int
        """

    def T32_GetAddressObjSizeOfMau(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, T32_SizeOfMauType *)' 0x00007FFB99306170>

        :arg 0: T32_AddressHandle handle
        :arg 1: T32_SizeOfMauType* pSizeOfMau
        :returns: int
        """

    def T32_GetAddressObjTargetSizeOfMau(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, T32_SizeOfMauType *)' 0x00007FFB993061A0>

        :arg 0: T32_AddressHandle handle
        :arg 1: T32_SizeOfMauType* pTargetSizeOfMau
        :returns: int
        """

    def T32_GetApiRevision(self, *args):
        """
        <cdata 'int(*)(uint32_t *)' 0x00007FFB99301000>

        :arg 0: uint32_t* pRevNum
        :returns: int
        """

    def T32_GetBreakpointList(self, *args):
        """
        <cdata 'int(*)(int *, T32_Breakpoint *, int)' 0x00007FFB993032E0>

        :arg 0: int *pNumberFetched
        :arg 1: T32_Breakpoint *pBPSettings
        :arg 2: int FetchLimit
        :returns: int
        """

    def T32_GetBreakpointObjAddress(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj *, T32_AddressObj * *)' 0x00007FFB99307B30>

        :arg 0: T32_BreakpointHandle bpHandle
        :arg 1: T32_AddressHandle* pAddrHandle
        :returns: int
        """

    def T32_GetBreakpointObjEnable(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj *, uint8_t *)' 0x00007FFB99307BA0>

        :arg 0: T32_BreakpointHandle bpHandle
        :arg 1: uint8_t* pEnable
        :returns: int
        """

    def T32_GetBreakpointObjImpl(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj *, uint32_t *)' 0x00007FFB99307AC0>

        :arg 0: T32_BreakpointHandle bpHandle
        :arg 1: uint32_t* pImpl
        :returns: int
        """

    def T32_GetBreakpointObjType(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj *, uint32_t *)' 0x00007FFB99307A70>

        :arg 0: T32_BreakpointHandle bpHandle
        :arg 1: uint32_t* pType
        :returns: int
        """

    def T32_GetBufferObjStoragePointer(self, *args):
        """
        <cdata 'int(*)(uint8_t * *, T32_BufferObj *)' 0x00007FFB993059D0>

        :arg 0: uint8_t** ppointer
        :arg 1: T32_BufferHandle handle
        :returns: int
        """

    def T32_GetChannelDefaults(self, *args):
        """
        <cdata 'void(*)(void *)' 0x00007FFB993010E0>

        :arg 0: void *ParametersOut
        :returns: void
        """

    def T32_GetChannelSize(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB993010A0>

        :arg 0: void
        :returns: int
        """

    def T32_GetCpuInfo(self, *args):
        """
        <cdata 'int(*)(char * *, uint16_t *, uint16_t *, uint16_t *)' 0x00007FFB993018B0>

        :arg 0: char **pCPUString
        :arg 1: uint16_t *pFPUType
        :arg 2: uint16_t *pEndianess
        :arg 3: uint16_t *pReserved
        :returns: int
        """

    def T32_GetLastErrorMessage(self, *args):
        """
        <cdata 'int(*)(char *, uint32_t *, uint32_t *)' 0x00007FFB99305210>

        :arg 0: char *ErrorMessage
        :arg 1: uint32_t* pLastError
        :arg 2: uint32_t* pInternal
        :returns: int
        """

    def T32_GetMessage(self, *args):
        """
        <cdata 'int(*)(char *, uint16_t *)' 0x00007FFB99303FA0>

        :arg 0: char *AreaMessage
        :arg 1: uint16_t *pMessageType
        :returns: int
        """

    def T32_GetPracticeState(self, *args):
        """
        <cdata 'int(*)(int *)' 0x00007FFB99303C40>

        :arg 0: int *pPracticeState
        :returns: int
        """

    def T32_GetRam(self, *args):
        """
        <cdata 'int(*)(uint32_t *, uint32_t *, uint16_t *)' 0x00007FFB99301A20>

        :arg 0: uint32_t *pStartAddress
        :arg 1: uint32_t *pEndAddress
        :arg 2: uint16_t *pAccess
        :returns: int
        """

    def T32_GetRegisterObjId(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *, uint32_t *)' 0x00007FFB99307030>

        :arg 0: T32_RegisterHandle handle
        :arg 1: uint32_t *pRegId
        :returns: int
        """

    def T32_GetRegisterObjName(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *, char *, uint8_t)' 0x00007FFB99306F80>

        :arg 0: T32_RegisterHandle handle
        :arg 1: char* regName
        :arg 2: uint8_t maxlen
        :returns: int
        """

    def T32_GetRegisterObjValue32(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *, uint32_t *)' 0x00007FFB99306750>

        :arg 0: T32_RegisterHandle handle
        :arg 1: uint32_t *pValue
        :returns: int
        """

    def T32_GetRegisterObjValue64(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *, uint64_t *)' 0x00007FFB993068C0>

        :arg 0: T32_RegisterHandle handle
        :arg 1: uint64_t *pValue
        :returns: int
        """

    def T32_GetRegisterObjValueArray(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *, uint8_t *, uint8_t)' 0x00007FFB99306C10>

        :arg 0: T32_RegisterHandle handle
        :arg 1: uint8_t *pArray
        :arg 2: uint8_t maxlen
        :returns: int
        """

    def T32_GetSelectedSource(self, *args):
        """
        <cdata 'int(*)(char *, uint32_t *)' 0x00007FFB99304480>

        :arg 0: char *SourceFile
        :arg 1: uint32_t *pSourceLine
        :returns: int
        """

    def T32_GetSource(self, *args):
        """
        <cdata 'int(*)(uint32_t, char *, uint32_t *)' 0x00007FFB99304380>

        :arg 0: uint32_t Address
        :arg 1: char *SourceFile
        :arg 2: uint32_t *pSourceLine
        :returns: int
        """

    def T32_GetState(self, *args):
        """
        <cdata 'int(*)(int *)' 0x00007FFB993017B0>

        :arg 0: int *pSystemState
        :returns: int
        """

    def T32_GetSymbol(self, *args):
        """
        <cdata 'int(*)(char *, uint32_t *, uint32_t *, uint32_t *)' 0x00007FFB99304230>

        :arg 0: const char *SymbolName
        :arg 1: uint32_t *pAddress
        :arg 2: uint32_t *pSize
        :arg 3: uint32_t *pAccess
        :returns: int
        """

    def T32_GetSymbolFromAddress(self, *args):
        """
        <cdata 'int(*)(char *, uint32_t, int)' 0x00007FFB99304B90>

        :arg 0: char* SymbolName
        :arg 1: uint32_t Address
        :arg 2: int StringLength
        :returns: int
        """

    def T32_GetSymbolObjAddress(self, *args):
        """
        <cdata 'int(*)(T32_SymbolObj *, T32_AddressObj * *)' 0x00007FFB99307850>

        :arg 0: T32_SymbolHandle symHandle
        :arg 1: T32_AddressHandle* pAddrHandle
        :returns: int
        """

    def T32_GetSymbolObjName(self, *args):
        """
        <cdata 'int(*)(T32_SymbolObj *, char *, uint8_t)' 0x00007FFB99307780>

        :arg 0: T32_SymbolHandle handle
        :arg 1: char* symName
        :arg 2: uint8_t maxlen
        :returns: int
        """

    def T32_GetSymbolObjSize(self, *args):
        """
        <cdata 'int(*)(T32_SymbolObj *, uint64_t *)' 0x00007FFB99307890>

        :arg 0: T32_SymbolHandle symHandle
        :arg 1: uint64_t* pSize
        :returns: int
        """

    def T32_GetTraceState(self, *args):
        """
        <cdata 'int(*)(int, int *, int32_t *, int32_t *, int32_t *)' 0x00007FFB99304EE0>

        :arg 0: int TraceType
        :arg 1: int *pTraceState
        :arg 2: int32_t *pTraceTotalRecords
        :arg 3: int32_t *pCurrentRecordMin
        :arg 4: int32_t *pCurrentRecordMax
        :returns: int
        """

    def T32_GetTriggerMessage(self, *args):
        """
        <cdata 'int(*)(char *)' 0x00007FFB99304090>

        :arg 0: char *TriggerMessage
        :returns: int
        """

    def T32_GetWindowContent(self, *args):
        """
        <cdata 'int(*)(char *, char *, uint32_t, uint32_t, uint32_t)' 0x00007FFB993049D0>

        :arg 0: const char *command
        :arg 1: char * buffer
        :arg 2: uint32_t requested
        :arg 3: uint32_t offset
        :arg 4: uint32_t print_code
        :returns: int
        """

    def T32_Go(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB99303710>

        :arg 0: void
        :returns: int
        """

    def T32_Init(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB993106A0>

        :arg 0: void
        :returns: int
        """

    def T32_Nop(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB99301420>

        :arg 0: void
        :returns: int
        """

    def T32_NopEx(self, *args):
        """
        <cdata 'int(*)(int, int)' 0x00007FFB993012F0>

        :arg 0: int length
        :arg 1: int options
        :returns: int
        """

    def T32_NopFail(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB99301450>

        :arg 0: void
        :returns: int
        """

    def T32_Ping(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB993014D0>

        :arg 0: void
        :returns: int
        """

    def T32_Printf(self, *args):
        """
        <cdata 'int(*)(char *, ...)' 0x00007FFB99303AE0>

        :arg 0: const char *str
        :arg 1: ...
        :returns: int
        """

    def T32_QueryAddressObjMmuTranslation(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, uint16_t)' 0x00007FFB99307BF0>

        :arg 0: T32_AddressHandle handle
        :arg 1: uint16_t translation
        :returns: int
        """

    def T32_QueryAddressObjTargetSizeOfMau(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *)' 0x00007FFB99308430>

        :arg 0: T32_AddressHandle handle
        :returns: int
        """

    def T32_QueryBreakpointObjCount(self, *args):
        """
        <cdata 'int(*)(uint32_t *)' 0x00007FFB9930A680>

        :arg 0: uint32_t* pCount
        :returns: int
        """

    def T32_QuerySymbolObj(self, *args):
        """
        <cdata 'int(*)(T32_SymbolObj *)' 0x00007FFB99309850>

        :returns: None
        """

    def T32_ReadBreakpoint(self, *args):
        """
        <cdata 'int(*)(uint32_t, int, uint16_t *, int)' 0x00007FFB99303100>

        :arg 0: uint32_t Address
        :arg 1: int Access
        :arg 2: uint16_t *pBPConfiguration
        :arg 3: int Size
        :returns: int
        """

    def T32_ReadBreakpointObj(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj *)' 0x00007FFB99309D90>

        :arg 0: T32_BreakpointHandle handle
        :returns: int
        """

    def T32_ReadBreakpointObjByIndex(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj *, uint32_t)' 0x00007FFB9930A180>

        :arg 0: T32_BreakpointHandle handle
        :arg 1: uint32_t index
        :returns: int
        """

    def T32_ReadMemory(self, *args):
        """
        <cdata 'int(*)(uint32_t, int, uint8_t *, int)' 0x00007FFB993022A0>

        :arg 0: uint32_t Address
        :arg 1: int Access
        :arg 2: uint8_t *pBuffer
        :arg 3: int Size
        :returns: int
        """

    def T32_ReadMemoryEx(self, *args):
        """
        <cdata 'int(*)(uint32_t, int, int, int, uint8_t *, int)' 0x00007FFB99302430>

        :arg 0: uint32_t Address
        :arg 1: int Segment
        :arg 2: int Access
        :arg 3: int Attribute
        :arg 4: uint8_t *pBuffer
        :arg 5: int Size
        :returns: int
        """

    def T32_ReadMemoryObj(self, *args):
        """
        <cdata 'int(*)(T32_BufferObj *, T32_AddressObj *, uint32_t)' 0x00007FFB99308550>

        :returns: None
        """

    def T32_ReadPP(self, *args):
        """
        <cdata 'int(*)(uint32_t *)' 0x00007FFB99302ED0>

        :arg 0: uint32_t *pProgramCounter
        :returns: int
        """

    def T32_ReadRegister(self, *args):
        """
        <cdata 'int(*)(uint32_t, uint32_t, uint32_t *)' 0x00007FFB99302A30>

        :arg 0: const char *RegisterName
        :arg 1: uint32_t *pValueLower32Bit
        :arg 2: uint32_t *pValueUpper32Bit
        :returns: int
        """

    def T32_ReadRegisterByName(self, *args):
        """
        <cdata 'int(*)(char *, uint32_t *, uint32_t *)' 0x00007FFB99302C10>

        :arg 0: const char *RegisterName
        :arg 1: uint32_t *pValueLower32Bit
        :arg 2: uint32_t *pValueUpper32Bit
        :returns: int
        """

    def T32_ReadRegisterObj(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *)' 0x00007FFB993089A0>

        :returns: None
        """

    def T32_ReadTrace(self, *args):
        """
        <cdata 'int(*)(int, int32_t, int, uint32_t, uint8_t *)' 0x00007FFB99304FF0>

        :arg 0: int TraceType
        :arg 1: int32_t StartRecord
        :arg 2: int NumberOfRecords
        :arg 3: uint32_t Mask
        :arg 4: uint8_t *pBuffer
        :returns: int
        """

    def T32_ReadVariableString(self, *args):
        """
        <cdata 'int(*)(char *, char *, int)' 0x00007FFB99304830>

        :arg 0: const char *VariableName
        :arg 1: char *StringFromNumeric
        :arg 2: int StringLength
        :returns: int
        """

    def T32_ReadVariableValue(self, *args):
        """
        <cdata 'int(*)(char *, uint32_t *, uint32_t *)' 0x00007FFB99304570>

        :arg 0: const char *VariableName
        :arg 1: uint32_t *pValueLower32Bit
        :arg 2: uint32_t *pValueUpper32Bit
        :returns: int
        """

    def T32_ReleaseAddressObj(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj * *)' 0x00007FFB99305D10>

        :arg 0: T32_AddressHandle *pHandle
        :returns: int
        """

    def T32_ReleaseAllObjects(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB99305300>

        :arg 0: void
        :returns: int
        """

    def T32_ReleaseBreakpointObj(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj * *)' 0x00007FFB99307A10>

        :arg 0: T32_BreakpointHandle *pBpHandle
        :returns: int
        """

    def T32_ReleaseBufferObj(self, *args):
        """
        <cdata 'int(*)(T32_BufferObj * *)' 0x00007FFB99305990>

        :arg 0: T32_BufferHandle *pHandle
        :returns: int
        """

    def T32_ReleaseRegisterObj(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj * *)' 0x00007FFB993065F0>

        :arg 0: T32_RegisterHandle *pHandle
        :returns: int
        """

    def T32_ReleaseSymbolObj(self, *args):
        """
        <cdata 'int(*)(T32_SymbolObj * *)' 0x00007FFB993076A0>

        :arg 0: T32_SymbolHandle *pHandle
        :returns: int
        """

    def T32_RequestAddressObj(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj * *)' 0x00007FFB99305AF0>

        :arg 0: T32_AddressHandle *pHandle
        :returns: int
        """

    def T32_RequestAddressObjA32(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj * *, uint32_t)' 0x00007FFB99305C00>

        :arg 0: T32_AddressHandle *pHandle
        :arg 1: const uint32_t address
        :returns: int
        """

    def T32_RequestAddressObjA64(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj * *, uint64_t)' 0x00007FFB99305C80>

        :arg 0: T32_AddressHandle *pHandle
        :arg 1: const uint64_t address
        :returns: int
        """

    def T32_RequestBreakpointObj(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj * *)' 0x00007FFB993078C0>

        :arg 0: T32_BreakpointHandle *pBpHandle
        :returns: int
        """

    def T32_RequestBreakpointObjAddr(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj * *, T32_AddressObj *)' 0x00007FFB99307980>

        :arg 0: T32_BreakpointHandle *pBpHandle
        :arg 1: const T32_AddressHandle addrHandle
        :returns: int
        """

    def T32_RequestBufferObj(self, *args):
        """
        <cdata 'int(*)(T32_BufferObj * *, int)' 0x00007FFB993057F0>

        :arg 0: T32_BufferHandle *pHandle
        :arg 1: const int initial_size
        :returns: int
        """

    def T32_RequestRegisterObj(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj * *, T32_RegisterObjType)' 0x00007FFB993061D0>

        :arg 0: T32_RegisterHandle *pHandle
        :arg 1: const T32_RegisterObjType regType
        :returns: int
        """

    def T32_RequestRegisterObjR128(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj * *)' 0x00007FFB99306470>

        :arg 0: T32_RegisterHandle *pHandle
        :returns: int
        """

    def T32_RequestRegisterObjR128Name(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj * *, char *)' 0x00007FFB993064A0>

        :arg 0: T32_RegisterHandle *pHandle
        :arg 1: const char* regName
        :returns: int
        """

    def T32_RequestRegisterObjR256(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj * *)' 0x00007FFB993064F0>

        :arg 0: T32_RegisterHandle *pHandle
        :returns: int
        """

    def T32_RequestRegisterObjR256Name(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj * *, char *)' 0x00007FFB99306520>

        :arg 0: T32_RegisterHandle *pHandle
        :arg 1: const char* regName
        :returns: int
        """

    def T32_RequestRegisterObjR32(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj * *)' 0x00007FFB993062C0>

        :arg 0: T32_RegisterHandle *pHandle
        :returns: int
        """

    def T32_RequestRegisterObjR32Name(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj * *, char *)' 0x00007FFB993062F0>

        :arg 0: T32_RegisterHandle *pHandle
        :arg 1: const char* regName
        :returns: int
        """

    def T32_RequestRegisterObjR512(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj * *)' 0x00007FFB99306570>

        :arg 0: T32_RegisterHandle *pHandle
        :returns: int
        """

    def T32_RequestRegisterObjR512Name(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj * *, char *)' 0x00007FFB993065A0>

        :arg 0: T32_RegisterHandle *pHandle
        :arg 1: const char* regName
        :returns: int
        """

    def T32_RequestRegisterObjR64(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj * *)' 0x00007FFB993063F0>

        :arg 0: T32_RegisterHandle *pHandle
        :returns: int
        """

    def T32_RequestRegisterObjR64Name(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj * *, char *)' 0x00007FFB99306420>

        :arg 0: T32_RegisterHandle *pHandle
        :arg 1: const char* regName
        :returns: int
        """

    def T32_RequestSymbolObj(self, *args):
        """
        <cdata 'int(*)(T32_SymbolObj * *)' 0x00007FFB99307490>

        :arg 0: T32_SymbolHandle *pHandle
        :returns: int
        """

    def T32_RequestSymbolObjAddr(self, *args):
        """
        <cdata 'int(*)(T32_SymbolObj * *, T32_AddressObj *)' 0x00007FFB99307600>

        :arg 0: T32_SymbolHandle *pSymHandle
        :arg 1: const T32_AddressHandle addrHandle
        :returns: int
        """

    def T32_RequestSymbolObjName(self, *args):
        """
        <cdata 'int(*)(T32_SymbolObj * *, char *)' 0x00007FFB99307540>

        :arg 0: T32_SymbolHandle *pHandle
        :arg 1: const char* symName
        :returns: int
        """

    def T32_ResetCPU(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB99301B40>

        :arg 0: void
        :returns: int
        """

    def T32_ResizeBufferObj(self, *args):
        """
        <cdata 'int(*)(T32_BufferObj *, int)' 0x00007FFB99305940>

        :arg 0: T32_BufferHandle handle
        :arg 1: const int size
        :returns: int
        """

    def T32_SetAddressObjAccessString(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, char *)' 0x00007FFB99305FE0>

        :arg 0: T32_AddressHandle handle
        :arg 1: const char *accessString
        :returns: int
        """

    def T32_SetAddressObjAddr32(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, uint32_t)' 0x00007FFB99305E30>

        :arg 0: T32_AddressHandle handle
        :arg 1: uint32_t address
        :returns: int
        """

    def T32_SetAddressObjAddr64(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, uint64_t)' 0x00007FFB99305F00>

        :arg 0: T32_AddressHandle handle
        :arg 1: uint64_t address
        :returns: int
        """

    def T32_SetAddressObjAttr(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, uint32_t)' 0x00007FFB99306120>

        :arg 0: T32_AddressHandle handle
        :arg 1: uint32_t attributes
        :returns: int
        """

    def T32_SetAddressObjCore(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, uint16_t)' 0x00007FFB993060D0>

        :arg 0: T32_AddressHandle handle
        :arg 1: uint16_t core
        :returns: int
        """

    def T32_SetAddressObjSizeOfMau(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, T32_SizeOfMauType)' 0x00007FFB99306150>

        :arg 0: T32_AddressHandle handle
        :arg 1: T32_SizeOfMauType sizeofmau
        :returns: int
        """

    def T32_SetAddressObjSpaceId(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, uint32_t)' 0x00007FFB99306100>

        :arg 0: T32_AddressHandle handle
        :arg 1: uint32_t spaceid
        :returns: int
        """

    def T32_SetAddressObjWidth(self, *args):
        """
        <cdata 'int(*)(T32_AddressObj *, uint16_t)' 0x00007FFB993060A0>

        :arg 0: T32_AddressHandle handle
        :arg 1: uint16_t width
        :returns: int
        """

    def T32_SetBreakpointObjAddress(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj *, T32_AddressObj *)' 0x00007FFB99307AF0>

        :arg 0: T32_BreakpointHandle bpHandle
        :arg 1: T32_AddressHandle addrHandle
        :returns: int
        """

    def T32_SetBreakpointObjEnable(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj *, uint8_t)' 0x00007FFB99307B70>

        :arg 0: T32_BreakpointHandle bpHandle
        :arg 1: uint8_t   enable
        :returns: int
        """

    def T32_SetBreakpointObjImpl(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj *, uint32_t)' 0x00007FFB99307AA0>

        :arg 0: T32_BreakpointHandle bpHandle
        :arg 1: uint32_t   impl
        :returns: int
        """

    def T32_SetBreakpointObjType(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj *, uint32_t)' 0x00007FFB99307A50>

        :arg 0: T32_BreakpointHandle bpHandle
        :arg 1: uint32_t   type
        :returns: int
        """

    def T32_SetChannel(self, *args):
        """
        <cdata 'void(*)(void *)' 0x00007FFB99301110>

        :arg 0: void *ParametersIn
        :returns: void
        """

    def T32_SetMemoryAccessClass(self, *args):
        """
        <cdata 'int(*)(char *)' 0x00007FFB99302750>

        :arg 0: const char* Access
        :returns: int
        """

    def T32_SetMode(self, *args):
        """
        <cdata 'int(*)(int)' 0x00007FFB99303640>

        :arg 0: int Mode
        :returns: int
        """

    def T32_SetRegisterObjCore(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *, uint16_t)' 0x00007FFB99307060>

        :arg 0: T32_RegisterHandle handle
        :arg 1: uint16_t core
        :returns: int
        """

    def T32_SetRegisterObjId(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *, uint32_t)' 0x00007FFB99307000>

        :arg 0: T32_RegisterHandle handle
        :arg 1: uint32_t regId
        :returns: int
        """

    def T32_SetRegisterObjName(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *, char *)' 0x00007FFB99306F00>

        :arg 0: T32_RegisterHandle handle
        :arg 1: const char* regName
        :returns: int
        """

    def T32_SetRegisterObjValue32(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *, uint32_t)' 0x00007FFB99306630>

        :arg 0: T32_RegisterHandle handle
        :arg 1: uint32_t value
        :returns: int
        """

    def T32_SetRegisterObjValue64(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *, uint64_t)' 0x00007FFB993067B0>

        :arg 0: T32_RegisterHandle handle
        :arg 1: uint64_t value
        :returns: int
        """

    def T32_SetRegisterObjValueArray(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *, uint8_t *, uint8_t)' 0x00007FFB99306940>

        :arg 0: T32_RegisterHandle handle
        :arg 1: uint8_t *pArray
        :arg 2: uint8_t maxlen
        :returns: int
        """

    def T32_SetSymbolObjAddress(self, *args):
        """
        <cdata 'int(*)(T32_SymbolObj *, T32_AddressObj *)' 0x00007FFB99307800>

        :arg 0: T32_SymbolHandle symHandle
        :arg 1: T32_AddressHandle addrHandle
        :returns: int
        """

    def T32_SetSymbolObjName(self, *args):
        """
        <cdata 'int(*)(T32_SymbolObj *, char *)' 0x00007FFB993076E0>

        :arg 0: T32_SymbolHandle handle
        :arg 1: const char* symName
        :returns: int
        """

    def T32_Step(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB993034C0>

        :arg 0: void
        :returns: int
        """

    def T32_StepMode(self, *args):
        """
        <cdata 'int(*)(int)' 0x00007FFB99303570>

        :arg 0: int Mode
        :returns: int
        """

    def T32_Stop(self, *args):
        """
        <cdata 'int(*)()' 0x00007FFB99301580>

        :arg 0: void
        :returns: int
        """

    def T32_Terminate(self, *args):
        """
        <cdata 'int(*)(int)' 0x00007FFB99301630>

        :arg 0: int ShellReturnValue
        :returns: int
        """

    def T32_WriteBreakpoint(self, *args):
        """
        <cdata 'int(*)(uint32_t, int, int, int)' 0x00007FFB99302FA0>

        :arg 0: uint32_t Address
        :arg 1: int Access
        :arg 2: int        BPConfiguration
        :arg 3: int Size
        :returns: int
        """

    def T32_WriteBreakpointObj(self, *args):
        """
        <cdata 'int(*)(T32_BreakpointObj *, int)' 0x00007FFB9930A2D0>

        :arg 0: T32_BreakpointHandle handle
        :arg 1: int set
        :returns: int
        """

    def T32_WriteMemory(self, *args):
        """
        <cdata 'int(*)(uint32_t, int, uint8_t *, int)' 0x00007FFB99301BF0>

        :arg 0: uint32_t Address
        :arg 1: int Access
        :arg 2: const uint8_t *pBuffer
        :arg 3: int Size
        :returns: int
        """

    def T32_WriteMemoryEx(self, *args):
        """
        <cdata 'int(*)(uint32_t, int, int, int, uint8_t *, int)' 0x00007FFB99301F80>

        :arg 0: uint32_t Address
        :arg 1: int Segment
        :arg 2: int Access
        :arg 3: int Attribute
        :arg 4: uint8_t *pBuffer
        :arg 5: int Size
        :returns: int
        """

    def T32_WriteMemoryObj(self, *args):
        """
        <cdata 'int(*)(T32_BufferObj *, T32_AddressObj *, uint32_t)' 0x00007FFB99308780>

        :returns: None
        """

    def T32_WriteMemoryPipe(self, *args):
        """
        <cdata 'int(*)(uint32_t, int, uint8_t *, int)' 0x00007FFB99301D60>

        :arg 0: uint32_t Address
        :arg 1: int Access
        :arg 2: const uint8_t *pBuffer
        :arg 3: int Size
        :returns: int
        """

    def T32_WriteRegister(self, *args):
        """
        <cdata 'int(*)(uint32_t, uint32_t, uint32_t *)' 0x00007FFB99302870>

        :arg 0: const char *RegisterName
        :arg 1: uint32_t ValueLower32Bit
        :arg 2: uint32_t ValueUpper32Bit
        :returns: int
        """

    def T32_WriteRegisterByName(self, *args):
        """
        <cdata 'int(*)(char *, uint32_t, uint32_t)' 0x00007FFB99302D70>

        :arg 0: const char *RegisterName
        :arg 1: uint32_t ValueLower32Bit
        :arg 2: uint32_t ValueUpper32Bit
        :returns: int
        """

    def T32_WriteRegisterObj(self, *args):
        """
        <cdata 'int(*)(T32_RegisterObj *)' 0x00007FFB99309040>

        :returns: None
        """

    def T32_WriteVariableValue(self, *args):
        """
        <cdata 'int(*)(char *, uint32_t, uint32_t)' 0x00007FFB993046D0>

        :arg 0: const char *VariableName
        :arg 1: uint32_t ValueLower32Bit
        :arg 2: uint32_t ValueUpper32Bit
        :returns: int
        """
