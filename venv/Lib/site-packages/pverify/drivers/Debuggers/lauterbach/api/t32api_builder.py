from __future__ import annotations

import os
import re

from cffi import FFI
from jinja2 import Template


def build():
    ffibuilder = FFI()
    ffibuilder.set_source("t32api_cffi", None)

    with open(os.path.join(os.path.dirname(__file__), "t32_cffi.h")) as f:
        ffibuilder.cdef(f.read())
    ffibuilder.compile(verbose=True)


def create_stubs():
    from t32api_cffi import ffi

    dll = ffi.dlopen("../t32api64.dll")
    content = dir(dll)

    api_constants = []
    api_functions = []

    with open("t32_cffi.h") as f:
        header = f.read()

    for c in content:
        if hasattr(dll, c):
            dll_c = getattr(dll, c)

            if dll_c.__class__.__name__ == "CData":
                res = re.findall(rf"(.*) +{c}.*\((.*)\);", header)
                if len(res) > 0:
                    args = [x.strip() for x in res[0][1].split(",")]
                    args = list(zip(range(len(args)), args))
                    returns = res[0][0]
                else:
                    args = []
                    returns = None
                api_functions.append({"fname": c, "args": args, "returns": returns, "repr": str(dll_c)})
            elif isinstance(dll_c, int):
                api_constants.append({"constname": c, "value": dll_c})
            else:
                print("Unknown" + str(dll_c))

    template = Template(
        '''
class T32API_STUBS:
    {% for const in api_constants %}
    {{ const["constname"] }} = {{ const["value"] }}{% endfor %}

    {% for f in api_functions %}
    def {{ f["fname"] }}(self, *args):
        """
        {{ f["repr"] }}
        {% for i, a in f["args"] %}
        :arg {{ i }}: {{ a }}{% endfor %}
        :returns: {{ f["returns"] }}
        """
        pass
    {% endfor %}
'''
    )
    with open("t32api_stubs.py", "w") as f:
        f.write(template.render(api_functions=api_functions, api_constants=api_constants))


if __name__ == "__main__":
    build()
    create_stubs()
