from __future__ import annotations

T32_ERRORS = {
    -3: "T32_ERR_COM_PARA_FAIL",
    -1: "T32_ERR_COM_RECEIVE_FAIL",
    -4: "T32_ERR_COM_SEQ_FAIL",
    -2: "T32_ERR_COM_TRANSMIT_FAIL",
    90: "T32_ERR_FN1",
    91: "T32_ERR_FN2",
    92: "T32_ERR_FN3",
    93: "T32_ERR_FN4",
    4096: "T32_ERR_GETRAM_INTERNAL",
    -6: "T32_ERR_MALLOC_FAIL",
    -5: "T32_ERR_NOTIFY_MAX_EVENT",
    4242: "T32_ERR_READBPOBJ_NOTFOUND",
    4241: "T32_ERR_READBPOBJ_PARAFAIL",
    4192: "T32_ERR_READMEMOBJ_PARAFAIL",
    4113: "T32_ERR_READREGBYNAME_FAILED",
    4112: "T32_ERR_READREGBYNAME_NOTFOUND",
    4145: "T32_ERR_READREGOBJ_MAXCORE",
    4146: "T32_ERR_READREGOBJ_NOTFOUND",
    4144: "T32_ERR_READREGOBJ_PARAFAIL",
    4148: "T32_ERR_READREGSETOBJ_NUMREGS",
    4147: "T32_ERR_READREGSETOBJ_PARAFAIL",
    4225: "T32_ERR_READVAR_ACCESS",
    4224: "T32_ERR_READVAR_ALLOC",
    4176: "T32_ERR_SETBP_FAILED",
    6: "T32_ERR_STD_ACCESSTIMEOUT",
    254: "T32_ERR_STD_ATTACH",
    16: "T32_ERR_STD_BUSERROR",
    140: "T32_ERR_STD_DEBUGPORTFAIL",
    144: "T32_ERR_STD_DEBUGPORTTIMEOUT",
    162: "T32_ERR_STD_EMUTIMEOUT",
    113: "T32_ERR_STD_FAILED",
    255: "T32_ERR_STD_FATAL",
    49: "T32_ERR_STD_FDXBUFFER",
    10: "T32_ERR_STD_INVALID",
    60: "T32_ERR_STD_INVALIDLICENSE",
    123: "T32_ERR_STD_LOCKED",
    22: "T32_ERR_STD_NOMEM",
    83: "T32_ERR_STD_NORAPI",
    164: "T32_ERR_STD_NORTCK",
    3: "T32_ERR_STD_NOTRUNNING",
    128: "T32_ERR_STD_POWERFAIL",
    14: "T32_ERR_STD_REGUNDEF",
    4: "T32_ERR_STD_RESET",
    48: "T32_ERR_STD_RESETDETECTED",
    161: "T32_ERR_STD_RESETFAIL",
    57: "T32_ERR_STD_RTCKTIMEOUT",
    2: "T32_ERR_STD_RUNNING",
    67: "T32_ERR_STD_USERSIGNAL",
    15: "T32_ERR_STD_VERIFY",
    4257: "T32_ERR_WRITEBPOBJ_FAILED",
    4208: "T32_ERR_WRITEMEMOBJ_PARAFAIL",
    4129: "T32_ERR_WRITEREGBYNAME_FAILED",
    4128: "T32_ERR_WRITEREGBYNAME_NOTFOUND",
    4163: "T32_ERR_WRITEREGOBJ_FAILED",
    4161: "T32_ERR_WRITEREGOBJ_MAXCORE",
    4162: "T32_ERR_WRITEREGOBJ_NOTFOUND",
    4160: "T32_ERR_WRITEREGOBJ_PARAFAIL",
}


class T32_Error(Exception):
    def __init__(self, code):
        self.code = int(code)
        self.desc = T32_ERRORS[self.code]

    def __str__(self):
        return f"T32_Error ({self.code}): {self.desc}"


def check_error(status):
    if status in T32_ERRORS:
        raise T32_Error(status)
