from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .ke2100_dllwrap import *


class ke2100(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = ke2100_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ConfigureMeasurement(self, Function, Range, Resolution):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureMeasurement(self._vi, Function, Range, Resolution)

    def ConfigureFrequencyVoltageRange(self, FrequencyVoltageRange):
        """

        :param FrequencyVoltageRange:
        :type FrequencyVoltageRange:
        """
        return self._dllwrap.ConfigureFrequencyVoltageRange(self._vi, FrequencyVoltageRange)

    def ConfigureACBandwidth(self, MinFreq, MaxFreq):
        """

        :param MinFreq:
        :type MinFreq:
        :param MaxFreq:
        :type MaxFreq:
        """
        return self._dllwrap.ConfigureACBandwidth(self._vi, MinFreq, MaxFreq)

    def ConfigureTransducerType(self, TransducerType):
        """

        :param TransducerType:
        :type TransducerType:
        """
        return self._dllwrap.ConfigureTransducerType(self._vi, TransducerType)

    def ConfigureFixedRefJunction(self, FixedRefJunction):
        """

        :param FixedRefJunction:
        :type FixedRefJunction:
        """
        return self._dllwrap.ConfigureFixedRefJunction(self._vi, FixedRefJunction)

    def ConfigureThermistor(self, Resistance):
        """

        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.ConfigureThermistor(self._vi, Resistance)

    def ConfigureRTD(self, Alpha, Resistance):
        """

        :param Alpha:
        :type Alpha:
        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.ConfigureRTD(self._vi, Alpha, Resistance)

    def ConfigureThermocouple(self, ThermocoupleType, RefJunctionType):
        """

        :param ThermocoupleType:
        :type ThermocoupleType:
        :param RefJunctionType:
        :type RefJunctionType:
        """
        return self._dllwrap.ConfigureThermocouple(self._vi, ThermocoupleType, RefJunctionType)

    def ConfigureTriggerSlope(self, Polarity):
        """

        :param Polarity:
        :type Polarity:
        """
        return self._dllwrap.ConfigureTriggerSlope(self._vi, Polarity)

    def ConfigureTrigger(self, TriggerSource, TriggerDelay):
        """

        :param TriggerSource:
        :type TriggerSource:
        :param TriggerDelay:
        :type TriggerDelay:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, TriggerSource, TriggerDelay)

    def GetApertureTimeInfo(self):
        """"""
        return self._dllwrap.GetApertureTimeInfo(self._vi)

    def GetAutoRangeValue(self):
        """"""
        return self._dllwrap.GetAutoRangeValue(self._vi)

    def ConfigureAutoZeroMode(self, AutoZeroMode):
        """

        :param AutoZeroMode:
        :type AutoZeroMode:
        """
        return self._dllwrap.ConfigureAutoZeroMode(self._vi, AutoZeroMode)

    def ConfigurePowerLineFrequency(self, PowerLineFreq):
        """

        :param PowerLineFreq:
        :type PowerLineFreq:
        """
        return self._dllwrap.ConfigurePowerLineFrequency(self._vi, PowerLineFreq)

    def ConfigureMeasCompleteDest(self, MeasCompleteDest):
        """

        :param MeasCompleteDest:
        :type MeasCompleteDest:
        """
        return self._dllwrap.ConfigureMeasCompleteDest(self._vi, MeasCompleteDest)

    def ConfigureMultiPoint(self, TriggerCount, SampleCount, SampleTrigger, SampleInterval):
        """

        :param TriggerCount:
        :type TriggerCount:
        :param SampleCount:
        :type SampleCount:
        :param SampleTrigger:
        :type SampleTrigger:
        :param SampleInterval:
        :type SampleInterval:
        """
        return self._dllwrap.ConfigureMultiPoint(self._vi, TriggerCount, SampleCount, SampleTrigger, SampleInterval)

    def Read(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Read(self._vi, MaxTimeMilliseconds)

    def ReadMultiPoint(self, MaxTimeMilliseconds, ArraySize):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ArraySize:
        :type ArraySize:
        """
        return self._dllwrap.ReadMultiPoint(self._vi, MaxTimeMilliseconds, ArraySize)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def Fetch(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Fetch(self._vi, MaxTimeMilliseconds)

    def FetchMultiPoint(self, MaxTimeMilliseconds, ArraySize):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ArraySize:
        :type ArraySize:
        """
        return self._dllwrap.FetchMultiPoint(self._vi, MaxTimeMilliseconds, ArraySize)

    def Initiate(self):
        """"""
        return self._dllwrap.Initiate(self._vi)

    def IsOverRange(self, MeasurementValue):
        """

        :param MeasurementValue:
        :type MeasurementValue:
        """
        return self._dllwrap.IsOverRange(self._vi, MeasurementValue)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def QueryConfiguration(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.QueryConfiguration(self._vi, ValBufferSize)

    def Measure(self, Function, Range, Resolution):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.Measure(self._vi, Function, Range, Resolution)

    def Configure(self, Function, Range, Resolution):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.Configure(self._vi, Function, Range, Resolution)

    def GetRange(self):
        """"""
        return self._dllwrap.GetRange(self._vi)

    def SetRange(self, Range):
        """

        :param Range:
        :type Range:
        """
        return self._dllwrap.SetRange(self._vi, Range)

    def GetResolution2(self):
        """"""
        return self._dllwrap.GetResolution2(self._vi)

    def SetResolution2(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.SetResolution2(self._vi, Resolution)

    def ResetStatusRegister(self):
        """"""
        return self._dllwrap.ResetStatusRegister(self._vi)

    def ClearStatusByte(self):
        """"""
        return self._dllwrap.ClearStatusByte(self._vi)

    def DisplayText(self, Text):
        """

        :param Text:
        :type Text:
        """
        return self._dllwrap.DisplayText(self._vi, Text)

    def QueryDisplayText(self):
        """"""
        return self._dllwrap.QueryDisplayText(self._vi)

    def ClearDisplayText(self):
        """"""
        return self._dllwrap.ClearDisplayText(self._vi)

    def Beep(self):
        """"""
        return self._dllwrap.Beep(self._vi)

    def SetMinMaxPercentTarget(self, MinMaxType):
        """

        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxPercentTarget(self._vi, MinMaxType)

    def SetMinMaxNullOffset(self, MinMaxType):
        """

        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxNullOffset(self._vi, MinMaxType)

    def SetMinMaxLimit(self, Type, MinMaxType):
        """

        :param Type:
        :type Type:
        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxLimit(self._vi, Type, MinMaxType)

    def SetMinMaxMXB(self, Type, MinMaxType):
        """

        :param Type:
        :type Type:
        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxMXB(self._vi, Type, MinMaxType)

    def SetMinMaxDBRelative(self, MinMaxType):
        """

        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxDBRelative(self._vi, MinMaxType)

    def SetMinMaxDBMReference(self, MinMaxType):
        """

        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxDBMReference(self._vi, MinMaxType)

    def GetLimit(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.GetLimit(self._vi, Type)

    def SetLimit(self, Type, Limit):
        """

        :param Type:
        :type Type:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.SetLimit(self._vi, Type, Limit)

    def GetMxb(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.GetMxb(self._vi, Type)

    def SetMxb(self, Type, MXB):
        """

        :param Type:
        :type Type:
        :param MXB:
        :type MXB:
        """
        return self._dllwrap.SetMxb(self._vi, Type, MXB)

    def OpenAll(self):
        """"""
        return self._dllwrap.OpenAll(self._vi)

    def GetFunction3(self, Channel, FunctionBufferSize):
        """

        :param Channel:
        :type Channel:
        :param FunctionBufferSize:
        :type FunctionBufferSize:
        """
        return self._dllwrap.GetFunction3(self._vi, Channel, FunctionBufferSize)

    def SetFunction3(self, Channel, Function):
        """

        :param Channel:
        :type Channel:
        :param Function:
        :type Function:
        """
        return self._dllwrap.SetFunction3(self._vi, Channel, Function)

    def Scan(self):
        """"""
        return self._dllwrap.Scan(self._vi)

    def Step(self):
        """"""
        return self._dllwrap.Step(self._vi)

    def Abort2(self):
        """"""
        return self._dllwrap.Abort2(self._vi)

    def Fetch2(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Fetch2(self._vi, MaxTimeMilliseconds)

    def FetchMultiPoint2(self, MaxTimeMilliseconds, ValBufferSize):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.FetchMultiPoint2(self._vi, MaxTimeMilliseconds, ValBufferSize)

    def Initiate2(self):
        """"""
        return self._dllwrap.Initiate2(self._vi)

    def IsOverRange2(self, MeasurementValue):
        """

        :param MeasurementValue:
        :type MeasurementValue:
        """
        return self._dllwrap.IsOverRange2(self._vi, MeasurementValue)

    def Read2(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Read2(self._vi, MaxTimeMilliseconds)

    def ReadMultiPoint2(self, MaxTimeMilliseconds, ValBufferSize):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadMultiPoint2(self._vi, MaxTimeMilliseconds, ValBufferSize)

    def SendSoftwareTrigger2(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger2(self._vi)

    def QueryDataPoints(self):
        """"""
        return self._dllwrap.QueryDataPoints(self._vi)

    def GetRange2(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetRange2(self._vi, Function)

    def SetRange2(self, Function, Range):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        """
        return self._dllwrap.SetRange2(self._vi, Function, Range)

    def SetMinMaxRange(self, Function, MinMaxType):
        """

        :param Function:
        :type Function:
        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxRange(self._vi, Function, MinMaxType)

    def GetAutoRangeState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAutoRangeState(self._vi, Function)

    def SetAutoRangeState(self, Function, AutoRangeState):
        """

        :param Function:
        :type Function:
        :param AutoRangeState:
        :type AutoRangeState:
        """
        return self._dllwrap.SetAutoRangeState(self._vi, Function, AutoRangeState)

    def GetResolution(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetResolution(self._vi, Function)

    def SetResolution(self, Function, Resolution):
        """

        :param Function:
        :type Function:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.SetResolution(self._vi, Function, Resolution)

    def SetMinMaxResolution(self, Function, MinMaxType):
        """

        :param Function:
        :type Function:
        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxResolution(self._vi, Function, MinMaxType)

    def GetNplCycles(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetNplCycles(self._vi, Function)

    def SetNplCycles(self, Function, NPLCycles):
        """

        :param Function:
        :type Function:
        :param NPLCycles:
        :type NPLCycles:
        """
        return self._dllwrap.SetNplCycles(self._vi, Function, NPLCycles)

    def SetMinMaxNPLCycles(self, Function, MinMaxType):
        """

        :param Function:
        :type Function:
        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxNPLCycles(self._vi, Function, MinMaxType)

    def GetAperture(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAperture(self._vi, Function)

    def SetAperture(self, Function, Aperture):
        """

        :param Function:
        :type Function:
        :param Aperture:
        :type Aperture:
        """
        return self._dllwrap.SetAperture(self._vi, Function, Aperture)

    def SetMinMaxAperture(self, Function, MinMaxType):
        """

        :param Function:
        :type Function:
        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxAperture(self._vi, Function, MinMaxType)

    def SetMinMaxDigitalFilterCount(self, MinMaxType):
        """

        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxDigitalFilterCount(self._vi, MinMaxType)

    def SetMinMaxSimulatedReferenceJunction(self, MinMaxType):
        """

        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxSimulatedReferenceJunction(self._vi, MinMaxType)

    def ConfigureUserDefinedType(self, Constant, Value):
        """

        :param Constant:
        :type Constant:
        :param Value:
        :type Value:
        """
        return self._dllwrap.ConfigureUserDefinedType(self._vi, Constant, Value)

    def SetMinMaxUserDefinedConstants(self, Constant, MinMaxType):
        """

        :param Constant:
        :type Constant:
        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxUserDefinedConstants(self._vi, Constant, MinMaxType)

    def QueryConstant(self, Constant):
        """

        :param Constant:
        :type Constant:
        """
        return self._dllwrap.QueryConstant(self._vi, Constant)

    def ConfigureSPRTDType(self, Constant, Value):
        """

        :param Constant:
        :type Constant:
        :param Value:
        :type Value:
        """
        return self._dllwrap.ConfigureSPRTDType(self._vi, Constant, Value)

    def SetMinMaxSPRTDConstants(self, Constant, MinMaxType):
        """

        :param Constant:
        :type Constant:
        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxSPRTDConstants(self._vi, Constant, MinMaxType)

    def QuerySPRTDConstant(self, Constant):
        """

        :param Constant:
        :type Constant:
        """
        return self._dllwrap.QuerySPRTDConstant(self._vi, Constant)

    def SetCountEnum(self, TriggerCountType):
        """

        :param TriggerCountType:
        :type TriggerCountType:
        """
        return self._dllwrap.SetCountEnum(self._vi, TriggerCountType)

    def SetMinMaxSampleCount(self, MinMaxType):
        """

        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxSampleCount(self._vi, MinMaxType)

    def ConfigureBandwidth(self, MinFreq, MaxFreq):
        """

        :param MinFreq:
        :type MinFreq:
        :param MaxFreq:
        :type MaxFreq:
        """
        return self._dllwrap.ConfigureBandwidth(self._vi, MinFreq, MaxFreq)

    def Configure2(self, Alpha, Resistance):
        """

        :param Alpha:
        :type Alpha:
        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.Configure2(self._vi, Alpha, Resistance)

    def Configure3(self, Type, RefJunctionType):
        """

        :param Type:
        :type Type:
        :param RefJunctionType:
        :type RefJunctionType:
        """
        return self._dllwrap.Configure3(self._vi, Type, RefJunctionType)

    def Configure4(self, TriggerSource, TriggerDelay):
        """

        :param TriggerSource:
        :type TriggerSource:
        :param TriggerDelay:
        :type TriggerDelay:
        """
        return self._dllwrap.Configure4(self._vi, TriggerSource, TriggerDelay)

    def SetMinMaxDelay(self, MinMaxType):
        """

        :param MinMaxType:
        :type MinMaxType:
        """
        return self._dllwrap.SetMinMaxDelay(self._vi, MinMaxType)

    def Configure5(self, TriggerCount, SampleCount, SampleTrigger, SampleInterval):
        """

        :param TriggerCount:
        :type TriggerCount:
        :param SampleCount:
        :type SampleCount:
        :param SampleTrigger:
        :type SampleTrigger:
        :param SampleInterval:
        :type SampleInterval:
        """
        return self._dllwrap.Configure5(self._vi, TriggerCount, SampleCount, SampleTrigger, SampleInterval)

    def Query(self, Command, ValBufferSize):
        """

        :param Command:
        :type Command:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.Query(self._vi, Command, ValBufferSize)

    def ReadPartialString(self, Length, ValBufferSize):
        """

        :param Length:
        :type Length:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadPartialString(self._vi, Length, ValBufferSize)

    def ReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadString(self._vi, ValBufferSize)

    def WriteString(self, Command):
        """

        :param Command:
        :type Command:
        """
        return self._dllwrap.WriteString(self._vi, Command)
