from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import ke2100_const as const
from .ke2100_const import *


class ke2100_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("Ke2100.dll", "Ke2100_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "ke2100"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.Ke2100_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.Ke2100_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.Ke2100_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.Ke2100_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.Ke2100_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(1024)
        status = self.dll.Ke2100_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.Ke2100_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, Vi):
        status = self.dll.Ke2100_ClearInterchangeWarnings(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(1024)
        status = self.dll.Ke2100_GetNextCoercionRecord(ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(1024)
        status = self.dll.Ke2100_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.Ke2100_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetInterchangeCheck(self, Vi):
        status = self.dll.Ke2100_ResetInterchangeCheck(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.Ke2100_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.Ke2100_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.Ke2100_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.Ke2100_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.Ke2100_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.Ke2100_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.Ke2100_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.Ke2100_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.Ke2100_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.Ke2100_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.Ke2100_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(1024)
        status = self.dll.Ke2100_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ke2100_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ke2100_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ke2100_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ke2100_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ke2100_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasurement(self, Vi, Function, Range, Resolution):
        status = self.dll.Ke2100_ConfigureMeasurement(
            ViSession(Vi), ViInt32(Function), ViReal64(Range), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyVoltageRange(self, Vi, FrequencyVoltageRange):
        status = self.dll.Ke2100_ConfigureFrequencyVoltageRange(ViSession(Vi), ViReal64(FrequencyVoltageRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureACBandwidth(self, Vi, MinFreq, MaxFreq):
        status = self.dll.Ke2100_ConfigureACBandwidth(ViSession(Vi), ViReal64(MinFreq), ViReal64(MaxFreq))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTransducerType(self, Vi, TransducerType):
        status = self.dll.Ke2100_ConfigureTransducerType(ViSession(Vi), ViInt32(TransducerType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFixedRefJunction(self, Vi, FixedRefJunction):
        status = self.dll.Ke2100_ConfigureFixedRefJunction(ViSession(Vi), ViReal64(FixedRefJunction))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureThermistor(self, Vi, Resistance):
        status = self.dll.Ke2100_ConfigureThermistor(ViSession(Vi), ViReal64(Resistance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRTD(self, Vi, Alpha, Resistance):
        status = self.dll.Ke2100_ConfigureRTD(ViSession(Vi), ViReal64(Alpha), ViReal64(Resistance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureThermocouple(self, Vi, ThermocoupleType, RefJunctionType):
        status = self.dll.Ke2100_ConfigureThermocouple(
            ViSession(Vi), ViInt32(ThermocoupleType), ViInt32(RefJunctionType)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerSlope(self, Vi, Polarity):
        status = self.dll.Ke2100_ConfigureTriggerSlope(ViSession(Vi), ViInt32(Polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, Vi, TriggerSource, TriggerDelay):
        status = self.dll.Ke2100_ConfigureTrigger(ViSession(Vi), ViInt32(TriggerSource), ViReal64(TriggerDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetApertureTimeInfo(self, Vi):
        ApertureTime = ViReal64()
        ApertureTimeUnits = ViInt32()
        status = self.dll.Ke2100_GetApertureTimeInfo(ViSession(Vi), byref(ApertureTime), byref(ApertureTimeUnits))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ApertureTime = float(ApertureTime.value)
        ApertureTimeUnits = int(ApertureTimeUnits.value)
        return ApertureTime, ApertureTimeUnits

    def GetAutoRangeValue(self, Vi):
        AutoRangeValue = ViReal64()
        status = self.dll.Ke2100_GetAutoRangeValue(ViSession(Vi), byref(AutoRangeValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AutoRangeValue.value)

    def ConfigureAutoZeroMode(self, Vi, AutoZeroMode):
        status = self.dll.Ke2100_ConfigureAutoZeroMode(ViSession(Vi), ViInt32(AutoZeroMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerLineFrequency(self, Vi, PowerLineFreq):
        status = self.dll.Ke2100_ConfigurePowerLineFrequency(ViSession(Vi), ViReal64(PowerLineFreq))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasCompleteDest(self, Vi, MeasCompleteDest):
        status = self.dll.Ke2100_ConfigureMeasCompleteDest(ViSession(Vi), ViInt32(MeasCompleteDest))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMultiPoint(self, Vi, TriggerCount, SampleCount, SampleTrigger, SampleInterval):
        status = self.dll.Ke2100_ConfigureMultiPoint(
            ViSession(Vi),
            ViInt32(TriggerCount),
            ViInt32(SampleCount),
            ViInt32(SampleTrigger),
            ViReal64(SampleInterval),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Read(self, Vi, MaxTimeMilliseconds):
        Reading = ViReal64()
        status = self.dll.Ke2100_Read(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Reading))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Reading.value)

    def ReadMultiPoint(self, Vi, MaxTimeMilliseconds, ArraySize):
        ReadingArray = ARRAY_ViReal64(ArraySize)
        ActualPts = ViInt32()
        status = self.dll.Ke2100_ReadMultiPoint(
            ViSession(Vi),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ArraySize),
            ReadingArray,
            byref(ActualPts),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReadingArray = list(ReadingArray)
        ActualPts = int(ActualPts.value)
        return ReadingArray, ActualPts

    def Abort(self, Vi):
        status = self.dll.Ke2100_Abort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Fetch(self, Vi, MaxTimeMilliseconds):
        Reading = ViReal64()
        status = self.dll.Ke2100_Fetch(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Reading))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Reading.value)

    def FetchMultiPoint(self, Vi, MaxTimeMilliseconds, ArraySize):
        ReadingArray = ARRAY_ViReal64(ArraySize)
        ActualPts = ViInt32()
        status = self.dll.Ke2100_FetchMultiPoint(
            ViSession(Vi),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ArraySize),
            ReadingArray,
            byref(ActualPts),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReadingArray = list(ReadingArray)
        ActualPts = int(ActualPts.value)
        return ReadingArray, ActualPts

    def Initiate(self, Vi):
        status = self.dll.Ke2100_Initiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsOverRange(self, Vi, MeasurementValue):
        IsOverRange = ViBoolean()
        status = self.dll.Ke2100_IsOverRange(ViSession(Vi), ViReal64(MeasurementValue), byref(IsOverRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(IsOverRange.value)

    def SendSoftwareTrigger(self, Vi):
        status = self.dll.Ke2100_SendSoftwareTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryConfiguration(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(1024)
        status = self.dll.Ke2100_QueryConfiguration(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def Measure(self, Vi, Function, Range, Resolution):
        Val = ViReal64()
        status = self.dll.Ke2100_Measure(
            ViSession(Vi),
            ViInt32(Function),
            ViReal64(Range),
            ViReal64(Resolution),
            byref(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def Configure(self, Vi, Function, Range, Resolution):
        status = self.dll.Ke2100_Configure(ViSession(Vi), ViInt32(Function), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRange(self, Vi):
        Range = ViReal64()
        status = self.dll.Ke2100_GetRange(ViSession(Vi), byref(Range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Range.value)

    def SetRange(self, Vi, Range):
        status = self.dll.Ke2100_SetRange(ViSession(Vi), ViReal64(Range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetResolution2(self, Vi):
        Resolution = ViReal64()
        status = self.dll.Ke2100_GetResolution2(ViSession(Vi), byref(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Resolution.value)

    def SetResolution2(self, Vi, Resolution):
        status = self.dll.Ke2100_SetResolution2(ViSession(Vi), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetStatusRegister(self, Vi):
        status = self.dll.Ke2100_ResetStatusRegister(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearStatusByte(self, Vi):
        status = self.dll.Ke2100_ClearStatusByte(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayText(self, Vi, Text):
        status = self.dll.Ke2100_DisplayText(ViSession(Vi), ViConstString(Text))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryDisplayText(self, Vi):
        status = self.dll.Ke2100_QueryDisplayText(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearDisplayText(self, Vi):
        status = self.dll.Ke2100_ClearDisplayText(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Beep(self, Vi):
        status = self.dll.Ke2100_Beep(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxPercentTarget(self, Vi, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxPercentTarget(ViSession(Vi), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxNullOffset(self, Vi, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxNullOffset(ViSession(Vi), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxLimit(self, Vi, Type, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxLimit(ViSession(Vi), ViInt32(Type), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxMXB(self, Vi, Type, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxMXB(ViSession(Vi), ViInt32(Type), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxDBRelative(self, Vi, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxDBRelative(ViSession(Vi), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxDBMReference(self, Vi, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxDBMReference(ViSession(Vi), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLimit(self, Vi, Type):
        Limit = ViReal64()
        status = self.dll.Ke2100_GetLimit(ViSession(Vi), ViInt32(Type), byref(Limit))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Limit.value)

    def SetLimit(self, Vi, Type, Limit):
        status = self.dll.Ke2100_SetLimit(ViSession(Vi), ViInt32(Type), ViReal64(Limit))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetMxb(self, Vi, Type):
        MXB = ViReal64()
        status = self.dll.Ke2100_GetMxb(ViSession(Vi), ViInt32(Type), byref(MXB))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(MXB.value)

    def SetMxb(self, Vi, Type, MXB):
        status = self.dll.Ke2100_SetMxb(ViSession(Vi), ViInt32(Type), ViReal64(MXB))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def OpenAll(self, Vi):
        status = self.dll.Ke2100_OpenAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFunction3(self, Vi, Channel, FunctionBufferSize):
        Function = ARRAY_ViChar(1024)
        status = self.dll.Ke2100_GetFunction3(ViSession(Vi), ViInt32(Channel), ViInt32(FunctionBufferSize), Function)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Function)

    def SetFunction3(self, Vi, Channel, Function):
        status = self.dll.Ke2100_SetFunction3(ViSession(Vi), ViInt32(Channel), ViConstString(Function))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Scan(self, Vi):
        status = self.dll.Ke2100_Scan(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Step(self, Vi):
        status = self.dll.Ke2100_Step(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Abort2(self, Vi):
        status = self.dll.Ke2100_Abort2(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Fetch2(self, Vi, MaxTimeMilliseconds):
        Val = ViReal64()
        status = self.dll.Ke2100_Fetch2(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def FetchMultiPoint2(self, Vi, MaxTimeMilliseconds, ValBufferSize):
        Val = ARRAY_ViReal64(1024)
        ValActualSize = ViInt32()
        status = self.dll.Ke2100_FetchMultiPoint2(
            ViSession(Vi),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def Initiate2(self, Vi):
        status = self.dll.Ke2100_Initiate2(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsOverRange2(self, Vi, MeasurementValue):
        Val = ViBoolean()
        status = self.dll.Ke2100_IsOverRange2(ViSession(Vi), ViReal64(MeasurementValue), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def Read2(self, Vi, MaxTimeMilliseconds):
        Val = ViReal64()
        status = self.dll.Ke2100_Read2(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ReadMultiPoint2(self, Vi, MaxTimeMilliseconds, ValBufferSize):
        Val = ARRAY_ViReal64(1024)
        ValActualSize = ViInt32()
        status = self.dll.Ke2100_ReadMultiPoint2(
            ViSession(Vi),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SendSoftwareTrigger2(self, Vi):
        status = self.dll.Ke2100_SendSoftwareTrigger2(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryDataPoints(self, Vi):
        Val = ViInt32()
        status = self.dll.Ke2100_QueryDataPoints(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def GetRange2(self, Vi, Function):
        Range = ViReal64()
        status = self.dll.Ke2100_GetRange2(ViSession(Vi), ViInt32(Function), byref(Range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Range.value)

    def SetRange2(self, Vi, Function, Range):
        status = self.dll.Ke2100_SetRange2(ViSession(Vi), ViInt32(Function), ViReal64(Range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxRange(self, Vi, Function, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxRange(ViSession(Vi), ViInt32(Function), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAutoRangeState(self, Vi, Function):
        AutoRangeState = ViBoolean()
        status = self.dll.Ke2100_GetAutoRangeState(ViSession(Vi), ViInt32(Function), byref(AutoRangeState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AutoRangeState.value)

    def SetAutoRangeState(self, Vi, Function, AutoRangeState):
        status = self.dll.Ke2100_SetAutoRangeState(ViSession(Vi), ViInt32(Function), ViBoolean(AutoRangeState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetResolution(self, Vi, Function):
        Resolution = ViReal64()
        status = self.dll.Ke2100_GetResolution(ViSession(Vi), ViInt32(Function), byref(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Resolution.value)

    def SetResolution(self, Vi, Function, Resolution):
        status = self.dll.Ke2100_SetResolution(ViSession(Vi), ViInt32(Function), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxResolution(self, Vi, Function, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxResolution(ViSession(Vi), ViInt32(Function), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNplCycles(self, Vi, Function):
        NPLCycles = ViReal64()
        status = self.dll.Ke2100_GetNplCycles(ViSession(Vi), ViInt32(Function), byref(NPLCycles))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(NPLCycles.value)

    def SetNplCycles(self, Vi, Function, NPLCycles):
        status = self.dll.Ke2100_SetNplCycles(ViSession(Vi), ViInt32(Function), ViReal64(NPLCycles))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxNPLCycles(self, Vi, Function, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxNPLCycles(ViSession(Vi), ViInt32(Function), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAperture(self, Vi, Function):
        Aperture = ViReal64()
        status = self.dll.Ke2100_GetAperture(ViSession(Vi), ViInt32(Function), byref(Aperture))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Aperture.value)

    def SetAperture(self, Vi, Function, Aperture):
        status = self.dll.Ke2100_SetAperture(ViSession(Vi), ViInt32(Function), ViReal64(Aperture))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxAperture(self, Vi, Function, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxAperture(ViSession(Vi), ViInt32(Function), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxDigitalFilterCount(self, Vi, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxDigitalFilterCount(ViSession(Vi), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxSimulatedReferenceJunction(self, Vi, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxSimulatedReferenceJunction(ViSession(Vi), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureUserDefinedType(self, Vi, Constant, Value):
        status = self.dll.Ke2100_ConfigureUserDefinedType(ViSession(Vi), ViInt32(Constant), ViReal64(Value))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxUserDefinedConstants(self, Vi, Constant, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxUserDefinedConstants(ViSession(Vi), ViInt32(Constant), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryConstant(self, Vi, Constant):
        Value = ViReal64()
        status = self.dll.Ke2100_QueryConstant(ViSession(Vi), ViInt32(Constant), byref(Value))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Value.value)

    def ConfigureSPRTDType(self, Vi, Constant, Value):
        status = self.dll.Ke2100_ConfigureSPRTDType(ViSession(Vi), ViInt32(Constant), ViReal64(Value))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxSPRTDConstants(self, Vi, Constant, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxSPRTDConstants(ViSession(Vi), ViInt32(Constant), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QuerySPRTDConstant(self, Vi, Constant):
        Value = ViReal64()
        status = self.dll.Ke2100_QuerySPRTDConstant(ViSession(Vi), ViInt32(Constant), byref(Value))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Value.value)

    def SetCountEnum(self, Vi, TriggerCountType):
        status = self.dll.Ke2100_SetCountEnum(ViSession(Vi), ViInt32(TriggerCountType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxSampleCount(self, Vi, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxSampleCount(ViSession(Vi), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureBandwidth(self, Vi, MinFreq, MaxFreq):
        status = self.dll.Ke2100_ConfigureBandwidth(ViSession(Vi), ViReal64(MinFreq), ViReal64(MaxFreq))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Configure2(self, Vi, Alpha, Resistance):
        status = self.dll.Ke2100_Configure2(ViSession(Vi), ViReal64(Alpha), ViReal64(Resistance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Configure3(self, Vi, Type, RefJunctionType):
        status = self.dll.Ke2100_Configure3(ViSession(Vi), ViInt32(Type), ViInt32(RefJunctionType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Configure4(self, Vi, TriggerSource, TriggerDelay):
        status = self.dll.Ke2100_Configure4(ViSession(Vi), ViInt32(TriggerSource), ViReal64(TriggerDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetMinMaxDelay(self, Vi, MinMaxType):
        status = self.dll.Ke2100_SetMinMaxDelay(ViSession(Vi), ViInt32(MinMaxType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Configure5(self, Vi, TriggerCount, SampleCount, SampleTrigger, SampleInterval):
        status = self.dll.Ke2100_Configure5(
            ViSession(Vi),
            ViInt32(TriggerCount),
            ViInt32(SampleCount),
            ViInt32(SampleTrigger),
            ViReal64(SampleInterval),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Query(self, Vi, Command, ValBufferSize):
        Val = ARRAY_ViChar(1024)
        status = self.dll.Ke2100_Query(ViSession(Vi), ViConstString(Command), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def ReadPartialString(self, Vi, Length, ValBufferSize):
        Val = ARRAY_ViChar(1024)
        status = self.dll.Ke2100_ReadPartialString(ViSession(Vi), ViInt32(Length), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def ReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.Ke2100_ReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def WriteString(self, Vi, Command):
        status = self.dll.Ke2100_WriteString(ViSession(Vi), ViConstString(Command))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
