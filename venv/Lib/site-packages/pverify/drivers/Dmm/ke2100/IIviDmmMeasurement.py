from __future__ import annotations

from .ke2100 import *


class IIviDmmMeasurement:
    def __init__(self, root):
        self.root = root

    def Initiate(self):
        """
        Initiates a measurement. When this method executes, the DMM leaves the idle
        state and waits for a trigger.
        """
        self.root.dllwrap.Initiate()

    def Abort(self):
        """
        Aborts a previously initiated measurement and returns the DMM to the idle state.
        """
        self.root.dllwrap.Abort()

    def Fetch(self, MaxTimeMilliseconds):
        """
        Returns the measured value from a measurement that the Initiate method
        initiates. If an overrange condition occurs, the value contains IEEE NaN and the
        method returns an overrange error.

        :param MaxTimeMilliseconds: The maximum time allowed for the measurement to complete in milliseconds. May
            also be a value defined in IviDmmMaxTimeEnum.
        :type MaxTimeMilliseconds: int

        :return: Measurement value.
        :rtype: float
        """
        return self.root.dllwrap.Fetch(MaxTimeMilliseconds)

    def FetchMultiPoint(self, MaxTimeMilliseconds):
        """
        Returns an array of values from a measurement that the Initiate method
        initiates. If an overrange condition occurs, the corresponding element of the
        array contains IEEE NaN and the method returns an overrange error.

        :param MaxTimeMilliseconds: The maximum time allowed for the measurement to complete in milliseconds. May
            also be a value defined in IviDmmMaxTimeEnum.
        :type MaxTimeMilliseconds: int

        :return: Array of measured values.
        :rtype: list[float]
        """
        samplepoints = self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 301)
        readingArray, actualPts = self.root.dllwrap.FetchMultiPoint(MaxTimeMilliseconds, samplepoints)
        return readingArray, actualPts

    def Read(self, MaxTimeMilliseconds):
        """
        Initiates a measurement, waits for the DMM to return to the idle state, and
        returns the measured value. If an overrange condition occurrs, the value
        contains IEEE NaN and the method returns an overrange error.

        :param MaxTimeMilliseconds: The maximum time allowed for the measurement to complete in milliseconds. May
            also be a value defined in IviDmmMaxTimeEnum.
        :type MaxTimeMilliseconds: int

        :return: Measurement value.
        :rtype: float
        """
        return self.root.dllwrap.Read(MaxTimeMilliseconds)

    def ReadMultiPoint(self, MaxTimeMilliseconds):
        """
        Initiates a measurement, waits for the DMM to return to the idle state, and
        returns an array of values. If an overrange condition occurs, the corresponding
        element of the array contains IEEE NaN and the method returns an overrange
        error.

        :param MaxTimeMilliseconds: The maximum time allowed for the measurement to complete in milliseconds. May
            also be a value defined in IviDmmMaxTimeEnum.
        :type MaxTimeMilliseconds: int

        :return: Array of measured values.
        :rtype: list[float]
        """
        samplepoints = self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 301)
        readingArray, actualPts = self.root.dllwrap.ReadMultiPoint(MaxTimeMilliseconds, samplepoints)
        return readingArray, actualPts

    def SendSoftwareTrigger(self):
        """
        Sends a software trigger, which causes the DMM to take a measurement.
        """
        self.root.dllwrap.SendSoftwareTrigger()

    def IsOverRange(self, MeasurementValue):
        """
        Takes a measurement value obtained from one of the Read or Fetch methods and
        determines if the value is a valid measurement value or a value indicating that
        an overrange condition occurred.

        :param MeasurementValue: The measurement value from one of the Read or Fetch functions.
        :type MeasurementValue: float

        :return: True if the measurement value indicates an overrange condition and false
            otherwise.
        :rtype: bool
        """
        return self.root.dllwrap.IsOverRange(MeasurementValue)
