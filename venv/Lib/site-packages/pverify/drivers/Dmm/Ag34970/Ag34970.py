from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .Ag34970_dllwrap import *


class Ag34970(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = Ag34970_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViInt64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViInt64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def AlarmUpperLimitListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.AlarmUpperLimitListQuery(self._vi, Chan_list, RetValBufferSize)

    def AlarmUpperLimitListConfig(self, Chan_list, UpperLimit):
        """

        :param Chan_list:
        :type Chan_list:
        :param UpperLimit:
        :type UpperLimit:
        """
        return self._dllwrap.AlarmUpperLimitListConfig(self._vi, Chan_list, UpperLimit)

    def AlarmUpperLimitEnableListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.AlarmUpperLimitEnableListQuery(self._vi, Chan_list, RetValBufferSize)

    def AlarmUpperLimitEnableListConfig(self, Chan_list, Enable):
        """

        :param Chan_list:
        :type Chan_list:
        :param Enable:
        :type Enable:
        """
        return self._dllwrap.AlarmUpperLimitEnableListConfig(self._vi, Chan_list, Enable)

    def AlarmLowerLimitListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.AlarmLowerLimitListQuery(self._vi, Chan_list, RetValBufferSize)

    def AlarmLowerLimitListConfig(self, Chan_list, LowerLimit):
        """

        :param Chan_list:
        :type Chan_list:
        :param LowerLimit:
        :type LowerLimit:
        """
        return self._dllwrap.AlarmLowerLimitListConfig(self._vi, Chan_list, LowerLimit)

    def AlarmLowerLimitEnableListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.AlarmLowerLimitEnableListQuery(self._vi, Chan_list, RetValBufferSize)

    def AlarmLowerLimitEnableListConfig(self, Chan_list, Enable):
        """

        :param Chan_list:
        :type Chan_list:
        :param Enable:
        :type Enable:
        """
        return self._dllwrap.AlarmLowerLimitEnableListConfig(self._vi, Chan_list, Enable)

    def AlarmClear(self, clearAll, Index):
        """

        :param clearAll:
        :type clearAll:
        :param Index:
        :type Index:
        """
        return self._dllwrap.AlarmClear(self._vi, clearAll, Index)

    def AlarmAlarmScanSetup(self, Chan_list, Channel, AlarmIndex, NumSweeps, UpperLimit):
        """

        :param Chan_list:
        :type Chan_list:
        :param Channel:
        :type Channel:
        :param AlarmIndex:
        :type AlarmIndex:
        :param NumSweeps:
        :type NumSweeps:
        :param UpperLimit:
        :type UpperLimit:
        """
        return self._dllwrap.AlarmAlarmScanSetup(self._vi, Chan_list, Channel, AlarmIndex, NumSweeps, UpperLimit)

    def AlarmGetLowerLimit(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.AlarmGetLowerLimit(self._vi, Channel)

    def AlarmSetLowerLimit(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.AlarmSetLowerLimit(self._vi, Channel, Val)

    def AlarmGetLowerLimitEnable(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.AlarmGetLowerLimitEnable(self._vi, Channel)

    def AlarmSetLowerLimitEnable(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.AlarmSetLowerLimitEnable(self._vi, Channel, Val)

    def AlarmGetSource(self, Index, RetValBufferSize):
        """

        :param Index:
        :type Index:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.AlarmGetSource(self._vi, Index, RetValBufferSize)

    def AlarmSetSource(self, Index, Val):
        """

        :param Index:
        :type Index:
        :param Val:
        :type Val:
        """
        return self._dllwrap.AlarmSetSource(self._vi, Index, Val)

    def AlarmGetUpperLimit(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.AlarmGetUpperLimit(self._vi, Channel)

    def AlarmSetUpperLimit(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.AlarmSetUpperLimit(self._vi, Channel, Val)

    def AlarmGetUpperLimitEnable(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.AlarmGetUpperLimitEnable(self._vi, Channel)

    def AlarmSetUpperLimitEnable(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.AlarmSetUpperLimitEnable(self._vi, Channel, Val)

    def viRead(self, BufferSize):
        """

        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.viRead(self._vi, BufferSize)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def viWrite(self, Count, Buffer):
        """

        :param Count:
        :type Count:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.viWrite(self._vi, Count, Buffer)

    def SystemWriteString(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, Data)

    def CalibrationPerformCalibration(self):
        """"""
        return self._dllwrap.CalibrationPerformCalibration(self._vi)

    def CalibrationSetSecureEnable(self, Code, Val):
        """

        :param Code:
        :type Code:
        :param Val:
        :type Val:
        """
        return self._dllwrap.CalibrationSetSecureEnable(self._vi, Code, Val)

    def CurrentACCurrentRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.CurrentACCurrentRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def CurrentACCurrentRangeListConfig(self, Chan_list, Range):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        """
        return self._dllwrap.CurrentACCurrentRangeListConfig(self._vi, Chan_list, Range)

    def CurrentACCurrentConfigure(self, Chan_list, Range, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.CurrentACCurrentConfigure(self._vi, Chan_list, Range, Resolution)

    def CurrentACCurrentBandwidthListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.CurrentACCurrentBandwidthListQuery(self._vi, Chan_list, RetValBufferSize)

    def CurrentACCurrentBandwidthListConfig(self, Chan_list, Bandwidth):
        """

        :param Chan_list:
        :type Chan_list:
        :param Bandwidth:
        :type Bandwidth:
        """
        return self._dllwrap.CurrentACCurrentBandwidthListConfig(self._vi, Chan_list, Bandwidth)

    def CurrentACCurrentAutoRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.CurrentACCurrentAutoRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def CurrentACCurrentAutoRangeListConfig(self, Chan_list, AutoRange):
        """

        :param Chan_list:
        :type Chan_list:
        :param AutoRange:
        :type AutoRange:
        """
        return self._dllwrap.CurrentACCurrentAutoRangeListConfig(self._vi, Chan_list, AutoRange)

    def CurrentACCurrentGetAutoRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.CurrentACCurrentGetAutoRange(self._vi, Channel)

    def CurrentACCurrentSetAutoRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.CurrentACCurrentSetAutoRange(self._vi, Channel, Val)

    def CurrentACCurrentGetBandwidth(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.CurrentACCurrentGetBandwidth(self._vi, Channel)

    def CurrentACCurrentSetBandwidth(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.CurrentACCurrentSetBandwidth(self._vi, Channel, Val)

    def CurrentACCurrentGetRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.CurrentACCurrentGetRange(self._vi, Channel)

    def CurrentACCurrentSetRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.CurrentACCurrentSetRange(self._vi, Channel, Val)

    def CurrentDCCurrentResolutionListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.CurrentDCCurrentResolutionListQuery(self._vi, Chan_list, RetValBufferSize)

    def CurrentDCCurrentResolutionListConfig(self, Chan_list, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.CurrentDCCurrentResolutionListConfig(self._vi, Chan_list, Resolution)

    def CurrentDCCurrentRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.CurrentDCCurrentRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def CurrentDCCurrentRangeListConfig(self, Chan_list, Range):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        """
        return self._dllwrap.CurrentDCCurrentRangeListConfig(self._vi, Chan_list, Range)

    def CurrentDCCurrentNPLCListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.CurrentDCCurrentNPLCListQuery(self._vi, Chan_list, RetValBufferSize)

    def CurrentDCCurrentNPLCListConfig(self, Chan_list, NumPLC):
        """

        :param Chan_list:
        :type Chan_list:
        :param NumPLC:
        :type NumPLC:
        """
        return self._dllwrap.CurrentDCCurrentNPLCListConfig(self._vi, Chan_list, NumPLC)

    def CurrentDCCurrentConfigure(self, Chan_list, Range, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.CurrentDCCurrentConfigure(self._vi, Chan_list, Range, Resolution)

    def CurrentDCCurrentAutoRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.CurrentDCCurrentAutoRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def CurrentDCCurrentAutoRangeListConfig(self, Chan_list, AutoRange):
        """

        :param Chan_list:
        :type Chan_list:
        :param AutoRange:
        :type AutoRange:
        """
        return self._dllwrap.CurrentDCCurrentAutoRangeListConfig(self._vi, Chan_list, AutoRange)

    def CurrentDCCurrentApertureListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.CurrentDCCurrentApertureListQuery(self._vi, Chan_list, RetValBufferSize)

    def CurrentDCCurrentApertureListConfig(self, Chan_list, Aperture):
        """

        :param Chan_list:
        :type Chan_list:
        :param Aperture:
        :type Aperture:
        """
        return self._dllwrap.CurrentDCCurrentApertureListConfig(self._vi, Chan_list, Aperture)

    def CurrentDCCurrentGetAperture(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.CurrentDCCurrentGetAperture(self._vi, Channel)

    def CurrentDCCurrentSetAperture(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.CurrentDCCurrentSetAperture(self._vi, Channel, Val)

    def CurrentDCCurrentGetAutoRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.CurrentDCCurrentGetAutoRange(self._vi, Channel)

    def CurrentDCCurrentSetAutoRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.CurrentDCCurrentSetAutoRange(self._vi, Channel, Val)

    def CurrentDCCurrentGetNPLC(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.CurrentDCCurrentGetNPLC(self._vi, Channel)

    def CurrentDCCurrentSetNPLC(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.CurrentDCCurrentSetNPLC(self._vi, Channel, Val)

    def CurrentDCCurrentGetRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.CurrentDCCurrentGetRange(self._vi, Channel)

    def CurrentDCCurrentSetRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.CurrentDCCurrentSetRange(self._vi, Channel, Val)

    def CurrentDCCurrentGetResolution(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.CurrentDCCurrentGetResolution(self._vi, Channel)

    def CurrentDCCurrentSetResolution(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.CurrentDCCurrentSetResolution(self._vi, Channel, Val)

    def DACVoltageListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.DACVoltageListQuery(self._vi, Chan_list, RetValBufferSize)

    def DACVoltageListConfig(self, Chan_list, Voltage):
        """

        :param Chan_list:
        :type Chan_list:
        :param Voltage:
        :type Voltage:
        """
        return self._dllwrap.DACVoltageListConfig(self._vi, Chan_list, Voltage)

    def DACGetVoltage(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.DACGetVoltage(self._vi, Channel)

    def DACSetVoltage(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.DACSetVoltage(self._vi, Channel, Val)

    def DiagnosticRelayCyclesClear(self, Chan_list):
        """

        :param Chan_list:
        :type Chan_list:
        """
        return self._dllwrap.DiagnosticRelayCyclesClear(self._vi, Chan_list)

    def DiagnosticDMMCyclesClear(self, Index):
        """

        :param Index:
        :type Index:
        """
        return self._dllwrap.DiagnosticDMMCyclesClear(self._vi, Index)

    def DigitalWriteWord(self, Chan_list, Data):
        """

        :param Chan_list:
        :type Chan_list:
        :param Data:
        :type Data:
        """
        return self._dllwrap.DigitalWriteWord(self._vi, Chan_list, Data)

    def DigitalWriteByte(self, Chan_list, Data):
        """

        :param Chan_list:
        :type Chan_list:
        :param Data:
        :type Data:
        """
        return self._dllwrap.DigitalWriteByte(self._vi, Chan_list, Data)

    def DigitalReadWord(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.DigitalReadWord(self._vi, Chan_list, RetValBufferSize)

    def DigitalReadByte(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.DigitalReadByte(self._vi, Chan_list, RetValBufferSize)

    def DigitalQueryLastWord(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.DigitalQueryLastWord(self._vi, Chan_list, RetValBufferSize)

    def DigitalQueryLastByte(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.DigitalQueryLastByte(self._vi, Chan_list, RetValBufferSize)

    def DigitalConfigRead(self, Chan_list):
        """

        :param Chan_list:
        :type Chan_list:
        """
        return self._dllwrap.DigitalConfigRead(self._vi, Chan_list)

    def DigitalCompTypeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.DigitalCompTypeListQuery(self._vi, Chan_list, RetValBufferSize)

    def DigitalCompTypeListConfig(self, Chan_list, Type):
        """

        :param Chan_list:
        :type Chan_list:
        :param Type:
        :type Type:
        """
        return self._dllwrap.DigitalCompTypeListConfig(self._vi, Chan_list, Type)

    def DigitalCompMaskListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.DigitalCompMaskListQuery(self._vi, Chan_list, RetValBufferSize)

    def DigitalCompMaskListConfig(self, Chan_list, Pattern):
        """

        :param Chan_list:
        :type Chan_list:
        :param Pattern:
        :type Pattern:
        """
        return self._dllwrap.DigitalCompMaskListConfig(self._vi, Chan_list, Pattern)

    def DigitalCompEnableListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.DigitalCompEnableListQuery(self._vi, Chan_list, RetValBufferSize)

    def DigitalCompEnableListConfig(self, Chan_list, Enable):
        """

        :param Chan_list:
        :type Chan_list:
        :param Enable:
        :type Enable:
        """
        return self._dllwrap.DigitalCompEnableListConfig(self._vi, Chan_list, Enable)

    def DigitalCompDataListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.DigitalCompDataListQuery(self._vi, Chan_list, RetValBufferSize)

    def DigitalCompDataListConfig(self, Chan_list, Pattern):
        """

        :param Chan_list:
        :type Chan_list:
        :param Pattern:
        :type Pattern:
        """
        return self._dllwrap.DigitalCompDataListConfig(self._vi, Chan_list, Pattern)

    def DigitalGetComparisonData(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.DigitalGetComparisonData(self._vi, Channel)

    def DigitalSetComparisonData(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.DigitalSetComparisonData(self._vi, Channel, Val)

    def DigitalGetComparisonEnable(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.DigitalGetComparisonEnable(self._vi, Channel)

    def DigitalSetComparisonEnable(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.DigitalSetComparisonEnable(self._vi, Channel, Val)

    def DigitalGetComparisonMask(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.DigitalGetComparisonMask(self._vi, Channel)

    def DigitalSetComparisonMask(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.DigitalSetComparisonMask(self._vi, Channel, Val)

    def DigitalGetComparisonType(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.DigitalGetComparisonType(self._vi, Channel)

    def DigitalSetComparisonType(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.DigitalSetComparisonType(self._vi, Channel, Val)

    def DisplayClearDisplay(self):
        """"""
        return self._dllwrap.DisplayClearDisplay(self._vi)

    def FrequencyRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.FrequencyRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def FrequencyRangeListConfig(self, Chan_list, Range):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        """
        return self._dllwrap.FrequencyRangeListConfig(self._vi, Chan_list, Range)

    def FrequencyLowRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.FrequencyLowRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def FrequencyLowRangeListConfig(self, Chan_list, Range):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        """
        return self._dllwrap.FrequencyLowRangeListConfig(self._vi, Chan_list, Range)

    def FrequencyConfigure(self, Chan_list, Range, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.FrequencyConfigure(self._vi, Chan_list, Range, Resolution)

    def FrequencyAutoRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.FrequencyAutoRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def FrequencyAutoRangeListConfig(self, Chan_list, AutoRange):
        """

        :param Chan_list:
        :type Chan_list:
        :param AutoRange:
        :type AutoRange:
        """
        return self._dllwrap.FrequencyAutoRangeListConfig(self._vi, Chan_list, AutoRange)

    def FrequencyApertureListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.FrequencyApertureListQuery(self._vi, Chan_list, RetValBufferSize)

    def FrequencyApertureListConfig(self, Chan_list, Aperture):
        """

        :param Chan_list:
        :type Chan_list:
        :param Aperture:
        :type Aperture:
        """
        return self._dllwrap.FrequencyApertureListConfig(self._vi, Chan_list, Aperture)

    def FrequencyGetAperture(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.FrequencyGetAperture(self._vi, Channel)

    def FrequencySetAperture(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.FrequencySetAperture(self._vi, Channel, Val)

    def FrequencyGetAutoRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.FrequencyGetAutoRange(self._vi, Channel)

    def FrequencySetAutoRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.FrequencySetAutoRange(self._vi, Channel, Val)

    def FrequencyGetLowRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.FrequencyGetLowRange(self._vi, Channel)

    def FrequencySetLowRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.FrequencySetLowRange(self._vi, Channel, Val)

    def FrequencyGetRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.FrequencyGetRange(self._vi, Channel)

    def FrequencySetRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.FrequencySetRange(self._vi, Channel, Val)

    def FResistanceResolutionListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.FResistanceResolutionListQuery(self._vi, Chan_list, RetValBufferSize)

    def FResistanceResolutionListConfig(self, Chan_list, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.FResistanceResolutionListConfig(self._vi, Chan_list, Resolution)

    def FResistanceRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.FResistanceRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def FResistanceRangeListConfig(self, Chan_list, Range):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        """
        return self._dllwrap.FResistanceRangeListConfig(self._vi, Chan_list, Range)

    def FResistanceOCompensatedListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.FResistanceOCompensatedListQuery(self._vi, Chan_list, RetValBufferSize)

    def FResistanceOCompensatedListConfig(self, Chan_list, OCompensated):
        """

        :param Chan_list:
        :type Chan_list:
        :param OCompensated:
        :type OCompensated:
        """
        return self._dllwrap.FResistanceOCompensatedListConfig(self._vi, Chan_list, OCompensated)

    def FResistanceNPLCListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.FResistanceNPLCListQuery(self._vi, Chan_list, RetValBufferSize)

    def FResistanceNPLCListConfig(self, Chan_list, NumPLC):
        """

        :param Chan_list:
        :type Chan_list:
        :param NumPLC:
        :type NumPLC:
        """
        return self._dllwrap.FResistanceNPLCListConfig(self._vi, Chan_list, NumPLC)

    def FResistanceConfigure(self, Chan_list, Range, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.FResistanceConfigure(self._vi, Chan_list, Range, Resolution)

    def FResistanceAutoRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.FResistanceAutoRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def FResistanceAutoRangeListConfig(self, Chan_list, AutoRange):
        """

        :param Chan_list:
        :type Chan_list:
        :param AutoRange:
        :type AutoRange:
        """
        return self._dllwrap.FResistanceAutoRangeListConfig(self._vi, Chan_list, AutoRange)

    def FResistanceApertureListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.FResistanceApertureListQuery(self._vi, Chan_list, RetValBufferSize)

    def FResistanceApertureListConfig(self, Chan_list, Aperture):
        """

        :param Chan_list:
        :type Chan_list:
        :param Aperture:
        :type Aperture:
        """
        return self._dllwrap.FResistanceApertureListConfig(self._vi, Chan_list, Aperture)

    def FResistanceGetAperture(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.FResistanceGetAperture(self._vi, Channel)

    def FResistanceSetAperture(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.FResistanceSetAperture(self._vi, Channel, Val)

    def FResistanceGetAutoRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.FResistanceGetAutoRange(self._vi, Channel)

    def FResistanceSetAutoRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.FResistanceSetAutoRange(self._vi, Channel, Val)

    def FResistanceGetNPLC(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.FResistanceGetNPLC(self._vi, Channel)

    def FResistanceSetNPLC(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.FResistanceSetNPLC(self._vi, Channel, Val)

    def FResistanceGetOCompensated(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.FResistanceGetOCompensated(self._vi, Channel)

    def FResistanceSetOCompensated(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.FResistanceSetOCompensated(self._vi, Channel, Val)

    def FResistanceGetRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.FResistanceGetRange(self._vi, Channel)

    def FResistanceSetRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.FResistanceSetRange(self._vi, Channel, Val)

    def FResistanceGetResolution(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.FResistanceGetResolution(self._vi, Channel)

    def FResistanceSetResolution(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.FResistanceSetResolution(self._vi, Channel, Val)

    def MeasureTotalizeMeasure(self, Chan_list, Reset, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param Reset:
        :type Reset:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureTotalizeMeasure(self._vi, Chan_list, Reset, RetValBufferSize)

    def MeasureThermocoupleMeasure(self, Scan_list, TransducerType, Resolution, RetValBufferSize):
        """

        :param Scan_list:
        :type Scan_list:
        :param TransducerType:
        :type TransducerType:
        :param Resolution:
        :type Resolution:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureThermocoupleMeasure(
            self._vi, Scan_list, TransducerType, Resolution, RetValBufferSize
        )

    def MeasureThermistorMeasure(self, Scan_list, ThermistorType, Resolution, RetValBufferSize):
        """

        :param Scan_list:
        :type Scan_list:
        :param ThermistorType:
        :type ThermistorType:
        :param Resolution:
        :type Resolution:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureThermistorMeasure(self._vi, Scan_list, ThermistorType, Resolution, RetValBufferSize)

    def MeasureRTDMeasure(self, Scan_list, NumWires, Alpha, Resolution, RetValBufferSize):
        """

        :param Scan_list:
        :type Scan_list:
        :param NumWires:
        :type NumWires:
        :param Alpha:
        :type Alpha:
        :param Resolution:
        :type Resolution:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureRTDMeasure(self._vi, Scan_list, NumWires, Alpha, Resolution, RetValBufferSize)

    def MeasureResistanceMeasure(self, Scan_list, Range, Resolution, RetValBufferSize):
        """

        :param Scan_list:
        :type Scan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureResistanceMeasure(self._vi, Scan_list, Range, Resolution, RetValBufferSize)

    def MeasurePeriodMeasure(self, Scan_list, Range, Resolution, RetValBufferSize):
        """

        :param Scan_list:
        :type Scan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasurePeriodMeasure(self._vi, Scan_list, Range, Resolution, RetValBufferSize)

    def MeasureMeasurementFunctionListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureMeasurementFunctionListQuery(self._vi, Chan_list, RetValBufferSize)

    def MeasureMeasurementFunctionListConfig(self, Chan_list, Function):
        """

        :param Chan_list:
        :type Chan_list:
        :param Function:
        :type Function:
        """
        return self._dllwrap.MeasureMeasurementFunctionListConfig(self._vi, Chan_list, Function)

    def MeasureFResistanceMeasure(self, Scan_list, Range, Resolution, RetValBufferSize):
        """

        :param Scan_list:
        :type Scan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureFResistanceMeasure(self._vi, Scan_list, Range, Resolution, RetValBufferSize)

    def MeasureFreqMeasure(self, Scan_list, Range, Resolution, RetValBufferSize):
        """

        :param Scan_list:
        :type Scan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureFreqMeasure(self._vi, Scan_list, Range, Resolution, RetValBufferSize)

    def MeasureDigitalMeasure(self, Scan_list, RetValBufferSize):
        """

        :param Scan_list:
        :type Scan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureDigitalMeasure(self._vi, Scan_list, RetValBufferSize)

    def MeasureDCVoltMeasure(self, Scan_list, Range, Resolution, RetValBufferSize):
        """

        :param Scan_list:
        :type Scan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureDCVoltMeasure(self._vi, Scan_list, Range, Resolution, RetValBufferSize)

    def MeasureDCCurrMeasure(self, Scan_list, Range, Resolution, RetValBufferSize):
        """

        :param Scan_list:
        :type Scan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureDCCurrMeasure(self._vi, Scan_list, Range, Resolution, RetValBufferSize)

    def MeasureACVoltMeasure(self, Scan_list, Range, Resolution, RetValBufferSize):
        """

        :param Scan_list:
        :type Scan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureACVoltMeasure(self._vi, Scan_list, Range, Resolution, RetValBufferSize)

    def MeasureACCurrMeasure(self, Scan_list, Range, Resolution, RetValBufferSize):
        """

        :param Scan_list:
        :type Scan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasureACCurrMeasure(self._vi, Scan_list, Range, Resolution, RetValBufferSize)

    def MeasureGetMeasurementFunction(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.MeasureGetMeasurementFunction(self._vi, Channel)

    def MeasureSetMeasurementFunction(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.MeasureSetMeasurementFunction(self._vi, Channel, Val)

    def MemorySaveState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.MemorySaveState(self._vi, Identifier)

    def MemoryRecallState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.MemoryRecallState(self._vi, Identifier)

    def MemoryDeleteLocation(self, LocationNum):
        """

        :param LocationNum:
        :type LocationNum:
        """
        return self._dllwrap.MemoryDeleteLocation(self._vi, LocationNum)

    def MemoryGetStateName(self, LocationNum, RetValBufferSize):
        """

        :param LocationNum:
        :type LocationNum:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MemoryGetStateName(self._vi, LocationNum, RetValBufferSize)

    def MemorySetStateName(self, LocationNum, Val):
        """

        :param LocationNum:
        :type LocationNum:
        :param Val:
        :type Val:
        """
        return self._dllwrap.MemorySetStateName(self._vi, LocationNum, Val)

    def MemoryGetValidState(self, LocationNum):
        """

        :param LocationNum:
        :type LocationNum:
        """
        return self._dllwrap.MemoryGetValidState(self._vi, LocationNum)

    def PeriodRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.PeriodRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def PeriodRangeListConfig(self, Chan_list, Range):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        """
        return self._dllwrap.PeriodRangeListConfig(self._vi, Chan_list, Range)

    def PeriodConfigure(self, Chan_list, Range, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.PeriodConfigure(self._vi, Chan_list, Range, Resolution)

    def PeriodAutoRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.PeriodAutoRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def PeriodAutoRangeListConfig(self, Chan_list, AutoRange):
        """

        :param Chan_list:
        :type Chan_list:
        :param AutoRange:
        :type AutoRange:
        """
        return self._dllwrap.PeriodAutoRangeListConfig(self._vi, Chan_list, AutoRange)

    def PeriodApertureListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.PeriodApertureListQuery(self._vi, Chan_list, RetValBufferSize)

    def PeriodApertureListConfig(self, Chan_list, Aperture):
        """

        :param Chan_list:
        :type Chan_list:
        :param Aperture:
        :type Aperture:
        """
        return self._dllwrap.PeriodApertureListConfig(self._vi, Chan_list, Aperture)

    def PeriodGetAperture(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.PeriodGetAperture(self._vi, Channel)

    def PeriodSetAperture(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.PeriodSetAperture(self._vi, Channel, Val)

    def PeriodGetAutoRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.PeriodGetAutoRange(self._vi, Channel)

    def PeriodSetAutoRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.PeriodSetAutoRange(self._vi, Channel, Val)

    def PeriodGetRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.PeriodGetRange(self._vi, Channel)

    def PeriodSetRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.PeriodSetRange(self._vi, Channel, Val)

    def ResistanceResolutionListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ResistanceResolutionListQuery(self._vi, Chan_list, RetValBufferSize)

    def ResistanceResolutionListConfig(self, Chan_list, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ResistanceResolutionListConfig(self._vi, Chan_list, Resolution)

    def ResistanceRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ResistanceRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def ResistanceRangeListConfig(self, Chan_list, Range):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        """
        return self._dllwrap.ResistanceRangeListConfig(self._vi, Chan_list, Range)

    def ResistanceOCompensatedListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ResistanceOCompensatedListQuery(self._vi, Chan_list, RetValBufferSize)

    def ResistanceOCompensatedListConfig(self, Chan_list, OCompensated):
        """

        :param Chan_list:
        :type Chan_list:
        :param OCompensated:
        :type OCompensated:
        """
        return self._dllwrap.ResistanceOCompensatedListConfig(self._vi, Chan_list, OCompensated)

    def ResistanceNPLCListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ResistanceNPLCListQuery(self._vi, Chan_list, RetValBufferSize)

    def ResistanceNPLCListConfig(self, Chan_list, NumPLC):
        """

        :param Chan_list:
        :type Chan_list:
        :param NumPLC:
        :type NumPLC:
        """
        return self._dllwrap.ResistanceNPLCListConfig(self._vi, Chan_list, NumPLC)

    def ResistanceConfigure(self, Chan_list, Range, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ResistanceConfigure(self._vi, Chan_list, Range, Resolution)

    def ResistanceAutoRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ResistanceAutoRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def ResistanceAutoRangeListConfig(self, Chan_list, AutoRange):
        """

        :param Chan_list:
        :type Chan_list:
        :param AutoRange:
        :type AutoRange:
        """
        return self._dllwrap.ResistanceAutoRangeListConfig(self._vi, Chan_list, AutoRange)

    def ResistanceApertureListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ResistanceApertureListQuery(self._vi, Chan_list, RetValBufferSize)

    def ResistanceApertureListConfig(self, Chan_list, Aperture):
        """

        :param Chan_list:
        :type Chan_list:
        :param Aperture:
        :type Aperture:
        """
        return self._dllwrap.ResistanceApertureListConfig(self._vi, Chan_list, Aperture)

    def ResistanceGetAperture(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ResistanceGetAperture(self._vi, Channel)

    def ResistanceSetAperture(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ResistanceSetAperture(self._vi, Channel, Val)

    def ResistanceGetAutoRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ResistanceGetAutoRange(self._vi, Channel)

    def ResistanceSetAutoRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ResistanceSetAutoRange(self._vi, Channel, Val)

    def ResistanceGetNPLC(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ResistanceGetNPLC(self._vi, Channel)

    def ResistanceSetNPLC(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ResistanceSetNPLC(self._vi, Channel, Val)

    def ResistanceGetOCompensated(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ResistanceGetOCompensated(self._vi, Channel)

    def ResistanceSetOCompensated(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ResistanceSetOCompensated(self._vi, Channel, Val)

    def ResistanceGetRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ResistanceGetRange(self._vi, Channel)

    def ResistanceSetRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ResistanceSetRange(self._vi, Channel, Val)

    def ResistanceGetResolution(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ResistanceGetResolution(self._vi, Channel)

    def ResistanceSetResolution(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ResistanceSetResolution(self._vi, Channel, Val)

    def RouteOpenListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.RouteOpenListQuery(self._vi, Chan_list, RetValBufferSize)

    def RouteOpenListConfig(self, Chan_list):
        """

        :param Chan_list:
        :type Chan_list:
        """
        return self._dllwrap.RouteOpenListConfig(self._vi, Chan_list)

    def RouteFWireListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.RouteFWireListQuery(self._vi, Chan_list, RetValBufferSize)

    def RouteFWireListConfig(self, Chan_list, Enable):
        """

        :param Chan_list:
        :type Chan_list:
        :param Enable:
        :type Enable:
        """
        return self._dllwrap.RouteFWireListConfig(self._vi, Chan_list, Enable)

    def RouteDelayListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.RouteDelayListQuery(self._vi, Chan_list, RetValBufferSize)

    def RouteDelayListConfig(self, Chan_list, Seconds):
        """

        :param Chan_list:
        :type Chan_list:
        :param Seconds:
        :type Seconds:
        """
        return self._dllwrap.RouteDelayListConfig(self._vi, Chan_list, Seconds)

    def RouteCloseListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.RouteCloseListQuery(self._vi, Chan_list, RetValBufferSize)

    def RouteCloseListConfig(self, Chan_list):
        """

        :param Chan_list:
        :type Chan_list:
        """
        return self._dllwrap.RouteCloseListConfig(self._vi, Chan_list)

    def RouteCloseExclusiveList(self, Chan_list):
        """

        :param Chan_list:
        :type Chan_list:
        """
        return self._dllwrap.RouteCloseExclusiveList(self._vi, Chan_list)

    def RouteCloseExclusive(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.RouteCloseExclusive(self._vi, Channel)

    def RouteAutoDelayListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.RouteAutoDelayListQuery(self._vi, Chan_list, RetValBufferSize)

    def RouteAutoDelayListConfig(self, Chan_list, Delay):
        """

        :param Chan_list:
        :type Chan_list:
        :param Delay:
        :type Delay:
        """
        return self._dllwrap.RouteAutoDelayListConfig(self._vi, Chan_list, Delay)

    def RouteGetAutoDelay(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.RouteGetAutoDelay(self._vi, Channel)

    def RouteSetAutoDelay(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.RouteSetAutoDelay(self._vi, Channel, Val)

    def RouteGetClose(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.RouteGetClose(self._vi, Channel)

    def RouteSetClose(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.RouteSetClose(self._vi, Channel, Val)

    def RouteGetDelay(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.RouteGetDelay(self._vi, Channel)

    def RouteSetDelay(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.RouteSetDelay(self._vi, Channel, Val)

    def RouteGetFWire(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.RouteGetFWire(self._vi, Channel)

    def RouteSetFWire(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.RouteSetFWire(self._vi, Channel, Val)

    def RouteGetOpen(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.RouteGetOpen(self._vi, Channel)

    def RouteSetOpen(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.RouteSetOpen(self._vi, Channel, Val)

    def ScaleUnitListConfig(self, Chan_list, UnitString):
        """

        :param Chan_list:
        :type Chan_list:
        :param UnitString:
        :type UnitString:
        """
        return self._dllwrap.ScaleUnitListConfig(self._vi, Chan_list, UnitString)

    def ScaleStateListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ScaleStateListQuery(self._vi, Chan_list, RetValBufferSize)

    def ScaleStateListConfig(self, Chan_list, State):
        """

        :param Chan_list:
        :type Chan_list:
        :param State:
        :type State:
        """
        return self._dllwrap.ScaleStateListConfig(self._vi, Chan_list, State)

    def ScaleOffsetNull(self, Chan_list):
        """

        :param Chan_list:
        :type Chan_list:
        """
        return self._dllwrap.ScaleOffsetNull(self._vi, Chan_list)

    def ScaleOffsetListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ScaleOffsetListQuery(self._vi, Chan_list, RetValBufferSize)

    def ScaleOffsetListConfig(self, Chan_list, Offset):
        """

        :param Chan_list:
        :type Chan_list:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ScaleOffsetListConfig(self._vi, Chan_list, Offset)

    def ScaleGainListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ScaleGainListQuery(self._vi, Chan_list, RetValBufferSize)

    def ScaleGainListConfig(self, Chan_list, Gain):
        """

        :param Chan_list:
        :type Chan_list:
        :param Gain:
        :type Gain:
        """
        return self._dllwrap.ScaleGainListConfig(self._vi, Chan_list, Gain)

    def ScaleGetGain(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ScaleGetGain(self._vi, Channel)

    def ScaleSetGain(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ScaleSetGain(self._vi, Channel, Val)

    def ScaleGetOffset(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ScaleGetOffset(self._vi, Channel)

    def ScaleSetOffset(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ScaleSetOffset(self._vi, Channel, Val)

    def ScaleGetState(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ScaleGetState(self._vi, Channel)

    def ScaleSetState(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ScaleSetState(self._vi, Channel, Val)

    def ScaleGetUnit(self, Channel, RetValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ScaleGetUnit(self._vi, Channel, RetValBufferSize)

    def ScaleSetUnit(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.ScaleSetUnit(self._vi, Channel, Val)

    def ScaleUnitListQuery(self, Chan_list, retValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param retValBufferSize:
        :type retValBufferSize:
        """
        return self._dllwrap.ScaleUnitListQuery(self._vi, Chan_list, retValBufferSize)

    def ScanSendSoftwareTrigger(self):
        """"""
        return self._dllwrap.ScanSendSoftwareTrigger(self._vi)

    def ScanScanOnceSetup(self, NumSweeps):
        """

        :param NumSweeps:
        :type NumSweeps:
        """
        return self._dllwrap.ScanScanOnceSetup(self._vi, NumSweeps)

    def ScanReadNumbersOnly(self, RetValBufferSize):
        """

        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ScanReadNumbersOnly(self._vi, RetValBufferSize)

    def ScanIntervalScanSetup(self, Chan_list, ScanInterval, NumSweeps):
        """

        :param Chan_list:
        :type Chan_list:
        :param ScanInterval:
        :type ScanInterval:
        :param NumSweeps:
        :type NumSweeps:
        """
        return self._dllwrap.ScanIntervalScanSetup(self._vi, Chan_list, ScanInterval, NumSweeps)

    def ScanInitiate(self):
        """"""
        return self._dllwrap.ScanInitiate(self._vi)

    def ScanFetchNumbersOnly(self, RetValBufferSize):
        """

        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ScanFetchNumbersOnly(self._vi, RetValBufferSize)

    def ScanExternalScanSetup(self, Chan_list, NumSweeps):
        """

        :param Chan_list:
        :type Chan_list:
        :param NumSweeps:
        :type NumSweeps:
        """
        return self._dllwrap.ScanExternalScanSetup(self._vi, Chan_list, NumSweeps)

    def ScanExternalControlScanSetup(self, Chan_list, ScanInterval, NumSweeps):
        """

        :param Chan_list:
        :type Chan_list:
        :param ScanInterval:
        :type ScanInterval:
        :param NumSweeps:
        :type NumSweeps:
        """
        return self._dllwrap.ScanExternalControlScanSetup(self._vi, Chan_list, ScanInterval, NumSweeps)

    def ScanDestructiveRead(self, Count, RetValBufferSize):
        """

        :param Count:
        :type Count:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ScanDestructiveRead(self._vi, Count, RetValBufferSize)

    def ScanAbort(self):
        """"""
        return self._dllwrap.ScanAbort(self._vi)

    def ScanGetConfigure(self, Channel, RetValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ScanGetConfigure(self._vi, Channel, RetValBufferSize)

    def ScanConfigureListQuery(self, Chan_list, retValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param retValBufferSize:
        :type retValBufferSize:
        """
        return self._dllwrap.ScanConfigureListQuery(self._vi, Chan_list, retValBufferSize)

    def ScanFetch(self, retValBufferSize):
        """

        :param retValBufferSize:
        :type retValBufferSize:
        """
        return self._dllwrap.ScanFetch(self._vi, retValBufferSize)

    def ScanQueryLast(self, channel, numReadings, retValBufferSize):
        """

        :param channel:
        :type channel:
        :param numReadings:
        :type numReadings:
        :param retValBufferSize:
        :type retValBufferSize:
        """
        return self._dllwrap.ScanQueryLast(self._vi, channel, numReadings, retValBufferSize)

    def ScanRead(self, retValBufferSize):
        """

        :param retValBufferSize:
        :type retValBufferSize:
        """
        return self._dllwrap.ScanRead(self._vi, retValBufferSize)

    def ScanRemoveReadings(self, numReadings, retValBufferSize):
        """

        :param numReadings:
        :type numReadings:
        :param retValBufferSize:
        :type retValBufferSize:
        """
        return self._dllwrap.ScanRemoveReadings(self._vi, numReadings, retValBufferSize)

    def StatisticsPTPeakListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.StatisticsPTPeakListQuery(self._vi, Chan_list, RetValBufferSize)

    def StatisticsMinValueTimeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.StatisticsMinValueTimeListQuery(self._vi, Chan_list, RetValBufferSize)

    def StatisticsMinValueListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.StatisticsMinValueListQuery(self._vi, Chan_list, RetValBufferSize)

    def StatisticsMaxValueTimeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.StatisticsMaxValueTimeListQuery(self._vi, Chan_list, RetValBufferSize)

    def StatisticsMaxValueListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.StatisticsMaxValueListQuery(self._vi, Chan_list, RetValBufferSize)

    def StatisticsCountListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.StatisticsCountListQuery(self._vi, Chan_list, RetValBufferSize)

    def StatisticsClearStatistics(self, Chan_list):
        """

        :param Chan_list:
        :type Chan_list:
        """
        return self._dllwrap.StatisticsClearStatistics(self._vi, Chan_list)

    def StatisticsAverageListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.StatisticsAverageListQuery(self._vi, Chan_list, RetValBufferSize)

    def StatisticsGetAverage(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.StatisticsGetAverage(self._vi, Channel)

    def StatisticsGetCount(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.StatisticsGetCount(self._vi, Channel)

    def StatisticsGetMaxValue(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.StatisticsGetMaxValue(self._vi, Channel)

    def StatisticsGetMaxValueTime(self, Channel, RetValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.StatisticsGetMaxValueTime(self._vi, Channel, RetValBufferSize)

    def StatisticsGetMinValue(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.StatisticsGetMinValue(self._vi, Channel)

    def StatisticsGetMinValueTime(self, Channel, RetValBufferSize):
        """

        :param Channel:
        :type Channel:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.StatisticsGetMinValueTime(self._vi, Channel, RetValBufferSize)

    def StatisticsGetPTPeak(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.StatisticsGetPTPeak(self._vi, Channel)

    def StatusPreset(self):
        """"""
        return self._dllwrap.StatusPreset(self._vi)

    def StatusConfigureServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.StatusConfigureServiceRequest(self._vi, Reason)

    def StatusClear(self):
        """"""
        return self._dllwrap.StatusClear(self._vi)

    def StatusGetRegister(self, Register, SubRegister):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusGetRegister(self._vi, Register, SubRegister)

    def StatusSetRegister(self, Register, SubRegister, Val):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusSetRegister(self._vi, Register, SubRegister, Val)

    def SystemWaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.SystemWaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def SystemSetSystemTime(self, hours, mins, Seconds):
        """

        :param hours:
        :type hours:
        :param mins:
        :type mins:
        :param Seconds:
        :type Seconds:
        """
        return self._dllwrap.SystemSetSystemTime(self._vi, hours, mins, Seconds)

    def SystemSetSystemDate(self, year, month, day):
        """

        :param year:
        :type year:
        :param month:
        :type month:
        :param day:
        :type day:
        """
        return self._dllwrap.SystemSetSystemDate(self._vi, year, month, day)

    def SystemSetInterface(self, Interface, Address, Reset, OptionString):
        """

        :param Interface:
        :type Interface:
        :param Address:
        :type Address:
        :param Reset:
        :type Reset:
        :param OptionString:
        :type OptionString:
        """
        return self._dllwrap.SystemSetInterface(self._vi, Interface, Address, Reset, OptionString)

    def SystemRWLock(self):
        """"""
        return self._dllwrap.SystemRWLock(self._vi)

    def SystemPreset(self):
        """"""
        return self._dllwrap.SystemPreset(self._vi)

    def SystemGetSystemTime(self):
        """"""
        return self._dllwrap.SystemGetSystemTime(self._vi)

    def SystemGetSystemDate(self):
        """"""
        return self._dllwrap.SystemGetSystemDate(self._vi)

    def SystemEnableLocalControls(self):
        """"""
        return self._dllwrap.SystemEnableLocalControls(self._vi)

    def SystemDisableLocalControls(self):
        """"""
        return self._dllwrap.SystemDisableLocalControls(self._vi)

    def SystemCardReset(self, SlotNum, ResetAll):
        """

        :param SlotNum:
        :type SlotNum:
        :param ResetAll:
        :type ResetAll:
        """
        return self._dllwrap.SystemCardReset(self._vi, SlotNum, ResetAll)

    def SystemGetCardType(self, SlotNum, RetValBufferSize):
        """

        :param SlotNum:
        :type SlotNum:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.SystemGetCardType(self._vi, SlotNum, RetValBufferSize)

    def SystemGetSlotLabel(self, Slot, RetValBufferSize):
        """

        :param Slot:
        :type Slot:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.SystemGetSlotLabel(self._vi, Slot, RetValBufferSize)

    def SystemSetSlotLabel(self, Slot, Val):
        """

        :param Slot:
        :type Slot:
        :param Val:
        :type Val:
        """
        return self._dllwrap.SystemSetSlotLabel(self._vi, Slot, Val)

    def SystemRead(self, retValBufferSize):
        """

        :param retValBufferSize:
        :type retValBufferSize:
        """
        return self._dllwrap.SystemRead(self._vi, retValBufferSize)

    def SystemWrite(self, CommandString):
        """

        :param CommandString:
        :type CommandString:
        """
        return self._dllwrap.SystemWrite(self._vi, CommandString)

    def SystemLockRelease(self):
        """"""
        return self._dllwrap.SystemLockRelease(self._vi)

    def SystemLockRequest(self):
        """"""
        return self._dllwrap.SystemLockRequest(self._vi)

    def TemperatureUnitsListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureUnitsListQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureUnitsListConfig(self, Chan_list, Units):
        """

        :param Chan_list:
        :type Chan_list:
        :param Units:
        :type Units:
        """
        return self._dllwrap.TemperatureUnitsListConfig(self._vi, Chan_list, Units)

    def TemperatureTransducerTypeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureTransducerTypeListQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureTransducerTypeListConfig(self, Chan_list, Type):
        """

        :param Chan_list:
        :type Chan_list:
        :param Type:
        :type Type:
        """
        return self._dllwrap.TemperatureTransducerTypeListConfig(self._vi, Chan_list, Type)

    def TemperatureThermocoupleTypeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureThermocoupleTypeListQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureThermocoupleTypeListConfig(self, Chan_list, Type):
        """

        :param Chan_list:
        :type Chan_list:
        :param Type:
        :type Type:
        """
        return self._dllwrap.TemperatureThermocoupleTypeListConfig(self._vi, Chan_list, Type)

    def TemperatureThermocoupleCheckListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureThermocoupleCheckListQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureThermocoupleCheckListConfig(self, Chan_list, Enable):
        """

        :param Chan_list:
        :type Chan_list:
        :param Enable:
        :type Enable:
        """
        return self._dllwrap.TemperatureThermocoupleCheckListConfig(self._vi, Chan_list, Enable)

    def TemperatureThermistorTypeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureThermistorTypeListQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureThermistorTypeListConfig(self, Chan_list, Type):
        """

        :param Chan_list:
        :type Chan_list:
        :param Type:
        :type Type:
        """
        return self._dllwrap.TemperatureThermistorTypeListConfig(self._vi, Chan_list, Type)

    def TemperatureRTDTypeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureRTDTypeListQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureRTDTypeListConfig(self, Chan_list, Type):
        """

        :param Chan_list:
        :type Chan_list:
        :param Type:
        :type Type:
        """
        return self._dllwrap.TemperatureRTDTypeListConfig(self._vi, Chan_list, Type)

    def TemperatureRTDResistanceListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureRTDResistanceListQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureRTDResistanceListConfig(self, Chan_list, Resistance):
        """

        :param Chan_list:
        :type Chan_list:
        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.TemperatureRTDResistanceListConfig(self._vi, Chan_list, Resistance)

    def TemperatureRJunctionTypeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureRJunctionTypeListQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureRJunctionTypeListConfig(self, Chan_list, Type):
        """

        :param Chan_list:
        :type Chan_list:
        :param Type:
        :type Type:
        """
        return self._dllwrap.TemperatureRJunctionTypeListConfig(self._vi, Chan_list, Type)

    def TemperatureRJunctionTempListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureRJunctionTempListQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureRJunctionTempListConfig(self, Chan_list, Temp):
        """

        :param Chan_list:
        :type Chan_list:
        :param Temp:
        :type Temp:
        """
        return self._dllwrap.TemperatureRJunctionTempListConfig(self._vi, Chan_list, Temp)

    def TemperatureNPLCListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureNPLCListQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureNPLCListConfig(self, Chan_list, NumPLC):
        """

        :param Chan_list:
        :type Chan_list:
        :param NumPLC:
        :type NumPLC:
        """
        return self._dllwrap.TemperatureNPLCListConfig(self._vi, Chan_list, NumPLC)

    def TemperatureFRTDTypeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureFRTDTypeListQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureFRTDTypeListConfig(self, Chan_list, Type):
        """

        :param Chan_list:
        :type Chan_list:
        :param Type:
        :type Type:
        """
        return self._dllwrap.TemperatureFRTDTypeListConfig(self._vi, Chan_list, Type)

    def TemperatureFRTDResistanceListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureFRTDResistanceListQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureFRTDResistanceListConfig(self, Chan_list, Resistance):
        """

        :param Chan_list:
        :type Chan_list:
        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.TemperatureFRTDResistanceListConfig(self._vi, Chan_list, Resistance)

    def TemperatureConfigureThermistor(self, Chan_list, ThermistorType, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param ThermistorType:
        :type ThermistorType:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureConfigureThermistor(self._vi, Chan_list, ThermistorType, Resolution)

    def TemperatureConfigureTCouple(self, Chan_list, TCoupleType, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param TCoupleType:
        :type TCoupleType:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureConfigureTCouple(self._vi, Chan_list, TCoupleType, Resolution)

    def TemperatureConfigureRTD(self, Chan_list, RTDType, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param RTDType:
        :type RTDType:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureConfigureRTD(self._vi, Chan_list, RTDType, Resolution)

    def TemperatureConfigureFRTD(self, Chan_list, FRTDType, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param FRTDType:
        :type FRTDType:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureConfigureFRTD(self._vi, Chan_list, FRTDType, Resolution)

    def TemperatureCelciusRJunctionQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TemperatureCelciusRJunctionQuery(self._vi, Chan_list, RetValBufferSize)

    def TemperatureGetFRTDResistance(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TemperatureGetFRTDResistance(self._vi, Channel)

    def TemperatureSetFRTDResistance(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TemperatureSetFRTDResistance(self._vi, Channel, Val)

    def TemperatureGetFRTDType(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TemperatureGetFRTDType(self._vi, Channel)

    def TemperatureSetFRTDType(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TemperatureSetFRTDType(self._vi, Channel, Val)

    def TemperatureGetNPLC(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TemperatureGetNPLC(self._vi, Channel)

    def TemperatureSetNPLC(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TemperatureSetNPLC(self._vi, Channel, Val)

    def TemperatureGetRJunctionTemp(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TemperatureGetRJunctionTemp(self._vi, Channel)

    def TemperatureSetRJunctionTemp(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TemperatureSetRJunctionTemp(self._vi, Channel, Val)

    def TemperatureGetRJunctionType(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TemperatureGetRJunctionType(self._vi, Channel)

    def TemperatureSetRJunctionType(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TemperatureSetRJunctionType(self._vi, Channel, Val)

    def TemperatureGetRTDResistance(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TemperatureGetRTDResistance(self._vi, Channel)

    def TemperatureSetRTDResistance(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TemperatureSetRTDResistance(self._vi, Channel, Val)

    def TemperatureGetRTDType(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TemperatureGetRTDType(self._vi, Channel)

    def TemperatureSetRTDType(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TemperatureSetRTDType(self._vi, Channel, Val)

    def TemperatureGetThermistorType(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TemperatureGetThermistorType(self._vi, Channel)

    def TemperatureSetThermistorType(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TemperatureSetThermistorType(self._vi, Channel, Val)

    def TemperatureGetThermocoupleCheck(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TemperatureGetThermocoupleCheck(self._vi, Channel)

    def TemperatureSetThermocoupleCheck(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TemperatureSetThermocoupleCheck(self._vi, Channel, Val)

    def TemperatureGetThermocoupleType(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TemperatureGetThermocoupleType(self._vi, Channel)

    def TemperatureSetThermocoupleType(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TemperatureSetThermocoupleType(self._vi, Channel, Val)

    def TemperatureGetTransducerType(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TemperatureGetTransducerType(self._vi, Channel)

    def TemperatureSetTransducerType(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TemperatureSetTransducerType(self._vi, Channel, Val)

    def TemperatureGetUnits(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TemperatureGetUnits(self._vi, Channel)

    def TemperatureSetUnits(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TemperatureSetUnits(self._vi, Channel, Val)

    def TotalizeSlopeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TotalizeSlopeListQuery(self._vi, Chan_list, RetValBufferSize)

    def TotalizeSlopeListConfig(self, Chan_list, Slope):
        """

        :param Chan_list:
        :type Chan_list:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.TotalizeSlopeListConfig(self._vi, Chan_list, Slope)

    def TotalizeReadTypeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TotalizeReadTypeListQuery(self._vi, Chan_list, RetValBufferSize)

    def TotalizeReadTypeListConfig(self, Chan_list, Type):
        """

        :param Chan_list:
        :type Chan_list:
        :param Type:
        :type Type:
        """
        return self._dllwrap.TotalizeReadTypeListConfig(self._vi, Chan_list, Type)

    def TotalizeReadData(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.TotalizeReadData(self._vi, Chan_list, RetValBufferSize)

    def TotalizeConfigure(self, Chan_list, Reset):
        """

        :param Chan_list:
        :type Chan_list:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.TotalizeConfigure(self._vi, Chan_list, Reset)

    def TotalizeClearTotal(self, Chan_list):
        """

        :param Chan_list:
        :type Chan_list:
        """
        return self._dllwrap.TotalizeClearTotal(self._vi, Chan_list)

    def TotalizeGetReadType(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TotalizeGetReadType(self._vi, Channel)

    def TotalizeSetReadType(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TotalizeSetReadType(self._vi, Channel, Val)

    def TotalizeGetSlope(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.TotalizeGetSlope(self._vi, Channel)

    def TotalizeSetSlope(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TotalizeSetSlope(self._vi, Channel, Val)

    def VoltageAutoZeroListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.VoltageAutoZeroListQuery(self._vi, Chan_list, RetValBufferSize)

    def VoltageAutoZeroListConfig(self, Chan_list, AutoZero):
        """

        :param Chan_list:
        :type Chan_list:
        :param AutoZero:
        :type AutoZero:
        """
        return self._dllwrap.VoltageAutoZeroListConfig(self._vi, Chan_list, AutoZero)

    def VoltageAutoResistanceListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.VoltageAutoResistanceListQuery(self._vi, Chan_list, RetValBufferSize)

    def VoltageAutoResistanceListConfig(self, Chan_list, Enable):
        """

        :param Chan_list:
        :type Chan_list:
        :param Enable:
        :type Enable:
        """
        return self._dllwrap.VoltageAutoResistanceListConfig(self._vi, Chan_list, Enable)

    def VoltageGetAutoResistance(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.VoltageGetAutoResistance(self._vi, Channel)

    def VoltageSetAutoResistance(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.VoltageSetAutoResistance(self._vi, Channel, Val)

    def VoltageGetAutoZero(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.VoltageGetAutoZero(self._vi, Channel)

    def VoltageSetAutoZero(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.VoltageSetAutoZero(self._vi, Channel, Val)

    def VoltageACVoltageRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.VoltageACVoltageRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def VoltageACVoltageRangeListConfig(self, Chan_list, Range):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        """
        return self._dllwrap.VoltageACVoltageRangeListConfig(self._vi, Chan_list, Range)

    def VoltageACVoltageConfigure(self, Chan_list, Range, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.VoltageACVoltageConfigure(self._vi, Chan_list, Range, Resolution)

    def VoltageACVoltageBandwidthListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.VoltageACVoltageBandwidthListQuery(self._vi, Chan_list, RetValBufferSize)

    def VoltageACVoltageBandwidthListConfig(self, Chan_list, Bandwidth):
        """

        :param Chan_list:
        :type Chan_list:
        :param Bandwidth:
        :type Bandwidth:
        """
        return self._dllwrap.VoltageACVoltageBandwidthListConfig(self._vi, Chan_list, Bandwidth)

    def VoltageACVoltageAutoRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.VoltageACVoltageAutoRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def VoltageACVoltageAutoRangeListConfig(self, Chan_list, AutoRange):
        """

        :param Chan_list:
        :type Chan_list:
        :param AutoRange:
        :type AutoRange:
        """
        return self._dllwrap.VoltageACVoltageAutoRangeListConfig(self._vi, Chan_list, AutoRange)

    def VoltageACVoltageGetAutoRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.VoltageACVoltageGetAutoRange(self._vi, Channel)

    def VoltageACVoltageSetAutoRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.VoltageACVoltageSetAutoRange(self._vi, Channel, Val)

    def VoltageACVoltageGetBandwidth(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.VoltageACVoltageGetBandwidth(self._vi, Channel)

    def VoltageACVoltageSetBandwidth(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.VoltageACVoltageSetBandwidth(self._vi, Channel, Val)

    def VoltageACVoltageGetRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.VoltageACVoltageGetRange(self._vi, Channel)

    def VoltageACVoltageSetRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.VoltageACVoltageSetRange(self._vi, Channel, Val)

    def VoltageDCVoltageResolutionListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.VoltageDCVoltageResolutionListQuery(self._vi, Chan_list, RetValBufferSize)

    def VoltageDCVoltageResolutionListConfig(self, Chan_list, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.VoltageDCVoltageResolutionListConfig(self._vi, Chan_list, Resolution)

    def VoltageDCVoltageRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.VoltageDCVoltageRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def VoltageDCVoltageRangeListConfig(self, Chan_list, Range):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        """
        return self._dllwrap.VoltageDCVoltageRangeListConfig(self._vi, Chan_list, Range)

    def VoltageDCVoltageNPLCListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.VoltageDCVoltageNPLCListQuery(self._vi, Chan_list, RetValBufferSize)

    def VoltageDCVoltageNPLCListConfig(self, Chan_list, NumPLC):
        """

        :param Chan_list:
        :type Chan_list:
        :param NumPLC:
        :type NumPLC:
        """
        return self._dllwrap.VoltageDCVoltageNPLCListConfig(self._vi, Chan_list, NumPLC)

    def VoltageDCVoltageConfigure(self, Chan_list, Range, Resolution):
        """

        :param Chan_list:
        :type Chan_list:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.VoltageDCVoltageConfigure(self._vi, Chan_list, Range, Resolution)

    def VoltageDCVoltageAutoRangeListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.VoltageDCVoltageAutoRangeListQuery(self._vi, Chan_list, RetValBufferSize)

    def VoltageDCVoltageAutoRangeListConfig(self, Chan_list, AutoRange):
        """

        :param Chan_list:
        :type Chan_list:
        :param AutoRange:
        :type AutoRange:
        """
        return self._dllwrap.VoltageDCVoltageAutoRangeListConfig(self._vi, Chan_list, AutoRange)

    def VoltageDCVoltageApertureListQuery(self, Chan_list, RetValBufferSize):
        """

        :param Chan_list:
        :type Chan_list:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.VoltageDCVoltageApertureListQuery(self._vi, Chan_list, RetValBufferSize)

    def VoltageDCVoltageApertureListConfig(self, Chan_list, Aperture):
        """

        :param Chan_list:
        :type Chan_list:
        :param Aperture:
        :type Aperture:
        """
        return self._dllwrap.VoltageDCVoltageApertureListConfig(self._vi, Chan_list, Aperture)

    def VoltageDCVoltageGetAperture(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.VoltageDCVoltageGetAperture(self._vi, Channel)

    def VoltageDCVoltageSetAperture(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.VoltageDCVoltageSetAperture(self._vi, Channel, Val)

    def VoltageDCVoltageGetAutoRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.VoltageDCVoltageGetAutoRange(self._vi, Channel)

    def VoltageDCVoltageSetAutoRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.VoltageDCVoltageSetAutoRange(self._vi, Channel, Val)

    def VoltageDCVoltageGetNPLC(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.VoltageDCVoltageGetNPLC(self._vi, Channel)

    def VoltageDCVoltageSetNPLC(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.VoltageDCVoltageSetNPLC(self._vi, Channel, Val)

    def VoltageDCVoltageGetRange(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.VoltageDCVoltageGetRange(self._vi, Channel)

    def VoltageDCVoltageSetRange(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.VoltageDCVoltageSetRange(self._vi, Channel, Val)

    def VoltageDCVoltageGetResolution(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.VoltageDCVoltageGetResolution(self._vi, Channel)

    def VoltageDCVoltageSetResolution(self, Channel, Val):
        """

        :param Channel:
        :type Channel:
        :param Val:
        :type Val:
        """
        return self._dllwrap.VoltageDCVoltageSetResolution(self._vi, Channel, Val)

    def MemoryExternalExportContents(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.MemoryExternalExportContents(self._vi, MaxTimeMilliseconds)

    def MemoryExternalImportConfig(self, FileName, MaxTimeMilliseconds):
        """

        :param FileName:
        :type FileName:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.MemoryExternalImportConfig(self._vi, FileName, MaxTimeMilliseconds)
