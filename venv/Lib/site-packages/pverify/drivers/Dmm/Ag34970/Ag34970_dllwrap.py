from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import Ag34970_const as const
from .Ag34970_const import *


class Ag34970_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("Ag34970.dll", "Ag34970_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "Ag34970"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.Ag34970_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.Ag34970_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.Ag34970_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.Ag34970_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag34970_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        status = self.dll.Ag34970_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.Ag34970_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, Vi):
        status = self.dll.Ag34970_ClearInterchangeWarnings(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        status = self.dll.Ag34970_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(InterchangeWarningBufferSize)
        status = self.dll.Ag34970_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.Ag34970_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetInterchangeCheck(self, Vi):
        status = self.dll.Ag34970_ResetInterchangeCheck(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.Ag34970_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag34970_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.Ag34970_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.Ag34970_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.Ag34970_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag34970_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.Ag34970_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.Ag34970_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt64()
        status = self.dll.Ag34970_GetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.Ag34970_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.Ag34970_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.Ag34970_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        status = self.dll.Ag34970_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34970_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34970_SetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34970_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34970_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34970_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34970_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AlarmUpperLimitListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_AlarmUpperLimitListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def AlarmUpperLimitListConfig(self, Vi, Chan_list, UpperLimit):
        status = self.dll.Ag34970_AlarmUpperLimitListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(UpperLimit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AlarmUpperLimitEnableListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_AlarmUpperLimitEnableListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def AlarmUpperLimitEnableListConfig(self, Vi, Chan_list, Enable):
        status = self.dll.Ag34970_AlarmUpperLimitEnableListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(Enable)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AlarmLowerLimitListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_AlarmLowerLimitListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def AlarmLowerLimitListConfig(self, Vi, Chan_list, LowerLimit):
        status = self.dll.Ag34970_AlarmLowerLimitListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(LowerLimit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AlarmLowerLimitEnableListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_AlarmLowerLimitEnableListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def AlarmLowerLimitEnableListConfig(self, Vi, Chan_list, Enable):
        status = self.dll.Ag34970_AlarmLowerLimitEnableListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(Enable)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AlarmClear(self, Vi, clearAll, Index):
        status = self.dll.Ag34970_AlarmClear(ViSession(Vi), ViBoolean(clearAll), ViInt32(Index))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AlarmAlarmScanSetup(self, Vi, Chan_list, Channel, AlarmIndex, NumSweeps, UpperLimit):
        status = self.dll.Ag34970_AlarmAlarmScanSetup(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(Channel),
            ViInt32(AlarmIndex),
            ViInt32(NumSweeps),
            ViReal64(UpperLimit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AlarmGetLowerLimit(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_AlarmGetLowerLimit(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def AlarmSetLowerLimit(self, Vi, Channel, Val):
        status = self.dll.Ag34970_AlarmSetLowerLimit(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AlarmGetLowerLimitEnable(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_AlarmGetLowerLimitEnable(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def AlarmSetLowerLimitEnable(self, Vi, Channel, Val):
        status = self.dll.Ag34970_AlarmSetLowerLimitEnable(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AlarmGetSource(self, Vi, Index, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.Ag34970_AlarmGetSource(ViSession(Vi), ViInt32(Index), ViInt32(RetValBufferSize), RetVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def AlarmSetSource(self, Vi, Index, Val):
        status = self.dll.Ag34970_AlarmSetSource(ViSession(Vi), ViInt32(Index), ViConstString(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AlarmGetUpperLimit(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_AlarmGetUpperLimit(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def AlarmSetUpperLimit(self, Vi, Channel, Val):
        status = self.dll.Ag34970_AlarmSetUpperLimit(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AlarmGetUpperLimitEnable(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_AlarmGetUpperLimitEnable(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def AlarmSetUpperLimitEnable(self, Vi, Channel, Val):
        status = self.dll.Ag34970_AlarmSetUpperLimitEnable(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViChar(BufferSize)
        ReturnCount = ViInt64()
        status = self.dll.Ag34970_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Buffer = decode(Buffer)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.Ag34970_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def viWrite(self, Vi, Count, Buffer):
        ReturnCount = ViInt64()
        status = self.dll.Ag34970_viWrite(ViSession(Vi), ViInt64(Count), ViConstString(Buffer), byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ReturnCount.value)

    def SystemWriteString(self, Vi, Data):
        status = self.dll.Ag34970_SystemWriteString(ViSession(Vi), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrationPerformCalibration(self, Vi):
        status = self.dll.Ag34970_CalibrationPerformCalibration(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrationSetSecureEnable(self, Vi, Code, Val):
        status = self.dll.Ag34970_CalibrationSetSecureEnable(ViSession(Vi), ViConstString(Code), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentACCurrentRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_CurrentACCurrentRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def CurrentACCurrentRangeListConfig(self, Vi, Chan_list, Range):
        status = self.dll.Ag34970_CurrentACCurrentRangeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Range)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentACCurrentConfigure(self, Vi, Chan_list, Range, Resolution):
        status = self.dll.Ag34970_CurrentACCurrentConfigure(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Range), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentACCurrentBandwidthListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_CurrentACCurrentBandwidthListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def CurrentACCurrentBandwidthListConfig(self, Vi, Chan_list, Bandwidth):
        status = self.dll.Ag34970_CurrentACCurrentBandwidthListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViInt32(Bandwidth)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentACCurrentAutoRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_CurrentACCurrentAutoRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def CurrentACCurrentAutoRangeListConfig(self, Vi, Chan_list, AutoRange):
        status = self.dll.Ag34970_CurrentACCurrentAutoRangeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(AutoRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentACCurrentGetAutoRange(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_CurrentACCurrentGetAutoRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def CurrentACCurrentSetAutoRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_CurrentACCurrentSetAutoRange(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentACCurrentGetBandwidth(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_CurrentACCurrentGetBandwidth(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def CurrentACCurrentSetBandwidth(self, Vi, Channel, Val):
        status = self.dll.Ag34970_CurrentACCurrentSetBandwidth(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentACCurrentGetRange(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_CurrentACCurrentGetRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def CurrentACCurrentSetRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_CurrentACCurrentSetRange(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentDCCurrentResolutionListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_CurrentDCCurrentResolutionListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def CurrentDCCurrentResolutionListConfig(self, Vi, Chan_list, Resolution):
        status = self.dll.Ag34970_CurrentDCCurrentResolutionListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentDCCurrentRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_CurrentDCCurrentRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def CurrentDCCurrentRangeListConfig(self, Vi, Chan_list, Range):
        status = self.dll.Ag34970_CurrentDCCurrentRangeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Range)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentDCCurrentNPLCListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_CurrentDCCurrentNPLCListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def CurrentDCCurrentNPLCListConfig(self, Vi, Chan_list, NumPLC):
        status = self.dll.Ag34970_CurrentDCCurrentNPLCListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(NumPLC)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentDCCurrentConfigure(self, Vi, Chan_list, Range, Resolution):
        status = self.dll.Ag34970_CurrentDCCurrentConfigure(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Range), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentDCCurrentAutoRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_CurrentDCCurrentAutoRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def CurrentDCCurrentAutoRangeListConfig(self, Vi, Chan_list, AutoRange):
        status = self.dll.Ag34970_CurrentDCCurrentAutoRangeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(AutoRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentDCCurrentApertureListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_CurrentDCCurrentApertureListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def CurrentDCCurrentApertureListConfig(self, Vi, Chan_list, Aperture):
        status = self.dll.Ag34970_CurrentDCCurrentApertureListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Aperture)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentDCCurrentGetAperture(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_CurrentDCCurrentGetAperture(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def CurrentDCCurrentSetAperture(self, Vi, Channel, Val):
        status = self.dll.Ag34970_CurrentDCCurrentSetAperture(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentDCCurrentGetAutoRange(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_CurrentDCCurrentGetAutoRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def CurrentDCCurrentSetAutoRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_CurrentDCCurrentSetAutoRange(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentDCCurrentGetNPLC(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_CurrentDCCurrentGetNPLC(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def CurrentDCCurrentSetNPLC(self, Vi, Channel, Val):
        status = self.dll.Ag34970_CurrentDCCurrentSetNPLC(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentDCCurrentGetRange(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_CurrentDCCurrentGetRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def CurrentDCCurrentSetRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_CurrentDCCurrentSetRange(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CurrentDCCurrentGetResolution(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_CurrentDCCurrentGetResolution(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def CurrentDCCurrentSetResolution(self, Vi, Channel, Val):
        status = self.dll.Ag34970_CurrentDCCurrentSetResolution(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DACVoltageListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_DACVoltageListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def DACVoltageListConfig(self, Vi, Chan_list, Voltage):
        status = self.dll.Ag34970_DACVoltageListConfig(ViSession(Vi), ViConstString(Chan_list), ViReal64(Voltage))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DACGetVoltage(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_DACGetVoltage(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def DACSetVoltage(self, Vi, Channel, Val):
        status = self.dll.Ag34970_DACSetVoltage(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DiagnosticRelayCyclesClear(self, Vi, Chan_list):
        status = self.dll.Ag34970_DiagnosticRelayCyclesClear(ViSession(Vi), ViConstString(Chan_list))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DiagnosticDMMCyclesClear(self, Vi, Index):
        status = self.dll.Ag34970_DiagnosticDMMCyclesClear(ViSession(Vi), ViInt32(Index))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalWriteWord(self, Vi, Chan_list, Data):
        status = self.dll.Ag34970_DigitalWriteWord(ViSession(Vi), ViConstString(Chan_list), ViInt32(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalWriteByte(self, Vi, Chan_list, Data):
        status = self.dll.Ag34970_DigitalWriteByte(ViSession(Vi), ViConstString(Chan_list), ViInt32(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalReadWord(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_DigitalReadWord(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def DigitalReadByte(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_DigitalReadByte(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def DigitalQueryLastWord(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_DigitalQueryLastWord(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def DigitalQueryLastByte(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_DigitalQueryLastByte(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def DigitalConfigRead(self, Vi, Chan_list):
        status = self.dll.Ag34970_DigitalConfigRead(ViSession(Vi), ViConstString(Chan_list))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalCompTypeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_DigitalCompTypeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def DigitalCompTypeListConfig(self, Vi, Chan_list, Type):
        status = self.dll.Ag34970_DigitalCompTypeListConfig(ViSession(Vi), ViConstString(Chan_list), ViInt32(Type))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalCompMaskListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_DigitalCompMaskListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def DigitalCompMaskListConfig(self, Vi, Chan_list, Pattern):
        status = self.dll.Ag34970_DigitalCompMaskListConfig(ViSession(Vi), ViConstString(Chan_list), ViInt32(Pattern))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalCompEnableListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_DigitalCompEnableListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def DigitalCompEnableListConfig(self, Vi, Chan_list, Enable):
        status = self.dll.Ag34970_DigitalCompEnableListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(Enable)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalCompDataListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_DigitalCompDataListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def DigitalCompDataListConfig(self, Vi, Chan_list, Pattern):
        status = self.dll.Ag34970_DigitalCompDataListConfig(ViSession(Vi), ViConstString(Chan_list), ViInt32(Pattern))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalGetComparisonData(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_DigitalGetComparisonData(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def DigitalSetComparisonData(self, Vi, Channel, Val):
        status = self.dll.Ag34970_DigitalSetComparisonData(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalGetComparisonEnable(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_DigitalGetComparisonEnable(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def DigitalSetComparisonEnable(self, Vi, Channel, Val):
        status = self.dll.Ag34970_DigitalSetComparisonEnable(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalGetComparisonMask(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_DigitalGetComparisonMask(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def DigitalSetComparisonMask(self, Vi, Channel, Val):
        status = self.dll.Ag34970_DigitalSetComparisonMask(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalGetComparisonType(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_DigitalGetComparisonType(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def DigitalSetComparisonType(self, Vi, Channel, Val):
        status = self.dll.Ag34970_DigitalSetComparisonType(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayClearDisplay(self, Vi):
        status = self.dll.Ag34970_DisplayClearDisplay(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_FrequencyRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def FrequencyRangeListConfig(self, Vi, Chan_list, Range):
        status = self.dll.Ag34970_FrequencyRangeListConfig(ViSession(Vi), ViConstString(Chan_list), ViReal64(Range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyLowRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_FrequencyLowRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def FrequencyLowRangeListConfig(self, Vi, Chan_list, Range):
        status = self.dll.Ag34970_FrequencyLowRangeListConfig(ViSession(Vi), ViConstString(Chan_list), ViInt32(Range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyConfigure(self, Vi, Chan_list, Range, Resolution):
        status = self.dll.Ag34970_FrequencyConfigure(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Range), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyAutoRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_FrequencyAutoRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def FrequencyAutoRangeListConfig(self, Vi, Chan_list, AutoRange):
        status = self.dll.Ag34970_FrequencyAutoRangeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(AutoRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyApertureListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_FrequencyApertureListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def FrequencyApertureListConfig(self, Vi, Chan_list, Aperture):
        status = self.dll.Ag34970_FrequencyApertureListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Aperture)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyGetAperture(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_FrequencyGetAperture(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def FrequencySetAperture(self, Vi, Channel, Val):
        status = self.dll.Ag34970_FrequencySetAperture(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyGetAutoRange(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_FrequencyGetAutoRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def FrequencySetAutoRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_FrequencySetAutoRange(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyGetLowRange(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_FrequencyGetLowRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def FrequencySetLowRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_FrequencySetLowRange(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyGetRange(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_FrequencyGetRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def FrequencySetRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_FrequencySetRange(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceResolutionListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_FResistanceResolutionListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def FResistanceResolutionListConfig(self, Vi, Chan_list, Resolution):
        status = self.dll.Ag34970_FResistanceResolutionListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_FResistanceRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def FResistanceRangeListConfig(self, Vi, Chan_list, Range):
        status = self.dll.Ag34970_FResistanceRangeListConfig(ViSession(Vi), ViConstString(Chan_list), ViReal64(Range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceOCompensatedListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_FResistanceOCompensatedListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def FResistanceOCompensatedListConfig(self, Vi, Chan_list, OCompensated):
        status = self.dll.Ag34970_FResistanceOCompensatedListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(OCompensated)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceNPLCListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_FResistanceNPLCListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def FResistanceNPLCListConfig(self, Vi, Chan_list, NumPLC):
        status = self.dll.Ag34970_FResistanceNPLCListConfig(ViSession(Vi), ViConstString(Chan_list), ViReal64(NumPLC))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceConfigure(self, Vi, Chan_list, Range, Resolution):
        status = self.dll.Ag34970_FResistanceConfigure(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Range), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceAutoRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_FResistanceAutoRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def FResistanceAutoRangeListConfig(self, Vi, Chan_list, AutoRange):
        status = self.dll.Ag34970_FResistanceAutoRangeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(AutoRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceApertureListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_FResistanceApertureListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def FResistanceApertureListConfig(self, Vi, Chan_list, Aperture):
        status = self.dll.Ag34970_FResistanceApertureListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Aperture)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceGetAperture(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_FResistanceGetAperture(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def FResistanceSetAperture(self, Vi, Channel, Val):
        status = self.dll.Ag34970_FResistanceSetAperture(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceGetAutoRange(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_FResistanceGetAutoRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def FResistanceSetAutoRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_FResistanceSetAutoRange(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceGetNPLC(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_FResistanceGetNPLC(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def FResistanceSetNPLC(self, Vi, Channel, Val):
        status = self.dll.Ag34970_FResistanceSetNPLC(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceGetOCompensated(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_FResistanceGetOCompensated(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def FResistanceSetOCompensated(self, Vi, Channel, Val):
        status = self.dll.Ag34970_FResistanceSetOCompensated(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceGetRange(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_FResistanceGetRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def FResistanceSetRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_FResistanceSetRange(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceGetResolution(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_FResistanceGetResolution(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def FResistanceSetResolution(self, Vi, Channel, Val):
        status = self.dll.Ag34970_FResistanceSetResolution(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureTotalizeMeasure(self, Vi, Chan_list, Reset, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureTotalizeMeasure(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(Reset),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureThermocoupleMeasure(self, Vi, Scan_list, TransducerType, Resolution, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureThermocoupleMeasure(
            ViSession(Vi),
            ViConstString(Scan_list),
            ViInt32(TransducerType),
            ViReal64(Resolution),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureThermistorMeasure(self, Vi, Scan_list, ThermistorType, Resolution, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureThermistorMeasure(
            ViSession(Vi),
            ViConstString(Scan_list),
            ViInt32(ThermistorType),
            ViReal64(Resolution),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureRTDMeasure(self, Vi, Scan_list, NumWires, Alpha, Resolution, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureRTDMeasure(
            ViSession(Vi),
            ViConstString(Scan_list),
            ViInt32(NumWires),
            ViInt32(Alpha),
            ViReal64(Resolution),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureResistanceMeasure(self, Vi, Scan_list, Range, Resolution, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureResistanceMeasure(
            ViSession(Vi),
            ViConstString(Scan_list),
            ViReal64(Range),
            ViReal64(Resolution),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasurePeriodMeasure(self, Vi, Scan_list, Range, Resolution, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasurePeriodMeasure(
            ViSession(Vi),
            ViConstString(Scan_list),
            ViReal64(Range),
            ViReal64(Resolution),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureMeasurementFunctionListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureMeasurementFunctionListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureMeasurementFunctionListConfig(self, Vi, Chan_list, Function):
        status = self.dll.Ag34970_MeasureMeasurementFunctionListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViInt32(Function)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureFResistanceMeasure(self, Vi, Scan_list, Range, Resolution, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureFResistanceMeasure(
            ViSession(Vi),
            ViConstString(Scan_list),
            ViReal64(Range),
            ViReal64(Resolution),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureFreqMeasure(self, Vi, Scan_list, Range, Resolution, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureFreqMeasure(
            ViSession(Vi),
            ViConstString(Scan_list),
            ViReal64(Range),
            ViReal64(Resolution),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureDigitalMeasure(self, Vi, Scan_list, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureDigitalMeasure(
            ViSession(Vi),
            ViConstString(Scan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = decode(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureDCVoltMeasure(self, Vi, Scan_list, Range, Resolution, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureDCVoltMeasure(
            ViSession(Vi),
            ViConstString(Scan_list),
            ViReal64(Range),
            ViReal64(Resolution),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureDCCurrMeasure(self, Vi, Scan_list, Range, Resolution, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureDCCurrMeasure(
            ViSession(Vi),
            ViConstString(Scan_list),
            ViReal64(Range),
            ViReal64(Resolution),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureACVoltMeasure(self, Vi, Scan_list, Range, Resolution, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureACVoltMeasure(
            ViSession(Vi),
            ViConstString(Scan_list),
            ViReal64(Range),
            ViReal64(Resolution),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureACCurrMeasure(self, Vi, Scan_list, Range, Resolution, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_MeasureACCurrMeasure(
            ViSession(Vi),
            ViConstString(Scan_list),
            ViReal64(Range),
            ViReal64(Resolution),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasureGetMeasurementFunction(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_MeasureGetMeasurementFunction(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def MeasureSetMeasurementFunction(self, Vi, Channel, Val):
        status = self.dll.Ag34970_MeasureSetMeasurementFunction(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemorySaveState(self, Vi, Identifier):
        status = self.dll.Ag34970_MemorySaveState(ViSession(Vi), ViConstString(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryRecallState(self, Vi, Identifier):
        status = self.dll.Ag34970_MemoryRecallState(ViSession(Vi), ViConstString(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryDeleteLocation(self, Vi, LocationNum):
        status = self.dll.Ag34970_MemoryDeleteLocation(ViSession(Vi), ViInt32(LocationNum))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryGetStateName(self, Vi, LocationNum, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.Ag34970_MemoryGetStateName(
            ViSession(Vi), ViInt32(LocationNum), ViInt32(RetValBufferSize), RetVal
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def MemorySetStateName(self, Vi, LocationNum, Val):
        status = self.dll.Ag34970_MemorySetStateName(ViSession(Vi), ViInt32(LocationNum), ViConstString(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryGetValidState(self, Vi, LocationNum):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_MemoryGetValidState(ViSession(Vi), ViInt32(LocationNum), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def PeriodRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_PeriodRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def PeriodRangeListConfig(self, Vi, Chan_list, Range):
        status = self.dll.Ag34970_PeriodRangeListConfig(ViSession(Vi), ViConstString(Chan_list), ViReal64(Range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PeriodConfigure(self, Vi, Chan_list, Range, Resolution):
        status = self.dll.Ag34970_PeriodConfigure(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Range), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PeriodAutoRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_PeriodAutoRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def PeriodAutoRangeListConfig(self, Vi, Chan_list, AutoRange):
        status = self.dll.Ag34970_PeriodAutoRangeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(AutoRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PeriodApertureListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_PeriodApertureListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def PeriodApertureListConfig(self, Vi, Chan_list, Aperture):
        status = self.dll.Ag34970_PeriodApertureListConfig(ViSession(Vi), ViConstString(Chan_list), ViReal64(Aperture))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PeriodGetAperture(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_PeriodGetAperture(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def PeriodSetAperture(self, Vi, Channel, Val):
        status = self.dll.Ag34970_PeriodSetAperture(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PeriodGetAutoRange(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_PeriodGetAutoRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def PeriodSetAutoRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_PeriodSetAutoRange(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PeriodGetRange(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_PeriodGetRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def PeriodSetRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_PeriodSetRange(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceResolutionListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_ResistanceResolutionListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ResistanceResolutionListConfig(self, Vi, Chan_list, Resolution):
        status = self.dll.Ag34970_ResistanceResolutionListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_ResistanceRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ResistanceRangeListConfig(self, Vi, Chan_list, Range):
        status = self.dll.Ag34970_ResistanceRangeListConfig(ViSession(Vi), ViConstString(Chan_list), ViReal64(Range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceOCompensatedListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_ResistanceOCompensatedListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ResistanceOCompensatedListConfig(self, Vi, Chan_list, OCompensated):
        status = self.dll.Ag34970_ResistanceOCompensatedListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(OCompensated)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceNPLCListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_ResistanceNPLCListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ResistanceNPLCListConfig(self, Vi, Chan_list, NumPLC):
        status = self.dll.Ag34970_ResistanceNPLCListConfig(ViSession(Vi), ViConstString(Chan_list), ViReal64(NumPLC))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceConfigure(self, Vi, Chan_list, Range, Resolution):
        status = self.dll.Ag34970_ResistanceConfigure(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Range), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceAutoRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_ResistanceAutoRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ResistanceAutoRangeListConfig(self, Vi, Chan_list, AutoRange):
        status = self.dll.Ag34970_ResistanceAutoRangeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(AutoRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceApertureListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_ResistanceApertureListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ResistanceApertureListConfig(self, Vi, Chan_list, Aperture):
        status = self.dll.Ag34970_ResistanceApertureListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Aperture)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceGetAperture(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_ResistanceGetAperture(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ResistanceSetAperture(self, Vi, Channel, Val):
        status = self.dll.Ag34970_ResistanceSetAperture(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceGetAutoRange(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_ResistanceGetAutoRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def ResistanceSetAutoRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_ResistanceSetAutoRange(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceGetNPLC(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_ResistanceGetNPLC(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ResistanceSetNPLC(self, Vi, Channel, Val):
        status = self.dll.Ag34970_ResistanceSetNPLC(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceGetOCompensated(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_ResistanceGetOCompensated(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def ResistanceSetOCompensated(self, Vi, Channel, Val):
        status = self.dll.Ag34970_ResistanceSetOCompensated(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceGetRange(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_ResistanceGetRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ResistanceSetRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_ResistanceSetRange(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceGetResolution(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_ResistanceGetResolution(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ResistanceSetResolution(self, Vi, Channel, Val):
        status = self.dll.Ag34970_ResistanceSetResolution(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RouteOpenListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_RouteOpenListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def RouteOpenListConfig(self, Vi, Chan_list):
        status = self.dll.Ag34970_RouteOpenListConfig(ViSession(Vi), ViConstString(Chan_list))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RouteFWireListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_RouteFWireListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def RouteFWireListConfig(self, Vi, Chan_list, Enable):
        status = self.dll.Ag34970_RouteFWireListConfig(ViSession(Vi), ViConstString(Chan_list), ViBoolean(Enable))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RouteDelayListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_RouteDelayListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def RouteDelayListConfig(self, Vi, Chan_list, Seconds):
        status = self.dll.Ag34970_RouteDelayListConfig(ViSession(Vi), ViConstString(Chan_list), ViReal64(Seconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RouteCloseListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_RouteCloseListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def RouteCloseListConfig(self, Vi, Chan_list):
        status = self.dll.Ag34970_RouteCloseListConfig(ViSession(Vi), ViConstString(Chan_list))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RouteCloseExclusiveList(self, Vi, Chan_list):
        status = self.dll.Ag34970_RouteCloseExclusiveList(ViSession(Vi), ViConstString(Chan_list))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RouteCloseExclusive(self, Vi, Channel):
        status = self.dll.Ag34970_RouteCloseExclusive(ViSession(Vi), ViInt32(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RouteAutoDelayListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_RouteAutoDelayListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def RouteAutoDelayListConfig(self, Vi, Chan_list, Delay):
        status = self.dll.Ag34970_RouteAutoDelayListConfig(ViSession(Vi), ViConstString(Chan_list), ViBoolean(Delay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RouteGetAutoDelay(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_RouteGetAutoDelay(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def RouteSetAutoDelay(self, Vi, Channel, Val):
        status = self.dll.Ag34970_RouteSetAutoDelay(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RouteGetClose(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_RouteGetClose(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def RouteSetClose(self, Vi, Channel, Val):
        status = self.dll.Ag34970_RouteSetClose(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RouteGetDelay(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_RouteGetDelay(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def RouteSetDelay(self, Vi, Channel, Val):
        status = self.dll.Ag34970_RouteSetDelay(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RouteGetFWire(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_RouteGetFWire(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def RouteSetFWire(self, Vi, Channel, Val):
        status = self.dll.Ag34970_RouteSetFWire(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RouteGetOpen(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_RouteGetOpen(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def RouteSetOpen(self, Vi, Channel, Val):
        status = self.dll.Ag34970_RouteSetOpen(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScaleUnitListConfig(self, Vi, Chan_list, UnitString):
        status = self.dll.Ag34970_ScaleUnitListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViConstString(UnitString)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScaleStateListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_ScaleStateListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ScaleStateListConfig(self, Vi, Chan_list, State):
        status = self.dll.Ag34970_ScaleStateListConfig(ViSession(Vi), ViConstString(Chan_list), ViBoolean(State))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScaleOffsetNull(self, Vi, Chan_list):
        status = self.dll.Ag34970_ScaleOffsetNull(ViSession(Vi), ViConstString(Chan_list))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScaleOffsetListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_ScaleOffsetListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ScaleOffsetListConfig(self, Vi, Chan_list, Offset):
        status = self.dll.Ag34970_ScaleOffsetListConfig(ViSession(Vi), ViConstString(Chan_list), ViReal64(Offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScaleGainListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_ScaleGainListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ScaleGainListConfig(self, Vi, Chan_list, Gain):
        status = self.dll.Ag34970_ScaleGainListConfig(ViSession(Vi), ViConstString(Chan_list), ViReal64(Gain))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScaleGetGain(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_ScaleGetGain(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ScaleSetGain(self, Vi, Channel, Val):
        status = self.dll.Ag34970_ScaleSetGain(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScaleGetOffset(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_ScaleGetOffset(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ScaleSetOffset(self, Vi, Channel, Val):
        status = self.dll.Ag34970_ScaleSetOffset(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScaleGetState(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_ScaleGetState(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def ScaleSetState(self, Vi, Channel, Val):
        status = self.dll.Ag34970_ScaleSetState(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScaleGetUnit(self, Vi, Channel, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.Ag34970_ScaleGetUnit(ViSession(Vi), ViInt32(Channel), ViInt32(RetValBufferSize), RetVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def ScaleSetUnit(self, Vi, Channel, Val):
        status = self.dll.Ag34970_ScaleSetUnit(ViSession(Vi), ViInt32(Channel), ViConstString(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScaleUnitListQuery(self, Vi, Chan_list, retValBufferSize):
        retVal = ARRAY_ViChar(retValBufferSize)
        status = self.dll.Ag34970_ScaleUnitListQuery(
            ViSession(Vi), ViConstString(Chan_list), ViInt32(retValBufferSize), retVal
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(retVal)

    def ScanSendSoftwareTrigger(self, Vi):
        status = self.dll.Ag34970_ScanSendSoftwareTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScanScanOnceSetup(self, Vi, NumSweeps):
        status = self.dll.Ag34970_ScanScanOnceSetup(ViSession(Vi), ViInt32(NumSweeps))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScanReadNumbersOnly(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_ScanReadNumbersOnly(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ScanIntervalScanSetup(self, Vi, Chan_list, ScanInterval, NumSweeps):
        status = self.dll.Ag34970_ScanIntervalScanSetup(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(ScanInterval),
            ViInt32(NumSweeps),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScanInitiate(self, Vi):
        status = self.dll.Ag34970_ScanInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScanFetchNumbersOnly(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_ScanFetchNumbersOnly(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ScanExternalScanSetup(self, Vi, Chan_list, NumSweeps):
        status = self.dll.Ag34970_ScanExternalScanSetup(ViSession(Vi), ViConstString(Chan_list), ViInt32(NumSweeps))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScanExternalControlScanSetup(self, Vi, Chan_list, ScanInterval, NumSweeps):
        status = self.dll.Ag34970_ScanExternalControlScanSetup(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(ScanInterval),
            ViInt32(NumSweeps),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScanDestructiveRead(self, Vi, Count, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.Ag34970_ScanDestructiveRead(ViSession(Vi), ViInt32(Count), ViInt32(RetValBufferSize), RetVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def ScanAbort(self, Vi):
        status = self.dll.Ag34970_ScanAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ScanGetConfigure(self, Vi, Channel, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.Ag34970_ScanGetConfigure(ViSession(Vi), ViInt32(Channel), ViInt32(RetValBufferSize), RetVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def ScanConfigureListQuery(self, Vi, Chan_list, retValBufferSize):
        retVal = ARRAY_ViChar(retValBufferSize)
        status = self.dll.Ag34970_ScanConfigureListQuery(
            ViSession(Vi), ViConstString(Chan_list), ViInt32(retValBufferSize), retVal
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(retVal)

    def ScanFetch(self, Vi, retValBufferSize):
        retVal = ARRAY_ViChar(retValBufferSize)
        status = self.dll.Ag34970_ScanFetch(ViSession(Vi), ViInt32(retValBufferSize), retVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(retVal)

    def ScanQueryLast(self, Vi, channel, numReadings, retValBufferSize):
        retVal = ARRAY_ViChar(retValBufferSize)
        status = self.dll.Ag34970_ScanQueryLast(
            ViSession(Vi),
            ViInt32(channel),
            ViInt32(numReadings),
            ViInt32(retValBufferSize),
            retVal,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(retVal)

    def ScanRead(self, Vi, retValBufferSize):
        retVal = ARRAY_ViChar(retValBufferSize)
        status = self.dll.Ag34970_ScanRead(ViSession(Vi), ViInt32(retValBufferSize), retVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(retVal)

    def ScanRemoveReadings(self, Vi, numReadings, retValBufferSize):
        retVal = ARRAY_ViChar(retValBufferSize)
        status = self.dll.Ag34970_ScanRemoveReadings(
            ViSession(Vi), ViInt32(numReadings), ViInt32(retValBufferSize), retVal
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(retVal)

    def StatisticsPTPeakListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_StatisticsPTPeakListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def StatisticsMinValueTimeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_StatisticsMinValueTimeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def StatisticsMinValueListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_StatisticsMinValueListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def StatisticsMaxValueTimeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_StatisticsMaxValueTimeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def StatisticsMaxValueListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_StatisticsMaxValueListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def StatisticsCountListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_StatisticsCountListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def StatisticsClearStatistics(self, Vi, Chan_list):
        status = self.dll.Ag34970_StatisticsClearStatistics(ViSession(Vi), ViConstString(Chan_list))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatisticsAverageListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_StatisticsAverageListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def StatisticsGetAverage(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_StatisticsGetAverage(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def StatisticsGetCount(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_StatisticsGetCount(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatisticsGetMaxValue(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_StatisticsGetMaxValue(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def StatisticsGetMaxValueTime(self, Vi, Channel, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.Ag34970_StatisticsGetMaxValueTime(
            ViSession(Vi), ViInt32(Channel), ViInt32(RetValBufferSize), RetVal
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def StatisticsGetMinValue(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_StatisticsGetMinValue(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def StatisticsGetMinValueTime(self, Vi, Channel, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.Ag34970_StatisticsGetMinValueTime(
            ViSession(Vi), ViInt32(Channel), ViInt32(RetValBufferSize), RetVal
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def StatisticsGetPTPeak(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_StatisticsGetPTPeak(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def StatusPreset(self, Vi):
        status = self.dll.Ag34970_StatusPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusConfigureServiceRequest(self, Vi, Reason):
        status = self.dll.Ag34970_StatusConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusClear(self, Vi):
        status = self.dll.Ag34970_StatusClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusGetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.Ag34970_StatusGetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatusSetRegister(self, Vi, Register, SubRegister, Val):
        status = self.dll.Ag34970_StatusSetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        status = self.dll.Ag34970_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemSetSystemTime(self, Vi, hours, mins, Seconds):
        status = self.dll.Ag34970_SystemSetSystemTime(ViSession(Vi), ViInt32(hours), ViInt32(mins), ViReal64(Seconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemSetSystemDate(self, Vi, year, month, day):
        status = self.dll.Ag34970_SystemSetSystemDate(ViSession(Vi), ViInt32(year), ViInt32(month), ViInt32(day))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemSetInterface(self, Vi, Interface, Address, Reset, OptionString):
        status = self.dll.Ag34970_SystemSetInterface(
            ViSession(Vi),
            ViInt32(Interface),
            ViConstString(Address),
            ViBoolean(Reset),
            ViConstString(OptionString),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRWLock(self, Vi):
        status = self.dll.Ag34970_SystemRWLock(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemPreset(self, Vi):
        status = self.dll.Ag34970_SystemPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemGetSystemTime(self, Vi):
        pHours = ViInt32()
        pMins = ViInt32()
        pSeconds = ViReal64()
        status = self.dll.Ag34970_SystemGetSystemTime(ViSession(Vi), byref(pHours), byref(pMins), byref(pSeconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pHours = int(pHours.value)
        pMins = int(pMins.value)
        pSeconds = float(pSeconds.value)
        return pHours, pMins, pSeconds

    def SystemGetSystemDate(self, Vi):
        pYear = ViInt32()
        pMonth = ViInt32()
        pDay = ViInt32()
        status = self.dll.Ag34970_SystemGetSystemDate(ViSession(Vi), byref(pYear), byref(pMonth), byref(pDay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pYear = int(pYear.value)
        pMonth = int(pMonth.value)
        pDay = int(pDay.value)
        return pYear, pMonth, pDay

    def SystemEnableLocalControls(self, Vi):
        status = self.dll.Ag34970_SystemEnableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemDisableLocalControls(self, Vi):
        status = self.dll.Ag34970_SystemDisableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemCardReset(self, Vi, SlotNum, ResetAll):
        status = self.dll.Ag34970_SystemCardReset(ViSession(Vi), ViInt32(SlotNum), ViBoolean(ResetAll))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemGetCardType(self, Vi, SlotNum, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.Ag34970_SystemGetCardType(ViSession(Vi), ViInt32(SlotNum), ViInt32(RetValBufferSize), RetVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def SystemGetSlotLabel(self, Vi, Slot, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.Ag34970_SystemGetSlotLabel(ViSession(Vi), ViInt32(Slot), ViInt32(RetValBufferSize), RetVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def SystemSetSlotLabel(self, Vi, Slot, Val):
        status = self.dll.Ag34970_SystemSetSlotLabel(ViSession(Vi), ViInt32(Slot), ViConstString(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRead(self, Vi, retValBufferSize):
        retVal = ARRAY_ViChar(retValBufferSize)
        retValActualSize = ViInt32()
        status = self.dll.Ag34970_SystemRead(ViSession(Vi), ViInt32(retValBufferSize), retVal, byref(retValActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        retVal = decode(retVal)
        retValActualSize = int(retValActualSize.value)
        return retVal, retValActualSize

    def SystemWrite(self, Vi, CommandString):
        status = self.dll.Ag34970_SystemWrite(ViSession(Vi), ViConstString(CommandString))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemLockRelease(self, Vi):
        status = self.dll.Ag34970_SystemLockRelease(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemLockRequest(self, Vi):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_SystemLockRequest(ViSession(Vi), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def TemperatureUnitsListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureUnitsListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureUnitsListConfig(self, Vi, Chan_list, Units):
        status = self.dll.Ag34970_TemperatureUnitsListConfig(ViSession(Vi), ViConstString(Chan_list), ViInt32(Units))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureTransducerTypeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureTransducerTypeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureTransducerTypeListConfig(self, Vi, Chan_list, Type):
        status = self.dll.Ag34970_TemperatureTransducerTypeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViInt32(Type)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureThermocoupleTypeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureThermocoupleTypeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureThermocoupleTypeListConfig(self, Vi, Chan_list, Type):
        status = self.dll.Ag34970_TemperatureThermocoupleTypeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViInt32(Type)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureThermocoupleCheckListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureThermocoupleCheckListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureThermocoupleCheckListConfig(self, Vi, Chan_list, Enable):
        status = self.dll.Ag34970_TemperatureThermocoupleCheckListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(Enable)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureThermistorTypeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureThermistorTypeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureThermistorTypeListConfig(self, Vi, Chan_list, Type):
        status = self.dll.Ag34970_TemperatureThermistorTypeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViInt32(Type)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureRTDTypeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureRTDTypeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureRTDTypeListConfig(self, Vi, Chan_list, Type):
        status = self.dll.Ag34970_TemperatureRTDTypeListConfig(ViSession(Vi), ViConstString(Chan_list), ViInt32(Type))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureRTDResistanceListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureRTDResistanceListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureRTDResistanceListConfig(self, Vi, Chan_list, Resistance):
        status = self.dll.Ag34970_TemperatureRTDResistanceListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Resistance)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureRJunctionTypeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureRJunctionTypeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureRJunctionTypeListConfig(self, Vi, Chan_list, Type):
        status = self.dll.Ag34970_TemperatureRJunctionTypeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViInt32(Type)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureRJunctionTempListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureRJunctionTempListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureRJunctionTempListConfig(self, Vi, Chan_list, Temp):
        status = self.dll.Ag34970_TemperatureRJunctionTempListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Temp)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureNPLCListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureNPLCListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureNPLCListConfig(self, Vi, Chan_list, NumPLC):
        status = self.dll.Ag34970_TemperatureNPLCListConfig(ViSession(Vi), ViConstString(Chan_list), ViReal64(NumPLC))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureFRTDTypeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureFRTDTypeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureFRTDTypeListConfig(self, Vi, Chan_list, Type):
        status = self.dll.Ag34970_TemperatureFRTDTypeListConfig(ViSession(Vi), ViConstString(Chan_list), ViInt32(Type))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureFRTDResistanceListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureFRTDResistanceListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureFRTDResistanceListConfig(self, Vi, Chan_list, Resistance):
        status = self.dll.Ag34970_TemperatureFRTDResistanceListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Resistance)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureConfigureThermistor(self, Vi, Chan_list, ThermistorType, Resolution):
        status = self.dll.Ag34970_TemperatureConfigureThermistor(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(ThermistorType),
            ViReal64(Resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureConfigureTCouple(self, Vi, Chan_list, TCoupleType, Resolution):
        status = self.dll.Ag34970_TemperatureConfigureTCouple(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(TCoupleType),
            ViReal64(Resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureConfigureRTD(self, Vi, Chan_list, RTDType, Resolution):
        status = self.dll.Ag34970_TemperatureConfigureRTD(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RTDType),
            ViReal64(Resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureConfigureFRTD(self, Vi, Chan_list, FRTDType, Resolution):
        status = self.dll.Ag34970_TemperatureConfigureFRTD(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(FRTDType),
            ViReal64(Resolution),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureCelciusRJunctionQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TemperatureCelciusRJunctionQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TemperatureGetFRTDResistance(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_TemperatureGetFRTDResistance(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def TemperatureSetFRTDResistance(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TemperatureSetFRTDResistance(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureGetFRTDType(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_TemperatureGetFRTDType(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def TemperatureSetFRTDType(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TemperatureSetFRTDType(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureGetNPLC(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_TemperatureGetNPLC(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def TemperatureSetNPLC(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TemperatureSetNPLC(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureGetRJunctionTemp(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_TemperatureGetRJunctionTemp(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def TemperatureSetRJunctionTemp(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TemperatureSetRJunctionTemp(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureGetRJunctionType(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_TemperatureGetRJunctionType(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def TemperatureSetRJunctionType(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TemperatureSetRJunctionType(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureGetRTDResistance(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_TemperatureGetRTDResistance(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def TemperatureSetRTDResistance(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TemperatureSetRTDResistance(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureGetRTDType(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_TemperatureGetRTDType(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def TemperatureSetRTDType(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TemperatureSetRTDType(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureGetThermistorType(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_TemperatureGetThermistorType(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def TemperatureSetThermistorType(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TemperatureSetThermistorType(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureGetThermocoupleCheck(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_TemperatureGetThermocoupleCheck(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def TemperatureSetThermocoupleCheck(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TemperatureSetThermocoupleCheck(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureGetThermocoupleType(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_TemperatureGetThermocoupleType(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def TemperatureSetThermocoupleType(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TemperatureSetThermocoupleType(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureGetTransducerType(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_TemperatureGetTransducerType(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def TemperatureSetTransducerType(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TemperatureSetTransducerType(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureGetUnits(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_TemperatureGetUnits(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def TemperatureSetUnits(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TemperatureSetUnits(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TotalizeSlopeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TotalizeSlopeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TotalizeSlopeListConfig(self, Vi, Chan_list, Slope):
        status = self.dll.Ag34970_TotalizeSlopeListConfig(ViSession(Vi), ViConstString(Chan_list), ViInt32(Slope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TotalizeReadTypeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TotalizeReadTypeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TotalizeReadTypeListConfig(self, Vi, Chan_list, Type):
        status = self.dll.Ag34970_TotalizeReadTypeListConfig(ViSession(Vi), ViConstString(Chan_list), ViInt32(Type))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TotalizeReadData(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_TotalizeReadData(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def TotalizeConfigure(self, Vi, Chan_list, Reset):
        status = self.dll.Ag34970_TotalizeConfigure(ViSession(Vi), ViConstString(Chan_list), ViInt32(Reset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TotalizeClearTotal(self, Vi, Chan_list):
        status = self.dll.Ag34970_TotalizeClearTotal(ViSession(Vi), ViConstString(Chan_list))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TotalizeGetReadType(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_TotalizeGetReadType(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def TotalizeSetReadType(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TotalizeSetReadType(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TotalizeGetSlope(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_TotalizeGetSlope(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def TotalizeSetSlope(self, Vi, Channel, Val):
        status = self.dll.Ag34970_TotalizeSetSlope(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageAutoZeroListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_VoltageAutoZeroListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def VoltageAutoZeroListConfig(self, Vi, Chan_list, AutoZero):
        status = self.dll.Ag34970_VoltageAutoZeroListConfig(ViSession(Vi), ViConstString(Chan_list), ViInt32(AutoZero))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageAutoResistanceListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_VoltageAutoResistanceListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def VoltageAutoResistanceListConfig(self, Vi, Chan_list, Enable):
        status = self.dll.Ag34970_VoltageAutoResistanceListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(Enable)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageGetAutoResistance(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_VoltageGetAutoResistance(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def VoltageSetAutoResistance(self, Vi, Channel, Val):
        status = self.dll.Ag34970_VoltageSetAutoResistance(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageGetAutoZero(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_VoltageGetAutoZero(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def VoltageSetAutoZero(self, Vi, Channel, Val):
        status = self.dll.Ag34970_VoltageSetAutoZero(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageACVoltageRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_VoltageACVoltageRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def VoltageACVoltageRangeListConfig(self, Vi, Chan_list, Range):
        status = self.dll.Ag34970_VoltageACVoltageRangeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Range)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageACVoltageConfigure(self, Vi, Chan_list, Range, Resolution):
        status = self.dll.Ag34970_VoltageACVoltageConfigure(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Range), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageACVoltageBandwidthListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_VoltageACVoltageBandwidthListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def VoltageACVoltageBandwidthListConfig(self, Vi, Chan_list, Bandwidth):
        status = self.dll.Ag34970_VoltageACVoltageBandwidthListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViInt32(Bandwidth)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageACVoltageAutoRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_VoltageACVoltageAutoRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def VoltageACVoltageAutoRangeListConfig(self, Vi, Chan_list, AutoRange):
        status = self.dll.Ag34970_VoltageACVoltageAutoRangeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(AutoRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageACVoltageGetAutoRange(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_VoltageACVoltageGetAutoRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def VoltageACVoltageSetAutoRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_VoltageACVoltageSetAutoRange(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageACVoltageGetBandwidth(self, Vi, Channel):
        RetVal = ViInt32()
        status = self.dll.Ag34970_VoltageACVoltageGetBandwidth(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def VoltageACVoltageSetBandwidth(self, Vi, Channel, Val):
        status = self.dll.Ag34970_VoltageACVoltageSetBandwidth(ViSession(Vi), ViInt32(Channel), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageACVoltageGetRange(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_VoltageACVoltageGetRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def VoltageACVoltageSetRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_VoltageACVoltageSetRange(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageDCVoltageResolutionListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_VoltageDCVoltageResolutionListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def VoltageDCVoltageResolutionListConfig(self, Vi, Chan_list, Resolution):
        status = self.dll.Ag34970_VoltageDCVoltageResolutionListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageDCVoltageRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_VoltageDCVoltageRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def VoltageDCVoltageRangeListConfig(self, Vi, Chan_list, Range):
        status = self.dll.Ag34970_VoltageDCVoltageRangeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Range)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageDCVoltageNPLCListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_VoltageDCVoltageNPLCListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def VoltageDCVoltageNPLCListConfig(self, Vi, Chan_list, NumPLC):
        status = self.dll.Ag34970_VoltageDCVoltageNPLCListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(NumPLC)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageDCVoltageConfigure(self, Vi, Chan_list, Range, Resolution):
        status = self.dll.Ag34970_VoltageDCVoltageConfigure(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Range), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageDCVoltageAutoRangeListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViInt32(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_VoltageDCVoltageAutoRangeListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def VoltageDCVoltageAutoRangeListConfig(self, Vi, Chan_list, AutoRange):
        status = self.dll.Ag34970_VoltageDCVoltageAutoRangeListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViBoolean(AutoRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageDCVoltageApertureListQuery(self, Vi, Chan_list, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34970_VoltageDCVoltageApertureListQuery(
            ViSession(Vi),
            ViConstString(Chan_list),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def VoltageDCVoltageApertureListConfig(self, Vi, Chan_list, Aperture):
        status = self.dll.Ag34970_VoltageDCVoltageApertureListConfig(
            ViSession(Vi), ViConstString(Chan_list), ViReal64(Aperture)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageDCVoltageGetAperture(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_VoltageDCVoltageGetAperture(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def VoltageDCVoltageSetAperture(self, Vi, Channel, Val):
        status = self.dll.Ag34970_VoltageDCVoltageSetAperture(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageDCVoltageGetAutoRange(self, Vi, Channel):
        RetVal = ViBoolean()
        status = self.dll.Ag34970_VoltageDCVoltageGetAutoRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def VoltageDCVoltageSetAutoRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_VoltageDCVoltageSetAutoRange(ViSession(Vi), ViInt32(Channel), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageDCVoltageGetNPLC(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_VoltageDCVoltageGetNPLC(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def VoltageDCVoltageSetNPLC(self, Vi, Channel, Val):
        status = self.dll.Ag34970_VoltageDCVoltageSetNPLC(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageDCVoltageGetRange(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_VoltageDCVoltageGetRange(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def VoltageDCVoltageSetRange(self, Vi, Channel, Val):
        status = self.dll.Ag34970_VoltageDCVoltageSetRange(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def VoltageDCVoltageGetResolution(self, Vi, Channel):
        RetVal = ViReal64()
        status = self.dll.Ag34970_VoltageDCVoltageGetResolution(ViSession(Vi), ViInt32(Channel), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def VoltageDCVoltageSetResolution(self, Vi, Channel, Val):
        status = self.dll.Ag34970_VoltageDCVoltageSetResolution(ViSession(Vi), ViInt32(Channel), ViReal64(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryExternalExportContents(self, Vi, MaxTimeMilliseconds):
        status = self.dll.Ag34970_MemoryExternalExportContents(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryExternalImportConfig(self, Vi, FileName, MaxTimeMilliseconds):
        status = self.dll.Ag34970_MemoryExternalImportConfig(
            ViSession(Vi), ViConstString(FileName), ViInt32(MaxTimeMilliseconds)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
