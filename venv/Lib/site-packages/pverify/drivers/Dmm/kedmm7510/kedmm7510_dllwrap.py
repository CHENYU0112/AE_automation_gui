from __future__ import annotations

from ctypes import byref

from pverify.contrib.Lab.ivi.headers.ivi import *
from pverify.contrib.Lab.ivi.helper import *
from pverify.contrib.Lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import kedmm7510_const as const
from .kedmm7510_const import *


class kedmm7510_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("kedmm7510.dll", "kedmm7510_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "kedmm7510"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        _status = self.dll.kedmm7510_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Vi.value)

    def close(self, Vi):
        _status = self.dll.kedmm7510_close(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        _status = self.dll.kedmm7510_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        _status = self.dll.kedmm7510_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        _status = self.dll.kedmm7510_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        _status = self.dll.kedmm7510_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        _status = self.dll.kedmm7510_ClearError(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearInterchangeWarnings(self, Vi):
        _status = self.dll.kedmm7510_ClearInterchangeWarnings(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        _status = self.dll.kedmm7510_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(InterchangeWarningBufferSize)
        _status = self.dll.kedmm7510_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        _status = self.dll.kedmm7510_InvalidateAllAttributes(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetInterchangeCheck(self, Vi):
        _status = self.dll.kedmm7510_ResetInterchangeCheck(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Disable(self, Vi):
        _status = self.dll.kedmm7510_Disable(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        _status = self.dll.kedmm7510_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        _status = self.dll.kedmm7510_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        _status = self.dll.kedmm7510_reset(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetWithDefaults(self, Vi):
        _status = self.dll.kedmm7510_ResetWithDefaults(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        _status = self.dll.kedmm7510_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        _status = self.dll.kedmm7510_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        _status = self.dll.kedmm7510_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        _status = self.dll.kedmm7510_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        _status = self.dll.kedmm7510_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        _status = self.dll.kedmm7510_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        _status = self.dll.kedmm7510_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.kedmm7510_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.kedmm7510_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.kedmm7510_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.kedmm7510_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.kedmm7510_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurement(self, Vi, Function, Range, Resolution):
        _status = self.dll.kedmm7510_ConfigureMeasurement(
            ViSession(Vi), ViInt32(Function), ViReal64(Range), ViReal64(Resolution)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFrequencyVoltageRange(self, Vi, FrequencyVoltageRange):
        _status = self.dll.kedmm7510_ConfigureFrequencyVoltageRange(ViSession(Vi), ViReal64(FrequencyVoltageRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureACBandwidth(self, Vi, MinFreq, MaxFreq):
        _status = self.dll.kedmm7510_ConfigureACBandwidth(ViSession(Vi), ViReal64(MinFreq), ViReal64(MaxFreq))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTransducerType(self, Vi, TransducerType):
        _status = self.dll.kedmm7510_ConfigureTransducerType(ViSession(Vi), ViInt32(TransducerType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFixedRefJunction(self, Vi, FixedRefJunction):
        _status = self.dll.kedmm7510_ConfigureFixedRefJunction(ViSession(Vi), ViReal64(FixedRefJunction))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureThermistor(self, Vi, Resistance):
        _status = self.dll.kedmm7510_ConfigureThermistor(ViSession(Vi), ViReal64(Resistance))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRTD(self, Vi, Alpha, Resistance):
        _status = self.dll.kedmm7510_ConfigureRTD(ViSession(Vi), ViReal64(Alpha), ViReal64(Resistance))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureThermocouple(self, Vi, ThermocoupleType, RefJunctionType):
        _status = self.dll.kedmm7510_ConfigureThermocouple(
            ViSession(Vi), ViInt32(ThermocoupleType), ViInt32(RefJunctionType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerSlope(self, Vi, Polarity):
        _status = self.dll.kedmm7510_ConfigureTriggerSlope(ViSession(Vi), ViInt32(Polarity))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTrigger(self, Vi, TriggerSource, TriggerDelay):
        _status = self.dll.kedmm7510_ConfigureTrigger(ViSession(Vi), ViInt32(TriggerSource), ViReal64(TriggerDelay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetApertureTimeInfo(self, Vi):
        ApertureTime = ViReal64()
        ApertureTimeUnits = ViInt32()
        _status = self.dll.kedmm7510_GetApertureTimeInfo(ViSession(Vi), byref(ApertureTime), byref(ApertureTimeUnits))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ApertureTime = float(ApertureTime.value)
        ApertureTimeUnits = int(ApertureTimeUnits.value)
        return ApertureTime, ApertureTimeUnits

    def GetAutoRangeValue(self, Vi):
        AutoRangeValue = ViReal64()
        _status = self.dll.kedmm7510_GetAutoRangeValue(ViSession(Vi), byref(AutoRangeValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(AutoRangeValue.value)

    def ConfigureAutoZeroMode(self, Vi, AutoZeroMode):
        _status = self.dll.kedmm7510_ConfigureAutoZeroMode(ViSession(Vi), ViInt32(AutoZeroMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePowerLineFrequency(self, Vi, PowerLineFreq):
        _status = self.dll.kedmm7510_ConfigurePowerLineFrequency(ViSession(Vi), ViReal64(PowerLineFreq))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasCompleteDest(self, Vi, MeasCompleteDest):
        _status = self.dll.kedmm7510_ConfigureMeasCompleteDest(ViSession(Vi), ViInt32(MeasCompleteDest))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMultiPoint(self, Vi, TriggerCount, SampleCount, SampleTrigger, SampleInterval):
        _status = self.dll.kedmm7510_ConfigureMultiPoint(
            ViSession(Vi),
            ViInt32(TriggerCount),
            ViInt32(SampleCount),
            ViInt32(SampleTrigger),
            ViReal64(SampleInterval),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Read(self, Vi, MaxTimeMilliseconds):
        Reading = ViReal64()
        _status = self.dll.kedmm7510_Read(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Reading))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Reading.value)

    def ReadMultiPoint(self, Vi, MaxTimeMilliseconds, ArraySize):
        ReadingArray = ARRAY_ViReal64(ArraySize)
        ActualPts = ViInt32()
        _status = self.dll.kedmm7510_ReadMultiPoint(
            ViSession(Vi),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ArraySize),
            ReadingArray,
            byref(ActualPts),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ReadingArray = list(ReadingArray)
        ActualPts = int(ActualPts.value)
        return ReadingArray, ActualPts

    def Abort(self, Vi):
        _status = self.dll.kedmm7510_Abort(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Fetch(self, Vi, MaxTimeMilliseconds):
        Reading = ViReal64()
        _status = self.dll.kedmm7510_Fetch(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Reading))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Reading.value)

    def FetchMultiPoint(self, Vi, MaxTimeMilliseconds, ArraySize):
        ReadingArray = ARRAY_ViReal64(ArraySize)
        ActualPts = ViInt32()
        _status = self.dll.kedmm7510_FetchMultiPoint(
            ViSession(Vi),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ArraySize),
            ReadingArray,
            byref(ActualPts),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ReadingArray = list(ReadingArray)
        ActualPts = int(ActualPts.value)
        return ReadingArray, ActualPts

    def Initiate(self, Vi):
        _status = self.dll.kedmm7510_Initiate(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IsOverRange(self, Vi, MeasurementValue):
        IsOverRange = ViBoolean()
        _status = self.dll.kedmm7510_IsOverRange(ViSession(Vi), ViReal64(MeasurementValue), byref(IsOverRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(IsOverRange.value)

    def SendSoftwareTrigger(self, Vi):
        _status = self.dll.kedmm7510_SendSoftwareTrigger(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RunScript(self, Vi, ScriptName):
        _status = self.dll.kedmm7510_RunScript(ViSession(Vi), ViConstString(ScriptName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadOperationCondition(self, Vi):
        Val = ViInt32()
        _status = self.dll.kedmm7510_ReadOperationCondition(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def MapEventIDToBitNumberInOERegister(self, Vi, BitNumber, SetEvent, ClearEvent):
        _status = self.dll.kedmm7510_MapEventIDToBitNumberInOERegister(
            ViSession(Vi), ViInt32(BitNumber), ViInt32(SetEvent), ViInt32(ClearEvent)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadOERegisterMap(self, Vi, BitNumber):
        SetEvent = ViInt32()
        ClearEvent = ViInt32()
        _status = self.dll.kedmm7510_ReadOERegisterMap(
            ViSession(Vi), ViInt32(BitNumber), byref(SetEvent), byref(ClearEvent)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        SetEvent = int(SetEvent.value)
        ClearEvent = int(ClearEvent.value)
        return SetEvent, ClearEvent

    def Preset(self, Vi):
        _status = self.dll.kedmm7510_Preset(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadQuestionableCondition(self, Vi):
        Val = ViInt32()
        _status = self.dll.kedmm7510_ReadQuestionableCondition(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def MapEventIDToBitNumberInQERegister(self, Vi, BitNumber, SetEvent, ClearEvent):
        _status = self.dll.kedmm7510_MapEventIDToBitNumberInQERegister(
            ViSession(Vi), ViInt32(BitNumber), ViInt32(SetEvent), ViInt32(ClearEvent)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadQERegisterMap(self, Vi, BitNumber):
        SetEvent = ViInt32()
        ClearEvent = ViInt32()
        _status = self.dll.kedmm7510_ReadQERegisterMap(
            ViSession(Vi), ViInt32(BitNumber), byref(SetEvent), byref(ClearEvent)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        SetEvent = int(SetEvent.value)
        ClearEvent = int(ClearEvent.value)
        return SetEvent, ClearEvent

    def ReadOperationEventRegister(self, Vi):
        Val = ViInt32()
        _status = self.dll.kedmm7510_ReadOperationEventRegister(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def ReadQuestionableEventRegister(self, Vi):
        Val = ViInt32()
        _status = self.dll.kedmm7510_ReadQuestionableEventRegister(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def StatusClear(self, Vi):
        _status = self.dll.kedmm7510_StatusClear(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Beep(self, Vi, Frequency, Time):
        _status = self.dll.kedmm7510_Beep(ViSession(Vi), ViReal64(Frequency), ViReal64(Time))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Clear(self, Vi):
        _status = self.dll.kedmm7510_Clear(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LANConfiguration(
        self,
        Vi,
        IPAddressBufferSize,
        IPAddress,
        SubnetMaskBufferSize,
        SubnetMask,
        GatewayBufferSize,
        Gateway,
    ):
        _status = self.dll.kedmm7510_LANConfiguration(
            ViSession(Vi),
            ViInt32(IPAddressBufferSize),
            ViConstString(IPAddress),
            ViInt32(SubnetMaskBufferSize),
            ViConstString(SubnetMask),
            ViInt32(GatewayBufferSize),
            ViConstString(Gateway),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryLANConfiguration(
        self,
        Vi,
        IPAddressBufferSize,
        SubnetMaskBufferSize,
        GatewayBufferSize,
        ValBufferSize,
    ):
        IPAddress = ARRAY_ViChar(IPAddressBufferSize)
        SubnetMask = ARRAY_ViChar(SubnetMaskBufferSize)
        Gateway = ARRAY_ViChar(GatewayBufferSize)
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.kedmm7510_QueryLANConfiguration(
            ViSession(Vi),
            ViInt32(IPAddressBufferSize),
            IPAddress,
            ViInt32(SubnetMaskBufferSize),
            SubnetMask,
            ViInt32(GatewayBufferSize),
            Gateway,
            ViInt32(ValBufferSize),
            Val,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        IPAddress = decode(IPAddress)
        SubnetMask = decode(SubnetMask)
        Gateway = decode(Gateway)
        Val = decode(Val)
        return IPAddress, SubnetMask, Gateway, Val

    def ReadNextError(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.kedmm7510_ReadNextError(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def ReadNextErrorCode(self, Vi):
        Val = ViInt32()
        _status = self.dll.kedmm7510_ReadNextErrorCode(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def PostEventLog(self, Vi, MessageBufferSize, Message, SeverityType):
        _status = self.dll.kedmm7510_PostEventLog(
            ViSession(Vi),
            ViInt32(MessageBufferSize),
            ViConstString(Message),
            ViInt32(SeverityType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SaveEventLog(self, Vi, FilenameBufferSize, Filename, EventType):
        _status = self.dll.kedmm7510_SaveEventLog(
            ViSession(Vi),
            ViInt32(FilenameBufferSize),
            ViConstString(Filename),
            ViInt32(EventType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SaveAllEventLogs(self, Vi, FilenameBufferSize, Filename):
        _status = self.dll.kedmm7510_SaveAllEventLogs(
            ViSession(Vi), ViInt32(FilenameBufferSize), ViConstString(Filename)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LANAutoConfiguration(self, Vi):
        _status = self.dll.kedmm7510_LANAutoConfiguration(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetEventLogCount(self, Vi, Mask):
        EventLogCount = ViInt32()
        _status = self.dll.kedmm7510_GetEventLogCount(ViSession(Vi), ViInt32(Mask), byref(EventLogCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(EventLogCount.value)

    def GetReadNextEventLog(self, Vi, Mask, ReadNextEventLogBufferSize):
        ReadNextEventLog = ARRAY_ViChar(ReadNextEventLogBufferSize)
        _status = self.dll.kedmm7510_GetReadNextEventLog(
            ViSession(Vi),
            ViInt32(Mask),
            ViInt32(ReadNextEventLogBufferSize),
            ReadNextEventLog,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(ReadNextEventLog)

    def SaveSetup(self, Vi, SetupNumber):
        _status = self.dll.kedmm7510_SaveSetup(ViSession(Vi), ViInt32(SetupNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RecallSetup(self, Vi, SetupNumber):
        _status = self.dll.kedmm7510_RecallSetup(ViSession(Vi), ViInt32(SetupNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerAbort(self, Vi):
        _status = self.dll.kedmm7510_TriggerAbort(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InitiateTrigger(self, Vi):
        _status = self.dll.kedmm7510_InitiateTrigger(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SendSoftwareTrigger2(self, Vi):
        _status = self.dll.kedmm7510_SendSoftwareTrigger2(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearTimerTrigger(self, Vi, TimerNumber):
        _status = self.dll.kedmm7510_ClearTimerTrigger(ViSession(Vi), ViInt32(TimerNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetTimerTriggerEventCount(self, Vi, TimerNumber):
        EventCount = ViInt32()
        _status = self.dll.kedmm7510_GetTimerTriggerEventCount(ViSession(Vi), ViInt32(TimerNumber), byref(EventCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(EventCount.value)

    def SetTimerTriggerEventCount(self, Vi, TimerNumber, EventCount):
        _status = self.dll.kedmm7510_SetTimerTriggerEventCount(ViSession(Vi), ViInt32(TimerNumber), ViInt32(EventCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetTimerTriggerDelay(self, Vi, TimerNumber):
        Delay = ViReal64()
        _status = self.dll.kedmm7510_GetTimerTriggerDelay(ViSession(Vi), ViInt32(TimerNumber), byref(Delay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Delay.value)

    def SetTimerTriggerDelay(self, Vi, TimerNumber, Delay):
        _status = self.dll.kedmm7510_SetTimerTriggerDelay(ViSession(Vi), ViInt32(TimerNumber), ViReal64(Delay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IsTimerTriggerOverRun(self, Vi, TimerNumber):
        IsTimerOverRun = ViBoolean()
        _status = self.dll.kedmm7510_IsTimerTriggerOverRun(ViSession(Vi), ViInt32(TimerNumber), byref(IsTimerOverRun))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(IsTimerOverRun.value)

    def GetTimerTriggerGenerateEventidState(self, Vi, TimerNumber):
        GenerateEventIDState = ViBoolean()
        _status = self.dll.kedmm7510_GetTimerTriggerGenerateEventidState(
            ViSession(Vi), ViInt32(TimerNumber), byref(GenerateEventIDState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(GenerateEventIDState.value)

    def SetTimerTriggerGenerateEventidState(self, Vi, TimerNumber, GenerateEventIDState):
        _status = self.dll.kedmm7510_SetTimerTriggerGenerateEventidState(
            ViSession(Vi), ViInt32(TimerNumber), ViBoolean(GenerateEventIDState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetTimerTriggerState(self, Vi, TimerNumber):
        State = ViBoolean()
        _status = self.dll.kedmm7510_GetTimerTriggerState(ViSession(Vi), ViInt32(TimerNumber), byref(State))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(State.value)

    def SetTimerTriggerState(self, Vi, TimerNumber, State):
        _status = self.dll.kedmm7510_SetTimerTriggerState(ViSession(Vi), ViInt32(TimerNumber), ViBoolean(State))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetTimerTriggerStartByEventid(self, Vi, TimerNumber, StartByEventIDBufferSize):
        StartByEventID = ARRAY_ViChar(StartByEventIDBufferSize)
        _status = self.dll.kedmm7510_GetTimerTriggerStartByEventid(
            ViSession(Vi),
            ViInt32(TimerNumber),
            ViInt32(StartByEventIDBufferSize),
            StartByEventID,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(StartByEventID)

    def SetTimerTriggerStartByEventid(self, Vi, TimerNumber, StartByEventID):
        _status = self.dll.kedmm7510_SetTimerTriggerStartByEventid(
            ViSession(Vi), ViInt32(TimerNumber), ViConstString(StartByEventID)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetTimerTriggerStartFractional(self, Vi, TimerNumber):
        StartFractional = ViReal64()
        _status = self.dll.kedmm7510_GetTimerTriggerStartFractional(
            ViSession(Vi), ViInt32(TimerNumber), byref(StartFractional)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(StartFractional.value)

    def SetTimerTriggerStartFractional(self, Vi, TimerNumber, StartFractional):
        _status = self.dll.kedmm7510_SetTimerTriggerStartFractional(
            ViSession(Vi), ViInt32(TimerNumber), ViReal64(StartFractional)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetTimerTriggerStartSeconds(self, Vi, TimerNumber):
        StartSeconds = ViReal64()
        _status = self.dll.kedmm7510_GetTimerTriggerStartSeconds(
            ViSession(Vi), ViInt32(TimerNumber), byref(StartSeconds)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(StartSeconds.value)

    def SetTimerTriggerStartSeconds(self, Vi, TimerNumber, StartSeconds):
        _status = self.dll.kedmm7510_SetTimerTriggerStartSeconds(
            ViSession(Vi), ViInt32(TimerNumber), ViReal64(StartSeconds)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearDigtalTrigger(self, Vi, InputLine):
        _status = self.dll.kedmm7510_ClearDigtalTrigger(ViSession(Vi), ViInt32(InputLine))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitalTriggerMode(self, Vi, InputLine):
        Mode = ViInt32()
        _status = self.dll.kedmm7510_GetDigitalTriggerMode(ViSession(Vi), ViReal64(InputLine), byref(Mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Mode.value)

    def SetDigitalTriggerMode(self, Vi, InputLine, Mode):
        _status = self.dll.kedmm7510_SetDigitalTriggerMode(ViSession(Vi), ViReal64(InputLine), ViInt32(Mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitalTriggerOverRunStatus(self, Vi, InputLine):
        OverRunStatus = ViBoolean()
        _status = self.dll.kedmm7510_GetDigitalTriggerOverRunStatus(
            ViSession(Vi), ViInt32(InputLine), byref(OverRunStatus)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(OverRunStatus.value)

    def GetDigitalTriggerOutputLogic(self, Vi, InputLine):
        OutputLogic = ViInt32()
        _status = self.dll.kedmm7510_GetDigitalTriggerOutputLogic(ViSession(Vi), ViInt32(InputLine), byref(OutputLogic))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(OutputLogic.value)

    def SetDigitalTriggerOutputLogic(self, Vi, InputLine, OutputLogic):
        _status = self.dll.kedmm7510_SetDigitalTriggerOutputLogic(
            ViSession(Vi), ViInt32(InputLine), ViInt32(OutputLogic)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitalTriggerOutputPulsewidth(self, Vi, InputLine):
        OutputPulsewidth = ViReal64()
        _status = self.dll.kedmm7510_GetDigitalTriggerOutputPulsewidth(
            ViSession(Vi), ViInt32(InputLine), byref(OutputPulsewidth)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(OutputPulsewidth.value)

    def SetDigitalTriggerOutputPulsewidth(self, Vi, InputLine, OutputPulsewidth):
        _status = self.dll.kedmm7510_SetDigitalTriggerOutputPulsewidth(
            ViSession(Vi), ViInt32(InputLine), ViReal64(OutputPulsewidth)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitalTriggerOutputStimulus(self, Vi, InputLine, OutputStimulusBufferSize):
        OutputStimulus = ARRAY_ViChar(OutputStimulusBufferSize)
        _status = self.dll.kedmm7510_GetDigitalTriggerOutputStimulus(
            ViSession(Vi),
            ViInt32(InputLine),
            ViInt32(OutputStimulusBufferSize),
            OutputStimulus,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(OutputStimulus)

    def SetDigitalTriggerOutputStimulus(self, Vi, InputLine, OutputStimulus):
        _status = self.dll.kedmm7510_SetDigitalTriggerOutputStimulus(
            ViSession(Vi), ViInt32(InputLine), ViConstString(OutputStimulus)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearLANTrigger(self, Vi, EventNumber):
        _status = self.dll.kedmm7510_ClearLANTrigger(ViSession(Vi), ViInt32(EventNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetLANTriggerMode(self, Vi, EventNumber):
        Mode = ViInt32()
        _status = self.dll.kedmm7510_GetLANTriggerMode(ViSession(Vi), ViInt32(EventNumber), byref(Mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Mode.value)

    def SetLANTriggerMode(self, Vi, EventNumber, Mode):
        _status = self.dll.kedmm7510_SetLANTriggerMode(ViSession(Vi), ViInt32(EventNumber), ViInt32(Mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetLANTriggerOverRunStatus(self, Vi, EventNumber):
        OverRunStatus = ViBoolean()
        _status = self.dll.kedmm7510_GetLANTriggerOverRunStatus(
            ViSession(Vi), ViInt32(EventNumber), byref(OverRunStatus)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(OverRunStatus.value)

    def GetLANTriggerEventGeneratorState(self, Vi, EventNumber):
        EventGeneratorState = ViBoolean()
        _status = self.dll.kedmm7510_GetLANTriggerEventGeneratorState(
            ViSession(Vi), ViInt32(EventNumber), byref(EventGeneratorState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(EventGeneratorState.value)

    def SetLANTriggerEventGeneratorState(self, Vi, EventNumber, EventGeneratorState):
        _status = self.dll.kedmm7510_SetLANTriggerEventGeneratorState(
            ViSession(Vi), ViInt32(EventNumber), ViBoolean(EventGeneratorState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetLANTriggerIpAddress(self, Vi, EventNumber, IPAddressBufferSize):
        IPAddress = ARRAY_ViChar(IPAddressBufferSize)
        _status = self.dll.kedmm7510_GetLANTriggerIpAddress(
            ViSession(Vi), ViInt32(EventNumber), ViInt32(IPAddressBufferSize), IPAddress
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(IPAddress)

    def SetLANTriggerIpAddress(self, Vi, EventNumber, IPAddress):
        _status = self.dll.kedmm7510_SetLANTriggerIpAddress(
            ViSession(Vi), ViInt32(EventNumber), ViConstString(IPAddress)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetLANTriggerOutLogic(self, Vi, EventNumber):
        OutLogic = ViInt32()
        _status = self.dll.kedmm7510_GetLANTriggerOutLogic(ViSession(Vi), ViInt32(EventNumber), byref(OutLogic))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(OutLogic.value)

    def SetLANTriggerOutLogic(self, Vi, EventNumber, OutLogic):
        _status = self.dll.kedmm7510_SetLANTriggerOutLogic(ViSession(Vi), ViInt32(EventNumber), ViInt32(OutLogic))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetLANTriggerOutProtocol(self, Vi, EventNumber):
        OutProtocol = ViInt32()
        _status = self.dll.kedmm7510_GetLANTriggerOutProtocol(ViSession(Vi), ViInt32(EventNumber), byref(OutProtocol))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(OutProtocol.value)

    def SetLANTriggerOutProtocol(self, Vi, EventNumber, OutProtocol):
        _status = self.dll.kedmm7510_SetLANTriggerOutProtocol(ViSession(Vi), ViInt32(EventNumber), ViInt32(OutProtocol))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetLANTriggerOutStimulus(self, Vi, EventNumber, OutStimulusBufferSize):
        OutStimulus = ARRAY_ViChar(OutStimulusBufferSize)
        _status = self.dll.kedmm7510_GetLANTriggerOutStimulus(
            ViSession(Vi),
            ViInt32(EventNumber),
            ViInt32(OutStimulusBufferSize),
            OutStimulus,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(OutStimulus)

    def SetLANTriggerOutStimulus(self, Vi, EventNumber, OutStimulus):
        _status = self.dll.kedmm7510_SetLANTriggerOutStimulus(
            ViSession(Vi), ViInt32(EventNumber), ViConstString(OutStimulus)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LoadTriggerModelExternal(
        self,
        Vi,
        DigitalInLine,
        DigitalOutLine,
        Count,
        Delay,
        ReadingBufferBufferSize,
        ReadingBuffer,
        ReadingBlock,
    ):
        _status = self.dll.kedmm7510_LoadTriggerModelExternal(
            ViSession(Vi),
            ViInt32(DigitalInLine),
            ViInt32(DigitalOutLine),
            ViInt32(Count),
            ViReal64(Delay),
            ViInt32(ReadingBufferBufferSize),
            ViConstString(ReadingBuffer),
            ViInt32(ReadingBlock),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LoadTriggerModelList(
        self,
        Vi,
        MeasureConfigListBufferSize,
        MeasureConfigList,
        Delay,
        ReadingBufferBufferSize,
        ReadingBuffer,
        ReadingBlock,
    ):
        _status = self.dll.kedmm7510_LoadTriggerModelList(
            ViSession(Vi),
            ViInt32(MeasureConfigListBufferSize),
            ViConstString(MeasureConfigList),
            ViReal64(Delay),
            ViInt32(ReadingBufferBufferSize),
            ViConstString(ReadingBuffer),
            ViInt32(ReadingBlock),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LoadTriggerModelLoopDuration(self, Vi, Duration, Delay, ReadingBufferBufferSize, ReadingBuffer, ReadingBlock):
        _status = self.dll.kedmm7510_LoadTriggerModelLoopDuration(
            ViSession(Vi),
            ViReal64(Duration),
            ViReal64(Delay),
            ViInt32(ReadingBufferBufferSize),
            ViConstString(ReadingBuffer),
            ViInt32(ReadingBlock),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LoadTriggerModelLoopSimple(self, Vi, Count, Delay, ReadingBufferBufferSize, ReadingBuffer, ReadingBlock):
        _status = self.dll.kedmm7510_LoadTriggerModelLoopSimple(
            ViSession(Vi),
            ViInt32(Count),
            ViReal64(Delay),
            ViInt32(ReadingBufferBufferSize),
            ViConstString(ReadingBuffer),
            ViInt32(ReadingBlock),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetTriggerModel(self, Vi):
        _status = self.dll.kedmm7510_ResetTriggerModel(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LoadTriggerModelGradeBinning(
        self,
        Vi,
        NumberOfBins,
        Components,
        StartInLine,
        StartDelay,
        EndDelay,
        BufferName,
        AllPassBitPattern,
        LimitHighBufferSize,
        LimitLowBufferSize,
        FailBitPatternBufferSize,
    ):
        LimitHigh = ARRAY_ViReal64(LimitHighBufferSize)
        LimitLow = ARRAY_ViReal64(LimitLowBufferSize)
        FailBitPattern = ARRAY_ViInt16(FailBitPatternBufferSize)
        _status = self.dll.kedmm7510_LoadTriggerModelGradeBinning(
            ViSession(Vi),
            ViInt16(NumberOfBins),
            ViInt32(Components),
            ViInt32(StartInLine),
            ViReal64(StartDelay),
            ViReal64(EndDelay),
            ViConstString(BufferName),
            ViInt16(AllPassBitPattern),
            ViInt32(LimitHighBufferSize),
            LimitHigh,
            ViInt32(LimitLowBufferSize),
            LimitLow,
            ViInt32(FailBitPatternBufferSize),
            FailBitPattern,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        LimitHigh = list(LimitHigh)
        LimitLow = list(LimitLow)
        return LimitHigh, LimitLow, FailBitPattern

    def LoadTriggerModelKeithley2001(
        self,
        Vi,
        Arm1SourceBypass,
        Arm1TriggerSource,
        Arm1Count,
        Arm2SourceBypass,
        Arm2TriggerSource,
        Arm2Count,
        Arm2Delay,
        TriggerSourceBypass,
        TriggerSource,
        TriggerCount,
        TriggerDelay,
    ):
        _status = self.dll.kedmm7510_LoadTriggerModelKeithley2001(
            ViSession(Vi),
            ViBoolean(Arm1SourceBypass),
            ViConstString(Arm1TriggerSource),
            ViInt32(Arm1Count),
            ViBoolean(Arm2SourceBypass),
            ViConstString(Arm2TriggerSource),
            ViInt32(Arm2Count),
            ViReal64(Arm2Delay),
            ViBoolean(TriggerSourceBypass),
            ViConstString(TriggerSource),
            ViInt32(TriggerCount),
            ViReal64(TriggerDelay),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LoadTriggerModelLoopUntilEvent(self, Vi, EventSource, Position, Delay, BufferName, ReadingBlock):
        _status = self.dll.kedmm7510_LoadTriggerModelLoopUntilEvent(
            ViSession(Vi),
            ViConstString(EventSource),
            ViInt32(Position),
            ViReal64(Delay),
            ViConstString(BufferName),
            ViInt32(ReadingBlock),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LoadTriggerModelSortBinning(
        self,
        Vi,
        NumberOfBins,
        Components,
        StartInLine,
        StartDelay,
        EndDelay,
        BufferName,
        AllPassBitPattern,
        LimitHighBufferSize,
        LimitLowBufferSize,
        FailBitPatternBufferSize,
    ):
        LimitHigh = ARRAY_ViReal64(LimitHighBufferSize)
        LimitLow = ARRAY_ViReal64(LimitLowBufferSize)
        FailBitPattern = ARRAY_ViInt16(FailBitPatternBufferSize)
        _status = self.dll.kedmm7510_LoadTriggerModelSortBinning(
            ViSession(Vi),
            ViInt16(NumberOfBins),
            ViInt32(Components),
            ViInt32(StartInLine),
            ViReal64(StartDelay),
            ViReal64(EndDelay),
            ViConstString(BufferName),
            ViInt16(AllPassBitPattern),
            ViInt32(LimitHighBufferSize),
            LimitHigh,
            ViInt32(LimitLowBufferSize),
            LimitLow,
            ViInt32(FailBitPatternBufferSize),
            FailBitPattern,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        LimitHigh = list(LimitHigh)
        LimitLow = list(LimitLow)
        return LimitHigh, LimitLow, FailBitPattern

    def TriggerModelBlockBranchAlways(self, Vi, BlockNumber, BranchPath):
        _status = self.dll.kedmm7510_TriggerModelBlockBranchAlways(
            ViSession(Vi), ViInt32(BlockNumber), ViInt32(BranchPath)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockBranchCounter(self, Vi, BlockNumber, TargetCount, BranchPath):
        _status = self.dll.kedmm7510_TriggerModelBlockBranchCounter(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(TargetCount),
            ViReal64(BranchPath),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadTriggerModelBlockBranchCounter(self, Vi, BlockNumber):
        Val = ViInt32()
        _status = self.dll.kedmm7510_ReadTriggerModelBlockBranchCounter(ViSession(Vi), ViInt32(BlockNumber), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def TriggerModelBlockBranchDelta(self, Vi, BlockNumber, TargetDifference, BranchPath, MeasureBlock):
        _status = self.dll.kedmm7510_TriggerModelBlockBranchDelta(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViReal64(TargetDifference),
            ViInt32(BranchPath),
            ViInt32(MeasureBlock),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockBranchEvent(self, Vi, BlockNumber, EventIDBufferSize, EventID, BranchPath):
        _status = self.dll.kedmm7510_TriggerModelBlockBranchEvent(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(EventIDBufferSize),
            ViConstString(EventID),
            ViInt32(BranchPath),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockBranchLimitConstant(
        self, Vi, BlockNumber, LimitType, LimitA, LimitB, BranchPath, MeasureBlock
    ):
        _status = self.dll.kedmm7510_TriggerModelBlockBranchLimitConstant(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(LimitType),
            ViReal64(LimitA),
            ViReal64(LimitB),
            ViInt32(BranchPath),
            ViInt32(MeasureBlock),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockBranchLimitDynamic(self, Vi, BlockNumber, LimitType, LimitNumuber, BranchPath, MeasureBlock):
        _status = self.dll.kedmm7510_TriggerModelBlockBranchLimitDynamic(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(LimitType),
            ViInt32(LimitNumuber),
            ViInt32(BranchPath),
            ViInt32(MeasureBlock),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockBranchOnce(self, Vi, BlockNumber, BranchPath):
        _status = self.dll.kedmm7510_TriggerModelBlockBranchOnce(
            ViSession(Vi), ViInt32(BlockNumber), ViInt32(BranchPath)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockBranchOnceExcluded(self, Vi, BlockNumber, BranchPath):
        _status = self.dll.kedmm7510_TriggerModelBlockBranchOnceExcluded(
            ViSession(Vi), ViInt32(BlockNumber), ViInt32(BranchPath)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockBufferClear(self, Vi, BlockNumber, BufferName):
        _status = self.dll.kedmm7510_TriggerModelBlockBufferClear(
            ViSession(Vi), ViInt32(BlockNumber), ViConstString(BufferName)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RecallTriggerModelBlockNextConfiguration(self, Vi, BlockNumber, ConfigurationListBufferSize, ConfigurationList):
        _status = self.dll.kedmm7510_RecallTriggerModelBlockNextConfiguration(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(ConfigurationListBufferSize),
            ViConstString(ConfigurationList),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RecallTriggerModelBlockPreviousConfiguration(
        self, Vi, BlockNumber, ConfigurationListBufferSize, ConfigurationList
    ):
        _status = self.dll.kedmm7510_RecallTriggerModelBlockPreviousConfiguration(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(ConfigurationListBufferSize),
            ViConstString(ConfigurationList),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RecallTriggerModelBlockConfiguration(
        self, Vi, BlockNumber, ConfigurationListBufferSize, ConfigurationList, Point
    ):
        _status = self.dll.kedmm7510_RecallTriggerModelBlockConfiguration(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(ConfigurationListBufferSize),
            ViConstString(ConfigurationList),
            ViInt32(Point),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockConstantDelay(self, Vi, BlockNumber, Time):
        _status = self.dll.kedmm7510_TriggerModelBlockConstantDelay(ViSession(Vi), ViInt32(BlockNumber), ViReal64(Time))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockDelayDynamic(self, Vi, BlockNumber, UserDelayType, UserDelayNumber):
        _status = self.dll.kedmm7510_TriggerModelBlockDelayDynamic(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(UserDelayType),
            ViInt32(UserDelayNumber),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockConfigureDigitalIO(self, Vi, BlockNumber, BitPattern, BitMask):
        _status = self.dll.kedmm7510_TriggerModelBlockConfigureDigitalIO(
            ViSession(Vi), ViInt32(BlockNumber), ViInt32(BitPattern), ViInt32(BitMask)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockMeasure(self, Vi, BlockNumber, BufferName):
        _status = self.dll.kedmm7510_TriggerModelBlockMeasure(
            ViSession(Vi), ViInt32(BlockNumber), ViConstString(BufferName)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockNotify(self, Vi, BlockNumber, NotifyID):
        _status = self.dll.kedmm7510_TriggerModelBlockNotify(ViSession(Vi), ViInt32(BlockNumber), ViInt32(NotifyID))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockWait(
        self,
        Vi,
        BlockNumber,
        Event1BufferSize,
        Event1,
        StimulusAction,
        Logic,
        Event2BufferSize,
        Event2,
        Event3BufferSize,
        Event3,
    ):
        _status = self.dll.kedmm7510_TriggerModelBlockWait(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(Event1BufferSize),
            ViConstString(Event1),
            ViInt32(StimulusAction),
            ViInt32(Logic),
            ViInt32(Event2BufferSize),
            ViConstString(Event2),
            ViInt32(Event3BufferSize),
            ViConstString(Event3),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockLogEvent(self, Vi, BlockNumber, EventBufferSize, Event, MessageBufferSize, Message):
        _status = self.dll.kedmm7510_TriggerModelBlockLogEvent(
            ViSession(Vi),
            ViInt32(BlockNumber),
            ViInt32(EventBufferSize),
            ViConstString(Event),
            ViInt32(MessageBufferSize),
            ViConstString(Message),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerModelBlockNoOperation(self, Vi, BlockNumber):
        _status = self.dll.kedmm7510_TriggerModelBlockNoOperation(ViSession(Vi), ViInt32(BlockNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetTriggerModelBlockBranchCounter(self, Vi, BlockNumber, Counter):
        _status = self.dll.kedmm7510_ResetTriggerModelBlockBranchCounter(
            ViSession(Vi), ViInt32(BlockNumber), ViInt32(Counter)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearBlenderTrigger(self, Vi, BlenderNumber):
        _status = self.dll.kedmm7510_ClearBlenderTrigger(ViSession(Vi), ViInt32(BlenderNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetBlenderTriggerOverRun(self, Vi, BlenderNumber):
        BlenderOverRun = ViBoolean()
        _status = self.dll.kedmm7510_GetBlenderTriggerOverRun(
            ViSession(Vi), ViInt32(BlenderNumber), byref(BlenderOverRun)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(BlenderOverRun.value)

    def GetBlenderTriggerMode(self, Vi, BlenderNumber):
        BlenderMode = ViInt32()
        _status = self.dll.kedmm7510_GetBlenderTriggerMode(ViSession(Vi), ViInt32(BlenderNumber), byref(BlenderMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(BlenderMode.value)

    def GetBlenderTriggerStimulus(self, Vi, BlenderNumber, StimulusNumber, BlenderStimulusBufferSize):
        BlenderStimulus = ARRAY_ViChar(BlenderStimulusBufferSize)
        _status = self.dll.kedmm7510_GetBlenderTriggerStimulus(
            ViSession(Vi),
            ViInt32(BlenderNumber),
            ViInt32(StimulusNumber),
            ViInt32(BlenderStimulusBufferSize),
            BlenderStimulus,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(BlenderStimulus)

    def SetBlenderTriggerMode(self, Vi, BlenderNumber, BlenderMode):
        _status = self.dll.kedmm7510_SetBlenderTriggerMode(ViSession(Vi), ViInt32(BlenderNumber), ViInt32(BlenderMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetBlenderTriggerStimulus(self, Vi, BlenderNumber, StimulusNumber, BlenderStimulus):
        _status = self.dll.kedmm7510_SetBlenderTriggerStimulus(
            ViSession(Vi),
            ViInt32(BlenderNumber),
            ViInt32(StimulusNumber),
            ViConstString(BlenderStimulus),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearExternalTrigger(self, Vi):
        _status = self.dll.kedmm7510_ClearExternalTrigger(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetExternalTriggerMode(self, Vi):
        Mode = ViInt32()
        _status = self.dll.kedmm7510_GetExternalTriggerMode(ViSession(Vi), byref(Mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Mode.value)

    def SetExternalTriggerMode(self, Vi, Mode):
        _status = self.dll.kedmm7510_SetExternalTriggerMode(ViSession(Vi), ViInt32(Mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetExternalTriggerOutputLogic(self, Vi):
        OutputLogic = ViInt32()
        _status = self.dll.kedmm7510_GetExternalTriggerOutputLogic(ViSession(Vi), byref(OutputLogic))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(OutputLogic.value)

    def SetExternalTriggerOutputLogic(self, Vi, OutputLogic):
        _status = self.dll.kedmm7510_SetExternalTriggerOutputLogic(ViSession(Vi), ViInt32(OutputLogic))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetExternalTriggerOutputStimulus(self, Vi, OutputStimulusBufferSize):
        OutputStimulus = ARRAY_ViChar(OutputStimulusBufferSize)
        _status = self.dll.kedmm7510_GetExternalTriggerOutputStimulus(
            ViSession(Vi), ViInt32(OutputStimulusBufferSize), OutputStimulus
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(OutputStimulus)

    def SetExternalTriggerOutputStimulus(self, Vi, OutputStimulus):
        _status = self.dll.kedmm7510_SetExternalTriggerOutputStimulus(ViSession(Vi), ViConstString(OutputStimulus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetExternalTriggerOverRunStatus(self, Vi):
        OverRunStatus = ViBoolean()
        _status = self.dll.kedmm7510_GetExternalTriggerOverRunStatus(ViSession(Vi), byref(OverRunStatus))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(OverRunStatus.value)

    def DisplayClear(self, Vi):
        _status = self.dll.kedmm7510_DisplayClear(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DisplayMessage(self, Vi, LineNumber, TextMessageBufferSize, TextMessage):
        _status = self.dll.kedmm7510_DisplayMessage(
            ViSession(Vi),
            ViInt32(LineNumber),
            ViInt32(TextMessageBufferSize),
            ViConstString(TextMessage),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDisplayResolution(self, Vi, Function):
        Resolution = ViInt32()
        _status = self.dll.kedmm7510_GetDisplayResolution(ViSession(Vi), ViInt32(Function), byref(Resolution))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Resolution.value)

    def SetDisplayResolution(self, Vi, Function, Resolution):
        _status = self.dll.kedmm7510_SetDisplayResolution(ViSession(Vi), ViInt32(Function), ViInt32(Resolution))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerDisplayResolution(self, Vi, Function):
        DigitizerResolution = ViInt32()
        _status = self.dll.kedmm7510_GetDigitizerDisplayResolution(
            ViSession(Vi), ViInt32(Function), byref(DigitizerResolution)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(DigitizerResolution.value)

    def SetDigitizerDisplayResolution(self, Vi, Function, DigitizerResolution):
        _status = self.dll.kedmm7510_SetDigitizerDisplayResolution(
            ViSession(Vi), ViInt32(Function), ViInt32(DigitizerResolution)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDigitalLineMode(self, Vi, LineNumber, TriggerType, LineState):
        _status = self.dll.kedmm7510_ConfigureDigitalLineMode(
            ViSession(Vi), ViInt32(LineNumber), ViInt32(TriggerType), ViInt32(LineState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitalRead(self, Vi):
        Val = ViInt32()
        _status = self.dll.kedmm7510_DigitalRead(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def DigitalWrite(self, Vi, Value):
        _status = self.dll.kedmm7510_DigitalWrite(ViSession(Vi), ViInt32(Value))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadDigitalLineMode(self, Vi, LineNumber):
        TriggerType = ViInt32()
        LineState = ViInt32()
        _status = self.dll.kedmm7510_ReadDigitalLineMode(
            ViSession(Vi), ViInt32(LineNumber), byref(TriggerType), byref(LineState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        TriggerType = int(TriggerType.value)
        LineState = int(LineState.value)
        return TriggerType, LineState

    def GetDigitalLineState(self, Vi, LineNumber):
        LineState = ViBoolean()
        _status = self.dll.kedmm7510_GetDigitalLineState(ViSession(Vi), ViInt32(LineNumber), byref(LineState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(LineState.value)

    def SetDigitalLineState(self, Vi, LineNumber, LineState):
        _status = self.dll.kedmm7510_SetDigitalLineState(ViSession(Vi), ViInt32(LineNumber), ViBoolean(LineState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Read2(self, Vi, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.kedmm7510_Read2(
            ViSession(Vi),
            ViConstString(BufferName),
            ViInt32(BufferElementsBufferSize),
            ViConstString(BufferElements),
            ViInt32(ValBufferSize),
            Val,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def Measure(
        self,
        Vi,
        Function,
        BufferName,
        BufferElementsBufferSize,
        BufferElements,
        ValBufferSize,
    ):
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.kedmm7510_Measure(
            ViSession(Vi),
            ViInt32(Function),
            ViConstString(BufferName),
            ViInt32(BufferElementsBufferSize),
            ViConstString(BufferElements),
            ViInt32(ValBufferSize),
            Val,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def AutoZeroOnce(self, Vi):
        _status = self.dll.kedmm7510_AutoZeroOnce(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetFunctionnplc(self, Vi, Function):
        FunctionNPLC = ViReal64()
        _status = self.dll.kedmm7510_GetFunctionnplc(ViSession(Vi), ViInt32(Function), byref(FunctionNPLC))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(FunctionNPLC.value)

    def SetFunctionnplc(self, Vi, Function, FunctionNPLC):
        _status = self.dll.kedmm7510_SetFunctionnplc(ViSession(Vi), ViInt32(Function), ViReal64(FunctionNPLC))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetAutoRange(self, Vi, Function):
        AutoRange = ViBoolean()
        _status = self.dll.kedmm7510_GetAutoRange(ViSession(Vi), ViInt32(Function), byref(AutoRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(AutoRange.value)

    def SetAutoRange(self, Vi, Function, AutoRange):
        _status = self.dll.kedmm7510_SetAutoRange(ViSession(Vi), ViInt32(Function), ViBoolean(AutoRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetRange(self, Vi, Function):
        Range = ViReal64()
        _status = self.dll.kedmm7510_GetRange(ViSession(Vi), ViInt32(Function), byref(Range))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Range.value)

    def SetRange(self, Vi, Function, Range):
        _status = self.dll.kedmm7510_SetRange(ViSession(Vi), ViInt32(Function), ViReal64(Range))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetUserDelay(self, Vi, Function, UserDelayIndex):
        UserDelay = ViReal64()
        _status = self.dll.kedmm7510_GetUserDelay(
            ViSession(Vi), ViInt32(Function), ViInt32(UserDelayIndex), byref(UserDelay)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(UserDelay.value)

    def SetUserDelay(self, Vi, Function, UserDelayIndex, UserDelay):
        _status = self.dll.kedmm7510_SetUserDelay(
            ViSession(Vi), ViInt32(Function), ViInt32(UserDelayIndex), ViReal64(UserDelay)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetVoltageUnits(self, Vi, Function):
        VoltageUnits = ViInt32()
        _status = self.dll.kedmm7510_GetVoltageUnits(ViSession(Vi), ViInt32(Function), byref(VoltageUnits))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(VoltageUnits.value)

    def SetVoltageUnits(self, Vi, Function, VoltageUnits):
        _status = self.dll.kedmm7510_SetVoltageUnits(ViSession(Vi), ViInt32(Function), ViInt32(VoltageUnits))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetAutoDelay(self, Vi, Function):
        AutoDelay = ViInt32()
        _status = self.dll.kedmm7510_GetAutoDelay(ViSession(Vi), ViInt32(Function), byref(AutoDelay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AutoDelay.value)

    def SetAutoDelay(self, Vi, Function, AutoDelay):
        _status = self.dll.kedmm7510_SetAutoDelay(ViSession(Vi), ViInt32(Function), ViInt32(AutoDelay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetBiasLevel(self, Vi, Function):
        Level = ViReal64()
        _status = self.dll.kedmm7510_GetBiasLevel(ViSession(Vi), ViInt32(Function), byref(Level))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Level.value)

    def SetBiasLevel(self, Vi, Function, Level):
        _status = self.dll.kedmm7510_SetBiasLevel(ViSession(Vi), ViInt32(Function), ViReal64(Level))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDetectorBandwidth(self, Vi, Function):
        DetectorBandwidth = ViInt32()
        _status = self.dll.kedmm7510_GetDetectorBandwidth(ViSession(Vi), ViInt32(Function), byref(DetectorBandwidth))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(DetectorBandwidth.value)

    def SetDetectorBandwidth(self, Vi, Function, DetectorBandwidth):
        _status = self.dll.kedmm7510_SetDetectorBandwidth(ViSession(Vi), ViInt32(Function), ViInt32(DetectorBandwidth))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDbReference(self, Vi, Function):
        DBReference = ViReal64()
        _status = self.dll.kedmm7510_GetDbReference(ViSession(Vi), ViInt32(Function), byref(DBReference))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(DBReference.value)

    def SetDbReference(self, Vi, Function, DBReference):
        _status = self.dll.kedmm7510_SetDbReference(ViSession(Vi), ViInt32(Function), ViReal64(DBReference))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetAutoZeroEnabled(self, Vi, Function):
        AutoZeroEnabled = ViBoolean()
        _status = self.dll.kedmm7510_GetAutoZeroEnabled(ViSession(Vi), ViInt32(Function), byref(AutoZeroEnabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(AutoZeroEnabled.value)

    def SetAutoZeroEnabled(self, Vi, Function, AutoZeroEnabled):
        _status = self.dll.kedmm7510_SetAutoZeroEnabled(ViSession(Vi), ViInt32(Function), ViBoolean(AutoZeroEnabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetLineSync(self, Vi, Function):
        LineSync = ViBoolean()
        _status = self.dll.kedmm7510_GetLineSync(ViSession(Vi), ViInt32(Function), byref(LineSync))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(LineSync.value)

    def SetLineSync(self, Vi, Function, LineSync):
        _status = self.dll.kedmm7510_SetLineSync(ViSession(Vi), ViInt32(Function), ViBoolean(LineSync))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetAperture(self, Vi, Function):
        Aperture = ViReal64()
        _status = self.dll.kedmm7510_GetAperture(ViSession(Vi), ViInt32(Function), byref(Aperture))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Aperture.value)

    def SetAperture(self, Vi, Function, Aperture):
        _status = self.dll.kedmm7510_SetAperture(ViSession(Vi), ViInt32(Function), ViReal64(Aperture))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetFreqPeriodThresholdVoltageRange(self, Vi, FreqPeriod):
        FreqPeriodThresholdVoltageRange = ViReal64()
        _status = self.dll.kedmm7510_GetFreqPeriodThresholdVoltageRange(
            ViSession(Vi), ViInt32(FreqPeriod), byref(FreqPeriodThresholdVoltageRange)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(FreqPeriodThresholdVoltageRange.value)

    def SetFreqPeriodThresholdVoltageRange(self, Vi, FreqPeriod, FreqPeriodThresholdVoltageRange):
        _status = self.dll.kedmm7510_SetFreqPeriodThresholdVoltageRange(
            ViSession(Vi), ViInt32(FreqPeriod), ViReal64(FreqPeriodThresholdVoltageRange)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetFreqPeriodThresholdVoltageRangeAutoState(self, Vi, FreqPeriod):
        FreqPeriodThresholdVoltageRangeAutoState = ViBoolean()
        _status = self.dll.kedmm7510_GetFreqPeriodThresholdVoltageRangeAutoState(
            ViSession(Vi),
            ViInt32(FreqPeriod),
            byref(FreqPeriodThresholdVoltageRangeAutoState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(FreqPeriodThresholdVoltageRangeAutoState.value)

    def SetFreqPeriodThresholdVoltageRangeAutoState(self, Vi, FreqPeriod, FreqPeriodThresholdVoltageRangeAutoState):
        _status = self.dll.kedmm7510_SetFreqPeriodThresholdVoltageRangeAutoState(
            ViSession(Vi),
            ViInt32(FreqPeriod),
            ViBoolean(FreqPeriodThresholdVoltageRangeAutoState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetFreqPeriodThresholdVoltageLevel(self, Vi, FreqPeriod):
        FreqPeriodThresholdVoltageLevel = ViReal64()
        _status = self.dll.kedmm7510_GetFreqPeriodThresholdVoltageLevel(
            ViSession(Vi), ViInt32(FreqPeriod), byref(FreqPeriodThresholdVoltageLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(FreqPeriodThresholdVoltageLevel.value)

    def SetFreqPeriodThresholdVoltageLevel(self, Vi, FreqPeriod, FreqPeriodThresholdVoltageLevel):
        _status = self.dll.kedmm7510_SetFreqPeriodThresholdVoltageLevel(
            ViSession(Vi), ViInt32(FreqPeriod), ViReal64(FreqPeriodThresholdVoltageLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetOpenDetector(self, Vi, Function):
        OpenDetector = ViBoolean()
        _status = self.dll.kedmm7510_GetOpenDetector(ViSession(Vi), ViInt32(Function), byref(OpenDetector))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(OpenDetector.value)

    def SetOpenDetector(self, Vi, Function, OpenDetector):
        _status = self.dll.kedmm7510_SetOpenDetector(ViSession(Vi), ViInt32(Function), ViBoolean(OpenDetector))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetOffsetCompensationEnabled(self, Vi, Function):
        OffsetCompensationEnabled = ViBoolean()
        _status = self.dll.kedmm7510_GetOffsetCompensationEnabled(
            ViSession(Vi), ViInt32(Function), byref(OffsetCompensationEnabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(OffsetCompensationEnabled.value)

    def SetOffsetCompensationEnabled(self, Vi, Function, OffsetCompensationEnabled):
        _status = self.dll.kedmm7510_SetOffsetCompensationEnabled(
            ViSession(Vi), ViInt32(Function), ViBoolean(OffsetCompensationEnabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetMathOperation(self, Vi, Function):
        MathOperation = ViInt32()
        _status = self.dll.kedmm7510_GetMathOperation(ViSession(Vi), ViInt32(Function), byref(MathOperation))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(MathOperation.value)

    def SetMathOperation(self, Vi, Function, MathOperation):
        _status = self.dll.kedmm7510_SetMathOperation(ViSession(Vi), ViInt32(Function), ViInt32(MathOperation))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetMathOffsetFactor(self, Vi, Function):
        MathOffsetFactor = ViReal64()
        _status = self.dll.kedmm7510_GetMathOffsetFactor(ViSession(Vi), ViInt32(Function), byref(MathOffsetFactor))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MathOffsetFactor.value)

    def SetMathOffsetFactor(self, Vi, Function, MathOffsetFactor):
        _status = self.dll.kedmm7510_SetMathOffsetFactor(ViSession(Vi), ViInt32(Function), ViReal64(MathOffsetFactor))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetMathScaleFactor(self, Vi, Function):
        MathScaleFactor = ViReal64()
        _status = self.dll.kedmm7510_GetMathScaleFactor(ViSession(Vi), ViInt32(Function), byref(MathScaleFactor))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MathScaleFactor.value)

    def SetMathScaleFactor(self, Vi, Function, MathScaleFactor):
        _status = self.dll.kedmm7510_SetMathScaleFactor(ViSession(Vi), ViInt32(Function), ViReal64(MathScaleFactor))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetMathPercent(self, Vi, Function):
        MathPercent = ViReal64()
        _status = self.dll.kedmm7510_GetMathPercent(ViSession(Vi), ViInt32(Function), byref(MathPercent))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MathPercent.value)

    def SetMathPercent(self, Vi, Function, MathPercent):
        _status = self.dll.kedmm7510_SetMathPercent(ViSession(Vi), ViInt32(Function), ViReal64(MathPercent))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetMathOperationState(self, Vi, Function):
        MathOperationState = ViBoolean()
        _status = self.dll.kedmm7510_GetMathOperationState(ViSession(Vi), ViInt32(Function), byref(MathOperationState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(MathOperationState.value)

    def SetMathOperationState(self, Vi, Function, MathOperationState):
        _status = self.dll.kedmm7510_SetMathOperationState(
            ViSession(Vi), ViInt32(Function), ViBoolean(MathOperationState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CreateConfigurationList(self, Vi, Name):
        _status = self.dll.kedmm7510_CreateConfigurationList(ViSession(Vi), ViConstString(Name))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DeleteConfigurationList(self, Vi, Name):
        _status = self.dll.kedmm7510_DeleteConfigurationList(ViSession(Vi), ViConstString(Name))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DeleteConfigListIndexData(self, Vi, Name, Point):
        _status = self.dll.kedmm7510_DeleteConfigListIndexData(ViSession(Vi), ViConstString(Name), ViInt32(Point))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadConfigurationList(self, Vi, Name, Point, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.kedmm7510_ReadConfigurationList(
            ViSession(Vi),
            ViConstString(Name),
            ViInt32(Point),
            ViInt32(ValBufferSize),
            Val,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def RecallConfigurationListPoint(self, Vi, Name, Point):
        _status = self.dll.kedmm7510_RecallConfigurationListPoint(ViSession(Vi), ViConstString(Name), ViInt32(Point))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AppendToConfigurationList(self, Vi, Name):
        _status = self.dll.kedmm7510_AppendToConfigurationList(ViSession(Vi), ViConstString(Name))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StoreToConfigurationList(self, Vi, Name, Point):
        _status = self.dll.kedmm7510_StoreToConfigurationList(ViSession(Vi), ViConstString(Name), ViInt32(Point))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetConfigurationListSize(self, Vi, Name):
        ConfigurationListSize = ViInt32()
        _status = self.dll.kedmm7510_GetConfigurationListSize(
            ViSession(Vi), ViConstString(Name), byref(ConfigurationListSize)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(ConfigurationListSize.value)

    def GetLimitTestEnabled(self, Vi, Function, LimitTest):
        Enabled = ViBoolean()
        _status = self.dll.kedmm7510_GetLimitTestEnabled(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(Enabled.value)

    def SetLimitTestEnabled(self, Vi, Function, LimitTest, Enabled):
        _status = self.dll.kedmm7510_SetLimitTestEnabled(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViBoolean(Enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IsLimitTestFailed(self, Vi, Function, LimitTest):
        Val = ViInt32()
        _status = self.dll.kedmm7510_IsLimitTestFailed(ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def LimitClear(self, Vi, Function, LimitTest):
        _status = self.dll.kedmm7510_LimitClear(ViSession(Vi), ViInt32(Function), ViInt32(LimitTest))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetLimitAutoClearState(self, Vi, Function, LimitTest):
        AutoClearState = ViBoolean()
        _status = self.dll.kedmm7510_GetLimitAutoClearState(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(AutoClearState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(AutoClearState.value)

    def SetLimitAutoClearState(self, Vi, Function, LimitTest, AutoClearState):
        _status = self.dll.kedmm7510_SetLimitAutoClearState(
            ViSession(Vi),
            ViInt32(Function),
            ViInt32(LimitTest),
            ViBoolean(AutoClearState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetUpperLimit(self, Vi, Function, LimitTest):
        UpperLimitTest = ViReal64()
        _status = self.dll.kedmm7510_GetUpperLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(UpperLimitTest)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(UpperLimitTest.value)

    def SetUpperLimit(self, Vi, Function, LimitTest, UpperLimitTest):
        _status = self.dll.kedmm7510_SetUpperLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViReal64(UpperLimitTest)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetLowerLimit(self, Vi, Function, LimitTest):
        LowerLimit = ViReal64()
        _status = self.dll.kedmm7510_GetLowerLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(LowerLimit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(LowerLimit.value)

    def SetLowerLimit(self, Vi, Function, LimitTest, LowerLimit):
        _status = self.dll.kedmm7510_SetLowerLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViReal64(LowerLimit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetLimitAudible(self, Vi, LimitTest, Function):
        Audible = ViInt32()
        _status = self.dll.kedmm7510_GetLimitAudible(
            ViSession(Vi), ViInt32(LimitTest), ViInt32(Function), byref(Audible)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Audible.value)

    def SetLimitAudible(self, Vi, LimitTest, Function, Audible):
        _status = self.dll.kedmm7510_SetLimitAudible(
            ViSession(Vi), ViInt32(LimitTest), ViInt32(Function), ViInt32(Audible)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSimulatedRefJunction(self, Vi, FixedRefJunction):
        _status = self.dll.kedmm7510_ConfigureSimulatedRefJunction(ViSession(Vi), ViReal64(FixedRefJunction))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTransducerType2(self, Vi, TransducerType):
        _status = self.dll.kedmm7510_ConfigureTransducerType2(ViSession(Vi), ViInt32(TransducerType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureThermistor2(self, Vi, Resistance):
        _status = self.dll.kedmm7510_ConfigureThermistor2(ViSession(Vi), ViReal64(Resistance))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetRtdType(self, Vi, Type):
        RTDType = ViInt32()
        _status = self.dll.kedmm7510_GetRtdType(ViSession(Vi), ViInt32(Type), byref(RTDType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(RTDType.value)

    def SetRtdType(self, Vi, Type, RTDType):
        _status = self.dll.kedmm7510_SetRtdType(ViSession(Vi), ViInt32(Type), ViInt32(RTDType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRTDUserDefinedType(self, Vi, Constant, Value, Type):
        _status = self.dll.kedmm7510_ConfigureRTDUserDefinedType(
            ViSession(Vi), ViInt32(Constant), ViReal64(Value), ViInt32(Type)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadRTDConstants(self, Vi, Constant):
        Val = ViReal64()
        _status = self.dll.kedmm7510_ReadRTDConstants(ViSession(Vi), ViInt32(Constant), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def GetATrigEdgeLevel(self, Vi, Function):
        EdgeLevel = ViReal64()
        _status = self.dll.kedmm7510_GetATrigEdgeLevel(ViSession(Vi), ViInt32(Function), byref(EdgeLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(EdgeLevel.value)

    def SetATrigEdgeLevel(self, Vi, Function, EdgeLevel):
        _status = self.dll.kedmm7510_SetATrigEdgeLevel(ViSession(Vi), ViInt32(Function), ViReal64(EdgeLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetATrigEdgeSlope(self, Vi, Function):
        EdgeSlope = ViInt32()
        _status = self.dll.kedmm7510_GetATrigEdgeSlope(ViSession(Vi), ViInt32(Function), byref(EdgeSlope))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(EdgeSlope.value)

    def SetATrigEdgeSlope(self, Vi, Function, EdgeSlope):
        _status = self.dll.kedmm7510_SetATrigEdgeSlope(ViSession(Vi), ViInt32(Function), ViInt32(EdgeSlope))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetATrigMode(self, Vi, Function):
        Mode = ViInt32()
        _status = self.dll.kedmm7510_GetATrigMode(ViSession(Vi), ViInt32(Function), byref(Mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Mode.value)

    def SetATrigMode(self, Vi, Function, Mode):
        _status = self.dll.kedmm7510_SetATrigMode(ViSession(Vi), ViInt32(Function), ViInt32(Mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetATrigPulseCondition(self, Vi, Function):
        PulseCondition = ViInt32()
        _status = self.dll.kedmm7510_GetATrigPulseCondition(ViSession(Vi), ViInt32(Function), byref(PulseCondition))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(PulseCondition.value)

    def SetATrigPulseCondition(self, Vi, Function, PulseCondition):
        _status = self.dll.kedmm7510_SetATrigPulseCondition(ViSession(Vi), ViInt32(Function), ViInt32(PulseCondition))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetATrigPulseLevel(self, Vi, Function):
        PulseLevel = ViReal64()
        _status = self.dll.kedmm7510_GetATrigPulseLevel(ViSession(Vi), ViInt32(Function), byref(PulseLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(PulseLevel.value)

    def SetATrigPulseLevel(self, Vi, Function, PulseLevel):
        _status = self.dll.kedmm7510_SetATrigPulseLevel(ViSession(Vi), ViInt32(Function), ViReal64(PulseLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetATrigPulsePolarity(self, Vi, Function):
        PulsePolarity = ViInt32()
        _status = self.dll.kedmm7510_GetATrigPulsePolarity(ViSession(Vi), ViInt32(Function), byref(PulsePolarity))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(PulsePolarity.value)

    def SetATrigPulsePolarity(self, Vi, Function, PulsePolarity):
        _status = self.dll.kedmm7510_SetATrigPulsePolarity(ViSession(Vi), ViInt32(Function), ViInt32(PulsePolarity))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetATrigPulseWidth(self, Vi, Function):
        PulseWidth = ViReal64()
        _status = self.dll.kedmm7510_GetATrigPulseWidth(ViSession(Vi), ViInt32(Function), byref(PulseWidth))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(PulseWidth.value)

    def SetATrigPulseWidth(self, Vi, Function, PulseWidth):
        _status = self.dll.kedmm7510_SetATrigPulseWidth(ViSession(Vi), ViInt32(Function), ViReal64(PulseWidth))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetATrigWindowDirection(self, Vi, Function):
        WindowDirection = ViInt32()
        _status = self.dll.kedmm7510_GetATrigWindowDirection(ViSession(Vi), ViInt32(Function), byref(WindowDirection))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(WindowDirection.value)

    def SetATrigWindowDirection(self, Vi, Function, WindowDirection):
        _status = self.dll.kedmm7510_SetATrigWindowDirection(ViSession(Vi), ViInt32(Function), ViInt32(WindowDirection))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetATrigWindowLevelHigh(self, Vi, Function):
        WindowLevelHigh = ViReal64()
        _status = self.dll.kedmm7510_GetATrigWindowLevelHigh(ViSession(Vi), ViInt32(Function), byref(WindowLevelHigh))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(WindowLevelHigh.value)

    def SetATrigWindowLevelHigh(self, Vi, Function, WindowLevelHigh):
        _status = self.dll.kedmm7510_SetATrigWindowLevelHigh(
            ViSession(Vi), ViInt32(Function), ViReal64(WindowLevelHigh)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetATrigWindowLevelLow(self, Vi, Function):
        WindowLevelLow = ViReal64()
        _status = self.dll.kedmm7510_GetATrigWindowLevelLow(ViSession(Vi), ViInt32(Function), byref(WindowLevelLow))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(WindowLevelLow.value)

    def SetATrigWindowLevelLow(self, Vi, Function, WindowLevelLow):
        _status = self.dll.kedmm7510_SetATrigWindowLevelLow(ViSession(Vi), ViInt32(Function), ViReal64(WindowLevelLow))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetATrigHighFreqRejectState(self, Vi, Function):
        HighFreqRejectState = ViBoolean()
        _status = self.dll.kedmm7510_GetATrigHighFreqRejectState(
            ViSession(Vi), ViInt32(Function), byref(HighFreqRejectState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(HighFreqRejectState.value)

    def SetATrigHighFreqRejectState(self, Vi, Function, HighFreqRejectState):
        _status = self.dll.kedmm7510_SetATrigHighFreqRejectState(
            ViSession(Vi), ViInt32(Function), ViBoolean(HighFreqRejectState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetFilterCount(self, Vi, Function):
        AveragingFilterCount = ViInt32()
        _status = self.dll.kedmm7510_GetFilterCount(ViSession(Vi), ViInt32(Function), byref(AveragingFilterCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AveragingFilterCount.value)

    def SetFilterCount(self, Vi, Function, AveragingFilterCount):
        _status = self.dll.kedmm7510_SetFilterCount(ViSession(Vi), ViInt32(Function), ViInt32(AveragingFilterCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetFilterState(self, Vi, Function):
        AveragingFilterState = ViBoolean()
        _status = self.dll.kedmm7510_GetFilterState(ViSession(Vi), ViInt32(Function), byref(AveragingFilterState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(AveragingFilterState.value)

    def SetFilterState(self, Vi, Function, AveragingFilterState):
        _status = self.dll.kedmm7510_SetFilterState(ViSession(Vi), ViInt32(Function), ViBoolean(AveragingFilterState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetFilterType(self, Vi, Function):
        AveragingFilterType = ViInt32()
        _status = self.dll.kedmm7510_GetFilterType(ViSession(Vi), ViInt32(Function), byref(AveragingFilterType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AveragingFilterType.value)

    def SetFilterType(self, Vi, Function, AveragingFilterType):
        _status = self.dll.kedmm7510_SetFilterType(ViSession(Vi), ViInt32(Function), ViInt32(AveragingFilterType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetFilterWindow(self, Vi, Function):
        FilterWindow = ViReal64()
        _status = self.dll.kedmm7510_GetFilterWindow(ViSession(Vi), ViInt32(Function), byref(FilterWindow))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(FilterWindow.value)

    def SetFilterWindow(self, Vi, Function, FilterWindow):
        _status = self.dll.kedmm7510_SetFilterWindow(ViSession(Vi), ViInt32(Function), ViReal64(FilterWindow))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetRelativeOffset(self, Vi, Function, RelativeOffset):
        _status = self.dll.kedmm7510_SetRelativeOffset(ViSession(Vi), ViInt32(Function), ViReal64(RelativeOffset))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetRelativeOffsetState(self, Vi, Function, RelativeOffsetState):
        _status = self.dll.kedmm7510_SetRelativeOffsetState(
            ViSession(Vi), ViInt32(Function), ViBoolean(RelativeOffsetState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetRelativeOffset(self, Vi, Function):
        RelativeOffset = ViReal64()
        _status = self.dll.kedmm7510_GetRelativeOffset(ViSession(Vi), ViInt32(Function), byref(RelativeOffset))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RelativeOffset.value)

    def GetRelativeOffsetState(self, Vi, Function):
        RelativeOffsetState = ViBoolean()
        _status = self.dll.kedmm7510_GetRelativeOffsetState(
            ViSession(Vi), ViInt32(Function), byref(RelativeOffsetState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(RelativeOffsetState.value)

    def RelativeAcquire(self, Vi, Function):
        _status = self.dll.kedmm7510_RelativeAcquire(ViSession(Vi), ViInt32(Function))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitizerMeasure(
        self,
        Vi,
        Function,
        BufferName,
        BufferElementsBufferSize,
        BufferElements,
        ValBufferSize,
    ):
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.kedmm7510_DigitizerMeasure(
            ViSession(Vi),
            ViInt32(Function),
            ViConstString(BufferName),
            ViInt32(BufferElementsBufferSize),
            ViConstString(BufferElements),
            ViInt32(ValBufferSize),
            Val,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def DigitizerRead(self, Vi, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.kedmm7510_DigitizerRead(
            ViSession(Vi),
            ViConstString(BufferName),
            ViInt32(BufferElementsBufferSize),
            ViConstString(BufferElements),
            ViInt32(ValBufferSize),
            Val,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def GetDigitizerRange(self, Vi, Function):
        Range = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerRange(ViSession(Vi), ViInt32(Function), byref(Range))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Range.value)

    def SetDigitizerRange(self, Vi, Function, Range):
        _status = self.dll.kedmm7510_SetDigitizerRange(ViSession(Vi), ViInt32(Function), ViReal64(Range))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerUserDelay(self, Vi, Function, UserDelayIndex):
        UserDelay = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerUserDelay(
            ViSession(Vi), ViInt32(Function), ViInt32(UserDelayIndex), byref(UserDelay)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(UserDelay.value)

    def SetDigitizerUserDelay(self, Vi, Function, UserDelayIndex, UserDelay):
        _status = self.dll.kedmm7510_SetDigitizerUserDelay(
            ViSession(Vi), ViInt32(Function), ViInt32(UserDelayIndex), ViReal64(UserDelay)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerAperture(self, Vi, Function):
        Aperture = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerAperture(ViSession(Vi), ViInt32(Function), byref(Aperture))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Aperture.value)

    def SetDigitizerAperture(self, Vi, Function, Aperture):
        _status = self.dll.kedmm7510_SetDigitizerAperture(ViSession(Vi), ViInt32(Function), ViReal64(Aperture))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerSampleRate(self, Vi, Function):
        SampleRate = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerSampleRate(ViSession(Vi), ViInt32(Function), byref(SampleRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(SampleRate.value)

    def SetDigitizerSampleRate(self, Vi, Function, SampleRate):
        _status = self.dll.kedmm7510_SetDigitizerSampleRate(ViSession(Vi), ViInt32(Function), ViReal64(SampleRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerCouplingType(self, Vi, Function):
        CouplingType = ViInt32()
        _status = self.dll.kedmm7510_GetDigitizerCouplingType(ViSession(Vi), ViInt32(Function), byref(CouplingType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(CouplingType.value)

    def SetDigitizerCouplingType(self, Vi, Function, CouplingType):
        _status = self.dll.kedmm7510_SetDigitizerCouplingType(ViSession(Vi), ViInt32(Function), ViInt32(CouplingType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerCouplingacFilterType(self, Vi, Function):
        CouplingACFilterType = ViInt32()
        _status = self.dll.kedmm7510_GetDigitizerCouplingacFilterType(
            ViSession(Vi), ViInt32(Function), byref(CouplingACFilterType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(CouplingACFilterType.value)

    def SetDigitizerCouplingacFilterType(self, Vi, Function, CouplingACFilterType):
        _status = self.dll.kedmm7510_SetDigitizerCouplingacFilterType(
            ViSession(Vi), ViInt32(Function), ViInt32(CouplingACFilterType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerCouplingacFrequency(self, Vi, Function):
        CouplingACFrequency = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerCouplingacFrequency(
            ViSession(Vi), ViInt32(Function), byref(CouplingACFrequency)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(CouplingACFrequency.value)

    def SetDigitizerCouplingacFrequency(self, Vi, Function, CouplingACFrequency):
        _status = self.dll.kedmm7510_SetDigitizerCouplingacFrequency(
            ViSession(Vi), ViInt32(Function), ViReal64(CouplingACFrequency)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerMathOperation(self, Vi, Function):
        MathOperation = ViInt32()
        _status = self.dll.kedmm7510_GetDigitizerMathOperation(ViSession(Vi), ViInt32(Function), byref(MathOperation))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(MathOperation.value)

    def SetDigitizerMathOperation(self, Vi, Function, MathOperation):
        _status = self.dll.kedmm7510_SetDigitizerMathOperation(ViSession(Vi), ViInt32(Function), ViInt32(MathOperation))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerMathOffsetFactor(self, Vi, Function):
        MathOffsetFactor = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerMathOffsetFactor(
            ViSession(Vi), ViInt32(Function), byref(MathOffsetFactor)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MathOffsetFactor.value)

    def SetDigitizerMathOffsetFactor(self, Vi, Function, MathOffsetFactor):
        _status = self.dll.kedmm7510_SetDigitizerMathOffsetFactor(
            ViSession(Vi), ViInt32(Function), ViReal64(MathOffsetFactor)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerMathScaleFactor(self, Vi, Function):
        MathScaleFactor = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerMathScaleFactor(
            ViSession(Vi), ViInt32(Function), byref(MathScaleFactor)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MathScaleFactor.value)

    def SetDigitizerMathScaleFactor(self, Vi, Function, MathScaleFactor):
        _status = self.dll.kedmm7510_SetDigitizerMathScaleFactor(
            ViSession(Vi), ViInt32(Function), ViReal64(MathScaleFactor)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerMathPercent(self, Vi, Function):
        MathPercent = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerMathPercent(ViSession(Vi), ViInt32(Function), byref(MathPercent))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MathPercent.value)

    def SetDigitizerMathPercent(self, Vi, Function, MathPercent):
        _status = self.dll.kedmm7510_SetDigitizerMathPercent(ViSession(Vi), ViInt32(Function), ViReal64(MathPercent))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerMathOperationState(self, Vi, Function):
        MathOperationState = ViBoolean()
        _status = self.dll.kedmm7510_GetDigitizerMathOperationState(
            ViSession(Vi), ViInt32(Function), byref(MathOperationState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(MathOperationState.value)

    def SetDigitizerMathOperationState(self, Vi, Function, MathOperationState):
        _status = self.dll.kedmm7510_SetDigitizerMathOperationState(
            ViSession(Vi), ViInt32(Function), ViBoolean(MathOperationState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IsDigitizerLimitTestFailed(self, Vi, Function, LimitTest):
        Val = ViInt32()
        _status = self.dll.kedmm7510_IsDigitizerLimitTestFailed(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Val)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def DigitizerConfigurationLimitClear(self, Vi, Function, LimitTest):
        _status = self.dll.kedmm7510_DigitizerConfigurationLimitClear(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerLimitTestEnabled(self, Vi, Function, LimitTest):
        Enabled = ViBoolean()
        _status = self.dll.kedmm7510_GetDigitizerLimitTestEnabled(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(Enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(Enabled.value)

    def SetDigitizerLimitTestEnabled(self, Vi, Function, LimitTest, Enabled):
        _status = self.dll.kedmm7510_SetDigitizerLimitTestEnabled(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViBoolean(Enabled)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerLimitAutoClearState(self, Vi, Function, LimitTest):
        AutoClearState = ViBoolean()
        _status = self.dll.kedmm7510_GetDigitizerLimitAutoClearState(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(AutoClearState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(AutoClearState.value)

    def SetDigitizerLimitAutoClearState(self, Vi, Function, LimitTest, AutoClearState):
        _status = self.dll.kedmm7510_SetDigitizerLimitAutoClearState(
            ViSession(Vi),
            ViInt32(Function),
            ViInt32(LimitTest),
            ViBoolean(AutoClearState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerUpperLimit(self, Vi, Function, LimitTest):
        UpperLimitTest = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerUpperLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(UpperLimitTest)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(UpperLimitTest.value)

    def SetDigitizerUpperLimit(self, Vi, Function, LimitTest, UpperLimitTest):
        _status = self.dll.kedmm7510_SetDigitizerUpperLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViReal64(UpperLimitTest)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerLowerLimit(self, Vi, Function, LimitTest):
        LowerLimit = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerLowerLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), byref(LowerLimit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(LowerLimit.value)

    def SetDigitizerLowerLimit(self, Vi, Function, LimitTest, LowerLimit):
        _status = self.dll.kedmm7510_SetDigitizerLowerLimit(
            ViSession(Vi), ViInt32(Function), ViInt32(LimitTest), ViReal64(LowerLimit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerLimitAudible(self, Vi, LimitTest, Function):
        Audible = ViInt32()
        _status = self.dll.kedmm7510_GetDigitizerLimitAudible(
            ViSession(Vi), ViInt32(LimitTest), ViInt32(Function), byref(Audible)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Audible.value)

    def SetDigitizerLimitAudible(self, Vi, LimitTest, Function, Audible):
        _status = self.dll.kedmm7510_SetDigitizerLimitAudible(
            ViSession(Vi), ViInt32(LimitTest), ViInt32(Function), ViInt32(Audible)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerATrigEdgeLevel(self, Vi, Function):
        EdgeLevel = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerATrigEdgeLevel(ViSession(Vi), ViInt32(Function), byref(EdgeLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(EdgeLevel.value)

    def SetDigitizerATrigEdgeLevel(self, Vi, Function, EdgeLevel):
        _status = self.dll.kedmm7510_SetDigitizerATrigEdgeLevel(ViSession(Vi), ViInt32(Function), ViReal64(EdgeLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerATrigEdgeSlope(self, Vi, Function):
        EdgeSlope = ViInt32()
        _status = self.dll.kedmm7510_GetDigitizerATrigEdgeSlope(ViSession(Vi), ViInt32(Function), byref(EdgeSlope))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(EdgeSlope.value)

    def SetDigitizerATrigEdgeSlope(self, Vi, Function, EdgeSlope):
        _status = self.dll.kedmm7510_SetDigitizerATrigEdgeSlope(ViSession(Vi), ViInt32(Function), ViInt32(EdgeSlope))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerATrigMode(self, Vi, Function):
        Mode = ViInt32()
        _status = self.dll.kedmm7510_GetDigitizerATrigMode(ViSession(Vi), ViInt32(Function), byref(Mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Mode.value)

    def SetDigitizerATrigMode(self, Vi, Function, Mode):
        _status = self.dll.kedmm7510_SetDigitizerATrigMode(ViSession(Vi), ViInt32(Function), ViInt32(Mode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerATrigPulseCondition(self, Vi, Function):
        PulseCondition = ViInt32()
        _status = self.dll.kedmm7510_GetDigitizerATrigPulseCondition(
            ViSession(Vi), ViInt32(Function), byref(PulseCondition)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(PulseCondition.value)

    def SetDigitizerATrigPulseCondition(self, Vi, Function, PulseCondition):
        _status = self.dll.kedmm7510_SetDigitizerATrigPulseCondition(
            ViSession(Vi), ViInt32(Function), ViInt32(PulseCondition)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerATrigPulseLevel(self, Vi, Function):
        PulseLevel = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerATrigPulseLevel(ViSession(Vi), ViInt32(Function), byref(PulseLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(PulseLevel.value)

    def SetDigitizerATrigPulseLevel(self, Vi, Function, PulseLevel):
        _status = self.dll.kedmm7510_SetDigitizerATrigPulseLevel(ViSession(Vi), ViInt32(Function), ViReal64(PulseLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerATrigPulsePolarity(self, Vi, Function):
        PulsePolarity = ViInt32()
        _status = self.dll.kedmm7510_GetDigitizerATrigPulsePolarity(
            ViSession(Vi), ViInt32(Function), byref(PulsePolarity)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(PulsePolarity.value)

    def SetDigitizerATrigPulsePolarity(self, Vi, Function, PulsePolarity):
        _status = self.dll.kedmm7510_SetDigitizerATrigPulsePolarity(
            ViSession(Vi), ViInt32(Function), ViInt32(PulsePolarity)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerATrigPulseWidth(self, Vi, Function):
        PulseWidth = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerATrigPulseWidth(ViSession(Vi), ViInt32(Function), byref(PulseWidth))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(PulseWidth.value)

    def SetDigitizerATrigPulseWidth(self, Vi, Function, PulseWidth):
        _status = self.dll.kedmm7510_SetDigitizerATrigPulseWidth(ViSession(Vi), ViInt32(Function), ViReal64(PulseWidth))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerATrigWindowDirection(self, Vi, Function):
        WindowDirection = ViInt32()
        _status = self.dll.kedmm7510_GetDigitizerATrigWindowDirection(
            ViSession(Vi), ViInt32(Function), byref(WindowDirection)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(WindowDirection.value)

    def SetDigitizerATrigWindowDirection(self, Vi, Function, WindowDirection):
        _status = self.dll.kedmm7510_SetDigitizerATrigWindowDirection(
            ViSession(Vi), ViInt32(Function), ViInt32(WindowDirection)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerATrigWindowLevelHigh(self, Vi, Function):
        WindowLevelHigh = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerATrigWindowLevelHigh(
            ViSession(Vi), ViInt32(Function), byref(WindowLevelHigh)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(WindowLevelHigh.value)

    def SetDigitizerATrigWindowLevelHigh(self, Vi, Function, WindowLevelHigh):
        _status = self.dll.kedmm7510_SetDigitizerATrigWindowLevelHigh(
            ViSession(Vi), ViInt32(Function), ViReal64(WindowLevelHigh)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerATrigWindowLevelLow(self, Vi, Function):
        WindowLevelLow = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerATrigWindowLevelLow(
            ViSession(Vi), ViInt32(Function), byref(WindowLevelLow)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(WindowLevelLow.value)

    def SetDigitizerATrigWindowLevelLow(self, Vi, Function, WindowLevelLow):
        _status = self.dll.kedmm7510_SetDigitizerATrigWindowLevelLow(
            ViSession(Vi), ViInt32(Function), ViReal64(WindowLevelLow)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerATrigHighFreqRejectState(self, Vi, Function):
        HighFreqRejectState = ViBoolean()
        _status = self.dll.kedmm7510_GetDigitizerATrigHighFreqRejectState(
            ViSession(Vi), ViInt32(Function), byref(HighFreqRejectState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(HighFreqRejectState.value)

    def SetDigitizerATrigHighFreqRejectState(self, Vi, Function, HighFreqRejectState):
        _status = self.dll.kedmm7510_SetDigitizerATrigHighFreqRejectState(
            ViSession(Vi), ViInt32(Function), ViBoolean(HighFreqRejectState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitizerRelativeAcquire(self, Vi, Function):
        _status = self.dll.kedmm7510_DigitizerRelativeAcquire(ViSession(Vi), ViInt32(Function))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDigitizerRelativeOffset(self, Vi, Function):
        RelativeOffset = ViReal64()
        _status = self.dll.kedmm7510_GetDigitizerRelativeOffset(ViSession(Vi), ViInt32(Function), byref(RelativeOffset))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RelativeOffset.value)

    def GetDigitizerRelativeOffsetState(self, Vi, Function):
        RelativeOffsetState = ViBoolean()
        _status = self.dll.kedmm7510_GetDigitizerRelativeOffsetState(
            ViSession(Vi), ViInt32(Function), byref(RelativeOffsetState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(RelativeOffsetState.value)

    def SetDigitizerRelativeOffset(self, Vi, Function, RelativeOffset):
        _status = self.dll.kedmm7510_SetDigitizerRelativeOffset(
            ViSession(Vi), ViInt32(Function), ViReal64(RelativeOffset)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetDigitizerRelativeOffsetState(self, Vi, Function, RelativeOffsetState):
        _status = self.dll.kedmm7510_SetDigitizerRelativeOffsetState(
            ViSession(Vi), ViInt32(Function), ViBoolean(RelativeOffsetState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AppendBufferDataToFile(self, Vi, FileName, BufferName, TimeFormat, Start, End):
        _status = self.dll.kedmm7510_AppendBufferDataToFile(
            ViSession(Vi),
            ViConstString(FileName),
            ViConstString(BufferName),
            ViInt32(TimeFormat),
            ViInt32(Start),
            ViInt32(End),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TraceBufferClear(self, Vi, BufferName):
        _status = self.dll.kedmm7510_TraceBufferClear(ViSession(Vi), ViConstString(BufferName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearBufferStatistics(self, Vi, BufferName):
        _status = self.dll.kedmm7510_ClearBufferStatistics(ViSession(Vi), ViConstString(BufferName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CreateBuffer(self, Vi, BufferName, BufferSize):
        _status = self.dll.kedmm7510_CreateBuffer(ViSession(Vi), ViConstString(BufferName), ViInt32(BufferSize))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DeleteBuffer(self, Vi, BufferName):
        _status = self.dll.kedmm7510_DeleteBuffer(ViSession(Vi), ViConstString(BufferName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def BufferFetch(self, Vi, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.kedmm7510_BufferFetch(
            ViSession(Vi),
            ViConstString(BufferName),
            ViInt32(BufferElementsBufferSize),
            ViConstString(BufferElements),
            ViInt32(ValBufferSize),
            Val,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def GetBufferDoubleData(self, Vi, StartIndex, EndIndex, BufferName, BufferElement, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.kedmm7510_GetBufferDoubleData(
            ViSession(Vi),
            ViInt32(StartIndex),
            ViInt32(EndIndex),
            ViConstString(BufferName),
            ViInt32(BufferElement),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def GetBufferStringData(self, Vi, StartIndex, EndIndex, BufferName, BufferElement, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.kedmm7510_GetBufferStringData(
            ViSession(Vi),
            ViInt32(StartIndex),
            ViInt32(EndIndex),
            ViConstString(BufferName),
            ViInt32(BufferElement),
            ViInt32(ValBufferSize),
            Val,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def SaveBufferDataToFile(self, Vi, FileName, BufferName, TimeFormat, Start, Stop):
        _status = self.dll.kedmm7510_SaveBufferDataToFile(
            ViSession(Vi),
            ViConstString(FileName),
            ViConstString(BufferName),
            ViInt32(TimeFormat),
            ViInt32(Start),
            ViInt32(Stop),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TraceBufferTrigger(self, Vi, BufferName):
        _status = self.dll.kedmm7510_TraceBufferTrigger(ViSession(Vi), ViConstString(BufferName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetActualBufferReadings(self, Vi, BufferName):
        Actual = ViInt32()
        _status = self.dll.kedmm7510_GetActualBufferReadings(ViSession(Vi), ViConstString(BufferName), byref(Actual))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Actual.value)

    def GetBufferFillMode(self, Vi, BufferName):
        BufferFillMode = ViInt32()
        _status = self.dll.kedmm7510_GetBufferFillMode(ViSession(Vi), ViConstString(BufferName), byref(BufferFillMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(BufferFillMode.value)

    def SetBufferFillMode(self, Vi, BufferName, BufferFillMode):
        _status = self.dll.kedmm7510_SetBufferFillMode(
            ViSession(Vi), ViConstString(BufferName), ViInt32(BufferFillMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetBufferSize(self, Vi, BufferName):
        BufferSize = ViInt32()
        _status = self.dll.kedmm7510_GetBufferSize(ViSession(Vi), ViConstString(BufferName), byref(BufferSize))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(BufferSize.value)

    def SetBufferSize(self, Vi, BufferName, BufferSize):
        _status = self.dll.kedmm7510_SetBufferSize(ViSession(Vi), ViConstString(BufferName), ViInt32(BufferSize))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetAverageBufferReading(self, Vi, BufferName):
        GetAverageReading = ViReal64()
        _status = self.dll.kedmm7510_GetAverageBufferReading(
            ViSession(Vi), ViConstString(BufferName), byref(GetAverageReading)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(GetAverageReading.value)

    def GetBufferMaximumReading(self, Vi, BufferName):
        GetMaximumReading = ViReal64()
        _status = self.dll.kedmm7510_GetBufferMaximumReading(
            ViSession(Vi), ViConstString(BufferName), byref(GetMaximumReading)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(GetMaximumReading.value)

    def GetBufferMinimumReading(self, Vi, BufferName):
        GetMinimumReading = ViReal64()
        _status = self.dll.kedmm7510_GetBufferMinimumReading(
            ViSession(Vi), ViConstString(BufferName), byref(GetMinimumReading)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(GetMinimumReading.value)

    def GetBufferPeak2PeakReading(self, Vi, BufferName):
        GetPeak2PeakReading = ViReal64()
        _status = self.dll.kedmm7510_GetBufferPeak2PeakReading(
            ViSession(Vi), ViConstString(BufferName), byref(GetPeak2PeakReading)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(GetPeak2PeakReading.value)

    def GetStandardDeviationOfBufferBufferReadings(self, Vi, BufferName):
        GetStandardDeviationOfReadings = ViReal64()
        _status = self.dll.kedmm7510_GetStandardDeviationOfBufferBufferReadings(
            ViSession(Vi),
            ViConstString(BufferName),
            byref(GetStandardDeviationOfReadings),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(GetStandardDeviationOfReadings.value)

    def GetBufferLogStateEnable(self, Vi, BufferName):
        LogStateEnable = ViBoolean()
        _status = self.dll.kedmm7510_GetBufferLogStateEnable(
            ViSession(Vi), ViConstString(BufferName), byref(LogStateEnable)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(LogStateEnable.value)

    def SetBufferLogStateEnable(self, Vi, BufferName, LogStateEnable):
        _status = self.dll.kedmm7510_SetBufferLogStateEnable(
            ViSession(Vi), ViConstString(BufferName), ViBoolean(LogStateEnable)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TraceBufferDigitizerTrigger(self, Vi, BufferName):
        _status = self.dll.kedmm7510_TraceBufferDigitizerTrigger(ViSession(Vi), ViConstString(BufferName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutoCalRevert(self, Vi):
        _status = self.dll.kedmm7510_AutoCalRevert(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutoCalRun(self, Vi):
        _status = self.dll.kedmm7510_AutoCalRun(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutoCalSchedule(self, Vi, Action, Interval, Hour):
        _status = self.dll.kedmm7510_AutoCalSchedule(ViSession(Vi), ViInt32(Action), ViInt32(Interval), ViInt32(Hour))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutoCalReadSchedule(self, Vi):
        Action = ViInt32()
        Interval = ViInt32()
        Hour = ViInt32()
        _status = self.dll.kedmm7510_AutoCalReadSchedule(ViSession(Vi), byref(Action), byref(Interval), byref(Hour))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Action = int(Action.value)
        Interval = int(Interval.value)
        Hour = int(Hour.value)
        return Action, Interval, Hour
