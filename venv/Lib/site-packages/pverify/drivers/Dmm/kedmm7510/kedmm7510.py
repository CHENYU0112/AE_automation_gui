from __future__ import annotations

from pverify.contrib.Lab.driver_identity import *
from pverify.contrib.Lab.ivi.ivi_base_classes import IVICDriverWrapper

from .kedmm7510_dllwrap import *


class kedmm7510(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = kedmm7510_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ConfigureMeasurement(self, Function, Range, Resolution):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureMeasurement(self._vi, Function, Range, Resolution)

    def ConfigureFrequencyVoltageRange(self, FrequencyVoltageRange):
        """

        :param FrequencyVoltageRange:
        :type FrequencyVoltageRange:
        """
        return self._dllwrap.ConfigureFrequencyVoltageRange(self._vi, FrequencyVoltageRange)

    def ConfigureACBandwidth(self, MinFreq, MaxFreq):
        """

        :param MinFreq:
        :type MinFreq:
        :param MaxFreq:
        :type MaxFreq:
        """
        return self._dllwrap.ConfigureACBandwidth(self._vi, MinFreq, MaxFreq)

    def ConfigureTransducerType(self, TransducerType):
        """

        :param TransducerType:
        :type TransducerType:
        """
        return self._dllwrap.ConfigureTransducerType(self._vi, TransducerType)

    def ConfigureFixedRefJunction(self, FixedRefJunction):
        """

        :param FixedRefJunction:
        :type FixedRefJunction:
        """
        return self._dllwrap.ConfigureFixedRefJunction(self._vi, FixedRefJunction)

    def ConfigureThermistor(self, Resistance):
        """

        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.ConfigureThermistor(self._vi, Resistance)

    def ConfigureRTD(self, Alpha, Resistance):
        """

        :param Alpha:
        :type Alpha:
        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.ConfigureRTD(self._vi, Alpha, Resistance)

    def ConfigureThermocouple(self, ThermocoupleType, RefJunctionType):
        """

        :param ThermocoupleType:
        :type ThermocoupleType:
        :param RefJunctionType:
        :type RefJunctionType:
        """
        return self._dllwrap.ConfigureThermocouple(self._vi, ThermocoupleType, RefJunctionType)

    def ConfigureTriggerSlope(self, Polarity):
        """

        :param Polarity:
        :type Polarity:
        """
        return self._dllwrap.ConfigureTriggerSlope(self._vi, Polarity)

    def ConfigureTrigger(self, TriggerSource, TriggerDelay):
        """

        :param TriggerSource:
        :type TriggerSource:
        :param TriggerDelay:
        :type TriggerDelay:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, TriggerSource, TriggerDelay)

    def GetApertureTimeInfo(self):
        """"""
        return self._dllwrap.GetApertureTimeInfo(self._vi)

    def GetAutoRangeValue(self):
        """"""
        return self._dllwrap.GetAutoRangeValue(self._vi)

    def ConfigureAutoZeroMode(self, AutoZeroMode):
        """

        :param AutoZeroMode:
        :type AutoZeroMode:
        """
        return self._dllwrap.ConfigureAutoZeroMode(self._vi, AutoZeroMode)

    def ConfigurePowerLineFrequency(self, PowerLineFreq):
        """

        :param PowerLineFreq:
        :type PowerLineFreq:
        """
        return self._dllwrap.ConfigurePowerLineFrequency(self._vi, PowerLineFreq)

    def ConfigureMeasCompleteDest(self, MeasCompleteDest):
        """

        :param MeasCompleteDest:
        :type MeasCompleteDest:
        """
        return self._dllwrap.ConfigureMeasCompleteDest(self._vi, MeasCompleteDest)

    def ConfigureMultiPoint(self, TriggerCount, SampleCount, SampleTrigger, SampleInterval):
        """

        :param TriggerCount:
        :type TriggerCount:
        :param SampleCount:
        :type SampleCount:
        :param SampleTrigger:
        :type SampleTrigger:
        :param SampleInterval:
        :type SampleInterval:
        """
        return self._dllwrap.ConfigureMultiPoint(self._vi, TriggerCount, SampleCount, SampleTrigger, SampleInterval)

    def Read(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Read(self._vi, MaxTimeMilliseconds)

    def ReadMultiPoint(self, MaxTimeMilliseconds, ArraySize):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ArraySize:
        :type ArraySize:
        """
        return self._dllwrap.ReadMultiPoint(self._vi, MaxTimeMilliseconds, ArraySize)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def Fetch(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Fetch(self._vi, MaxTimeMilliseconds)

    def FetchMultiPoint(self, MaxTimeMilliseconds, ArraySize):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ArraySize:
        :type ArraySize:
        """
        return self._dllwrap.FetchMultiPoint(self._vi, MaxTimeMilliseconds, ArraySize)

    def Initiate(self):
        """"""
        return self._dllwrap.Initiate(self._vi)

    def IsOverRange(self, MeasurementValue):
        """

        :param MeasurementValue:
        :type MeasurementValue:
        """
        return self._dllwrap.IsOverRange(self._vi, MeasurementValue)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def RunScript(self, ScriptName):
        """

        :param ScriptName:
        :type ScriptName:
        """
        return self._dllwrap.RunScript(self._vi, ScriptName)

    def ReadOperationCondition(self):
        """"""
        return self._dllwrap.ReadOperationCondition(self._vi)

    def MapEventIDToBitNumberInOERegister(self, BitNumber, SetEvent, ClearEvent):
        """

        :param BitNumber:
        :type BitNumber:
        :param SetEvent:
        :type SetEvent:
        :param ClearEvent:
        :type ClearEvent:
        """
        return self._dllwrap.MapEventIDToBitNumberInOERegister(self._vi, BitNumber, SetEvent, ClearEvent)

    def ReadOERegisterMap(self, BitNumber):
        """

        :param BitNumber:
        :type BitNumber:
        """
        return self._dllwrap.ReadOERegisterMap(self._vi, BitNumber)

    def Preset(self):
        """"""
        return self._dllwrap.Preset(self._vi)

    def ReadQuestionableCondition(self):
        """"""
        return self._dllwrap.ReadQuestionableCondition(self._vi)

    def MapEventIDToBitNumberInQERegister(self, BitNumber, SetEvent, ClearEvent):
        """

        :param BitNumber:
        :type BitNumber:
        :param SetEvent:
        :type SetEvent:
        :param ClearEvent:
        :type ClearEvent:
        """
        return self._dllwrap.MapEventIDToBitNumberInQERegister(self._vi, BitNumber, SetEvent, ClearEvent)

    def ReadQERegisterMap(self, BitNumber):
        """

        :param BitNumber:
        :type BitNumber:
        """
        return self._dllwrap.ReadQERegisterMap(self._vi, BitNumber)

    def ReadOperationEventRegister(self):
        """"""
        return self._dllwrap.ReadOperationEventRegister(self._vi)

    def ReadQuestionableEventRegister(self):
        """"""
        return self._dllwrap.ReadQuestionableEventRegister(self._vi)

    def StatusClear(self):
        """"""
        return self._dllwrap.StatusClear(self._vi)

    def Beep(self, Frequency, Time):
        """

        :param Frequency:
        :type Frequency:
        :param Time:
        :type Time:
        """
        return self._dllwrap.Beep(self._vi, Frequency, Time)

    def Clear(self):
        """"""
        return self._dllwrap.Clear(self._vi)

    def LANConfiguration(
        self,
        IPAddressBufferSize,
        IPAddress,
        SubnetMaskBufferSize,
        SubnetMask,
        GatewayBufferSize,
        Gateway,
    ):
        """

        :param IPAddressBufferSize:
        :type IPAddressBufferSize:
        :param IPAddress:
        :type IPAddress:
        :param SubnetMaskBufferSize:
        :type SubnetMaskBufferSize:
        :param SubnetMask:
        :type SubnetMask:
        :param GatewayBufferSize:
        :type GatewayBufferSize:
        :param Gateway:
        :type Gateway:
        """
        return self._dllwrap.LANConfiguration(
            self._vi,
            IPAddressBufferSize,
            IPAddress,
            SubnetMaskBufferSize,
            SubnetMask,
            GatewayBufferSize,
            Gateway,
        )

    def QueryLANConfiguration(self, IPAddressBufferSize, SubnetMaskBufferSize, GatewayBufferSize, ValBufferSize):
        """

        :param IPAddressBufferSize:
        :type IPAddressBufferSize:
        :param SubnetMaskBufferSize:
        :type SubnetMaskBufferSize:
        :param GatewayBufferSize:
        :type GatewayBufferSize:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.QueryLANConfiguration(
            self._vi,
            IPAddressBufferSize,
            SubnetMaskBufferSize,
            GatewayBufferSize,
            ValBufferSize,
        )

    def ReadNextError(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadNextError(self._vi, ValBufferSize)

    def ReadNextErrorCode(self):
        """"""
        return self._dllwrap.ReadNextErrorCode(self._vi)

    def PostEventLog(self, MessageBufferSize, Message, SeverityType):
        """

        :param MessageBufferSize:
        :type MessageBufferSize:
        :param Message:
        :type Message:
        :param SeverityType:
        :type SeverityType:
        """
        return self._dllwrap.PostEventLog(self._vi, MessageBufferSize, Message, SeverityType)

    def SaveEventLog(self, FilenameBufferSize, Filename, EventType):
        """

        :param FilenameBufferSize:
        :type FilenameBufferSize:
        :param Filename:
        :type Filename:
        :param EventType:
        :type EventType:
        """
        return self._dllwrap.SaveEventLog(self._vi, FilenameBufferSize, Filename, EventType)

    def SaveAllEventLogs(self, FilenameBufferSize, Filename):
        """

        :param FilenameBufferSize:
        :type FilenameBufferSize:
        :param Filename:
        :type Filename:
        """
        return self._dllwrap.SaveAllEventLogs(self._vi, FilenameBufferSize, Filename)

    def LANAutoConfiguration(self):
        """"""
        return self._dllwrap.LANAutoConfiguration(self._vi)

    def GetEventLogCount(self, Mask):
        """

        :param Mask:
        :type Mask:
        """
        return self._dllwrap.GetEventLogCount(self._vi, Mask)

    def GetReadNextEventLog(self, Mask, ReadNextEventLogBufferSize):
        """

        :param Mask:
        :type Mask:
        :param ReadNextEventLogBufferSize:
        :type ReadNextEventLogBufferSize:
        """
        return self._dllwrap.GetReadNextEventLog(self._vi, Mask, ReadNextEventLogBufferSize)

    def SaveSetup(self, SetupNumber):
        """

        :param SetupNumber:
        :type SetupNumber:
        """
        return self._dllwrap.SaveSetup(self._vi, SetupNumber)

    def RecallSetup(self, SetupNumber):
        """

        :param SetupNumber:
        :type SetupNumber:
        """
        return self._dllwrap.RecallSetup(self._vi, SetupNumber)

    def TriggerAbort(self):
        """"""
        return self._dllwrap.TriggerAbort(self._vi)

    def InitiateTrigger(self):
        """"""
        return self._dllwrap.InitiateTrigger(self._vi)

    def SendSoftwareTrigger2(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger2(self._vi)

    def ClearTimerTrigger(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.ClearTimerTrigger(self._vi, TimerNumber)

    def GetTimerTriggerEventCount(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetTimerTriggerEventCount(self._vi, TimerNumber)

    def SetTimerTriggerEventCount(self, TimerNumber, EventCount):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param EventCount:
        :type EventCount:
        """
        return self._dllwrap.SetTimerTriggerEventCount(self._vi, TimerNumber, EventCount)

    def GetTimerTriggerDelay(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetTimerTriggerDelay(self._vi, TimerNumber)

    def SetTimerTriggerDelay(self, TimerNumber, Delay):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param Delay:
        :type Delay:
        """
        return self._dllwrap.SetTimerTriggerDelay(self._vi, TimerNumber, Delay)

    def IsTimerTriggerOverRun(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.IsTimerTriggerOverRun(self._vi, TimerNumber)

    def GetTimerTriggerGenerateEventidState(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetTimerTriggerGenerateEventidState(self._vi, TimerNumber)

    def SetTimerTriggerGenerateEventidState(self, TimerNumber, GenerateEventIDState):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param GenerateEventIDState:
        :type GenerateEventIDState:
        """
        return self._dllwrap.SetTimerTriggerGenerateEventidState(self._vi, TimerNumber, GenerateEventIDState)

    def GetTimerTriggerState(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetTimerTriggerState(self._vi, TimerNumber)

    def SetTimerTriggerState(self, TimerNumber, State):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param State:
        :type State:
        """
        return self._dllwrap.SetTimerTriggerState(self._vi, TimerNumber, State)

    def GetTimerTriggerStartByEventid(self, TimerNumber, StartByEventIDBufferSize):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param StartByEventIDBufferSize:
        :type StartByEventIDBufferSize:
        """
        return self._dllwrap.GetTimerTriggerStartByEventid(self._vi, TimerNumber, StartByEventIDBufferSize)

    def SetTimerTriggerStartByEventid(self, TimerNumber, StartByEventID):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param StartByEventID:
        :type StartByEventID:
        """
        return self._dllwrap.SetTimerTriggerStartByEventid(self._vi, TimerNumber, StartByEventID)

    def GetTimerTriggerStartFractional(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetTimerTriggerStartFractional(self._vi, TimerNumber)

    def SetTimerTriggerStartFractional(self, TimerNumber, StartFractional):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param StartFractional:
        :type StartFractional:
        """
        return self._dllwrap.SetTimerTriggerStartFractional(self._vi, TimerNumber, StartFractional)

    def GetTimerTriggerStartSeconds(self, TimerNumber):
        """

        :param TimerNumber:
        :type TimerNumber:
        """
        return self._dllwrap.GetTimerTriggerStartSeconds(self._vi, TimerNumber)

    def SetTimerTriggerStartSeconds(self, TimerNumber, StartSeconds):
        """

        :param TimerNumber:
        :type TimerNumber:
        :param StartSeconds:
        :type StartSeconds:
        """
        return self._dllwrap.SetTimerTriggerStartSeconds(self._vi, TimerNumber, StartSeconds)

    def ClearDigtalTrigger(self, InputLine):
        """

        :param InputLine:
        :type InputLine:
        """
        return self._dllwrap.ClearDigtalTrigger(self._vi, InputLine)

    def GetDigitalTriggerMode(self, InputLine):
        """

        :param InputLine:
        :type InputLine:
        """
        return self._dllwrap.GetDigitalTriggerMode(self._vi, InputLine)

    def SetDigitalTriggerMode(self, InputLine, Mode):
        """

        :param InputLine:
        :type InputLine:
        :param Mode:
        :type Mode:
        """
        return self._dllwrap.SetDigitalTriggerMode(self._vi, InputLine, Mode)

    def GetDigitalTriggerOverRunStatus(self, InputLine):
        """

        :param InputLine:
        :type InputLine:
        """
        return self._dllwrap.GetDigitalTriggerOverRunStatus(self._vi, InputLine)

    def GetDigitalTriggerOutputLogic(self, InputLine):
        """

        :param InputLine:
        :type InputLine:
        """
        return self._dllwrap.GetDigitalTriggerOutputLogic(self._vi, InputLine)

    def SetDigitalTriggerOutputLogic(self, InputLine, OutputLogic):
        """

        :param InputLine:
        :type InputLine:
        :param OutputLogic:
        :type OutputLogic:
        """
        return self._dllwrap.SetDigitalTriggerOutputLogic(self._vi, InputLine, OutputLogic)

    def GetDigitalTriggerOutputPulsewidth(self, InputLine):
        """

        :param InputLine:
        :type InputLine:
        """
        return self._dllwrap.GetDigitalTriggerOutputPulsewidth(self._vi, InputLine)

    def SetDigitalTriggerOutputPulsewidth(self, InputLine, OutputPulsewidth):
        """

        :param InputLine:
        :type InputLine:
        :param OutputPulsewidth:
        :type OutputPulsewidth:
        """
        return self._dllwrap.SetDigitalTriggerOutputPulsewidth(self._vi, InputLine, OutputPulsewidth)

    def GetDigitalTriggerOutputStimulus(self, InputLine, OutputStimulusBufferSize):
        """

        :param InputLine:
        :type InputLine:
        :param OutputStimulusBufferSize:
        :type OutputStimulusBufferSize:
        """
        return self._dllwrap.GetDigitalTriggerOutputStimulus(self._vi, InputLine, OutputStimulusBufferSize)

    def SetDigitalTriggerOutputStimulus(self, InputLine, OutputStimulus):
        """

        :param InputLine:
        :type InputLine:
        :param OutputStimulus:
        :type OutputStimulus:
        """
        return self._dllwrap.SetDigitalTriggerOutputStimulus(self._vi, InputLine, OutputStimulus)

    def ClearLANTrigger(self, EventNumber):
        """

        :param EventNumber:
        :type EventNumber:
        """
        return self._dllwrap.ClearLANTrigger(self._vi, EventNumber)

    def GetLANTriggerMode(self, EventNumber):
        """

        :param EventNumber:
        :type EventNumber:
        """
        return self._dllwrap.GetLANTriggerMode(self._vi, EventNumber)

    def SetLANTriggerMode(self, EventNumber, Mode):
        """

        :param EventNumber:
        :type EventNumber:
        :param Mode:
        :type Mode:
        """
        return self._dllwrap.SetLANTriggerMode(self._vi, EventNumber, Mode)

    def GetLANTriggerOverRunStatus(self, EventNumber):
        """

        :param EventNumber:
        :type EventNumber:
        """
        return self._dllwrap.GetLANTriggerOverRunStatus(self._vi, EventNumber)

    def GetLANTriggerEventGeneratorState(self, EventNumber):
        """

        :param EventNumber:
        :type EventNumber:
        """
        return self._dllwrap.GetLANTriggerEventGeneratorState(self._vi, EventNumber)

    def SetLANTriggerEventGeneratorState(self, EventNumber, EventGeneratorState):
        """

        :param EventNumber:
        :type EventNumber:
        :param EventGeneratorState:
        :type EventGeneratorState:
        """
        return self._dllwrap.SetLANTriggerEventGeneratorState(self._vi, EventNumber, EventGeneratorState)

    def GetLANTriggerIpAddress(self, EventNumber, IPAddressBufferSize):
        """

        :param EventNumber:
        :type EventNumber:
        :param IPAddressBufferSize:
        :type IPAddressBufferSize:
        """
        return self._dllwrap.GetLANTriggerIpAddress(self._vi, EventNumber, IPAddressBufferSize)

    def SetLANTriggerIpAddress(self, EventNumber, IPAddress):
        """

        :param EventNumber:
        :type EventNumber:
        :param IPAddress:
        :type IPAddress:
        """
        return self._dllwrap.SetLANTriggerIpAddress(self._vi, EventNumber, IPAddress)

    def GetLANTriggerOutLogic(self, EventNumber):
        """

        :param EventNumber:
        :type EventNumber:
        """
        return self._dllwrap.GetLANTriggerOutLogic(self._vi, EventNumber)

    def SetLANTriggerOutLogic(self, EventNumber, OutLogic):
        """

        :param EventNumber:
        :type EventNumber:
        :param OutLogic:
        :type OutLogic:
        """
        return self._dllwrap.SetLANTriggerOutLogic(self._vi, EventNumber, OutLogic)

    def GetLANTriggerOutProtocol(self, EventNumber):
        """

        :param EventNumber:
        :type EventNumber:
        """
        return self._dllwrap.GetLANTriggerOutProtocol(self._vi, EventNumber)

    def SetLANTriggerOutProtocol(self, EventNumber, OutProtocol):
        """

        :param EventNumber:
        :type EventNumber:
        :param OutProtocol:
        :type OutProtocol:
        """
        return self._dllwrap.SetLANTriggerOutProtocol(self._vi, EventNumber, OutProtocol)

    def GetLANTriggerOutStimulus(self, EventNumber, OutStimulusBufferSize):
        """

        :param EventNumber:
        :type EventNumber:
        :param OutStimulusBufferSize:
        :type OutStimulusBufferSize:
        """
        return self._dllwrap.GetLANTriggerOutStimulus(self._vi, EventNumber, OutStimulusBufferSize)

    def SetLANTriggerOutStimulus(self, EventNumber, OutStimulus):
        """

        :param EventNumber:
        :type EventNumber:
        :param OutStimulus:
        :type OutStimulus:
        """
        return self._dllwrap.SetLANTriggerOutStimulus(self._vi, EventNumber, OutStimulus)

    def LoadTriggerModelExternal(
        self,
        DigitalInLine,
        DigitalOutLine,
        Count,
        Delay,
        ReadingBufferBufferSize,
        ReadingBuffer,
        ReadingBlock,
    ):
        """

        :param DigitalInLine:
        :type DigitalInLine:
        :param DigitalOutLine:
        :type DigitalOutLine:
        :param Count:
        :type Count:
        :param Delay:
        :type Delay:
        :param ReadingBufferBufferSize:
        :type ReadingBufferBufferSize:
        :param ReadingBuffer:
        :type ReadingBuffer:
        :param ReadingBlock:
        :type ReadingBlock:
        """
        return self._dllwrap.LoadTriggerModelExternal(
            self._vi,
            DigitalInLine,
            DigitalOutLine,
            Count,
            Delay,
            ReadingBufferBufferSize,
            ReadingBuffer,
            ReadingBlock,
        )

    def LoadTriggerModelList(
        self,
        MeasureConfigListBufferSize,
        MeasureConfigList,
        Delay,
        ReadingBufferBufferSize,
        ReadingBuffer,
        ReadingBlock,
    ):
        """

        :param MeasureConfigListBufferSize:
        :type MeasureConfigListBufferSize:
        :param MeasureConfigList:
        :type MeasureConfigList:
        :param Delay:
        :type Delay:
        :param ReadingBufferBufferSize:
        :type ReadingBufferBufferSize:
        :param ReadingBuffer:
        :type ReadingBuffer:
        :param ReadingBlock:
        :type ReadingBlock:
        """
        return self._dllwrap.LoadTriggerModelList(
            self._vi,
            MeasureConfigListBufferSize,
            MeasureConfigList,
            Delay,
            ReadingBufferBufferSize,
            ReadingBuffer,
            ReadingBlock,
        )

    def LoadTriggerModelLoopDuration(self, Duration, Delay, ReadingBufferBufferSize, ReadingBuffer, ReadingBlock):
        """

        :param Duration:
        :type Duration:
        :param Delay:
        :type Delay:
        :param ReadingBufferBufferSize:
        :type ReadingBufferBufferSize:
        :param ReadingBuffer:
        :type ReadingBuffer:
        :param ReadingBlock:
        :type ReadingBlock:
        """
        return self._dllwrap.LoadTriggerModelLoopDuration(
            self._vi,
            Duration,
            Delay,
            ReadingBufferBufferSize,
            ReadingBuffer,
            ReadingBlock,
        )

    def LoadTriggerModelLoopSimple(self, Count, Delay, ReadingBufferBufferSize, ReadingBuffer, ReadingBlock):
        """

        :param Count:
        :type Count:
        :param Delay:
        :type Delay:
        :param ReadingBufferBufferSize:
        :type ReadingBufferBufferSize:
        :param ReadingBuffer:
        :type ReadingBuffer:
        :param ReadingBlock:
        :type ReadingBlock:
        """
        return self._dllwrap.LoadTriggerModelLoopSimple(
            self._vi, Count, Delay, ReadingBufferBufferSize, ReadingBuffer, ReadingBlock
        )

    def ResetTriggerModel(self):
        """"""
        return self._dllwrap.ResetTriggerModel(self._vi)

    def LoadTriggerModelGradeBinning(
        self,
        NumberOfBins,
        Components,
        StartInLine,
        StartDelay,
        EndDelay,
        BufferName,
        AllPassBitPattern,
        LimitHighBufferSize,
        LimitLowBufferSize,
        FailBitPatternBufferSize,
    ):
        """

        :param NumberOfBins:
        :type NumberOfBins:
        :param Components:
        :type Components:
        :param StartInLine:
        :type StartInLine:
        :param StartDelay:
        :type StartDelay:
        :param EndDelay:
        :type EndDelay:
        :param BufferName:
        :type BufferName:
        :param AllPassBitPattern:
        :type AllPassBitPattern:
        :param LimitHighBufferSize:
        :type LimitHighBufferSize:
        :param LimitLowBufferSize:
        :type LimitLowBufferSize:
        :param FailBitPatternBufferSize:
        :type FailBitPatternBufferSize:
        """
        return self._dllwrap.LoadTriggerModelGradeBinning(
            self._vi,
            NumberOfBins,
            Components,
            StartInLine,
            StartDelay,
            EndDelay,
            BufferName,
            AllPassBitPattern,
            LimitHighBufferSize,
            LimitLowBufferSize,
            FailBitPatternBufferSize,
        )

    def LoadTriggerModelKeithley2001(
        self,
        Arm1SourceBypass,
        Arm1TriggerSource,
        Arm1Count,
        Arm2SourceBypass,
        Arm2TriggerSource,
        Arm2Count,
        Arm2Delay,
        TriggerSourceBypass,
        TriggerSource,
        TriggerCount,
        TriggerDelay,
    ):
        """

        :param Arm1SourceBypass:
        :type Arm1SourceBypass:
        :param Arm1TriggerSource:
        :type Arm1TriggerSource:
        :param Arm1Count:
        :type Arm1Count:
        :param Arm2SourceBypass:
        :type Arm2SourceBypass:
        :param Arm2TriggerSource:
        :type Arm2TriggerSource:
        :param Arm2Count:
        :type Arm2Count:
        :param Arm2Delay:
        :type Arm2Delay:
        :param TriggerSourceBypass:
        :type TriggerSourceBypass:
        :param TriggerSource:
        :type TriggerSource:
        :param TriggerCount:
        :type TriggerCount:
        :param TriggerDelay:
        :type TriggerDelay:
        """
        return self._dllwrap.LoadTriggerModelKeithley2001(
            self._vi,
            Arm1SourceBypass,
            Arm1TriggerSource,
            Arm1Count,
            Arm2SourceBypass,
            Arm2TriggerSource,
            Arm2Count,
            Arm2Delay,
            TriggerSourceBypass,
            TriggerSource,
            TriggerCount,
            TriggerDelay,
        )

    def LoadTriggerModelLoopUntilEvent(self, EventSource, Position, Delay, BufferName, ReadingBlock):
        """

        :param EventSource:
        :type EventSource:
        :param Position:
        :type Position:
        :param Delay:
        :type Delay:
        :param BufferName:
        :type BufferName:
        :param ReadingBlock:
        :type ReadingBlock:
        """
        return self._dllwrap.LoadTriggerModelLoopUntilEvent(
            self._vi, EventSource, Position, Delay, BufferName, ReadingBlock
        )

    def LoadTriggerModelSortBinning(
        self,
        NumberOfBins,
        Components,
        StartInLine,
        StartDelay,
        EndDelay,
        BufferName,
        AllPassBitPattern,
        LimitHighBufferSize,
        LimitLowBufferSize,
        FailBitPatternBufferSize,
    ):
        """

        :param NumberOfBins:
        :type NumberOfBins:
        :param Components:
        :type Components:
        :param StartInLine:
        :type StartInLine:
        :param StartDelay:
        :type StartDelay:
        :param EndDelay:
        :type EndDelay:
        :param BufferName:
        :type BufferName:
        :param AllPassBitPattern:
        :type AllPassBitPattern:
        :param LimitHighBufferSize:
        :type LimitHighBufferSize:
        :param LimitLowBufferSize:
        :type LimitLowBufferSize:
        :param FailBitPatternBufferSize:
        :type FailBitPatternBufferSize:
        """
        return self._dllwrap.LoadTriggerModelSortBinning(
            self._vi,
            NumberOfBins,
            Components,
            StartInLine,
            StartDelay,
            EndDelay,
            BufferName,
            AllPassBitPattern,
            LimitHighBufferSize,
            LimitLowBufferSize,
            FailBitPatternBufferSize,
        )

    def TriggerModelBlockBranchAlways(self, BlockNumber, BranchPath):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BranchPath:
        :type BranchPath:
        """
        return self._dllwrap.TriggerModelBlockBranchAlways(self._vi, BlockNumber, BranchPath)

    def TriggerModelBlockBranchCounter(self, BlockNumber, TargetCount, BranchPath):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param TargetCount:
        :type TargetCount:
        :param BranchPath:
        :type BranchPath:
        """
        return self._dllwrap.TriggerModelBlockBranchCounter(self._vi, BlockNumber, TargetCount, BranchPath)

    def ReadTriggerModelBlockBranchCounter(self, BlockNumber):
        """

        :param BlockNumber:
        :type BlockNumber:
        """
        return self._dllwrap.ReadTriggerModelBlockBranchCounter(self._vi, BlockNumber)

    def TriggerModelBlockBranchDelta(self, BlockNumber, TargetDifference, BranchPath, MeasureBlock):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param TargetDifference:
        :type TargetDifference:
        :param BranchPath:
        :type BranchPath:
        :param MeasureBlock:
        :type MeasureBlock:
        """
        return self._dllwrap.TriggerModelBlockBranchDelta(
            self._vi, BlockNumber, TargetDifference, BranchPath, MeasureBlock
        )

    def TriggerModelBlockBranchEvent(self, BlockNumber, EventIDBufferSize, EventID, BranchPath):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param EventIDBufferSize:
        :type EventIDBufferSize:
        :param EventID:
        :type EventID:
        :param BranchPath:
        :type BranchPath:
        """
        return self._dllwrap.TriggerModelBlockBranchEvent(self._vi, BlockNumber, EventIDBufferSize, EventID, BranchPath)

    def TriggerModelBlockBranchLimitConstant(self, BlockNumber, LimitType, LimitA, LimitB, BranchPath, MeasureBlock):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param LimitType:
        :type LimitType:
        :param LimitA:
        :type LimitA:
        :param LimitB:
        :type LimitB:
        :param BranchPath:
        :type BranchPath:
        :param MeasureBlock:
        :type MeasureBlock:
        """
        return self._dllwrap.TriggerModelBlockBranchLimitConstant(
            self._vi, BlockNumber, LimitType, LimitA, LimitB, BranchPath, MeasureBlock
        )

    def TriggerModelBlockBranchLimitDynamic(self, BlockNumber, LimitType, LimitNumuber, BranchPath, MeasureBlock):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param LimitType:
        :type LimitType:
        :param LimitNumuber:
        :type LimitNumuber:
        :param BranchPath:
        :type BranchPath:
        :param MeasureBlock:
        :type MeasureBlock:
        """
        return self._dllwrap.TriggerModelBlockBranchLimitDynamic(
            self._vi, BlockNumber, LimitType, LimitNumuber, BranchPath, MeasureBlock
        )

    def TriggerModelBlockBranchOnce(self, BlockNumber, BranchPath):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BranchPath:
        :type BranchPath:
        """
        return self._dllwrap.TriggerModelBlockBranchOnce(self._vi, BlockNumber, BranchPath)

    def TriggerModelBlockBranchOnceExcluded(self, BlockNumber, BranchPath):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BranchPath:
        :type BranchPath:
        """
        return self._dllwrap.TriggerModelBlockBranchOnceExcluded(self._vi, BlockNumber, BranchPath)

    def TriggerModelBlockBufferClear(self, BlockNumber, BufferName):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.TriggerModelBlockBufferClear(self._vi, BlockNumber, BufferName)

    def RecallTriggerModelBlockNextConfiguration(self, BlockNumber, ConfigurationListBufferSize, ConfigurationList):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param ConfigurationListBufferSize:
        :type ConfigurationListBufferSize:
        :param ConfigurationList:
        :type ConfigurationList:
        """
        return self._dllwrap.RecallTriggerModelBlockNextConfiguration(
            self._vi, BlockNumber, ConfigurationListBufferSize, ConfigurationList
        )

    def RecallTriggerModelBlockPreviousConfiguration(self, BlockNumber, ConfigurationListBufferSize, ConfigurationList):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param ConfigurationListBufferSize:
        :type ConfigurationListBufferSize:
        :param ConfigurationList:
        :type ConfigurationList:
        """
        return self._dllwrap.RecallTriggerModelBlockPreviousConfiguration(
            self._vi, BlockNumber, ConfigurationListBufferSize, ConfigurationList
        )

    def RecallTriggerModelBlockConfiguration(self, BlockNumber, ConfigurationListBufferSize, ConfigurationList, Point):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param ConfigurationListBufferSize:
        :type ConfigurationListBufferSize:
        :param ConfigurationList:
        :type ConfigurationList:
        :param Point:
        :type Point:
        """
        return self._dllwrap.RecallTriggerModelBlockConfiguration(
            self._vi, BlockNumber, ConfigurationListBufferSize, ConfigurationList, Point
        )

    def TriggerModelBlockConstantDelay(self, BlockNumber, Time):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param Time:
        :type Time:
        """
        return self._dllwrap.TriggerModelBlockConstantDelay(self._vi, BlockNumber, Time)

    def TriggerModelBlockDelayDynamic(self, BlockNumber, UserDelayType, UserDelayNumber):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param UserDelayType:
        :type UserDelayType:
        :param UserDelayNumber:
        :type UserDelayNumber:
        """
        return self._dllwrap.TriggerModelBlockDelayDynamic(self._vi, BlockNumber, UserDelayType, UserDelayNumber)

    def TriggerModelBlockConfigureDigitalIO(self, BlockNumber, BitPattern, BitMask):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BitPattern:
        :type BitPattern:
        :param BitMask:
        :type BitMask:
        """
        return self._dllwrap.TriggerModelBlockConfigureDigitalIO(self._vi, BlockNumber, BitPattern, BitMask)

    def TriggerModelBlockMeasure(self, BlockNumber, BufferName):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.TriggerModelBlockMeasure(self._vi, BlockNumber, BufferName)

    def TriggerModelBlockNotify(self, BlockNumber, NotifyID):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param NotifyID:
        :type NotifyID:
        """
        return self._dllwrap.TriggerModelBlockNotify(self._vi, BlockNumber, NotifyID)

    def TriggerModelBlockWait(
        self,
        BlockNumber,
        Event1BufferSize,
        Event1,
        StimulusAction,
        Logic,
        Event2BufferSize,
        Event2,
        Event3BufferSize,
        Event3,
    ):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param Event1BufferSize:
        :type Event1BufferSize:
        :param Event1:
        :type Event1:
        :param StimulusAction:
        :type StimulusAction:
        :param Logic:
        :type Logic:
        :param Event2BufferSize:
        :type Event2BufferSize:
        :param Event2:
        :type Event2:
        :param Event3BufferSize:
        :type Event3BufferSize:
        :param Event3:
        :type Event3:
        """
        return self._dllwrap.TriggerModelBlockWait(
            self._vi,
            BlockNumber,
            Event1BufferSize,
            Event1,
            StimulusAction,
            Logic,
            Event2BufferSize,
            Event2,
            Event3BufferSize,
            Event3,
        )

    def TriggerModelBlockLogEvent(self, BlockNumber, EventBufferSize, Event, MessageBufferSize, Message):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param EventBufferSize:
        :type EventBufferSize:
        :param Event:
        :type Event:
        :param MessageBufferSize:
        :type MessageBufferSize:
        :param Message:
        :type Message:
        """
        return self._dllwrap.TriggerModelBlockLogEvent(
            self._vi, BlockNumber, EventBufferSize, Event, MessageBufferSize, Message
        )

    def TriggerModelBlockNoOperation(self, BlockNumber):
        """

        :param BlockNumber:
        :type BlockNumber:
        """
        return self._dllwrap.TriggerModelBlockNoOperation(self._vi, BlockNumber)

    def ResetTriggerModelBlockBranchCounter(self, BlockNumber, Counter):
        """

        :param BlockNumber:
        :type BlockNumber:
        :param Counter:
        :type Counter:
        """
        return self._dllwrap.ResetTriggerModelBlockBranchCounter(self._vi, BlockNumber, Counter)

    def ClearBlenderTrigger(self, BlenderNumber):
        """

        :param BlenderNumber:
        :type BlenderNumber:
        """
        return self._dllwrap.ClearBlenderTrigger(self._vi, BlenderNumber)

    def GetBlenderTriggerOverRun(self, BlenderNumber):
        """

        :param BlenderNumber:
        :type BlenderNumber:
        """
        return self._dllwrap.GetBlenderTriggerOverRun(self._vi, BlenderNumber)

    def GetBlenderTriggerMode(self, BlenderNumber):
        """

        :param BlenderNumber:
        :type BlenderNumber:
        """
        return self._dllwrap.GetBlenderTriggerMode(self._vi, BlenderNumber)

    def GetBlenderTriggerStimulus(self, BlenderNumber, StimulusNumber, BlenderStimulusBufferSize):
        """

        :param BlenderNumber:
        :type BlenderNumber:
        :param StimulusNumber:
        :type StimulusNumber:
        :param BlenderStimulusBufferSize:
        :type BlenderStimulusBufferSize:
        """
        return self._dllwrap.GetBlenderTriggerStimulus(
            self._vi, BlenderNumber, StimulusNumber, BlenderStimulusBufferSize
        )

    def SetBlenderTriggerMode(self, BlenderNumber, BlenderMode):
        """

        :param BlenderNumber:
        :type BlenderNumber:
        :param BlenderMode:
        :type BlenderMode:
        """
        return self._dllwrap.SetBlenderTriggerMode(self._vi, BlenderNumber, BlenderMode)

    def SetBlenderTriggerStimulus(self, BlenderNumber, StimulusNumber, BlenderStimulus):
        """

        :param BlenderNumber:
        :type BlenderNumber:
        :param StimulusNumber:
        :type StimulusNumber:
        :param BlenderStimulus:
        :type BlenderStimulus:
        """
        return self._dllwrap.SetBlenderTriggerStimulus(self._vi, BlenderNumber, StimulusNumber, BlenderStimulus)

    def ClearExternalTrigger(self):
        """"""
        return self._dllwrap.ClearExternalTrigger(self._vi)

    def GetExternalTriggerMode(self):
        """"""
        return self._dllwrap.GetExternalTriggerMode(self._vi)

    def SetExternalTriggerMode(self, Mode):
        """

        :param Mode:
        :type Mode:
        """
        return self._dllwrap.SetExternalTriggerMode(self._vi, Mode)

    def GetExternalTriggerOutputLogic(self):
        """"""
        return self._dllwrap.GetExternalTriggerOutputLogic(self._vi)

    def SetExternalTriggerOutputLogic(self, OutputLogic):
        """

        :param OutputLogic:
        :type OutputLogic:
        """
        return self._dllwrap.SetExternalTriggerOutputLogic(self._vi, OutputLogic)

    def GetExternalTriggerOutputStimulus(self, OutputStimulusBufferSize):
        """

        :param OutputStimulusBufferSize:
        :type OutputStimulusBufferSize:
        """
        return self._dllwrap.GetExternalTriggerOutputStimulus(self._vi, OutputStimulusBufferSize)

    def SetExternalTriggerOutputStimulus(self, OutputStimulus):
        """

        :param OutputStimulus:
        :type OutputStimulus:
        """
        return self._dllwrap.SetExternalTriggerOutputStimulus(self._vi, OutputStimulus)

    def GetExternalTriggerOverRunStatus(self):
        """"""
        return self._dllwrap.GetExternalTriggerOverRunStatus(self._vi)

    def DisplayClear(self):
        """"""
        return self._dllwrap.DisplayClear(self._vi)

    def DisplayMessage(self, LineNumber, TextMessageBufferSize, TextMessage):
        """

        :param LineNumber:
        :type LineNumber:
        :param TextMessageBufferSize:
        :type TextMessageBufferSize:
        :param TextMessage:
        :type TextMessage:
        """
        return self._dllwrap.DisplayMessage(self._vi, LineNumber, TextMessageBufferSize, TextMessage)

    def GetDisplayResolution(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDisplayResolution(self._vi, Function)

    def SetDisplayResolution(self, Function, Resolution):
        """

        :param Function:
        :type Function:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.SetDisplayResolution(self._vi, Function, Resolution)

    def GetDigitizerDisplayResolution(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerDisplayResolution(self._vi, Function)

    def SetDigitizerDisplayResolution(self, Function, DigitizerResolution):
        """

        :param Function:
        :type Function:
        :param DigitizerResolution:
        :type DigitizerResolution:
        """
        return self._dllwrap.SetDigitizerDisplayResolution(self._vi, Function, DigitizerResolution)

    def ConfigureDigitalLineMode(self, LineNumber, TriggerType, LineState):
        """

        :param LineNumber:
        :type LineNumber:
        :param TriggerType:
        :type TriggerType:
        :param LineState:
        :type LineState:
        """
        return self._dllwrap.ConfigureDigitalLineMode(self._vi, LineNumber, TriggerType, LineState)

    def DigitalRead(self):
        """"""
        return self._dllwrap.DigitalRead(self._vi)

    def DigitalWrite(self, Value):
        """

        :param Value:
        :type Value:
        """
        return self._dllwrap.DigitalWrite(self._vi, Value)

    def ReadDigitalLineMode(self, LineNumber):
        """

        :param LineNumber:
        :type LineNumber:
        """
        return self._dllwrap.ReadDigitalLineMode(self._vi, LineNumber)

    def GetDigitalLineState(self, LineNumber):
        """

        :param LineNumber:
        :type LineNumber:
        """
        return self._dllwrap.GetDigitalLineState(self._vi, LineNumber)

    def SetDigitalLineState(self, LineNumber, LineState):
        """

        :param LineNumber:
        :type LineNumber:
        :param LineState:
        :type LineState:
        """
        return self._dllwrap.SetDigitalLineState(self._vi, LineNumber, LineState)

    def Read2(self, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize):
        """

        :param BufferName:
        :type BufferName:
        :param BufferElementsBufferSize:
        :type BufferElementsBufferSize:
        :param BufferElements:
        :type BufferElements:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.Read2(self._vi, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize)

    def Measure(
        self,
        Function,
        BufferName,
        BufferElementsBufferSize,
        BufferElements,
        ValBufferSize,
    ):
        """

        :param Function:
        :type Function:
        :param BufferName:
        :type BufferName:
        :param BufferElementsBufferSize:
        :type BufferElementsBufferSize:
        :param BufferElements:
        :type BufferElements:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.Measure(
            self._vi,
            Function,
            BufferName,
            BufferElementsBufferSize,
            BufferElements,
            ValBufferSize,
        )

    def AutoZeroOnce(self):
        """"""
        return self._dllwrap.AutoZeroOnce(self._vi)

    def GetFunctionnplc(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetFunctionnplc(self._vi, Function)

    def SetFunctionnplc(self, Function, FunctionNPLC):
        """

        :param Function:
        :type Function:
        :param FunctionNPLC:
        :type FunctionNPLC:
        """
        return self._dllwrap.SetFunctionnplc(self._vi, Function, FunctionNPLC)

    def GetAutoRange(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAutoRange(self._vi, Function)

    def SetAutoRange(self, Function, AutoRange):
        """

        :param Function:
        :type Function:
        :param AutoRange:
        :type AutoRange:
        """
        return self._dllwrap.SetAutoRange(self._vi, Function, AutoRange)

    def GetRange(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetRange(self._vi, Function)

    def SetRange(self, Function, Range):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        """
        return self._dllwrap.SetRange(self._vi, Function, Range)

    def GetUserDelay(self, Function, UserDelayIndex):
        """

        :param Function:
        :type Function:
        :param UserDelayIndex:
        :type UserDelayIndex:
        """
        return self._dllwrap.GetUserDelay(self._vi, Function, UserDelayIndex)

    def SetUserDelay(self, Function, UserDelayIndex, UserDelay):
        """

        :param Function:
        :type Function:
        :param UserDelayIndex:
        :type UserDelayIndex:
        :param UserDelay:
        :type UserDelay:
        """
        return self._dllwrap.SetUserDelay(self._vi, Function, UserDelayIndex, UserDelay)

    def GetVoltageUnits(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetVoltageUnits(self._vi, Function)

    def SetVoltageUnits(self, Function, VoltageUnits):
        """

        :param Function:
        :type Function:
        :param VoltageUnits:
        :type VoltageUnits:
        """
        return self._dllwrap.SetVoltageUnits(self._vi, Function, VoltageUnits)

    def GetAutoDelay(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAutoDelay(self._vi, Function)

    def SetAutoDelay(self, Function, AutoDelay):
        """

        :param Function:
        :type Function:
        :param AutoDelay:
        :type AutoDelay:
        """
        return self._dllwrap.SetAutoDelay(self._vi, Function, AutoDelay)

    def GetBiasLevel(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetBiasLevel(self._vi, Function)

    def SetBiasLevel(self, Function, Level):
        """

        :param Function:
        :type Function:
        :param Level:
        :type Level:
        """
        return self._dllwrap.SetBiasLevel(self._vi, Function, Level)

    def GetDetectorBandwidth(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDetectorBandwidth(self._vi, Function)

    def SetDetectorBandwidth(self, Function, DetectorBandwidth):
        """

        :param Function:
        :type Function:
        :param DetectorBandwidth:
        :type DetectorBandwidth:
        """
        return self._dllwrap.SetDetectorBandwidth(self._vi, Function, DetectorBandwidth)

    def GetDbReference(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDbReference(self._vi, Function)

    def SetDbReference(self, Function, DBReference):
        """

        :param Function:
        :type Function:
        :param DBReference:
        :type DBReference:
        """
        return self._dllwrap.SetDbReference(self._vi, Function, DBReference)

    def GetAutoZeroEnabled(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAutoZeroEnabled(self._vi, Function)

    def SetAutoZeroEnabled(self, Function, AutoZeroEnabled):
        """

        :param Function:
        :type Function:
        :param AutoZeroEnabled:
        :type AutoZeroEnabled:
        """
        return self._dllwrap.SetAutoZeroEnabled(self._vi, Function, AutoZeroEnabled)

    def GetLineSync(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetLineSync(self._vi, Function)

    def SetLineSync(self, Function, LineSync):
        """

        :param Function:
        :type Function:
        :param LineSync:
        :type LineSync:
        """
        return self._dllwrap.SetLineSync(self._vi, Function, LineSync)

    def GetAperture(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetAperture(self._vi, Function)

    def SetAperture(self, Function, Aperture):
        """

        :param Function:
        :type Function:
        :param Aperture:
        :type Aperture:
        """
        return self._dllwrap.SetAperture(self._vi, Function, Aperture)

    def GetFreqPeriodThresholdVoltageRange(self, FreqPeriod):
        """

        :param FreqPeriod:
        :type FreqPeriod:
        """
        return self._dllwrap.GetFreqPeriodThresholdVoltageRange(self._vi, FreqPeriod)

    def SetFreqPeriodThresholdVoltageRange(self, FreqPeriod, FreqPeriodThresholdVoltageRange):
        """

        :param FreqPeriod:
        :type FreqPeriod:
        :param FreqPeriodThresholdVoltageRange:
        :type FreqPeriodThresholdVoltageRange:
        """
        return self._dllwrap.SetFreqPeriodThresholdVoltageRange(self._vi, FreqPeriod, FreqPeriodThresholdVoltageRange)

    def GetFreqPeriodThresholdVoltageRangeAutoState(self, FreqPeriod):
        """

        :param FreqPeriod:
        :type FreqPeriod:
        """
        return self._dllwrap.GetFreqPeriodThresholdVoltageRangeAutoState(self._vi, FreqPeriod)

    def SetFreqPeriodThresholdVoltageRangeAutoState(self, FreqPeriod, FreqPeriodThresholdVoltageRangeAutoState):
        """

        :param FreqPeriod:
        :type FreqPeriod:
        :param FreqPeriodThresholdVoltageRangeAutoState:
        :type FreqPeriodThresholdVoltageRangeAutoState:
        """
        return self._dllwrap.SetFreqPeriodThresholdVoltageRangeAutoState(
            self._vi, FreqPeriod, FreqPeriodThresholdVoltageRangeAutoState
        )

    def GetFreqPeriodThresholdVoltageLevel(self, FreqPeriod):
        """

        :param FreqPeriod:
        :type FreqPeriod:
        """
        return self._dllwrap.GetFreqPeriodThresholdVoltageLevel(self._vi, FreqPeriod)

    def SetFreqPeriodThresholdVoltageLevel(self, FreqPeriod, FreqPeriodThresholdVoltageLevel):
        """

        :param FreqPeriod:
        :type FreqPeriod:
        :param FreqPeriodThresholdVoltageLevel:
        :type FreqPeriodThresholdVoltageLevel:
        """
        return self._dllwrap.SetFreqPeriodThresholdVoltageLevel(self._vi, FreqPeriod, FreqPeriodThresholdVoltageLevel)

    def GetOpenDetector(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetOpenDetector(self._vi, Function)

    def SetOpenDetector(self, Function, OpenDetector):
        """

        :param Function:
        :type Function:
        :param OpenDetector:
        :type OpenDetector:
        """
        return self._dllwrap.SetOpenDetector(self._vi, Function, OpenDetector)

    def GetOffsetCompensationEnabled(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetOffsetCompensationEnabled(self._vi, Function)

    def SetOffsetCompensationEnabled(self, Function, OffsetCompensationEnabled):
        """

        :param Function:
        :type Function:
        :param OffsetCompensationEnabled:
        :type OffsetCompensationEnabled:
        """
        return self._dllwrap.SetOffsetCompensationEnabled(self._vi, Function, OffsetCompensationEnabled)

    def GetMathOperation(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetMathOperation(self._vi, Function)

    def SetMathOperation(self, Function, MathOperation):
        """

        :param Function:
        :type Function:
        :param MathOperation:
        :type MathOperation:
        """
        return self._dllwrap.SetMathOperation(self._vi, Function, MathOperation)

    def GetMathOffsetFactor(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetMathOffsetFactor(self._vi, Function)

    def SetMathOffsetFactor(self, Function, MathOffsetFactor):
        """

        :param Function:
        :type Function:
        :param MathOffsetFactor:
        :type MathOffsetFactor:
        """
        return self._dllwrap.SetMathOffsetFactor(self._vi, Function, MathOffsetFactor)

    def GetMathScaleFactor(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetMathScaleFactor(self._vi, Function)

    def SetMathScaleFactor(self, Function, MathScaleFactor):
        """

        :param Function:
        :type Function:
        :param MathScaleFactor:
        :type MathScaleFactor:
        """
        return self._dllwrap.SetMathScaleFactor(self._vi, Function, MathScaleFactor)

    def GetMathPercent(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetMathPercent(self._vi, Function)

    def SetMathPercent(self, Function, MathPercent):
        """

        :param Function:
        :type Function:
        :param MathPercent:
        :type MathPercent:
        """
        return self._dllwrap.SetMathPercent(self._vi, Function, MathPercent)

    def GetMathOperationState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetMathOperationState(self._vi, Function)

    def SetMathOperationState(self, Function, MathOperationState):
        """

        :param Function:
        :type Function:
        :param MathOperationState:
        :type MathOperationState:
        """
        return self._dllwrap.SetMathOperationState(self._vi, Function, MathOperationState)

    def CreateConfigurationList(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.CreateConfigurationList(self._vi, Name)

    def DeleteConfigurationList(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.DeleteConfigurationList(self._vi, Name)

    def DeleteConfigListIndexData(self, Name, Point):
        """

        :param Name:
        :type Name:
        :param Point:
        :type Point:
        """
        return self._dllwrap.DeleteConfigListIndexData(self._vi, Name, Point)

    def ReadConfigurationList(self, Name, Point, ValBufferSize):
        """

        :param Name:
        :type Name:
        :param Point:
        :type Point:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadConfigurationList(self._vi, Name, Point, ValBufferSize)

    def RecallConfigurationListPoint(self, Name, Point):
        """

        :param Name:
        :type Name:
        :param Point:
        :type Point:
        """
        return self._dllwrap.RecallConfigurationListPoint(self._vi, Name, Point)

    def AppendToConfigurationList(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.AppendToConfigurationList(self._vi, Name)

    def StoreToConfigurationList(self, Name, Point):
        """

        :param Name:
        :type Name:
        :param Point:
        :type Point:
        """
        return self._dllwrap.StoreToConfigurationList(self._vi, Name, Point)

    def GetConfigurationListSize(self, Name):
        """

        :param Name:
        :type Name:
        """
        return self._dllwrap.GetConfigurationListSize(self._vi, Name)

    def GetLimitTestEnabled(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.GetLimitTestEnabled(self._vi, Function, LimitTest)

    def SetLimitTestEnabled(self, Function, LimitTest, Enabled):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.SetLimitTestEnabled(self._vi, Function, LimitTest, Enabled)

    def IsLimitTestFailed(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.IsLimitTestFailed(self._vi, Function, LimitTest)

    def LimitClear(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.LimitClear(self._vi, Function, LimitTest)

    def GetLimitAutoClearState(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.GetLimitAutoClearState(self._vi, Function, LimitTest)

    def SetLimitAutoClearState(self, Function, LimitTest, AutoClearState):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param AutoClearState:
        :type AutoClearState:
        """
        return self._dllwrap.SetLimitAutoClearState(self._vi, Function, LimitTest, AutoClearState)

    def GetUpperLimit(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.GetUpperLimit(self._vi, Function, LimitTest)

    def SetUpperLimit(self, Function, LimitTest, UpperLimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param UpperLimitTest:
        :type UpperLimitTest:
        """
        return self._dllwrap.SetUpperLimit(self._vi, Function, LimitTest, UpperLimitTest)

    def GetLowerLimit(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.GetLowerLimit(self._vi, Function, LimitTest)

    def SetLowerLimit(self, Function, LimitTest, LowerLimit):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param LowerLimit:
        :type LowerLimit:
        """
        return self._dllwrap.SetLowerLimit(self._vi, Function, LimitTest, LowerLimit)

    def GetLimitAudible(self, LimitTest, Function):
        """

        :param LimitTest:
        :type LimitTest:
        :param Function:
        :type Function:
        """
        return self._dllwrap.GetLimitAudible(self._vi, LimitTest, Function)

    def SetLimitAudible(self, LimitTest, Function, Audible):
        """

        :param LimitTest:
        :type LimitTest:
        :param Function:
        :type Function:
        :param Audible:
        :type Audible:
        """
        return self._dllwrap.SetLimitAudible(self._vi, LimitTest, Function, Audible)

    def ConfigureSimulatedRefJunction(self, FixedRefJunction):
        """

        :param FixedRefJunction:
        :type FixedRefJunction:
        """
        return self._dllwrap.ConfigureSimulatedRefJunction(self._vi, FixedRefJunction)

    def ConfigureTransducerType2(self, TransducerType):
        """

        :param TransducerType:
        :type TransducerType:
        """
        return self._dllwrap.ConfigureTransducerType2(self._vi, TransducerType)

    def ConfigureThermistor2(self, Resistance):
        """

        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.ConfigureThermistor2(self._vi, Resistance)

    def GetRtdType(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.GetRtdType(self._vi, Type)

    def SetRtdType(self, Type, RTDType):
        """

        :param Type:
        :type Type:
        :param RTDType:
        :type RTDType:
        """
        return self._dllwrap.SetRtdType(self._vi, Type, RTDType)

    def ConfigureRTDUserDefinedType(self, Constant, Value, Type):
        """

        :param Constant:
        :type Constant:
        :param Value:
        :type Value:
        :param Type:
        :type Type:
        """
        return self._dllwrap.ConfigureRTDUserDefinedType(self._vi, Constant, Value, Type)

    def ReadRTDConstants(self, Constant):
        """

        :param Constant:
        :type Constant:
        """
        return self._dllwrap.ReadRTDConstants(self._vi, Constant)

    def GetATrigEdgeLevel(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetATrigEdgeLevel(self._vi, Function)

    def SetATrigEdgeLevel(self, Function, EdgeLevel):
        """

        :param Function:
        :type Function:
        :param EdgeLevel:
        :type EdgeLevel:
        """
        return self._dllwrap.SetATrigEdgeLevel(self._vi, Function, EdgeLevel)

    def GetATrigEdgeSlope(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetATrigEdgeSlope(self._vi, Function)

    def SetATrigEdgeSlope(self, Function, EdgeSlope):
        """

        :param Function:
        :type Function:
        :param EdgeSlope:
        :type EdgeSlope:
        """
        return self._dllwrap.SetATrigEdgeSlope(self._vi, Function, EdgeSlope)

    def GetATrigMode(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetATrigMode(self._vi, Function)

    def SetATrigMode(self, Function, Mode):
        """

        :param Function:
        :type Function:
        :param Mode:
        :type Mode:
        """
        return self._dllwrap.SetATrigMode(self._vi, Function, Mode)

    def GetATrigPulseCondition(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetATrigPulseCondition(self._vi, Function)

    def SetATrigPulseCondition(self, Function, PulseCondition):
        """

        :param Function:
        :type Function:
        :param PulseCondition:
        :type PulseCondition:
        """
        return self._dllwrap.SetATrigPulseCondition(self._vi, Function, PulseCondition)

    def GetATrigPulseLevel(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetATrigPulseLevel(self._vi, Function)

    def SetATrigPulseLevel(self, Function, PulseLevel):
        """

        :param Function:
        :type Function:
        :param PulseLevel:
        :type PulseLevel:
        """
        return self._dllwrap.SetATrigPulseLevel(self._vi, Function, PulseLevel)

    def GetATrigPulsePolarity(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetATrigPulsePolarity(self._vi, Function)

    def SetATrigPulsePolarity(self, Function, PulsePolarity):
        """

        :param Function:
        :type Function:
        :param PulsePolarity:
        :type PulsePolarity:
        """
        return self._dllwrap.SetATrigPulsePolarity(self._vi, Function, PulsePolarity)

    def GetATrigPulseWidth(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetATrigPulseWidth(self._vi, Function)

    def SetATrigPulseWidth(self, Function, PulseWidth):
        """

        :param Function:
        :type Function:
        :param PulseWidth:
        :type PulseWidth:
        """
        return self._dllwrap.SetATrigPulseWidth(self._vi, Function, PulseWidth)

    def GetATrigWindowDirection(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetATrigWindowDirection(self._vi, Function)

    def SetATrigWindowDirection(self, Function, WindowDirection):
        """

        :param Function:
        :type Function:
        :param WindowDirection:
        :type WindowDirection:
        """
        return self._dllwrap.SetATrigWindowDirection(self._vi, Function, WindowDirection)

    def GetATrigWindowLevelHigh(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetATrigWindowLevelHigh(self._vi, Function)

    def SetATrigWindowLevelHigh(self, Function, WindowLevelHigh):
        """

        :param Function:
        :type Function:
        :param WindowLevelHigh:
        :type WindowLevelHigh:
        """
        return self._dllwrap.SetATrigWindowLevelHigh(self._vi, Function, WindowLevelHigh)

    def GetATrigWindowLevelLow(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetATrigWindowLevelLow(self._vi, Function)

    def SetATrigWindowLevelLow(self, Function, WindowLevelLow):
        """

        :param Function:
        :type Function:
        :param WindowLevelLow:
        :type WindowLevelLow:
        """
        return self._dllwrap.SetATrigWindowLevelLow(self._vi, Function, WindowLevelLow)

    def GetATrigHighFreqRejectState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetATrigHighFreqRejectState(self._vi, Function)

    def SetATrigHighFreqRejectState(self, Function, HighFreqRejectState):
        """

        :param Function:
        :type Function:
        :param HighFreqRejectState:
        :type HighFreqRejectState:
        """
        return self._dllwrap.SetATrigHighFreqRejectState(self._vi, Function, HighFreqRejectState)

    def GetFilterCount(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetFilterCount(self._vi, Function)

    def SetFilterCount(self, Function, AveragingFilterCount):
        """

        :param Function:
        :type Function:
        :param AveragingFilterCount:
        :type AveragingFilterCount:
        """
        return self._dllwrap.SetFilterCount(self._vi, Function, AveragingFilterCount)

    def GetFilterState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetFilterState(self._vi, Function)

    def SetFilterState(self, Function, AveragingFilterState):
        """

        :param Function:
        :type Function:
        :param AveragingFilterState:
        :type AveragingFilterState:
        """
        return self._dllwrap.SetFilterState(self._vi, Function, AveragingFilterState)

    def GetFilterType(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetFilterType(self._vi, Function)

    def SetFilterType(self, Function, AveragingFilterType):
        """

        :param Function:
        :type Function:
        :param AveragingFilterType:
        :type AveragingFilterType:
        """
        return self._dllwrap.SetFilterType(self._vi, Function, AveragingFilterType)

    def GetFilterWindow(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetFilterWindow(self._vi, Function)

    def SetFilterWindow(self, Function, FilterWindow):
        """

        :param Function:
        :type Function:
        :param FilterWindow:
        :type FilterWindow:
        """
        return self._dllwrap.SetFilterWindow(self._vi, Function, FilterWindow)

    def SetRelativeOffset(self, Function, RelativeOffset):
        """

        :param Function:
        :type Function:
        :param RelativeOffset:
        :type RelativeOffset:
        """
        return self._dllwrap.SetRelativeOffset(self._vi, Function, RelativeOffset)

    def SetRelativeOffsetState(self, Function, RelativeOffsetState):
        """

        :param Function:
        :type Function:
        :param RelativeOffsetState:
        :type RelativeOffsetState:
        """
        return self._dllwrap.SetRelativeOffsetState(self._vi, Function, RelativeOffsetState)

    def GetRelativeOffset(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetRelativeOffset(self._vi, Function)

    def GetRelativeOffsetState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetRelativeOffsetState(self._vi, Function)

    def RelativeAcquire(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.RelativeAcquire(self._vi, Function)

    def DigitizerMeasure(
        self,
        Function,
        BufferName,
        BufferElementsBufferSize,
        BufferElements,
        ValBufferSize,
    ):
        """

        :param Function:
        :type Function:
        :param BufferName:
        :type BufferName:
        :param BufferElementsBufferSize:
        :type BufferElementsBufferSize:
        :param BufferElements:
        :type BufferElements:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.DigitizerMeasure(
            self._vi,
            Function,
            BufferName,
            BufferElementsBufferSize,
            BufferElements,
            ValBufferSize,
        )

    def DigitizerRead(self, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize):
        """

        :param BufferName:
        :type BufferName:
        :param BufferElementsBufferSize:
        :type BufferElementsBufferSize:
        :param BufferElements:
        :type BufferElements:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.DigitizerRead(
            self._vi, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize
        )

    def GetDigitizerRange(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerRange(self._vi, Function)

    def SetDigitizerRange(self, Function, Range):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        """
        return self._dllwrap.SetDigitizerRange(self._vi, Function, Range)

    def GetDigitizerUserDelay(self, Function, UserDelayIndex):
        """

        :param Function:
        :type Function:
        :param UserDelayIndex:
        :type UserDelayIndex:
        """
        return self._dllwrap.GetDigitizerUserDelay(self._vi, Function, UserDelayIndex)

    def SetDigitizerUserDelay(self, Function, UserDelayIndex, UserDelay):
        """

        :param Function:
        :type Function:
        :param UserDelayIndex:
        :type UserDelayIndex:
        :param UserDelay:
        :type UserDelay:
        """
        return self._dllwrap.SetDigitizerUserDelay(self._vi, Function, UserDelayIndex, UserDelay)

    def GetDigitizerAperture(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerAperture(self._vi, Function)

    def SetDigitizerAperture(self, Function, Aperture):
        """

        :param Function:
        :type Function:
        :param Aperture:
        :type Aperture:
        """
        return self._dllwrap.SetDigitizerAperture(self._vi, Function, Aperture)

    def GetDigitizerSampleRate(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerSampleRate(self._vi, Function)

    def SetDigitizerSampleRate(self, Function, SampleRate):
        """

        :param Function:
        :type Function:
        :param SampleRate:
        :type SampleRate:
        """
        return self._dllwrap.SetDigitizerSampleRate(self._vi, Function, SampleRate)

    def GetDigitizerCouplingType(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerCouplingType(self._vi, Function)

    def SetDigitizerCouplingType(self, Function, CouplingType):
        """

        :param Function:
        :type Function:
        :param CouplingType:
        :type CouplingType:
        """
        return self._dllwrap.SetDigitizerCouplingType(self._vi, Function, CouplingType)

    def GetDigitizerCouplingacFilterType(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerCouplingacFilterType(self._vi, Function)

    def SetDigitizerCouplingacFilterType(self, Function, CouplingACFilterType):
        """

        :param Function:
        :type Function:
        :param CouplingACFilterType:
        :type CouplingACFilterType:
        """
        return self._dllwrap.SetDigitizerCouplingacFilterType(self._vi, Function, CouplingACFilterType)

    def GetDigitizerCouplingacFrequency(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerCouplingacFrequency(self._vi, Function)

    def SetDigitizerCouplingacFrequency(self, Function, CouplingACFrequency):
        """

        :param Function:
        :type Function:
        :param CouplingACFrequency:
        :type CouplingACFrequency:
        """
        return self._dllwrap.SetDigitizerCouplingacFrequency(self._vi, Function, CouplingACFrequency)

    def GetDigitizerMathOperation(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerMathOperation(self._vi, Function)

    def SetDigitizerMathOperation(self, Function, MathOperation):
        """

        :param Function:
        :type Function:
        :param MathOperation:
        :type MathOperation:
        """
        return self._dllwrap.SetDigitizerMathOperation(self._vi, Function, MathOperation)

    def GetDigitizerMathOffsetFactor(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerMathOffsetFactor(self._vi, Function)

    def SetDigitizerMathOffsetFactor(self, Function, MathOffsetFactor):
        """

        :param Function:
        :type Function:
        :param MathOffsetFactor:
        :type MathOffsetFactor:
        """
        return self._dllwrap.SetDigitizerMathOffsetFactor(self._vi, Function, MathOffsetFactor)

    def GetDigitizerMathScaleFactor(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerMathScaleFactor(self._vi, Function)

    def SetDigitizerMathScaleFactor(self, Function, MathScaleFactor):
        """

        :param Function:
        :type Function:
        :param MathScaleFactor:
        :type MathScaleFactor:
        """
        return self._dllwrap.SetDigitizerMathScaleFactor(self._vi, Function, MathScaleFactor)

    def GetDigitizerMathPercent(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerMathPercent(self._vi, Function)

    def SetDigitizerMathPercent(self, Function, MathPercent):
        """

        :param Function:
        :type Function:
        :param MathPercent:
        :type MathPercent:
        """
        return self._dllwrap.SetDigitizerMathPercent(self._vi, Function, MathPercent)

    def GetDigitizerMathOperationState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerMathOperationState(self._vi, Function)

    def SetDigitizerMathOperationState(self, Function, MathOperationState):
        """

        :param Function:
        :type Function:
        :param MathOperationState:
        :type MathOperationState:
        """
        return self._dllwrap.SetDigitizerMathOperationState(self._vi, Function, MathOperationState)

    def IsDigitizerLimitTestFailed(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.IsDigitizerLimitTestFailed(self._vi, Function, LimitTest)

    def DigitizerConfigurationLimitClear(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.DigitizerConfigurationLimitClear(self._vi, Function, LimitTest)

    def GetDigitizerLimitTestEnabled(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.GetDigitizerLimitTestEnabled(self._vi, Function, LimitTest)

    def SetDigitizerLimitTestEnabled(self, Function, LimitTest, Enabled):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.SetDigitizerLimitTestEnabled(self._vi, Function, LimitTest, Enabled)

    def GetDigitizerLimitAutoClearState(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.GetDigitizerLimitAutoClearState(self._vi, Function, LimitTest)

    def SetDigitizerLimitAutoClearState(self, Function, LimitTest, AutoClearState):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param AutoClearState:
        :type AutoClearState:
        """
        return self._dllwrap.SetDigitizerLimitAutoClearState(self._vi, Function, LimitTest, AutoClearState)

    def GetDigitizerUpperLimit(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.GetDigitizerUpperLimit(self._vi, Function, LimitTest)

    def SetDigitizerUpperLimit(self, Function, LimitTest, UpperLimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param UpperLimitTest:
        :type UpperLimitTest:
        """
        return self._dllwrap.SetDigitizerUpperLimit(self._vi, Function, LimitTest, UpperLimitTest)

    def GetDigitizerLowerLimit(self, Function, LimitTest):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        """
        return self._dllwrap.GetDigitizerLowerLimit(self._vi, Function, LimitTest)

    def SetDigitizerLowerLimit(self, Function, LimitTest, LowerLimit):
        """

        :param Function:
        :type Function:
        :param LimitTest:
        :type LimitTest:
        :param LowerLimit:
        :type LowerLimit:
        """
        return self._dllwrap.SetDigitizerLowerLimit(self._vi, Function, LimitTest, LowerLimit)

    def GetDigitizerLimitAudible(self, LimitTest, Function):
        """

        :param LimitTest:
        :type LimitTest:
        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerLimitAudible(self._vi, LimitTest, Function)

    def SetDigitizerLimitAudible(self, LimitTest, Function, Audible):
        """

        :param LimitTest:
        :type LimitTest:
        :param Function:
        :type Function:
        :param Audible:
        :type Audible:
        """
        return self._dllwrap.SetDigitizerLimitAudible(self._vi, LimitTest, Function, Audible)

    def GetDigitizerATrigEdgeLevel(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerATrigEdgeLevel(self._vi, Function)

    def SetDigitizerATrigEdgeLevel(self, Function, EdgeLevel):
        """

        :param Function:
        :type Function:
        :param EdgeLevel:
        :type EdgeLevel:
        """
        return self._dllwrap.SetDigitizerATrigEdgeLevel(self._vi, Function, EdgeLevel)

    def GetDigitizerATrigEdgeSlope(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerATrigEdgeSlope(self._vi, Function)

    def SetDigitizerATrigEdgeSlope(self, Function, EdgeSlope):
        """

        :param Function:
        :type Function:
        :param EdgeSlope:
        :type EdgeSlope:
        """
        return self._dllwrap.SetDigitizerATrigEdgeSlope(self._vi, Function, EdgeSlope)

    def GetDigitizerATrigMode(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerATrigMode(self._vi, Function)

    def SetDigitizerATrigMode(self, Function, Mode):
        """

        :param Function:
        :type Function:
        :param Mode:
        :type Mode:
        """
        return self._dllwrap.SetDigitizerATrigMode(self._vi, Function, Mode)

    def GetDigitizerATrigPulseCondition(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerATrigPulseCondition(self._vi, Function)

    def SetDigitizerATrigPulseCondition(self, Function, PulseCondition):
        """

        :param Function:
        :type Function:
        :param PulseCondition:
        :type PulseCondition:
        """
        return self._dllwrap.SetDigitizerATrigPulseCondition(self._vi, Function, PulseCondition)

    def GetDigitizerATrigPulseLevel(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerATrigPulseLevel(self._vi, Function)

    def SetDigitizerATrigPulseLevel(self, Function, PulseLevel):
        """

        :param Function:
        :type Function:
        :param PulseLevel:
        :type PulseLevel:
        """
        return self._dllwrap.SetDigitizerATrigPulseLevel(self._vi, Function, PulseLevel)

    def GetDigitizerATrigPulsePolarity(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerATrigPulsePolarity(self._vi, Function)

    def SetDigitizerATrigPulsePolarity(self, Function, PulsePolarity):
        """

        :param Function:
        :type Function:
        :param PulsePolarity:
        :type PulsePolarity:
        """
        return self._dllwrap.SetDigitizerATrigPulsePolarity(self._vi, Function, PulsePolarity)

    def GetDigitizerATrigPulseWidth(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerATrigPulseWidth(self._vi, Function)

    def SetDigitizerATrigPulseWidth(self, Function, PulseWidth):
        """

        :param Function:
        :type Function:
        :param PulseWidth:
        :type PulseWidth:
        """
        return self._dllwrap.SetDigitizerATrigPulseWidth(self._vi, Function, PulseWidth)

    def GetDigitizerATrigWindowDirection(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerATrigWindowDirection(self._vi, Function)

    def SetDigitizerATrigWindowDirection(self, Function, WindowDirection):
        """

        :param Function:
        :type Function:
        :param WindowDirection:
        :type WindowDirection:
        """
        return self._dllwrap.SetDigitizerATrigWindowDirection(self._vi, Function, WindowDirection)

    def GetDigitizerATrigWindowLevelHigh(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerATrigWindowLevelHigh(self._vi, Function)

    def SetDigitizerATrigWindowLevelHigh(self, Function, WindowLevelHigh):
        """

        :param Function:
        :type Function:
        :param WindowLevelHigh:
        :type WindowLevelHigh:
        """
        return self._dllwrap.SetDigitizerATrigWindowLevelHigh(self._vi, Function, WindowLevelHigh)

    def GetDigitizerATrigWindowLevelLow(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerATrigWindowLevelLow(self._vi, Function)

    def SetDigitizerATrigWindowLevelLow(self, Function, WindowLevelLow):
        """

        :param Function:
        :type Function:
        :param WindowLevelLow:
        :type WindowLevelLow:
        """
        return self._dllwrap.SetDigitizerATrigWindowLevelLow(self._vi, Function, WindowLevelLow)

    def GetDigitizerATrigHighFreqRejectState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerATrigHighFreqRejectState(self._vi, Function)

    def SetDigitizerATrigHighFreqRejectState(self, Function, HighFreqRejectState):
        """

        :param Function:
        :type Function:
        :param HighFreqRejectState:
        :type HighFreqRejectState:
        """
        return self._dllwrap.SetDigitizerATrigHighFreqRejectState(self._vi, Function, HighFreqRejectState)

    def DigitizerRelativeAcquire(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.DigitizerRelativeAcquire(self._vi, Function)

    def GetDigitizerRelativeOffset(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerRelativeOffset(self._vi, Function)

    def GetDigitizerRelativeOffsetState(self, Function):
        """

        :param Function:
        :type Function:
        """
        return self._dllwrap.GetDigitizerRelativeOffsetState(self._vi, Function)

    def SetDigitizerRelativeOffset(self, Function, RelativeOffset):
        """

        :param Function:
        :type Function:
        :param RelativeOffset:
        :type RelativeOffset:
        """
        return self._dllwrap.SetDigitizerRelativeOffset(self._vi, Function, RelativeOffset)

    def SetDigitizerRelativeOffsetState(self, Function, RelativeOffsetState):
        """

        :param Function:
        :type Function:
        :param RelativeOffsetState:
        :type RelativeOffsetState:
        """
        return self._dllwrap.SetDigitizerRelativeOffsetState(self._vi, Function, RelativeOffsetState)

    def AppendBufferDataToFile(self, FileName, BufferName, TimeFormat, Start, End):
        """

        :param FileName:
        :type FileName:
        :param BufferName:
        :type BufferName:
        :param TimeFormat:
        :type TimeFormat:
        :param Start:
        :type Start:
        :param End:
        :type End:
        """
        return self._dllwrap.AppendBufferDataToFile(self._vi, FileName, BufferName, TimeFormat, Start, End)

    def TraceBufferClear(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.TraceBufferClear(self._vi, BufferName)

    def ClearBufferStatistics(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.ClearBufferStatistics(self._vi, BufferName)

    def CreateBuffer(self, BufferName, BufferSize):
        """

        :param BufferName:
        :type BufferName:
        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.CreateBuffer(self._vi, BufferName, BufferSize)

    def DeleteBuffer(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.DeleteBuffer(self._vi, BufferName)

    def BufferFetch(self, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize):
        """

        :param BufferName:
        :type BufferName:
        :param BufferElementsBufferSize:
        :type BufferElementsBufferSize:
        :param BufferElements:
        :type BufferElements:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.BufferFetch(self._vi, BufferName, BufferElementsBufferSize, BufferElements, ValBufferSize)

    def GetBufferDoubleData(self, StartIndex, EndIndex, BufferName, BufferElement, ValBufferSize):
        """

        :param StartIndex:
        :type StartIndex:
        :param EndIndex:
        :type EndIndex:
        :param BufferName:
        :type BufferName:
        :param BufferElement:
        :type BufferElement:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.GetBufferDoubleData(
            self._vi, StartIndex, EndIndex, BufferName, BufferElement, ValBufferSize
        )

    def GetBufferStringData(self, StartIndex, EndIndex, BufferName, BufferElement, ValBufferSize):
        """

        :param StartIndex:
        :type StartIndex:
        :param EndIndex:
        :type EndIndex:
        :param BufferName:
        :type BufferName:
        :param BufferElement:
        :type BufferElement:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.GetBufferStringData(
            self._vi, StartIndex, EndIndex, BufferName, BufferElement, ValBufferSize
        )

    def SaveBufferDataToFile(self, FileName, BufferName, TimeFormat, Start, Stop):
        """

        :param FileName:
        :type FileName:
        :param BufferName:
        :type BufferName:
        :param TimeFormat:
        :type TimeFormat:
        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        """
        return self._dllwrap.SaveBufferDataToFile(self._vi, FileName, BufferName, TimeFormat, Start, Stop)

    def TraceBufferTrigger(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.TraceBufferTrigger(self._vi, BufferName)

    def GetActualBufferReadings(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetActualBufferReadings(self._vi, BufferName)

    def GetBufferFillMode(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetBufferFillMode(self._vi, BufferName)

    def SetBufferFillMode(self, BufferName, BufferFillMode):
        """

        :param BufferName:
        :type BufferName:
        :param BufferFillMode:
        :type BufferFillMode:
        """
        return self._dllwrap.SetBufferFillMode(self._vi, BufferName, BufferFillMode)

    def GetBufferSize(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetBufferSize(self._vi, BufferName)

    def SetBufferSize(self, BufferName, BufferSize):
        """

        :param BufferName:
        :type BufferName:
        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.SetBufferSize(self._vi, BufferName, BufferSize)

    def GetAverageBufferReading(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetAverageBufferReading(self._vi, BufferName)

    def GetBufferMaximumReading(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetBufferMaximumReading(self._vi, BufferName)

    def GetBufferMinimumReading(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetBufferMinimumReading(self._vi, BufferName)

    def GetBufferPeak2PeakReading(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetBufferPeak2PeakReading(self._vi, BufferName)

    def GetStandardDeviationOfBufferBufferReadings(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetStandardDeviationOfBufferBufferReadings(self._vi, BufferName)

    def GetBufferLogStateEnable(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.GetBufferLogStateEnable(self._vi, BufferName)

    def SetBufferLogStateEnable(self, BufferName, LogStateEnable):
        """

        :param BufferName:
        :type BufferName:
        :param LogStateEnable:
        :type LogStateEnable:
        """
        return self._dllwrap.SetBufferLogStateEnable(self._vi, BufferName, LogStateEnable)

    def TraceBufferDigitizerTrigger(self, BufferName):
        """

        :param BufferName:
        :type BufferName:
        """
        return self._dllwrap.TraceBufferDigitizerTrigger(self._vi, BufferName)

    def AutoCalRevert(self):
        """"""
        return self._dllwrap.AutoCalRevert(self._vi)

    def AutoCalRun(self):
        """"""
        return self._dllwrap.AutoCalRun(self._vi)

    def AutoCalSchedule(self, Action, Interval, Hour):
        """

        :param Action:
        :type Action:
        :param Interval:
        :type Interval:
        :param Hour:
        :type Hour:
        """
        return self._dllwrap.AutoCalSchedule(self._vi, Action, Interval, Hour)

    def AutoCalReadSchedule(self):
        """"""
        return self._dllwrap.AutoCalReadSchedule(self._vi)
