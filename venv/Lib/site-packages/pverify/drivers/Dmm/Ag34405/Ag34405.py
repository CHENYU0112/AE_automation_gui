from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .Ag34405_dllwrap import *


class Ag34405(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = Ag34405_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ConfigureMeasurement(self, Function, Range, Resolution):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureMeasurement(self._vi, Function, Range, Resolution)

    def ConfigureFrequencyVoltageRange(self, FrequencyVoltageRange):
        """

        :param FrequencyVoltageRange:
        :type FrequencyVoltageRange:
        """
        return self._dllwrap.ConfigureFrequencyVoltageRange(self._vi, FrequencyVoltageRange)

    def ConfigureACBandwidth(self, MinFreq, MaxFreq):
        """

        :param MinFreq:
        :type MinFreq:
        :param MaxFreq:
        :type MaxFreq:
        """
        return self._dllwrap.ConfigureACBandwidth(self._vi, MinFreq, MaxFreq)

    def ConfigureTransducerType(self, TransducerType):
        """

        :param TransducerType:
        :type TransducerType:
        """
        return self._dllwrap.ConfigureTransducerType(self._vi, TransducerType)

    def ConfigureThermistor(self, Resistance):
        """

        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.ConfigureThermistor(self._vi, Resistance)

    def ConfigureTrigger(self, TriggerSource, TriggerDelay):
        """

        :param TriggerSource:
        :type TriggerSource:
        :param TriggerDelay:
        :type TriggerDelay:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, TriggerSource, TriggerDelay)

    def Read(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Read(self._vi, MaxTimeMilliseconds)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def Fetch(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Fetch(self._vi, MaxTimeMilliseconds)

    def Initiate(self):
        """"""
        return self._dllwrap.Initiate(self._vi)

    def IsOverRange(self, MeasurementValue):
        """

        :param MeasurementValue:
        :type MeasurementValue:
        """
        return self._dllwrap.IsOverRange(self._vi, MeasurementValue)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def TemperatureThermistorMeasure(self, Type, Resolution):
        """

        :param Type:
        :type Type:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureThermistorMeasure(self._vi, Type, Resolution)

    def TemperatureThermistorConfigure(self, Type, Resolution):
        """

        :param Type:
        :type Type:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureThermistorConfigure(self._vi, Type, Resolution)

    def ACVoltageMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ACVoltageMeasure(self._vi, Range, Resolution)

    def ACVoltageConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ACVoltageConfigure(self._vi, Range, Resolution)

    def DCVoltageMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.DCVoltageMeasure(self._vi, Range, Resolution)

    def DCVoltageConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.DCVoltageConfigure(self._vi, Range, Resolution)

    def ACCurrentConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ACCurrentConfigure(self._vi, Range, Resolution)

    def ACCurrentMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ACCurrentMeasure(self._vi, Range, Resolution)

    def CalibrationPerformCalibration(self):
        """"""
        return self._dllwrap.CalibrationPerformCalibration(self._vi)

    def CalibrationSecurityEnable(self, Enable, Code):
        """

        :param Enable:
        :type Enable:
        :param Code:
        :type Code:
        """
        return self._dllwrap.CalibrationSecurityEnable(self._vi, Enable, Code)

    def CapacitanceMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.CapacitanceMeasure(self._vi, Range, Resolution)

    def CapacitanceConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.CapacitanceConfigure(self._vi, Range, Resolution)

    def ContinuityMeasure(self):
        """"""
        return self._dllwrap.ContinuityMeasure(self._vi)

    def ContinuityConfigure(self):
        """"""
        return self._dllwrap.ContinuityConfigure(self._vi)

    def DCCurrentConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.DCCurrentConfigure(self._vi, Range, Resolution)

    def DCCurrentMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.DCCurrentMeasure(self._vi, Range, Resolution)

    def DiodeMeasure(self):
        """"""
        return self._dllwrap.DiodeMeasure(self._vi)

    def DiodeConfigure(self):
        """"""
        return self._dllwrap.DiodeConfigure(self._vi)

    def FrequencyConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.FrequencyConfigure(self._vi, Range, Resolution)

    def FrequencyMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.FrequencyMeasure(self._vi, Range, Resolution)

    def MemorySaveState(self, LocationNum):
        """

        :param LocationNum:
        :type LocationNum:
        """
        return self._dllwrap.MemorySaveState(self._vi, LocationNum)

    def MemoryRecallState(self, LocationNum):
        """

        :param LocationNum:
        :type LocationNum:
        """
        return self._dllwrap.MemoryRecallState(self._vi, LocationNum)

    def ResistanceConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ResistanceConfigure(self._vi, Range, Resolution)

    def ResistanceMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ResistanceMeasure(self._vi, Range, Resolution)

    def StatusClear(self):
        """"""
        return self._dllwrap.StatusClear(self._vi)

    def StatusPreset(self):
        """"""
        return self._dllwrap.StatusPreset(self._vi)

    def StatusConfigureServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.StatusConfigureServiceRequest(self._vi, Reason)

    def SystemBeeper(self):
        """"""
        return self._dllwrap.SystemBeeper(self._vi)

    def SystemWaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.SystemWaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def SystemClearIO(self):
        """"""
        return self._dllwrap.SystemClearIO(self._vi)

    def SystemReadBytes(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadBytes(self._vi, ValBufferSize)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def SystemWriteBytes(self, BufferBufferSize, Buffer):
        """

        :param BufferBufferSize:
        :type BufferBufferSize:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.SystemWriteBytes(self._vi, BufferBufferSize, Buffer)

    def SystemWriteString(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, Data)
