from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import Ag34405_const as const
from .Ag34405_const import *


class Ag34405_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("Ag34405.dll", "Ag34405_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "Ag34405"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        _status = self.dll.Ag34405_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Vi.value)

    def close(self, Vi):
        _status = self.dll.Ag34405_close(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        _status = self.dll.Ag34405_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        _status = self.dll.Ag34405_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        _status = self.dll.Ag34405_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(1024)
        _status = self.dll.Ag34405_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        _status = self.dll.Ag34405_ClearError(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearInterchangeWarnings(self, Vi):
        _status = self.dll.Ag34405_ClearInterchangeWarnings(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(1024)
        _status = self.dll.Ag34405_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(1024)
        _status = self.dll.Ag34405_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        _status = self.dll.Ag34405_InvalidateAllAttributes(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetInterchangeCheck(self, Vi):
        _status = self.dll.Ag34405_ResetInterchangeCheck(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Disable(self, Vi):
        _status = self.dll.Ag34405_Disable(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        _status = self.dll.Ag34405_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        _status = self.dll.Ag34405_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        _status = self.dll.Ag34405_reset(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetWithDefaults(self, Vi):
        _status = self.dll.Ag34405_ResetWithDefaults(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        _status = self.dll.Ag34405_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        _status = self.dll.Ag34405_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        _status = self.dll.Ag34405_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        _status = self.dll.Ag34405_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        _status = self.dll.Ag34405_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        _status = self.dll.Ag34405_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(1024)
        _status = self.dll.Ag34405_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.Ag34405_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.Ag34405_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.Ag34405_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.Ag34405_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.Ag34405_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurement(self, Vi, Function, Range, Resolution):
        _status = self.dll.Ag34405_ConfigureMeasurement(
            ViSession(Vi), ViInt32(Function), ViReal64(Range), ViReal64(Resolution)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFrequencyVoltageRange(self, Vi, FrequencyVoltageRange):
        _status = self.dll.Ag34405_ConfigureFrequencyVoltageRange(ViSession(Vi), ViReal64(FrequencyVoltageRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureACBandwidth(self, Vi, MinFreq, MaxFreq):
        _status = self.dll.Ag34405_ConfigureACBandwidth(ViSession(Vi), ViReal64(MinFreq), ViReal64(MaxFreq))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTransducerType(self, Vi, TransducerType):
        _status = self.dll.Ag34405_ConfigureTransducerType(ViSession(Vi), ViInt32(TransducerType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureThermistor(self, Vi, Resistance):
        _status = self.dll.Ag34405_ConfigureThermistor(ViSession(Vi), ViReal64(Resistance))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTrigger(self, Vi, TriggerSource, TriggerDelay):
        _status = self.dll.Ag34405_ConfigureTrigger(ViSession(Vi), ViInt32(TriggerSource), ViReal64(TriggerDelay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Read(self, Vi, MaxTimeMilliseconds):
        Reading = ViReal64()
        _status = self.dll.Ag34405_Read(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Reading))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Reading.value)

    def Abort(self, Vi):
        _status = self.dll.Ag34405_Abort(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Fetch(self, Vi, MaxTimeMilliseconds):
        Reading = ViReal64()
        _status = self.dll.Ag34405_Fetch(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Reading))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Reading.value)

    def Initiate(self, Vi):
        _status = self.dll.Ag34405_Initiate(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IsOverRange(self, Vi, MeasurementValue):
        IsOverRange = ViBoolean()
        _status = self.dll.Ag34405_IsOverRange(ViSession(Vi), ViReal64(MeasurementValue), byref(IsOverRange))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(IsOverRange.value)

    def SendSoftwareTrigger(self, Vi):
        _status = self.dll.Ag34405_SendSoftwareTrigger(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TemperatureThermistorMeasure(self, Vi, Type, Resolution):
        RetVal = ViReal64()
        _status = self.dll.Ag34405_TemperatureThermistorMeasure(
            ViSession(Vi), ViInt32(Type), ViInt32(Resolution), byref(RetVal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def TemperatureThermistorConfigure(self, Vi, Type, Resolution):
        _status = self.dll.Ag34405_TemperatureThermistorConfigure(ViSession(Vi), ViInt32(Type), ViInt32(Resolution))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ACVoltageMeasure(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        _status = self.dll.Ag34405_ACVoltageMeasure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def ACVoltageConfigure(self, Vi, Range, Resolution):
        _status = self.dll.Ag34405_ACVoltageConfigure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DCVoltageMeasure(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        _status = self.dll.Ag34405_DCVoltageMeasure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def DCVoltageConfigure(self, Vi, Range, Resolution):
        _status = self.dll.Ag34405_DCVoltageConfigure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ACCurrentConfigure(self, Vi, Range, Resolution):
        _status = self.dll.Ag34405_ACCurrentConfigure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ACCurrentMeasure(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        _status = self.dll.Ag34405_ACCurrentMeasure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def CalibrationPerformCalibration(self, Vi):
        RetVal = ViBoolean()
        _status = self.dll.Ag34405_CalibrationPerformCalibration(ViSession(Vi), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(RetVal.value)

    def CalibrationSecurityEnable(self, Vi, Enable, Code):
        _status = self.dll.Ag34405_CalibrationSecurityEnable(ViSession(Vi), ViBoolean(Enable), ViConstString(Code))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CapacitanceMeasure(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        _status = self.dll.Ag34405_CapacitanceMeasure(
            ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def CapacitanceConfigure(self, Vi, Range, Resolution):
        _status = self.dll.Ag34405_CapacitanceConfigure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ContinuityMeasure(self, Vi):
        RetVal = ViReal64()
        _status = self.dll.Ag34405_ContinuityMeasure(ViSession(Vi), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def ContinuityConfigure(self, Vi):
        _status = self.dll.Ag34405_ContinuityConfigure(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DCCurrentConfigure(self, Vi, Range, Resolution):
        _status = self.dll.Ag34405_DCCurrentConfigure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DCCurrentMeasure(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        _status = self.dll.Ag34405_DCCurrentMeasure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def DiodeMeasure(self, Vi):
        RetVal = ViReal64()
        _status = self.dll.Ag34405_DiodeMeasure(ViSession(Vi), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def DiodeConfigure(self, Vi):
        _status = self.dll.Ag34405_DiodeConfigure(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FrequencyConfigure(self, Vi, Range, Resolution):
        _status = self.dll.Ag34405_FrequencyConfigure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FrequencyMeasure(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        _status = self.dll.Ag34405_FrequencyMeasure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def MemorySaveState(self, Vi, LocationNum):
        _status = self.dll.Ag34405_MemorySaveState(ViSession(Vi), ViInt32(LocationNum))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MemoryRecallState(self, Vi, LocationNum):
        _status = self.dll.Ag34405_MemoryRecallState(ViSession(Vi), ViInt32(LocationNum))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResistanceConfigure(self, Vi, Range, Resolution):
        _status = self.dll.Ag34405_ResistanceConfigure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResistanceMeasure(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        _status = self.dll.Ag34405_ResistanceMeasure(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def StatusClear(self, Vi):
        _status = self.dll.Ag34405_StatusClear(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusPreset(self, Vi):
        _status = self.dll.Ag34405_StatusPreset(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusConfigureServiceRequest(self, Vi, Reason):
        _status = self.dll.Ag34405_StatusConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemBeeper(self, Vi):
        _status = self.dll.Ag34405_SystemBeeper(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        _status = self.dll.Ag34405_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemClearIO(self, Vi):
        _status = self.dll.Ag34405_SystemClearIO(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemReadBytes(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(1024)
        ValActualSize = ViInt32()
        _status = self.dll.Ag34405_SystemReadBytes(ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = decode(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(1024)
        _status = self.dll.Ag34405_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def SystemWriteBytes(self, Vi, BufferBufferSize, Buffer):
        _status = self.dll.Ag34405_SystemWriteBytes(ViSession(Vi), ViInt32(BufferBufferSize), ViConstString(Buffer))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemWriteString(self, Vi, Data):
        _status = self.dll.Ag34405_SystemWriteString(ViSession(Vi), ViConstString(Data))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
