from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .ke2000_dllwrap import *


class ke2000(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = ke2000_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def GetNextCoercionRecord(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def GetNextInterchangeWarning(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def ConfigureMeasurement(self, measFunction, range, resolution):
        """

        :param measFunction:
        :type measFunction:
        :param range:
        :type range:
        :param resolution:
        :type resolution:
        """
        return self._dllwrap.ConfigureMeasurement(self._vi, measFunction, range, resolution)

    def ConfigureTrigger(self, triggerSource, triggerDelay):
        """

        :param triggerSource:
        :type triggerSource:
        :param triggerDelay:
        :type triggerDelay:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, triggerSource, triggerDelay)

    def Read(self, maxTime):
        """

        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.Read(self._vi, maxTime)

    def Fetch(self, maxTime):
        """

        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.Fetch(self._vi, maxTime)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def Initiate(self):
        """"""
        return self._dllwrap.Initiate(self._vi)

    def ConfigureACBandwidth(self, minFreq, maxFreq):
        """

        :param minFreq:
        :type minFreq:
        :param maxFreq:
        :type maxFreq:
        """
        return self._dllwrap.ConfigureACBandwidth(self._vi, minFreq, maxFreq)

    def ConfigureFrequencyVoltageRange(self, frequencyVoltageRange):
        """

        :param frequencyVoltageRange:
        :type frequencyVoltageRange:
        """
        return self._dllwrap.ConfigureFrequencyVoltageRange(self._vi, frequencyVoltageRange)

    def ConfigureMultiPoint(self, triggerCount, sampleCount, sampleTrigger, sampleInterval):
        """

        :param triggerCount:
        :type triggerCount:
        :param sampleCount:
        :type sampleCount:
        :param sampleTrigger:
        :type sampleTrigger:
        :param sampleInterval:
        :type sampleInterval:
        """
        return self._dllwrap.ConfigureMultiPoint(self._vi, triggerCount, sampleCount, sampleTrigger, sampleInterval)

    def ConfigureMeasCompleteDest(self, measCompleteDest):
        """

        :param measCompleteDest:
        :type measCompleteDest:
        """
        return self._dllwrap.ConfigureMeasCompleteDest(self._vi, measCompleteDest)

    def ReadMultiPoint(self, maxTime, arraySize):
        """

        :param maxTime:
        :type maxTime:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.ReadMultiPoint(self._vi, maxTime, arraySize)

    def FetchMultiPoint(self, maxTime, arraySize):
        """

        :param maxTime:
        :type maxTime:
        :param arraySize:
        :type arraySize:
        """
        return self._dllwrap.FetchMultiPoint(self._vi, maxTime, arraySize)

    def GetApertureTimeInfo(self):
        """"""
        return self._dllwrap.GetApertureTimeInfo(self._vi)

    def GetAutoRangeValue(self):
        """"""
        return self._dllwrap.GetAutoRangeValue(self._vi)

    def ConfigureAutoZeroMode(self, autoZeroMode):
        """

        :param autoZeroMode:
        :type autoZeroMode:
        """
        return self._dllwrap.ConfigureAutoZeroMode(self._vi, autoZeroMode)

    def ConfigureTransducerType(self, transducerType):
        """

        :param transducerType:
        :type transducerType:
        """
        return self._dllwrap.ConfigureTransducerType(self._vi, transducerType)

    def ConfigureFixedRefJunction(self, fixedRefJunction):
        """

        :param fixedRefJunction:
        :type fixedRefJunction:
        """
        return self._dllwrap.ConfigureFixedRefJunction(self._vi, fixedRefJunction)

    def ConfigureThermocouple(self, thermocoupleType, refJunctionType):
        """

        :param thermocoupleType:
        :type thermocoupleType:
        :param refJunctionType:
        :type refJunctionType:
        """
        return self._dllwrap.ConfigureThermocouple(self._vi, thermocoupleType, refJunctionType)

    def ConfigureRealRefJunction(self, coefficent, offset):
        """

        :param coefficent:
        :type coefficent:
        :param offset:
        :type offset:
        """
        return self._dllwrap.ConfigureRealRefJunction(self._vi, coefficent, offset)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def GetChannelName(self, index, bufferSize):
        """

        :param index:
        :type index:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, index, bufferSize)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def GetError(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """

        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def IsOverRange(self, measurementValue):
        """

        :param measurementValue:
        :type measurementValue:
        """
        return self._dllwrap.IsOverRange(self._vi, measurementValue)

    def ConvertTemperature(self, type):
        """

        :param type:
        :type type:
        """
        return self._dllwrap.ConvertTemperature(self._vi, type)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def ConfigureMath(self, function, state):
        """

        :param function:
        :type function:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureMath(self._vi, function, state)

    def ConfigureMathMXB(self, m, b):
        """

        :param m:
        :type m:
        :param b:
        :type b:
        """
        return self._dllwrap.ConfigureMathMXB(self._vi, m, b)

    def ConfigureMathPercent(self, percent):
        """

        :param percent:
        :type percent:
        """
        return self._dllwrap.ConfigureMathPercent(self._vi, percent)

    def ConfigureHold(self, window, count, state):
        """

        :param window:
        :type window:
        :param count:
        :type count:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureHold(self._vi, window, count, state)

    def ConfigureFilter(self, filtertype, count, enabled):
        """

        :param filtertype:
        :type filtertype:
        :param count:
        :type count:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureFilter(self._vi, filtertype, count, enabled)

    def ConfigureRelative(self, reference, enabled):
        """

        :param reference:
        :type reference:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureRelative(self._vi, reference, enabled)

    def ConfigureMultiPointStat(self, function, state):
        """

        :param function:
        :type function:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureMultiPointStat(self._vi, function, state)

    def ConfigureLimitTest(self, upperLimit, lowerLimit, state):
        """

        :param upperLimit:
        :type upperLimit:
        :param lowerLimit:
        :type lowerLimit:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureLimitTest(self._vi, upperLimit, lowerLimit, state)

    def AcquireNewMathPercentReference(self):
        """"""
        return self._dllwrap.AcquireNewMathPercentReference(self._vi)

    def AcquireNewRelativeReference(self):
        """"""
        return self._dllwrap.AcquireNewRelativeReference(self._vi)

    def FetchMultiPointStat(self, maxTime):
        """

        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.FetchMultiPointStat(self._vi, maxTime)

    def FetchLimitTestData(self):
        """"""
        return self._dllwrap.FetchLimitTestData(self._vi)

    def GetAttributeViInt32(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName, attribute, bufSize):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param bufSize:
        :type bufSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)

    def IviInit(self, resourceName, IDQuery, reset):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param reset:
        :type reset:
        """
        return self._dllwrap.IviInit(resourceName, IDQuery, reset, self._vi)

    def IviClose(self):
        """"""
        return self._dllwrap.IviClose(self._vi)

    def GetErrorInfo(self):
        """"""
        return self._dllwrap.GetErrorInfo(self._vi)

    def ClearErrorInfo(self):
        """"""
        return self._dllwrap.ClearErrorInfo(self._vi)
