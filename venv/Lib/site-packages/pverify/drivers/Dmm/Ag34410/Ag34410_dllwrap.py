from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import Ag34410_const as const
from .Ag34410_const import *


class Ag34410_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("Ag34410.dll", "Ag34410_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "Ag34410"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.Ag34410_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.Ag34410_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.Ag34410_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.Ag34410_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag34410_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        status = self.dll.Ag34410_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.Ag34410_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, Vi):
        status = self.dll.Ag34410_ClearInterchangeWarnings(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        status = self.dll.Ag34410_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(InterchangeWarningBufferSize)
        status = self.dll.Ag34410_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.Ag34410_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetInterchangeCheck(self, Vi):
        status = self.dll.Ag34410_ResetInterchangeCheck(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.Ag34410_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag34410_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.Ag34410_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.Ag34410_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.Ag34410_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag34410_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.Ag34410_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.Ag34410_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt64()
        status = self.dll.Ag34410_GetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.Ag34410_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.Ag34410_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.Ag34410_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        status = self.dll.Ag34410_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34410_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34410_SetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34410_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34410_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34410_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34410_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasurement(self, Vi, Function, Range, Resolution):
        status = self.dll.Ag34410_ConfigureMeasurement(
            ViSession(Vi), ViInt32(Function), ViReal64(Range), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyVoltageRange(self, Vi, FrequencyVoltageRange):
        status = self.dll.Ag34410_ConfigureFrequencyVoltageRange(ViSession(Vi), ViReal64(FrequencyVoltageRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureACBandwidth(self, Vi, MinFreq, MaxFreq):
        status = self.dll.Ag34410_ConfigureACBandwidth(ViSession(Vi), ViReal64(MinFreq), ViReal64(MaxFreq))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTransducerType(self, Vi, TransducerType):
        status = self.dll.Ag34410_ConfigureTransducerType(ViSession(Vi), ViInt32(TransducerType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureThermistor(self, Vi, Resistance):
        status = self.dll.Ag34410_ConfigureThermistor(ViSession(Vi), ViReal64(Resistance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRTD(self, Vi, Alpha, Resistance):
        status = self.dll.Ag34410_ConfigureRTD(ViSession(Vi), ViReal64(Alpha), ViReal64(Resistance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerSlope(self, Vi, Polarity):
        status = self.dll.Ag34410_ConfigureTriggerSlope(ViSession(Vi), ViInt32(Polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, Vi, TriggerSource, TriggerDelay):
        status = self.dll.Ag34410_ConfigureTrigger(ViSession(Vi), ViInt32(TriggerSource), ViReal64(TriggerDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetApertureTimeInfo(self, Vi):
        ApertureTime = ViReal64()
        ApertureTimeUnits = ViInt32()
        status = self.dll.Ag34410_GetApertureTimeInfo(ViSession(Vi), byref(ApertureTime), byref(ApertureTimeUnits))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ApertureTime = float(ApertureTime.value)
        ApertureTimeUnits = int(ApertureTimeUnits.value)
        return ApertureTime, ApertureTimeUnits

    def ConfigureAutoZeroMode(self, Vi, AutoZeroMode):
        status = self.dll.Ag34410_ConfigureAutoZeroMode(ViSession(Vi), ViInt32(AutoZeroMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasCompleteDest(self, Vi, MeasCompleteDest):
        status = self.dll.Ag34410_ConfigureMeasCompleteDest(ViSession(Vi), ViInt32(MeasCompleteDest))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMultiPoint(self, Vi, TriggerCount, SampleCount, SampleTrigger, SampleInterval):
        status = self.dll.Ag34410_ConfigureMultiPoint(
            ViSession(Vi),
            ViInt32(TriggerCount),
            ViInt32(SampleCount),
            ViInt32(SampleTrigger),
            ViReal64(SampleInterval),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Read(self, Vi, MaxTimeMilliseconds):
        Reading = ViReal64()
        status = self.dll.Ag34410_Read(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Reading))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Reading.value)

    def ReadMultiPoint(self, Vi, MaxTimeMilliseconds, ArraySize):
        ReadingArray = ARRAY_ViReal64(ArraySize)
        ActualPts = ViInt32()
        status = self.dll.Ag34410_ReadMultiPoint(
            ViSession(Vi),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ArraySize),
            ReadingArray,
            byref(ActualPts),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReadingArray = list(ReadingArray)
        ActualPts = int(ActualPts.value)
        return ReadingArray, ActualPts

    def Abort(self, Vi):
        status = self.dll.Ag34410_Abort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Fetch(self, Vi, MaxTimeMilliseconds):
        Reading = ViReal64()
        status = self.dll.Ag34410_Fetch(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Reading))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Reading.value)

    def FetchMultiPoint(self, Vi, MaxTimeMilliseconds, ArraySize):
        ReadingArray = ARRAY_ViReal64(ArraySize)
        ActualPts = ViInt32()
        status = self.dll.Ag34410_FetchMultiPoint(
            ViSession(Vi),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ArraySize),
            ReadingArray,
            byref(ActualPts),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReadingArray = list(ReadingArray)
        ActualPts = int(ActualPts.value)
        return ReadingArray, ActualPts

    def Initiate(self, Vi):
        status = self.dll.Ag34410_Initiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsOverRange(self, Vi, MeasurementValue):
        IsOverRange = ViBoolean()
        status = self.dll.Ag34410_IsOverRange(ViSession(Vi), ViReal64(MeasurementValue), byref(IsOverRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(IsOverRange.value)

    def SendSoftwareTrigger(self, Vi):
        status = self.dll.Ag34410_SendSoftwareTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearStatistics(self, Vi):
        status = self.dll.Ag34410_ClearStatistics(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PerformCalibration(self, Vi):
        RetVal = ViBoolean()
        status = self.dll.Ag34410_PerformCalibration(ViSession(Vi), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def SecurityEnable(self, Vi, Enable, Code):
        status = self.dll.Ag34410_SecurityEnable(ViSession(Vi), ViBoolean(Enable), ViConstString(Code))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrationPerformADCCalibration(self, Vi):
        RetVal = ViBoolean()
        status = self.dll.Ag34410_CalibrationPerformADCCalibration(ViSession(Vi), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def CalibrationStoreCalibrationConstants(self, Vi):
        status = self.dll.Ag34410_CalibrationStoreCalibrationConstants(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureCap(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureCap(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ConfigureCap(self, Vi, Range, Resolution):
        status = self.dll.Ag34410_ConfigureCap(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureCon(self, Vi):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureCon(ViSession(Vi), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ConfigureCon(self, Vi):
        status = self.dll.Ag34410_ConfigureCon(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureACCurr(self, Vi, Range, Resolution):
        status = self.dll.Ag34410_ConfigureACCurr(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureACCurr(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureACCurr(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ConfigureDCCurr(self, Vi, Range, Resolution):
        status = self.dll.Ag34410_ConfigureDCCurr(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureDCCurr(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureDCCurr(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def MeasureDiode(self, Vi):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureDiode(ViSession(Vi), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ConfigureDiode(self, Vi):
        status = self.dll.Ag34410_ConfigureDiode(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFreq(self, Vi, Range, Resolution):
        status = self.dll.Ag34410_ConfigureFreq(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureFreq(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureFreq(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ConfigurePeriod(self, Vi, Range, Resolution):
        status = self.dll.Ag34410_ConfigurePeriod(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurePeriod(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasurePeriod(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ConfigureRes(self, Vi, Range, Resolution):
        status = self.dll.Ag34410_ConfigureRes(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureRes(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureRes(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def MeasureRTD1(self, Vi, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureRTD1(ViSession(Vi), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ConfigureRTD1(self, Vi, Resolution):
        status = self.dll.Ag34410_ConfigureRTD1(ViSession(Vi), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureFRTD(self, Vi, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureFRTD(ViSession(Vi), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ConfigureFRTD(self, Vi, Resolution):
        status = self.dll.Ag34410_ConfigureFRTD(ViSession(Vi), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureTherm(self, Vi, Type, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureTherm(ViSession(Vi), ViInt32(Type), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ConfigureTherm(self, Vi, Type, Resolution):
        status = self.dll.Ag34410_ConfigureTherm(ViSession(Vi), ViInt32(Type), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFTherm(self, Vi, Type, Resolution):
        status = self.dll.Ag34410_ConfigureFTherm(ViSession(Vi), ViInt32(Type), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureFTherm(self, Vi, Type, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureFTherm(ViSession(Vi), ViInt32(Type), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def MeasureACVolt(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureACVolt(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ConfigureACVolt(self, Vi, Range, Resolution):
        status = self.dll.Ag34410_ConfigureACVolt(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureDCVolt(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureDCVolt(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ConfigureDCVolt(self, Vi, Range, Resolution):
        status = self.dll.Ag34410_ConfigureDCVolt(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CopyReadingsMeas(self, Vi):
        status = self.dll.Ag34410_CopyReadingsMeas(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DeleteReadingsMeas(self, Vi):
        status = self.dll.Ag34410_DeleteReadingsMeas(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryLastMeas(self, Vi):
        RetVal = ViReal64()
        status = self.dll.Ag34410_QueryLastMeas(ViSession(Vi), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def RemoveReadingsMeas(self, Vi, NumReadings, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34410_RemoveReadingsMeas(
            ViSession(Vi),
            ViInt32(NumReadings),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def DestructiveReadMeas(self, Vi, MaxCount, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34410_DestructiveReadMeas(
            ViSession(Vi),
            ViInt32(MaxCount),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def ReadMeas(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34410_ReadMeas(ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def InitiateMeas(self, Vi):
        status = self.dll.Ag34410_InitiateMeas(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FetchMeas(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34410_FetchMeas(ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def AbortMeas(self, Vi):
        status = self.dll.Ag34410_AbortMeas(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementQueryAllMeas(self, Vi, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.Ag34410_MeasurementQueryAllMeas(
            ViSession(Vi), ViInt32(RetValBufferSize), RetVal, byref(RetValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def READING_COUNT(self, Vi, MemoryType):
        RetVal = ViInt32()
        status = self.dll.Ag34410_READING_COUNT(ViSession(Vi), ViInt32(MemoryType), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def Beeper(self, Vi):
        status = self.dll.Ag34410_Beeper(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LockKeyboard(self, Vi):
        status = self.dll.Ag34410_LockKeyboard(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def UnlockKeyboard(self, Vi):
        status = self.dll.Ag34410_UnlockKeyboard(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def EnableInterface(self, Vi, HardwareInterface):
        status = self.dll.Ag34410_EnableInterface(ViSession(Vi), ViInt32(HardwareInterface))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LockRelease(self, Vi):
        status = self.dll.Ag34410_LockRelease(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LockRequest(self, Vi):
        RetVal = ViBoolean()
        status = self.dll.Ag34410_LockRequest(ViSession(Vi), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def WaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        status = self.dll.Ag34410_WaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisableInterface(self, Vi, HardwareInterface):
        status = self.dll.Ag34410_DisableInterface(ViSession(Vi), ViInt32(HardwareInterface))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsInterfaceEnabled(self, Vi, HardwareInterface):
        RetVal = ViBoolean()
        status = self.dll.Ag34410_IsInterfaceEnabled(ViSession(Vi), ViInt32(HardwareInterface), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def SystemWrite(self, Vi, CommandString):
        status = self.dll.Ag34410_SystemWrite(ViSession(Vi), ViConstString(CommandString))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRead(self, Vi, Size):
        Value = ARRAY_ViChar(Size)
        ActualSize = ViInt32()
        status = self.dll.Ag34410_SystemRead(ViSession(Vi), ViInt32(Size), Value, byref(ActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Value = decode(Value)
        ActualSize = int(ActualSize.value)
        return Value, ActualSize

    def ClearDisplay(self, Vi, DisplayLine):
        status = self.dll.Ag34410_ClearDisplay(ViSession(Vi), ViInt32(DisplayLine))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayEnabledGet(self, Vi, DisplayLine):
        RetVal = ViBoolean()
        status = self.dll.Ag34410_DisplayEnabledGet(ViSession(Vi), ViInt32(DisplayLine), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def DisplayEnabledSet(self, Vi, DisplayLine, Val):
        status = self.dll.Ag34410_DisplayEnabledSet(ViSession(Vi), ViInt32(DisplayLine), ViBoolean(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayTextGet(self, Vi, DisplayLine, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.Ag34410_DisplayTextGet(ViSession(Vi), ViInt32(DisplayLine), ViInt32(RetValBufferSize), RetVal)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def DisplayTextSet(self, Vi, DisplayLine, Val):
        status = self.dll.Ag34410_DisplayTextSet(ViSession(Vi), ViInt32(DisplayLine), ViConstString(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasureFRes(self, Vi, Range, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag34410_MeasureFRes(ViSession(Vi), ViReal64(Range), ViInt32(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def ConfigureFRes(self, Vi, Range, Resolution):
        status = self.dll.Ag34410_ConfigureFRes(ViSession(Vi), ViReal64(Range), ViInt32(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetLocationName(self, Vi, LocationNum, LocationName):
        status = self.dll.Ag34410_SetLocationName(ViSession(Vi), ViInt32(LocationNum), ViConstString(LocationName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLocationName(self, Vi, LocationNum, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        status = self.dll.Ag34410_GetLocationName(
            ViSession(Vi), ViInt32(LocationNum), ViInt32(RetValBufferSize), RetVal
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(RetVal)

    def Delete(self, Vi, LocationNum):
        status = self.dll.Ag34410_Delete(ViSession(Vi), ViInt32(LocationNum))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DeleteAll(self, Vi):
        status = self.dll.Ag34410_DeleteAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsValidState(self, Vi, LocationNum):
        RetVal = ViBoolean()
        status = self.dll.Ag34410_IsValidState(ViSession(Vi), ViInt32(LocationNum), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def MemorySaveState(self, Vi, LocationNum):
        status = self.dll.Ag34410_MemorySaveState(ViSession(Vi), ViInt32(LocationNum))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryRecallState(self, Vi, LocationNum):
        status = self.dll.Ag34410_MemoryRecallState(ViSession(Vi), ViInt32(LocationNum))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearStatus(self, Vi):
        status = self.dll.Ag34410_ClearStatus(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureServiceRequest(self, Vi, Reason):
        status = self.dll.Ag34410_ConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.Ag34410_GetRegister(ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def SetRegister(self, Vi, Register, SubRegister, Val):
        status = self.dll.Ag34410_SetRegister(ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Preset(self, Vi):
        status = self.dll.Ag34410_Preset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViChar(BufferSize)
        ReturnCount = ViInt64()
        status = self.dll.Ag34410_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Buffer = decode(Buffer)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.Ag34410_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def viWrite(self, Vi, Count, Buffer):
        ReturnCount = ViInt64()
        status = self.dll.Ag34410_viWrite(ViSession(Vi), ViInt64(Count), ViConstString(Buffer), byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ReturnCount.value)

    def SystemWriteString(self, Vi, Data):
        status = self.dll.Ag34410_SystemWriteString(ViSession(Vi), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
