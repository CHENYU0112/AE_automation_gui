from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .Ag34410_dllwrap import *


class Ag34410(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = Ag34410_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViInt64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViInt64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ConfigureMeasurement(self, Function, Range, Resolution):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureMeasurement(self._vi, Function, Range, Resolution)

    def ConfigureFrequencyVoltageRange(self, FrequencyVoltageRange):
        """

        :param FrequencyVoltageRange:
        :type FrequencyVoltageRange:
        """
        return self._dllwrap.ConfigureFrequencyVoltageRange(self._vi, FrequencyVoltageRange)

    def ConfigureACBandwidth(self, MinFreq, MaxFreq):
        """

        :param MinFreq:
        :type MinFreq:
        :param MaxFreq:
        :type MaxFreq:
        """
        return self._dllwrap.ConfigureACBandwidth(self._vi, MinFreq, MaxFreq)

    def ConfigureTransducerType(self, TransducerType):
        """

        :param TransducerType:
        :type TransducerType:
        """
        return self._dllwrap.ConfigureTransducerType(self._vi, TransducerType)

    def ConfigureThermistor(self, Resistance):
        """

        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.ConfigureThermistor(self._vi, Resistance)

    def ConfigureRTD(self, Alpha, Resistance):
        """

        :param Alpha:
        :type Alpha:
        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.ConfigureRTD(self._vi, Alpha, Resistance)

    def ConfigureTriggerSlope(self, Polarity):
        """

        :param Polarity:
        :type Polarity:
        """
        return self._dllwrap.ConfigureTriggerSlope(self._vi, Polarity)

    def ConfigureTrigger(self, TriggerSource, TriggerDelay):
        """

        :param TriggerSource:
        :type TriggerSource:
        :param TriggerDelay:
        :type TriggerDelay:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, TriggerSource, TriggerDelay)

    def GetApertureTimeInfo(self):
        """"""
        return self._dllwrap.GetApertureTimeInfo(self._vi)

    def ConfigureAutoZeroMode(self, AutoZeroMode):
        """

        :param AutoZeroMode:
        :type AutoZeroMode:
        """
        return self._dllwrap.ConfigureAutoZeroMode(self._vi, AutoZeroMode)

    def ConfigureMeasCompleteDest(self, MeasCompleteDest):
        """

        :param MeasCompleteDest:
        :type MeasCompleteDest:
        """
        return self._dllwrap.ConfigureMeasCompleteDest(self._vi, MeasCompleteDest)

    def ConfigureMultiPoint(self, TriggerCount, SampleCount, SampleTrigger, SampleInterval):
        """

        :param TriggerCount:
        :type TriggerCount:
        :param SampleCount:
        :type SampleCount:
        :param SampleTrigger:
        :type SampleTrigger:
        :param SampleInterval:
        :type SampleInterval:
        """
        return self._dllwrap.ConfigureMultiPoint(self._vi, TriggerCount, SampleCount, SampleTrigger, SampleInterval)

    def Read(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Read(self._vi, MaxTimeMilliseconds)

    def ReadMultiPoint(self, MaxTimeMilliseconds, ArraySize):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ArraySize:
        :type ArraySize:
        """
        return self._dllwrap.ReadMultiPoint(self._vi, MaxTimeMilliseconds, ArraySize)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def Fetch(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Fetch(self._vi, MaxTimeMilliseconds)

    def FetchMultiPoint(self, MaxTimeMilliseconds, ArraySize):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ArraySize:
        :type ArraySize:
        """
        return self._dllwrap.FetchMultiPoint(self._vi, MaxTimeMilliseconds, ArraySize)

    def Initiate(self):
        """"""
        return self._dllwrap.Initiate(self._vi)

    def IsOverRange(self, MeasurementValue):
        """

        :param MeasurementValue:
        :type MeasurementValue:
        """
        return self._dllwrap.IsOverRange(self._vi, MeasurementValue)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def ClearStatistics(self):
        """"""
        return self._dllwrap.ClearStatistics(self._vi)

    def PerformCalibration(self):
        """"""
        return self._dllwrap.PerformCalibration(self._vi)

    def SecurityEnable(self, Enable, Code):
        """

        :param Enable:
        :type Enable:
        :param Code:
        :type Code:
        """
        return self._dllwrap.SecurityEnable(self._vi, Enable, Code)

    def CalibrationPerformADCCalibration(self):
        """"""
        return self._dllwrap.CalibrationPerformADCCalibration(self._vi)

    def CalibrationStoreCalibrationConstants(self):
        """"""
        return self._dllwrap.CalibrationStoreCalibrationConstants(self._vi)

    def MeasureCap(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasureCap(self._vi, Range, Resolution)

    def ConfigureCap(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureCap(self._vi, Range, Resolution)

    def MeasureCon(self):
        """"""
        return self._dllwrap.MeasureCon(self._vi)

    def ConfigureCon(self):
        """"""
        return self._dllwrap.ConfigureCon(self._vi)

    def ConfigureACCurr(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureACCurr(self._vi, Range, Resolution)

    def MeasureACCurr(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasureACCurr(self._vi, Range, Resolution)

    def ConfigureDCCurr(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureDCCurr(self._vi, Range, Resolution)

    def MeasureDCCurr(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasureDCCurr(self._vi, Range, Resolution)

    def MeasureDiode(self):
        """"""
        return self._dllwrap.MeasureDiode(self._vi)

    def ConfigureDiode(self):
        """"""
        return self._dllwrap.ConfigureDiode(self._vi)

    def ConfigureFreq(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureFreq(self._vi, Range, Resolution)

    def MeasureFreq(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasureFreq(self._vi, Range, Resolution)

    def ConfigurePeriod(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigurePeriod(self._vi, Range, Resolution)

    def MeasurePeriod(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasurePeriod(self._vi, Range, Resolution)

    def ConfigureRes(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureRes(self._vi, Range, Resolution)

    def MeasureRes(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasureRes(self._vi, Range, Resolution)

    def MeasureRTD1(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasureRTD1(self._vi, Resolution)

    def ConfigureRTD1(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureRTD1(self._vi, Resolution)

    def MeasureFRTD(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasureFRTD(self._vi, Resolution)

    def ConfigureFRTD(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureFRTD(self._vi, Resolution)

    def MeasureTherm(self, Type, Resolution):
        """

        :param Type:
        :type Type:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasureTherm(self._vi, Type, Resolution)

    def ConfigureTherm(self, Type, Resolution):
        """

        :param Type:
        :type Type:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureTherm(self._vi, Type, Resolution)

    def ConfigureFTherm(self, Type, Resolution):
        """

        :param Type:
        :type Type:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureFTherm(self._vi, Type, Resolution)

    def MeasureFTherm(self, Type, Resolution):
        """

        :param Type:
        :type Type:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasureFTherm(self._vi, Type, Resolution)

    def MeasureACVolt(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasureACVolt(self._vi, Range, Resolution)

    def ConfigureACVolt(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureACVolt(self._vi, Range, Resolution)

    def MeasureDCVolt(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasureDCVolt(self._vi, Range, Resolution)

    def ConfigureDCVolt(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureDCVolt(self._vi, Range, Resolution)

    def CopyReadingsMeas(self):
        """"""
        return self._dllwrap.CopyReadingsMeas(self._vi)

    def DeleteReadingsMeas(self):
        """"""
        return self._dllwrap.DeleteReadingsMeas(self._vi)

    def QueryLastMeas(self):
        """"""
        return self._dllwrap.QueryLastMeas(self._vi)

    def RemoveReadingsMeas(self, NumReadings, RetValBufferSize):
        """

        :param NumReadings:
        :type NumReadings:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.RemoveReadingsMeas(self._vi, NumReadings, RetValBufferSize)

    def DestructiveReadMeas(self, MaxCount, RetValBufferSize):
        """

        :param MaxCount:
        :type MaxCount:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.DestructiveReadMeas(self._vi, MaxCount, RetValBufferSize)

    def ReadMeas(self, RetValBufferSize):
        """

        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.ReadMeas(self._vi, RetValBufferSize)

    def InitiateMeas(self):
        """"""
        return self._dllwrap.InitiateMeas(self._vi)

    def FetchMeas(self, RetValBufferSize):
        """

        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.FetchMeas(self._vi, RetValBufferSize)

    def AbortMeas(self):
        """"""
        return self._dllwrap.AbortMeas(self._vi)

    def MeasurementQueryAllMeas(self, RetValBufferSize):
        """

        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasurementQueryAllMeas(self._vi, RetValBufferSize)

    def READING_COUNT(self, MemoryType):
        """

        :param MemoryType:
        :type MemoryType:
        """
        return self._dllwrap.READING_COUNT(self._vi, MemoryType)

    def Beeper(self):
        """"""
        return self._dllwrap.Beeper(self._vi)

    def LockKeyboard(self):
        """"""
        return self._dllwrap.LockKeyboard(self._vi)

    def UnlockKeyboard(self):
        """"""
        return self._dllwrap.UnlockKeyboard(self._vi)

    def EnableInterface(self, HardwareInterface):
        """

        :param HardwareInterface:
        :type HardwareInterface:
        """
        return self._dllwrap.EnableInterface(self._vi, HardwareInterface)

    def LockRelease(self):
        """"""
        return self._dllwrap.LockRelease(self._vi)

    def LockRequest(self):
        """"""
        return self._dllwrap.LockRequest(self._vi)

    def WaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.WaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def DisableInterface(self, HardwareInterface):
        """

        :param HardwareInterface:
        :type HardwareInterface:
        """
        return self._dllwrap.DisableInterface(self._vi, HardwareInterface)

    def IsInterfaceEnabled(self, HardwareInterface):
        """

        :param HardwareInterface:
        :type HardwareInterface:
        """
        return self._dllwrap.IsInterfaceEnabled(self._vi, HardwareInterface)

    def SystemWrite(self, CommandString):
        """

        :param CommandString:
        :type CommandString:
        """
        return self._dllwrap.SystemWrite(self._vi, CommandString)

    def SystemRead(self, Size):
        """

        :param Size:
        :type Size:
        """
        return self._dllwrap.SystemRead(self._vi, Size)

    def ClearDisplay(self, DisplayLine):
        """

        :param DisplayLine:
        :type DisplayLine:
        """
        return self._dllwrap.ClearDisplay(self._vi, DisplayLine)

    def DisplayEnabledGet(self, DisplayLine):
        """

        :param DisplayLine:
        :type DisplayLine:
        """
        return self._dllwrap.DisplayEnabledGet(self._vi, DisplayLine)

    def DisplayEnabledSet(self, DisplayLine, Val):
        """

        :param DisplayLine:
        :type DisplayLine:
        :param Val:
        :type Val:
        """
        return self._dllwrap.DisplayEnabledSet(self._vi, DisplayLine, Val)

    def DisplayTextGet(self, DisplayLine, RetValBufferSize):
        """

        :param DisplayLine:
        :type DisplayLine:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.DisplayTextGet(self._vi, DisplayLine, RetValBufferSize)

    def DisplayTextSet(self, DisplayLine, Val):
        """

        :param DisplayLine:
        :type DisplayLine:
        :param Val:
        :type Val:
        """
        return self._dllwrap.DisplayTextSet(self._vi, DisplayLine, Val)

    def MeasureFRes(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.MeasureFRes(self._vi, Range, Resolution)

    def ConfigureFRes(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureFRes(self._vi, Range, Resolution)

    def SetLocationName(self, LocationNum, LocationName):
        """

        :param LocationNum:
        :type LocationNum:
        :param LocationName:
        :type LocationName:
        """
        return self._dllwrap.SetLocationName(self._vi, LocationNum, LocationName)

    def GetLocationName(self, LocationNum, RetValBufferSize):
        """

        :param LocationNum:
        :type LocationNum:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.GetLocationName(self._vi, LocationNum, RetValBufferSize)

    def Delete(self, LocationNum):
        """

        :param LocationNum:
        :type LocationNum:
        """
        return self._dllwrap.Delete(self._vi, LocationNum)

    def DeleteAll(self):
        """"""
        return self._dllwrap.DeleteAll(self._vi)

    def IsValidState(self, LocationNum):
        """

        :param LocationNum:
        :type LocationNum:
        """
        return self._dllwrap.IsValidState(self._vi, LocationNum)

    def MemorySaveState(self, LocationNum):
        """

        :param LocationNum:
        :type LocationNum:
        """
        return self._dllwrap.MemorySaveState(self._vi, LocationNum)

    def MemoryRecallState(self, LocationNum):
        """

        :param LocationNum:
        :type LocationNum:
        """
        return self._dllwrap.MemoryRecallState(self._vi, LocationNum)

    def ClearStatus(self):
        """"""
        return self._dllwrap.ClearStatus(self._vi)

    def ConfigureServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.ConfigureServiceRequest(self._vi, Reason)

    def GetRegister(self, Register, SubRegister):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.GetRegister(self._vi, Register, SubRegister)

    def SetRegister(self, Register, SubRegister, Val):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.SetRegister(self._vi, Register, SubRegister, Val)

    def Preset(self):
        """"""
        return self._dllwrap.Preset(self._vi)

    def viRead(self, BufferSize):
        """

        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.viRead(self._vi, BufferSize)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def viWrite(self, Count, Buffer):
        """

        :param Count:
        :type Count:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.viWrite(self._vi, Count, Buffer)

    def SystemWriteString(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, Data)
