from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import Ag34401_const as const
from .Ag34401_const import *


class Ag34401_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("ag34401.dll", "ag34401_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "Ag34401"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.Ag34401_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.Ag34401_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.Ag34401_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.Ag34401_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag34401_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(1024)
        status = self.dll.Ag34401_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.Ag34401_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, Vi):
        status = self.dll.Ag34401_ClearInterchangeWarnings(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(1024)
        status = self.dll.Ag34401_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(1024)
        status = self.dll.Ag34401_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.Ag34401_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetInterchangeCheck(self, Vi):
        status = self.dll.Ag34401_ResetInterchangeCheck(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.Ag34401_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag34401_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.Ag34401_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.Ag34401_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.Ag34401_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag34401_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.Ag34401_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.Ag34401_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt64()
        status = self.dll.Ag34401_GetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.Ag34401_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.Ag34401_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.Ag34401_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(1024)
        status = self.dll.Ag34401_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34401_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34401_SetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34401_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34401_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34401_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag34401_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasurement(self, Vi, Function, Range, Resolution):
        status = self.dll.Ag34401_ConfigureMeasurement(
            ViSession(Vi), ViInt32(Function), ViReal64(Range), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyVoltageRange(self, Vi, FrequencyVoltageRange):
        status = self.dll.Ag34401_ConfigureFrequencyVoltageRange(ViSession(Vi), ViReal64(FrequencyVoltageRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureACBandwidth(self, Vi, MinFreq, MaxFreq):
        status = self.dll.Ag34401_ConfigureACBandwidth(ViSession(Vi), ViReal64(MinFreq), ViReal64(MaxFreq))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, Vi, TriggerSource, TriggerDelay):
        status = self.dll.Ag34401_ConfigureTrigger(ViSession(Vi), ViInt32(TriggerSource), ViReal64(TriggerDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetApertureTimeInfo(self, Vi):
        ApertureTime = ViReal64()
        ApertureTimeUnits = ViInt32()
        status = self.dll.Ag34401_GetApertureTimeInfo(ViSession(Vi), byref(ApertureTime), byref(ApertureTimeUnits))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ApertureTime = float(ApertureTime.value)
        ApertureTimeUnits = int(ApertureTimeUnits.value)
        return ApertureTime, ApertureTimeUnits

    def GetAutoRangeValue(self, Vi):
        AutoRangeValue = ViReal64()
        status = self.dll.Ag34401_GetAutoRangeValue(ViSession(Vi), byref(AutoRangeValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AutoRangeValue.value)

    def ConfigureAutoZeroMode(self, Vi, AutoZeroMode):
        status = self.dll.Ag34401_ConfigureAutoZeroMode(ViSession(Vi), ViInt32(AutoZeroMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasCompleteDest(self, Vi, MeasCompleteDest):
        status = self.dll.Ag34401_ConfigureMeasCompleteDest(ViSession(Vi), ViInt32(MeasCompleteDest))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMultiPoint(self, Vi, TriggerCount, SampleCount, SampleTrigger, SampleInterval):
        status = self.dll.Ag34401_ConfigureMultiPoint(
            ViSession(Vi),
            ViInt32(TriggerCount),
            ViInt32(SampleCount),
            ViInt32(SampleTrigger),
            ViReal64(SampleInterval),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Read(self, Vi, MaxTimeMilliseconds):
        Reading = ViReal64()
        status = self.dll.Ag34401_Read(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Reading))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Reading.value)

    def ReadMultiPoint(self, Vi, MaxTimeMilliseconds, ArraySize):
        ReadingArray = ARRAY_ViReal64(ArraySize)
        ActualPts = ViInt32()
        status = self.dll.Ag34401_ReadMultiPoint(
            ViSession(Vi),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ArraySize),
            ReadingArray,
            byref(ActualPts),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReadingArray = list(ReadingArray)
        ActualPts = int(ActualPts.value)
        return ReadingArray, ActualPts

    def Abort(self, Vi):
        status = self.dll.Ag34401_Abort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Fetch(self, Vi, MaxTimeMilliseconds):
        Reading = ViReal64()
        status = self.dll.Ag34401_Fetch(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Reading))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Reading.value)

    def FetchMultiPoint(self, Vi, MaxTimeMilliseconds, ArraySize):
        ReadingArray = ARRAY_ViReal64(ArraySize)
        ActualPts = ViInt32()
        status = self.dll.Ag34401_FetchMultiPoint(
            ViSession(Vi),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ArraySize),
            ReadingArray,
            byref(ActualPts),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReadingArray = list(ReadingArray)
        ActualPts = int(ActualPts.value)
        return ReadingArray, ActualPts

    def Initiate(self, Vi):
        status = self.dll.Ag34401_Initiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsOverRange(self, Vi, MeasurementValue):
        IsOverRange = ViBoolean()
        status = self.dll.Ag34401_IsOverRange(ViSession(Vi), ViReal64(MeasurementValue), byref(IsOverRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(IsOverRange.value)

    def SendSoftwareTrigger(self, Vi):
        status = self.dll.Ag34401_SendSoftwareTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ACCurrentConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag34401_ACCurrentConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ACVoltageConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag34401_ACVoltageConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrationSecureCode(self, Vi, SecureState, Code):
        status = self.dll.Ag34401_CalibrationSecureCode(ViSession(Vi), ViBoolean(SecureState), ViConstString(Code))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrationCode(self, Vi, Code):
        status = self.dll.Ag34401_CalibrationCode(ViSession(Vi), ViConstString(Code))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DCCurrentConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag34401_DCCurrentConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DCVoltageConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag34401_DCVoltageConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayClear(self, Vi):
        status = self.dll.Ag34401_DisplayClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag34401_ResistanceConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusQueryRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.Ag34401_StatusQueryRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatusPreset(self, Vi):
        status = self.dll.Ag34401_StatusPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusConfigureRegister(self, Vi, Register, SubRegister, Val):
        status = self.dll.Ag34401_StatusConfigureRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusClear(self, Vi):
        status = self.dll.Ag34401_StatusClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusGetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.Ag34401_StatusGetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatusSetRegister(self, Vi, Register, SubRegister, Val):
        status = self.dll.Ag34401_StatusSetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        status = self.dll.Ag34401_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemEnableLocalControls(self, Vi):
        status = self.dll.Ag34401_SystemEnableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemDisableLocalControls(self, Vi):
        status = self.dll.Ag34401_SystemDisableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemBeep(self, Vi):
        status = self.dll.Ag34401_SystemBeep(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRead(self, Vi, Size, ValueBufferSize):
        Value = ARRAY_ViChar(1024)
        ActualSize = ViInt32()
        status = self.dll.Ag34401_SystemRead(
            ViSession(Vi),
            ViInt32(Size),
            ViInt32(ValueBufferSize),
            Value,
            byref(ActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Value = decode(Value)
        ActualSize = int(ActualSize.value)
        return Value, ActualSize

    def SystemWrite(self, Vi, CommandString):
        status = self.dll.Ag34401_SystemWrite(ViSession(Vi), ViConstString(CommandString))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
