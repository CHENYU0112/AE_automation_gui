from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import ag3446x_const as const
from .ag3446x_const import *


class ag3446x_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("Ag3446x.dll", "Ag3446x_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "ag3446x"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.Ag3446x_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.Ag3446x_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.Ag3446x_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.Ag3446x_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag3446x_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        status = self.dll.Ag3446x_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.Ag3446x_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, Vi):
        status = self.dll.Ag3446x_ClearInterchangeWarnings(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        status = self.dll.Ag3446x_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(InterchangeWarningBufferSize)
        status = self.dll.Ag3446x_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.Ag3446x_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetInterchangeCheck(self, Vi):
        status = self.dll.Ag3446x_ResetInterchangeCheck(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.Ag3446x_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag3446x_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.Ag3446x_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.Ag3446x_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.Ag3446x_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.Ag3446x_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.Ag3446x_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.Ag3446x_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.Ag3446x_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.Ag3446x_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.Ag3446x_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        status = self.dll.Ag3446x_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag3446x_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag3446x_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag3446x_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag3446x_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.Ag3446x_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasurement(self, Vi, Function, Range, Resolution):
        status = self.dll.Ag3446x_ConfigureMeasurement(
            ViSession(Vi), ViInt32(Function), ViReal64(Range), ViReal64(Resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyVoltageRange(self, Vi, FrequencyVoltageRange):
        status = self.dll.Ag3446x_ConfigureFrequencyVoltageRange(ViSession(Vi), ViReal64(FrequencyVoltageRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureACBandwidth(self, Vi, MinFreq, MaxFreq):
        status = self.dll.Ag3446x_ConfigureACBandwidth(ViSession(Vi), ViReal64(MinFreq), ViReal64(MaxFreq))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTransducerType(self, Vi, TransducerType):
        status = self.dll.Ag3446x_ConfigureTransducerType(ViSession(Vi), ViInt32(TransducerType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFixedRefJunction(self, Vi, FixedRefJunction):
        status = self.dll.Ag3446x_ConfigureFixedRefJunction(ViSession(Vi), ViReal64(FixedRefJunction))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRTD(self, Vi, Alpha, Resistance):
        status = self.dll.Ag3446x_ConfigureRTD(ViSession(Vi), ViReal64(Alpha), ViReal64(Resistance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureThermocouple(self, Vi, ThermocoupleType, RefJunctionType):
        status = self.dll.Ag3446x_ConfigureThermocouple(
            ViSession(Vi), ViInt32(ThermocoupleType), ViInt32(RefJunctionType)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerSlope(self, Vi, Polarity):
        status = self.dll.Ag3446x_ConfigureTriggerSlope(ViSession(Vi), ViInt32(Polarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, Vi, TriggerSource, TriggerDelay):
        status = self.dll.Ag3446x_ConfigureTrigger(ViSession(Vi), ViInt32(TriggerSource), ViReal64(TriggerDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetApertureTimeInfo(self, Vi):
        ApertureTime = ViReal64()
        ApertureTimeUnits = ViInt32()
        status = self.dll.Ag3446x_GetApertureTimeInfo(ViSession(Vi), byref(ApertureTime), byref(ApertureTimeUnits))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ApertureTime = float(ApertureTime.value)
        ApertureTimeUnits = int(ApertureTimeUnits.value)
        return ApertureTime, ApertureTimeUnits

    def GetAutoRangeValue(self, Vi):
        AutoRangeValue = ViReal64()
        status = self.dll.Ag3446x_GetAutoRangeValue(ViSession(Vi), byref(AutoRangeValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AutoRangeValue.value)

    def ConfigureAutoZeroMode(self, Vi, AutoZeroMode):
        status = self.dll.Ag3446x_ConfigureAutoZeroMode(ViSession(Vi), ViInt32(AutoZeroMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerLineFrequency(self, Vi, PowerLineFreq):
        status = self.dll.Ag3446x_ConfigurePowerLineFrequency(ViSession(Vi), ViReal64(PowerLineFreq))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasCompleteDest(self, Vi, MeasCompleteDest):
        status = self.dll.Ag3446x_ConfigureMeasCompleteDest(ViSession(Vi), ViInt32(MeasCompleteDest))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMultiPoint(self, Vi, TriggerCount, SampleCount, SampleTrigger, SampleInterval):
        status = self.dll.Ag3446x_ConfigureMultiPoint(
            ViSession(Vi),
            ViInt32(TriggerCount),
            ViInt32(SampleCount),
            ViInt32(SampleTrigger),
            ViReal64(SampleInterval),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Read(self, Vi, MaxTimeMilliseconds):
        Reading = ViReal64()
        status = self.dll.Ag3446x_Read(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Reading))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Reading.value)

    def ReadMultiPoint(self, Vi, MaxTimeMilliseconds, ArraySize):
        ReadingArray = ARRAY_ViReal64(ArraySize)
        ActualPts = ViInt32()
        status = self.dll.Ag3446x_ReadMultiPoint(
            ViSession(Vi),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ArraySize),
            ReadingArray,
            byref(ActualPts),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReadingArray = list(ReadingArray)
        ActualPts = int(ActualPts.value)
        return ReadingArray, ActualPts

    def Abort(self, Vi):
        status = self.dll.Ag3446x_Abort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Fetch(self, Vi, MaxTimeMilliseconds):
        Reading = ViReal64()
        status = self.dll.Ag3446x_Fetch(ViSession(Vi), ViInt32(MaxTimeMilliseconds), byref(Reading))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Reading.value)

    def FetchMultiPoint(self, Vi, MaxTimeMilliseconds, ArraySize):
        ReadingArray = ARRAY_ViReal64(ArraySize)
        ActualPts = ViInt32()
        status = self.dll.Ag3446x_FetchMultiPoint(
            ViSession(Vi),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ArraySize),
            ReadingArray,
            byref(ActualPts),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReadingArray = list(ReadingArray)
        ActualPts = int(ActualPts.value)
        return ReadingArray, ActualPts

    def Initiate(self, Vi):
        status = self.dll.Ag3446x_Initiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsOverRange(self, Vi, MeasurementValue):
        IsOverRange = ViBoolean()
        status = self.dll.Ag3446x_IsOverRange(ViSession(Vi), ViReal64(MeasurementValue), byref(IsOverRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(IsOverRange.value)

    def SendSoftwareTrigger(self, Vi):
        status = self.dll.Ag3446x_SendSoftwareTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetConfiguration(self, Vi):
        Function = ViInt32()
        Range = ViReal64()
        Resolution = ViReal64()
        status = self.dll.Ag3446x_GetConfiguration(ViSession(Vi), byref(Function), byref(Range), byref(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Function = int(Function.value)
        Range = float(Range.value)
        Resolution = float(Resolution.value)
        return Function, Range, Resolution

    def Calibrate(self, Vi):
        Val = ViInt32()
        status = self.dll.Ag3446x_Calibrate(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def SystemDisableLocalControls(self, Vi):
        status = self.dll.Ag3446x_SystemDisableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemEnableLocalControls(self, Vi):
        status = self.dll.Ag3446x_SystemEnableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRecallState(self, Vi, Identifier):
        status = self.dll.Ag3446x_SystemRecallState(ViSession(Vi), ViInt32(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemSaveState(self, Vi, Identifier):
        status = self.dll.Ag3446x_SystemSaveState(ViSession(Vi), ViInt32(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        status = self.dll.Ag3446x_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemBeep(self, Vi):
        status = self.dll.Ag3446x_SystemBeep(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemLockRelease(self, Vi):
        status = self.dll.Ag3446x_SystemLockRelease(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemLockRequest(self, Vi):
        Val = ViBoolean()
        status = self.dll.Ag3446x_SystemLockRequest(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def SystemPreset(self, Vi):
        status = self.dll.Ag3446x_SystemPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemReadBytes(self, Vi, ValBufferSize):
        Val = ARRAY_ViByte(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.Ag3446x_SystemReadBytes(ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.Ag3446x_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def SystemWriteBytes(self, Vi, BufferBufferSize, Buffer):
        _Buffer = (ViByte * len(Buffer))(*Buffer)
        status = self.dll.Ag3446x_SystemWriteBytes(ViSession(Vi), ViInt32(BufferBufferSize), _Buffer)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWriteString(self, Vi, DataBufferSize, Data):
        status = self.dll.Ag3446x_SystemWriteString(ViSession(Vi), ViInt32(DataBufferSize), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemClearIO(self, Vi):
        status = self.dll.Ag3446x_SystemClearIO(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViByte(BufferSize)
        ReturnCount = ViInt64()
        status = self.dll.Ag3446x_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def viWrite(self, Vi, Count, Buffer):
        _Buffer = (ViByte * len(Buffer))(*Buffer)
        ReturnCount = ViInt64()
        status = self.dll.Ag3446x_viWrite(ViSession(Vi), ViInt64(Count), _Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ReturnCount.value)

    def DisplayClear(self, Vi):
        status = self.dll.Ag3446x_DisplayClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def HCopyGetScreenImage(self, Vi, ImageBufferSize):
        Image = ARRAY_ViByte(ImageBufferSize)
        ImageActualSize = ViInt32()
        status = self.dll.Ag3446x_HCopyGetScreenImage(
            ViSession(Vi), ViInt32(ImageBufferSize), Image, byref(ImageActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ImageActualSize = int(ImageActualSize.value)
        return Image, ImageActualSize

    def StatusPreset(self, Vi):
        status = self.dll.Ag3446x_StatusPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusConfigureServiceRequest(self, Vi, Reason):
        status = self.dll.Ag3446x_StatusConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusClear(self, Vi):
        status = self.dll.Ag3446x_StatusClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusGetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.Ag3446x_StatusGetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatusSetRegister(self, Vi, Register, SubRegister, Val):
        status = self.dll.Ag3446x_StatusSetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementQueryLast(self, Vi):
        Val = ViReal64()
        status = self.dll.Ag3446x_MeasurementQueryLast(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def MeasurementRemoveReadings(self, Vi, NumReadings, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.Ag3446x_MeasurementRemoveReadings(
            ViSession(Vi),
            ViInt32(NumReadings),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def GetSecondaryMeasurement(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.Ag3446x_GetSecondaryMeasurement(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def ClearSecondaryMeasurement(self, Vi):
        status = self.dll.Ag3446x_ClearSecondaryMeasurement(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MathClear(self, Vi):
        status = self.dll.Ag3446x_MathClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatisticsClear(self, Vi):
        status = self.dll.Ag3446x_StatisticsClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatisticsGetData(self, Vi):
        Average = ViReal64()
        StandardDeviation = ViReal64()
        Minimum = ViReal64()
        Maximum = ViReal64()
        status = self.dll.Ag3446x_StatisticsGetData(
            ViSession(Vi),
            byref(Average),
            byref(StandardDeviation),
            byref(Minimum),
            byref(Maximum),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Average = float(Average.value)
        StandardDeviation = float(StandardDeviation.value)
        Minimum = float(Minimum.value)
        Maximum = float(Maximum.value)
        return Average, StandardDeviation, Minimum, Maximum

    def LimitClear(self, Vi):
        status = self.dll.Ag3446x_LimitClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def HistogramClear(self, Vi):
        status = self.dll.Ag3446x_HistogramClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def HistogramGetData(self, Vi, BinDataBufferSize):
        MinValue = ViReal64()
        MaxValue = ViReal64()
        Count = ViInt32()
        BinData = ARRAY_ViInt32(BinDataBufferSize)
        BinDataActualSize = ViInt32()
        status = self.dll.Ag3446x_HistogramGetData(
            ViSession(Vi),
            byref(MinValue),
            byref(MaxValue),
            byref(Count),
            ViInt32(BinDataBufferSize),
            BinData,
            byref(BinDataActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MinValue = float(MinValue.value)
        MaxValue = float(MaxValue.value)
        Count = int(Count.value)
        BinDataActualSize = int(BinDataActualSize.value)
        return MinValue, MaxValue, Count, BinData, BinDataActualSize

    def HistogramGetBinData(self, Vi, ValBufferSize):
        Val = ARRAY_ViInt32(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.Ag3446x_HistogramGetBinData(ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def FrequencyConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag3446x_FrequencyConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FrequencyMeasure(self, Vi, Range, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_FrequencyMeasure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ContinuityConfigure(self, Vi):
        status = self.dll.Ag3446x_ContinuityConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ContinuityMeasure(self, Vi):
        Val = ViReal64()
        status = self.dll.Ag3446x_ContinuityMeasure(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ACCurrentConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag3446x_ACCurrentConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ACCurrentConfigureAuto(self, Vi):
        status = self.dll.Ag3446x_ACCurrentConfigureAuto(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ACCurrentMeasure(self, Vi, Range, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_ACCurrentMeasure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ACCurrentMeasureAuto(self, Vi):
        Val = ViReal64()
        status = self.dll.Ag3446x_ACCurrentMeasureAuto(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def TemperatureFRTDConfigure(self, Vi, Resolution):
        status = self.dll.Ag3446x_TemperatureFRTDConfigure(ViSession(Vi), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureFRTDMeasure(self, Vi, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_TemperatureFRTDMeasure(ViSession(Vi), ViReal64(Resolution), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def TemperatureRTDConfigure(self, Vi, Resolution):
        status = self.dll.Ag3446x_TemperatureRTDConfigure(ViSession(Vi), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureRTDMeasure(self, Vi, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_TemperatureRTDMeasure(ViSession(Vi), ViReal64(Resolution), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def TemperatureFThermistorConfigure(self, Vi, Resolution):
        status = self.dll.Ag3446x_TemperatureFThermistorConfigure(ViSession(Vi), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureFThermistorMeasure(self, Vi, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag3446x_TemperatureFThermistorMeasure(ViSession(Vi), ViReal64(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def TemperatureThermistorMeasure(self, Vi, Resolution):
        RetVal = ViReal64()
        status = self.dll.Ag3446x_TemperatureThermistorMeasure(ViSession(Vi), ViReal64(Resolution), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def TemperatureThermistorConfigure(self, Vi, Resolution):
        status = self.dll.Ag3446x_TemperatureThermistorConfigure(ViSession(Vi), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureThermocoupleConfigure(self, Vi, Resolution, Type):
        status = self.dll.Ag3446x_TemperatureThermocoupleConfigure(ViSession(Vi), ViReal64(Resolution), ViInt32(Type))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TemperatureThermocoupleMeasure(self, Vi, Type, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_TemperatureThermocoupleMeasure(
            ViSession(Vi), ViInt32(Type), ViReal64(Resolution), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def DCCurrentMeasure(self, Vi, Range, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_DCCurrentMeasure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def DCCurrentConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag3446x_DCCurrentConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DCCurrentConfigureAuto(self, Vi):
        status = self.dll.Ag3446x_DCCurrentConfigureAuto(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DCCurrentMeasureAuto(self, Vi):
        Val = ViReal64()
        status = self.dll.Ag3446x_DCCurrentMeasureAuto(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def DCVoltageConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag3446x_DCVoltageConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DCVoltageConfigureAuto(self, Vi):
        status = self.dll.Ag3446x_DCVoltageConfigureAuto(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DCVoltageConfigureRatio(self, Vi, Range, Resolution):
        status = self.dll.Ag3446x_DCVoltageConfigureRatio(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DCVoltageConfigureRatioAuto(self, Vi):
        status = self.dll.Ag3446x_DCVoltageConfigureRatioAuto(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DCVoltageMeasure(self, Vi, Range, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_DCVoltageMeasure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def DCVoltageMeasureAuto(self, Vi):
        Val = ViReal64()
        status = self.dll.Ag3446x_DCVoltageMeasureAuto(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def DCVoltageMeasureRatio(self, Vi, Range, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_DCVoltageMeasureRatio(
            ViSession(Vi), ViReal64(Range), ViReal64(Resolution), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def DCVoltageMeasureRatioAuto(self, Vi):
        Val = ViReal64()
        status = self.dll.Ag3446x_DCVoltageMeasureRatioAuto(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ACVoltageConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag3446x_ACVoltageConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ACVoltageConfigureAuto(self, Vi):
        status = self.dll.Ag3446x_ACVoltageConfigureAuto(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ACVoltageMeasure(self, Vi, Range, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_ACVoltageMeasure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ACVoltageMeasureAuto(self, Vi):
        Val = ViReal64()
        status = self.dll.Ag3446x_ACVoltageMeasureAuto(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ResistanceConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag3446x_ResistanceConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceConfigureAuto(self, Vi):
        status = self.dll.Ag3446x_ResistanceConfigureAuto(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResistanceMeasure(self, Vi, Range, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_ResistanceMeasure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ResistanceMeasureAuto(self, Vi):
        Val = ViReal64()
        status = self.dll.Ag3446x_ResistanceMeasureAuto(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def FResistanceConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag3446x_FResistanceConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceConfigureAuto(self, Vi):
        status = self.dll.Ag3446x_FResistanceConfigureAuto(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FResistanceMeasure(self, Vi, Range, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_FResistanceMeasure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def FResistanceMeasureAuto(self, Vi):
        Val = ViReal64()
        status = self.dll.Ag3446x_FResistanceMeasureAuto(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def PeriodConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag3446x_PeriodConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def PeriodMeasure(self, Vi, Range, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_PeriodMeasure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def DiodeMeasure(self, Vi):
        Val = ViReal64()
        status = self.dll.Ag3446x_DiodeMeasure(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def DiodeConfigure(self, Vi):
        status = self.dll.Ag3446x_DiodeConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerConfigure(self, Vi, Delay, Source, Count, SampleCount):
        status = self.dll.Ag3446x_TriggerConfigure(
            ViSession(Vi),
            ViReal64(Delay),
            ViInt32(Source),
            ViInt32(Count),
            ViInt32(SampleCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerConfigureSingle(self, Vi, Delay, Source):
        status = self.dll.Ag3446x_TriggerConfigureSingle(ViSession(Vi), ViReal64(Delay), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryCopy(self, Vi, SourceFile, DestinationFile):
        status = self.dll.Ag3446x_MemoryCopy(ViSession(Vi), ViConstString(SourceFile), ViConstString(DestinationFile))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemorySetDownloadFileName(self, Vi, FileName):
        status = self.dll.Ag3446x_MemorySetDownloadFileName(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryGetCatalog(self, Vi, FolderName, FileListBufferSize):
        MemoryUsed = ViInt64()
        MemoryFree = ViInt64()
        FileList = ARRAY_ViChar(FileListBufferSize)
        status = self.dll.Ag3446x_MemoryGetCatalog(
            ViSession(Vi),
            ViConstString(FolderName),
            byref(MemoryUsed),
            byref(MemoryFree),
            ViInt32(FileListBufferSize),
            FileList,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MemoryUsed = int(MemoryUsed.value)
        MemoryFree = int(MemoryFree.value)
        FileList = decode(FileList)
        return MemoryUsed, MemoryFree, FileList

    def MemoryLoadState(self, Vi, FileName):
        status = self.dll.Ag3446x_MemoryLoadState(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryStoreState(self, Vi, FileName):
        status = self.dll.Ag3446x_MemoryStoreState(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryUploadFile(self, Vi, FileName, ValBufferSize):
        Val = ARRAY_ViByte(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.Ag3446x_MemoryUploadFile(
            ViSession(Vi),
            ViConstString(FileName),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def MemoryRemoveFile(self, Vi, FileName):
        status = self.dll.Ag3446x_MemoryRemoveFile(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryDownloadData(self, Vi, DataBufferSize, Data):
        status = self.dll.Ag3446x_MemoryDownloadData(ViSession(Vi), ViInt32(DataBufferSize), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryMoveFiles(self, Vi, SourceFile, DestinationFileBufferSize, DestinationFile):
        status = self.dll.Ag3446x_MemoryMoveFiles(
            ViSession(Vi),
            ViConstString(SourceFile),
            ViInt32(DestinationFileBufferSize),
            ViConstString(DestinationFile),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryMakeDirectory(self, Vi, FolderName):
        status = self.dll.Ag3446x_MemoryMakeDirectory(ViSession(Vi), ViConstString(FolderName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryRemoveDirectory(self, Vi, FolderNameBufferSize, FolderName):
        status = self.dll.Ag3446x_MemoryRemoveDirectory(
            ViSession(Vi), ViInt32(FolderNameBufferSize), ViConstString(FolderName)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryStoreData(self, Vi, FileName):
        status = self.dll.Ag3446x_MemoryStoreData(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryStorePreferences(self, Vi, FileName):
        status = self.dll.Ag3446x_MemoryStorePreferences(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryGetDownloadFileName(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.Ag3446x_MemoryGetDownloadFileName(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def MemoryIsValidState(self, Vi, FileName):
        Val = ViBoolean()
        status = self.dll.Ag3446x_MemoryIsValidState(ViSession(Vi), ViConstString(FileName), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def GetRecallState(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.Ag3446x_GetRecallState(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def MemorySetRecallState(self, Vi, FileName):
        status = self.dll.Ag3446x_MemorySetRecallState(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CapacitanceMeasure(self, Vi, Range, Resolution):
        Val = ViReal64()
        status = self.dll.Ag3446x_CapacitanceMeasure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def CapacitanceConfigure(self, Vi, Range, Resolution):
        status = self.dll.Ag3446x_CapacitanceConfigure(ViSession(Vi), ViReal64(Range), ViReal64(Resolution))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
