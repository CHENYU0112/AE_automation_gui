from __future__ import annotations

from .ag3446x import *


class IIviDmmAC:
    def __init__(self, root):
        self.root = root
        """:type : pverify.drivers.Dmm.ag3446x.IIviDmm.IIviDmm"""

    @property
    def FrequencyMax(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 7)

    @FrequencyMax.setter
    def FrequencyMax(self, value):
        """
        The maximum frequency component of the input signal for AC measurements. The
        value of this property affects instrument behavior only when the Function
        property is set to an AC voltage or AC current measurement.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 7, value)

    @property
    def FrequencyMin(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 6)

    @FrequencyMin.setter
    def FrequencyMin(self, value):
        """
        The minimum frequency component of the input signal for AC measurements. The
        value of this property affects instrument behavior only when the Function
        property is set to an AC voltage or AC current measurement.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 6, value)

    def ConfigureBandwidth(self, MinFreq, MaxFreq):
        """
        Configures the FrequencyMax and FrequencyMin properties for DMMs that take AC
        voltage or AC current measurements.

        :param MinFreq: The minimum frequency component of the input signal for AC measurements.
        :type MinFreq: float
        :param MaxFreq: The maximum frequency component of the input signal for AC measurements.
        :type MaxFreq: float
        """
        self.root.dllwrap.ConfigureACBandwidth(MinFreq, MaxFreq)
        self.FrequencyMin = MinFreq
        self.FrequencyMax = MaxFreq
