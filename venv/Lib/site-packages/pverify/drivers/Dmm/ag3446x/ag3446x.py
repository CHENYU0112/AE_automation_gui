from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .ag3446x_dllwrap import *


class ag3446x(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = ag3446x_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ConfigureMeasurement(self, Function, Range, Resolution):
        """

        :param Function:
        :type Function:
        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ConfigureMeasurement(self._vi, Function, Range, Resolution)

    def ConfigureFrequencyVoltageRange(self, FrequencyVoltageRange):
        """

        :param FrequencyVoltageRange:
        :type FrequencyVoltageRange:
        """
        return self._dllwrap.ConfigureFrequencyVoltageRange(self._vi, FrequencyVoltageRange)

    def ConfigureACBandwidth(self, MinFreq, MaxFreq):
        """

        :param MinFreq:
        :type MinFreq:
        :param MaxFreq:
        :type MaxFreq:
        """
        return self._dllwrap.ConfigureACBandwidth(self._vi, MinFreq, MaxFreq)

    def ConfigureTransducerType(self, TransducerType):
        """

        :param TransducerType:
        :type TransducerType:
        """
        return self._dllwrap.ConfigureTransducerType(self._vi, TransducerType)

    def ConfigureFixedRefJunction(self, FixedRefJunction):
        """

        :param FixedRefJunction:
        :type FixedRefJunction:
        """
        return self._dllwrap.ConfigureFixedRefJunction(self._vi, FixedRefJunction)

    def ConfigureRTD(self, Alpha, Resistance):
        """

        :param Alpha:
        :type Alpha:
        :param Resistance:
        :type Resistance:
        """
        return self._dllwrap.ConfigureRTD(self._vi, Alpha, Resistance)

    def ConfigureThermocouple(self, ThermocoupleType, RefJunctionType):
        """

        :param ThermocoupleType:
        :type ThermocoupleType:
        :param RefJunctionType:
        :type RefJunctionType:
        """
        return self._dllwrap.ConfigureThermocouple(self._vi, ThermocoupleType, RefJunctionType)

    def ConfigureTriggerSlope(self, Polarity):
        """

        :param Polarity:
        :type Polarity:
        """
        return self._dllwrap.ConfigureTriggerSlope(self._vi, Polarity)

    def ConfigureTrigger(self, TriggerSource, TriggerDelay):
        """

        :param TriggerSource:
        :type TriggerSource:
        :param TriggerDelay:
        :type TriggerDelay:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, TriggerSource, TriggerDelay)

    def GetApertureTimeInfo(self):
        """"""
        return self._dllwrap.GetApertureTimeInfo(self._vi)

    def GetAutoRangeValue(self):
        """"""
        return self._dllwrap.GetAutoRangeValue(self._vi)

    def ConfigureAutoZeroMode(self, AutoZeroMode):
        """

        :param AutoZeroMode:
        :type AutoZeroMode:
        """
        return self._dllwrap.ConfigureAutoZeroMode(self._vi, AutoZeroMode)

    def ConfigurePowerLineFrequency(self, PowerLineFreq):
        """

        :param PowerLineFreq:
        :type PowerLineFreq:
        """
        return self._dllwrap.ConfigurePowerLineFrequency(self._vi, PowerLineFreq)

    def ConfigureMeasCompleteDest(self, MeasCompleteDest):
        """

        :param MeasCompleteDest:
        :type MeasCompleteDest:
        """
        return self._dllwrap.ConfigureMeasCompleteDest(self._vi, MeasCompleteDest)

    def ConfigureMultiPoint(self, TriggerCount, SampleCount, SampleTrigger, SampleInterval):
        """

        :param TriggerCount:
        :type TriggerCount:
        :param SampleCount:
        :type SampleCount:
        :param SampleTrigger:
        :type SampleTrigger:
        :param SampleInterval:
        :type SampleInterval:
        """
        return self._dllwrap.ConfigureMultiPoint(self._vi, TriggerCount, SampleCount, SampleTrigger, SampleInterval)

    def Read(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Read(self._vi, MaxTimeMilliseconds)

    def ReadMultiPoint(self, MaxTimeMilliseconds, ArraySize):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ArraySize:
        :type ArraySize:
        """
        return self._dllwrap.ReadMultiPoint(self._vi, MaxTimeMilliseconds, ArraySize)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def Fetch(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.Fetch(self._vi, MaxTimeMilliseconds)

    def FetchMultiPoint(self, MaxTimeMilliseconds, ArraySize):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ArraySize:
        :type ArraySize:
        """
        return self._dllwrap.FetchMultiPoint(self._vi, MaxTimeMilliseconds, ArraySize)

    def Initiate(self):
        """"""
        return self._dllwrap.Initiate(self._vi)

    def IsOverRange(self, MeasurementValue):
        """

        :param MeasurementValue:
        :type MeasurementValue:
        """
        return self._dllwrap.IsOverRange(self._vi, MeasurementValue)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def GetConfiguration(self):
        """"""
        return self._dllwrap.GetConfiguration(self._vi)

    def Calibrate(self):
        """"""
        return self._dllwrap.Calibrate(self._vi)

    def SystemDisableLocalControls(self):
        """"""
        return self._dllwrap.SystemDisableLocalControls(self._vi)

    def SystemEnableLocalControls(self):
        """"""
        return self._dllwrap.SystemEnableLocalControls(self._vi)

    def SystemRecallState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemRecallState(self._vi, Identifier)

    def SystemSaveState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemSaveState(self._vi, Identifier)

    def SystemWaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.SystemWaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def SystemBeep(self):
        """"""
        return self._dllwrap.SystemBeep(self._vi)

    def SystemLockRelease(self):
        """"""
        return self._dllwrap.SystemLockRelease(self._vi)

    def SystemLockRequest(self):
        """"""
        return self._dllwrap.SystemLockRequest(self._vi)

    def SystemPreset(self):
        """"""
        return self._dllwrap.SystemPreset(self._vi)

    def SystemReadBytes(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadBytes(self._vi, ValBufferSize)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def SystemWriteBytes(self, BufferBufferSize, Buffer):
        """

        :param BufferBufferSize:
        :type BufferBufferSize:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.SystemWriteBytes(self._vi, BufferBufferSize, Buffer)

    def SystemWriteString(self, DataBufferSize, Data):
        """

        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, DataBufferSize, Data)

    def SystemClearIO(self):
        """"""
        return self._dllwrap.SystemClearIO(self._vi)

    def viRead(self, BufferSize):
        """

        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.viRead(self._vi, BufferSize)

    def viWrite(self, Count, Buffer):
        """

        :param Count:
        :type Count:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.viWrite(self._vi, Count, Buffer)

    def DisplayClear(self):
        """"""
        return self._dllwrap.DisplayClear(self._vi)

    def HCopyGetScreenImage(self, ImageBufferSize):
        """

        :param ImageBufferSize:
        :type ImageBufferSize:
        """
        return self._dllwrap.HCopyGetScreenImage(self._vi, ImageBufferSize)

    def StatusPreset(self):
        """"""
        return self._dllwrap.StatusPreset(self._vi)

    def StatusConfigureServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.StatusConfigureServiceRequest(self._vi, Reason)

    def StatusClear(self):
        """"""
        return self._dllwrap.StatusClear(self._vi)

    def StatusGetRegister(self, Register, SubRegister):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusGetRegister(self._vi, Register, SubRegister)

    def StatusSetRegister(self, Register, SubRegister, Val):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusSetRegister(self._vi, Register, SubRegister, Val)

    def MeasurementQueryLast(self):
        """"""
        return self._dllwrap.MeasurementQueryLast(self._vi)

    def MeasurementRemoveReadings(self, NumReadings, ValBufferSize):
        """

        :param NumReadings:
        :type NumReadings:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.MeasurementRemoveReadings(self._vi, NumReadings, ValBufferSize)

    def GetSecondaryMeasurement(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.GetSecondaryMeasurement(self._vi, ValBufferSize)

    def ClearSecondaryMeasurement(self):
        """"""
        return self._dllwrap.ClearSecondaryMeasurement(self._vi)

    def MathClear(self):
        """"""
        return self._dllwrap.MathClear(self._vi)

    def StatisticsClear(self):
        """"""
        return self._dllwrap.StatisticsClear(self._vi)

    def StatisticsGetData(self):
        """"""
        return self._dllwrap.StatisticsGetData(self._vi)

    def LimitClear(self):
        """"""
        return self._dllwrap.LimitClear(self._vi)

    def HistogramClear(self):
        """"""
        return self._dllwrap.HistogramClear(self._vi)

    def HistogramGetData(self, BinDataBufferSize):
        """

        :param BinDataBufferSize:
        :type BinDataBufferSize:
        """
        return self._dllwrap.HistogramGetData(self._vi, BinDataBufferSize)

    def HistogramGetBinData(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.HistogramGetBinData(self._vi, ValBufferSize)

    def FrequencyConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.FrequencyConfigure(self._vi, Range, Resolution)

    def FrequencyMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.FrequencyMeasure(self._vi, Range, Resolution)

    def ContinuityConfigure(self):
        """"""
        return self._dllwrap.ContinuityConfigure(self._vi)

    def ContinuityMeasure(self):
        """"""
        return self._dllwrap.ContinuityMeasure(self._vi)

    def ACCurrentConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ACCurrentConfigure(self._vi, Range, Resolution)

    def ACCurrentConfigureAuto(self):
        """"""
        return self._dllwrap.ACCurrentConfigureAuto(self._vi)

    def ACCurrentMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ACCurrentMeasure(self._vi, Range, Resolution)

    def ACCurrentMeasureAuto(self):
        """"""
        return self._dllwrap.ACCurrentMeasureAuto(self._vi)

    def TemperatureFRTDConfigure(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureFRTDConfigure(self._vi, Resolution)

    def TemperatureFRTDMeasure(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureFRTDMeasure(self._vi, Resolution)

    def TemperatureRTDConfigure(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureRTDConfigure(self._vi, Resolution)

    def TemperatureRTDMeasure(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureRTDMeasure(self._vi, Resolution)

    def TemperatureFThermistorConfigure(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureFThermistorConfigure(self._vi, Resolution)

    def TemperatureFThermistorMeasure(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureFThermistorMeasure(self._vi, Resolution)

    def TemperatureThermistorMeasure(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureThermistorMeasure(self._vi, Resolution)

    def TemperatureThermistorConfigure(self, Resolution):
        """

        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureThermistorConfigure(self._vi, Resolution)

    def TemperatureThermocoupleConfigure(self, Resolution, Type):
        """

        :param Resolution:
        :type Resolution:
        :param Type:
        :type Type:
        """
        return self._dllwrap.TemperatureThermocoupleConfigure(self._vi, Resolution, Type)

    def TemperatureThermocoupleMeasure(self, Type, Resolution):
        """

        :param Type:
        :type Type:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.TemperatureThermocoupleMeasure(self._vi, Type, Resolution)

    def DCCurrentMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.DCCurrentMeasure(self._vi, Range, Resolution)

    def DCCurrentConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.DCCurrentConfigure(self._vi, Range, Resolution)

    def DCCurrentConfigureAuto(self):
        """"""
        return self._dllwrap.DCCurrentConfigureAuto(self._vi)

    def DCCurrentMeasureAuto(self):
        """"""
        return self._dllwrap.DCCurrentMeasureAuto(self._vi)

    def DCVoltageConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.DCVoltageConfigure(self._vi, Range, Resolution)

    def DCVoltageConfigureAuto(self):
        """"""
        return self._dllwrap.DCVoltageConfigureAuto(self._vi)

    def DCVoltageConfigureRatio(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.DCVoltageConfigureRatio(self._vi, Range, Resolution)

    def DCVoltageConfigureRatioAuto(self):
        """"""
        return self._dllwrap.DCVoltageConfigureRatioAuto(self._vi)

    def DCVoltageMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.DCVoltageMeasure(self._vi, Range, Resolution)

    def DCVoltageMeasureAuto(self):
        """"""
        return self._dllwrap.DCVoltageMeasureAuto(self._vi)

    def DCVoltageMeasureRatio(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.DCVoltageMeasureRatio(self._vi, Range, Resolution)

    def DCVoltageMeasureRatioAuto(self):
        """"""
        return self._dllwrap.DCVoltageMeasureRatioAuto(self._vi)

    def ACVoltageConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ACVoltageConfigure(self._vi, Range, Resolution)

    def ACVoltageConfigureAuto(self):
        """"""
        return self._dllwrap.ACVoltageConfigureAuto(self._vi)

    def ACVoltageMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ACVoltageMeasure(self._vi, Range, Resolution)

    def ACVoltageMeasureAuto(self):
        """"""
        return self._dllwrap.ACVoltageMeasureAuto(self._vi)

    def ResistanceConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ResistanceConfigure(self._vi, Range, Resolution)

    def ResistanceConfigureAuto(self):
        """"""
        return self._dllwrap.ResistanceConfigureAuto(self._vi)

    def ResistanceMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.ResistanceMeasure(self._vi, Range, Resolution)

    def ResistanceMeasureAuto(self):
        """"""
        return self._dllwrap.ResistanceMeasureAuto(self._vi)

    def FResistanceConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.FResistanceConfigure(self._vi, Range, Resolution)

    def FResistanceConfigureAuto(self):
        """"""
        return self._dllwrap.FResistanceConfigureAuto(self._vi)

    def FResistanceMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.FResistanceMeasure(self._vi, Range, Resolution)

    def FResistanceMeasureAuto(self):
        """"""
        return self._dllwrap.FResistanceMeasureAuto(self._vi)

    def PeriodConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.PeriodConfigure(self._vi, Range, Resolution)

    def PeriodMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.PeriodMeasure(self._vi, Range, Resolution)

    def DiodeMeasure(self):
        """"""
        return self._dllwrap.DiodeMeasure(self._vi)

    def DiodeConfigure(self):
        """"""
        return self._dllwrap.DiodeConfigure(self._vi)

    def TriggerConfigure(self, Delay, Source, Count, SampleCount):
        """

        :param Delay:
        :type Delay:
        :param Source:
        :type Source:
        :param Count:
        :type Count:
        :param SampleCount:
        :type SampleCount:
        """
        return self._dllwrap.TriggerConfigure(self._vi, Delay, Source, Count, SampleCount)

    def TriggerConfigureSingle(self, Delay, Source):
        """

        :param Delay:
        :type Delay:
        :param Source:
        :type Source:
        """
        return self._dllwrap.TriggerConfigureSingle(self._vi, Delay, Source)

    def MemoryCopy(self, SourceFile, DestinationFile):
        """

        :param SourceFile:
        :type SourceFile:
        :param DestinationFile:
        :type DestinationFile:
        """
        return self._dllwrap.MemoryCopy(self._vi, SourceFile, DestinationFile)

    def MemorySetDownloadFileName(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemorySetDownloadFileName(self._vi, FileName)

    def MemoryGetCatalog(self, FolderName, FileListBufferSize):
        """

        :param FolderName:
        :type FolderName:
        :param FileListBufferSize:
        :type FileListBufferSize:
        """
        return self._dllwrap.MemoryGetCatalog(self._vi, FolderName, FileListBufferSize)

    def MemoryLoadState(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryLoadState(self._vi, FileName)

    def MemoryStoreState(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryStoreState(self._vi, FileName)

    def MemoryUploadFile(self, FileName, ValBufferSize):
        """

        :param FileName:
        :type FileName:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.MemoryUploadFile(self._vi, FileName, ValBufferSize)

    def MemoryRemoveFile(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryRemoveFile(self._vi, FileName)

    def MemoryDownloadData(self, DataBufferSize, Data):
        """

        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.MemoryDownloadData(self._vi, DataBufferSize, Data)

    def MemoryMoveFiles(self, SourceFile, DestinationFileBufferSize, DestinationFile):
        """

        :param SourceFile:
        :type SourceFile:
        :param DestinationFileBufferSize:
        :type DestinationFileBufferSize:
        :param DestinationFile:
        :type DestinationFile:
        """
        return self._dllwrap.MemoryMoveFiles(self._vi, SourceFile, DestinationFileBufferSize, DestinationFile)

    def MemoryMakeDirectory(self, FolderName):
        """

        :param FolderName:
        :type FolderName:
        """
        return self._dllwrap.MemoryMakeDirectory(self._vi, FolderName)

    def MemoryRemoveDirectory(self, FolderNameBufferSize, FolderName):
        """

        :param FolderNameBufferSize:
        :type FolderNameBufferSize:
        :param FolderName:
        :type FolderName:
        """
        return self._dllwrap.MemoryRemoveDirectory(self._vi, FolderNameBufferSize, FolderName)

    def MemoryStoreData(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryStoreData(self._vi, FileName)

    def MemoryStorePreferences(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryStorePreferences(self._vi, FileName)

    def MemoryGetDownloadFileName(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.MemoryGetDownloadFileName(self._vi, ValBufferSize)

    def MemoryIsValidState(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryIsValidState(self._vi, FileName)

    def GetRecallState(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.GetRecallState(self._vi, ValBufferSize)

    def MemorySetRecallState(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemorySetRecallState(self._vi, FileName)

    def CapacitanceMeasure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.CapacitanceMeasure(self._vi, Range, Resolution)

    def CapacitanceConfigure(self, Range, Resolution):
        """

        :param Range:
        :type Range:
        :param Resolution:
        :type Resolution:
        """
        return self._dllwrap.CapacitanceConfigure(self._vi, Range, Resolution)
