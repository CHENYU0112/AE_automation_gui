from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import fl884x_const as const
from .fl884x_const import *


class fl884x_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("fl884x_32.dll", "fl884x_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "fl884x"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        status = self.dll.fl884x_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        status = self.dll.fl884x_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViConstString(optionString),
            byref(newVi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(newVi.value)

    def close(self, vi):
        status = self.dll.fl884x_close(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(1024)
        status = self.dll.fl884x_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.fl884x_LockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.fl884x_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def ConfigureMeasurement(self, vi, function, range, resolution):
        status = self.dll.fl884x_ConfigureMeasurement(
            ViSession(vi), ViInt32(function), ViReal64(range), ViReal64(resolution)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, vi, triggerSource, triggerDelay):
        status = self.dll.fl884x_ConfigureTrigger(ViSession(vi), ViInt32(triggerSource), ViReal64(triggerDelay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Read(self, vi, maxTime):
        reading = ViReal64()
        status = self.dll.fl884x_Read(ViSession(vi), ViInt32(maxTime), byref(reading))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(reading.value)

    def Fetch(self, vi, maxTime):
        reading = ViReal64()
        status = self.dll.fl884x_Fetch(ViSession(vi), ViInt32(maxTime), byref(reading))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(reading.value)

    def Abort(self, vi):
        status = self.dll.fl884x_Abort(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Initiate(self, vi):
        status = self.dll.fl884x_Initiate(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsOverRange(self, vi, measurementValue):
        isOverRange = ViBoolean()
        status = self.dll.fl884x_IsOverRange(ViSession(vi), ViReal64(measurementValue), byref(isOverRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(isOverRange.value)

    def ConfigureMeasCompleteDest(self, vi, measCompleteDest):
        status = self.dll.fl884x_ConfigureMeasCompleteDest(ViSession(vi), ViInt32(measCompleteDest))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMultiPoint(self, vi, triggerCount, sampleCount, sampleTrigger, sampleInterval):
        status = self.dll.fl884x_ConfigureMultiPoint(
            ViSession(vi),
            ViInt32(triggerCount),
            ViInt32(sampleCount),
            ViInt32(sampleTrigger),
            ViReal64(sampleInterval),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadMultiPoint(self, vi, maxTime, arraySize):
        readingArray = ARRAY_ViReal64(arraySize)
        actualPts = ViInt32()
        status = self.dll.fl884x_ReadMultiPoint(
            ViSession(vi),
            ViInt32(maxTime),
            ViInt32(arraySize),
            readingArray,
            byref(actualPts),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        readingArray = list(readingArray)
        actualPts = int(actualPts.value)
        return readingArray, actualPts

    def FetchMultiPoint(self, vi, maxTime, arraySize):
        readingArray = ARRAY_ViReal64(arraySize)
        actualPts = ViInt32()
        status = self.dll.fl884x_FetchMultiPoint(
            ViSession(vi),
            ViInt32(maxTime),
            ViInt32(arraySize),
            readingArray,
            byref(actualPts),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        readingArray = list(readingArray)
        actualPts = int(actualPts.value)
        return readingArray, actualPts

    def FetchMinMax(self, instrumentHandle, maximumTime):
        minimumReading = ViReal64()
        maximumReading = ViReal64()
        averageReading = ViReal64()
        count = ViInt32()
        status = self.dll.fl884x_FetchMinMax(
            ViSession(instrumentHandle),
            ViInt32(maximumTime),
            byref(minimumReading),
            byref(maximumReading),
            byref(averageReading),
            byref(count),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        minimumReading = float(minimumReading.value)
        maximumReading = float(maximumReading.value)
        averageReading = float(averageReading.value)
        count = int(count.value)
        return minimumReading, maximumReading, averageReading, count

    def SendSoftwareTrigger(self, vi):
        status = self.dll.fl884x_SendSoftwareTrigger(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureACBandwidth(self, vi, minFreq, maxFreq):
        status = self.dll.fl884x_ConfigureACBandwidth(ViSession(vi), ViReal64(minFreq), ViReal64(maxFreq))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFrequencyVoltageRange(self, vi, frequencyVoltageRange):
        status = self.dll.fl884x_ConfigureFrequencyVoltageRange(ViSession(vi), ViReal64(frequencyVoltageRange))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTransducerType(self, vi, transducerType):
        status = self.dll.fl884x_ConfigureTransducerType(ViSession(vi), ViInt32(transducerType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRTD(self, vi, alpha, resistance):
        status = self.dll.fl884x_ConfigureRTD(ViSession(vi), ViReal64(alpha), ViReal64(resistance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetApertureTimeInfo(self, vi):
        apertureTime = ViReal64()
        apertureTimeUnits = ViInt32()
        status = self.dll.fl884x_GetApertureTimeInfo(ViSession(vi), byref(apertureTime), byref(apertureTimeUnits))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        apertureTime = float(apertureTime.value)
        apertureTimeUnits = int(apertureTimeUnits.value)
        return apertureTime, apertureTimeUnits

    def GetAutoRangeValue(self, vi):
        autoRangeValue = ViReal64()
        status = self.dll.fl884x_GetAutoRangeValue(ViSession(vi), byref(autoRangeValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(autoRangeValue.value)

    def ConfigureAutoZeroMode(self, vi, autoZeroMode):
        status = self.dll.fl884x_ConfigureAutoZeroMode(ViSession(vi), ViInt32(autoZeroMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDB(self, vi, dBEnable, dBReferenceImpedance):
        status = self.dll.fl884x_ConfigureDB(ViSession(vi), ViBoolean(dBEnable), ViReal64(dBReferenceImpedance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDBM(self, vi, dbmEnable, dBmReferenceImpedance):
        status = self.dll.fl884x_ConfigureDBM(ViSession(vi), ViBoolean(dbmEnable), ViInt32(dBmReferenceImpedance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLimit(self, vi, limitEnable, lowerLimit, upperLimit):
        status = self.dll.fl884x_ConfigureLimit(
            ViSession(vi),
            ViBoolean(limitEnable),
            ViReal64(lowerLimit),
            ViReal64(upperLimit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNull(self, vi, nullEnable, nullOffset):
        status = self.dll.fl884x_ConfigureNull(ViSession(vi), ViBoolean(nullEnable), ViReal64(nullOffset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMinMax(self, vi, minMaxEnable):
        status = self.dll.fl884x_ConfigureMinMax(ViSession(vi), ViBoolean(minMaxEnable))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        status = self.dll.fl884x_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        status = self.dll.fl884x_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(errorMessage)

    def GetError(self, vi, bufferSize):
        code = ViStatus()
        description = ARRAY_ViChar(1024)
        status = self.dll.fl884x_GetError(ViSession(vi), byref(code), ViInt32(bufferSize), description)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        description = decode(description)
        return code, description

    def ClearError(self, vi):
        status = self.dll.fl884x_ClearError(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(1024)
        status = self.dll.fl884x_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        status = self.dll.fl884x_ResetInterchangeCheck(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, vi):
        status = self.dll.fl884x_ClearInterchangeWarnings(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InvalidateAllAttributes(self, vi):
        status = self.dll.fl884x_InvalidateAllAttributes(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def reset(self, vi):
        status = self.dll.fl884x_reset(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, vi):
        status = self.dll.fl884x_ResetWithDefaults(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        status = self.dll.fl884x_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        status = self.dll.fl884x_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def Disable(self, vi):
        status = self.dll.fl884x_Disable(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def WriteInstrData(self, vi, writeBuffer):
        status = self.dll.fl884x_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        status = self.dll.fl884x_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        status = self.dll.fl884x_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        status = self.dll.fl884x_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(1024)
        status = self.dll.fl884x_GetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViInt32(bufSize),
            value,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        status = self.dll.fl884x_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        status = self.dll.fl884x_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        status = self.dll.fl884x_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        status = self.dll.fl884x_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        status = self.dll.fl884x_SetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        status = self.dll.fl884x_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        status = self.dll.fl884x_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        status = self.dll.fl884x_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        status = self.dll.fl884x_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        status = self.dll.fl884x_CheckAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        status = self.dll.fl884x_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        status = self.dll.fl884x_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
