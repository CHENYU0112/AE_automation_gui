from __future__ import annotations

from typing import TYPE_CHECKING

import pyvisa as visa

from pverify.core.lab.driver_identity import IdentityBasic

if TYPE_CHECKING:
    from pyvisa.resources.serial import MessageBasedResource


class TALOS:
    __version__ = "1.0.0"

    class TALOSError(Exception):
        pass  # Raise this exception if any error happens

    def __init__(self):
        self._rm: visa.ResourceManager = None
        self._inst: MessageBasedResource = None
        self.__Initialized = False
        self.__Identity = IdentityBasic(fct_idn=self.__idn, fct_drv_rev=self.__drv_rev, fct_fw_rev=self.__fw_rev)

    def __idn(self):
        """
        Returns an identification string of the instrument
        """
        if self.Initialized:
            return self._inst.query("*IDN?")
        else:
            return ""

    def __drv_rev(self):
        """
        Returns the driver version
        """
        return self.__version__

    def __fw_rev(self):
        """
        Returns the FW revision of the instrument
        """
        if self.Initialized:
            return self._inst.query("*IDN?")
        else:
            return ""

    @property
    def Initialized(self):
        """
        Shows if the instrument connection has been established
        """
        return self.__Initialized

    @property
    def Identity(self):
        """
        A pointer to the Identity interface
        """
        return self.__Identity

    def Initialize(
        self,
        ResourceName: str,
        IdQuery: int = 1,
        Reset: int = 1,
        OptionString="simulate=False",
    ):
        """
        Opens the I/O session to the instrument. Driver methods and properties
        that access the instrument are only accessible after Initialize is
        called. Initialize optionally performs a Reset and queries the
        instrument to validate the instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies
            the address of the instrument, such as a VISA resource descriptor
            string.
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :param Reset: Specifies whether to reset the instrument.
        """

        self._rm = visa.ResourceManager()
        self._inst: MessageBasedResource = self._rm.open_resource(resource_name=ResourceName)

        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and
        properties that access the instrument are not accessible after Close
        is called.
        """
        if self.Initialized:
            self._inst.close()
            self.__Initialized = False

    def next_device(self, site: str, bin_result: str):
        """
        After the test, the tester send the BIN result and handler will continue handling
        :param site:  Indicator of tested contact site
        :param bin_result: BIn result of the specific site
        :return:
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        cmd = site + " BIN " + bin_result
        return self._inst.write(cmd)

    def check_ready(self):
        """
        :return: the number of contact sites which is ready for test
           0 = handler is busy, note site is ready for test
           1-8 site number ready for test
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        return self._inst.query("SQB?")

    def end_of_cycle(self):
        """
        Handler stops automatic test after and of the actual cycle
        :return:
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        return self._inst.write("EOCH")

    def tested_devices(self):
        """
        :return: the number n (Integer) od tested devices
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        return self._inst.query("TPS?")

    def pos_actual_device(self):
        """
        :return: the last pick position
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        return self._inst.query("PIPOS?")

    def pos_last_device(self):
        """
        :return: the last place position
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        return self._inst.query("PLPOS?")

    def current_temp(self):
        """
        :return: the current temperature x(char)
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        return self._inst.query("TMP?")

    def set_new_temp(self, temp: str):
        """
        :param temp: new set-temperature
        :return: echoes the command
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        return self._inst.query("TMP 1," + temp)

    def temp_adjustment(self, temp_adj: str):
        """
        Set a new temperature during the testprocedure to regulate on a user set-temperature
        :param temp_adj: new set-temperature
        :return: echoes the command
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        return self._inst.query("TADJ 1," + temp_adj)

    def soak_time(self, time: str):
        """
        :param time: soacktime
        :return: echoes the command
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        cmd = "ST!" + time
        return self._inst.query(cmd)

    def manual_heatup(self):
        """
        Tester forces a manual heatup if cyclic heatup is activated and with corresponding parameters
        :return:
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        return self._inst.query("TMHU")

    def shutdown(self):
        """
        tester forces a shutdown of the handler
        :return:
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        self._inst.write("SHTDN")

    def handler_start(self):
        """
        Tester stars the handling process or resume it if status is pause (same like push start button)
        :return:
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        self._inst.write("STA!")

    def handler_restart(self):
        """
        Tester asks if the handler has finished the actual handling process successfully
        :return: actual status
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        self._inst.write("RESTART")

    def handler_end_test(self):
        """
        Handler stops automatic test after end of the actual cycle
        :return:
        """
        if not self.Initialized:
            msg = "Driver not initialized yet!"
            raise self.TALOSError(msg)

        self._inst.write("EOTH?")
