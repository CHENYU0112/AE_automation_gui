from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import XanM9B_const as const
from .XanM9B_const import *


class XanM9B_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("XanM9B_32.dll", "XanM9B_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "XanM9B"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        _status = self.dll.XanM9B_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        _status = self.dll.XanM9B_InitWithOptions(
            ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), ViString(optionString), byref(newVi)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(newVi.value)

    def close(self, vi):
        _status = self.dll.XanM9B_close(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(bufferSize)
        _status = self.dll.XanM9B_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(record)

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(bufferSize)
        _status = self.dll.XanM9B_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(warnString)

    def ClearInterchangeWarnings(self, vi):
        _status = self.dll.XanM9B_ClearInterchangeWarnings(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetInterchangeCheck(self, vi):
        _status = self.dll.XanM9B_ResetInterchangeCheck(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.XanM9B_LockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.XanM9B_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def ConfigureOutputEnabled(self, vi, channelName, enabled):
        _status = self.dll.XanM9B_ConfigureOutputEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFaultDelay(self, vi, channelName, value):
        _status = self.dll.XanM9B_ConfigureFaultDelay(ViSession(vi), ViConstString(channelName), ViReal64(value))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCurrentLimit(self, vi, channelName, behavior, limit):
        _status = self.dll.XanM9B_ConfigureCurrentLimit(
            ViSession(vi), ViConstString(channelName), ViInt32(behavior), ViReal64(limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOVP(self, vi, channelName, enabled, limit):
        _status = self.dll.XanM9B_ConfigureOVP(
            ViSession(vi), ViConstString(channelName), ViBoolean(enabled), ViReal64(limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureVoltageLevel(self, vi, channelName, level):
        _status = self.dll.XanM9B_ConfigureVoltageLevel(ViSession(vi), ViConstString(channelName), ViReal64(level))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryOutputState(self, vi, channelName, outputState):
        inState = ViBoolean()
        _status = self.dll.XanM9B_QueryOutputState(
            ViSession(vi), ViConstString(channelName), ViInt32(outputState), byref(inState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(inState.value)

    def MaxCurrentLimit(self, vi, channelName, CurrentLevel):
        _status = self.dll.XanM9B_MaxCurrentLimit(ViSession(vi), ViConstString(channelName), ViReal64(CurrentLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputRange(self, vi, channelName, rangeType, range):
        _status = self.dll.XanM9B_ConfigureOutputRange(
            ViSession(vi), ViConstString(channelName), ViInt32(rangeType), ViReal64(range)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MaxVoltage(self, vi, channelName, VoltageLevel):
        _status = self.dll.XanM9B_MaxVoltage(ViSession(vi), ViConstString(channelName), ViReal64(VoltageLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearStatus(self, vi):
        _status = self.dll.XanM9B_ClearStatus(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetOutputProtection(self, vi, channelName):
        _status = self.dll.XanM9B_ResetOutputProtection(ViSession(vi), ViConstString(channelName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSrqEnabled(self, vi, channelName, value):
        _status = self.dll.XanM9B_ConfigureSrqEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(value))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryFaultState(self, vi, channelName):
        faultRegister = ViInt32()
        _status = self.dll.XanM9B_QueryFaultState(ViSession(vi), ViConstString(channelName), byref(faultRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(faultRegister.value)

    def QuerySetpoint(self, vi, channelName, AttrId):
        setpointLevel = ViReal64()
        _status = self.dll.XanM9B_QuerySetpoint(
            ViSession(vi), ViConstString(channelName), ViAttr(AttrId), byref(setpointLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(setpointLevel.value)

    def QueryMode(self, vi, channelName, attrId):
        modeValue = ViInt32()
        _status = self.dll.XanM9B_QueryMode(ViSession(vi), ViConstString(channelName), ViAttr(attrId), byref(modeValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(modeValue.value)

    def QueryAccumulatedState(self, vi, channelName):
        accRegister = ViInt32()
        _status = self.dll.XanM9B_QueryAccumulatedState(ViSession(vi), ViConstString(channelName), byref(accRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(accRegister.value)

    def ConfigureFoldbackSetting(self, vi, channelName, value):
        _status = self.dll.XanM9B_ConfigureFoldbackSetting(ViSession(vi), ViConstString(channelName), ViInt32(value))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHoldEnabled(self, vi, channelName, enabled):
        _status = self.dll.XanM9B_ConfigureHoldEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Initiate(self, vi):
        _status = self.dll.XanM9B_Initiate(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Abort(self, vi):
        _status = self.dll.XanM9B_Abort(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SendSoftwareTrigger(self, vi):
        _status = self.dll.XanM9B_SendSoftwareTrigger(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggeredVoltageLevel(self, vi, channelName, level):
        _status = self.dll.XanM9B_ConfigureTriggeredVoltageLevel(
            ViSession(vi), ViConstString(channelName), ViReal64(level)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggeredCurrentLimit(self, vi, channelName, limit):
        _status = self.dll.XanM9B_ConfigureTriggeredCurrentLimit(
            ViSession(vi), ViConstString(channelName), ViReal64(limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerSource(self, vi, channelName, source):
        _status = self.dll.XanM9B_ConfigureTriggerSource(ViSession(vi), ViConstString(channelName), ViInt32(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAuxaEnabled(self, vi, channelName, enabled):
        _status = self.dll.XanM9B_ConfigureAuxaEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAuxbEnabled(self, vi, channelName, enabled):
        _status = self.dll.XanM9B_ConfigureAuxbEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCmodeEnabled(self, vi, channelName, enabled):
        _status = self.dll.XanM9B_ConfigureCmodeEnabled(ViSession(vi), ViConstString(channelName), ViBoolean(enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def UnmaskSetting(self, vi, channelName):
        mnemonics = ARRAY_ViChar(1024)
        _status = self.dll.XanM9B_UnmaskSetting(ViSession(vi), ViConstString(channelName), mnemonics)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(mnemonics)

    def MaskSetting(self, vi, channelName):
        mnemonics = ARRAY_ViChar(1024)
        _status = self.dll.XanM9B_MaskSetting(ViSession(vi), ViConstString(channelName), mnemonics)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(mnemonics)

    def QueryMaxCurrentLimit(self, vi, channelName, voltageLevel):
        maxCurrentLimit = ViReal64()
        _status = self.dll.XanM9B_QueryMaxCurrentLimit(
            ViSession(vi), ViConstString(channelName), ViReal64(voltageLevel), byref(maxCurrentLimit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(maxCurrentLimit.value)

    def QueryMaxVoltageLevel(self, vi, channelName, currentLimit):
        maxVoltageLevel = ViReal64()
        _status = self.dll.XanM9B_QueryMaxVoltageLevel(
            ViSession(vi), ViConstString(channelName), ViReal64(currentLimit), byref(maxVoltageLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(maxVoltageLevel.value)

    def UnmaskCondition(self, vi, channelName):
        condition = ViInt32()
        _status = self.dll.XanM9B_UnmaskCondition(ViSession(vi), ViConstString(channelName), byref(condition))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(condition.value)

    def Measure(self, vi, channelName, measurementType):
        measurement = ViReal64()
        _status = self.dll.XanM9B_Measure(
            ViSession(vi), ViConstString(channelName), ViInt32(measurementType), byref(measurement)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        _status = self.dll.XanM9B_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def GetError(self, vi, bufferSize):
        errorCode = ViStatus()
        description = ARRAY_ViChar(bufferSize)
        _status = self.dll.XanM9B_GetError(ViSession(vi), byref(errorCode), ViInt32(bufferSize), description)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        description = decode(description)
        return errorCode, description

    def ClearError(self, vi):
        _status = self.dll.XanM9B_ClearError(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        _status = self.dll.XanM9B_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(errorMessage)

    def WriteInstrData(self, vi, writeBuffer):
        _status = self.dll.XanM9B_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        _status = self.dll.XanM9B_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def reset(self, vi):
        _status = self.dll.XanM9B_reset(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, vi):
        testResult = ViInt16()
        testMessage = ARRAY_ViChar(1024)
        _status = self.dll.XanM9B_self_test(ViSession(vi), byref(testResult), testMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        testResult = int(testResult.value)
        testMessage = decode(testMessage)
        return testResult, testMessage

    def ResetWithDefaults(self, vi):
        _status = self.dll.XanM9B_ResetWithDefaults(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Disable(self, vi):
        _status = self.dll.XanM9B_Disable(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        _status = self.dll.XanM9B_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def SetRemoteMode(self, vi, state):
        _status = self.dll.XanM9B_SetRemoteMode(ViSession(vi), ViInt32(state))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InvalidateAllAttributes(self, vi):
        _status = self.dll.XanM9B_InvalidateAllAttributes(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetChannelName(self, vi, index, bufferSize):
        name = ARRAY_ViChar(bufferSize)
        _status = self.dll.XanM9B_GetChannelName(ViSession(vi), ViInt32(index), ViInt32(bufferSize), name)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(name)

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        _status = self.dll.XanM9B_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        _status = self.dll.XanM9B_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(bufSize)
        _status = self.dll.XanM9B_GetAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(bufSize), value
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        _status = self.dll.XanM9B_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        _status = self.dll.XanM9B_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.XanM9B_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.XanM9B_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.XanM9B_SetAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViConstString(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.XanM9B_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.XanM9B_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.XanM9B_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.XanM9B_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.XanM9B_CheckAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViConstString(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.XanM9B_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.XanM9B_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IviInit(self, resourceName, IDQuery, reset, vi):
        _status = self.dll.XanM9B_IviInit(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(reset), ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IviClose(self, vi):
        _status = self.dll.XanM9B_IviClose(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetErrorInfo(self, vi):
        primaryError = ViStatus()
        secondaryError = ViStatus()
        errorElaboration = ARRAY_ViChar(256)
        _status = self.dll.XanM9B_GetErrorInfo(
            ViSession(vi), byref(primaryError), byref(secondaryError), errorElaboration
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorElaboration = decode(errorElaboration)
        return primaryError, secondaryError, errorElaboration

    def ClearErrorInfo(self, vi):
        _status = self.dll.XanM9B_ClearErrorInfo(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
