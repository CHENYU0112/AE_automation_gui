from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .KE2230_dllwrap import *


class KE2230(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = KE2230_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ResetStatusRegister(self):
        """"""
        return self._dllwrap.ResetStatusRegister(self._vi)

    def GetChannelQuestStatusRegister(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.GetChannelQuestStatusRegister(self._vi, Channel)

    def GetChannelQuestEventEnableRegister(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.GetChannelQuestEventEnableRegister(self._vi, Channel)

    def SetChannelQuestEventEnableRegister(self, Channel, ChannelQuestEventEnableRegister):
        """

        :param Channel:
        :type Channel:
        :param ChannelQuestEventEnableRegister:
        :type ChannelQuestEventEnableRegister:
        """
        return self._dllwrap.SetChannelQuestEventEnableRegister(self._vi, Channel, ChannelQuestEventEnableRegister)

    def GetChannelQuestConditionRegister(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.GetChannelQuestConditionRegister(self._vi, Channel)

    def GetChannelOperationStatusRegister(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.GetChannelOperationStatusRegister(self._vi, Channel)

    def GetChannelOperationEventEnableRegister(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.GetChannelOperationEventEnableRegister(self._vi, Channel)

    def SetChannelOperationEventEnableRegister(self, Channel, ChannelOperationEventEnableRegister):
        """

        :param Channel:
        :type Channel:
        :param ChannelOperationEventEnableRegister:
        :type ChannelOperationEventEnableRegister:
        """
        return self._dllwrap.SetChannelOperationEventEnableRegister(
            self._vi, Channel, ChannelOperationEventEnableRegister
        )

    def GetChannelOperationConditionRegister(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.GetChannelOperationConditionRegister(self._vi, Channel)

    def SaveState(self, Item):
        """

        :param Item:
        :type Item:
        """
        return self._dllwrap.SaveState(self._vi, Item)

    def RecallState(self, Item):
        """

        :param Item:
        :type Item:
        """
        return self._dllwrap.RecallState(self._vi, Item)

    def ClearDisplayText(self):
        """"""
        return self._dllwrap.ClearDisplayText(self._vi)

    def Beep(self):
        """"""
        return self._dllwrap.Beep(self._vi)

    def SendSoftwareTrigger2(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger2(self._vi)

    def Query(self, Command, ValBufferSize):
        """

        :param Command:
        :type Command:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.Query(self._vi, Command, ValBufferSize)

    def ReadPartialString(self, Length, ValBufferSize):
        """

        :param Length:
        :type Length:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadPartialString(self._vi, Length, ValBufferSize)

    def ReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadString(self._vi, ValBufferSize)

    def WriteString(self, Command):
        """

        :param Command:
        :type Command:
        """
        return self._dllwrap.WriteString(self._vi, Command)

    def Measure(self, OutputChannel2, MeasurementType):
        """

        :param OutputChannel2:
        :type OutputChannel2:
        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.Measure(self._vi, OutputChannel2, MeasurementType)

    def CurrentStepDown(self, OutputChannel):
        """

        :param OutputChannel:
        :type OutputChannel:
        """
        return self._dllwrap.CurrentStepDown(self._vi, OutputChannel)

    def CurrentStepUp(self, OutputChannel):
        """

        :param OutputChannel:
        :type OutputChannel:
        """
        return self._dllwrap.CurrentStepUp(self._vi, OutputChannel)

    def VoltageStepUp(self, OutputChannel):
        """

        :param OutputChannel:
        :type OutputChannel:
        """
        return self._dllwrap.VoltageStepUp(self._vi, OutputChannel)

    def VoltageStepDown(self, OutputChannel):
        """

        :param OutputChannel:
        :type OutputChannel:
        """
        return self._dllwrap.VoltageStepDown(self._vi, OutputChannel)

    def Apply(self, Channel, OptionalParametersBufferSize, OptionalParameters):
        """

        :param Channel:
        :type Channel:
        :param OptionalParametersBufferSize:
        :type OptionalParametersBufferSize:
        :param OptionalParameters:
        :type OptionalParameters:
        """
        return self._dllwrap.Apply(self._vi, Channel, OptionalParametersBufferSize, OptionalParameters)

    def GetOutputChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetOutputChannelName(self._vi, Index, NameBufferSize)

    def QueryCurrentLimitMax(self, OutputChannel, VoltageLevel):
        """

        :param OutputChannel:
        :type OutputChannel:
        :param VoltageLevel:
        :type VoltageLevel:
        """
        return self._dllwrap.QueryCurrentLimitMax(self._vi, OutputChannel, VoltageLevel)

    def QueryState(self, OutputChannel, OutputState):
        """

        :param OutputChannel:
        :type OutputChannel:
        :param OutputState:
        :type OutputState:
        """
        return self._dllwrap.QueryState(self._vi, OutputChannel, OutputState)

    def QueryVoltageLevelMax(self, OutputChannel, CurrentLimit):
        """

        :param OutputChannel:
        :type OutputChannel:
        :param CurrentLimit:
        :type CurrentLimit:
        """
        return self._dllwrap.QueryVoltageLevelMax(self._vi, OutputChannel, CurrentLimit)

    def GetEnabled(self, OutputChannel):
        """

        :param OutputChannel:
        :type OutputChannel:
        """
        return self._dllwrap.GetEnabled(self._vi, OutputChannel)

    def SetEnabled(self, OutputChannel, Enabled):
        """

        :param OutputChannel:
        :type OutputChannel:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.SetEnabled(self._vi, OutputChannel, Enabled)

    def Fetch(self, OutputChannel, FetchType):
        """

        :param OutputChannel:
        :type OutputChannel:
        :param FetchType:
        :type FetchType:
        """
        return self._dllwrap.Fetch(self._vi, OutputChannel, FetchType)
