from __future__ import annotations

from pverify.drivers.SimplifiedLabInstruments._simple_instr.simple_dcpwr import SimpleDcPwr_ABC, SimpleDcPwrChannel_ABC

from .KE2230 import KE2230

ERR_DRIVER_NOT_INITIALIZED = "Driver '%s' not initialized."
ERR_DRIVER_NOT_SUPPORTED = "Driver '%s' not supported"
CHANNEL_INDEX_OUT_OF_RANGE = 'Channel index "{}" is out of range(1 - 3).'


class KE2230Simple(SimpleDcPwr_ABC):
    def __init__(self):
        super().__init__(KE2230())

    @property
    def Initialized(self):
        return self.lld.Initialized

    @property
    def drivername(self) -> str:
        return "KE2230Simple"

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool|int
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool|int
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        :type OptionString: str
        """
        self.lld.Initialize(ResourceName, IdQuery, Reset, OptionString)

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self.lld.Close()

    def GetChannel(self, Index) -> _KE2330Channel:
        """
        Returns a channel object for the probe. The different probe channels can be set up independently from each other

        :param Index: The index of the channel
        :type Index: int
        :return: _KE2330Channel instance
        :rtype: _KE2330Channel
        """
        if self.lld.Initialized:
            number_of_channels = self.lld.GetAttributeViInt32("", self.lld.const.KE2230_ATTR_OUTPUTCHANNEL_COUNT)
            if Index <= 0 or Index > number_of_channels:
                raise ValueError(CHANNEL_INDEX_OUT_OF_RANGE.format(Index))
            return _KE2330Channel(parent=self, channelindex=Index)
        else:
            raise Exception(ERR_DRIVER_NOT_INITIALIZED % self.lld.drivername)

    @property
    def lld(self) -> KE2230:
        return super().lld


class _KE2330Channel(SimpleDcPwrChannel_ABC):
    """
    A Class providing all functionality of a DC source channel
    """

    def __init__(self, parent, channelindex):
        super().__init__(parent, channelindex)
        self._ch_name = f"OutputChannel{self._ch_index}"

    @property
    def lld(self) -> KE2230:
        return super().lld

    @property
    def lld_ch(self):
        return None

    def Enable(self, Enabled):
        """
        Switches the supply on or off for this channel.

        :param Enabled: If true the channel will be enabled.
        :param Enabled: bool|int
        """
        self.lld.SetAttributeViBoolean(self._ch_name, self.lld.const.KE2230_ATTR_STATE2, Enabled)

    def Configure_Range(self, RangeType, Range):
        """
        Specifies the output's range, either current or voltage.

        KE2230: Does actually not set the range but the voltage/current limits

        :param RangeType: The kind of range to be configured, either Current or Voltage.
        :type RangeType: choice(Current,Voltage)
        :param Range: The range in which the power supply operates. This value is coerced to the
                      closest value the instrument supports that is greater than or equal to the value specified.
        :type Range: float
        """
        if RangeType.upper() == "VOLTAGE":
            self._set_voltage_limit(Range)
        elif RangeType.upper() == "CURRENT":
            self._set_current_limit(Range)
        else:
            msg = f"RangeType {RangeType} is not supported, only 'current' and 'voltage'!"
            raise ValueError(msg)

    def Configure_VoltageLevel(self, Level, CurrentLimit: float | None = None, VoltageLimit: float | None = None):
        """
        Applies a voltage at a channel.

        :param Level: The voltage level to set.
        :type Level: float
        :param CurrentLimit: The current limit where the PS stops outputting.
        :type CurrentLimit: float
        :param VoltageLimit: The voltage limit where the PS stops outputting.
        :type VoltageLimit: float
        """
        if self.lld.Initialized:
            if VoltageLimit is not None and Level > VoltageLimit:
                msg = "Level is greater than VoltageLimit"
                raise ValueError(msg)
            if VoltageLimit is not None:
                self._set_voltage_limit(VoltageLimit)
            self._set_current_limit(CurrentLimit)
            self._set_voltage_level(Level)
        else:
            raise Exception(ERR_DRIVER_NOT_INITIALIZED % self.lld.drivername)

    def Measure_Voltage(self):
        """
        Reads the voltage at the specified channel.

        :rtype: float
        """
        if self.lld.Initialized:
            return self.lld.Measure(self._ch_name, self.lld.const.KE2230_VAL_MEASUREMENT_TYPE_VOLTAGE)
        else:
            raise Exception(ERR_DRIVER_NOT_INITIALIZED % self.lld.drivername)

    def Measure_Current(self):
        """
        Reads the current at the specified channel.

        :rtype: float
        """
        if self.lld.Initialized:
            return self.lld.Measure(self._ch_name, self.lld.const.KE2230_VAL_MEASUREMENT_TYPE_CURRENT)
        else:
            raise Exception(ERR_DRIVER_NOT_INITIALIZED % self.lld.drivername)

    def Measure_Power(self):
        """
        Reads the power at the specified channel.

        :rtype: float
        """
        if self.lld.Initialized:
            return self.lld.Measure(self._ch_name, self.lld.const.KE2230_VAL_MEASUREMENT_TYPE_POWER)
        else:
            raise Exception(ERR_DRIVER_NOT_INITIALIZED % self.lld.drivername)

    def _set_current_limit(self, CurrentLimit: float):
        """
        Sets the specified current limit.
        The units are in Amps

        :param CurrentLimit: Current Limit specifies the output current limit.
        """
        if self.lld.Initialized:
            if isinstance(CurrentLimit, (float, int)):
                self.lld.SetAttributeViReal64(self._ch_name, self.lld.const.KE2230_ATTR_CURRENT_LIMIT2, CurrentLimit)
        else:
            raise Exception(ERR_DRIVER_NOT_INITIALIZED % self.lld.drivername)

    def _set_voltage_level(self, VoltageLevel: float):
        """
        Sets the specified voltage level.
        The units are Volts.

        :param VoltageLevel: Voltage Level specifies the voltage DC power supply attempts to generate.
        """
        if self.lld.Initialized:
            if isinstance(VoltageLevel, (float, int)):
                self.lld.SetAttributeViReal64(self._ch_name, self.lld.const.KE2230_ATTR_VOLTAGE_LEVEL, VoltageLevel)
            else:
                msg = "VoltageLevel is no float/int value!"
                raise ValueError(msg)
        else:
            raise Exception(ERR_DRIVER_NOT_INITIALIZED % self.lld.drivername)

    def _set_voltage_limit(self, VoltageLimit: float):
        """
        Sets the specified voltage limit.
        The units are Volts.

        :param VoltageLimit: Voltage Level specifies the voltage DC power supply attempts to generate.
        """
        if self.lld.Initialized:
            if isinstance(VoltageLimit, (float, int)):
                self.lld.SetAttributeViReal64(self._ch_name, self.lld.const.KE2230_ATTR_VOLTAGE_LIMIT, VoltageLimit)
            else:
                msg = "VoltageLimit is no float/int value!"
                raise ValueError(msg)
        else:
            raise Exception(ERR_DRIVER_NOT_INITIALIZED % self.lld.drivername)
