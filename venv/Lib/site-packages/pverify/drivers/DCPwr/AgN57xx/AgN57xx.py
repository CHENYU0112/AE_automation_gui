from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .AgN57xx_dllwrap import *


class AgN57xx(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = AgN57xx_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViInt64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViInt64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ConfigureOutputEnabled(self, ChannelName, Enabled):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureOutputEnabled(self._vi, ChannelName, Enabled)

    def ConfigureVoltageLevel(self, ChannelName, Level):
        """

        :param ChannelName:
        :type ChannelName:
        :param Level:
        :type Level:
        """
        return self._dllwrap.ConfigureVoltageLevel(self._vi, ChannelName, Level)

    def ConfigureCurrentLimit(self, ChannelName, Behavior, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Behavior:
        :type Behavior:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureCurrentLimit(self._vi, ChannelName, Behavior, Limit)

    def ConfigureOVP(self, ChannelName, Enabled, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureOVP(self._vi, ChannelName, Enabled, Limit)

    def ConfigureOutputRange(self, ChannelName, RangeType, Range):
        """

        :param ChannelName:
        :type ChannelName:
        :param RangeType:
        :type RangeType:
        :param Range:
        :type Range:
        """
        return self._dllwrap.ConfigureOutputRange(self._vi, ChannelName, RangeType, Range)

    def QueryMaxCurrentLimit(self, ChannelName, VoltageLevel):
        """

        :param ChannelName:
        :type ChannelName:
        :param VoltageLevel:
        :type VoltageLevel:
        """
        return self._dllwrap.QueryMaxCurrentLimit(self._vi, ChannelName, VoltageLevel)

    def QueryMaxVoltageLevel(self, ChannelName, CurrentLimit):
        """

        :param ChannelName:
        :type ChannelName:
        :param CurrentLimit:
        :type CurrentLimit:
        """
        return self._dllwrap.QueryMaxVoltageLevel(self._vi, ChannelName, CurrentLimit)

    def ConfigureTriggeredCurrentLimit(self, ChannelName, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureTriggeredCurrentLimit(self._vi, ChannelName, Limit)

    def ConfigureTriggeredVoltageLevel(self, ChannelName, Level):
        """

        :param ChannelName:
        :type ChannelName:
        :param Level:
        :type Level:
        """
        return self._dllwrap.ConfigureTriggeredVoltageLevel(self._vi, ChannelName, Level)

    def ConfigureTriggerSource(self, ChannelName, Source):
        """

        :param ChannelName:
        :type ChannelName:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureTriggerSource(self._vi, ChannelName, Source)

    def Measure(self, ChannelName, MeasurementType):
        """

        :param ChannelName:
        :type ChannelName:
        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.Measure(self._vi, ChannelName, MeasurementType)

    def QueryOutputState(self, ChannelName, OutputState):
        """

        :param ChannelName:
        :type ChannelName:
        :param OutputState:
        :type OutputState:
        """
        return self._dllwrap.QueryOutputState(self._vi, ChannelName, OutputState)

    def ResetOutputProtection(self, ChannelName):
        """

        :param ChannelName:
        :type ChannelName:
        """
        return self._dllwrap.ResetOutputProtection(self._vi, ChannelName)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def Initiate(self):
        """"""
        return self._dllwrap.Initiate(self._vi)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def OutputQueryVoltageLevelMax(self, CurrentLimit):
        """

        :param CurrentLimit:
        :type CurrentLimit:
        """
        return self._dllwrap.OutputQueryVoltageLevelMax(self._vi, CurrentLimit)

    def OutputQueryState(self, OutputState):
        """

        :param OutputState:
        :type OutputState:
        """
        return self._dllwrap.OutputQueryState(self._vi, OutputState)

    def OutputQueryCurrentLimitMax(self, VoltageLevel):
        """

        :param VoltageLevel:
        :type VoltageLevel:
        """
        return self._dllwrap.OutputQueryCurrentLimitMax(self._vi, VoltageLevel)

    def OutputMeasure(self, MeasurementType):
        """

        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.OutputMeasure(self._vi, MeasurementType)

    def OutputConfigureCurrentLimit(self, Behavior, Limit):
        """

        :param Behavior:
        :type Behavior:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.OutputConfigureCurrentLimit(self._vi, Behavior, Limit)

    def OutputProtectionResetOutputProtection(self):
        """"""
        return self._dllwrap.OutputProtectionResetOutputProtection(self._vi)

    def OutputProtectionQueryOVPLimitMax(self):
        """"""
        return self._dllwrap.OutputProtectionQueryOVPLimitMax(self._vi)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def viRead(self, BufferSize):
        """

        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.viRead(self._vi, BufferSize)

    def viWrite(self, Count, Buffer):
        """

        :param Count:
        :type Count:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.viWrite(self._vi, Count, Buffer)

    def SystemWriteString(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, Data)

    def TriggerSendSoftwareTrigger(self):
        """"""
        return self._dllwrap.TriggerSendSoftwareTrigger(self._vi)

    def TriggerInitiate(self):
        """"""
        return self._dllwrap.TriggerInitiate(self._vi)

    def TriggerAbort(self):
        """"""
        return self._dllwrap.TriggerAbort(self._vi)

    def StatusPreset(self):
        """"""
        return self._dllwrap.StatusPreset(self._vi)

    def StatusConfigureServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.StatusConfigureServiceRequest(self._vi, Reason)

    def StatusClear(self):
        """"""
        return self._dllwrap.StatusClear(self._vi)

    def StatusGetRegister(self, Register, SubRegister):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusGetRegister(self._vi, Register, SubRegister)

    def StatusSetRegister(self, Register, SubRegister, Val):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusSetRegister(self._vi, Register, SubRegister, Val)

    def SystemWaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.SystemWaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def SystemSaveState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemSaveState(self._vi, Identifier)

    def SystemRecallState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemRecallState(self._vi, Identifier)

    def SystemEnableLocalControls(self):
        """"""
        return self._dllwrap.SystemEnableLocalControls(self._vi)

    def SystemDisableLocalControls(self):
        """"""
        return self._dllwrap.SystemDisableLocalControls(self._vi)

    def SystemRead(self, ValueBufferSize):
        """

        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.SystemRead(self._vi, ValueBufferSize)

    def SystemWrite(self, CommandString):
        """

        :param CommandString:
        :type CommandString:
        """
        return self._dllwrap.SystemWrite(self._vi, CommandString)
