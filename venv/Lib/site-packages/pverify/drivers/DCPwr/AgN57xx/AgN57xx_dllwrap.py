from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import AgN57xx_const as const
from .AgN57xx_const import *


class AgN57xx_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("AgN57xx.dll", "AgN57xx_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "AgN57xx"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        _status = self.dll.AgN57xx_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Vi.value)

    def close(self, Vi):
        _status = self.dll.AgN57xx_close(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        _status = self.dll.AgN57xx_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Vi.value)

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        _status = self.dll.AgN57xx_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Name)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        _status = self.dll.AgN57xx_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(ErrorCode)
        _status = self.dll.AgN57xx_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        _status = self.dll.AgN57xx_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        _status = self.dll.AgN57xx_ClearError(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearInterchangeWarnings(self, Vi):
        _status = self.dll.AgN57xx_ClearInterchangeWarnings(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        _status = self.dll.AgN57xx_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(InterchangeWarningBufferSize)
        _status = self.dll.AgN57xx_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        _status = self.dll.AgN57xx_InvalidateAllAttributes(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetInterchangeCheck(self, Vi):
        _status = self.dll.AgN57xx_ResetInterchangeCheck(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Disable(self, Vi):
        _status = self.dll.AgN57xx_Disable(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        _status = self.dll.AgN57xx_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        _status = self.dll.AgN57xx_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        _status = self.dll.AgN57xx_reset(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetWithDefaults(self, Vi):
        _status = self.dll.AgN57xx_ResetWithDefaults(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        _status = self.dll.AgN57xx_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        _status = self.dll.AgN57xx_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        _status = self.dll.AgN57xx_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt64()
        _status = self.dll.AgN57xx_GetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        _status = self.dll.AgN57xx_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        _status = self.dll.AgN57xx_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        _status = self.dll.AgN57xx_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        _status = self.dll.AgN57xx_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgN57xx_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgN57xx_SetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt64(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgN57xx_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgN57xx_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgN57xx_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgN57xx_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputEnabled(self, Vi, ChannelName, Enabled):
        _status = self.dll.AgN57xx_ConfigureOutputEnabled(ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureVoltageLevel(self, Vi, ChannelName, Level):
        _status = self.dll.AgN57xx_ConfigureVoltageLevel(ViSession(Vi), ViConstString(ChannelName), ViReal64(Level))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCurrentLimit(self, Vi, ChannelName, Behavior, Limit):
        _status = self.dll.AgN57xx_ConfigureCurrentLimit(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(Behavior), ViReal64(Limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOVP(self, Vi, ChannelName, Enabled, Limit):
        _status = self.dll.AgN57xx_ConfigureOVP(
            ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled), ViReal64(Limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputRange(self, Vi, ChannelName, RangeType, Range):
        _status = self.dll.AgN57xx_ConfigureOutputRange(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(RangeType), ViReal64(Range)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMaxCurrentLimit(self, Vi, ChannelName, VoltageLevel):
        MaxCurrentLimit = ViReal64()
        _status = self.dll.AgN57xx_QueryMaxCurrentLimit(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViReal64(VoltageLevel),
            byref(MaxCurrentLimit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MaxCurrentLimit.value)

    def QueryMaxVoltageLevel(self, Vi, ChannelName, CurrentLimit):
        MaxVoltageLevel = ViReal64()
        _status = self.dll.AgN57xx_QueryMaxVoltageLevel(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViReal64(CurrentLimit),
            byref(MaxVoltageLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MaxVoltageLevel.value)

    def ConfigureTriggeredCurrentLimit(self, Vi, ChannelName, Limit):
        _status = self.dll.AgN57xx_ConfigureTriggeredCurrentLimit(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(Limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggeredVoltageLevel(self, Vi, ChannelName, Level):
        _status = self.dll.AgN57xx_ConfigureTriggeredVoltageLevel(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(Level)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerSource(self, Vi, ChannelName, Source):
        _status = self.dll.AgN57xx_ConfigureTriggerSource(ViSession(Vi), ViConstString(ChannelName), ViInt32(Source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Measure(self, Vi, ChannelName, MeasurementType):
        Measurement = ViReal64()
        _status = self.dll.AgN57xx_Measure(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(MeasurementType),
            byref(Measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Measurement.value)

    def QueryOutputState(self, Vi, ChannelName, OutputState):
        InState = ViBoolean()
        _status = self.dll.AgN57xx_QueryOutputState(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(OutputState),
            byref(InState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(InState.value)

    def ResetOutputProtection(self, Vi, ChannelName):
        _status = self.dll.AgN57xx_ResetOutputProtection(ViSession(Vi), ViConstString(ChannelName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Abort(self, Vi):
        _status = self.dll.AgN57xx_Abort(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Initiate(self, Vi):
        _status = self.dll.AgN57xx_Initiate(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SendSoftwareTrigger(self, Vi):
        _status = self.dll.AgN57xx_SendSoftwareTrigger(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputQueryVoltageLevelMax(self, Vi, CurrentLimit):
        RetVal = ViReal64()
        _status = self.dll.AgN57xx_OutputQueryVoltageLevelMax(ViSession(Vi), ViReal64(CurrentLimit), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def OutputQueryState(self, Vi, OutputState):
        RetVal = ViBoolean()
        _status = self.dll.AgN57xx_OutputQueryState(ViSession(Vi), ViInt32(OutputState), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(RetVal.value)

    def OutputQueryCurrentLimitMax(self, Vi, VoltageLevel):
        RetVal = ViReal64()
        _status = self.dll.AgN57xx_OutputQueryCurrentLimitMax(ViSession(Vi), ViReal64(VoltageLevel), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def OutputMeasure(self, Vi, MeasurementType):
        RetVal = ViReal64()
        _status = self.dll.AgN57xx_OutputMeasure(ViSession(Vi), ViInt32(MeasurementType), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def OutputConfigureCurrentLimit(self, Vi, Behavior, Limit):
        _status = self.dll.AgN57xx_OutputConfigureCurrentLimit(ViSession(Vi), ViInt32(Behavior), ViReal64(Limit))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputProtectionResetOutputProtection(self, Vi):
        _status = self.dll.AgN57xx_OutputProtectionResetOutputProtection(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputProtectionQueryOVPLimitMax(self, Vi):
        RetVal = ViReal64()
        _status = self.dll.AgN57xx_OutputProtectionQueryOVPLimitMax(ViSession(Vi), byref(RetVal))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.AgN57xx_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViChar(BufferSize)
        ReturnCount = ViInt64()
        _status = self.dll.AgN57xx_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Buffer = decode(Buffer)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def viWrite(self, Vi, Count, Buffer):
        ReturnCount = ViInt64()
        _status = self.dll.AgN57xx_viWrite(ViSession(Vi), ViInt64(Count), ViConstString(Buffer), byref(ReturnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(ReturnCount.value)

    def SystemWriteString(self, Vi, Data):
        _status = self.dll.AgN57xx_SystemWriteString(ViSession(Vi), ViConstString(Data))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerSendSoftwareTrigger(self, Vi):
        _status = self.dll.AgN57xx_TriggerSendSoftwareTrigger(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerInitiate(self, Vi):
        _status = self.dll.AgN57xx_TriggerInitiate(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerAbort(self, Vi):
        _status = self.dll.AgN57xx_TriggerAbort(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusPreset(self, Vi):
        _status = self.dll.AgN57xx_StatusPreset(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusConfigureServiceRequest(self, Vi, Reason):
        _status = self.dll.AgN57xx_StatusConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusClear(self, Vi):
        _status = self.dll.AgN57xx_StatusClear(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusGetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        _status = self.dll.AgN57xx_StatusGetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(RetVal.value)

    def StatusSetRegister(self, Vi, Register, SubRegister, Val):
        _status = self.dll.AgN57xx_StatusSetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        _status = self.dll.AgN57xx_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemSaveState(self, Vi, Identifier):
        _status = self.dll.AgN57xx_SystemSaveState(ViSession(Vi), ViConstString(Identifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemRecallState(self, Vi, Identifier):
        _status = self.dll.AgN57xx_SystemRecallState(ViSession(Vi), ViConstString(Identifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemEnableLocalControls(self, Vi):
        _status = self.dll.AgN57xx_SystemEnableLocalControls(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemDisableLocalControls(self, Vi):
        _status = self.dll.AgN57xx_SystemDisableLocalControls(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemRead(self, Vi, ValueBufferSize):
        Value = ARRAY_ViChar(ValueBufferSize)
        ActualSize = ViInt32()
        _status = self.dll.AgN57xx_SystemRead(ViSession(Vi), ViInt32(ValueBufferSize), Value, byref(ActualSize))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Value = decode(Value)
        ActualSize = int(ActualSize.value)
        return Value, ActualSize

    def SystemWrite(self, Vi, CommandString):
        _status = self.dll.AgN57xx_SystemWrite(ViSession(Vi), ViConstString(CommandString))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
