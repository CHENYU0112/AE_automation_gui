from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import AgAPS_const as const
from .AgAPS_const import *


class AgAPS_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("AgAPS_32.dll", "AgAPS_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "AgAPS"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        _status = self.dll.AgAPS_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Vi.value)

    def close(self, Vi):
        _status = self.dll.AgAPS_close(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        _status = self.dll.AgAPS_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Vi.value)

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        _status = self.dll.AgAPS_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Name)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        _status = self.dll.AgAPS_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        _status = self.dll.AgAPS_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        _status = self.dll.AgAPS_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        _status = self.dll.AgAPS_ClearError(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearInterchangeWarnings(self, Vi):
        _status = self.dll.AgAPS_ClearInterchangeWarnings(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        _status = self.dll.AgAPS_GetNextCoercionRecord(ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(InterchangeWarningBufferSize)
        _status = self.dll.AgAPS_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        _status = self.dll.AgAPS_InvalidateAllAttributes(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetInterchangeCheck(self, Vi):
        _status = self.dll.AgAPS_ResetInterchangeCheck(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Disable(self, Vi):
        _status = self.dll.AgAPS_Disable(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        _status = self.dll.AgAPS_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        _status = self.dll.AgAPS_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        _status = self.dll.AgAPS_reset(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetWithDefaults(self, Vi):
        _status = self.dll.AgAPS_ResetWithDefaults(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        _status = self.dll.AgAPS_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        _status = self.dll.AgAPS_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        _status = self.dll.AgAPS_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        _status = self.dll.AgAPS_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        _status = self.dll.AgAPS_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        _status = self.dll.AgAPS_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        _status = self.dll.AgAPS_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgAPS_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgAPS_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgAPS_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgAPS_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgAPS_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemClearIO(self, Vi):
        _status = self.dll.AgAPS_SystemClearIO(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemDisableLocalControls(self, Vi):
        _status = self.dll.AgAPS_SystemDisableLocalControls(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemEnableLocalControls(self, Vi):
        _status = self.dll.AgAPS_SystemEnableLocalControls(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.AgAPS_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def SystemRecallState(self, Vi, Identifier):
        _status = self.dll.AgAPS_SystemRecallState(ViSession(Vi), ViInt32(Identifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemSaveState(self, Vi, Identifier):
        _status = self.dll.AgAPS_SystemSaveState(ViSession(Vi), ViInt32(Identifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        _status = self.dll.AgAPS_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemWriteString(self, Vi, DataBufferSize, Data):
        _status = self.dll.AgAPS_SystemWriteString(ViSession(Vi), ViInt32(DataBufferSize), ViConstString(Data))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViByte(BufferSize)
        ReturnCount = ViInt64()
        _status = self.dll.AgAPS_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def viWrite(self, Vi, Count, Buffer):
        _Buffer = (ViByte * len(Buffer))(*Buffer)
        ReturnCount = ViInt64()
        _status = self.dll.AgAPS_viWrite(ViSession(Vi), ViInt64(Count), _Buffer, byref(ReturnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(ReturnCount.value)

    def SystemExportInstrumentState(self, Vi, ValBufferSize):
        Val = ARRAY_ViByte(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgAPS_SystemExportInstrumentState(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SystemImportInstrumentState(self, Vi, StateBufferSize):
        State = ARRAY_ViByte(StateBufferSize)
        _status = self.dll.AgAPS_SystemImportInstrumentState(ViSession(Vi), ViInt32(StateBufferSize), State)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return State

    def SafetyDisconnectSystemConnect(self, Vi):
        _status = self.dll.AgAPS_SafetyDisconnectSystemConnect(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SafetyDisconnectSystemQueryInputState(self, Vi):
        Val = ViInt32()
        _status = self.dll.AgAPS_SafetyDisconnectSystemQueryInputState(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def SafetyDisconnectSystemQueryProtectionStatus(self, Vi):
        Val = ViInt32()
        _status = self.dll.AgAPS_SafetyDisconnectSystemQueryProtectionStatus(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def StatusPreset(self, Vi):
        _status = self.dll.AgAPS_StatusPreset(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusConfigureServiceRequest(self, Vi, Reason):
        _status = self.dll.AgAPS_StatusConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusClear(self, Vi):
        _status = self.dll.AgAPS_StatusClear(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusGetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        _status = self.dll.AgAPS_StatusGetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(RetVal.value)

    def StatusSetRegister(self, Vi, Register, SubRegister, Val):
        _status = self.dll.AgAPS_StatusSetRegister(ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusConfigureOperationServiceRequest(self, Vi, Reason):
        _status = self.dll.AgAPS_StatusConfigureOperationServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusConfigureQuestionableServiceRequest(self, Vi, Reason):
        _status = self.dll.AgAPS_StatusConfigureQuestionableServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusUserDefineSource(self, Vi, Bit, Expression):
        _status = self.dll.AgAPS_StatusUserDefineSource(ViSession(Vi), ViInt32(Bit), ViInt32(Expression))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusUserQuerySource(self, Vi, Bit):
        Expression = ViInt32()
        _status = self.dll.AgAPS_StatusUserQuerySource(ViSession(Vi), ViInt32(Bit), byref(Expression))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Expression.value)

    def OutputQueryState(self, Vi, OutputState):
        InState = ViBoolean()
        _status = self.dll.AgAPS_OutputQueryState(ViSession(Vi), ViInt32(OutputState), byref(InState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(InState.value)

    def OutputSequenceConfigure(self, Vi, Enabled, DelayOffset, OnSource, OnDelay, OffSource, OffDelay):
        _status = self.dll.AgAPS_OutputSequenceConfigure(
            ViSession(Vi),
            ViBoolean(Enabled),
            ViReal64(DelayOffset),
            ViInt32(OnSource),
            ViReal64(OnDelay),
            ViInt32(OffSource),
            ViReal64(OffDelay),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryActiveMaxPowerPoint(self, Vi, Type):
        Val = ViReal64()
        _status = self.dll.AgAPS_QueryActiveMaxPowerPoint(ViSession(Vi), ViInt32(Type), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def QueryMaxScaleFactorCurrent(self, Vi):
        Val = ViReal64()
        _status = self.dll.AgAPS_QueryMaxScaleFactorCurrent(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def QueryMaxScaleFactorVoltage(self, Vi):
        Val = ViReal64()
        _status = self.dll.AgAPS_QueryMaxScaleFactorVoltage(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def Configure(self, Vi, IMP, ISC, VMP, VOC, Shape):
        _status = self.dll.AgAPS_Configure(
            ViSession(Vi),
            ViReal64(IMP),
            ViReal64(ISC),
            ViReal64(VMP),
            ViReal64(VOC),
            ViInt32(Shape),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMaxISC(self, Vi):
        Val = ViReal64()
        _status = self.dll.AgAPS_QueryMaxISC(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def QueryMaxIMP(self, Vi):
        Val = ViReal64()
        _status = self.dll.AgAPS_QueryMaxIMP(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def QueryMaxVMP(self, Vi):
        Val = ViReal64()
        _status = self.dll.AgAPS_QueryMaxVMP(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def QueryMaxVOC(self, Vi):
        Val = ViReal64()
        _status = self.dll.AgAPS_QueryMaxVOC(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def Activate(self, Vi, Table):
        _status = self.dll.AgAPS_Activate(ViSession(Vi), ViInt32(Table))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Update(self, Vi, Table):
        _status = self.dll.AgAPS_Update(ViSession(Vi), ViInt32(Table))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryTableLength(self, Vi, TableNumber):
        Val = ViInt32()
        _status = self.dll.AgAPS_QueryTableLength(ViSession(Vi), ViInt32(TableNumber), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def QueryTablePoints2(self, Vi, TableNumber, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgAPS_QueryTablePoints2(
            ViSession(Vi),
            ViInt32(TableNumber),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def DefineTablePoints(self, Vi, TableNumber, CurrentBufferSize):
        Current = ARRAY_ViReal64(CurrentBufferSize)
        _status = self.dll.AgAPS_DefineTablePoints(
            ViSession(Vi), ViInt32(TableNumber), ViInt32(CurrentBufferSize), Current
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return list(Current)

    def TablePoints3(self, Vi, TableNumber, VoltageBufferSize):
        Voltage = ARRAY_ViReal64(VoltageBufferSize)
        _status = self.dll.AgAPS_TablePoints3(ViSession(Vi), ViInt32(TableNumber), ViInt32(VoltageBufferSize), Voltage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return list(Voltage)

    def QueryTableLength3(self, Vi, TableNumber):
        Val = ViInt32()
        _status = self.dll.AgAPS_QueryTableLength3(ViSession(Vi), ViInt32(TableNumber), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def QueryTablePoints(self, Vi, TableNumber, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgAPS_QueryTablePoints(
            ViSession(Vi),
            ViInt32(TableNumber),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def MeasurementFetchIndexed(self, Vi, MeasurementType, StartIndex, NumOfPoints, MaxTimeMilliseconds):
        Val = ViReal64()
        _status = self.dll.AgAPS_MeasurementFetchIndexed(
            ViSession(Vi),
            ViInt32(MeasurementType),
            ViInt32(StartIndex),
            ViInt32(NumOfPoints),
            ViInt32(MaxTimeMilliseconds),
            byref(Val),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def MeasurementFetchIndexedArray(
        self,
        Vi,
        MeasurementType,
        StartIndex,
        NumOfPoints,
        MaxTimeMilliseconds,
        ValBufferSize,
    ):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgAPS_MeasurementFetchIndexedArray(
            ViSession(Vi),
            ViInt32(MeasurementType),
            ViInt32(StartIndex),
            ViInt32(NumOfPoints),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def MeasurementMeasureArray(self, Vi, MeasurementType, MaxTimeMilliseconds, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgAPS_MeasurementMeasureArray(
            ViSession(Vi),
            ViInt32(MeasurementType),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def MeasurementFetchArray(self, Vi, MeasurementType, MaxTimeMilliseconds, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgAPS_MeasurementFetchArray(
            ViSession(Vi),
            ViInt32(MeasurementType),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def MeasurementResetAmpHour(self, Vi):
        _status = self.dll.AgAPS_MeasurementResetAmpHour(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MeasurementResetWattHour(self, Vi):
        _status = self.dll.AgAPS_MeasurementResetWattHour(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MeasurementMeasure(self, Vi, MeasurementType, MaxTimeMilliseconds):
        Val = ViReal64()
        _status = self.dll.AgAPS_MeasurementMeasure(
            ViSession(Vi),
            ViInt32(MeasurementType),
            ViInt32(MaxTimeMilliseconds),
            byref(Val),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def MeasurementFetch(self, Vi, MeasurementType, MaxTimeMilliseconds):
        Val = ViReal64()
        _status = self.dll.AgAPS_MeasurementFetch(
            ViSession(Vi),
            ViInt32(MeasurementType),
            ViInt32(MaxTimeMilliseconds),
            byref(Val),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def MeasurementSweepConfigure(self, Vi, Interval, Points, OffsetPoints):
        _status = self.dll.AgAPS_MeasurementSweepConfigure(
            ViSession(Vi), ViReal64(Interval), ViInt32(Points), ViInt32(OffsetPoints)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProtectionReset(self, Vi):
        _status = self.dll.AgAPS_ProtectionReset(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProtectionCurrentConfigure(self, Vi, LimitBehavior, StartEvent, Delay):
        _status = self.dll.AgAPS_ProtectionCurrentConfigure(
            ViSession(Vi), ViInt32(LimitBehavior), ViInt32(StartEvent), ViReal64(Delay)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TransientArbWaveformCreate(self, Vi, ArbType, PointsBufferSize, Dwell):
        Points = ARRAY_ViReal64(PointsBufferSize)
        _status = self.dll.AgAPS_TransientArbWaveformCreate(
            ViSession(Vi),
            ViInt32(ArbType),
            ViInt32(PointsBufferSize),
            Points,
            ViReal64(Dwell),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return list(Points)

    def TransientArbDefineRepeatCount(self, Vi, ContinuousEnabled, Count):
        _status = self.dll.AgAPS_TransientArbDefineRepeatCount(
            ViSession(Vi), ViBoolean(ContinuousEnabled), ViInt32(Count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TransientArbQueryRepeatCount(self, Vi):
        Val = ViReal64()
        _status = self.dll.AgAPS_TransientArbQueryRepeatCount(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def TransientListDefineDataPoints(self, Vi, Type, PointsBufferSize):
        Points = ARRAY_ViReal64(PointsBufferSize)
        _status = self.dll.AgAPS_TransientListDefineDataPoints(
            ViSession(Vi), ViInt32(Type), ViInt32(PointsBufferSize), Points
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return list(Points)

    def TransientListDefineTriggerOutput(self, Vi, Type, PointsBufferSize):
        Points = ARRAY_ViBoolean(PointsBufferSize)
        _status = self.dll.AgAPS_TransientListDefineTriggerOutput(
            ViSession(Vi), ViInt32(Type), ViInt32(PointsBufferSize), Points
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return list(Points)

    def TransientListQueryListLength(self, Vi, ListType):
        Val = ViInt32()
        _status = self.dll.AgAPS_TransientListQueryListLength(ViSession(Vi), ViInt32(ListType), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def TransientListDefineRepeatCount(self, Vi, ContinuousEnabled, Count):
        _status = self.dll.AgAPS_TransientListDefineRepeatCount(
            ViSession(Vi), ViBoolean(ContinuousEnabled), ViInt32(Count)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TransientListQueryRepeatCount(self, Vi):
        Val = ViReal64()
        _status = self.dll.AgAPS_TransientListQueryRepeatCount(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def TriggerMeasurementAbort(self, Vi):
        _status = self.dll.AgAPS_TriggerMeasurementAbort(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerMeasurementImmediate(self, Vi):
        _status = self.dll.AgAPS_TriggerMeasurementImmediate(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerMeasurementInitiate(self, Vi):
        _status = self.dll.AgAPS_TriggerMeasurementInitiate(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerTransientAbort(self, Vi):
        _status = self.dll.AgAPS_TriggerTransientAbort(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerTransientImmediate(self, Vi):
        _status = self.dll.AgAPS_TriggerTransientImmediate(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TriggerTransientInitiate(self, Vi):
        _status = self.dll.AgAPS_TriggerTransientInitiate(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitalPortWriteData(self, Vi, Data):
        _status = self.dll.AgAPS_DigitalPortWriteData(ViSession(Vi), ViInt32(Data))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitalPortReadData(self, Vi):
        Val = ViInt32()
        _status = self.dll.AgAPS_DigitalPortReadData(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def ConfigurePin(self, Vi, Pin, Function, Polarity):
        _status = self.dll.AgAPS_ConfigurePin(ViSession(Vi), ViInt32(Pin), ViInt32(Function), ViInt32(Polarity))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SignalDefine(self, Vi, ExpressionNum, ExpressionStringBufferSize, ExpressionString):
        _status = self.dll.AgAPS_SignalDefine(
            ViSession(Vi),
            ViInt32(ExpressionNum),
            ViInt32(ExpressionStringBufferSize),
            ViConstString(ExpressionString),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SignalQuery(self, Vi, ExpressionNum, ExpressionStringBufferSize):
        ExpressionString = ARRAY_ViChar(ExpressionStringBufferSize)
        _status = self.dll.AgAPS_SignalQuery(
            ViSession(Vi),
            ViInt32(ExpressionNum),
            ViInt32(ExpressionStringBufferSize),
            ExpressionString,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(ExpressionString)

    def SignalThresholdConfigure(self, Vi, ComparatorNum, Function, Operation, Level):
        _status = self.dll.AgAPS_SignalThresholdConfigure(
            ViSession(Vi),
            ViInt32(ComparatorNum),
            ViInt32(Function),
            ViInt32(Operation),
            ViReal64(Level),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SignalThresholdQuery(self, Vi, ComparatorNum):
        Function = ViInt32()
        Operation = ViInt32()
        Level = ViReal64()
        _status = self.dll.AgAPS_SignalThresholdQuery(
            ViSession(Vi),
            ViInt32(ComparatorNum),
            byref(Function),
            byref(Operation),
            byref(Level),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Function = int(Function.value)
        Operation = int(Operation.value)
        Level = float(Level.value)
        return Function, Operation, Level

    def MasterSlaveDiscoverSlaveUnits(self, Vi):
        _status = self.dll.AgAPS_MasterSlaveDiscoverSlaveUnits(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MasterSlaveResetSlaveConfiguration(self, Vi):
        _status = self.dll.AgAPS_MasterSlaveResetSlaveConfiguration(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MasterSlaveSetSlaveBusAddress(self, Vi, BusAddress):
        _status = self.dll.AgAPS_MasterSlaveSetSlaveBusAddress(ViSession(Vi), ViInt32(BusAddress))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputEnabled(self, Vi, ChannelName, Enabled):
        _status = self.dll.AgAPS_ConfigureOutputEnabled(ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureVoltageLevel(self, Vi, ChannelName, Level):
        _status = self.dll.AgAPS_ConfigureVoltageLevel(ViSession(Vi), ViConstString(ChannelName), ViReal64(Level))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCurrentLimit(self, Vi, ChannelName, Behavior, Limit):
        _status = self.dll.AgAPS_ConfigureCurrentLimit(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(Behavior), ViReal64(Limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOVP(self, Vi, ChannelName, Enabled, Limit):
        _status = self.dll.AgAPS_ConfigureOVP(
            ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled), ViReal64(Limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputRange(self, Vi, ChannelName, RangeType, Range):
        _status = self.dll.AgAPS_ConfigureOutputRange(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(RangeType), ViReal64(Range)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMaxCurrentLimit(self, Vi, ChannelName, VoltageLevel):
        MaxCurrentLimit = ViReal64()
        _status = self.dll.AgAPS_QueryMaxCurrentLimit(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViReal64(VoltageLevel),
            byref(MaxCurrentLimit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MaxCurrentLimit.value)

    def QueryMaxVoltageLevel(self, Vi, ChannelName, CurrentLimit):
        MaxVoltageLevel = ViReal64()
        _status = self.dll.AgAPS_QueryMaxVoltageLevel(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViReal64(CurrentLimit),
            byref(MaxVoltageLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MaxVoltageLevel.value)

    def Measure(self, Vi, ChannelName, MeasurementType):
        Measurement = ViReal64()
        _status = self.dll.AgAPS_Measure(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(MeasurementType),
            byref(Measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Measurement.value)

    def QueryOutputState(self, Vi, ChannelName, OutputState):
        InState = ViBoolean()
        _status = self.dll.AgAPS_QueryOutputState(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(OutputState),
            byref(InState),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(InState.value)

    def ResetOutputProtection(self, Vi, ChannelName):
        _status = self.dll.AgAPS_ResetOutputProtection(ViSession(Vi), ViConstString(ChannelName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Abort(self, Vi):
        _status = self.dll.AgAPS_Abort(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Initiate(self, Vi):
        _status = self.dll.AgAPS_Initiate(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SendSoftwareTrigger(self, Vi):
        _status = self.dll.AgAPS_SendSoftwareTrigger(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggeredCurrentLimit(self, Vi, ChannelName, Limit):
        _status = self.dll.AgAPS_ConfigureTriggeredCurrentLimit(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(Limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggeredVoltageLevel(self, Vi, ChannelName, Level):
        _status = self.dll.AgAPS_ConfigureTriggeredVoltageLevel(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(Level)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerSource(self, Vi, ChannelName, Source):
        _status = self.dll.AgAPS_ConfigureTriggerSource(ViSession(Vi), ViConstString(ChannelName), ViInt32(Source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
