from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .AgAPS_dllwrap import *


class AgAPS(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = AgAPS_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SystemClearIO(self):
        """"""
        return self._dllwrap.SystemClearIO(self._vi)

    def SystemDisableLocalControls(self):
        """"""
        return self._dllwrap.SystemDisableLocalControls(self._vi)

    def SystemEnableLocalControls(self):
        """"""
        return self._dllwrap.SystemEnableLocalControls(self._vi)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def SystemRecallState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemRecallState(self._vi, Identifier)

    def SystemSaveState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemSaveState(self._vi, Identifier)

    def SystemWaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.SystemWaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def SystemWriteString(self, DataBufferSize, Data):
        """

        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, DataBufferSize, Data)

    def viRead(self, BufferSize):
        """

        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.viRead(self._vi, BufferSize)

    def viWrite(self, Count, Buffer):
        """

        :param Count:
        :type Count:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.viWrite(self._vi, Count, Buffer)

    def SystemExportInstrumentState(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemExportInstrumentState(self._vi, ValBufferSize)

    def SystemImportInstrumentState(self, StateBufferSize):
        """

        :param StateBufferSize:
        :type StateBufferSize:
        """
        return self._dllwrap.SystemImportInstrumentState(self._vi, StateBufferSize)

    def SafetyDisconnectSystemConnect(self):
        """"""
        return self._dllwrap.SafetyDisconnectSystemConnect(self._vi)

    def SafetyDisconnectSystemQueryInputState(self):
        """"""
        return self._dllwrap.SafetyDisconnectSystemQueryInputState(self._vi)

    def SafetyDisconnectSystemQueryProtectionStatus(self):
        """"""
        return self._dllwrap.SafetyDisconnectSystemQueryProtectionStatus(self._vi)

    def StatusPreset(self):
        """"""
        return self._dllwrap.StatusPreset(self._vi)

    def StatusConfigureServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.StatusConfigureServiceRequest(self._vi, Reason)

    def StatusClear(self):
        """"""
        return self._dllwrap.StatusClear(self._vi)

    def StatusGetRegister(self, Register, SubRegister):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusGetRegister(self._vi, Register, SubRegister)

    def StatusSetRegister(self, Register, SubRegister, Val):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusSetRegister(self._vi, Register, SubRegister, Val)

    def StatusConfigureOperationServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.StatusConfigureOperationServiceRequest(self._vi, Reason)

    def StatusConfigureQuestionableServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.StatusConfigureQuestionableServiceRequest(self._vi, Reason)

    def StatusUserDefineSource(self, Bit, Expression):
        """

        :param Bit:
        :type Bit:
        :param Expression:
        :type Expression:
        """
        return self._dllwrap.StatusUserDefineSource(self._vi, Bit, Expression)

    def StatusUserQuerySource(self, Bit):
        """

        :param Bit:
        :type Bit:
        """
        return self._dllwrap.StatusUserQuerySource(self._vi, Bit)

    def OutputQueryState(self, OutputState):
        """

        :param OutputState:
        :type OutputState:
        """
        return self._dllwrap.OutputQueryState(self._vi, OutputState)

    def OutputSequenceConfigure(self, Enabled, DelayOffset, OnSource, OnDelay, OffSource, OffDelay):
        """

        :param Enabled:
        :type Enabled:
        :param DelayOffset:
        :type DelayOffset:
        :param OnSource:
        :type OnSource:
        :param OnDelay:
        :type OnDelay:
        :param OffSource:
        :type OffSource:
        :param OffDelay:
        :type OffDelay:
        """
        return self._dllwrap.OutputSequenceConfigure(
            self._vi, Enabled, DelayOffset, OnSource, OnDelay, OffSource, OffDelay
        )

    def QueryActiveMaxPowerPoint(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.QueryActiveMaxPowerPoint(self._vi, Type)

    def QueryMaxScaleFactorCurrent(self):
        """"""
        return self._dllwrap.QueryMaxScaleFactorCurrent(self._vi)

    def QueryMaxScaleFactorVoltage(self):
        """"""
        return self._dllwrap.QueryMaxScaleFactorVoltage(self._vi)

    def Configure(self, IMP, ISC, VMP, VOC, Shape):
        """

        :param IMP:
        :type IMP:
        :param ISC:
        :type ISC:
        :param VMP:
        :type VMP:
        :param VOC:
        :type VOC:
        :param Shape:
        :type Shape:
        """
        return self._dllwrap.Configure(self._vi, IMP, ISC, VMP, VOC, Shape)

    def QueryMaxISC(self):
        """"""
        return self._dllwrap.QueryMaxISC(self._vi)

    def QueryMaxIMP(self):
        """"""
        return self._dllwrap.QueryMaxIMP(self._vi)

    def QueryMaxVMP(self):
        """"""
        return self._dllwrap.QueryMaxVMP(self._vi)

    def QueryMaxVOC(self):
        """"""
        return self._dllwrap.QueryMaxVOC(self._vi)

    def Activate(self, Table):
        """

        :param Table:
        :type Table:
        """
        return self._dllwrap.Activate(self._vi, Table)

    def Update(self, Table):
        """

        :param Table:
        :type Table:
        """
        return self._dllwrap.Update(self._vi, Table)

    def QueryTableLength(self, TableNumber):
        """

        :param TableNumber:
        :type TableNumber:
        """
        return self._dllwrap.QueryTableLength(self._vi, TableNumber)

    def QueryTablePoints2(self, TableNumber, ValBufferSize):
        """

        :param TableNumber:
        :type TableNumber:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.QueryTablePoints2(self._vi, TableNumber, ValBufferSize)

    def DefineTablePoints(self, TableNumber, CurrentBufferSize):
        """

        :param TableNumber:
        :type TableNumber:
        :param CurrentBufferSize:
        :type CurrentBufferSize:
        """
        return self._dllwrap.DefineTablePoints(self._vi, TableNumber, CurrentBufferSize)

    def TablePoints3(self, TableNumber, VoltageBufferSize):
        """

        :param TableNumber:
        :type TableNumber:
        :param VoltageBufferSize:
        :type VoltageBufferSize:
        """
        return self._dllwrap.TablePoints3(self._vi, TableNumber, VoltageBufferSize)

    def QueryTableLength3(self, TableNumber):
        """

        :param TableNumber:
        :type TableNumber:
        """
        return self._dllwrap.QueryTableLength3(self._vi, TableNumber)

    def QueryTablePoints(self, TableNumber, ValBufferSize):
        """

        :param TableNumber:
        :type TableNumber:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.QueryTablePoints(self._vi, TableNumber, ValBufferSize)

    def MeasurementFetchIndexed(self, MeasurementType, StartIndex, NumOfPoints, MaxTimeMilliseconds):
        """

        :param MeasurementType:
        :type MeasurementType:
        :param StartIndex:
        :type StartIndex:
        :param NumOfPoints:
        :type NumOfPoints:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.MeasurementFetchIndexed(
            self._vi, MeasurementType, StartIndex, NumOfPoints, MaxTimeMilliseconds
        )

    def MeasurementFetchIndexedArray(
        self, MeasurementType, StartIndex, NumOfPoints, MaxTimeMilliseconds, ValBufferSize
    ):
        """

        :param MeasurementType:
        :type MeasurementType:
        :param StartIndex:
        :type StartIndex:
        :param NumOfPoints:
        :type NumOfPoints:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.MeasurementFetchIndexedArray(
            self._vi,
            MeasurementType,
            StartIndex,
            NumOfPoints,
            MaxTimeMilliseconds,
            ValBufferSize,
        )

    def MeasurementMeasureArray(self, MeasurementType, MaxTimeMilliseconds, ValBufferSize):
        """

        :param MeasurementType:
        :type MeasurementType:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.MeasurementMeasureArray(self._vi, MeasurementType, MaxTimeMilliseconds, ValBufferSize)

    def MeasurementFetchArray(self, MeasurementType, MaxTimeMilliseconds, ValBufferSize):
        """

        :param MeasurementType:
        :type MeasurementType:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.MeasurementFetchArray(self._vi, MeasurementType, MaxTimeMilliseconds, ValBufferSize)

    def MeasurementResetAmpHour(self):
        """"""
        return self._dllwrap.MeasurementResetAmpHour(self._vi)

    def MeasurementResetWattHour(self):
        """"""
        return self._dllwrap.MeasurementResetWattHour(self._vi)

    def MeasurementMeasure(self, MeasurementType, MaxTimeMilliseconds):
        """

        :param MeasurementType:
        :type MeasurementType:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.MeasurementMeasure(self._vi, MeasurementType, MaxTimeMilliseconds)

    def MeasurementFetch(self, MeasurementType, MaxTimeMilliseconds):
        """

        :param MeasurementType:
        :type MeasurementType:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.MeasurementFetch(self._vi, MeasurementType, MaxTimeMilliseconds)

    def MeasurementSweepConfigure(self, Interval, Points, OffsetPoints):
        """

        :param Interval:
        :type Interval:
        :param Points:
        :type Points:
        :param OffsetPoints:
        :type OffsetPoints:
        """
        return self._dllwrap.MeasurementSweepConfigure(self._vi, Interval, Points, OffsetPoints)

    def ProtectionReset(self):
        """"""
        return self._dllwrap.ProtectionReset(self._vi)

    def ProtectionCurrentConfigure(self, LimitBehavior, StartEvent, Delay):
        """

        :param LimitBehavior:
        :type LimitBehavior:
        :param StartEvent:
        :type StartEvent:
        :param Delay:
        :type Delay:
        """
        return self._dllwrap.ProtectionCurrentConfigure(self._vi, LimitBehavior, StartEvent, Delay)

    def TransientArbWaveformCreate(self, ArbType, PointsBufferSize, Dwell):
        """

        :param ArbType:
        :type ArbType:
        :param PointsBufferSize:
        :type PointsBufferSize:
        :param Dwell:
        :type Dwell:
        """
        return self._dllwrap.TransientArbWaveformCreate(self._vi, ArbType, PointsBufferSize, Dwell)

    def TransientArbDefineRepeatCount(self, ContinuousEnabled, Count):
        """

        :param ContinuousEnabled:
        :type ContinuousEnabled:
        :param Count:
        :type Count:
        """
        return self._dllwrap.TransientArbDefineRepeatCount(self._vi, ContinuousEnabled, Count)

    def TransientArbQueryRepeatCount(self):
        """"""
        return self._dllwrap.TransientArbQueryRepeatCount(self._vi)

    def TransientListDefineDataPoints(self, Type, PointsBufferSize):
        """

        :param Type:
        :type Type:
        :param PointsBufferSize:
        :type PointsBufferSize:
        """
        return self._dllwrap.TransientListDefineDataPoints(self._vi, Type, PointsBufferSize)

    def TransientListDefineTriggerOutput(self, Type, PointsBufferSize):
        """

        :param Type:
        :type Type:
        :param PointsBufferSize:
        :type PointsBufferSize:
        """
        return self._dllwrap.TransientListDefineTriggerOutput(self._vi, Type, PointsBufferSize)

    def TransientListQueryListLength(self, ListType):
        """

        :param ListType:
        :type ListType:
        """
        return self._dllwrap.TransientListQueryListLength(self._vi, ListType)

    def TransientListDefineRepeatCount(self, ContinuousEnabled, Count):
        """

        :param ContinuousEnabled:
        :type ContinuousEnabled:
        :param Count:
        :type Count:
        """
        return self._dllwrap.TransientListDefineRepeatCount(self._vi, ContinuousEnabled, Count)

    def TransientListQueryRepeatCount(self):
        """"""
        return self._dllwrap.TransientListQueryRepeatCount(self._vi)

    def TriggerMeasurementAbort(self):
        """"""
        return self._dllwrap.TriggerMeasurementAbort(self._vi)

    def TriggerMeasurementImmediate(self):
        """"""
        return self._dllwrap.TriggerMeasurementImmediate(self._vi)

    def TriggerMeasurementInitiate(self):
        """"""
        return self._dllwrap.TriggerMeasurementInitiate(self._vi)

    def TriggerTransientAbort(self):
        """"""
        return self._dllwrap.TriggerTransientAbort(self._vi)

    def TriggerTransientImmediate(self):
        """"""
        return self._dllwrap.TriggerTransientImmediate(self._vi)

    def TriggerTransientInitiate(self):
        """"""
        return self._dllwrap.TriggerTransientInitiate(self._vi)

    def DigitalPortWriteData(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.DigitalPortWriteData(self._vi, Data)

    def DigitalPortReadData(self):
        """"""
        return self._dllwrap.DigitalPortReadData(self._vi)

    def ConfigurePin(self, Pin, Function, Polarity):
        """

        :param Pin:
        :type Pin:
        :param Function:
        :type Function:
        :param Polarity:
        :type Polarity:
        """
        return self._dllwrap.ConfigurePin(self._vi, Pin, Function, Polarity)

    def SignalDefine(self, ExpressionNum, ExpressionStringBufferSize, ExpressionString):
        """

        :param ExpressionNum:
        :type ExpressionNum:
        :param ExpressionStringBufferSize:
        :type ExpressionStringBufferSize:
        :param ExpressionString:
        :type ExpressionString:
        """
        return self._dllwrap.SignalDefine(self._vi, ExpressionNum, ExpressionStringBufferSize, ExpressionString)

    def SignalQuery(self, ExpressionNum, ExpressionStringBufferSize):
        """

        :param ExpressionNum:
        :type ExpressionNum:
        :param ExpressionStringBufferSize:
        :type ExpressionStringBufferSize:
        """
        return self._dllwrap.SignalQuery(self._vi, ExpressionNum, ExpressionStringBufferSize)

    def SignalThresholdConfigure(self, ComparatorNum, Function, Operation, Level):
        """

        :param ComparatorNum:
        :type ComparatorNum:
        :param Function:
        :type Function:
        :param Operation:
        :type Operation:
        :param Level:
        :type Level:
        """
        return self._dllwrap.SignalThresholdConfigure(self._vi, ComparatorNum, Function, Operation, Level)

    def SignalThresholdQuery(self, ComparatorNum):
        """

        :param ComparatorNum:
        :type ComparatorNum:
        """
        return self._dllwrap.SignalThresholdQuery(self._vi, ComparatorNum)

    def MasterSlaveDiscoverSlaveUnits(self):
        """"""
        return self._dllwrap.MasterSlaveDiscoverSlaveUnits(self._vi)

    def MasterSlaveResetSlaveConfiguration(self):
        """"""
        return self._dllwrap.MasterSlaveResetSlaveConfiguration(self._vi)

    def MasterSlaveSetSlaveBusAddress(self, BusAddress):
        """

        :param BusAddress:
        :type BusAddress:
        """
        return self._dllwrap.MasterSlaveSetSlaveBusAddress(self._vi, BusAddress)

    def ConfigureOutputEnabled(self, ChannelName, Enabled):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureOutputEnabled(self._vi, ChannelName, Enabled)

    def ConfigureVoltageLevel(self, ChannelName, Level):
        """

        :param ChannelName:
        :type ChannelName:
        :param Level:
        :type Level:
        """
        return self._dllwrap.ConfigureVoltageLevel(self._vi, ChannelName, Level)

    def ConfigureCurrentLimit(self, ChannelName, Behavior, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Behavior:
        :type Behavior:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureCurrentLimit(self._vi, ChannelName, Behavior, Limit)

    def ConfigureOVP(self, ChannelName, Enabled, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureOVP(self._vi, ChannelName, Enabled, Limit)

    def ConfigureOutputRange(self, ChannelName, RangeType, Range):
        """

        :param ChannelName:
        :type ChannelName:
        :param RangeType:
        :type RangeType:
        :param Range:
        :type Range:
        """
        return self._dllwrap.ConfigureOutputRange(self._vi, ChannelName, RangeType, Range)

    def QueryMaxCurrentLimit(self, ChannelName, VoltageLevel):
        """

        :param ChannelName:
        :type ChannelName:
        :param VoltageLevel:
        :type VoltageLevel:
        """
        return self._dllwrap.QueryMaxCurrentLimit(self._vi, ChannelName, VoltageLevel)

    def QueryMaxVoltageLevel(self, ChannelName, CurrentLimit):
        """

        :param ChannelName:
        :type ChannelName:
        :param CurrentLimit:
        :type CurrentLimit:
        """
        return self._dllwrap.QueryMaxVoltageLevel(self._vi, ChannelName, CurrentLimit)

    def Measure(self, ChannelName, MeasurementType):
        """

        :param ChannelName:
        :type ChannelName:
        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.Measure(self._vi, ChannelName, MeasurementType)

    def QueryOutputState(self, ChannelName, OutputState):
        """

        :param ChannelName:
        :type ChannelName:
        :param OutputState:
        :type OutputState:
        """
        return self._dllwrap.QueryOutputState(self._vi, ChannelName, OutputState)

    def ResetOutputProtection(self, ChannelName):
        """

        :param ChannelName:
        :type ChannelName:
        """
        return self._dllwrap.ResetOutputProtection(self._vi, ChannelName)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def Initiate(self):
        """"""
        return self._dllwrap.Initiate(self._vi)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def ConfigureTriggeredCurrentLimit(self, ChannelName, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureTriggeredCurrentLimit(self._vi, ChannelName, Limit)

    def ConfigureTriggeredVoltageLevel(self, ChannelName, Level):
        """

        :param ChannelName:
        :type ChannelName:
        :param Level:
        :type Level:
        """
        return self._dllwrap.ConfigureTriggeredVoltageLevel(self._vi, ChannelName, Level)

    def ConfigureTriggerSource(self, ChannelName, Source):
        """

        :param ChannelName:
        :type ChannelName:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureTriggerSource(self._vi, ChannelName, Source)
