from __future__ import annotations

from .hpe364xa import *
from .IIviDCPwrOutput import IIviDCPwrOutput


class IIviDCPwrOutputs:
    def __init__(self, root):
        self.root = root
        self.__channels = None
        """:type : dict[str,IIviDCPwrOutput]"""

    @property
    def Count(self):
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_ENGINE_PUBLIC_ATTR_BASE + 203)

    def Name(self, Index):
        return self.root.dllwrap.GetChannelName(Index, 256)

    def Item(self, OutputName):
        """
        Gets a pointer to an output object.

        :param OutputName: The name of a output. It may be either a name returned by get_Name or a name
            mapped to a particular repeated capability in the session in the configuration
            store.
        :type OutputName: str

        :return: A pointer to a class-compliant IIviDCPwrOutput interface.
        :rtype: IIviDCPwrOutput
        """
        if self.__channels is None:
            self.__channels = {}
            for i in range(self.Count):
                name = self.Name(i + 1)
                self.__channels.update({name: IIviDCPwrOutput(self.root, name)})
        return self.__channels[OutputName]
