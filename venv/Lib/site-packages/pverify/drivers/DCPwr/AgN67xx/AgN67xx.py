from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .AgN67xx_dllwrap import *


class AgN67xx(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = AgN67xx_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViInt64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViInt64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ConfigureOutputEnabled(self, ChannelName, Enabled):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureOutputEnabled(self._vi, ChannelName, Enabled)

    def ConfigureVoltageLevel(self, ChannelName, Level):
        """

        :param ChannelName:
        :type ChannelName:
        :param Level:
        :type Level:
        """
        return self._dllwrap.ConfigureVoltageLevel(self._vi, ChannelName, Level)

    def ConfigureCurrentLimit(self, ChannelName, Behavior, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Behavior:
        :type Behavior:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureCurrentLimit(self._vi, ChannelName, Behavior, Limit)

    def ConfigureOVP(self, ChannelName, Enabled, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureOVP(self._vi, ChannelName, Enabled, Limit)

    def ConfigureOutputRange(self, ChannelName, RangeType, Range):
        """

        :param ChannelName:
        :type ChannelName:
        :param RangeType:
        :type RangeType:
        :param Range:
        :type Range:
        """
        return self._dllwrap.ConfigureOutputRange(self._vi, ChannelName, RangeType, Range)

    def QueryMaxCurrentLimit(self, ChannelName, VoltageLevel):
        """

        :param ChannelName:
        :type ChannelName:
        :param VoltageLevel:
        :type VoltageLevel:
        """
        return self._dllwrap.QueryMaxCurrentLimit(self._vi, ChannelName, VoltageLevel)

    def QueryMaxVoltageLevel(self, ChannelName, CurrentLimit):
        """

        :param ChannelName:
        :type ChannelName:
        :param CurrentLimit:
        :type CurrentLimit:
        """
        return self._dllwrap.QueryMaxVoltageLevel(self._vi, ChannelName, CurrentLimit)

    def ConfigureTriggeredCurrentLimit(self, ChannelName, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureTriggeredCurrentLimit(self._vi, ChannelName, Limit)

    def ConfigureTriggeredVoltageLevel(self, ChannelName, Level):
        """

        :param ChannelName:
        :type ChannelName:
        :param Level:
        :type Level:
        """
        return self._dllwrap.ConfigureTriggeredVoltageLevel(self._vi, ChannelName, Level)

    def ConfigureTriggerSource(self, ChannelName, Source):
        """

        :param ChannelName:
        :type ChannelName:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureTriggerSource(self._vi, ChannelName, Source)

    def Measure(self, ChannelName, MeasurementType):
        """

        :param ChannelName:
        :type ChannelName:
        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.Measure(self._vi, ChannelName, MeasurementType)

    def QueryOutputState(self, ChannelName, OutputState):
        """

        :param ChannelName:
        :type ChannelName:
        :param OutputState:
        :type OutputState:
        """
        return self._dllwrap.QueryOutputState(self._vi, ChannelName, OutputState)

    def ResetOutputProtection(self, ChannelName):
        """

        :param ChannelName:
        :type ChannelName:
        """
        return self._dllwrap.ResetOutputProtection(self._vi, ChannelName)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def Initiate(self):
        """"""
        return self._dllwrap.Initiate(self._vi)

    def SendSoftwareTrigger(self):
        """"""
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def GetDCPwrOutputName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetDCPwrOutputName(self._vi, Index, NameBufferSize)

    def GetDLogName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetDLogName(self._vi, Index, NameBufferSize)

    def GetMeasurementName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetMeasurementName(self._vi, Index, NameBufferSize)

    def GetOutputName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetOutputName(self._vi, Index, NameBufferSize)

    def GetProtectionName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetProtectionName(self._vi, Index, NameBufferSize)

    def GetStatusName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetStatusName(self._vi, Index, NameBufferSize)

    def GetSystemName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetSystemName(self._vi, Index, NameBufferSize)

    def GetTransientName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetTransientName(self._vi, Index, NameBufferSize)

    def MeasurementsSendSoftwareTrigger(self):
        """"""
        return self._dllwrap.MeasurementsSendSoftwareTrigger(self._vi)

    def MeasurementsItemTrigInitiate(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.MeasurementsItemTrigInitiate(self._vi, RepCapIdentifier)

    def MeasurementsItemTrigImmediate(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.MeasurementsItemTrigImmediate(self._vi, RepCapIdentifier)

    def MeasurementsItemTrigAbort(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.MeasurementsItemTrigAbort(self._vi, RepCapIdentifier)

    def MeasurementsItemMeasureArray(self, RepCapIdentifier, MeasurementType, RetValBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param MeasurementType:
        :type MeasurementType:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasurementsItemMeasureArray(self._vi, RepCapIdentifier, MeasurementType, RetValBufferSize)

    def MeasurementsItemMeasure(self, RepCapIdentifier, MeasurementType):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.MeasurementsItemMeasure(self._vi, RepCapIdentifier, MeasurementType)

    def MeasurementsItemFetchArray(self, RepCapIdentifier, FetchType, RetValBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param FetchType:
        :type FetchType:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.MeasurementsItemFetchArray(self._vi, RepCapIdentifier, FetchType, RetValBufferSize)

    def MeasurementsItemFetch(self, RepCapIdentifier, FetchType, WindowType):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param FetchType:
        :type FetchType:
        :param WindowType:
        :type WindowType:
        """
        return self._dllwrap.MeasurementsItemFetch(self._vi, RepCapIdentifier, FetchType, WindowType)

    def MeasurementsItemConfigure(self, RepCapIdentifier, TriggerType, TriggerOffsetPoints, Points, SampleInterval):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param TriggerType:
        :type TriggerType:
        :param TriggerOffsetPoints:
        :type TriggerOffsetPoints:
        :param Points:
        :type Points:
        :param SampleInterval:
        :type SampleInterval:
        """
        return self._dllwrap.MeasurementsItemConfigure(
            self._vi,
            RepCapIdentifier,
            TriggerType,
            TriggerOffsetPoints,
            Points,
            SampleInterval,
        )

    def MeasurementsItemGetMeasurementRange(self, RepCapIdentifier, MeasurementType):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.MeasurementsItemGetMeasurementRange(self._vi, RepCapIdentifier, MeasurementType)

    def MeasurementsItemSetMeasurementRange(self, RepCapIdentifier, MeasurementType, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param MeasurementType:
        :type MeasurementType:
        :param Val:
        :type Val:
        """
        return self._dllwrap.MeasurementsItemSetMeasurementRange(self._vi, RepCapIdentifier, MeasurementType, Val)

    def Measurements3Item2GetMeasurementRangeAuto(self, RepCapIdentifier, MeasurementType):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.Measurements3Item2GetMeasurementRangeAuto(self._vi, RepCapIdentifier, MeasurementType)

    def Measurements3Item2SetMeasurementRangeAuto(self, RepCapIdentifier, MeasurementType, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param MeasurementType:
        :type MeasurementType:
        :param Val:
        :type Val:
        """
        return self._dllwrap.Measurements3Item2SetMeasurementRangeAuto(self._vi, RepCapIdentifier, MeasurementType, Val)

    def Outputs2GetCoupleMaxDelayOffset(self):
        """"""
        return self._dllwrap.Outputs2GetCoupleMaxDelayOffset(self._vi)

    def OutputsConfigureOffSequence(self, Channel1Fall, Channel2Fall, Channel3Fall, Channel4Fall):
        """

        :param Channel1Fall:
        :type Channel1Fall:
        :param Channel2Fall:
        :type Channel2Fall:
        :param Channel3Fall:
        :type Channel3Fall:
        :param Channel4Fall:
        :type Channel4Fall:
        """
        return self._dllwrap.OutputsConfigureOffSequence(
            self._vi, Channel1Fall, Channel2Fall, Channel3Fall, Channel4Fall
        )

    def OutputsConfigureOnSequence(self, Channel1Rise, Channel2Rise, Channel3Rise, Channel4Rise):
        """

        :param Channel1Rise:
        :type Channel1Rise:
        :param Channel2Rise:
        :type Channel2Rise:
        :param Channel3Rise:
        :type Channel3Rise:
        :param Channel4Rise:
        :type Channel4Rise:
        """
        return self._dllwrap.OutputsConfigureOnSequence(
            self._vi, Channel1Rise, Channel2Rise, Channel3Rise, Channel4Rise
        )

    def Outputs3ItemVoltageLevel(self, RepCapIdentifier, Range, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Range:
        :type Range:
        :param Val:
        :type Val:
        """
        return self._dllwrap.Outputs3ItemVoltageLevel(self._vi, RepCapIdentifier, Range, Val)

    def Outputs3ItemQueryVoltageLevelMax(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.Outputs3ItemQueryVoltageLevelMax(self._vi, RepCapIdentifier)

    def Outputs3ItemQueryState(self, RepCapIdentifier, OutputState):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param OutputState:
        :type OutputState:
        """
        return self._dllwrap.Outputs3ItemQueryState(self._vi, RepCapIdentifier, OutputState)

    def Outputs3ItemQueryPowerLimitMax(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.Outputs3ItemQueryPowerLimitMax(self._vi, RepCapIdentifier)

    def Outputs3ItemQueryCurrentLimitMax(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.Outputs3ItemQueryCurrentLimitMax(self._vi, RepCapIdentifier)

    def Outputs3ItemCurrentLimit(self, RepCapIdentifier, Range, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Range:
        :type Range:
        :param Val:
        :type Val:
        """
        return self._dllwrap.Outputs3ItemCurrentLimit(self._vi, RepCapIdentifier, Range, Val)

    def Outputs3ItemConfigureCurrentLimit(self, RepCapIdentifier, Behavior, Limit):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Behavior:
        :type Behavior:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.Outputs3ItemConfigureCurrentLimit(self._vi, RepCapIdentifier, Behavior, Limit)

    def ProtectionsItemConfigureOVP(self, RepCapIdentifier, Limit):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ProtectionsItemConfigureOVP(self._vi, RepCapIdentifier, Limit)

    def ProtectionsItemResetOutputProtection(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.ProtectionsItemResetOutputProtection(self._vi, RepCapIdentifier)

    def StatusesPreset(self):
        """"""
        return self._dllwrap.StatusesPreset(self._vi)

    def StatusesConfigureServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.StatusesConfigureServiceRequest(self._vi, Reason)

    def StatusesClear(self):
        """"""
        return self._dllwrap.StatusesClear(self._vi)

    def StatusesItemQueryRegister(self, RepCapIdentifier, Register, SubRegister):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusesItemQueryRegister(self._vi, RepCapIdentifier, Register, SubRegister)

    def StatusesItemConfigureRegister(self, RepCapIdentifier, Register, SubRegister, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusesItemConfigureRegister(self._vi, RepCapIdentifier, Register, SubRegister, Val)

    def StatusesItemGetRegister(self, RepCapIdentifier, Register, SubRegister):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusesItemGetRegister(self._vi, RepCapIdentifier, Register, SubRegister)

    def StatusesItemSetRegister(self, RepCapIdentifier, Register, SubRegister, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusesItemSetRegister(self._vi, RepCapIdentifier, Register, SubRegister, Val)

    def Statuses3Item2ConfigureServiceRequest(self, RepCapIdentifier, Reason):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Reason:
        :type Reason:
        """
        return self._dllwrap.Statuses3Item2ConfigureServiceRequest(self._vi, RepCapIdentifier, Reason)

    def SystemsConfigureIOPort(self, Pin, Function, Polarity):
        """

        :param Pin:
        :type Pin:
        :param Function:
        :type Function:
        :param Polarity:
        :type Polarity:
        """
        return self._dllwrap.SystemsConfigureIOPort(self._vi, Pin, Function, Polarity)

    def SystemsDeleteAllParallelGroups(self):
        """"""
        return self._dllwrap.SystemsDeleteAllParallelGroups(self._vi)

    def SystemsDeleteParallelGroup(self, Val):
        """

        :param Val:
        :type Val:
        """
        return self._dllwrap.SystemsDeleteParallelGroup(self._vi, Val)

    def SystemsDisableLocalControls(self):
        """"""
        return self._dllwrap.SystemsDisableLocalControls(self._vi)

    def SystemsEnableLocalControls(self):
        """"""
        return self._dllwrap.SystemsEnableLocalControls(self._vi)

    def SystemsQueryIOPort(self, Pin):
        """

        :param Pin:
        :type Pin:
        """
        return self._dllwrap.SystemsQueryIOPort(self._vi, Pin)

    def SystemsRecallState(self, Val):
        """

        :param Val:
        :type Val:
        """
        return self._dllwrap.SystemsRecallState(self._vi, Val)

    def SystemsSaveState(self, Val):
        """

        :param Val:
        :type Val:
        """
        return self._dllwrap.SystemsSaveState(self._vi, Val)

    def SystemsWaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.SystemsWaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def SystemsGetDate(self):
        """"""
        return self._dllwrap.SystemsGetDate(self._vi)

    def SystemsGetTime(self):
        """"""
        return self._dllwrap.SystemsGetTime(self._vi)

    def SystemsSetDate(self, Year, Month, Day):
        """

        :param Year:
        :type Year:
        :param Month:
        :type Month:
        :param Day:
        :type Day:
        """
        return self._dllwrap.SystemsSetDate(self._vi, Year, Month, Day)

    def SystemsSetTime(self, Hour, Minute, Second):
        """

        :param Hour:
        :type Hour:
        :param Minute:
        :type Minute:
        :param Second:
        :type Second:
        """
        return self._dllwrap.SystemsSetTime(self._vi, Hour, Minute, Second)

    def SystemRead(self, Size):
        """

        :param Size:
        :type Size:
        """
        return self._dllwrap.SystemRead(self._vi, Size)

    def SystemWrite(self, CommandString):
        """

        :param CommandString:
        :type CommandString:
        """
        return self._dllwrap.SystemWrite(self._vi, CommandString)

    def TransientsSendSoftwareTrigger(self):
        """"""
        return self._dllwrap.TransientsSendSoftwareTrigger(self._vi)

    def TransientsItemTrigInitiate(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.TransientsItemTrigInitiate(self._vi, RepCapIdentifier)

    def TransientsItemTrigImmediate(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.TransientsItemTrigImmediate(self._vi, RepCapIdentifier)

    def TransientsItemTrigAbort(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.TransientsItemTrigAbort(self._vi, RepCapIdentifier)

    def TransientsItemListTrigOutPoints(self, RepCapIdentifier, BOSBufferSize, EOSBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param BOSBufferSize:
        :type BOSBufferSize:
        :param EOSBufferSize:
        :type EOSBufferSize:
        """
        return self._dllwrap.TransientsItemListTrigOutPoints(self._vi, RepCapIdentifier, BOSBufferSize, EOSBufferSize)

    def TransientsItemListPoints(
        self,
        RepCapIdentifier,
        voltListBufferSize,
        currListBufferSize,
        dwellListBufferSize,
    ):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param voltListBufferSize:
        :type voltListBufferSize:
        :param currListBufferSize:
        :type currListBufferSize:
        :param dwellListBufferSize:
        :type dwellListBufferSize:
        """
        return self._dllwrap.TransientsItemListPoints(
            self._vi,
            RepCapIdentifier,
            voltListBufferSize,
            currListBufferSize,
            dwellListBufferSize,
        )

    def TransientsItemListConfigure(self, RepCapIdentifier, Pace, ListTermination, Repeat, InfiniteRepeat):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Pace:
        :type Pace:
        :param ListTermination:
        :type ListTermination:
        :param Repeat:
        :type Repeat:
        :param InfiniteRepeat:
        :type InfiniteRepeat:
        """
        return self._dllwrap.TransientsItemListConfigure(
            self._vi, RepCapIdentifier, Pace, ListTermination, Repeat, InfiniteRepeat
        )

    def TransientsItemGetListLength(self, RepCapIdentifier, ListType):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param ListType:
        :type ListType:
        """
        return self._dllwrap.TransientsItemGetListLength(self._vi, RepCapIdentifier, ListType)

    def TransientsItemGetStepTrigLevel(self, RepCapIdentifier, TriggerLevelType):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param TriggerLevelType:
        :type TriggerLevelType:
        """
        return self._dllwrap.TransientsItemGetStepTrigLevel(self._vi, RepCapIdentifier, TriggerLevelType)

    def TransientsItemSetStepTrigLevel(self, RepCapIdentifier, TriggerLevelType, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param TriggerLevelType:
        :type TriggerLevelType:
        :param Val:
        :type Val:
        """
        return self._dllwrap.TransientsItemSetStepTrigLevel(self._vi, RepCapIdentifier, TriggerLevelType, Val)

    def Transients2Item2ListConfigure(
        self,
        RepCapIdentifier,
        Pace,
        ListTermination,
        Repeat,
        InfiniteRepeat,
        TransientSelect,
    ):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Pace:
        :type Pace:
        :param ListTermination:
        :type ListTermination:
        :param Repeat:
        :type Repeat:
        :param InfiniteRepeat:
        :type InfiniteRepeat:
        :param TransientSelect:
        :type TransientSelect:
        """
        return self._dllwrap.Transients2Item2ListConfigure(
            self._vi,
            RepCapIdentifier,
            Pace,
            ListTermination,
            Repeat,
            InfiniteRepeat,
            TransientSelect,
        )

    def AgilentN67xxDLogsConfigureDlogsTriggerSource(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.AgilentN67xxDLogsConfigureDlogsTriggerSource(self._vi, Source)

    def AgilentN67xxDLogsTrigger(self):
        """"""
        return self._dllwrap.AgilentN67xxDLogsTrigger(self._vi)

    def AgilentN67xxDLogsConfigureDlogsTime(self, Time, TimeInterval):
        """

        :param Time:
        :type Time:
        :param TimeInterval:
        :type TimeInterval:
        """
        return self._dllwrap.AgilentN67xxDLogsConfigureDlogsTime(self._vi, Time, TimeInterval)

    def AgilentN67xxDLogsConfigureDlogsTriggerOffset(self, OffsetPcnt):
        """

        :param OffsetPcnt:
        :type OffsetPcnt:
        """
        return self._dllwrap.AgilentN67xxDLogsConfigureDlogsTriggerOffset(self._vi, OffsetPcnt)

    def AgilentN67xxDLogsConfigureDlogsFunctionMinMax(self, EnableMinMaxLogging):
        """

        :param EnableMinMaxLogging:
        :type EnableMinMaxLogging:
        """
        return self._dllwrap.AgilentN67xxDLogsConfigureDlogsFunctionMinMax(self._vi, EnableMinMaxLogging)

    def DlogsAbortDlog(self):
        """"""
        return self._dllwrap.DlogsAbortDlog(self._vi)

    def DlogsInitiate(self, Filename):
        """

        :param Filename:
        :type Filename:
        """
        return self._dllwrap.DlogsInitiate(self._vi, Filename)

    def DLogsItemConfigureDlogFunction(self, RepCapIdentifier, EnableCurrentLogging, EnableVoltageLogging):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param EnableCurrentLogging:
        :type EnableCurrentLogging:
        :param EnableVoltageLogging:
        :type EnableVoltageLogging:
        """
        return self._dllwrap.DLogsItemConfigureDlogFunction(
            self._vi, RepCapIdentifier, EnableCurrentLogging, EnableVoltageLogging
        )

    def DLogsItemConfigureDlogTriggerCurrent(self, RepCapIdentifier, Level, Slope):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Level:
        :type Level:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.DLogsItemConfigureDlogTriggerCurrent(self._vi, RepCapIdentifier, Level, Slope)

    def DLogsItemConfigureDlogTriggerVoltage(self, RepCapIdentifier, Level, Slope):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Level:
        :type Level:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.DLogsItemConfigureDlogTriggerVoltage(self._vi, RepCapIdentifier, Level, Slope)

    def Dlogs2Item2SetDlogsMeasurementRange(self, RepCapIdentifier, MeasurementType, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param MeasurementType:
        :type MeasurementType:
        :param Val:
        :type Val:
        """
        return self._dllwrap.Dlogs2Item2SetDlogsMeasurementRange(self._vi, RepCapIdentifier, MeasurementType, Val)

    def Dlogs2Item2GetDlogsMeasurementRangeAuto(self, RepCapIdentifier, MeasurementType):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.Dlogs2Item2GetDlogsMeasurementRangeAuto(self._vi, RepCapIdentifier, MeasurementType)

    def Dlogs2Item2SetDlogsMeasurementRangeAuto(self, RepCapIdentifier, MeasurementType, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param MeasurementType:
        :type MeasurementType:
        :param Val:
        :type Val:
        """
        return self._dllwrap.Dlogs2Item2SetDlogsMeasurementRangeAuto(self._vi, RepCapIdentifier, MeasurementType, Val)

    def Dlogs2Item2GetDlogsMeasurementRange(self, RepCapIdentifier, MeasurementType):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.Dlogs2Item2GetDlogsMeasurementRange(self._vi, RepCapIdentifier, MeasurementType)

    def Delete(self, Filename):
        """

        :param Filename:
        :type Filename:
        """
        return self._dllwrap.Delete(self._vi, Filename)

    def ExportDlog(self, Filename):
        """

        :param Filename:
        :type Filename:
        """
        return self._dllwrap.ExportDlog(self._vi, Filename)

    def ReadFirst(self, Filename, BufferBufferSize, BufferSize):
        """

        :param Filename:
        :type Filename:
        :param BufferBufferSize:
        :type BufferBufferSize:
        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.ReadFirst(self._vi, Filename, BufferBufferSize, BufferSize)

    def ReadNext(self, BufferBufferSize, BufferSize):
        """

        :param BufferBufferSize:
        :type BufferBufferSize:
        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.ReadNext(self._vi, BufferBufferSize, BufferSize)

    def GetSize(self, Filename):
        """

        :param Filename:
        :type Filename:
        """
        return self._dllwrap.GetSize(self._vi, Filename)

    def viWrite(self, Count, Buffer):
        """

        :param Count:
        :type Count:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.viWrite(self._vi, Count, Buffer)

    def viRead(self, BufferSize):
        """

        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.viRead(self._vi, BufferSize)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def SystemWriteString(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, Data)
