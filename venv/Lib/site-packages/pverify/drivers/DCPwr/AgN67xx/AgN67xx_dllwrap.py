from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import AgN67xx_const as const
from .AgN67xx_const import *


class AgN67xx_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("AgN67xx.dll", "AgN67xx_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "AgN67xx"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.AgN67xx_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.AgN67xx_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.AgN67xx_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgN67xx_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.AgN67xx_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.AgN67xx_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        status = self.dll.AgN67xx_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.AgN67xx_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, Vi):
        status = self.dll.AgN67xx_ClearInterchangeWarnings(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        status = self.dll.AgN67xx_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(InterchangeWarningBufferSize)
        status = self.dll.AgN67xx_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.AgN67xx_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetInterchangeCheck(self, Vi):
        status = self.dll.AgN67xx_ResetInterchangeCheck(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.AgN67xx_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.AgN67xx_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.AgN67xx_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.AgN67xx_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.AgN67xx_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.AgN67xx_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.AgN67xx_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.AgN67xx_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt64()
        status = self.dll.AgN67xx_GetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.AgN67xx_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.AgN67xx_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.AgN67xx_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        status = self.dll.AgN67xx_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgN67xx_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgN67xx_SetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgN67xx_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgN67xx_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgN67xx_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgN67xx_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputEnabled(self, Vi, ChannelName, Enabled):
        status = self.dll.AgN67xx_ConfigureOutputEnabled(ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureVoltageLevel(self, Vi, ChannelName, Level):
        status = self.dll.AgN67xx_ConfigureVoltageLevel(ViSession(Vi), ViConstString(ChannelName), ViReal64(Level))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCurrentLimit(self, Vi, ChannelName, Behavior, Limit):
        status = self.dll.AgN67xx_ConfigureCurrentLimit(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(Behavior), ViReal64(Limit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOVP(self, Vi, ChannelName, Enabled, Limit):
        status = self.dll.AgN67xx_ConfigureOVP(
            ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled), ViReal64(Limit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputRange(self, Vi, ChannelName, RangeType, Range):
        status = self.dll.AgN67xx_ConfigureOutputRange(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(RangeType), ViReal64(Range)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryMaxCurrentLimit(self, Vi, ChannelName, VoltageLevel):
        MaxCurrentLimit = ViReal64()
        status = self.dll.AgN67xx_QueryMaxCurrentLimit(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViReal64(VoltageLevel),
            byref(MaxCurrentLimit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(MaxCurrentLimit.value)

    def QueryMaxVoltageLevel(self, Vi, ChannelName, CurrentLimit):
        MaxVoltageLevel = ViReal64()
        status = self.dll.AgN67xx_QueryMaxVoltageLevel(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViReal64(CurrentLimit),
            byref(MaxVoltageLevel),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(MaxVoltageLevel.value)

    def ConfigureTriggeredCurrentLimit(self, Vi, ChannelName, Limit):
        status = self.dll.AgN67xx_ConfigureTriggeredCurrentLimit(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(Limit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggeredVoltageLevel(self, Vi, ChannelName, Level):
        status = self.dll.AgN67xx_ConfigureTriggeredVoltageLevel(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(Level)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerSource(self, Vi, ChannelName, Source):
        status = self.dll.AgN67xx_ConfigureTriggerSource(ViSession(Vi), ViConstString(ChannelName), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Measure(self, Vi, ChannelName, MeasurementType):
        Measurement = ViReal64()
        status = self.dll.AgN67xx_Measure(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(MeasurementType),
            byref(Measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Measurement.value)

    def QueryOutputState(self, Vi, ChannelName, OutputState):
        InState = ViBoolean()
        status = self.dll.AgN67xx_QueryOutputState(
            ViSession(Vi),
            ViConstString(ChannelName),
            ViInt32(OutputState),
            byref(InState),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(InState.value)

    def ResetOutputProtection(self, Vi, ChannelName):
        status = self.dll.AgN67xx_ResetOutputProtection(ViSession(Vi), ViConstString(ChannelName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Abort(self, Vi):
        status = self.dll.AgN67xx_Abort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Initiate(self, Vi):
        status = self.dll.AgN67xx_Initiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SendSoftwareTrigger(self, Vi):
        status = self.dll.AgN67xx_SendSoftwareTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetDCPwrOutputName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgN67xx_GetDCPwrOutputName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetDLogName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgN67xx_GetDLogName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetMeasurementName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgN67xx_GetMeasurementName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetOutputName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgN67xx_GetOutputName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetProtectionName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgN67xx_GetProtectionName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetStatusName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgN67xx_GetStatusName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetSystemName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgN67xx_GetSystemName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetTransientName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgN67xx_GetTransientName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def MeasurementsSendSoftwareTrigger(self, Vi):
        status = self.dll.AgN67xx_MeasurementsSendSoftwareTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemTrigInitiate(self, Vi, RepCapIdentifier):
        status = self.dll.AgN67xx_MeasurementsItemTrigInitiate(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemTrigImmediate(self, Vi, RepCapIdentifier):
        status = self.dll.AgN67xx_MeasurementsItemTrigImmediate(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemTrigAbort(self, Vi, RepCapIdentifier):
        status = self.dll.AgN67xx_MeasurementsItemTrigAbort(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemMeasureArray(self, Vi, RepCapIdentifier, MeasurementType, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgN67xx_MeasurementsItemMeasureArray(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MeasurementType),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasurementsItemMeasure(self, Vi, RepCapIdentifier, MeasurementType):
        RetVal = ViReal64()
        status = self.dll.AgN67xx_MeasurementsItemMeasure(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MeasurementType),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def MeasurementsItemFetchArray(self, Vi, RepCapIdentifier, FetchType, RetValBufferSize):
        RetVal = ARRAY_ViReal64(RetValBufferSize)
        RetValActualSize = ViInt32()
        status = self.dll.AgN67xx_MeasurementsItemFetchArray(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(FetchType),
            ViInt32(RetValBufferSize),
            RetVal,
            byref(RetValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RetVal = list(RetVal)
        RetValActualSize = int(RetValActualSize.value)
        return RetVal, RetValActualSize

    def MeasurementsItemFetch(self, Vi, RepCapIdentifier, FetchType, WindowType):
        RetVal = ViReal64()
        status = self.dll.AgN67xx_MeasurementsItemFetch(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(FetchType),
            ViInt32(WindowType),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def MeasurementsItemConfigure(
        self,
        Vi,
        RepCapIdentifier,
        TriggerType,
        TriggerOffsetPoints,
        Points,
        SampleInterval,
    ):
        status = self.dll.AgN67xx_MeasurementsItemConfigure(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(TriggerType),
            ViInt32(TriggerOffsetPoints),
            ViInt32(Points),
            ViReal64(SampleInterval),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsItemGetMeasurementRange(self, Vi, RepCapIdentifier, MeasurementType):
        RetVal = ViReal64()
        status = self.dll.AgN67xx_MeasurementsItemGetMeasurementRange(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MeasurementType),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def MeasurementsItemSetMeasurementRange(self, Vi, RepCapIdentifier, MeasurementType, Val):
        status = self.dll.AgN67xx_MeasurementsItemSetMeasurementRange(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MeasurementType),
            ViReal64(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Measurements3Item2GetMeasurementRangeAuto(self, Vi, RepCapIdentifier, MeasurementType):
        RetVal = ViBoolean()
        status = self.dll.AgN67xx_Measurements3Item2GetMeasurementRangeAuto(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MeasurementType),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def Measurements3Item2SetMeasurementRangeAuto(self, Vi, RepCapIdentifier, MeasurementType, Val):
        status = self.dll.AgN67xx_Measurements3Item2SetMeasurementRangeAuto(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MeasurementType),
            ViBoolean(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Outputs2GetCoupleMaxDelayOffset(self, Vi):
        RetVal = ViReal64()
        status = self.dll.AgN67xx_Outputs2GetCoupleMaxDelayOffset(ViSession(Vi), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def OutputsConfigureOffSequence(self, Vi, Channel1Fall, Channel2Fall, Channel3Fall, Channel4Fall):
        status = self.dll.AgN67xx_OutputsConfigureOffSequence(
            ViSession(Vi),
            ViReal64(Channel1Fall),
            ViReal64(Channel2Fall),
            ViReal64(Channel3Fall),
            ViReal64(Channel4Fall),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def OutputsConfigureOnSequence(self, Vi, Channel1Rise, Channel2Rise, Channel3Rise, Channel4Rise):
        status = self.dll.AgN67xx_OutputsConfigureOnSequence(
            ViSession(Vi),
            ViReal64(Channel1Rise),
            ViReal64(Channel2Rise),
            ViReal64(Channel3Rise),
            ViReal64(Channel4Rise),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Outputs3ItemVoltageLevel(self, Vi, RepCapIdentifier, Range, Val):
        status = self.dll.AgN67xx_Outputs3ItemVoltageLevel(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViReal64(Range), ViReal64(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Outputs3ItemQueryVoltageLevelMax(self, Vi, RepCapIdentifier):
        RetVal = ViReal64()
        status = self.dll.AgN67xx_Outputs3ItemQueryVoltageLevelMax(
            ViSession(Vi), ViConstString(RepCapIdentifier), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def Outputs3ItemQueryState(self, Vi, RepCapIdentifier, OutputState):
        RetVal = ViBoolean()
        status = self.dll.AgN67xx_Outputs3ItemQueryState(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(OutputState),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def Outputs3ItemQueryPowerLimitMax(self, Vi, RepCapIdentifier):
        RetVal = ViReal64()
        status = self.dll.AgN67xx_Outputs3ItemQueryPowerLimitMax(
            ViSession(Vi), ViConstString(RepCapIdentifier), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def Outputs3ItemQueryCurrentLimitMax(self, Vi, RepCapIdentifier):
        RetVal = ViReal64()
        status = self.dll.AgN67xx_Outputs3ItemQueryCurrentLimitMax(
            ViSession(Vi), ViConstString(RepCapIdentifier), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def Outputs3ItemCurrentLimit(self, Vi, RepCapIdentifier, Range, Val):
        status = self.dll.AgN67xx_Outputs3ItemCurrentLimit(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViReal64(Range), ViReal64(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Outputs3ItemConfigureCurrentLimit(self, Vi, RepCapIdentifier, Behavior, Limit):
        status = self.dll.AgN67xx_Outputs3ItemConfigureCurrentLimit(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(Behavior),
            ViReal64(Limit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ProtectionsItemConfigureOVP(self, Vi, RepCapIdentifier, Limit):
        status = self.dll.AgN67xx_ProtectionsItemConfigureOVP(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViReal64(Limit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ProtectionsItemResetOutputProtection(self, Vi, RepCapIdentifier):
        status = self.dll.AgN67xx_ProtectionsItemResetOutputProtection(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusesPreset(self, Vi):
        status = self.dll.AgN67xx_StatusesPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusesConfigureServiceRequest(self, Vi, Reason):
        status = self.dll.AgN67xx_StatusesConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusesClear(self, Vi):
        status = self.dll.AgN67xx_StatusesClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusesItemQueryRegister(self, Vi, RepCapIdentifier, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.AgN67xx_StatusesItemQueryRegister(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(Register),
            ViInt32(SubRegister),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatusesItemConfigureRegister(self, Vi, RepCapIdentifier, Register, SubRegister, Val):
        status = self.dll.AgN67xx_StatusesItemConfigureRegister(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(Register),
            ViInt32(SubRegister),
            ViInt32(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusesItemGetRegister(self, Vi, RepCapIdentifier, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.AgN67xx_StatusesItemGetRegister(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(Register),
            ViInt32(SubRegister),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatusesItemSetRegister(self, Vi, RepCapIdentifier, Register, SubRegister, Val):
        status = self.dll.AgN67xx_StatusesItemSetRegister(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(Register),
            ViInt32(SubRegister),
            ViInt32(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Statuses3Item2ConfigureServiceRequest(self, Vi, RepCapIdentifier, Reason):
        status = self.dll.AgN67xx_Statuses3Item2ConfigureServiceRequest(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(Reason)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemsConfigureIOPort(self, Vi, Pin, Function, Polarity):
        status = self.dll.AgN67xx_SystemsConfigureIOPort(
            ViSession(Vi), ViInt32(Pin), ViInt32(Function), ViInt32(Polarity)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemsDeleteAllParallelGroups(self, Vi):
        status = self.dll.AgN67xx_SystemsDeleteAllParallelGroups(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemsDeleteParallelGroup(self, Vi, Val):
        status = self.dll.AgN67xx_SystemsDeleteParallelGroup(ViSession(Vi), ViInt32(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemsDisableLocalControls(self, Vi):
        status = self.dll.AgN67xx_SystemsDisableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemsEnableLocalControls(self, Vi):
        status = self.dll.AgN67xx_SystemsEnableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemsQueryIOPort(self, Vi, Pin):
        pFunction = ViInt32()
        pPolarity = ViInt32()
        status = self.dll.AgN67xx_SystemsQueryIOPort(ViSession(Vi), ViInt32(Pin), byref(pFunction), byref(pPolarity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pFunction = int(pFunction.value)
        pPolarity = int(pPolarity.value)
        return pFunction, pPolarity

    def SystemsRecallState(self, Vi, Val):
        status = self.dll.AgN67xx_SystemsRecallState(ViSession(Vi), ViConstString(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemsSaveState(self, Vi, Val):
        status = self.dll.AgN67xx_SystemsSaveState(ViSession(Vi), ViConstString(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemsWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        status = self.dll.AgN67xx_SystemsWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemsGetDate(self, Vi):
        Year = ViInt32()
        Month = ViInt32()
        Day = ViInt32()
        status = self.dll.AgN67xx_SystemsGetDate(ViSession(Vi), byref(Year), byref(Month), byref(Day))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Year = int(Year.value)
        Month = int(Month.value)
        Day = int(Day.value)
        return Year, Month, Day

    def SystemsGetTime(self, Vi):
        Hour = ViInt32()
        Minute = ViInt32()
        Second = ViInt32()
        status = self.dll.AgN67xx_SystemsGetTime(ViSession(Vi), byref(Hour), byref(Minute), byref(Second))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Hour = int(Hour.value)
        Minute = int(Minute.value)
        Second = int(Second.value)
        return Hour, Minute, Second

    def SystemsSetDate(self, Vi, Year, Month, Day):
        status = self.dll.AgN67xx_SystemsSetDate(ViSession(Vi), ViInt32(Year), ViInt32(Month), ViInt32(Day))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemsSetTime(self, Vi, Hour, Minute, Second):
        status = self.dll.AgN67xx_SystemsSetTime(ViSession(Vi), ViInt32(Hour), ViInt32(Minute), ViInt32(Second))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRead(self, Vi, Size):
        Value = ARRAY_ViChar(Size)
        ActualSize = ViInt32()
        status = self.dll.AgN67xx_SystemRead(ViSession(Vi), ViInt32(Size), Value, byref(ActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Value = decode(Value)
        ActualSize = int(ActualSize.value)
        return Value, ActualSize

    def SystemWrite(self, Vi, CommandString):
        status = self.dll.AgN67xx_SystemWrite(ViSession(Vi), ViConstString(CommandString))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TransientsSendSoftwareTrigger(self, Vi):
        status = self.dll.AgN67xx_TransientsSendSoftwareTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TransientsItemTrigInitiate(self, Vi, RepCapIdentifier):
        status = self.dll.AgN67xx_TransientsItemTrigInitiate(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TransientsItemTrigImmediate(self, Vi, RepCapIdentifier):
        status = self.dll.AgN67xx_TransientsItemTrigImmediate(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TransientsItemTrigAbort(self, Vi, RepCapIdentifier):
        status = self.dll.AgN67xx_TransientsItemTrigAbort(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TransientsItemListTrigOutPoints(self, Vi, RepCapIdentifier, BOSBufferSize, EOSBufferSize):
        BOS = ARRAY_ViBoolean(BOSBufferSize)
        BOSActualSize = ViInt32()
        EOS = ARRAY_ViBoolean(EOSBufferSize)
        EOSActualSize = ViInt32()
        status = self.dll.AgN67xx_TransientsItemListTrigOutPoints(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(BOSBufferSize),
            BOS,
            byref(BOSActualSize),
            ViInt32(EOSBufferSize),
            EOS,
            byref(EOSActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        BOS = list(BOS)
        BOSActualSize = int(BOSActualSize.value)
        EOS = list(EOS)
        EOSActualSize = int(EOSActualSize.value)
        return BOS, BOSActualSize, EOS, EOSActualSize

    def TransientsItemListPoints(
        self,
        Vi,
        RepCapIdentifier,
        voltListBufferSize,
        currListBufferSize,
        dwellListBufferSize,
    ):
        voltList = ARRAY_ViReal64(voltListBufferSize)
        voltListActualSize = ViInt32()
        currList = ARRAY_ViReal64(currListBufferSize)
        currListActualSize = ViInt32()
        dwellList = ARRAY_ViReal64(dwellListBufferSize)
        dwellListActualSize = ViInt32()
        status = self.dll.AgN67xx_TransientsItemListPoints(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(voltListBufferSize),
            voltList,
            byref(voltListActualSize),
            ViInt32(currListBufferSize),
            currList,
            byref(currListActualSize),
            ViInt32(dwellListBufferSize),
            dwellList,
            byref(dwellListActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        voltList = list(voltList)
        voltListActualSize = int(voltListActualSize.value)
        currList = list(currList)
        currListActualSize = int(currListActualSize.value)
        dwellList = list(dwellList)
        dwellListActualSize = int(dwellListActualSize.value)
        return (
            voltList,
            voltListActualSize,
            currList,
            currListActualSize,
            dwellList,
            dwellListActualSize,
        )

    def TransientsItemListConfigure(self, Vi, RepCapIdentifier, Pace, ListTermination, Repeat, InfiniteRepeat):
        status = self.dll.AgN67xx_TransientsItemListConfigure(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(Pace),
            ViBoolean(ListTermination),
            ViInt32(Repeat),
            ViBoolean(InfiniteRepeat),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TransientsItemGetListLength(self, Vi, RepCapIdentifier, ListType):
        RetVal = ViInt32()
        status = self.dll.AgN67xx_TransientsItemGetListLength(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(ListType),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def TransientsItemGetStepTrigLevel(self, Vi, RepCapIdentifier, TriggerLevelType):
        RetVal = ViReal64()
        status = self.dll.AgN67xx_TransientsItemGetStepTrigLevel(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(TriggerLevelType),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def TransientsItemSetStepTrigLevel(self, Vi, RepCapIdentifier, TriggerLevelType, Val):
        status = self.dll.AgN67xx_TransientsItemSetStepTrigLevel(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(TriggerLevelType),
            ViReal64(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Transients2Item2ListConfigure(
        self,
        Vi,
        RepCapIdentifier,
        Pace,
        ListTermination,
        Repeat,
        InfiniteRepeat,
        TransientSelect,
    ):
        status = self.dll.AgN67xx_Transients2Item2ListConfigure(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(Pace),
            ViBoolean(ListTermination),
            ViInt32(Repeat),
            ViBoolean(InfiniteRepeat),
            ViInt32(TransientSelect),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AgilentN67xxDLogsConfigureDlogsTriggerSource(self, Vi, Source):
        status = self.dll.AgN67xx_AgilentN67xxDLogsConfigureDlogsTriggerSource(ViSession(Vi), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AgilentN67xxDLogsTrigger(self, Vi):
        status = self.dll.AgN67xx_AgilentN67xxDLogsTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AgilentN67xxDLogsConfigureDlogsTime(self, Vi, Time, TimeInterval):
        status = self.dll.AgN67xx_AgilentN67xxDLogsConfigureDlogsTime(
            ViSession(Vi), ViInt32(Time), ViReal64(TimeInterval)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AgilentN67xxDLogsConfigureDlogsTriggerOffset(self, Vi, OffsetPcnt):
        status = self.dll.AgN67xx_AgilentN67xxDLogsConfigureDlogsTriggerOffset(ViSession(Vi), ViInt32(OffsetPcnt))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AgilentN67xxDLogsConfigureDlogsFunctionMinMax(self, Vi, EnableMinMaxLogging):
        status = self.dll.AgN67xx_AgilentN67xxDLogsConfigureDlogsFunctionMinMax(
            ViSession(Vi), ViBoolean(EnableMinMaxLogging)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DlogsAbortDlog(self, Vi):
        status = self.dll.AgN67xx_DlogsAbortDlog(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DlogsInitiate(self, Vi, Filename):
        status = self.dll.AgN67xx_DlogsInitiate(ViSession(Vi), ViConstString(Filename))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DLogsItemConfigureDlogFunction(self, Vi, RepCapIdentifier, EnableCurrentLogging, EnableVoltageLogging):
        status = self.dll.AgN67xx_DLogsItemConfigureDlogFunction(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViBoolean(EnableCurrentLogging),
            ViBoolean(EnableVoltageLogging),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DLogsItemConfigureDlogTriggerCurrent(self, Vi, RepCapIdentifier, Level, Slope):
        status = self.dll.AgN67xx_DLogsItemConfigureDlogTriggerCurrent(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(Level),
            ViInt32(Slope),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DLogsItemConfigureDlogTriggerVoltage(self, Vi, RepCapIdentifier, Level, Slope):
        status = self.dll.AgN67xx_DLogsItemConfigureDlogTriggerVoltage(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViReal64(Level),
            ViInt32(Slope),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Dlogs2Item2SetDlogsMeasurementRange(self, Vi, RepCapIdentifier, MeasurementType, Val):
        status = self.dll.AgN67xx_Dlogs2Item2SetDlogsMeasurementRange(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MeasurementType),
            ViReal64(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Dlogs2Item2GetDlogsMeasurementRangeAuto(self, Vi, RepCapIdentifier, MeasurementType):
        RetVal = ViBoolean()
        status = self.dll.AgN67xx_Dlogs2Item2GetDlogsMeasurementRangeAuto(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MeasurementType),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(RetVal.value)

    def Dlogs2Item2SetDlogsMeasurementRangeAuto(self, Vi, RepCapIdentifier, MeasurementType, Val):
        status = self.dll.AgN67xx_Dlogs2Item2SetDlogsMeasurementRangeAuto(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MeasurementType),
            ViBoolean(Val),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Dlogs2Item2GetDlogsMeasurementRange(self, Vi, RepCapIdentifier, MeasurementType):
        RetVal = ViReal64()
        status = self.dll.AgN67xx_Dlogs2Item2GetDlogsMeasurementRange(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MeasurementType),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RetVal.value)

    def Delete(self, Vi, Filename):
        status = self.dll.AgN67xx_Delete(ViSession(Vi), ViConstString(Filename))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ExportDlog(self, Vi, Filename):
        status = self.dll.AgN67xx_ExportDlog(ViSession(Vi), ViConstString(Filename))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadFirst(self, Vi, Filename, BufferBufferSize, BufferSize):
        Buffer = ARRAY_ViByte(BufferSize)
        BufferActualSize = ViInt32()
        RetVal = ViInt32()
        status = self.dll.AgN67xx_ReadFirst(
            ViSession(Vi),
            ViConstString(Filename),
            ViInt32(BufferBufferSize),
            Buffer,
            byref(BufferActualSize),
            ViInt32(BufferSize),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        BufferActualSize = int(BufferActualSize.value)
        RetVal = int(RetVal.value)
        return Buffer, BufferActualSize, RetVal

    def ReadNext(self, Vi, BufferBufferSize, BufferSize):
        Buffer = ARRAY_ViByte(BufferSize)
        BufferActualSize = ViInt32()
        RetVal = ViInt32()
        status = self.dll.AgN67xx_ReadNext(
            ViSession(Vi),
            ViInt32(BufferBufferSize),
            Buffer,
            byref(BufferActualSize),
            ViInt32(BufferSize),
            byref(RetVal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        BufferActualSize = int(BufferActualSize.value)
        RetVal = int(RetVal.value)
        return Buffer, BufferActualSize, RetVal

    def GetSize(self, Vi, Filename):
        RetVal = ViInt32()
        status = self.dll.AgN67xx_GetSize(ViSession(Vi), ViConstString(Filename), byref(RetVal))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def viWrite(self, Vi, Count, Buffer):
        _Buffer = (ViByte * len(Buffer))(*Buffer)
        ReturnCount = ViInt64()
        status = self.dll.AgN67xx_viWrite(ViSession(Vi), ViInt64(Count), _Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ReturnCount.value)

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViByte(BufferSize)
        ReturnCount = ViInt64()
        status = self.dll.AgN67xx_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgN67xx_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def SystemWriteString(self, Vi, Data):
        status = self.dll.AgN67xx_SystemWriteString(ViSession(Vi), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
