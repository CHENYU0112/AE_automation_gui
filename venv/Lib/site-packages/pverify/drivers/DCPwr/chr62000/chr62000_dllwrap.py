from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import chr62000_const as const
from .chr62000_const import *


class chr62000_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("chr62000_32.dll", "chr62000_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "chr62000"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        _status = self.dll.chr62000_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(vi.value)

    def InitInterface(self, resourceName, IDQuery, resetDevice, baudRate, IDString, modelNumber):
        newVi = ViSession()
        _status = self.dll.chr62000_InitInterface(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViInt32(baudRate),
            ViConstString(IDString),
            ViConstString(modelNumber),
            byref(newVi),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(newVi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        _status = self.dll.chr62000_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViString(optionString),
            byref(newVi),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(newVi.value)

    def close(self, vi):
        _status = self.dll.chr62000_close(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(bufferSize)
        _status = self.dll.chr62000_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.chr62000_LockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.chr62000_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        _status = self.dll.chr62000_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def GetErrorInfo(self, vi):
        primaryError = ViStatus()
        secondaryError = ViStatus()
        errorElaboration = ARRAY_ViChar(256)
        _status = self.dll.chr62000_GetErrorInfo(
            ViSession(vi), byref(primaryError), byref(secondaryError), errorElaboration
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorElaboration = decode(errorElaboration)
        return primaryError, secondaryError, errorElaboration

    def ClearErrorInfo(self, vi):
        _status = self.dll.chr62000_ClearErrorInfo(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        _status = self.dll.chr62000_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(errorMessage)

    def Measure(self, vi, measureType):
        readValue = ViReal64()
        _status = self.dll.chr62000_Measure(ViSession(vi), ViInt32(measureType), byref(readValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(readValue.value)

    def Fetch(self, vi, fetchType):
        readValue = ViReal64()
        _status = self.dll.chr62000_Fetch(ViSession(vi), ViInt32(fetchType), byref(readValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(readValue.value)

    def QueryBeeper(self, vi):
        beeper = ARRAY_ViChar(1024)
        _status = self.dll.chr62000_QueryBeeper(ViSession(vi), beeper)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(beeper)

    def QueryOutput(self, vi):
        output = ARRAY_ViChar(1024)
        _status = self.dll.chr62000_QueryOutput(ViSession(vi), output)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(output)

    def QueryFoldback(self, vi):
        foldback = ARRAY_ViChar(1024)
        foldbackDelayTime = ViReal64()
        _status = self.dll.chr62000_QueryFoldback(ViSession(vi), foldback, byref(foldbackDelayTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        foldback = decode(foldback)
        foldbackDelayTime = float(foldbackDelayTime.value)
        return foldback, foldbackDelayTime

    def QueryAPGMode(self, vi):
        APGMode = ARRAY_ViChar(1024)
        APGReferenceVoltage = ARRAY_ViChar(1024)
        _status = self.dll.chr62000_QueryAPGMode(ViSession(vi), APGMode, APGReferenceVoltage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        APGMode = decode(APGMode)
        APGReferenceVoltage = decode(APGReferenceVoltage)
        return APGMode, APGReferenceVoltage

    def QueryProgPara(self, vi, programSelected, sequenceSelected, type):
        link = ViInt32()
        count = ViInt32()
        voltage = ViReal64()
        voltageSlew = ViReal64()
        current = ViReal64()
        currentSlew = ViReal64()
        TTL = ViInt32()
        time = ViReal64()
        _status = self.dll.chr62000_QueryProgPara(
            ViSession(vi),
            ViInt32(programSelected),
            ViInt32(sequenceSelected),
            byref(link),
            byref(count),
            ViConstString(type),
            byref(voltage),
            byref(voltageSlew),
            byref(current),
            byref(currentSlew),
            byref(TTL),
            byref(time),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        link = int(link.value)
        count = int(count.value)
        voltage = float(voltage.value)
        voltageSlew = float(voltageSlew.value)
        current = float(current.value)
        currentSlew = float(currentSlew.value)
        TTL = int(TTL.value)
        time = float(time.value)
        return link, count, voltage, voltageSlew, current, currentSlew, TTL, time

    def QueryProgRunState(self, vi, programRunningState):
        _status = self.dll.chr62000_QueryProgRunState(ViSession(vi), ViConstString(programRunningState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryESR(self, vi):
        statusRegister = ViInt32()
        _status = self.dll.chr62000_QueryESR(ViSession(vi), byref(statusRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(statusRegister.value)

    def QuerySTB(self, vi):
        statusByte = ViInt32()
        _status = self.dll.chr62000_QuerySTB(ViSession(vi), byref(statusByte))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(statusByte.value)

    def reset(self, vi):
        _status = self.dll.chr62000_reset(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        _status = self.dll.chr62000_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        _status = self.dll.chr62000_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def WriteInstrData(self, vi, writeBuffer):
        _status = self.dll.chr62000_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        _status = self.dll.chr62000_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        _status = self.dll.chr62000_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        _status = self.dll.chr62000_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(bufSize)
        _status = self.dll.chr62000_GetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViInt32(bufSize),
            value,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        _status = self.dll.chr62000_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        _status = self.dll.chr62000_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(value.value)

    def SetVoltage(self, vi, voltage):
        _status = self.dll.chr62000_SetVoltage(ViSession(vi), ViReal64(voltage))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetVoltageLimit(self, vi, highLow, voltageLimit):
        _status = self.dll.chr62000_SetVoltageLimit(ViSession(vi), ViBoolean(highLow), ViReal64(voltageLimit))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetVoltageProtect(self, vi, voltageProtect):
        _status = self.dll.chr62000_SetVoltageProtect(ViSession(vi), ViReal64(voltageProtect))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetVoltageSlew(self, vi, voltageSlew):
        _status = self.dll.chr62000_SetVoltageSlew(ViSession(vi), ViReal64(voltageSlew))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCurrent(self, vi, current):
        _status = self.dll.chr62000_SetCurrent(ViSession(vi), ViReal64(current))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCurrentLimit(self, vi, highLow, currentLimit):
        _status = self.dll.chr62000_SetCurrentLimit(ViSession(vi), ViBoolean(highLow), ViReal64(currentLimit))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCurrentProtect(self, vi, currentProtect):
        _status = self.dll.chr62000_SetCurrentProtect(ViSession(vi), ViReal64(currentProtect))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCurrentSlew(self, vi, currentSlew):
        _status = self.dll.chr62000_SetCurrentSlew(ViSession(vi), ViReal64(currentSlew))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetPowerProtect(self, vi, powerProtect):
        _status = self.dll.chr62000_SetPowerProtect(ViSession(vi), ViReal64(powerProtect))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetOutput(self, vi, output):
        _status = self.dll.chr62000_SetOutput(ViSession(vi), ViBoolean(output))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetTTLPort(self, vi, TTLValue):
        _status = self.dll.chr62000_SetTTLPort(ViSession(vi), ViInt32(TTLValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetBeeper(self, vi, beeper):
        _status = self.dll.chr62000_SetBeeper(ViSession(vi), ViBoolean(beeper))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetRmtMode(self, vi, remoteMode):
        _status = self.dll.chr62000_SetRmtMode(ViSession(vi), ViBoolean(remoteMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetFoldbackProtect(self, vi, foldbackProtect, foldbackDelayTime):
        _status = self.dll.chr62000_SetFoldbackProtect(
            ViSession(vi), ViInt32(foldbackProtect), ViReal64(foldbackDelayTime)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAPGMode(self, vi, APGMode, APGReferenceVoltage):
        _status = self.dll.chr62000_SetAPGMode(ViSession(vi), ViInt32(APGMode), ViBoolean(APGReferenceVoltage))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProgSel(self, vi, programSelected, link, count, programClear):
        _status = self.dll.chr62000_ProgSel(
            ViSession(vi),
            ViInt32(programSelected),
            ViInt32(link),
            ViInt32(count),
            ViBoolean(programClear),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetSeqPara(
        self,
        vi,
        sequenceSelected,
        type,
        voltage,
        voltageSlew,
        current,
        currentSlew,
        TTL,
        time,
    ):
        _status = self.dll.chr62000_SetSeqPara(
            ViSession(vi),
            ViInt32(sequenceSelected),
            ViInt32(type),
            ViReal64(voltage),
            ViReal64(voltageSlew),
            ViReal64(current),
            ViReal64(currentSlew),
            ViInt32(TTL),
            ViReal64(time),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProgRun(self, vi, run):
        _status = self.dll.chr62000_ProgRun(ViSession(vi), ViBoolean(run))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SaveProgram(self, vi):
        _status = self.dll.chr62000_SaveProgram(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCLS(self, vi):
        _status = self.dll.chr62000_SetCLS(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetESE(self, vi, enableRegister):
        _status = self.dll.chr62000_SetESE(ViSession(vi), ViInt32(enableRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetSRE(self, vi, enableRegister):
        _status = self.dll.chr62000_SetSRE(ViSession(vi), ViInt32(enableRegister))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Save(self, vi):
        _status = self.dll.chr62000_Save(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Recall(self, vi):
        _status = self.dll.chr62000_Recall(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.chr62000_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.chr62000_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.chr62000_SetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.chr62000_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.chr62000_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.chr62000_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.chr62000_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.chr62000_CheckAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.chr62000_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.chr62000_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IviInit(self, resourceName, IDQuery, reset, vi):
        _status = self.dll.chr62000_IviInit(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(reset), ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IviClose(self, vi):
        _status = self.dll.chr62000_IviClose(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
