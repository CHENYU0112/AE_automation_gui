from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .chr62000_dllwrap import *


class chr62000(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = chr62000_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def InitInterface(self, resourceName, IDQuery, resetDevice, baudRate, IDString, modelNumber):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        :param baudRate:
        :type baudRate:
        :param IDString:
        :type IDString:
        :param modelNumber:
        :type modelNumber:
        """
        return self._dllwrap.InitInterface(resourceName, IDQuery, resetDevice, baudRate, IDString, modelNumber)

    def GetNextCoercionRecord(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def GetErrorInfo(self):
        """"""
        return self._dllwrap.GetErrorInfo(self._vi)

    def ClearErrorInfo(self):
        """"""
        return self._dllwrap.ClearErrorInfo(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def Measure(self, measureType):
        """

        :param measureType:
        :type measureType:
        """
        return self._dllwrap.Measure(self._vi, measureType)

    def Fetch(self, fetchType):
        """

        :param fetchType:
        :type fetchType:
        """
        return self._dllwrap.Fetch(self._vi, fetchType)

    def QueryBeeper(self):
        """"""
        return self._dllwrap.QueryBeeper(self._vi)

    def QueryOutput(self):
        """"""
        return self._dllwrap.QueryOutput(self._vi)

    def QueryFoldback(self):
        """"""
        return self._dllwrap.QueryFoldback(self._vi)

    def QueryAPGMode(self):
        """"""
        return self._dllwrap.QueryAPGMode(self._vi)

    def QueryProgPara(self, programSelected, sequenceSelected, type):
        """

        :param programSelected:
        :type programSelected:
        :param sequenceSelected:
        :type sequenceSelected:
        :param type:
        :type type:
        """
        return self._dllwrap.QueryProgPara(self._vi, programSelected, sequenceSelected, type)

    def QueryProgRunState(self, programRunningState):
        """

        :param programRunningState:
        :type programRunningState:
        """
        return self._dllwrap.QueryProgRunState(self._vi, programRunningState)

    def QueryESR(self):
        """"""
        return self._dllwrap.QueryESR(self._vi)

    def QuerySTB(self):
        """"""
        return self._dllwrap.QuerySTB(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """

        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def GetAttributeViInt32(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName, attribute, bufSize):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param bufSize:
        :type bufSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetVoltage(self, voltage):
        """

        :param voltage:
        :type voltage:
        """
        return self._dllwrap.SetVoltage(self._vi, voltage)

    def SetVoltageLimit(self, highLow, voltageLimit):
        """

        :param highLow:
        :type highLow:
        :param voltageLimit:
        :type voltageLimit:
        """
        return self._dllwrap.SetVoltageLimit(self._vi, highLow, voltageLimit)

    def SetVoltageProtect(self, voltageProtect):
        """

        :param voltageProtect:
        :type voltageProtect:
        """
        return self._dllwrap.SetVoltageProtect(self._vi, voltageProtect)

    def SetVoltageSlew(self, voltageSlew):
        """

        :param voltageSlew:
        :type voltageSlew:
        """
        return self._dllwrap.SetVoltageSlew(self._vi, voltageSlew)

    def SetCurrent(self, current):
        """

        :param current:
        :type current:
        """
        return self._dllwrap.SetCurrent(self._vi, current)

    def SetCurrentLimit(self, highLow, currentLimit):
        """

        :param highLow:
        :type highLow:
        :param currentLimit:
        :type currentLimit:
        """
        return self._dllwrap.SetCurrentLimit(self._vi, highLow, currentLimit)

    def SetCurrentProtect(self, currentProtect):
        """

        :param currentProtect:
        :type currentProtect:
        """
        return self._dllwrap.SetCurrentProtect(self._vi, currentProtect)

    def SetCurrentSlew(self, currentSlew):
        """

        :param currentSlew:
        :type currentSlew:
        """
        return self._dllwrap.SetCurrentSlew(self._vi, currentSlew)

    def SetPowerProtect(self, powerProtect):
        """

        :param powerProtect:
        :type powerProtect:
        """
        return self._dllwrap.SetPowerProtect(self._vi, powerProtect)

    def SetOutput(self, output):
        """

        :param output:
        :type output:
        """
        return self._dllwrap.SetOutput(self._vi, output)

    def SetTTLPort(self, TTLValue):
        """

        :param TTLValue:
        :type TTLValue:
        """
        return self._dllwrap.SetTTLPort(self._vi, TTLValue)

    def SetBeeper(self, beeper):
        """

        :param beeper:
        :type beeper:
        """
        return self._dllwrap.SetBeeper(self._vi, beeper)

    def SetRmtMode(self, remoteMode):
        """

        :param remoteMode:
        :type remoteMode:
        """
        return self._dllwrap.SetRmtMode(self._vi, remoteMode)

    def SetFoldbackProtect(self, foldbackProtect, foldbackDelayTime):
        """

        :param foldbackProtect:
        :type foldbackProtect:
        :param foldbackDelayTime:
        :type foldbackDelayTime:
        """
        return self._dllwrap.SetFoldbackProtect(self._vi, foldbackProtect, foldbackDelayTime)

    def SetAPGMode(self, APGMode, APGReferenceVoltage):
        """

        :param APGMode:
        :type APGMode:
        :param APGReferenceVoltage:
        :type APGReferenceVoltage:
        """
        return self._dllwrap.SetAPGMode(self._vi, APGMode, APGReferenceVoltage)

    def ProgSel(self, programSelected, link, count, programClear):
        """

        :param programSelected:
        :type programSelected:
        :param link:
        :type link:
        :param count:
        :type count:
        :param programClear:
        :type programClear:
        """
        return self._dllwrap.ProgSel(self._vi, programSelected, link, count, programClear)

    def SetSeqPara(
        self,
        sequenceSelected,
        type,
        voltage,
        voltageSlew,
        current,
        currentSlew,
        TTL,
        time,
    ):
        """

        :param sequenceSelected:
        :type sequenceSelected:
        :param type:
        :type type:
        :param voltage:
        :type voltage:
        :param voltageSlew:
        :type voltageSlew:
        :param current:
        :type current:
        :param currentSlew:
        :type currentSlew:
        :param TTL:
        :type TTL:
        :param time:
        :type time:
        """
        return self._dllwrap.SetSeqPara(
            self._vi,
            sequenceSelected,
            type,
            voltage,
            voltageSlew,
            current,
            currentSlew,
            TTL,
            time,
        )

    def ProgRun(self, run):
        """

        :param run:
        :type run:
        """
        return self._dllwrap.ProgRun(self._vi, run)

    def SaveProgram(self):
        """"""
        return self._dllwrap.SaveProgram(self._vi)

    def SetCLS(self):
        """"""
        return self._dllwrap.SetCLS(self._vi)

    def SetESE(self, enableRegister):
        """

        :param enableRegister:
        :type enableRegister:
        """
        return self._dllwrap.SetESE(self._vi, enableRegister)

    def SetSRE(self, enableRegister):
        """

        :param enableRegister:
        :type enableRegister:
        """
        return self._dllwrap.SetSRE(self._vi, enableRegister)

    def Save(self):
        """"""
        return self._dllwrap.Save(self._vi)

    def Recall(self):
        """"""
        return self._dllwrap.Recall(self._vi)

    def SetAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)

    def IviInit(self, resourceName, IDQuery, reset, vi):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param reset:
        :type reset:
        :param vi:
        :type vi:
        """
        return self._dllwrap.IviInit(resourceName, IDQuery, reset, vi)

    def IviClose(self):
        """"""
        return self._dllwrap.IviClose(self._vi)
