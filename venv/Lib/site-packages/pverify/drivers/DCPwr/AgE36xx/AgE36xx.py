from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .AgE36xx_dllwrap import *


class AgE36xx(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = AgE36xx_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def revision_query(self):
        """ """
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """ """
        return self._dllwrap.ClearError(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def InvalidateAllAttributes(self):
        """ """
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def Disable(self):
        """ """
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """ """
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """ """
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """ """
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """ """
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """ """
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """ """
        return self._dllwrap.UnlockSession(self._vi)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ConfigureOutputEnabled(self, ChannelName, Enabled):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureOutputEnabled(self._vi, ChannelName, Enabled)

    def ConfigureVoltageLevel(self, ChannelName, Level):
        """

        :param ChannelName:
        :type ChannelName:
        :param Level:
        :type Level:
        """
        return self._dllwrap.ConfigureVoltageLevel(self._vi, ChannelName, Level)

    def ConfigureCurrentLimit(self, ChannelName, Behavior, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Behavior:
        :type Behavior:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureCurrentLimit(self._vi, ChannelName, Behavior, Limit)

    def ConfigureOVP(self, ChannelName, Enabled, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Enabled:
        :type Enabled:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureOVP(self._vi, ChannelName, Enabled, Limit)

    def ConfigureOutputRange(self, ChannelName, RangeType, Range):
        """

        :param ChannelName:
        :type ChannelName:
        :param RangeType:
        :type RangeType:
        :param Range:
        :type Range:
        """
        return self._dllwrap.ConfigureOutputRange(self._vi, ChannelName, RangeType, Range)

    def QueryMaxCurrentLimit(self, ChannelName, VoltageLevel):
        """

        :param ChannelName:
        :type ChannelName:
        :param VoltageLevel:
        :type VoltageLevel:
        """
        return self._dllwrap.QueryMaxCurrentLimit(self._vi, ChannelName, VoltageLevel)

    def QueryMaxVoltageLevel(self, ChannelName, CurrentLimit):
        """

        :param ChannelName:
        :type ChannelName:
        :param CurrentLimit:
        :type CurrentLimit:
        """
        return self._dllwrap.QueryMaxVoltageLevel(self._vi, ChannelName, CurrentLimit)

    def ConfigureTriggeredCurrentLimit(self, ChannelName, Limit):
        """

        :param ChannelName:
        :type ChannelName:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.ConfigureTriggeredCurrentLimit(self._vi, ChannelName, Limit)

    def ConfigureTriggeredVoltageLevel(self, ChannelName, Level):
        """

        :param ChannelName:
        :type ChannelName:
        :param Level:
        :type Level:
        """
        return self._dllwrap.ConfigureTriggeredVoltageLevel(self._vi, ChannelName, Level)

    def ConfigureTriggerSource(self, ChannelName, Source):
        """

        :param ChannelName:
        :type ChannelName:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureTriggerSource(self._vi, ChannelName, Source)

    def Measure(self, ChannelName, MeasurementType):
        """

        :param ChannelName:
        :type ChannelName:
        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.Measure(self._vi, ChannelName, MeasurementType)

    def QueryOutputState(self, ChannelName, OutputState):
        """

        :param ChannelName:
        :type ChannelName:
        :param OutputState:
        :type OutputState:
        """
        return self._dllwrap.QueryOutputState(self._vi, ChannelName, OutputState)

    def ResetOutputProtection(self, ChannelName):
        """

        :param ChannelName:
        :type ChannelName:
        """
        return self._dllwrap.ResetOutputProtection(self._vi, ChannelName)

    def Abort(self):
        """ """
        return self._dllwrap.Abort(self._vi)

    def Initiate(self):
        """ """
        return self._dllwrap.Initiate(self._vi)

    def SendSoftwareTrigger(self):
        """ """
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def OutputApplyVoltageCurrent(self, RepCapIdentifier, VoltageLevel, CurrentLimit):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param VoltageLevel:
        :type VoltageLevel:
        :param CurrentLimit:
        :type CurrentLimit:
        """
        return self._dllwrap.OutputApplyVoltageCurrent(self._vi, RepCapIdentifier, VoltageLevel, CurrentLimit)

    def OutputQueryState(self, RepCapIdentifier, OutputState):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param OutputState:
        :type OutputState:
        """
        return self._dllwrap.OutputQueryState(self._vi, RepCapIdentifier, OutputState)

    def OutputRunStep(self, RepCapIdentifier, Direction):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Direction:
        :type Direction:
        """
        return self._dllwrap.OutputRunStep(self._vi, RepCapIdentifier, Direction)

    def OutputGetStep(self, RepCapIdentifier, StepType):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param StepType:
        :type StepType:
        """
        return self._dllwrap.OutputGetStep(self._vi, RepCapIdentifier, StepType)

    def OutputSetStep(self, RepCapIdentifier, StepType, Val):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param StepType:
        :type StepType:
        :param Val:
        :type Val:
        """
        return self._dllwrap.OutputSetStep(self._vi, RepCapIdentifier, StepType, Val)

    def OutputConfigureCurrentLimit(self, Output, Behavior, Limit):
        """

        :param Output:
        :type Output:
        :param Behavior:
        :type Behavior:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.OutputConfigureCurrentLimit(self._vi, Output, Behavior, Limit)

    def OutputConfigureRange(self, Output, RangeType, Range):
        """

        :param Output:
        :type Output:
        :param RangeType:
        :type RangeType:
        :param Range:
        :type Range:
        """
        return self._dllwrap.OutputConfigureRange(self._vi, Output, RangeType, Range)

    def Measure2(self, Output, MeasurementType):
        """

        :param Output:
        :type Output:
        :param MeasurementType:
        :type MeasurementType:
        """
        return self._dllwrap.Measure2(self._vi, Output, MeasurementType)

    def OutputQueryCurrentLimitMax(self, Output, VoltageLevel):
        """

        :param Output:
        :type Output:
        :param VoltageLevel:
        :type VoltageLevel:
        """
        return self._dllwrap.OutputQueryCurrentLimitMax(self._vi, Output, VoltageLevel)

    def OutputQueryVoltageLevelMax(self, Output, CurrentLimit):
        """

        :param Output:
        :type Output:
        :param CurrentLimit:
        :type CurrentLimit:
        """
        return self._dllwrap.OutputQueryVoltageLevelMax(self._vi, Output, CurrentLimit)

    def QueryApplyVoltageCurrent(self, Output, Channel, ValBufferSize):
        """

        :param Output:
        :type Output:
        :param Channel:
        :type Channel:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.QueryApplyVoltageCurrent(self._vi, Output, Channel, ValBufferSize)

    def SlewFalling(self, Output, Slew):
        """

        :param Output:
        :type Output:
        :param Slew:
        :type Slew:
        """
        return self._dllwrap.SlewFalling(self._vi, Output, Slew)

    def QuerySlewFalling(self, Output, ValBufferSize):
        """

        :param Output:
        :type Output:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.QuerySlewFalling(self._vi, Output, ValBufferSize)

    def SlewFallingRange(self, Output, Range):
        """

        :param Output:
        :type Output:
        :param Range:
        :type Range:
        """
        return self._dllwrap.SlewFallingRange(self._vi, Output, Range)

    def SlewRising(self, Output, Slew):
        """

        :param Output:
        :type Output:
        :param Slew:
        :type Slew:
        """
        return self._dllwrap.SlewRising(self._vi, Output, Slew)

    def SlewRisingRange(self, Output, Range):
        """

        :param Output:
        :type Output:
        :param Range:
        :type Range:
        """
        return self._dllwrap.SlewRisingRange(self._vi, Output, Range)

    def QuerySlewRising(self, Output, ValBufferSize):
        """

        :param Output:
        :type Output:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.QuerySlewRising(self._vi, Output, ValBufferSize)

    def VolatgeLevelRange(self, Output, Range):
        """

        :param Output:
        :type Output:
        :param Range:
        :type Range:
        """
        return self._dllwrap.VolatgeLevelRange(self._vi, Output, Range)

    def CurrentLimitRange(self, Output, Range):
        """

        :param Output:
        :type Output:
        :param Range:
        :type Range:
        """
        return self._dllwrap.CurrentLimitRange(self._vi, Output, Range)

    def OutputProtectionResetOVP(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.OutputProtectionResetOVP(self._vi, RepCapIdentifier)

    def OutputProtectionResetOutputProtection(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.OutputProtectionResetOutputProtection(self._vi, RepCapIdentifier)

    def OutputProtectionResetOCP(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.OutputProtectionResetOCP(self._vi, RepCapIdentifier)

    def OutputProtectionQueryOVPLimitMax(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.OutputProtectionQueryOVPLimitMax(self._vi, RepCapIdentifier)

    def OutputProtectionQueryOCPLimitMax(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.OutputProtectionQueryOCPLimitMax(self._vi, RepCapIdentifier)

    def OutputProtectionConfigureOVP(self, RepCapIdentifier, Enabled, Limit):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Enabled:
        :type Enabled:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.OutputProtectionConfigureOVP(self._vi, RepCapIdentifier, Enabled, Limit)

    def OutputProtectionConfigureOCP(self, RepCapIdentifier, Enabled, Limit):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Enabled:
        :type Enabled:
        :param Limit:
        :type Limit:
        """
        return self._dllwrap.OutputProtectionConfigureOCP(self._vi, RepCapIdentifier, Enabled, Limit)

    def Clear(self, Output):
        """

        :param Output:
        :type Output:
        """
        return self._dllwrap.Clear(self._vi, Output)

    def ConfigueDelay(self, Output, Time):
        """

        :param Output:
        :type Output:
        :param Time:
        :type Time:
        """
        return self._dllwrap.ConfigueDelay(self._vi, Output, Time)

    def GetDelay(self, Output):
        """

        :param Output:
        :type Output:
        """
        return self._dllwrap.GetDelay(self._vi, Output)

    def VoltageLevelRange(self, Trigger, Range):
        """

        :param Trigger:
        :type Trigger:
        :param Range:
        :type Range:
        """
        return self._dllwrap.VoltageLevelRange(self._vi, Trigger, Range)

    def GetOutputName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetOutputName(self._vi, Index, NameBufferSize)

    def OutputsCoupleAllChannels(self):
        """ """
        return self._dllwrap.OutputsCoupleAllChannels(self._vi)

    def OutputsConfigureOffSequence(self, Delay, ChanListBufferSize, ChanList):
        """

        :param Delay:
        :type Delay:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        """
        return self._dllwrap.OutputsConfigureOffSequence(self._vi, Delay, ChanListBufferSize, ChanList)

    def OutputsQueryOffSequence(self, ChanListBufferSize, ChanList, ValBufferSize):
        """

        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.OutputsQueryOffSequence(self._vi, ChanListBufferSize, ChanList, ValBufferSize)

    def OutputsConfigureOnSequence(self, Delay, ChanListBufferSize, ChanList):
        """

        :param Delay:
        :type Delay:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        """
        return self._dllwrap.OutputsConfigureOnSequence(self._vi, Delay, ChanListBufferSize, ChanList)

    def OutputsQueryOnSequence(self, ChanListBufferSize, ChanList, ValBufferSize):
        """

        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.OutputsQueryOnSequence(self._vi, ChanListBufferSize, ChanList, ValBufferSize)

    def PreferredMode(self, Mode, ChanList):
        """

        :param Mode:
        :type Mode:
        :param ChanList:
        :type ChanList:
        """
        return self._dllwrap.PreferredMode(self._vi, Mode, ChanList)

    def QueryPreferredMode(self, ChanList):
        """

        :param ChanList:
        :type ChanList:
        """
        return self._dllwrap.QueryPreferredMode(self._vi, ChanList)

    def DisplayClear(self):
        """ """
        return self._dllwrap.DisplayClear(self._vi)

    def StatusQueryRegister(self, Register, SubRegister):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusQueryRegister(self._vi, Register, SubRegister)

    def StatusConfigureRegister(self, Register, SubRegister, Data):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Data:
        :type Data:
        """
        return self._dllwrap.StatusConfigureRegister(self._vi, Register, SubRegister, Data)

    def StatusClear(self):
        """ """
        return self._dllwrap.StatusClear(self._vi)

    def StatusGetRegister(self, Register, SubRegister):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusGetRegister(self._vi, Register, SubRegister)

    def StatusSetRegister(self, Register, SubRegister, Val):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusSetRegister(self._vi, Register, SubRegister, Val)

    def Preset(self):
        """ """
        return self._dllwrap.Preset(self._vi)

    def SystemWaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.SystemWaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def SystemSaveState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemSaveState(self._vi, Identifier)

    def SystemRecallState(self, Identifier):
        """

        :param Identifier:
        :type Identifier:
        """
        return self._dllwrap.SystemRecallState(self._vi, Identifier)

    def SystemEnableLocalControls(self):
        """ """
        return self._dllwrap.SystemEnableLocalControls(self._vi)

    def SystemDisableLocalControls(self):
        """ """
        return self._dllwrap.SystemDisableLocalControls(self._vi)

    def SystemBeep(self):
        """ """
        return self._dllwrap.SystemBeep(self._vi)

    def SystemGetMemoryName(self, Index, RetValBufferSize):
        """

        :param Index:
        :type Index:
        :param RetValBufferSize:
        :type RetValBufferSize:
        """
        return self._dllwrap.SystemGetMemoryName(self._vi, Index, RetValBufferSize)

    def SystemSetMemoryName(self, Index, Val):
        """

        :param Index:
        :type Index:
        :param Val:
        :type Val:
        """
        return self._dllwrap.SystemSetMemoryName(self._vi, Index, Val)

    def SystemRead(self, Size):
        """

        :param Size:
        :type Size:
        """
        return self._dllwrap.SystemRead(self._vi, Size)

    def SystemWrite(self, CommandString):
        """

        :param CommandString:
        :type CommandString:
        """
        return self._dllwrap.SystemWrite(self._vi, CommandString)

    def SystemExportInstrumentState(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemExportInstrumentState(self._vi, ValBufferSize)

    def SystemImportInstrumentState(self, StateBufferSize):
        """

        :param StateBufferSize:
        :type StateBufferSize:
        """
        return self._dllwrap.SystemImportInstrumentState(self._vi, StateBufferSize)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def SystemWriteString(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, Data)

    def viRead(self, BufferSize):
        """

        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.viRead(self._vi, BufferSize)

    def viWrite(self, Count, Buffer):
        """

        :param Count:
        :type Count:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.viWrite(self._vi, Count, Buffer)

    def CalibrationCurrentData(self, RepCapIdentifier, Current):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Current:
        :type Current:
        """
        return self._dllwrap.CalibrationCurrentData(self._vi, RepCapIdentifier, Current)

    def CalibrationCurrentLevel(self, RepCapIdentifier, Level):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Level:
        :type Level:
        """
        return self._dllwrap.CalibrationCurrentLevel(self._vi, RepCapIdentifier, Level)

    def CalibrationCurrentProtection(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.CalibrationCurrentProtection(self._vi, RepCapIdentifier)

    def CalibrationVoltageData(self, RepCapIdentifier, Voltage):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Voltage:
        :type Voltage:
        """
        return self._dllwrap.CalibrationVoltageData(self._vi, RepCapIdentifier, Voltage)

    def CalibrationVoltageLevel(self, RepCapIdentifier, Level):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param Level:
        :type Level:
        """
        return self._dllwrap.CalibrationVoltageLevel(self._vi, RepCapIdentifier, Level)

    def CalibrationVoltageProtection(self, RepCapIdentifier):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        """
        return self._dllwrap.CalibrationVoltageProtection(self._vi, RepCapIdentifier)

    def CALIBRATOIN_LOW_CURRENT_DATA(self, Calibration, Current):
        """

        :param Calibration:
        :type Calibration:
        :param Current:
        :type Current:
        """
        return self._dllwrap.CALIBRATOIN_LOW_CURRENT_DATA(self._vi, Calibration, Current)

    def LowCurrentLevel(self, Calibration, Level):
        """

        :param Calibration:
        :type Calibration:
        :param Level:
        :type Level:
        """
        return self._dllwrap.LowCurrentLevel(self._vi, Calibration, Level)

    def CalibrationsDACError(self):
        """ """
        return self._dllwrap.CalibrationsDACError(self._vi)

    def CalibrationsSetState(self, Enabled, Password):
        """

        :param Enabled:
        :type Enabled:
        :param Password:
        :type Password:
        """
        return self._dllwrap.CalibrationsSetState(self._vi, Enabled, Password)

    def GetCalibrationName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetCalibrationName(self._vi, Index, NameBufferSize)

    def AutoSaveEnabled(self, State):
        """

        :param State:
        :type State:
        """
        return self._dllwrap.AutoSaveEnabled(self._vi, State)

    def Save(self):
        """ """
        return self._dllwrap.Save(self._vi)

    def CalSetState(self, Enabled, Password):
        """

        :param Enabled:
        :type Enabled:
        :param Password:
        :type Password:
        """
        return self._dllwrap.CalSetState(self._vi, Enabled, Password)

    def GetTriggerName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetTriggerName(self._vi, Index, NameBufferSize)

    def InitiateContinous(self, State):
        """

        :param State:
        :type State:
        """
        return self._dllwrap.InitiateContinous(self._vi, State)

    def QueryInitiateContinous(self, ChanList):
        """

        :param ChanList:
        :type ChanList:
        """
        return self._dllwrap.QueryInitiateContinous(self._vi, ChanList)

    def DigitalPortConfigurePin(self, Pin, Function, Polarity):
        """

        :param Pin:
        :type Pin:
        :param Function:
        :type Function:
        :param Polarity:
        :type Polarity:
        """
        return self._dllwrap.DigitalPortConfigurePin(self._vi, Pin, Function, Polarity)

    def DigitalPortQueryPin(self, Pin):
        """

        :param Pin:
        :type Pin:
        """
        return self._dllwrap.DigitalPortQueryPin(self._vi, Pin)

    def DigitalPortReadInputData(self):
        """ """
        return self._dllwrap.DigitalPortReadInputData(self._vi)

    def DigitalPortWriteOutputData(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.DigitalPortWriteOutputData(self._vi, Data)

    def DigitalPortReadOutputData(self):
        """ """
        return self._dllwrap.DigitalPortReadOutputData(self._vi)

    def DLogAbort(self):
        """ """
        return self._dllwrap.DLogAbort(self._vi)

    def DLogExportFile(self, FilenameBufferSize, Filename):
        """

        :param FilenameBufferSize:
        :type FilenameBufferSize:
        :param Filename:
        :type Filename:
        """
        return self._dllwrap.DLogExportFile(self._vi, FilenameBufferSize, Filename)

    def DLogConfigureFunction(self, Function, Enabled, ChanListBufferSize, ChanList):
        """

        :param Function:
        :type Function:
        :param Enabled:
        :type Enabled:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        """
        return self._dllwrap.DLogConfigureFunction(self._vi, Function, Enabled, ChanListBufferSize, ChanList)

    def DLogQueryFunction(self, Function, ChanListBufferSize, ChanList, ValBufferSize):
        """

        :param Function:
        :type Function:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.DLogQueryFunction(self._vi, Function, ChanListBufferSize, ChanList, ValBufferSize)

    def DLogTrigger(self):
        """ """
        return self._dllwrap.DLogTrigger(self._vi)

    def DLogInitiate(self, FilenameBufferSize, Filename):
        """

        :param FilenameBufferSize:
        :type FilenameBufferSize:
        :param Filename:
        :type Filename:
        """
        return self._dllwrap.DLogInitiate(self._vi, FilenameBufferSize, Filename)

    def DLogFetch(self, NoOfPoints, ChanListBufferSize, ChanList, ValBufferSize):
        """

        :param NoOfPoints:
        :type NoOfPoints:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.DLogFetch(self._vi, NoOfPoints, ChanListBufferSize, ChanList, ValBufferSize)

    def TransientConfigureMode(self, Function, Mode, ChanListBufferSize, ChanList):
        """

        :param Function:
        :type Function:
        :param Mode:
        :type Mode:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        """
        return self._dllwrap.TransientConfigureMode(self._vi, Function, Mode, ChanListBufferSize, ChanList)

    def TransientQueryMode(self, Function, ChanListBufferSize, ChanList, ValBufferSize):
        """

        :param Function:
        :type Function:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.TransientQueryMode(self._vi, Function, ChanListBufferSize, ChanList, ValBufferSize)

    def TransientListDefineRepeatCount(self, ContinuousEnabled, Count, ChanListBufferSize, ChanList):
        """

        :param ContinuousEnabled:
        :type ContinuousEnabled:
        :param Count:
        :type Count:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        """
        return self._dllwrap.TransientListDefineRepeatCount(
            self._vi, ContinuousEnabled, Count, ChanListBufferSize, ChanList
        )

    def TransientListQueryRepeatCount(self, ChanListBufferSize, ChanList, ValBufferSize):
        """

        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.TransientListQueryRepeatCount(self._vi, ChanListBufferSize, ChanList, ValBufferSize)

    def TransientListDefineDataPoints(self, Type, PointsBufferSize, ChanListBufferSize, ChanList):
        """

        :param Type:
        :type Type:
        :param PointsBufferSize:
        :type PointsBufferSize:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        """
        return self._dllwrap.TransientListDefineDataPoints(
            self._vi, Type, PointsBufferSize, ChanListBufferSize, ChanList
        )

    def TransientListQueryDataPoints(self, Type, ChanListBufferSize, ChanList, ValBufferSize):
        """

        :param Type:
        :type Type:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.TransientListQueryDataPoints(self._vi, Type, ChanListBufferSize, ChanList, ValBufferSize)

    def TransientListQueryListLength(self, ListType, ChanListBufferSize, ChanList, ValBufferSize):
        """

        :param ListType:
        :type ListType:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.TransientListQueryListLength(
            self._vi, ListType, ChanListBufferSize, ChanList, ValBufferSize
        )

    def TransientListDefineTriggerMode(self, Mode, ChanListBufferSize, ChanList):
        """

        :param Mode:
        :type Mode:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        """
        return self._dllwrap.TransientListDefineTriggerMode(self._vi, Mode, ChanListBufferSize, ChanList)

    def TransientListQueryTriggerMode(self, ChanListBufferSize, ChanList, ValBufferSize):
        """

        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.TransientListQueryTriggerMode(self._vi, ChanListBufferSize, ChanList, ValBufferSize)

    def TransientListDefineTerminationBehavior(self, TermiationBehavior, ChanListBufferSize, ChanList):
        """

        :param TermiationBehavior:
        :type TermiationBehavior:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        """
        return self._dllwrap.TransientListDefineTerminationBehavior(
            self._vi, TermiationBehavior, ChanListBufferSize, ChanList
        )

    def TransientListQueryTerminationBehavior(self, ChanListBufferSize, ChanList, ValBufferSize):
        """

        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.TransientListQueryTerminationBehavior(
            self._vi, ChanListBufferSize, ChanList, ValBufferSize
        )

    def TransientListDefineTriggerOutput(self, Type, PointsBufferSize, ChanListBufferSize, ChanList):
        """

        :param Type:
        :type Type:
        :param PointsBufferSize:
        :type PointsBufferSize:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        """
        return self._dllwrap.TransientListDefineTriggerOutput(
            self._vi, Type, PointsBufferSize, ChanListBufferSize, ChanList
        )

    def TransientListQueryTriggerOutput(self, Type, ChanListBufferSize, ChanList, ValBufferSize):
        """

        :param Type:
        :type Type:
        :param ChanListBufferSize:
        :type ChanListBufferSize:
        :param ChanList:
        :type ChanList:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.TransientListQueryTriggerOutput(
            self._vi, Type, ChanListBufferSize, ChanList, ValBufferSize
        )
