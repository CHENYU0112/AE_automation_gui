from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import AgE36xx_const as const
from .AgE36xx_const import *


class AgE36xx_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("AgE36xx.dll", "AgE36xx_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "AgE36xx"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        _status = self.dll.AgE36xx_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Vi.value)

    def close(self, Vi):
        _status = self.dll.AgE36xx_close(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        _status = self.dll.AgE36xx_InitWithOptions(
            ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), ViConstString(OptionsString), byref(Vi)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Vi.value)

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        _status = self.dll.AgE36xx_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Name)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        _status = self.dll.AgE36xx_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        _status = self.dll.AgE36xx_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        _status = self.dll.AgE36xx_GetError(
            ViSession(Vi), byref(ErrorCode), ViInt32(ErrorDescriptionBufferSize), ErrorDescription
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        _status = self.dll.AgE36xx_ClearError(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        _status = self.dll.AgE36xx_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(CoercionRecord)

    def InvalidateAllAttributes(self, Vi):
        _status = self.dll.AgE36xx_InvalidateAllAttributes(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Disable(self, Vi):
        _status = self.dll.AgE36xx_Disable(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        _status = self.dll.AgE36xx_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        _status = self.dll.AgE36xx_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        _status = self.dll.AgE36xx_reset(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetWithDefaults(self, Vi):
        _status = self.dll.AgE36xx_ResetWithDefaults(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        _status = self.dll.AgE36xx_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        _status = self.dll.AgE36xx_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(CallerHasLock.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        _status = self.dll.AgE36xx_GetAttributeViInt32(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViAttr(AttributeID), byref(AttributeValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        _status = self.dll.AgE36xx_GetAttributeViReal64(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViAttr(AttributeID), byref(AttributeValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        _status = self.dll.AgE36xx_GetAttributeViBoolean(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViAttr(AttributeID), byref(AttributeValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        _status = self.dll.AgE36xx_GetAttributeViSession(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViAttr(AttributeID), byref(AttributeValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        _status = self.dll.AgE36xx_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgE36xx_SetAttributeViInt32(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViAttr(AttributeID), ViInt32(AttributeValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgE36xx_SetAttributeViReal64(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViAttr(AttributeID), ViReal64(AttributeValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgE36xx_SetAttributeViBoolean(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViAttr(AttributeID), ViBoolean(AttributeValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgE36xx_SetAttributeViSession(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViAttr(AttributeID), ViSession(AttributeValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        _status = self.dll.AgE36xx_SetAttributeViString(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViAttr(AttributeID), ViConstString(AttributeValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputEnabled(self, Vi, ChannelName, Enabled):
        _status = self.dll.AgE36xx_ConfigureOutputEnabled(ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureVoltageLevel(self, Vi, ChannelName, Level):
        _status = self.dll.AgE36xx_ConfigureVoltageLevel(ViSession(Vi), ViConstString(ChannelName), ViReal64(Level))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCurrentLimit(self, Vi, ChannelName, Behavior, Limit):
        _status = self.dll.AgE36xx_ConfigureCurrentLimit(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(Behavior), ViReal64(Limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOVP(self, Vi, ChannelName, Enabled, Limit):
        _status = self.dll.AgE36xx_ConfigureOVP(
            ViSession(Vi), ViConstString(ChannelName), ViBoolean(Enabled), ViReal64(Limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputRange(self, Vi, ChannelName, RangeType, Range):
        _status = self.dll.AgE36xx_ConfigureOutputRange(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(RangeType), ViReal64(Range)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMaxCurrentLimit(self, Vi, ChannelName, VoltageLevel):
        MaxCurrentLimit = ViReal64()
        _status = self.dll.AgE36xx_QueryMaxCurrentLimit(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(VoltageLevel), byref(MaxCurrentLimit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MaxCurrentLimit.value)

    def QueryMaxVoltageLevel(self, Vi, ChannelName, CurrentLimit):
        MaxVoltageLevel = ViReal64()
        _status = self.dll.AgE36xx_QueryMaxVoltageLevel(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(CurrentLimit), byref(MaxVoltageLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(MaxVoltageLevel.value)

    def ConfigureTriggeredCurrentLimit(self, Vi, ChannelName, Limit):
        _status = self.dll.AgE36xx_ConfigureTriggeredCurrentLimit(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(Limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggeredVoltageLevel(self, Vi, ChannelName, Level):
        _status = self.dll.AgE36xx_ConfigureTriggeredVoltageLevel(
            ViSession(Vi), ViConstString(ChannelName), ViReal64(Level)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerSource(self, Vi, ChannelName, Source):
        _status = self.dll.AgE36xx_ConfigureTriggerSource(ViSession(Vi), ViConstString(ChannelName), ViInt32(Source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Measure(self, Vi, ChannelName, MeasurementType):
        Measurement = ViReal64()
        _status = self.dll.AgE36xx_Measure(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(MeasurementType), byref(Measurement)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Measurement.value)

    def QueryOutputState(self, Vi, ChannelName, OutputState):
        InState = ViBoolean()
        _status = self.dll.AgE36xx_QueryOutputState(
            ViSession(Vi), ViConstString(ChannelName), ViInt32(OutputState), byref(InState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(InState.value)

    def ResetOutputProtection(self, Vi, ChannelName):
        _status = self.dll.AgE36xx_ResetOutputProtection(ViSession(Vi), ViConstString(ChannelName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Abort(self, Vi):
        _status = self.dll.AgE36xx_Abort(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Initiate(self, Vi):
        _status = self.dll.AgE36xx_Initiate(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SendSoftwareTrigger(self, Vi):
        _status = self.dll.AgE36xx_SendSoftwareTrigger(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputApplyVoltageCurrent(self, Vi, RepCapIdentifier, VoltageLevel, CurrentLimit):
        _status = self.dll.AgE36xx_OutputApplyVoltageCurrent(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViReal64(VoltageLevel), ViReal64(CurrentLimit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputQueryState(self, Vi, RepCapIdentifier, OutputState):
        RetVal = ViBoolean()
        _status = self.dll.AgE36xx_OutputQueryState(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(OutputState), byref(RetVal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(RetVal.value)

    def OutputRunStep(self, Vi, RepCapIdentifier, Direction):
        _status = self.dll.AgE36xx_OutputRunStep(ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(Direction))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputGetStep(self, Vi, RepCapIdentifier, StepType):
        RetVal = ViReal64()
        _status = self.dll.AgE36xx_OutputGetStep(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(StepType), byref(RetVal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def OutputSetStep(self, Vi, RepCapIdentifier, StepType, Val):
        _status = self.dll.AgE36xx_OutputSetStep(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(StepType), ViReal64(Val)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputConfigureCurrentLimit(self, Vi, Output, Behavior, Limit):
        _status = self.dll.AgE36xx_OutputConfigureCurrentLimit(
            ViSession(Vi), ViConstString(Output), ViInt32(Behavior), ViReal64(Limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputConfigureRange(self, Vi, Output, RangeType, Range):
        _status = self.dll.AgE36xx_OutputConfigureRange(
            ViSession(Vi), ViConstString(Output), ViInt32(RangeType), ViReal64(Range)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Measure2(self, Vi, Output, MeasurementType):
        Val = ViReal64()
        _status = self.dll.AgE36xx_Measure2(ViSession(Vi), ViConstString(Output), ViInt32(MeasurementType), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def OutputQueryCurrentLimitMax(self, Vi, Output, VoltageLevel):
        Val = ViReal64()
        _status = self.dll.AgE36xx_OutputQueryCurrentLimitMax(
            ViSession(Vi), ViConstString(Output), ViReal64(VoltageLevel), byref(Val)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def OutputQueryVoltageLevelMax(self, Vi, Output, CurrentLimit):
        Val = ViReal64()
        _status = self.dll.AgE36xx_OutputQueryVoltageLevelMax(
            ViSession(Vi), ViConstString(Output), ViReal64(CurrentLimit), byref(Val)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def QueryApplyVoltageCurrent(self, Vi, Output, Channel, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.AgE36xx_QueryApplyVoltageCurrent(
            ViSession(Vi), ViConstString(Output), ViInt32(Channel), ViInt32(ValBufferSize), Val
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def SlewFalling(self, Vi, Output, Slew):
        _status = self.dll.AgE36xx_SlewFalling(ViSession(Vi), ViConstString(Output), ViReal64(Slew))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySlewFalling(self, Vi, Output, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_QuerySlewFalling(
            ViSession(Vi), ViConstString(Output), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SlewFallingRange(self, Vi, Output, Range):
        _status = self.dll.AgE36xx_SlewFallingRange(ViSession(Vi), ViConstString(Output), ViInt32(Range))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SlewRising(self, Vi, Output, Slew):
        _status = self.dll.AgE36xx_SlewRising(ViSession(Vi), ViConstString(Output), ViReal64(Slew))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SlewRisingRange(self, Vi, Output, Range):
        _status = self.dll.AgE36xx_SlewRisingRange(ViSession(Vi), ViConstString(Output), ViInt32(Range))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySlewRising(self, Vi, Output, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_QuerySlewRising(
            ViSession(Vi), ViConstString(Output), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def VolatgeLevelRange(self, Vi, Output, Range):
        _status = self.dll.AgE36xx_VolatgeLevelRange(ViSession(Vi), ViConstString(Output), ViInt32(Range))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CurrentLimitRange(self, Vi, Output, Range):
        _status = self.dll.AgE36xx_CurrentLimitRange(ViSession(Vi), ViConstString(Output), ViInt32(Range))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputProtectionResetOVP(self, Vi, RepCapIdentifier):
        _status = self.dll.AgE36xx_OutputProtectionResetOVP(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputProtectionResetOutputProtection(self, Vi, RepCapIdentifier):
        _status = self.dll.AgE36xx_OutputProtectionResetOutputProtection(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputProtectionResetOCP(self, Vi, RepCapIdentifier):
        _status = self.dll.AgE36xx_OutputProtectionResetOCP(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputProtectionQueryOVPLimitMax(self, Vi, RepCapIdentifier):
        RetVal = ViReal64()
        _status = self.dll.AgE36xx_OutputProtectionQueryOVPLimitMax(
            ViSession(Vi), ViConstString(RepCapIdentifier), byref(RetVal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def OutputProtectionQueryOCPLimitMax(self, Vi, RepCapIdentifier):
        RetVal = ViReal64()
        _status = self.dll.AgE36xx_OutputProtectionQueryOCPLimitMax(
            ViSession(Vi), ViConstString(RepCapIdentifier), byref(RetVal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(RetVal.value)

    def OutputProtectionConfigureOVP(self, Vi, RepCapIdentifier, Enabled, Limit):
        _status = self.dll.AgE36xx_OutputProtectionConfigureOVP(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViBoolean(Enabled), ViReal64(Limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputProtectionConfigureOCP(self, Vi, RepCapIdentifier, Enabled, Limit):
        _status = self.dll.AgE36xx_OutputProtectionConfigureOCP(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViBoolean(Enabled), ViReal64(Limit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Clear(self, Vi, Output):
        _status = self.dll.AgE36xx_Clear(ViSession(Vi), ViConstString(Output))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigueDelay(self, Vi, Output, Time):
        _status = self.dll.AgE36xx_ConfigueDelay(ViSession(Vi), ViConstString(Output), ViReal64(Time))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetDelay(self, Vi, Output):
        Val = ViReal64()
        _status = self.dll.AgE36xx_GetDelay(ViSession(Vi), ViConstString(Output), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(Val.value)

    def VoltageLevelRange(self, Vi, Trigger, Range):
        _status = self.dll.AgE36xx_VoltageLevelRange(ViSession(Vi), ViConstString(Trigger), ViInt32(Range))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetOutputName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        _status = self.dll.AgE36xx_GetOutputName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Name)

    def OutputsCoupleAllChannels(self, Vi):
        _status = self.dll.AgE36xx_OutputsCoupleAllChannels(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputsConfigureOffSequence(self, Vi, Delay, ChanListBufferSize, ChanList):
        _status = self.dll.AgE36xx_OutputsConfigureOffSequence(
            ViSession(Vi), ViReal64(Delay), ViInt32(ChanListBufferSize), ViConstString(ChanList)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputsQueryOffSequence(self, Vi, ChanListBufferSize, ChanList, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_OutputsQueryOffSequence(
            ViSession(Vi),
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def OutputsConfigureOnSequence(self, Vi, Delay, ChanListBufferSize, ChanList):
        _status = self.dll.AgE36xx_OutputsConfigureOnSequence(
            ViSession(Vi), ViReal64(Delay), ViInt32(ChanListBufferSize), ViConstString(ChanList)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def OutputsQueryOnSequence(self, Vi, ChanListBufferSize, ChanList, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_OutputsQueryOnSequence(
            ViSession(Vi),
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def PreferredMode(self, Vi, Mode, ChanList):
        _status = self.dll.AgE36xx_PreferredMode(ViSession(Vi), ViInt32(Mode), ViConstString(ChanList))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryPreferredMode(self, Vi, ChanList):
        Val = ViInt32()
        _status = self.dll.AgE36xx_QueryPreferredMode(ViSession(Vi), ViConstString(ChanList), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def DisplayClear(self, Vi):
        _status = self.dll.AgE36xx_DisplayClear(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusQueryRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        _status = self.dll.AgE36xx_StatusQueryRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(RetVal.value)

    def StatusConfigureRegister(self, Vi, Register, SubRegister, Data):
        _status = self.dll.AgE36xx_StatusConfigureRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Data)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusClear(self, Vi):
        _status = self.dll.AgE36xx_StatusClear(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StatusGetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        _status = self.dll.AgE36xx_StatusGetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(RetVal.value)

    def StatusSetRegister(self, Vi, Register, SubRegister, Val):
        _status = self.dll.AgE36xx_StatusSetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Preset(self, Vi):
        _status = self.dll.AgE36xx_Preset(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        _status = self.dll.AgE36xx_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemSaveState(self, Vi, Identifier):
        _status = self.dll.AgE36xx_SystemSaveState(ViSession(Vi), ViConstString(Identifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemRecallState(self, Vi, Identifier):
        _status = self.dll.AgE36xx_SystemRecallState(ViSession(Vi), ViConstString(Identifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemEnableLocalControls(self, Vi):
        _status = self.dll.AgE36xx_SystemEnableLocalControls(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemDisableLocalControls(self, Vi):
        _status = self.dll.AgE36xx_SystemDisableLocalControls(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemBeep(self, Vi):
        _status = self.dll.AgE36xx_SystemBeep(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemGetMemoryName(self, Vi, Index, RetValBufferSize):
        RetVal = ARRAY_ViChar(RetValBufferSize)
        _status = self.dll.AgE36xx_SystemGetMemoryName(ViSession(Vi), ViInt32(Index), ViInt32(RetValBufferSize), RetVal)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(RetVal)

    def SystemSetMemoryName(self, Vi, Index, Val):
        _status = self.dll.AgE36xx_SystemSetMemoryName(ViSession(Vi), ViInt32(Index), ViConstString(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemRead(self, Vi, Size):
        Value = ARRAY_ViChar(Size)
        ActualSize = ViInt32()
        _status = self.dll.AgE36xx_SystemRead(ViSession(Vi), ViInt32(Size), Value, byref(ActualSize))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Value = decode(Value)
        ActualSize = int(ActualSize.value)
        return Value, ActualSize

    def SystemWrite(self, Vi, CommandString):
        _status = self.dll.AgE36xx_SystemWrite(ViSession(Vi), ViConstString(CommandString))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SystemExportInstrumentState(self, Vi, ValBufferSize):
        Val = ARRAY_ViByte(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_SystemExportInstrumentState(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SystemImportInstrumentState(self, Vi, StateBufferSize):
        State = ARRAY_ViByte(StateBufferSize)
        _status = self.dll.AgE36xx_SystemImportInstrumentState(ViSession(Vi), ViInt32(StateBufferSize), State)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return State

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        _status = self.dll.AgE36xx_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Val)

    def SystemWriteString(self, Vi, Data):
        _status = self.dll.AgE36xx_SystemWriteString(ViSession(Vi), ViConstString(Data))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViByte(BufferSize)
        ReturnCount = ViInt64()
        _status = self.dll.AgE36xx_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def viWrite(self, Vi, Count, Buffer):
        _Buffer = (ViByte * len(Buffer))(*Buffer)
        ReturnCount = ViInt64()
        _status = self.dll.AgE36xx_viWrite(ViSession(Vi), ViInt64(Count), _Buffer, byref(ReturnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(ReturnCount.value)

    def CalibrationCurrentData(self, Vi, RepCapIdentifier, Current):
        _status = self.dll.AgE36xx_CalibrationCurrentData(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViReal64(Current)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalibrationCurrentLevel(self, Vi, RepCapIdentifier, Level):
        _status = self.dll.AgE36xx_CalibrationCurrentLevel(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(Level)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalibrationCurrentProtection(self, Vi, RepCapIdentifier):
        _status = self.dll.AgE36xx_CalibrationCurrentProtection(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalibrationVoltageData(self, Vi, RepCapIdentifier, Voltage):
        _status = self.dll.AgE36xx_CalibrationVoltageData(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViReal64(Voltage)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalibrationVoltageLevel(self, Vi, RepCapIdentifier, Level):
        _status = self.dll.AgE36xx_CalibrationVoltageLevel(
            ViSession(Vi), ViConstString(RepCapIdentifier), ViInt32(Level)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalibrationVoltageProtection(self, Vi, RepCapIdentifier):
        _status = self.dll.AgE36xx_CalibrationVoltageProtection(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CALIBRATOIN_LOW_CURRENT_DATA(self, Vi, Calibration, Current):
        _status = self.dll.AgE36xx_CALIBRATOIN_LOW_CURRENT_DATA(
            ViSession(Vi), ViConstString(Calibration), ViReal64(Current)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LowCurrentLevel(self, Vi, Calibration, Level):
        _status = self.dll.AgE36xx_LowCurrentLevel(ViSession(Vi), ViConstString(Calibration), ViInt32(Level))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalibrationsDACError(self, Vi):
        _status = self.dll.AgE36xx_CalibrationsDACError(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalibrationsSetState(self, Vi, Enabled, Password):
        _status = self.dll.AgE36xx_CalibrationsSetState(ViSession(Vi), ViBoolean(Enabled), ViConstString(Password))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetCalibrationName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        _status = self.dll.AgE36xx_GetCalibrationName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Name)

    def AutoSaveEnabled(self, Vi, State):
        _status = self.dll.AgE36xx_AutoSaveEnabled(ViSession(Vi), ViBoolean(State))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Save(self, Vi):
        _status = self.dll.AgE36xx_Save(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalSetState(self, Vi, Enabled, Password):
        _status = self.dll.AgE36xx_CalSetState(ViSession(Vi), ViBoolean(Enabled), ViInt32(Password))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetTriggerName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        _status = self.dll.AgE36xx_GetTriggerName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Name)

    def InitiateContinous(self, Vi, State):
        _status = self.dll.AgE36xx_InitiateContinous(ViSession(Vi), ViBoolean(State))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryInitiateContinous(self, Vi, ChanList):
        Val = ViBoolean()
        _status = self.dll.AgE36xx_QueryInitiateContinous(ViSession(Vi), ViConstString(ChanList), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(Val.value)

    def DigitalPortConfigurePin(self, Vi, Pin, Function, Polarity):
        _status = self.dll.AgE36xx_DigitalPortConfigurePin(
            ViSession(Vi), ViInt32(Pin), ViInt32(Function), ViInt32(Polarity)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitalPortQueryPin(self, Vi, Pin):
        Function = ViInt32()
        Polarity = ViInt32()
        _status = self.dll.AgE36xx_DigitalPortQueryPin(ViSession(Vi), ViInt32(Pin), byref(Function), byref(Polarity))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Function = int(Function.value)
        Polarity = int(Polarity.value)
        return Function, Polarity

    def DigitalPortReadInputData(self, Vi):
        Val = ViInt32()
        _status = self.dll.AgE36xx_DigitalPortReadInputData(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def DigitalPortWriteOutputData(self, Vi, Data):
        _status = self.dll.AgE36xx_DigitalPortWriteOutputData(ViSession(Vi), ViInt32(Data))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DigitalPortReadOutputData(self, Vi):
        Val = ViInt32()
        _status = self.dll.AgE36xx_DigitalPortReadOutputData(ViSession(Vi), byref(Val))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Val.value)

    def DLogAbort(self, Vi):
        _status = self.dll.AgE36xx_DLogAbort(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DLogExportFile(self, Vi, FilenameBufferSize, Filename):
        _status = self.dll.AgE36xx_DLogExportFile(ViSession(Vi), ViInt32(FilenameBufferSize), ViConstString(Filename))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DLogConfigureFunction(self, Vi, Function, Enabled, ChanListBufferSize, ChanList):
        _status = self.dll.AgE36xx_DLogConfigureFunction(
            ViSession(Vi), ViInt32(Function), ViBoolean(Enabled), ViInt32(ChanListBufferSize), ViConstString(ChanList)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DLogQueryFunction(self, Vi, Function, ChanListBufferSize, ChanList, ValBufferSize):
        Val = ARRAY_ViBoolean(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_DLogQueryFunction(
            ViSession(Vi),
            ViInt32(Function),
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def DLogTrigger(self, Vi):
        _status = self.dll.AgE36xx_DLogTrigger(ViSession(Vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DLogInitiate(self, Vi, FilenameBufferSize, Filename):
        _status = self.dll.AgE36xx_DLogInitiate(ViSession(Vi), ViInt32(FilenameBufferSize), ViConstString(Filename))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DLogFetch(self, Vi, NoOfPoints, ChanListBufferSize, ChanList, ValBufferSize):
        Val = ARRAY_ViReal32(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_DLogFetch(
            ViSession(Vi),
            ViInt32(NoOfPoints),
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def TransientConfigureMode(self, Vi, Function, Mode, ChanListBufferSize, ChanList):
        _status = self.dll.AgE36xx_TransientConfigureMode(
            ViSession(Vi), ViInt32(Function), ViInt32(Mode), ViInt32(ChanListBufferSize), ViConstString(ChanList)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TransientQueryMode(self, Vi, Function, ChanListBufferSize, ChanList, ValBufferSize):
        Val = ARRAY_ViInt32(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_TransientQueryMode(
            ViSession(Vi),
            ViInt32(Function),
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def TransientListDefineRepeatCount(self, Vi, ContinuousEnabled, Count, ChanListBufferSize, ChanList):
        _status = self.dll.AgE36xx_TransientListDefineRepeatCount(
            ViSession(Vi),
            ViBoolean(ContinuousEnabled),
            ViInt32(Count),
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TransientListQueryRepeatCount(self, Vi, ChanListBufferSize, ChanList, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_TransientListQueryRepeatCount(
            ViSession(Vi),
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def TransientListDefineDataPoints(self, Vi, Type, PointsBufferSize, ChanListBufferSize, ChanList):
        Points = ARRAY_ViReal64(PointsBufferSize)
        _status = self.dll.AgE36xx_TransientListDefineDataPoints(
            ViSession(Vi),
            ViInt32(Type),
            ViInt32(PointsBufferSize),
            Points,
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return list(Points)

    def TransientListQueryDataPoints(self, Vi, Type, ChanListBufferSize, ChanList, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_TransientListQueryDataPoints(
            ViSession(Vi),
            ViInt32(Type),
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def TransientListQueryListLength(self, Vi, ListType, ChanListBufferSize, ChanList, ValBufferSize):
        Val = ARRAY_ViInt32(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_TransientListQueryListLength(
            ViSession(Vi),
            ViInt32(ListType),
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def TransientListDefineTriggerMode(self, Vi, Mode, ChanListBufferSize, ChanList):
        _status = self.dll.AgE36xx_TransientListDefineTriggerMode(
            ViSession(Vi), ViInt32(Mode), ViInt32(ChanListBufferSize), ViConstString(ChanList)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TransientListQueryTriggerMode(self, Vi, ChanListBufferSize, ChanList, ValBufferSize):
        Val = ARRAY_ViInt32(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_TransientListQueryTriggerMode(
            ViSession(Vi),
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def TransientListDefineTerminationBehavior(self, Vi, TermiationBehavior, ChanListBufferSize, ChanList):
        _status = self.dll.AgE36xx_TransientListDefineTerminationBehavior(
            ViSession(Vi), ViInt32(TermiationBehavior), ViInt32(ChanListBufferSize), ViConstString(ChanList)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def TransientListQueryTerminationBehavior(self, Vi, ChanListBufferSize, ChanList, ValBufferSize):
        Val = ARRAY_ViInt32(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_TransientListQueryTerminationBehavior(
            ViSession(Vi),
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def TransientListDefineTriggerOutput(self, Vi, Type, PointsBufferSize, ChanListBufferSize, ChanList):
        Points = ARRAY_ViBoolean(PointsBufferSize)
        _status = self.dll.AgE36xx_TransientListDefineTriggerOutput(
            ViSession(Vi),
            ViInt32(Type),
            ViInt32(PointsBufferSize),
            Points,
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return list(Points)

    def TransientListQueryTriggerOutput(self, Vi, Type, ChanListBufferSize, ChanList, ValBufferSize):
        Val = ARRAY_ViBoolean(ValBufferSize)
        ValActualSize = ViInt32()
        _status = self.dll.AgE36xx_TransientListQueryTriggerOutput(
            ViSession(Vi),
            ViInt32(Type),
            ViInt32(ChanListBufferSize),
            ViConstString(ChanList),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize
