from __future__ import annotations

import ctypes
import typing
from ctypes import byref

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import ni_hsdio_const as const
from .ni_hsdio_const import *

void = ctypes.c_void_p


def ARRAY_ViUInt8(length):
    return (ViUInt8 * length)()


def ARRAY_ViUInt16(length):
    return (ViUInt16 * length)()


def ARRAY_ViUInt32(length):
    return (ViUInt32 * length)()


def ARRAY_ViUInt64(length):
    return (ViUInt64 * length)()


class niHSDIO_wfmInfo(ctypes.Structure):
    _files_: typing.ClassVar = [
        ("absoluteTimestamp", ViReal64),
        ("relativeTimestamp", ViReal64),
        ("dt", ViReal64),
        ("actualSamplesRead", ViInt32),
        ("reserved1", ViReal64),
        ("reserved2", ViReal64),
    ]


def ARRAY_niHSDIO_wfmInfo(length):
    return (niHSDIO_wfmInfo * length)()


class ni_hsdio(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("niHSDIO.dll", "niHSDIO_64.dll")
        """:type : ctypes.WinDLL"""

        self.__vigen = None
        self.__viacq = None
        self.__Identity = IdentityBasic(
            fct_idn=lambda: "Not available",
            fct_drv_rev=lambda: "Not available",
            fct_fw_rev=lambda: "Not available",
        )

    @property
    def Identity(self):
        return self.__Identity

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "ni_hsdio"

    @property
    def const(self):
        return const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        if self.__vigen is not None or self.__viacq is not None:
            msg = "Driver is initialized already!"
            raise Exception(msg)
        self.__vigen = self._InitGenerationSession(ResourceName, IdQuery, Reset, OptionString)
        self.__viacq = self._InitAcquisitionSession(ResourceName, IdQuery, Reset, OptionString)

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        if self.__vigen is None or self.__viacq is None:
            msg = "Driver is not initialized yet!"
            raise Exception(msg)
        self._close(self.__vigen)
        self.__vigen = None
        self._close(self.__viacq)
        self.__viacq = None

    @property
    def vigen(self):
        if self.__vigen is None:
            msg = "Driver is not initialized yet!"
            raise Exception(msg)
        return self.__vigen

    @property
    def viacq(self):
        if self.__viacq is None:
            msg = "Driver is not initialized yet!"
            raise Exception(msg)
        return self.__viacq

    def _InitAcquisitionSession(self, resourceName, IDQuery, resetDevice, optionString):
        vi = ViSession()
        _status = self.dll.niHSDIO_InitAcquisitionSession(
            ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), ViConstString(optionString), byref(vi)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(vi.value)

    def _InitGenerationSession(self, resourceName, IDQuery, resetDevice, optionString):
        vi = ViSession()
        _status = self.dll.niHSDIO_InitGenerationSession(
            ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), ViConstString(optionString), byref(vi)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(vi.value)

    def _close(self, vi):
        _status = self.dll.niHSDIO_close(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.niHSDIO_LockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.niHSDIO_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def Initiate(self, vi):
        _status = self.dll.niHSDIO_Initiate(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Abort(self, vi):
        _status = self.dll.niHSDIO_Abort(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CommitStatic(self, vi):
        _status = self.dll.niHSDIO_CommitStatic(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CommitDynamic(self, vi):
        _status = self.dll.niHSDIO_CommitDynamic(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaitUntilDone(self, vi, maxTime):
        _status = self.dll.niHSDIO_WaitUntilDone(ViSession(vi), ViInt32(maxTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IsDone(self, vi):
        done = ViBoolean()
        _status = self.dll.niHSDIO_IsDone(ViSession(vi), byref(done))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(done.value)

    def TristateChannels(self, vi, channelList, tristate):
        _status = self.dll.niHSDIO_TristateChannels(ViSession(vi), ViConstString(channelList), ViBoolean(tristate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AssignStaticChannels(self, vi, channelList):
        _status = self.dll.niHSDIO_AssignStaticChannels(ViSession(vi), ViConstString(channelList))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WriteStaticU32(self, vi, writeData, channelMask):
        _status = self.dll.niHSDIO_WriteStaticU32(ViSession(vi), ViUInt32(writeData), ViUInt32(channelMask))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadStaticU32(self, vi):
        data = ViUInt32()
        _status = self.dll.niHSDIO_ReadStaticU32(ViSession(vi), byref(data))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(data.value)

    def WriteStaticPFIU32(self, vi, writeData, channelMask):
        _status = self.dll.niHSDIO_WriteStaticPFIU32(ViSession(vi), ViUInt32(writeData), ViUInt32(channelMask))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadStaticPFIU32(self, vi):
        data = ViUInt32()
        _status = self.dll.niHSDIO_ReadStaticPFIU32(ViSession(vi), byref(data))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(data.value)

    def ConfigureDataVoltageLogicFamily(self, vi, channelList, logicFamily):
        _status = self.dll.niHSDIO_ConfigureDataVoltageLogicFamily(
            ViSession(vi), ViConstString(channelList), ViInt32(logicFamily)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDataVoltageCustomLevels(self, vi, channelList, lowLevel, highLevel):
        _status = self.dll.niHSDIO_ConfigureDataVoltageCustomLevels(
            ViSession(vi), ViConstString(channelList), ViReal64(lowLevel), ViReal64(highLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerVoltageLogicFamily(self, vi, logicFamily):
        _status = self.dll.niHSDIO_ConfigureTriggerVoltageLogicFamily(ViSession(vi), ViInt32(logicFamily))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerVoltageCustomLevels(self, vi, lowLevel, highLevel):
        _status = self.dll.niHSDIO_ConfigureTriggerVoltageCustomLevels(
            ViSession(vi), ViReal64(lowLevel), ViReal64(highLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEventVoltageLogicFamily(self, vi, logicFamily):
        _status = self.dll.niHSDIO_ConfigureEventVoltageLogicFamily(ViSession(vi), ViInt32(logicFamily))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEventVoltageCustomLevels(self, vi, lowLevel, highLevel):
        _status = self.dll.niHSDIO_ConfigureEventVoltageCustomLevels(
            ViSession(vi), ViReal64(lowLevel), ViReal64(highLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRefClock(self, vi, clockSource, clockRate):
        _status = self.dll.niHSDIO_ConfigureRefClock(ViSession(vi), ViConstString(clockSource), ViReal64(clockRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSampleClock(self, vi, clockSource, clockRate):
        _status = self.dll.niHSDIO_ConfigureSampleClock(ViSession(vi), ViConstString(clockSource), ViReal64(clockRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDataPosition(self, vi, channelList, position):
        _status = self.dll.niHSDIO_ConfigureDataPosition(ViSession(vi), ViConstString(channelList), ViInt32(position))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDataPositionDelay(self, vi, channelList, delay):
        _status = self.dll.niHSDIO_ConfigureDataPositionDelay(
            ViSession(vi), ViConstString(channelList), ViReal64(delay)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AdjustSampleClockRelativeDelay(self, vi, adjustmentTime):
        _status = self.dll.niHSDIO_AdjustSampleClockRelativeDelay(ViSession(vi), ViReal64(adjustmentTime))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SendSoftwareEdgeTrigger(self, vi, triggerName, triggerIdentifier):
        _status = self.dll.niHSDIO_SendSoftwareEdgeTrigger(
            ViSession(vi), ViInt32(triggerName), ViConstString(triggerIdentifier)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDigitalLevelPauseTrigger(self, vi, source, level):
        _status = self.dll.niHSDIO_ConfigureDigitalLevelPauseTrigger(
            ViSession(vi), ViConstString(source), ViInt32(level)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DisablePauseTrigger(self, vi):
        _status = self.dll.niHSDIO_DisablePauseTrigger(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternMatchPauseTrigger(self, vi, channelList, pattern, triggerWhen):
        _status = self.dll.niHSDIO_ConfigurePatternMatchPauseTrigger(
            ViSession(vi), ViConstString(channelList), ViConstString(pattern), ViInt32(triggerWhen)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternMatchPauseTriggerU32(self, vi, channelList, pattern, triggerWhen):
        _status = self.dll.niHSDIO_ConfigurePatternMatchPauseTriggerU32(
            ViSession(vi), ViConstString(channelList), ViUInt32(pattern), ViInt32(triggerWhen)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDigitalEdgeScriptTrigger(self, vi, triggerID, source, edge):
        _status = self.dll.niHSDIO_ConfigureDigitalEdgeScriptTrigger(
            ViSession(vi), ViConstString(triggerID), ViConstString(source), ViInt32(edge)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDigitalLevelScriptTrigger(self, vi, triggerID, source, level):
        _status = self.dll.niHSDIO_ConfigureDigitalLevelScriptTrigger(
            ViSession(vi), ViConstString(triggerID), ViConstString(source), ViInt32(level)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DisableScriptTrigger(self, vi, triggerID):
        _status = self.dll.niHSDIO_DisableScriptTrigger(ViSession(vi), ViConstString(triggerID))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSoftwareScriptTrigger(self, vi, triggerID):
        _status = self.dll.niHSDIO_ConfigureSoftwareScriptTrigger(ViSession(vi), ViConstString(triggerID))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDigitalEdgeStartTrigger(self, vi, source, edge):
        _status = self.dll.niHSDIO_ConfigureDigitalEdgeStartTrigger(ViSession(vi), ViConstString(source), ViInt32(edge))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DisableStartTrigger(self, vi):
        _status = self.dll.niHSDIO_DisableStartTrigger(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSoftwareStartTrigger(self, vi):
        _status = self.dll.niHSDIO_ConfigureSoftwareStartTrigger(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternMatchStartTrigger(self, vi, channelList, pattern, triggerWhen):
        _status = self.dll.niHSDIO_ConfigurePatternMatchStartTrigger(
            ViSession(vi), ViConstString(channelList), ViConstString(pattern), ViInt32(triggerWhen)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternMatchStartTriggerU32(self, vi, channelList, pattern, triggerWhen):
        _status = self.dll.niHSDIO_ConfigurePatternMatchStartTriggerU32(
            ViSession(vi), ViConstString(channelList), ViUInt32(pattern), ViInt32(triggerWhen)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMultiSamplePatternMatchStartTrigger(self, vi, channelList, pattern):
        _status = self.dll.niHSDIO_ConfigureMultiSamplePatternMatchStartTrigger(
            ViSession(vi), ViConstString(channelList), ViConstString(pattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMultiSamplePatternMatchStartTriggerU32(self, vi, channelList, numberOfPatterns):
        patternArray = ARRAY_ViUInt32(numberOfPatterns)
        _status = self.dll.niHSDIO_ConfigureMultiSamplePatternMatchStartTriggerU32(
            ViSession(vi), ViConstString(channelList), patternArray, ViInt32(numberOfPatterns)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return patternArray

    def ConfigureDigitalEdgeAdvanceTrigger(self, vi, source, edge):
        _status = self.dll.niHSDIO_ConfigureDigitalEdgeAdvanceTrigger(
            ViSession(vi), ViConstString(source), ViInt32(edge)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DisableAdvanceTrigger(self, vi):
        _status = self.dll.niHSDIO_DisableAdvanceTrigger(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSoftwareAdvanceTrigger(self, vi):
        _status = self.dll.niHSDIO_ConfigureSoftwareAdvanceTrigger(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternMatchAdvanceTrigger(self, vi, channelList, pattern, triggerWhen):
        _status = self.dll.niHSDIO_ConfigurePatternMatchAdvanceTrigger(
            ViSession(vi), ViConstString(channelList), ViConstString(pattern), ViInt32(triggerWhen)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternMatchAdvanceTriggerU32(self, vi, channelList, pattern, triggerWhen):
        _status = self.dll.niHSDIO_ConfigurePatternMatchAdvanceTriggerU32(
            ViSession(vi), ViConstString(channelList), ViUInt32(pattern), ViInt32(triggerWhen)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMultiSamplePatternMatchAdvanceTrigger(self, vi, channelList, pattern):
        _status = self.dll.niHSDIO_ConfigureMultiSamplePatternMatchAdvanceTrigger(
            ViSession(vi), ViConstString(channelList), ViConstString(pattern)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMultiSamplePatternMatchAdvanceTriggerU32(self, vi, channelList, numberOfPatterns):
        patternArray = ARRAY_ViUInt32(numberOfPatterns)
        _status = self.dll.niHSDIO_ConfigureMultiSamplePatternMatchAdvanceTriggerU32(
            ViSession(vi), ViConstString(channelList), patternArray, ViInt32(numberOfPatterns)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return patternArray

    def ConfigureDigitalEdgeRefTrigger(self, vi, source, edge, pretriggerSamples):
        _status = self.dll.niHSDIO_ConfigureDigitalEdgeRefTrigger(
            ViSession(vi), ViConstString(source), ViInt32(edge), ViInt32(pretriggerSamples)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DisableRefTrigger(self, vi):
        _status = self.dll.niHSDIO_DisableRefTrigger(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSoftwareRefTrigger(self, vi, pretriggerSamples):
        _status = self.dll.niHSDIO_ConfigureSoftwareRefTrigger(ViSession(vi), ViInt32(pretriggerSamples))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternMatchRefTrigger(self, vi, channelList, pattern, triggerWhen, pretrigSamples):
        _status = self.dll.niHSDIO_ConfigurePatternMatchRefTrigger(
            ViSession(vi),
            ViConstString(channelList),
            ViConstString(pattern),
            ViInt32(triggerWhen),
            ViInt32(pretrigSamples),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternMatchRefTriggerU32(self, vi, channelList, pattern, triggerWhen, pretrigSamples):
        _status = self.dll.niHSDIO_ConfigurePatternMatchRefTriggerU32(
            ViSession(vi), ViConstString(channelList), ViUInt32(pattern), ViInt32(triggerWhen), ViInt32(pretrigSamples)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMultiSamplePatternMatchRefTrigger(self, vi, channelList, pattern, pretrigSamples):
        _status = self.dll.niHSDIO_ConfigureMultiSamplePatternMatchRefTrigger(
            ViSession(vi), ViConstString(channelList), ViConstString(pattern), ViInt32(pretrigSamples)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMultiSamplePatternMatchRefTriggerU32(self, vi, channelList, numberOfPatterns, pretrigSamples):
        patternArray = ARRAY_ViUInt32(numberOfPatterns)
        _status = self.dll.niHSDIO_ConfigureMultiSamplePatternMatchRefTriggerU32(
            ViSession(vi), ViConstString(channelList), patternArray, ViInt32(numberOfPatterns), ViInt32(pretrigSamples)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return patternArray

    def ConfigureDigitalEdgeStopTrigger(self, vi, source, edge):
        _status = self.dll.niHSDIO_ConfigureDigitalEdgeStopTrigger(ViSession(vi), ViConstString(source), ViInt32(edge))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DisableStopTrigger(self, vi):
        _status = self.dll.niHSDIO_DisableStopTrigger(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSoftwareStopTrigger(self, vi):
        _status = self.dll.niHSDIO_ConfigureSoftwareStopTrigger(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ExportSignal(self, vi, signal, signalIdentifier, outputTerminal):
        _status = self.dll.niHSDIO_ExportSignal(
            ViSession(vi), ViInt32(signal), ViConstString(signalIdentifier), ViConstString(outputTerminal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AssignDynamicChannels(self, vi, channelList):
        _status = self.dll.niHSDIO_AssignDynamicChannels(ViSession(vi), ViConstString(channelList))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AllocateNamedWaveform(self, vi, waveformName, sizeInSamples):
        _status = self.dll.niHSDIO_AllocateNamedWaveform(
            ViSession(vi), ViConstString(waveformName), ViInt32(sizeInSamples)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DeleteNamedWaveform(self, vi, waveformName):
        _status = self.dll.niHSDIO_DeleteNamedWaveform(ViSession(vi), ViConstString(waveformName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WriteNamedWaveformU32(self, vi, waveformName, samplesToWrite, data):
        _data = ARRAY_ViUInt32(samplesToWrite)
        _data[:] = data
        _status = self.dll.niHSDIO_WriteNamedWaveformU32(
            ViSession(vi), ViConstString(waveformName), ViInt32(samplesToWrite), _data
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return data

    def WriteNamedWaveformU16(self, vi, waveformName, samplesToWrite, data):
        _data = ARRAY_ViUInt16(samplesToWrite)
        _data[:] = data
        _status = self.dll.niHSDIO_WriteNamedWaveformU16(
            ViSession(vi), ViConstString(waveformName), ViInt32(samplesToWrite), _data
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return data

    def WriteNamedWaveformU8(self, vi, waveformName, samplesToWrite, data):
        _data = ARRAY_ViUInt8(samplesToWrite)
        _data[:] = data
        _status = self.dll.niHSDIO_WriteNamedWaveformU8(
            ViSession(vi), ViConstString(waveformName), ViInt32(samplesToWrite), _data
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return data

    def WriteNamedWaveformWDT(self, vi, waveformName, samplesPerChannel, dataLayout, data):
        _data = ARRAY_ViUInt8(samplesPerChannel)
        _data[:] = data
        _status = self.dll.niHSDIO_WriteNamedWaveformWDT(
            ViSession(vi), ViConstString(waveformName), ViInt32(samplesPerChannel), ViInt32(dataLayout), _data
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return data

    def WriteNamedWaveformFromFileHWS(self, vi, waveformName, filePath, useRateFromWaveform):
        waveformSizeInSamples = ViInt32()
        _status = self.dll.niHSDIO_WriteNamedWaveformFromFileHWS(
            ViSession(vi),
            ViConstString(waveformName),
            ViConstString(filePath),
            ViBoolean(useRateFromWaveform),
            byref(waveformSizeInSamples),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(waveformSizeInSamples.value)

    def ConfigureGenerationMode(self, vi, generationMode):
        _status = self.dll.niHSDIO_ConfigureGenerationMode(ViSession(vi), ViInt32(generationMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGenerationRepeat(self, vi, repeatMode, repeatCount):
        _status = self.dll.niHSDIO_ConfigureGenerationRepeat(ViSession(vi), ViInt32(repeatMode), ViInt32(repeatCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WriteScript(self, vi, script):
        _status = self.dll.niHSDIO_WriteScript(ViSession(vi), ViConstString(script))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWaveformToGenerate(self, vi, waveformName):
        _status = self.dll.niHSDIO_ConfigureWaveformToGenerate(ViSession(vi), ViConstString(waveformName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureScriptToGenerate(self, vi, scriptName):
        _status = self.dll.niHSDIO_ConfigureScriptToGenerate(ViSession(vi), ViConstString(scriptName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureInitialState(self, vi, channelList, initialState):
        _status = self.dll.niHSDIO_ConfigureInitialState(
            ViSession(vi), ViConstString(channelList), ViConstString(initialState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureInitialStateU32(self, vi, initialState):
        _status = self.dll.niHSDIO_ConfigureInitialStateU32(ViSession(vi), ViUInt32(initialState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureIdleState(self, vi, channelList, idleState):
        _status = self.dll.niHSDIO_ConfigureIdleState(
            ViSession(vi), ViConstString(channelList), ViConstString(idleState)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureIdleStateU32(self, vi, idleState):
        _status = self.dll.niHSDIO_ConfigureIdleStateU32(ViSession(vi), ViUInt32(idleState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetNamedWaveformNextWritePosition(self, vi, waveformName, relativeTo, offset):
        _status = self.dll.niHSDIO_SetNamedWaveformNextWritePosition(
            ViSession(vi), ViConstString(waveformName), ViInt32(relativeTo), ViInt32(offset)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAcquisitionSize(self, vi, samplesPerRecord, numberOfRecords):
        _status = self.dll.niHSDIO_ConfigureAcquisitionSize(
            ViSession(vi), ViInt32(samplesPerRecord), ViInt32(numberOfRecords)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDataInterpretation(self, vi, channelList, dataInterpretation):
        _status = self.dll.niHSDIO_ConfigureDataInterpretation(
            ViSession(vi), ViConstString(channelList), ViInt32(dataInterpretation)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetFetchBacklog(self, vi, recordNumber):
        backlog = ViInt32()
        _status = self.dll.niHSDIO_GetFetchBacklog(ViSession(vi), ViInt32(recordNumber), byref(backlog))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(backlog.value)

    def FetchMultiRecordU32(self, vi, samplesToRead, maxTimeMilliseconds, startingRecord, numberOfRecords):
        data = ARRAY_ViUInt32(samplesToRead)
        wfmInfo = ARRAY_niHSDIO_wfmInfo(numberOfRecords)
        _status = self.dll.niHSDIO_FetchMultiRecordU32(
            ViSession(vi),
            ViInt32(samplesToRead),
            ViInt32(maxTimeMilliseconds),
            ViInt32(startingRecord),
            ViInt32(numberOfRecords),
            data,
            wfmInfo,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return data, wfmInfo

    def FetchMultiRecordU16(self, vi, samplesToRead, maxTimeMilliseconds, startingRecord, numberOfRecords):
        data = ARRAY_ViUInt16(samplesToRead)
        wfmInfo = ARRAY_niHSDIO_wfmInfo(numberOfRecords)
        _status = self.dll.niHSDIO_FetchMultiRecordU16(
            ViSession(vi),
            ViInt32(samplesToRead),
            ViInt32(maxTimeMilliseconds),
            ViInt32(startingRecord),
            ViInt32(numberOfRecords),
            data,
            wfmInfo,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return data, wfmInfo

    def FetchMultiRecordU8(self, vi, samplesToRead, maxTimeMilliseconds, startingRecord, numberOfRecords):
        data = ARRAY_ViUInt8(samplesToRead)
        wfmInfo = ARRAY_niHSDIO_wfmInfo(numberOfRecords)
        _status = self.dll.niHSDIO_FetchMultiRecordU8(
            ViSession(vi),
            ViInt32(samplesToRead),
            ViInt32(maxTimeMilliseconds),
            ViInt32(startingRecord),
            ViInt32(numberOfRecords),
            data,
            wfmInfo,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return data, wfmInfo

    def FetchWaveformU32(self, vi, samplesToRead, maxTimeMilliseconds):
        numberOfSamplesRead = ViInt32()
        data = ARRAY_ViUInt32(samplesToRead)
        _status = self.dll.niHSDIO_FetchWaveformU32(
            ViSession(vi), ViInt32(samplesToRead), ViInt32(maxTimeMilliseconds), byref(numberOfSamplesRead), data
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        numberOfSamplesRead = int(numberOfSamplesRead.value)
        return numberOfSamplesRead, data

    def FetchWaveformU16(self, vi, samplesToRead, maxTimeMilliseconds):
        numberOfSamplesRead = ViInt32()
        data = ARRAY_ViUInt16(samplesToRead)
        _status = self.dll.niHSDIO_FetchWaveformU16(
            ViSession(vi), ViInt32(samplesToRead), ViInt32(maxTimeMilliseconds), byref(numberOfSamplesRead), data
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        numberOfSamplesRead = int(numberOfSamplesRead.value)
        return numberOfSamplesRead, data

    def FetchWaveformU8(self, vi, samplesToRead, maxTimeMilliseconds):
        numberOfSamplesRead = ViInt32()
        data = ARRAY_ViUInt8(samplesToRead)
        _status = self.dll.niHSDIO_FetchWaveformU8(
            ViSession(vi), ViInt32(samplesToRead), ViInt32(maxTimeMilliseconds), byref(numberOfSamplesRead), data
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        numberOfSamplesRead = int(numberOfSamplesRead.value)
        return numberOfSamplesRead, data

    def FetchWaveformDirectDMA(self, vi, samplesToRead, maxTimeMilliseconds, bufferSize):
        bufferAddress = void()
        wfmInfo = niHSDIO_wfmInfo()
        offsetToFirstSample = ViUInt32()
        _status = self.dll.niHSDIO_FetchWaveformDirectDMA(
            ViSession(vi),
            ViInt32(samplesToRead),
            ViInt32(maxTimeMilliseconds),
            ViUInt32(bufferSize),
            byref(bufferAddress),
            byref(wfmInfo),
            byref(offsetToFirstSample),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        offsetToFirstSample = int(offsetToFirstSample.value)
        return bufferAddress, wfmInfo, offsetToFirstSample

    def ReadWaveformU32(self, vi, samplesToRead, maxTimeMilliseconds):
        numberOfSamplesRead = ViInt32()
        data = ARRAY_ViUInt32(samplesToRead)
        _status = self.dll.niHSDIO_ReadWaveformU32(
            ViSession(vi), ViInt32(samplesToRead), ViInt32(maxTimeMilliseconds), byref(numberOfSamplesRead), data
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        numberOfSamplesRead = int(numberOfSamplesRead.value)
        return numberOfSamplesRead, data

    def ReadWaveformU16(self, vi, samplesToRead, maxTimeMilliseconds):
        numberOfSamplesRead = ViInt32()
        data = ARRAY_ViUInt16(samplesToRead)
        _status = self.dll.niHSDIO_ReadWaveformU16(
            ViSession(vi), ViInt32(samplesToRead), ViInt32(maxTimeMilliseconds), byref(numberOfSamplesRead), data
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        numberOfSamplesRead = int(numberOfSamplesRead.value)
        return numberOfSamplesRead, data

    def ReadWaveformU8(self, vi, samplesToRead, maxTimeMilliseconds):
        numberOfSamplesRead = ViInt32()
        data = ARRAY_ViUInt8(samplesToRead)
        _status = self.dll.niHSDIO_ReadWaveformU8(
            ViSession(vi), ViInt32(samplesToRead), ViInt32(maxTimeMilliseconds), byref(numberOfSamplesRead), data
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        numberOfSamplesRead = int(numberOfSamplesRead.value)
        return numberOfSamplesRead, data

    def ReadMultiRecordU32(self, vi, samplesToRead, maxTimeMilliseconds, startingRecord, numberOfRecords):
        data = ARRAY_ViUInt32(samplesToRead)
        wfmInfo = ARRAY_niHSDIO_wfmInfo(numberOfRecords)
        _status = self.dll.niHSDIO_ReadMultiRecordU32(
            ViSession(vi),
            ViInt32(samplesToRead),
            ViInt32(maxTimeMilliseconds),
            ViInt32(startingRecord),
            ViInt32(numberOfRecords),
            data,
            wfmInfo,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return data, wfmInfo

    def ReadMultiRecordU16(self, vi, samplesToRead, maxTimeMilliseconds, startingRecord, numberOfRecords):
        data = ARRAY_ViUInt16(samplesToRead)
        wfmInfo = ARRAY_niHSDIO_wfmInfo(numberOfRecords)
        _status = self.dll.niHSDIO_ReadMultiRecordU16(
            ViSession(vi),
            ViInt32(samplesToRead),
            ViInt32(maxTimeMilliseconds),
            ViInt32(startingRecord),
            ViInt32(numberOfRecords),
            data,
            wfmInfo,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return data, wfmInfo

    def ReadMultiRecordU8(self, vi, samplesToRead, maxTimeMilliseconds, startingRecord, numberOfRecords):
        data = ARRAY_ViUInt8(samplesToRead)
        wfmInfo = ARRAY_niHSDIO_wfmInfo(numberOfRecords)
        _status = self.dll.niHSDIO_ReadMultiRecordU8(
            ViSession(vi),
            ViInt32(samplesToRead),
            ViInt32(maxTimeMilliseconds),
            ViInt32(startingRecord),
            ViInt32(numberOfRecords),
            data,
            wfmInfo,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return data, wfmInfo

    def HWC_FetchSampleErrors(self, vi, numSampleErrorsToRead, maxTimeMilliseconds):
        numSampleErrorsRead = ViInt32()
        sampleNumber = ARRAY_ViReal64(numSampleErrorsToRead)
        errorBits = ARRAY_ViUInt32(numSampleErrorsToRead)
        errorRepeatCount = ARRAY_ViInt32(numSampleErrorsToRead)
        reserved1 = ViUInt32()
        reserved2 = ViUInt32()
        _status = self.dll.niHSDIO_HWC_FetchSampleErrors(
            ViSession(vi),
            ViInt32(numSampleErrorsToRead),
            ViInt32(maxTimeMilliseconds),
            byref(numSampleErrorsRead),
            sampleNumber,
            errorBits,
            errorRepeatCount,
            byref(reserved1),
            byref(reserved2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        numSampleErrorsRead = int(numSampleErrorsRead.value)
        sampleNumber = list(sampleNumber)
        reserved1 = int(reserved1.value)
        reserved2 = int(reserved2.value)
        return numSampleErrorsRead, sampleNumber, errorBits, errorRepeatCount, reserved1, reserved2

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        _status = self.dll.niHSDIO_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(errorMessage)

    def GetError(self, vi, errorDescriptionBufferSize):
        errorCode = ViStatus()
        errorDescription = ARRAY_ViChar(errorDescriptionBufferSize)
        _status = self.dll.niHSDIO_GetError(
            ViSession(vi), byref(errorCode), ViInt32(errorDescriptionBufferSize), errorDescription
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorDescription = decode(errorDescription)
        return errorCode, errorDescription

    def ClearError(self, vi):
        _status = self.dll.niHSDIO_ClearError(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def reset(self, vi):
        _status = self.dll.niHSDIO_reset(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        _status = self.dll.niHSDIO_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def SelfCal(self, vi):
        _status = self.dll.niHSDIO_SelfCal(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetDevice(self, vi):
        _status = self.dll.niHSDIO_ResetDevice(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        _status = self.dll.niHSDIO_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        _status = self.dll.niHSDIO_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(bufSize)
        _status = self.dll.niHSDIO_GetAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(bufSize), value
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        _status = self.dll.niHSDIO_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        _status = self.dll.niHSDIO_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.niHSDIO_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.niHSDIO_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.niHSDIO_SetAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViConstString(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.niHSDIO_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.niHSDIO_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetAttribute(self, vi, channelName, attributeId):
        _status = self.dll.niHSDIO_ResetAttribute(ViSession(vi), ViConstString(channelName), ViAttr(attributeId))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def STPMU_SourceVoltage(self, vi, channelList, voltageLevel, sense, currentRange):
        _status = self.dll.niHSDIO_STPMU_SourceVoltage(
            ViSession(vi), ViConstString(channelList), ViReal64(voltageLevel), ViInt32(sense), ViReal64(currentRange)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def STPMU_SourceCurrent(
        self, vi, channelList, currentLevel, currentLevelRange, lowerVoltageLimit, upperVoltageLimit
    ):
        _status = self.dll.niHSDIO_STPMU_SourceCurrent(
            ViSession(vi),
            ViConstString(channelList),
            ViReal64(currentLevel),
            ViReal64(currentLevelRange),
            ViReal64(lowerVoltageLimit),
            ViReal64(upperVoltageLimit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def STPMU_DisablePMU(self, vi, channelList, returnState):
        _status = self.dll.niHSDIO_STPMU_DisablePMU(ViSession(vi), ViConstString(channelList), ViInt32(returnState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def STPMU_MeasureVoltage(self, vi, channelList, apertureTime, sense, bufSize=1024):
        measurements = ARRAY_ViReal64(bufSize)
        numberOfMeasurements = ViInt32()
        _status = self.dll.niHSDIO_STPMU_MeasureVoltage(
            ViSession(vi),
            ViConstString(channelList),
            ViReal64(apertureTime),
            ViInt32(sense),
            measurements,
            byref(numberOfMeasurements),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        measurements = list(measurements)
        numberOfMeasurements = int(numberOfMeasurements.value)
        return measurements, numberOfMeasurements

    def STPMU_MeasureCurrent(self, vi, channelList, apertureTime, bufSize=1024):
        measurements = ARRAY_ViReal64(bufSize)
        numberOfMeasurements = ViInt32()
        _status = self.dll.niHSDIO_STPMU_MeasureCurrent(
            ViSession(vi), ViConstString(channelList), ViReal64(apertureTime), measurements, byref(numberOfMeasurements)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        measurements = list(measurements)
        numberOfMeasurements = int(numberOfMeasurements.value)
        return measurements, numberOfMeasurements

    def STPMU_ExternalForceControl(self, vi, channelList, action, connector):
        _status = self.dll.niHSDIO_STPMU_ExternalForceControl(
            ViSession(vi), ViConstString(channelList), ViInt32(action), ViInt32(connector)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def STPMU_ExternalSenseControl(self, vi, channel, action, connector):
        _status = self.dll.niHSDIO_STPMU_ExternalSenseControl(
            ViSession(vi), ViConstString(channel), ViInt32(action), ViInt32(connector)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InitExtCal(self, resourceName, password):
        vi = ViSession()
        _status = self.dll.niHSDIO_InitExtCal(ViRsrc(resourceName), ViConstString(password), byref(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(vi.value)

    def CalConfigureDeviceState(self, vi, connector, calibrationType, calibrationReference):
        _status = self.dll.niHSDIO_CalConfigureDeviceState(
            ViSession(vi), ViInt32(connector), ViUInt32(calibrationType), ViUInt32(calibrationReference)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalConfigureChannelState(self, vi, channel, calibrationType, calibrationReference):
        _status = self.dll.niHSDIO_CalConfigureChannelState(
            ViSession(vi), ViConstString(channel), ViUInt32(calibrationType), ViUInt32(calibrationReference)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalAdjustViReal64(self, vi, channel, calibrationType, calibrationReference, value):
        _status = self.dll.niHSDIO_CalAdjustViReal64(
            ViSession(vi),
            ViConstString(channel),
            ViUInt32(calibrationType),
            ViUInt32(calibrationReference),
            ViReal64(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalAdjustViReal64Array(self, vi, channel, calibrationType, calibrationReference, numberOfValues):
        values = ARRAY_ViReal64(numberOfValues)
        _status = self.dll.niHSDIO_CalAdjustViReal64Array(
            ViSession(vi),
            ViConstString(channel),
            ViUInt32(calibrationType),
            ViUInt32(calibrationReference),
            ViInt32(numberOfValues),
            values,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return list(values)

    def CalClearState(self, vi):
        _status = self.dll.niHSDIO_CalClearState(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalInitChildSession(self, vi, sessionType):
        childSession = ViSession()
        _status = self.dll.niHSDIO_CalInitChildSession(ViSession(vi), ViUInt8(sessionType), byref(childSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(childSession.value)

    def CalCloseChildSession(self, vi, childSession):
        _status = self.dll.niHSDIO_CalCloseChildSession(ViSession(vi), ViSession(childSession))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalAdjustChannelVoltage(self, vi, channel):
        _status = self.dll.niHSDIO_CalAdjustChannelVoltage(ViSession(vi), ViConstString(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalAdjustChannelSkew(self, vi, channel):
        _status = self.dll.niHSDIO_CalAdjustChannelSkew(ViSession(vi), ViConstString(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CalAdjustTerminalSkew(self, vi, channel):
        _status = self.dll.niHSDIO_CalAdjustTerminalSkew(ViSession(vi), ViConstString(channel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetSelfCalSupported(self, vi):
        selfCalSupported = ViBoolean()
        _status = self.dll.niHSDIO_GetSelfCalSupported(ViSession(vi), byref(selfCalSupported))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(selfCalSupported.value)

    def GetSelfCalLastDateAndTime(self, vi):
        year = ViInt32()
        month = ViInt32()
        day = ViInt32()
        hour = ViInt32()
        minute = ViInt32()
        _status = self.dll.niHSDIO_GetSelfCalLastDateAndTime(
            ViSession(vi), byref(year), byref(month), byref(day), byref(hour), byref(minute)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        year = int(year.value)
        month = int(month.value)
        day = int(day.value)
        hour = int(hour.value)
        minute = int(minute.value)
        return year, month, day, hour, minute

    def GetExtCalLastDateAndTime(self, vi):
        year = ViInt32()
        month = ViInt32()
        day = ViInt32()
        hour = ViInt32()
        minute = ViInt32()
        _status = self.dll.niHSDIO_GetExtCalLastDateAndTime(
            ViSession(vi), byref(year), byref(month), byref(day), byref(hour), byref(minute)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        year = int(year.value)
        month = int(month.value)
        day = int(day.value)
        hour = int(hour.value)
        minute = int(minute.value)
        return year, month, day, hour, minute

    def GetSelfCalLastTemp(self, vi):
        temp = ViReal64()
        _status = self.dll.niHSDIO_GetSelfCalLastTemp(ViSession(vi), byref(temp))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(temp.value)

    def GetExtCalLastTemp(self, vi):
        temp = ViReal64()
        _status = self.dll.niHSDIO_GetExtCalLastTemp(ViSession(vi), byref(temp))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(temp.value)

    def ReadCurrentTemperature(self, vi):
        temp = ViReal64()
        _status = self.dll.niHSDIO_ReadCurrentTemperature(ViSession(vi), byref(temp))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(temp.value)

    def GetExtCalRecommendedInterval(self, vi):
        interval = ViInt32()
        _status = self.dll.niHSDIO_GetExtCalRecommendedInterval(ViSession(vi), byref(interval))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(interval.value)

    def ChangeExtCalPassword(self, vi, oldPassword, newPassword):
        _status = self.dll.niHSDIO_ChangeExtCalPassword(
            ViSession(vi), ViConstString(oldPassword), ViConstString(newPassword)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetCalUserDefinedInfo(self, vi, info):
        _status = self.dll.niHSDIO_SetCalUserDefinedInfo(ViSession(vi), ViConstString(info))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetCalUserDefinedInfo(self, vi, info):
        _status = self.dll.niHSDIO_GetCalUserDefinedInfo(ViSession(vi), ViString(info))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetCalUserDefinedInfoMaxSize(self, vi):
        infoSize = ViInt32()
        _status = self.dll.niHSDIO_GetCalUserDefinedInfoMaxSize(ViSession(vi), byref(infoSize))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(infoSize.value)

    def CloseExtCal(self, vi, action):
        _status = self.dll.niHSDIO_CloseExtCal(ViSession(vi), ViInt32(action))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RecordExtCalVerification(self, vi, password):
        _status = self.dll.niHSDIO_RecordExtCalVerification(ViSession(vi), ViConstString(password))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
