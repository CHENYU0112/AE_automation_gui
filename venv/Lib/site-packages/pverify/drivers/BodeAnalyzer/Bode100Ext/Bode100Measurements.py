from __future__ import annotations

from . import Bode100Enums, Bode100Measurement


class Bode100Measurements(list):
    def __init__(self, BodeDoc):
        super().__init__()
        self.Enums = Bode100Enums
        self._BodeDoc = BodeDoc

    def AddSingleFrequencyMeasurement(self, measMode):
        """
        Adds a single frequency measurement to the MeasurementCollection.

        :param measMode: This parameter defines the measurement mode for the added measurement.
                         Gain/Phase, Impedance, Admittance or Reflection measurement.
        :type measMode: Bode100Enums.MeasurementMode
        :rtype: Bode100Measurement.Bode100Measurement
        """
        measurementObj = Bode100Measurement.Bode100Measurement(
            self._BodeDoc,
            self._BodeDoc.Measurements.AddSingleFrequencyMeasurement(measMode),
        )
        self.append(measurementObj)
        return measurementObj

    def AddFrequencySweepMeasurement(self):
        """
        Adds a frequency sweep measurement to the MeasurementCollection.
        To define the measurement mode of the added frequency sweep measurement, set the MeasurementType Property.

        :rtype: Bode100Measurement.Bode100Measurement
        """
        measurementObj = Bode100Measurement.Bode100Measurement(
            self._BodeDoc, self._BodeDoc.Measurements.AddFrequencySweepMeasurement()
        )
        self.append(measurementObj)
        return measurementObj

    def AddFrequencySweepExtCouplerMeasurement(self):
        """
        Adds a frequency sweep measurement to the MeasurementCollection.
        To define the measurement mode of the added frequency sweep (external coupler) measurement,
        set the MeasurementType Property.

        :rtype: Bode100Measurement.Bode100Measurement
        """
        measurementObj = Bode100Measurement.Bode100Measurement(
            self._BodeDoc,
            self._BodeDoc.Measurements.AddFrequencySweepExtCouplerMeasurement(),
        )
        self.append(measurementObj)
        return measurementObj

    def AddFrequencySweepImpAdapterMeasurement(self):
        """
        Adds a frequency sweep (impedance adapter) measurement to the MeasurementCollection.
        To define the measurement mode of the added frequency sweep (impedance adapter) measurement,
        set the MeasurementType Property.

        :rtype: Bode100Measurement.Bode100Measurement
        """
        measurementObj = Bode100Measurement.Bode100Measurement(
            self._BodeDoc,
            self._BodeDoc.Measurements.AddFrequencySweepImpAdapterMeasurement(),
        )
        self.append(measurementObj)
        return measurementObj

    def Clear(self):
        """
        Removes all objects from the Collection instance.
        """
        for _i in range(len(self)):
            self.pop()

    def SetMaxMeasurementsToDefault(self):
        """
        Sets the number of allowed measurements to the default value.
        The number of allowed measurements is 20 by default. You can change the maximum number of measurements
        via the MaxMeasurements Property.
        """
        self._BodeDoc.Measurements.SetMaxMeasurementsToDefault()

    @property
    def Count(self):
        """
        Gets the number of elements contained in the measurement collection.
        """
        return self.__len__()

    def Item(self, Index):
        """
        Returns the member of the collection identified by the Key parameter.

        :rtype: Bode100Measurement.Bode100Measurement
        """
        return self[Index]

    @property
    def MaxMeasurements(self):
        """
        The default number of allowed measurements is 20. You can set the default value by using the SetMaxMeasurementsToDefault Method.
        """
        return self._BodeDoc.Measurements.MaxMeasurements

    @MaxMeasurements.setter
    def MaxMeasurements(self, value):
        """
        The default number of allowed measurements is 20. You can set the default value by using the SetMaxMeasurementsToDefault Method.
        """
        self._BodeDoc.Measurements.MaxMeasurements = int(value)
