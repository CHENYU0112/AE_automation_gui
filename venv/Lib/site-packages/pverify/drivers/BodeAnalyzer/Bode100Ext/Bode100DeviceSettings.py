from __future__ import annotations

from . import Bode100Channel, Bode100Enums, Bode100Receiver, Bode100Source


class Bode100DeviceSettings:
    def __init__(self, BodeDoc, MeasurementObj):
        self.Enums = Bode100Enums
        self._BodeDoc = BodeDoc
        self._MeasurementObj = MeasurementObj

        self.Receivers = [
            Bode100Receiver.Bode100Receiver(self._BodeDoc, self._MeasurementObj, 0),
            Bode100Receiver.Bode100Receiver(self._BodeDoc, self._MeasurementObj, 1),
        ]
        """:type : list[Bode100Receiver.Bode100Receiver]"""

        self.Channels = [
            Bode100Channel.Bode100Channel(self._BodeDoc, self._MeasurementObj, 0),
            Bode100Channel.Bode100Channel(self._BodeDoc, self._MeasurementObj, 1),
        ]
        """:type : list[Bode100Channel.Bode100Channel]"""

        self.Sources = [Bode100Source.Bode100Sources(self._BodeDoc, self._MeasurementObj)]
        """:type : list[Bode100Source.Bode100Source] | Bode100Source.Bode100Sources"""

    @property
    def Bandwidth(self):
        return float(self._MeasurementObj.DeviceSettings.Bandwidth)

    @Bandwidth.setter
    def Bandwidth(self, value):
        """
        Gets or sets the receiver bandwidth.
        """
        self._MeasurementObj.DeviceSettings.Bandwidth = float(value)

    @property
    def DUTDelay(self):
        return float(self._MeasurementObj.DeviceSettings.DUTDelay)

    @DUTDelay.setter
    def DUTDelay(self, value):
        """
        Gets or sets the device under test delay.
        """
        self._MeasurementObj.DeviceSettings.DUTDelay = float(value)
