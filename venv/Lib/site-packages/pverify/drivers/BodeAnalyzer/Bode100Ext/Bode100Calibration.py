from __future__ import annotations

from . import Bode100Enums


class Bode100Calibration:
    def __init__(self, BodeDoc, CalibrationObj):
        self.Enums = Bode100Enums
        self._BodeDoc = BodeDoc
        self._CalibrationObj = CalibrationObj

    @property
    def ExtrapolationActive(self):
        """
        Returns if the extrapolation mode of the probe calibration is active or not.

        Note: The user calibration always returns false because neither extrapolation nor interpolation will be used.

        Note: When a probe calibration is executed while the start and stop frequency are above 10 Hz the calibration
        is performed for the frequency range from 10 Hz - 40 MHz.
        The calibration factors for the used measurement frequencies are calculated via interpolation.

        If afterwards one or both frequencies are decreased below 10 Hz the above mentioned calibration is used to
        calculate calibration factors for all frequencies below 10 Hz via extrapolation (ExtrapolationActive property
        is true). For all measurement frequencies above 10 Hz the calibration factors are calculated via interpolation
        as usual.  If the extrapolation for frequencies below 10 Hz has to be avoided the probe calibration needs to
        be executed again with at least one frequency (start or stop) set to a value below 10 Hz.

        When a probe calibration is executed while the start or stop frequency is below 10 Hz the calibration is
        performed for the frequency range from 1 Hz - 40 MHz. In this case all calibration factors for the used
        measurement frequencies are calculated via interpolation no matter to what values the start and stop frequency
        are set after the calibration has been performed. (ExtrapolationActive property is false).
        """
        return bool(self._CalibrationObj.ExtrapolationActive)

    @property
    def GainPhaseAvailable(self):
        """
        Gets a value indicating whether the Gain/Phase calibration was performed and is valid.

        This property returns true if valid calibration data is available, otherwise it returns false. If no valid calibration data is present, call the ExecuteGainPhase Method.
        """
        return bool(self._CalibrationObj.GainPhaseAvailable)

    @property
    def GainPhaseEnabled(self):
        return bool(self._CalibrationObj.GainPhaseEnabled)

    @GainPhaseEnabled.setter
    def GainPhaseEnabled(self, value):
        """
        Gets or sets a value indicating whether the Gain/Phase calibration is turned on or off.

        The Gain/Phase calibration can only be turned on if valid calibration data is available
        (GainPhaseAvailable Property is true).

        Hint: If a probe- and user-calibration is enabled at the same time the user calibration will
        be taken because it leads to more exact measurement results.
        """
        self._CalibrationObj.GainPhaseEnabled = bool(value)

    @property
    def ImpedanceAvailable(self):
        """
        Gets a value indicating whether the Impedance calibration was performed and is valid.

        This property returns true if valid calibration data is available, otherwise it returns false.
        If no valid calibration data is present, call all or one of the following methods:

            - ExecuteImpLoad Method
            - ExecuteImpOpen Method
            - ExecuteImpShort Method

        """
        return bool(self._CalibrationObj.ImpedanceAvailable)

    @property
    def ImpedanceEnabled(self):
        return bool(self._CalibrationObj.ImpedanceEnabled)

    @ImpedanceEnabled.setter
    def ImpedanceEnabled(self, value):
        """
        Gets or sets a value indicating whether the Impedance calibration is turned on or off.

        Setting this property to true means that the impedance calibration is activated.

        The Impedance calibration can only be turned on if valid calibration data is available (ImpedanceAvailable Property is true).
        """
        self._CalibrationObj.ImpedanceEnabled = bool(value)

    @property
    def LoadAvailable(self):
        """
        Gets a value indicating whether the Impedance Load calibration was performed and is valid.

        This property returns true if valid calibration data is available, otherwise it returns false.
        If no valid calibration data is present, call the ExecuteImpLoad Method.
        """
        return bool(self._CalibrationObj.LoadAvailable)

    @property
    def OpenAvailable(self):
        """
        Gets a value indicating whether the Impedance Open calibration was performed and is valid.

        This property returns true if valid calibration data is available, otherwise it returns false.
        If no valid calibration data is present, call the ExecuteImpOpen Method.
        """
        return bool(self._CalibrationObj.OpenAvailable)

    @property
    def RLoad(self):
        return float(self._CalibrationObj.RLoad)

    @RLoad.setter
    def RLoad(self, value):
        """
        Gets or sets the value of the load resistor.

        The value has the unit Ohm
        """
        self._CalibrationObj.RLoad = float(value)

    @property
    def ShortAvailable(self):
        """
        Gets a value indicating whether the Impedance Short calibration was performed and is valid.

        This property returns true if valid calibration data is available, otherwise it returns false.
        If no valid calibration data is present, call the ExecuteImpShort Method.
        """
        return bool(self._CalibrationObj.ShortAvailable)

    @property
    def ShortDelayTime(self):
        """
        Gets or sets the value of the short delay time.

        The value has the unit s.

        The short delay time should be in the range of

            - Minimum: 0.0s
            - Maximum: 5.0ns

        """
        return bool(self._CalibrationObj.ShortDelayTime)

    def ExecuteGainPhase(self):
        """
        Performs the Gain/Phase calibration.

        This method performs the Gain/Phase calibration and automatically enables the Gain/Phase calibration.

        Note: The Available property is set to true too.
        """
        self._CalibrationObj.ExecuteGainPhase()

    def ExecuteImpLoad(self):
        """
        Performs the Impedance Load calibration.

        This method performs the Impedance Load calibration and automatically sets the LoadAvailable Property to true.

        If the OpenAvailable and ShortAvailable are true too, the ImpedanceAvailable and
        ImpedanceEnabled are set to true.
        """
        self._CalibrationObj.ExecuteImpLoad()

    def ExecuteImpOpen(self):
        """
        Performs the Impedance Open calibration.

        This method performs the Impedance Open calibration and automatically sets the OpenAvailable Property to true.

        If the ShortAvailable Property and LoadAvailable Property are true too, the ImpedanceAvailable and
        ImpedanceEnabled are set to true.
        """
        self._CalibrationObj.ExecuteImpOpen()

    def ExecuteImpShort(self):
        """
        Performs the Impedance Short calibration.

        This method performs the Impedance Short calibration and automatically sets the ShortAvailable Property to true.

        If the OpenAvailable Property and LoadAvailable Property are true too, the ImpedanceAvailable and
        ImpedanceEnabled are set to true.
        """
        self._CalibrationObj.ExecuteImpShort()
