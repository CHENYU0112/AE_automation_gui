from __future__ import annotations

from numpy import array

from . import Bode100Enums


class Bode100SingleFrequencySettings:
    def __init__(self, BodeDoc, MeasurementObj):
        self.Enums = Bode100Enums
        self._BodeDoc = BodeDoc
        self._MeasurementObj = MeasurementObj

    @property
    def Level(self):
        return float(self._MeasurementObj.SingleFrequencySettings.Level)

    @Level.setter
    def Level(self, value):
        """
        Gets or sets the measurement source level.
        The value has the unit dBm.

        The levels should be in the range of

            - Minimum: -27 dBm
            - Maximum: 13 dBm

        :rtype: float
        """
        self._MeasurementObj.SingleFrequencySettings.Level = float(value)

    @property
    def ReferenceResistance(self):
        return float(self._MeasurementObj.SingleFrequencySettings.ReferenceResistance)

    @ReferenceResistance.setter
    def ReferenceResistance(self, value):
        """
        Gets or sets the reference resistance value.
        The value has the unit Ohm.

        Comment: This property is only available in the impedance mode and not in the Gain/Phase mode.
        """
        self._MeasurementObj.SingleFrequencySettings.ReferenceResistance = float(value)

    @property
    def SourceFrequency(self):
        return float(self._MeasurementObj.SingleFrequencySettings.SourceFrequency)

    @SourceFrequency.setter
    def SourceFrequency(self, value):
        """
        Gets or sets the measurement frequency.
        The value has the unit Hz.
        """
        self._MeasurementObj.SingleFrequencySettings.SourceFrequency = float(value)


class Bode100FrequencySweepSettings:
    def __init__(self, BodeDoc, MeasurementObj):
        self.Enums = Bode100Enums
        self._BodeDoc = BodeDoc
        self._MeasurementObj = MeasurementObj

    @property
    def MaxFrequency(self):
        """
        Gets the maximum possible frequency. (40 MHz)
        """
        return float(self._MeasurementObj.FrequencySweepSettings.MaxFrequency)

    @property
    def MinFrequency(self):
        """
        Gets the minimum possible frequency. (1 Hz)
        """
        return float(self._MeasurementObj.FrequencySweepSettings.MinFrequency)

    @property
    def Level(self):
        return float(self._MeasurementObj.SingleFrequencySettings.Level)

    @Level.setter
    def Level(self, value):
        """
        Gets or sets the current level.
        This property takes effect only if UseShapedLevel is set to false.
        If you want to use level shaping instead, you have to set a valid bundle of shaped levels first
        (see AddShapedLevel for further information).

        The levels should be in the range of

            - Minimum: -27 dBm
            - Maximum: 13 dBm

        :rtype: float
        """
        self._MeasurementObj.FrequencySweepSettings.Level = float(value)

    @property
    def NumberOfPoints(self):
        return int(self._MeasurementObj.SingleFrequencySettings.NumberOfPoints)

    @NumberOfPoints.setter
    def NumberOfPoints(self, value):
        """
        Gets or sets the number of points for the frequency sweep measurement.

        The number of points should be in the range of

            - Minimum: 2
            - Maximum: 16501

        :rtype: int
        """
        self._MeasurementObj.FrequencySweepSettings.NumberOfPoints = int(value)

    @property
    def ReferenceResistance(self):
        return float(self._MeasurementObj.SingleFrequencySettings.ReferenceResistance)

    @ReferenceResistance.setter
    def ReferenceResistance(self, value):
        """
        Gets or sets the reference resistance value. The value has the unit Ohm.

        :rtype: float
        """
        self._MeasurementObj.FrequencySweepSettings.ReferenceResistance = float(value)

    @property
    def StartFrequency(self):
        return float(self._MeasurementObj.SingleFrequencySettings.StartFrequency)

    @StartFrequency.setter
    def StartFrequency(self, value):
        """
        Gets or sets the start frequency for the frequency sweep.
        The value has the unit Hz.

        The frequency should be in the range of

            - Minimum: 1 Hz
            - Maximum: 40 MHz

        :rtype: float
        """
        self._MeasurementObj.FrequencySweepSettings.StartFrequency = float(value)

    @property
    def StopFrequency(self):
        return float(self._MeasurementObj.SingleFrequencySettings.StopFrequency)

    @StopFrequency.setter
    def StopFrequency(self, value):
        """
        Gets or sets the stop frequency for the frequency sweep.
        The value has the unit Hz.

        The frequency should be in the range of

            - Minimum: 1 Hz
            - Maximum: 40 MHz

        :rtype: float
        """
        self._MeasurementObj.FrequencySweepSettings.StopFrequency = float(value)

    @property
    def SweepMode(self):
        return int(self._MeasurementObj.SingleFrequencySettings.SweepMode)

    @SweepMode.setter
    def SweepMode(self, value):
        """
        Gets or sets the sweep mode for the frequency sweep. (Linear or logarithmic)

        :returns: type Bode100Enums.SweepMode
        :rtype: int
        """
        self._MeasurementObj.FrequencySweepSettings.SweepMode = int(value)

    @property
    def UnwrappedPhaseStartFrequency(self):
        return float(self._MeasurementObj.SingleFrequencySettings.UnwrappedPhaseStartFrequency)

    @UnwrappedPhaseStartFrequency.setter
    def UnwrappedPhaseStartFrequency(self, value):
        """
        Start frequency from which on the phase will be unwrapped.

        Using this property the frequency of the start point from which on the phase is unwrapped will be defined.
        This means that the phase will be displayed continuously (without any phase wrapping at +/- 180째)
        starting from the defined frequency if the UseUnwrappedPhaseStartFrequency Property is activated (set to true).
        The unwrapped phase result will be obtained via the ArgDegUnwrapped Property (phase in 째)
        and ArgRadUnwrapped Property (phase in rad) in the Result Object.

        By default the phase will be wrapped over the whole frequency range beginning from
        StartFrequency ending atStopFrequency.

        :rtype: float
        """
        self._MeasurementObj.FrequencySweepSettings.UnwrappedPhaseStartFrequency = float(value)

    @property
    def UnwrappedPhaseStopFrequency(self):
        return float(self._MeasurementObj.SingleFrequencySettings.UnwrappedPhaseStopFrequency)

    @UnwrappedPhaseStopFrequency.setter
    def UnwrappedPhaseStopFrequency(self, value):
        """
        Stop frequency from which on the phase will be wrapped again.

        Using this property the frequency of the stop point from which on the phase is wrapped again will be defined.
        This means that the phase will be displayed wrapped (with phase wrapping at +/- 180째)
        starting from the defined frequency if the UseUnwrappedPhaseStopFrequency Property is activated (set to true).
        The unwrapped phase result will be obtained via the ArgDegUnwrapped Property (phase in 째)
        and ArgRadUnwrapped Property (phase in rad) in the Result Object.

        By default the phase will be wrapped over the whole frequency range beginning from
        StartFrequency ending atStopFrequency.

        :rtype: float
        """
        self._MeasurementObj.FrequencySweepSettings.UnwrappedPhaseStopFrequency = float(value)

    @property
    def UseShapedLevel(self):
        return bool(self._MeasurementObj.SingleFrequencySettings.UseShapedLevel)

    @UseShapedLevel.setter
    def UseShapedLevel(self, value):
        """
        Enables/Disables the shaped level function.

        By using the shaped level function a user defined output level shape can be defined within the frequency
        sweep range. The shaped levels can be defined by calling the method AddShapedLevel.
        ClearShapedLevels can be used to remove all defined shaped level entries.
        If enabled the defined shaped levels are used.
        If no shaped levels are available the value defined in Level will be taken.

        :rtype: bool
        """
        self._MeasurementObj.FrequencySweepSettings.UseShapedLevel = bool(value)

    @property
    def UseUnwrappedPhaseStartFrequency(self):
        return bool(self._MeasurementObj.SingleFrequencySettings.UseUnwrappedPhaseStartFrequency)

    @UseUnwrappedPhaseStartFrequency.setter
    def UseUnwrappedPhaseStartFrequency(self, value):
        """
        Defines if the frequency in the UnwrappedPhaseStartFrequency Property will be used.

        For further information see UnwrappedPhaseStartFrequency Property "Remarks" section.

        :rtype: bool
        """
        self._MeasurementObj.FrequencySweepSettings.UseUnwrappedPhaseStartFrequency = bool(value)

    @property
    def UseUnwrappedPhaseStopFrequency(self):
        return bool(self._MeasurementObj.SingleFrequencySettings.UseUnwrappedPhaseStopFrequency)

    @UseUnwrappedPhaseStopFrequency.setter
    def UseUnwrappedPhaseStopFrequency(self, value):
        """
        Defines if the frequency in the UnwrappedPhaseStopFrequency Property will be used.

        For further information see UnwrappedPhaseStopFrequency Property "Remarks" section.

        :rtype: bool
        """
        self._MeasurementObj.FrequencySweepSettings.UseUnwrappedPhaseStopFrequency = bool(value)

    # ------------- Methods --------------- #

    def AddShapedLevel(self, freq, outputLeveldBm):
        """
        Adds a shaped level object to the shaped level collection.

        A shaped level object consists of a frequency and a level value.
        Only values in the predefined range can be added.
        Use the CalcShapedLevel Method to get a level value within the predefined level range.

        Note: The shaped levels will only be used when UseShapedLevel Property is set to true.

        :param freq: The frequency value in Hz.
        :type freq: float
        :param outputLeveldBm: The output level in dBm for the specified frequency.
        :type outputLeveldBm: float
        :return: Returns true if the level was added successfully, otherwise false.
        :rtype: bool
        """
        return bool(self._MeasurementObj.FrequencySweepSettings.AddShapedLevel(freq, outputLeveldBm))

    def CalcShapedLevel(self, checkLevel):
        """
        Checks if the passed parameter is a valid level and corrects it if necessary.

        :param checkLevel: Level in dBm to be checked.
        :return: The corrected level in dBm. If the value is within the valid value range the passed parameter will be returned.
        """
        return float(self._MeasurementObj.FrequencySweepSettings.CalcShapedLevel(float(checkLevel)))

    def ClearShapedLevels(self):
        """
        Removes all shaped level objects.
        """
        self._MeasurementObj.FrequencySweepSettings.ClearShapedLevels()

    def GetFrequencyRangeValue(self, Index):
        """
        Returns the defined frequency at a specified index.

        :param Index: The zero-based index of the frequency array.
        :return: The frequency at the specified index.
        """
        return float(self._MeasurementObj.FrequencySweepSettings.GetFrequencyRangeValue(int(Index)))

    def GetFrequencyRangeValues(self):
        """
        Returns all currently defined frequencies.

        You can get a single frequency at a specified index by using the GetFrequencyRangeValue Method.
        :rtype: multiarray.ndarray
        """
        return array(list(self._MeasurementObj.FrequencySweepSettings.GetFrequencyRangeValues()))

    def GetShapedFrequencyValues(self):
        """
        Returns a list of all available frequencies of the shaped level collection.

        To be used in combination with the method GetShapedLevelValues and GetShapedLevelSize.
        :rtype: multiarray.ndarray
        """
        return array(list(self._MeasurementObj.FrequencySweepSettings.GetShapedFrequencyValues()))

    def GetShapedLevelSize(self):
        """
        To be used in combination with the GetShapedLevelValues Method and GetShapedFreqValues.

        :return: The current size of the shaped level collection.
        """
        return int(self._MeasurementObj.FrequencySweepSettings.GetShapedLevelSize())

    def GetShapedLevelValues(self):
        """
        Returns a list of all available levels of the shaped level collection.

        To use in combination with the method  GetShapedFreqValues and GetShapedLevelSize Method.

        :rtype: multiarray.ndarray
        """
        return array(list(self._MeasurementObj.FrequencySweepSettings.GetShapedLevelValues))

    def RemoveFrequencyRangeValues(self, fromIndex, Count):
        """
        Removes a range of elements from the frequency array.

        The frequency collection must contain at least two frequencies.
        If this restriction is not fulfilled the frequencies cannot be deleted and the return value will be false.
        Also the fromIndex and the count parameter should not be less than zero.
        If the number of points to be removed will exceed the collection boundary all elements starting from
        fromIndex will be deleted.

        :param fromIndex: The zero-based starting index from where the frequencies should be removed.
        :type fromIndex: int
        :param Count: The number of elements to remove.
        :type Count: int
        :return: Returns true if the selected frequency range could be deleted, otherwise false.
        :rtype: bool
        """
        return bool(self._MeasurementObj.FrequencySweepSettings.RemoveFrequencyRangeValues(fromIndex, Count))

    def SetFrequencyRangeValue(self, Index, value):
        """
        Sets the frequency at a specified index.

        Note: If one of the following settings is changed

            - StartFrequency
            - StopFrequency
            - NumberOfPoints
            - SweepMode

        all frequencies will be recalculated and the user defined frequencies are lost.

        :param Index: The zero-based index of the user defined frequency
        :type Index: int
        :param value: The corresponding frequency.
        :type value: float | int
        :return: The frequency itself if the frequency is within the current range,
                 the recalculated frequency otherwise. The frequency range must be within MinFrequency and MaxFrequency.
                 Gaps between two following points will be interpolated linear or logarithmic
                 depending on the currently selected  SweepMode.
        :rtype: float
        """
        return float(self._MeasurementObj.FrequencySweepSettings.SetFrequencyRangeValue(int(Index), float(value)))

    def SetMeasurementTypeAdmittance(self):
        """
        Sets the current measurement type to admittance.
        """
        self._MeasurementObj.FrequencySweepSettings.SetMeasurementTypeAdmittance()

    def SetMeasurementTypeGain(self):
        """
        Sets the current measurement type to gain.

        The type gain can only be set in the frequency sweep mode.
        Setting the gain type in the external coupler or impedance adapter mode will result in an error.
        """
        self._MeasurementObj.FrequencySweepSettings.SetMeasurementTypeGain()

    def SetMeasurementTypeImpedance(self):
        """
        Sets the current measurement type to impedance.
        """
        self._MeasurementObj.FrequencySweepSettings.SetMeasurementTypeImpedance()

    def SetMeasurementTypeReflection(self):
        """
        Sets the current measurement type to reflection.
        """
        self._MeasurementObj.FrequencySweepSettings.SetMeasurementTypeReflection()
