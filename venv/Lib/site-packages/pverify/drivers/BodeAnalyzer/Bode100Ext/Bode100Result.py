# Dummy class for code completion
from __future__ import annotations


class Bode100Result:
    def __init__(self):
        pass

    @property
    def Abs(self):
        """
        Returns the magnitude of the result.

        :rtype: float
        """
        return 0

    @property
    def AbsDB(self):
        """
        Returns the magnitude in dB.

        :rtype: float
        """
        return 0

    @property
    def ArgDeg(self):
        """
        Returns the phase shift in degrees.

        :rtype: float
        """
        return 0

    @property
    def ArgDegUnwrapped(self):
        """
        Returns the unwrapped phase shift in degrees.
        There is also the possibility to define a start frequency  and a stop frequency reference point.
        These reference points are especially handy for unwrapping only a part of the phase curve.
        This is for example required if the phase curve is very noisy in the beginning (e.g. if a high pass filter
        is measured) and a "jumping" of the unwrapped phase curve due to this noise should be avoided.

        Hint:
            Once a start frequency and a stop frequency have been defined the activation and deactivation of
            these two anchor points can be easily handled by the UseUnwrappedPhaseStartFrequency Property and
            UseUnwrappedPhaseStopFrequency Property

        :rtype: float
        """
        return 0

    @property
    def ArgRad(self):
        """
        Returns the phase shift in radians.

        :rtype: float
        """
        return 0

    @property
    def ArgRadUnwrapped(self):
        """
        Returns the unwrapped phase shift in radians.

        For further information see the ArgDegUnwrapped property "Remarks" section.

        :rtype: float
        """
        return 0

    @property
    def Cp(self):
        """
        Returns the parallel capacitance of the result.

        This property just leads to expected results if you are measuring in the  Impedance Mode (Rs, Cs, Ls)
        or Admittance Mode (Rp, Cp, Lp). If you are in the Reflection or Gain mode NaN ("Not a Number") will be
        the result. But you have the possibility to  access Rs, Cs and Ls in admittance mode and vice versa.

        In the ResultsCollection a special double value representing NaN ("Not a Number") can be defined.

        :rtype: float
        """
        return 0

    @property
    def Cs(self):
        """
        Returns the series capacitance of the result.
        For further information see Cp Property "Remarks" section.

        :rtype: float
        """
        return 0

    @property
    def Frequency(self):
        """
        Returns the frequency in Hz at which the result has been measured.

        :rtype: float
        """
        return 0

    @property
    def Imag(self):
        """
        Returns the imaginary part of the result.

        :rtype: float
        """
        return 0

    @property
    def Lp(self):
        """
        Returns the parallel inductance of the result.
        For further information see Cp Property "Remarks" section.

        :rtype: float
        """
        return 0

    @property
    def Ls(self):
        """
        Returns the series inductance of the result.
        For further information see Cp Property "Remarks" section.

        :rtype: float
        """
        return 0

    @property
    def Q(self):
        """
        Returns the Quality Factor of the parallel or serial equivalent circuit.
        For further information see Cp Property "Remarks" section.
        This property delivers only proper results when you are measuring in the impedance or admittance mode.

        :rtype: float
        """
        return 0

    @property
    def Real(self):
        """
        Returns the real part of the result.

        :rtype: float
        """
        return 0

    @property
    def Rp(self):
        """
        Returns the parallel resistance of the result.
        For further information see Cp Property "Remarks" section.

        :rtype: float
        """
        return 0

    @property
    def Rs(self):
        """
        Returns the series resistance of the result.
        For further information see Cp Property "Remarks" section.

        :rtype: float
        """
        return 0

    @property
    def Tg(self):
        """
        Returns the group delay of the result.
        The value has the unit seconds.
        Note: The group delay is only available for Gain/Phase measurements.

        :rtype: float
        """
        return 0

    @property
    def VSWR(self):
        """
        Returns the voltage standing wave ratio of the result.
        Note: The VSWR is only available for impedance/reflection measurements.

        :rtype: float
        """
        return 0
