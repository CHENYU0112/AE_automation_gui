from __future__ import annotations

from numpy import array

from . import Bode100Enums


class Bode100Results:
    def __init__(self, BodeDoc, MeasurementObj):
        self.Enums = Bode100Enums
        self._BodeDoc = BodeDoc
        self._MeasurementObj = MeasurementObj

    @property
    def Count(self):
        return self._MeasurementObj.Results.Count

    def Item(self, Index):
        return self._MeasurementObj.Results.Item(Index)

    @property
    def NullDataValue(self):
        """
        Gets or sets the null data value which will be returnd to the calling program.
        If this property will not be set, "NaN" (Not a Number) will be chosen for default.
        """
        return self._MeasurementObj.Results.NullDataValue

    @NullDataValue.setter
    def NullDataValue(self, value):
        """
        Gets or sets the null data value which will be returned to the calling program.
        If this property will not be set, "NaN" (Not a Number) will be chosen for default.
        """
        self._MeasurementObj.Results.NullDataValue = value

    def GetEnumerator(self):
        """
        Returns an enumerator that iterates through the Collection instance.

        :rtype: list[Bode100Result.Bode100Result]
        """
        return list(self._MeasurementObj.Results)

    def Clear(self):
        """
        Removes all objects from the Collection instance.
        """
        self._MeasurementObj.Results.Clear()

    def GetFrequencies(self):
        """
        Obtaining all frequencies of the result collection at once without iterating through the whole result set.
        It is also possible to enumerate the results as described in the example of the Result Object.

        :returns: The frequencies of the results in a double array.
        :rtype: multiarray.ndarray
        """
        return array(self._MeasurementObj.Results.GetFrequencies())

    def GetScaledFrequencies(self, scalingFactor):
        """
        Obtaining all frequencies of the result collection at once without iterating through the whole result set.
        It is also possible to enumerate the results as described in the example of the Result Object.

        :param scalingFactor: To scale the results it is possible to pass a scalingFactor to the method.
                              The received frequencies will be divided by this factor.
        :returns: The scaled frequencies of the results in a double array.
        :rtype: multiarray.ndarray
        """
        return array(self._MeasurementObj.Results.GetScaledFrequencies())

    def GetValues(self, ResultType):
        """
        Obtaining all values of the result collection of the requested result type at once without
        iterating through the whole result set.
        It is also possible to enumerate the results as described in the example of the Result Object.

        :param ResultType: Type of the result
        :type ResultType: Bode100Enums.ResultType
        :returns: The values of the results in a double array. The returned values depend on the ResultType.
        :rtype: multiarray.ndarray
        """
        return array(self._MeasurementObj.Results.GetValues())
