"""
References: BodeAnalyzer.tlb
To report issues or provide feedback please send an email to support@omicron-lab.com.
"""

from __future__ import annotations

import Bode100Enums

# Required to communicate with COM objects
import win32com.client

# Constants:
MAX_DBM = 13
MIN_DBM = -27


class Bode100:
    def __init__(self):
        self.drivername = "Bode100"
        self.interface = None
        self.serialnumber = None
        self.devicetype = None
        self.__initialized = False
        self.Enums = Bode100Enums
        self.IDN = "Omicron Bode100"

        self._BodeApplication = None
        self._BodeDocument = None

        self.Channel1 = None
        """:type : Bode100._Channel"""
        self.Channel2 = None
        """:type : Bode100._Channel"""

    def Initialize(self, Resourcename="", IdQuery=0, Reset=0, Optionstring=""):
        """
        Connects to the Bode100 or Bode200 device.
        """
        # By using win32com.client the bode app for further use is created
        self._BodeApplication = win32com.client.Dispatch("OMICRON.BodeAnalyzer")
        self._BodeDocument = self._BodeApplication.Document

        # Looking for a device and selecting an available one
        # If a device is found (and initialized) the serial number is written into the command-line interface
        self._BodeDocument.Devices.ScanForDevices()
        if self._BodeDocument.Devices.Count > 0:
            print("Initializing the Device.\nThis may take about 30 seconds!\n")
            self._BodeDocument.Devices[0].SelectAndInit()
            self.serialnumber = self._BodeDocument.SelectedDevice.SerialNumber
            self.devicetype = ["Bode100", "Bode200"][self._BodeDocument.SelectedDevice.DeviceType]

            self.Channel1 = self._Channel(1, self._BodeApplication, self._BodeDocument)
            self.Channel2 = self._Channel(2, self._BodeApplication, self._BodeDocument)
        else:  # If no device is found, display an error
            msg = "Could not connect/initialize Bode100"
            raise Exception(msg)

        self.__initialized = True

    def Close(self):
        """Resets the device and closes the connection"""
        self.Reset()
        self._BodeApplication.Close()
        self.__initialized = False

    def Reset(self):
        """Resets the device (Output off and clear measurements)"""
        self._BodeDocument.SelectedDevice.SwitchSource1On(False)
        self._BodeDocument.Measurements.Clear()

    def getFrequencies(self):
        """
        Returns previously measured frequencies

        :rtype: list[float]
        """
        if self._BodeDocument.Measurements.Count == 0:
            return []
        return list(self._BodeDocument.Measurements(1).Results.GetFrequencies())

    def getGain(self):
        """
        Returns previously measured gains

        :rtype: list[float]
        """
        if self._BodeDocument.Measurements.Count == 0:
            return []
        return list(self._BodeDocument.Measurements(1).Results.GetValues(self.Enums.ResultType.AbsDB))

    def getGainMargin(self):
        """
        Returns previously measured gain margin

        :rtype: float
        """
        if self._BodeDocument.Measurements.Count == 0:
            return []
        margin = None
        freqs = self.getFrequencies()
        gains = self.getGain()
        for i, f in enumerate(freqs):
            if f <= 0:
                return gains[i]
        return margin

    def getPhase(self):
        """
        Returns previously measured phases

        :rtype: list[float]
        """
        if self._BodeDocument.Measurements.Count == 0:
            return []
        return list(self._BodeDocument.Measurements(1).Results.GetValues(self.Enums.ResultType.ArgDegUnwrapped))

    def getPhaseMargin(self):
        """
        Returns previously measured phase margin

        :rtype: float
        """
        if self._BodeDocument.Measurements.Count == 0:
            return []
        margin = None
        freqs = self.getFrequencies()
        gains = self.getGain()
        for i, g in enumerate(gains):
            if g <= 0:
                return freqs[i]
        return margin

    def measureGain(self):
        """
        Performs a gain measurement and returns if the measurement was successful or not

        :rtype: bool
        """
        if self._BodeDocument.Measurements.Count == 0:
            self._BodeDocument.Measurements.AddFrequencySweepMeasurement()
        self._BodeDocument.Measurements(1).FrequencySweepSettings.MeasurementType = self.Enums.MeasurementMode.Gain
        self.setSweepMode(self.Enums.SweepMode.Logarithmic)
        self.setOutputEnabled(True)
        measureOK = self._BodeDocument.Measurements(1).Execute()
        self.setOutputEnabled(False)
        return bool(measureOK)

    def probeCalibration(self):
        """
        Performs a probe calibration.
        """
        input("Connect through cable and press any key...")
        if self._BodeDocument.Measurements.Count == 0:
            self._BodeDocument.Measurements.AddFrequencySweepMeasurement()
        self._BodeDocument.Measurements(1).ProbeCalibration.ExecuteGainPhase()

        print("Finished calibration")

    def setAcquisition(self, points):
        """
        Sets the number of points to be acquired

        :param points: The number of points.
        :type points: int
        """
        if self._BodeDocument.Measurements.Count == 0:
            self._BodeDocument.Measurements.AddFrequencySweepMeasurement()
        self._BodeDocument.Measurements(1).FrequencySweepSettings.NumberOfPoints = points

    def setBandwidth(self, bandwidth):
        """
        Set bandwidth step. Smaller steps implies greater measurement time

        :param bandwidth: The bandwidth. Use from from self.Enums.Bandwidth
        :type bandwidth: int
        """
        if self._BodeDocument.Measurements.Count == 0:
            self._BodeDocument.Measurements.AddFrequencySweepMeasurement()
        self._BodeDocument.Measurements(1).DeviceSettings.Bandwidth = bandwidth

    def setFrequencyRange(self, startHz, stopHz):
        """
        Specify frequency sweep range

        :param startHz: The start frequency
        :type startHz: float
        :param stopHz: The stop frequency
        :type stopHz: float
        """
        if self._BodeDocument.Measurements.Count == 0:
            self._BodeDocument.Measurements.AddFrequencySweepMeasurement()
        self._BodeDocument.Measurements(1).FrequencySweepSettings.StartFrequency = startHz
        self._BodeDocument.Measurements(1).FrequencySweepSettings.StopFrequency = stopHz

    def setOutputEnabled(self, enabled):
        """
        Enables/Disables output
        """
        self._BodeDocument.SelectedDevice.SwitchSource1On(enabled)

    def setOutputLevel(self, dBm):
        """
        Output power level

        :param dBm: The output power in dBm. From -27 to 13 dBm
        :type dBm: float
        """
        if self._BodeDocument.Measurements.Count == 0:
            self._BodeDocument.Measurements.AddFrequencySweepMeasurement()
        if dBm > MAX_DBM:
            dBm = MAX_DBM
        if dBm < MIN_DBM:
            dBm = MIN_DBM
        float(self._BodeDocument.Measurements(1).FrequencySweepSettings.Level)
        self._BodeDocument.Measurements(1).FrequencySweepSettings.Level = dBm
        self._BodeDocument.Measurements(1).DeviceSettings.Sources.Level = dBm
        self._BodeDocument.SelectedDevice.DeviceSetup.LeveldBm = dBm

    def setSweepMode(self, mode):
        """
        Specifies the sweep mode

        :param mode: The sweep mode. Use mode from self.Enums.SweepMode
        :type mode: int
        """
        if self._BodeDocument.Measurements.Count == 0:
            self._BodeDocument.Measurements.AddFrequencySweepMeasurement()
        self._BodeDocument.Measurements(1).FrequencySweepSettings.SweepMode = mode

    def setOutputMode(self, mode):
        """
        Specifies the output mode

        :param mode: The sweep mode. Use mode from self.Enums.OutputMode
        :type mode: int
        """
        if self._BodeDocument.Measurements.Count == 0:
            self._BodeDocument.Measurements.AddFrequencySweepMeasurement()
        if mode == self.Enums.OutMode.Level:
            self._BodeDocument.Measurements(1).FrequencySweepSettings.UseShapedLevel = False
        elif mode == self.Enums.OutMode.ShapedLevel:
            self._BodeDocument.Measurements(1).FrequencySweepSettings.UseShapedLevel = True
            self._BodeDocument.Measurements(1).FrequencySweepSettings.ClearShapedLevels()

    class _Channel:
        def __init__(self, channel, app, doc):
            self.channel = channel
            self._BodeApplication = app
            self._BodeDocument = doc

        def getOverLoad(self):
            """
            Returns condition of channel overload along measurement

            :rtype: bool
            """
            if self.channel == 1:
                return bool(self._BodeDocument.Measurements(1).OverloadLevelCH1 > 1)
            elif self.channel == 2:
                return bool(self._BodeDocument.Measurements(1).OverloadLevelCH2 > 1)
            else:
                return False

        def setReceiverAttenuation(self, attenuation):
            """
            Set the receiver attenuation level

            :param attenuation: The receiver attenuation level. Use enum from self.Enums.ReceiverAttenuation
            """
            if self._BodeDocument.Measurements.Count == 0:
                self._BodeDocument.Measurements.AddFrequencySweepMeasurement()
            self._BodeDocument.Measurements(1).DeviceSettings.Receivers(self.channel).Attenuator = attenuation

        def setReceiverInput(self, mode):
            """
            Set the receiver input mode

            :param mode: The receiver input mode. Use enum from self.Enums.ReceiverInput
            """
            if self._BodeDocument.Measurements.Count == 0:
                self._BodeDocument.Measurements.AddFrequencySweepMeasurement()
            self._BodeDocument.Measurements(1).DeviceSettings.Receivers(self.channel).Input = mode

        def setProbe(self, _50Ohm, coupling, attenuation):
            """
            Set probe configuration

            :param _50Ohm: Enabled/Disables 50 Ohm termination
            :type _50Ohm: bool
            :param coupling: The probe coupling. Use enum from self.Enums.Coupling
            :type coupling: int
            :param attenuation: The probe attenuation. Use enum from self.Enums.ProbeAttenuation
            :type attenuation: int
            """
            if self._BodeDocument.Measurements.Count == 0:
                self._BodeDocument.Measurements.AddFrequencySweepMeasurement()
            self._BodeDocument.Measurements(1).DeviceSettings.Channels(self.channel).Termination50Ohm = _50Ohm
            self._BodeDocument.Measurements(1).DeviceSettings.Channels(self.channel).Probe = attenuation
            self._BodeDocument.Measurements(1).DeviceSettings.Channels(self.channel).ACDCCoupling = coupling
