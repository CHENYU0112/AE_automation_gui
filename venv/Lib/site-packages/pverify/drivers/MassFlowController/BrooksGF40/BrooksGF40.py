from __future__ import annotations

from ctypes import *
from os.path import *

from pverify.core.lab.driver_identity import IdentityABC, IdentityBasic

# DLL = r"C:\TwinCAT\AdsApi\TcAdsDll\x64\TcAdsDll.dll"
DLL = join(dirname(__file__), "TcAdsDll.dll")
NetID = "172.22.4.38.1.1"
PLC_PORT = 11


class AmsNetId(Structure):
    _fields_ = [("NetId", c_ubyte * 6)]


class AmsAddr(Structure):
    _fields_ = [("AmsNetId", AmsNetId), ("port", c_ushort)]


class AdsInfo:
    def __init__(self, group, offset, size, datatype, S):
        self.group = group
        self.offset = offset
        self.size = size
        self.datatype = datatype
        self.S = S

    def to_percent(self, value):
        percent = (value / self.S) * 100.0
        if not 0.0 <= percent <= 100.0:
            msg = f"Value {value} exceeds limits ({0.0}%, {self.S}%)!"
            raise ValueError(msg)
        return percent

    def to_float(self, percent):
        return (percent / 100.0) * self.S


class AdsFlow:
    MFMOut = AdsInfo(0x3040010, 0x80000027, 4, c_float, 2601.8)
    MFC_B_CO2 = AdsInfo(0x3040010, 0x8000002F, 4, c_float, 280.13)
    MFC_A_Synth = AdsInfo(0x3040010, 0x8000002B, 4, c_float, 850.29)


class AdsSetPoint:
    MFC_B_CO2 = AdsInfo(0x3040010, 0x8100002F, 4, c_float, 280.13)
    MFC_A_Synth = AdsInfo(0x3040010, 0x8100002B, 4, c_float, 850.29)


class BrooksGF40(IdentityABC):
    def __init__(self):
        self.dll = None
        self.connected = False
        self.port = None
        self.plcNetId = None
        self.plcAddress = None
        self.__Identity = IdentityBasic(
            fct_idn=lambda: "Brooks MFC",
            fct_drv_rev=lambda: "unknown",
            fct_fw_rev=lambda: "unknown",
        )

    @property
    def Identity(self):
        return self.__Identity

    def Connect(self):
        if self.dll is None:
            try:
                self.dll = cdll.LoadLibrary(DLL)
                self.port = self.dll.AdsPortOpen()
                self.plcNetId = AmsNetId(
                    (c_ubyte * 6)(*[int(x) for x in NetID.split(".")])
                )  # correct address to the PLC
                self.plcAddress = AmsAddr(self.plcNetId, PLC_PORT)  # correct port to the PLC

            except BaseException:
                self.dll = None
                self.connected = False
                self.port = None
                self.plcNetId = None
                self.plcAddress = None
                raise
        else:
            self.connected = False

    def Disconnect(self):
        if self.connected and self.port is not None:
            self.dll.AdsPortClose()

    def ReadReq(self, adsinfo):
        """
        Reads a register

        :type adsinfo: AdsInfo
        """
        ret = adsinfo.datatype()

        status = self.dll.AdsSyncReadReq(
            pointer(self.plcAddress),
            c_ulong(adsinfo.group),
            c_ulong(adsinfo.offset),
            c_ulong(adsinfo.size),
            byref(ret),
        )
        if int(status) != 0:
            raise AdsError(status)
        else:
            return adsinfo.to_float(ret.value)

    def WriteReq(self, adsinfo, value):
        """
        Writes a register

        :type adsinfo: AdsInfo
        :param value: Value in sccm
        :type value: float|int|bool
        """
        value = adsinfo.to_percent(value)

        ret = adsinfo.datatype(value)

        status = self.dll.AdsSyncWriteReq(
            pointer(self.plcAddress),
            c_ulong(adsinfo.group),
            c_ulong(adsinfo.offset),
            c_ulong(adsinfo.size),
            byref(ret),
        )
        if int(status) != 0:
            raise AdsError(status)

    def ResetSetPoints(self):
        self.WriteReq(AdsSetPoint.MFC_A_Synth, 0.0)
        self.WriteReq(AdsSetPoint.MFC_B_CO2, 0.0)


class AdsError(Exception):
    def __init__(self, code):
        self.code = hex(code)
        self.desc = "<no description>"
        Exception.__init__(self, f"AdsError: {self.code}, Description: {self.desc}")


if __name__ == "__main__":
    ads = BrooksGF40()
    ads.Connect()
    ads.ResetSetPoints()
    print(f"MFMOut:      {ads.ReadReq(AdsFlow.MFMOut):f}")
    print(f"MFC_A_Synth: {ads.ReadReq(AdsFlow.MFC_A_Synth):f}")
    print(f"MFC_B_CO2:   {ads.ReadReq(AdsFlow.MFC_B_CO2):f}")

    ads.WriteReq(AdsSetPoint.MFC_A_Synth, 0)
    ads.WriteReq(AdsSetPoint.MFC_B_CO2, 0)

    print(f"MFMOut:      {ads.ReadReq(AdsFlow.MFMOut):f}")
    print(f"MFC_A_Synth: {ads.ReadReq(AdsFlow.MFC_A_Synth):f}")
    print(f"MFC_B_CO2:   {ads.ReadReq(AdsFlow.MFC_B_CO2):f}")

    ads.Disconnect()
