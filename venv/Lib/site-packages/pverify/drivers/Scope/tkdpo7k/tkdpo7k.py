from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .tkdpo7k_dllwrap import *


class tkdpo7k(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = tkdpo7k_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def GetNextCoercionRecord(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetChannelName(self, index, bufferSize):
        """

        :param index:
        :type index:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, index, bufferSize)

    def ConfigureAcquisitionType(self, acquisitionType):
        """

        :param acquisitionType:
        :type acquisitionType:
        """
        return self._dllwrap.ConfigureAcquisitionType(self._vi, acquisitionType)

    def ConfigureAcquisitionRecord(self, timePerRecord, minimumRecordLength, acqStartTime):
        """

        :param timePerRecord:
        :type timePerRecord:
        :param minimumRecordLength:
        :type minimumRecordLength:
        :param acqStartTime:
        :type acqStartTime:
        """
        return self._dllwrap.ConfigureAcquisitionRecord(self._vi, timePerRecord, minimumRecordLength, acqStartTime)

    def ConfigureNumAverages(self, numberOfAverages):
        """

        :param numberOfAverages:
        :type numberOfAverages:
        """
        return self._dllwrap.ConfigureNumAverages(self._vi, numberOfAverages)

    def ConfigureNumEnvelopes(self, numberOfEnvelopes):
        """

        :param numberOfEnvelopes:
        :type numberOfEnvelopes:
        """
        return self._dllwrap.ConfigureNumEnvelopes(self._vi, numberOfEnvelopes)

    def ConfigureNumSamples(self, numberOfSamples):
        """

        :param numberOfSamples:
        :type numberOfSamples:
        """
        return self._dllwrap.ConfigureNumSamples(self._vi, numberOfSamples)

    def SampleMode(self):
        """"""
        return self._dllwrap.SampleMode(self._vi)

    def SampleRate(self):
        """"""
        return self._dllwrap.SampleRate(self._vi)

    def ActualRecordLength(self):
        """"""
        return self._dllwrap.ActualRecordLength(self._vi)

    def ConfigureInitiateContinuous(self, continuous):
        """

        :param continuous:
        :type continuous:
        """
        return self._dllwrap.ConfigureInitiateContinuous(self._vi, continuous)

    def ConfigureChannel(self, channel, range, offset, coupling, probeAttenuation, enabled):
        """

        :param channel:
        :type channel:
        :param range:
        :type range:
        :param offset:
        :type offset:
        :param coupling:
        :type coupling:
        :param probeAttenuation:
        :type probeAttenuation:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureChannel(self._vi, channel, range, offset, coupling, probeAttenuation, enabled)

    def ConfigureChanCharacteristics(self, channel, inputImpedance, maxInputFrequency):
        """

        :param channel:
        :type channel:
        :param inputImpedance:
        :type inputImpedance:
        :param maxInputFrequency:
        :type maxInputFrequency:
        """
        return self._dllwrap.ConfigureChanCharacteristics(self._vi, channel, inputImpedance, maxInputFrequency)

    def AutoProbeSenseValue(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.AutoProbeSenseValue(self._vi, channel)

    def ConfigureTrigger(self, triggerType, holdoff):
        """

        :param triggerType:
        :type triggerType:
        :param holdoff:
        :type holdoff:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, triggerType, holdoff)

    def ConfigureDelayTrigger(self, triggerState, triggerType, triggerMode, delayTriggerTime, delayTriggerEvent):
        """

        :param triggerState:
        :type triggerState:
        :param triggerType:
        :type triggerType:
        :param triggerMode:
        :type triggerMode:
        :param delayTriggerTime:
        :type delayTriggerTime:
        :param delayTriggerEvent:
        :type delayTriggerEvent:
        """
        return self._dllwrap.ConfigureDelayTrigger(
            self._vi,
            triggerState,
            triggerType,
            triggerMode,
            delayTriggerTime,
            delayTriggerEvent,
        )

    def ConfigureTriggerCoupling(self, coupling):
        """

        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureTriggerCoupling(self._vi, coupling)

    def ConfigureDelayTriggerCoupling(self, coupling):
        """

        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureDelayTriggerCoupling(self._vi, coupling)

    def ConfigureTriggerModifier(self, modifier):
        """

        :param modifier:
        :type modifier:
        """
        return self._dllwrap.ConfigureTriggerModifier(self._vi, modifier)

    def ConfigureEdgeTriggerSource(self, source, level, slope):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureEdgeTriggerSource(self._vi, source, level, slope)

    def ConfigureDelayEdgeTriggerSource(self, source, level, slope):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureDelayEdgeTriggerSource(self._vi, source, level, slope)

    def ConfigureAcLineTriggerSlope(self, acLineSlope):
        """

        :param acLineSlope:
        :type acLineSlope:
        """
        return self._dllwrap.ConfigureAcLineTriggerSlope(self._vi, acLineSlope)

    def ConfigureTVTriggerSource(self, source, TVSignalFormat, TVEvent, TVPolarity):
        """

        :param source:
        :type source:
        :param TVSignalFormat:
        :type TVSignalFormat:
        :param TVEvent:
        :type TVEvent:
        :param TVPolarity:
        :type TVPolarity:
        """
        return self._dllwrap.ConfigureTVTriggerSource(self._vi, source, TVSignalFormat, TVEvent, TVPolarity)

    def ConfigureTVTriggerLineNumber(self, lineNumber):
        """

        :param lineNumber:
        :type lineNumber:
        """
        return self._dllwrap.ConfigureTVTriggerLineNumber(self._vi, lineNumber)

    def ConfigureTVTriggerCustomFormat(self, scanType, linePeriod, syncInternal):
        """

        :param scanType:
        :type scanType:
        :param linePeriod:
        :type linePeriod:
        :param syncInternal:
        :type syncInternal:
        """
        return self._dllwrap.ConfigureTVTriggerCustomFormat(self._vi, scanType, linePeriod, syncInternal)

    def ConfigureRuntTriggerSource(self, source, runtLowThreshold, runtHighThreshold, runtPolarity):
        """

        :param source:
        :type source:
        :param runtLowThreshold:
        :type runtLowThreshold:
        :param runtHighThreshold:
        :type runtHighThreshold:
        :param runtPolarity:
        :type runtPolarity:
        """
        return self._dllwrap.ConfigureRuntTriggerSource(
            self._vi, source, runtLowThreshold, runtHighThreshold, runtPolarity
        )

    def ConfigureDelayRuntTriggerSource(self, source, runtLowThreshold, runtHighThreshold, runtPolarity):
        """

        :param source:
        :type source:
        :param runtLowThreshold:
        :type runtLowThreshold:
        :param runtHighThreshold:
        :type runtHighThreshold:
        :param runtPolarity:
        :type runtPolarity:
        """
        return self._dllwrap.ConfigureDelayRuntTriggerSource(
            self._vi, source, runtLowThreshold, runtHighThreshold, runtPolarity
        )

    def ConfigureRuntTriggerCondition(self, condition, width, triggerIf):
        """

        :param condition:
        :type condition:
        :param width:
        :type width:
        :param triggerIf:
        :type triggerIf:
        """
        return self._dllwrap.ConfigureRuntTriggerCondition(self._vi, condition, width, triggerIf)

    def ConfigDelayRuntTriggerCondition(self, condition, width, triggerIf):
        """

        :param condition:
        :type condition:
        :param width:
        :type width:
        :param triggerIf:
        :type triggerIf:
        """
        return self._dllwrap.ConfigDelayRuntTriggerCondition(self._vi, condition, width, triggerIf)

    def ConfigureGlitchTriggerSource(self, source, level, glitchWidth, glitchPolarity, glitchCondition):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param glitchWidth:
        :type glitchWidth:
        :param glitchPolarity:
        :type glitchPolarity:
        :param glitchCondition:
        :type glitchCondition:
        """
        return self._dllwrap.ConfigureGlitchTriggerSource(
            self._vi, source, level, glitchWidth, glitchPolarity, glitchCondition
        )

    def ConfigDelayGlitchTriggerSource(self, source, level, glitchWidth, glitchPolarity, glitchCondition):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param glitchWidth:
        :type glitchWidth:
        :param glitchPolarity:
        :type glitchPolarity:
        :param glitchCondition:
        :type glitchCondition:
        """
        return self._dllwrap.ConfigDelayGlitchTriggerSource(
            self._vi, source, level, glitchWidth, glitchPolarity, glitchCondition
        )

    def ConfigureGlitchTriggerIf(self, glitchTriggerIf):
        """

        :param glitchTriggerIf:
        :type glitchTriggerIf:
        """
        return self._dllwrap.ConfigureGlitchTriggerIf(self._vi, glitchTriggerIf)

    def ConfigureDelayGlitchTriggerIf(self, glitchTriggerIf):
        """

        :param glitchTriggerIf:
        :type glitchTriggerIf:
        """
        return self._dllwrap.ConfigureDelayGlitchTriggerIf(self._vi, glitchTriggerIf)

    def ConfigureWidthTriggerSource(
        self,
        source,
        level,
        widthLowThreshold,
        widthHighThreshold,
        widthPolarity,
        widthCondition,
    ):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param widthLowThreshold:
        :type widthLowThreshold:
        :param widthHighThreshold:
        :type widthHighThreshold:
        :param widthPolarity:
        :type widthPolarity:
        :param widthCondition:
        :type widthCondition:
        """
        return self._dllwrap.ConfigureWidthTriggerSource(
            self._vi,
            source,
            level,
            widthLowThreshold,
            widthHighThreshold,
            widthPolarity,
            widthCondition,
        )

    def ConfigDelayWidthTriggerSource(
        self,
        source,
        level,
        widthLowThreshold,
        widthHighThreshold,
        widthPolarity,
        widthCondition,
    ):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param widthLowThreshold:
        :type widthLowThreshold:
        :param widthHighThreshold:
        :type widthHighThreshold:
        :param widthPolarity:
        :type widthPolarity:
        :param widthCondition:
        :type widthCondition:
        """
        return self._dllwrap.ConfigDelayWidthTriggerSource(
            self._vi,
            source,
            level,
            widthLowThreshold,
            widthHighThreshold,
            widthPolarity,
            widthCondition,
        )

    def ConfigureWidthTriggerIf(self, widthTriggerIf):
        """

        :param widthTriggerIf:
        :type widthTriggerIf:
        """
        return self._dllwrap.ConfigureWidthTriggerIf(self._vi, widthTriggerIf)

    def ConfigureDelayWidthTriggerIf(self, widthTriggerIf):
        """

        :param widthTriggerIf:
        :type widthTriggerIf:
        """
        return self._dllwrap.ConfigureDelayWidthTriggerIf(self._vi, widthTriggerIf)

    def ConfigureTimeoutTriggerSource(self, source, level, timeoutTime, timeoutPolarity):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param timeoutTime:
        :type timeoutTime:
        :param timeoutPolarity:
        :type timeoutPolarity:
        """
        return self._dllwrap.ConfigureTimeoutTriggerSource(self._vi, source, level, timeoutTime, timeoutPolarity)

    def ConfigDelayTimeoutTriggerSource(self, source, level, timeoutTime, timeoutPolarity):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param timeoutTime:
        :type timeoutTime:
        :param timeoutPolarity:
        :type timeoutPolarity:
        """
        return self._dllwrap.ConfigDelayTimeoutTriggerSource(self._vi, source, level, timeoutTime, timeoutPolarity)

    def ConfigureTimeoutTriggerIf(self, timeoutTriggerIf):
        """

        :param timeoutTriggerIf:
        :type timeoutTriggerIf:
        """
        return self._dllwrap.ConfigureTimeoutTriggerIf(self._vi, timeoutTriggerIf)

    def ConfigureDelayTimeoutTriggerIf(self, timeoutTriggerIf):
        """

        :param timeoutTriggerIf:
        :type timeoutTriggerIf:
        """
        return self._dllwrap.ConfigureDelayTimeoutTriggerIf(self._vi, timeoutTriggerIf)

    def ConfigTransitionTriggerSource(
        self,
        source,
        transitionLowThreshold,
        transitionHighThreshold,
        transitionDeltaTime,
        transitionPolarity,
        transitionCondition,
    ):
        """

        :param source:
        :type source:
        :param transitionLowThreshold:
        :type transitionLowThreshold:
        :param transitionHighThreshold:
        :type transitionHighThreshold:
        :param transitionDeltaTime:
        :type transitionDeltaTime:
        :param transitionPolarity:
        :type transitionPolarity:
        :param transitionCondition:
        :type transitionCondition:
        """
        return self._dllwrap.ConfigTransitionTriggerSource(
            self._vi,
            source,
            transitionLowThreshold,
            transitionHighThreshold,
            transitionDeltaTime,
            transitionPolarity,
            transitionCondition,
        )

    def ConfigDelayTransitionTriggerSrc(
        self,
        source,
        transitionLowThreshold,
        transitionHighThreshold,
        transitionDeltaTime,
        transitionPolarity,
        transitionCondition,
    ):
        """

        :param source:
        :type source:
        :param transitionLowThreshold:
        :type transitionLowThreshold:
        :param transitionHighThreshold:
        :type transitionHighThreshold:
        :param transitionDeltaTime:
        :type transitionDeltaTime:
        :param transitionPolarity:
        :type transitionPolarity:
        :param transitionCondition:
        :type transitionCondition:
        """
        return self._dllwrap.ConfigDelayTransitionTriggerSrc(
            self._vi,
            source,
            transitionLowThreshold,
            transitionHighThreshold,
            transitionDeltaTime,
            transitionPolarity,
            transitionCondition,
        )

    def ConfigureTransitionTriggerIf(self, transitionTriggerIf):
        """

        :param transitionTriggerIf:
        :type transitionTriggerIf:
        """
        return self._dllwrap.ConfigureTransitionTriggerIf(self._vi, transitionTriggerIf)

    def ConfigureDelayTransitionTriggerIf(self, transitionTriggerIf):
        """

        :param transitionTriggerIf:
        :type transitionTriggerIf:
        """
        return self._dllwrap.ConfigureDelayTransitionTriggerIf(self._vi, transitionTriggerIf)

    def ConfigureWindowTriggerSource(
        self,
        source,
        windowLowThreshold,
        windowHighThreshold,
        windowWidth,
        windowCondition,
    ):
        """

        :param source:
        :type source:
        :param windowLowThreshold:
        :type windowLowThreshold:
        :param windowHighThreshold:
        :type windowHighThreshold:
        :param windowWidth:
        :type windowWidth:
        :param windowCondition:
        :type windowCondition:
        """
        return self._dllwrap.ConfigureWindowTriggerSource(
            self._vi,
            source,
            windowLowThreshold,
            windowHighThreshold,
            windowWidth,
            windowCondition,
        )

    def ConfigDelayWindowTriggerSource(
        self,
        source,
        windowLowThreshold,
        windowHighThreshold,
        windowWidth,
        windowCondition,
    ):
        """

        :param source:
        :type source:
        :param windowLowThreshold:
        :type windowLowThreshold:
        :param windowHighThreshold:
        :type windowHighThreshold:
        :param windowWidth:
        :type windowWidth:
        :param windowCondition:
        :type windowCondition:
        """
        return self._dllwrap.ConfigDelayWindowTriggerSource(
            self._vi,
            source,
            windowLowThreshold,
            windowHighThreshold,
            windowWidth,
            windowCondition,
        )

    def ConfigureWindowTriggerIf(self, windowTriggerIf):
        """

        :param windowTriggerIf:
        :type windowTriggerIf:
        """
        return self._dllwrap.ConfigureWindowTriggerIf(self._vi, windowTriggerIf)

    def ConfigureDelayWindowTriggerIf(self, windowTriggerIf):
        """

        :param windowTriggerIf:
        :type windowTriggerIf:
        """
        return self._dllwrap.ConfigureDelayWindowTriggerIf(self._vi, windowTriggerIf)

    def ConfigurePatternTrigger(self, patternFunction, patternMoreTime, patternLessTime, patternCondition):
        """

        :param patternFunction:
        :type patternFunction:
        :param patternMoreTime:
        :type patternMoreTime:
        :param patternLessTime:
        :type patternLessTime:
        :param patternCondition:
        :type patternCondition:
        """
        return self._dllwrap.ConfigurePatternTrigger(
            self._vi, patternFunction, patternMoreTime, patternLessTime, patternCondition
        )

    def ConfigureDelayPatternTrigger(self, patternFunction, patternMoreTime, patternLessTime, patternCondition):
        """

        :param patternFunction:
        :type patternFunction:
        :param patternMoreTime:
        :type patternMoreTime:
        :param patternLessTime:
        :type patternLessTime:
        :param patternCondition:
        :type patternCondition:
        """
        return self._dllwrap.ConfigureDelayPatternTrigger(
            self._vi, patternFunction, patternMoreTime, patternLessTime, patternCondition
        )

    def ConfigurePatternTriggerInput(self, channelName, inputPolarity, inputLevel):
        """

        :param channelName:
        :type channelName:
        :param inputPolarity:
        :type inputPolarity:
        :param inputLevel:
        :type inputLevel:
        """
        return self._dllwrap.ConfigurePatternTriggerInput(self._vi, channelName, inputPolarity, inputLevel)

    def ConfigDelayPatternTriggerInput(self, channelName, inputPolarity, inputLevel):
        """

        :param channelName:
        :type channelName:
        :param inputPolarity:
        :type inputPolarity:
        :param inputLevel:
        :type inputLevel:
        """
        return self._dllwrap.ConfigDelayPatternTriggerInput(self._vi, channelName, inputPolarity, inputLevel)

    def ConfigureStateTrigger(self, stateFunction, stateCondition):
        """

        :param stateFunction:
        :type stateFunction:
        :param stateCondition:
        :type stateCondition:
        """
        return self._dllwrap.ConfigureStateTrigger(self._vi, stateFunction, stateCondition)

    def ConfigureDelayStateTrigger(self, stateFunction, stateCondition):
        """

        :param stateFunction:
        :type stateFunction:
        :param stateCondition:
        :type stateCondition:
        """
        return self._dllwrap.ConfigureDelayStateTrigger(self._vi, stateFunction, stateCondition)

    def ConfigureStateTriggerInput(self, channelName, inputPolarity, inputLevel):
        """

        :param channelName:
        :type channelName:
        :param inputPolarity:
        :type inputPolarity:
        :param inputLevel:
        :type inputLevel:
        """
        return self._dllwrap.ConfigureStateTriggerInput(self._vi, channelName, inputPolarity, inputLevel)

    def ConfigureDelayStateTriggerInput(self, channelName, inputPolarity, inputLevel):
        """

        :param channelName:
        :type channelName:
        :param inputPolarity:
        :type inputPolarity:
        :param inputLevel:
        :type inputLevel:
        """
        return self._dllwrap.ConfigureDelayStateTriggerInput(self._vi, channelName, inputPolarity, inputLevel)

    def ConfigureStateTriggerClockEdge(self, channelName, clockEdge):
        """

        :param channelName:
        :type channelName:
        :param clockEdge:
        :type clockEdge:
        """
        return self._dllwrap.ConfigureStateTriggerClockEdge(self._vi, channelName, clockEdge)

    def CfgDelayStateTriggerClockEdge(self, channelName, clockEdge):
        """

        :param channelName:
        :type channelName:
        :param clockEdge:
        :type clockEdge:
        """
        return self._dllwrap.CfgDelayStateTriggerClockEdge(self._vi, channelName, clockEdge)

    def ConfigureSetholdTriggerSource(
        self,
        dataSource,
        clockSource,
        dataLevel,
        clockLevel,
        clockEdge,
        setupTime,
        holdTime,
    ):
        """

        :param dataSource:
        :type dataSource:
        :param clockSource:
        :type clockSource:
        :param dataLevel:
        :type dataLevel:
        :param clockLevel:
        :type clockLevel:
        :param clockEdge:
        :type clockEdge:
        :param setupTime:
        :type setupTime:
        :param holdTime:
        :type holdTime:
        """
        return self._dllwrap.ConfigureSetholdTriggerSource(
            self._vi,
            dataSource,
            clockSource,
            dataLevel,
            clockLevel,
            clockEdge,
            setupTime,
            holdTime,
        )

    def ConfigDelaySetholdTriggerSource(
        self,
        dataSource,
        clockSource,
        dataLevel,
        clockLevel,
        clockEdge,
        setupTime,
        holdTime,
    ):
        """

        :param dataSource:
        :type dataSource:
        :param clockSource:
        :type clockSource:
        :param dataLevel:
        :type dataLevel:
        :param clockLevel:
        :type clockLevel:
        :param clockEdge:
        :type clockEdge:
        :param setupTime:
        :type setupTime:
        :param holdTime:
        :type holdTime:
        """
        return self._dllwrap.ConfigDelaySetholdTriggerSource(
            self._vi,
            dataSource,
            clockSource,
            dataLevel,
            clockLevel,
            clockEdge,
            setupTime,
            holdTime,
        )

    def ConfigureSetholdTriggerIf(self, triggerIf):
        """

        :param triggerIf:
        :type triggerIf:
        """
        return self._dllwrap.ConfigureSetholdTriggerIf(self._vi, triggerIf)

    def ConfigureDelaySetholdTriggerIf(self, triggerIf):
        """

        :param triggerIf:
        :type triggerIf:
        """
        return self._dllwrap.ConfigureDelaySetholdTriggerIf(self._vi, triggerIf)

    def ConfigureCommTriggerSource(self, triggerSource, coding, standard, sourceType, clockPolarity, pulseForm):
        """

        :param triggerSource:
        :type triggerSource:
        :param coding:
        :type coding:
        :param standard:
        :type standard:
        :param sourceType:
        :type sourceType:
        :param clockPolarity:
        :type clockPolarity:
        :param pulseForm:
        :type pulseForm:
        """
        return self._dllwrap.ConfigureCommTriggerSource(
            self._vi,
            triggerSource,
            coding,
            standard,
            sourceType,
            clockPolarity,
            pulseForm,
        )

    def ConfigureCommAMIThreshold(self, lowThreshold, highThreshold):
        """

        :param lowThreshold:
        :type lowThreshold:
        :param highThreshold:
        :type highThreshold:
        """
        return self._dllwrap.ConfigureCommAMIThreshold(self._vi, lowThreshold, highThreshold)

    def ConfigureCANTriggerSource(self, dataSource, dataLevel, signalType, bitRate, frameType, condition):
        """

        :param dataSource:
        :type dataSource:
        :param dataLevel:
        :type dataLevel:
        :param signalType:
        :type signalType:
        :param bitRate:
        :type bitRate:
        :param frameType:
        :type frameType:
        :param condition:
        :type condition:
        """
        return self._dllwrap.ConfigureCANTriggerSource(
            self._vi, dataSource, dataLevel, signalType, bitRate, frameType, condition
        )

    def ConfigureCANTriggerData(self, dataDirection, dataValue):
        """

        :param dataDirection:
        :type dataDirection:
        :param dataValue:
        :type dataValue:
        """
        return self._dllwrap.ConfigureCANTriggerData(self._vi, dataDirection, dataValue)

    def ConfigureCANTriggerID(self, idMode, idValue):
        """

        :param idMode:
        :type idMode:
        :param idValue:
        :type idValue:
        """
        return self._dllwrap.ConfigureCANTriggerID(self._vi, idMode, idValue)

    def ConfigureI2CTriggerSource(self, dataSource, dataLevel, clockSource, clockLevel, condition):
        """

        :param dataSource:
        :type dataSource:
        :param dataLevel:
        :type dataLevel:
        :param clockSource:
        :type clockSource:
        :param clockLevel:
        :type clockLevel:
        :param condition:
        :type condition:
        """
        return self._dllwrap.ConfigureI2CTriggerSource(
            self._vi, dataSource, dataLevel, clockSource, clockLevel, condition
        )

    def ConfigureI2CTriggerData(self, dataDirection, dataStart, dataValue):
        """

        :param dataDirection:
        :type dataDirection:
        :param dataStart:
        :type dataStart:
        :param dataValue:
        :type dataValue:
        """
        return self._dllwrap.ConfigureI2CTriggerData(self._vi, dataDirection, dataStart, dataValue)

    def ConfigureI2CTriggerAddress(self, addrType, addrMode, addrValue):
        """

        :param addrType:
        :type addrType:
        :param addrMode:
        :type addrMode:
        :param addrValue:
        :type addrValue:
        """
        return self._dllwrap.ConfigureI2CTriggerAddress(self._vi, addrType, addrMode, addrValue)

    def ConfigureRS232TriggerSource(self, dataSource, dataLevel, parity, baudRate):
        """

        :param dataSource:
        :type dataSource:
        :param dataLevel:
        :type dataLevel:
        :param parity:
        :type parity:
        :param baudRate:
        :type baudRate:
        """
        return self._dllwrap.ConfigureRS232TriggerSource(self._vi, dataSource, dataLevel, parity, baudRate)

    def ConfigureRS232TriggerData(self, dataValue):
        """

        :param dataValue:
        :type dataValue:
        """
        return self._dllwrap.ConfigureRS232TriggerData(self._vi, dataValue)

    def ConfigureSerialTriggerSource(
        self,
        dataSource,
        dataLevel,
        clockSource,
        clockLevel,
        clockPolarity,
        standard,
        code,
    ):
        """

        :param dataSource:
        :type dataSource:
        :param dataLevel:
        :type dataLevel:
        :param clockSource:
        :type clockSource:
        :param clockLevel:
        :type clockLevel:
        :param clockPolarity:
        :type clockPolarity:
        :param standard:
        :type standard:
        :param code:
        :type code:
        """
        return self._dllwrap.ConfigureSerialTriggerSource(
            self._vi,
            dataSource,
            dataLevel,
            clockSource,
            clockLevel,
            clockPolarity,
            standard,
            code,
        )

    def ConfigureSerialTriggerData(self, dataValue):
        """

        :param dataValue:
        :type dataValue:
        """
        return self._dllwrap.ConfigureSerialTriggerData(self._vi, dataValue)

    def CfgSerialTriggerCustomBitRate(self, bitRate):
        """

        :param bitRate:
        :type bitRate:
        """
        return self._dllwrap.CfgSerialTriggerCustomBitRate(self._vi, bitRate)

    def ConfigureSPITriggerSource(self, MOSISource, MISOSource, SCLKSource, SSSource, condition):
        """

        :param MOSISource:
        :type MOSISource:
        :param MISOSource:
        :type MISOSource:
        :param SCLKSource:
        :type SCLKSource:
        :param SSSource:
        :type SSSource:
        :param condition:
        :type condition:
        """
        return self._dllwrap.ConfigureSPITriggerSource(
            self._vi, MOSISource, MISOSource, SCLKSource, SSSource, condition
        )

    def ConfigureSPITriggerData(self, MOSIValue, MISOValue, dataStart):
        """

        :param MOSIValue:
        :type MOSIValue:
        :param MISOValue:
        :type MISOValue:
        :param dataStart:
        :type dataStart:
        """
        return self._dllwrap.ConfigureSPITriggerData(self._vi, MOSIValue, MISOValue, dataStart)

    def ConfigureSPITriggerMOSI(self, MOSIPolarity, MOSILevel):
        """

        :param MOSIPolarity:
        :type MOSIPolarity:
        :param MOSILevel:
        :type MOSILevel:
        """
        return self._dllwrap.ConfigureSPITriggerMOSI(self._vi, MOSIPolarity, MOSILevel)

    def ConfigureSPITriggerMISO(self, MISOPolarity, MISOLevel):
        """

        :param MISOPolarity:
        :type MISOPolarity:
        :param MISOLevel:
        :type MISOLevel:
        """
        return self._dllwrap.ConfigureSPITriggerMISO(self._vi, MISOPolarity, MISOLevel)

    def ConfigureSPITriggerSS(self, SSPolarity, SSLevel):
        """

        :param SSPolarity:
        :type SSPolarity:
        :param SSLevel:
        :type SSLevel:
        """
        return self._dllwrap.ConfigureSPITriggerSS(self._vi, SSPolarity, SSLevel)

    def ConfigureSPITriggerSCLK(self, SCLKPolarity, SCLKLevel):
        """

        :param SCLKPolarity:
        :type SCLKPolarity:
        :param SCLKLevel:
        :type SCLKLevel:
        """
        return self._dllwrap.ConfigureSPITriggerSCLK(self._vi, SCLKPolarity, SCLKLevel)

    def ReadWaveform(self, channel, waveformSize, maxTime):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadWaveform(self._vi, channel, waveformSize, maxTime)

    def InitiateAcquisition(self):
        """"""
        return self._dllwrap.InitiateAcquisition(self._vi)

    def AcquisitionStatus(self):
        """"""
        return self._dllwrap.AcquisitionStatus(self._vi)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def FetchWaveform(self, channel, waveformSize):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchWaveform(self._vi, channel, waveformSize)

    def ReadMinMaxWaveform(self, channel, waveformSize, maxTime):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadMinMaxWaveform(self._vi, channel, waveformSize, maxTime)

    def FetchMinMaxWaveform(self, channel, waveformSize):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchMinMaxWaveform(self._vi, channel, waveformSize)

    def ConfigureRefLevels(self, lowRef, midRef, highRef):
        """

        :param lowRef:
        :type lowRef:
        :param midRef:
        :type midRef:
        :param highRef:
        :type highRef:
        """
        return self._dllwrap.ConfigureRefLevels(self._vi, lowRef, midRef, highRef)

    def ConfigureDelayRefLevels(self, mid2):
        """

        :param mid2:
        :type mid2:
        """
        return self._dllwrap.ConfigureDelayRefLevels(self._vi, mid2)

    def ConfigureRefCalcMethod(self, referenceLevelCalcMethod):
        """

        :param referenceLevelCalcMethod:
        :type referenceLevelCalcMethod:
        """
        return self._dllwrap.ConfigureRefCalcMethod(self._vi, referenceLevelCalcMethod)

    def ConfigureMeasSignalType(self, source1SignalType, source2SignalType):
        """

        :param source1SignalType:
        :type source1SignalType:
        :param source2SignalType:
        :type source2SignalType:
        """
        return self._dllwrap.ConfigureMeasSignalType(self._vi, source1SignalType, source2SignalType)

    def ReadWaveformMeasurement(self, channel, measurementFunction, maxTime):
        """

        :param channel:
        :type channel:
        :param measurementFunction:
        :type measurementFunction:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadWaveformMeasurement(self._vi, channel, measurementFunction, maxTime)

    def ReadDelayMeasurement(
        self,
        measureSource1,
        measureSource2,
        delayEdge1,
        delayEdge2,
        delayDirection,
        maxTime,
    ):
        """

        :param measureSource1:
        :type measureSource1:
        :param measureSource2:
        :type measureSource2:
        :param delayEdge1:
        :type delayEdge1:
        :param delayEdge2:
        :type delayEdge2:
        :param delayDirection:
        :type delayDirection:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadDelayMeasurement(
            self._vi,
            measureSource1,
            measureSource2,
            delayEdge1,
            delayEdge2,
            delayDirection,
            maxTime,
        )

    def ReadPhaseMeasurement(self, measureSource1, measureSource2, maxTime):
        """

        :param measureSource1:
        :type measureSource1:
        :param measureSource2:
        :type measureSource2:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadPhaseMeasurement(self._vi, measureSource1, measureSource2, maxTime)

    def FetchWaveformMeasurement(self, channel, measurementFunction):
        """

        :param channel:
        :type channel:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.FetchWaveformMeasurement(self._vi, channel, measurementFunction)

    def FetchDelayMeasurement(self, measureSource1, measureSource2, delayEdge1, delayEdge2, delayDirection):
        """

        :param measureSource1:
        :type measureSource1:
        :param measureSource2:
        :type measureSource2:
        :param delayEdge1:
        :type delayEdge1:
        :param delayEdge2:
        :type delayEdge2:
        :param delayDirection:
        :type delayDirection:
        """
        return self._dllwrap.FetchDelayMeasurement(
            self._vi,
            measureSource1,
            measureSource2,
            delayEdge1,
            delayEdge2,
            delayDirection,
        )

    def FetchPhaseMeasurement(self, measureSource1, measureSource2):
        """

        :param measureSource1:
        :type measureSource1:
        :param measureSource2:
        :type measureSource2:
        """
        return self._dllwrap.FetchPhaseMeasurement(self._vi, measureSource1, measureSource2)

    def UnaryOperationEditor(self, function, inputExpression, bufferSize):
        """

        :param function:
        :type function:
        :param inputExpression:
        :type inputExpression:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.UnaryOperationEditor(self._vi, function, inputExpression, bufferSize)

    def BinaryOperationEditor(self, inputExpression1, inputOperator, inputExpression2, bufferSize):
        """

        :param inputExpression1:
        :type inputExpression1:
        :param inputOperator:
        :type inputOperator:
        :param inputExpression2:
        :type inputExpression2:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.BinaryOperationEditor(
            self._vi, inputExpression1, inputOperator, inputExpression2, bufferSize
        )

    def ConfigureMathChannel(self, channelName, source1, inputOperator, source2):
        """

        :param channelName:
        :type channelName:
        :param source1:
        :type source1:
        :param inputOperator:
        :type inputOperator:
        :param source2:
        :type source2:
        """
        return self._dllwrap.ConfigureMathChannel(self._vi, channelName, source1, inputOperator, source2)

    def ConfigureMathChannelAdvanced(self, channelName, expression):
        """

        :param channelName:
        :type channelName:
        :param expression:
        :type expression:
        """
        return self._dllwrap.ConfigureMathChannelAdvanced(self._vi, channelName, expression)

    def StoreWfmToRefChannel(self, sourceChannel, refChannel):
        """

        :param sourceChannel:
        :type sourceChannel:
        :param refChannel:
        :type refChannel:
        """
        return self._dllwrap.StoreWfmToRefChannel(self._vi, sourceChannel, refChannel)

    def ConfigureBusType(self, busNumber, type):
        """

        :param busNumber:
        :type busNumber:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureBusType(self._vi, busNumber, type)

    def ConfigureBusSPI(
        self,
        busNumber,
        shiftDirection,
        clockSource,
        clockPolarity,
        selectSource,
        selectPolarity,
        dataSource,
        dataPolarity,
        dataSize,
    ):
        """

        :param busNumber:
        :type busNumber:
        :param shiftDirection:
        :type shiftDirection:
        :param clockSource:
        :type clockSource:
        :param clockPolarity:
        :type clockPolarity:
        :param selectSource:
        :type selectSource:
        :param selectPolarity:
        :type selectPolarity:
        :param dataSource:
        :type dataSource:
        :param dataPolarity:
        :type dataPolarity:
        :param dataSize:
        :type dataSize:
        """
        return self._dllwrap.ConfigureBusSPI(
            self._vi,
            busNumber,
            shiftDirection,
            clockSource,
            clockPolarity,
            selectSource,
            selectPolarity,
            dataSource,
            dataPolarity,
            dataSize,
        )

    def ConfigureBusI2C(self, busNumber, clockSource, RWAddressEnable, dataSource):
        """

        :param busNumber:
        :type busNumber:
        :param clockSource:
        :type clockSource:
        :param RWAddressEnable:
        :type RWAddressEnable:
        :param dataSource:
        :type dataSource:
        """
        return self._dllwrap.ConfigureBusI2C(self._vi, busNumber, clockSource, RWAddressEnable, dataSource)

    def ConfigureBusParallel(self, busNumber, clockSource, clockEdge, clockEnable, sourcesString):
        """

        :param busNumber:
        :type busNumber:
        :param clockSource:
        :type clockSource:
        :param clockEdge:
        :type clockEdge:
        :param clockEnable:
        :type clockEnable:
        :param sourcesString:
        :type sourcesString:
        """
        return self._dllwrap.ConfigureBusParallel(
            self._vi, busNumber, clockSource, clockEdge, clockEnable, sourcesString
        )

    def ConfigureDigitalChannel(self, digitalChannel, threshold, enabled):
        """

        :param digitalChannel:
        :type digitalChannel:
        :param threshold:
        :type threshold:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDigitalChannel(self._vi, digitalChannel, threshold, enabled)

    def ConfigureCQChannel(self, CQChannel, CQThreshHold):
        """

        :param CQChannel:
        :type CQChannel:
        :param CQThreshHold:
        :type CQThreshHold:
        """
        return self._dllwrap.ConfigureCQChannel(self._vi, CQChannel, CQThreshHold)

    def AutoSetup(self):
        """"""
        return self._dllwrap.AutoSetup(self._vi)

    def IsInvalidWfmElement(self, elementValue):
        """

        :param elementValue:
        :type elementValue:
        """
        return self._dllwrap.IsInvalidWfmElement(self._vi, elementValue)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def GetError(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def GetNextInterchangeWarning(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def viWrite(self, buffer, count):
        """

        :param buffer:
        :type buffer:
        :param count:
        :type count:
        """
        return self._dllwrap.viWrite(self._vi, buffer, count)

    def viRead(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.viRead(self._vi, bufferSize)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """

        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def GetAttributeViInt32(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName, attribute, bufSize):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param bufSize:
        :type bufSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)
