from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import tkdpo7k_const as const
from .tkdpo7k_const import *


class tkdpo7k_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("tkdpo7k_32.dll", "tkdpo7k_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "tkdpo7k"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        _status = self.dll.tkdpo7k_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        _status = self.dll.tkdpo7k_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViConstString(optionString),
            byref(newVi),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(newVi.value)

    def close(self, vi):
        _status = self.dll.tkdpo7k_close(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkdpo7k_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.tkdpo7k_LockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.tkdpo7k_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def GetChannelName(self, vi, index, bufferSize):
        name = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkdpo7k_GetChannelName(ViSession(vi), ViInt32(index), ViInt32(bufferSize), name)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(name)

    def ConfigureAcquisitionType(self, vi, acquisitionType):
        _status = self.dll.tkdpo7k_ConfigureAcquisitionType(ViSession(vi), ViInt32(acquisitionType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAcquisitionRecord(self, vi, timePerRecord, minimumRecordLength, acqStartTime):
        _status = self.dll.tkdpo7k_ConfigureAcquisitionRecord(
            ViSession(vi),
            ViReal64(timePerRecord),
            ViInt32(minimumRecordLength),
            ViReal64(acqStartTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNumAverages(self, vi, numberOfAverages):
        _status = self.dll.tkdpo7k_ConfigureNumAverages(ViSession(vi), ViInt32(numberOfAverages))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNumEnvelopes(self, vi, numberOfEnvelopes):
        _status = self.dll.tkdpo7k_ConfigureNumEnvelopes(ViSession(vi), ViInt32(numberOfEnvelopes))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNumSamples(self, vi, numberOfSamples):
        _status = self.dll.tkdpo7k_ConfigureNumSamples(ViSession(vi), ViInt32(numberOfSamples))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SampleMode(self, vi):
        sampleMode = ViInt32()
        _status = self.dll.tkdpo7k_SampleMode(ViSession(vi), byref(sampleMode))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(sampleMode.value)

    def SampleRate(self, vi):
        sampleRate = ViReal64()
        _status = self.dll.tkdpo7k_SampleRate(ViSession(vi), byref(sampleRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(sampleRate.value)

    def ActualRecordLength(self, vi):
        actualRecordLength = ViInt32()
        _status = self.dll.tkdpo7k_ActualRecordLength(ViSession(vi), byref(actualRecordLength))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(actualRecordLength.value)

    def ConfigureInitiateContinuous(self, vi, continuous):
        _status = self.dll.tkdpo7k_ConfigureInitiateContinuous(ViSession(vi), ViBoolean(continuous))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannel(self, vi, channel, range, offset, coupling, probeAttenuation, enabled):
        _status = self.dll.tkdpo7k_ConfigureChannel(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(range),
            ViReal64(offset),
            ViInt32(coupling),
            ViReal64(probeAttenuation),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChanCharacteristics(self, vi, channel, inputImpedance, maxInputFrequency):
        _status = self.dll.tkdpo7k_ConfigureChanCharacteristics(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(inputImpedance),
            ViReal64(maxInputFrequency),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutoProbeSenseValue(self, vi, channel):
        autoProbeSenseValue = ViReal64()
        _status = self.dll.tkdpo7k_AutoProbeSenseValue(
            ViSession(vi), ViConstString(channel), byref(autoProbeSenseValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(autoProbeSenseValue.value)

    def ConfigureTrigger(self, vi, triggerType, holdoff):
        _status = self.dll.tkdpo7k_ConfigureTrigger(ViSession(vi), ViInt32(triggerType), ViReal64(holdoff))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayTrigger(
        self,
        vi,
        triggerState,
        triggerType,
        triggerMode,
        delayTriggerTime,
        delayTriggerEvent,
    ):
        _status = self.dll.tkdpo7k_ConfigureDelayTrigger(
            ViSession(vi),
            ViBoolean(triggerState),
            ViInt32(triggerType),
            ViInt32(triggerMode),
            ViReal64(delayTriggerTime),
            ViInt32(delayTriggerEvent),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerCoupling(self, vi, coupling):
        _status = self.dll.tkdpo7k_ConfigureTriggerCoupling(ViSession(vi), ViInt32(coupling))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayTriggerCoupling(self, vi, coupling):
        _status = self.dll.tkdpo7k_ConfigureDelayTriggerCoupling(ViSession(vi), ViInt32(coupling))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerModifier(self, vi, modifier):
        _status = self.dll.tkdpo7k_ConfigureTriggerModifier(ViSession(vi), ViInt32(modifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEdgeTriggerSource(self, vi, source, level, slope):
        _status = self.dll.tkdpo7k_ConfigureEdgeTriggerSource(
            ViSession(vi), ViConstString(source), ViReal64(level), ViInt32(slope)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayEdgeTriggerSource(self, vi, source, level, slope):
        _status = self.dll.tkdpo7k_ConfigureDelayEdgeTriggerSource(
            ViSession(vi), ViConstString(source), ViReal64(level), ViInt32(slope)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAcLineTriggerSlope(self, vi, acLineSlope):
        _status = self.dll.tkdpo7k_ConfigureAcLineTriggerSlope(ViSession(vi), ViInt32(acLineSlope))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTVTriggerSource(self, vi, source, TVSignalFormat, TVEvent, TVPolarity):
        _status = self.dll.tkdpo7k_ConfigureTVTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViInt32(TVSignalFormat),
            ViInt32(TVEvent),
            ViInt32(TVPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTVTriggerLineNumber(self, vi, lineNumber):
        _status = self.dll.tkdpo7k_ConfigureTVTriggerLineNumber(ViSession(vi), ViInt32(lineNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTVTriggerCustomFormat(self, vi, scanType, linePeriod, syncInternal):
        _status = self.dll.tkdpo7k_ConfigureTVTriggerCustomFormat(
            ViSession(vi), ViInt32(scanType), ViReal64(linePeriod), ViReal64(syncInternal)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRuntTriggerSource(self, vi, source, runtLowThreshold, runtHighThreshold, runtPolarity):
        _status = self.dll.tkdpo7k_ConfigureRuntTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(runtLowThreshold),
            ViReal64(runtHighThreshold),
            ViInt32(runtPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayRuntTriggerSource(self, vi, source, runtLowThreshold, runtHighThreshold, runtPolarity):
        _status = self.dll.tkdpo7k_ConfigureDelayRuntTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(runtLowThreshold),
            ViReal64(runtHighThreshold),
            ViInt32(runtPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRuntTriggerCondition(self, vi, condition, width, triggerIf):
        _status = self.dll.tkdpo7k_ConfigureRuntTriggerCondition(
            ViSession(vi), ViInt32(condition), ViReal64(width), ViInt32(triggerIf)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigDelayRuntTriggerCondition(self, vi, condition, width, triggerIf):
        _status = self.dll.tkdpo7k_ConfigDelayRuntTriggerCondition(
            ViSession(vi), ViInt32(condition), ViReal64(width), ViInt32(triggerIf)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGlitchTriggerSource(self, vi, source, level, glitchWidth, glitchPolarity, glitchCondition):
        _status = self.dll.tkdpo7k_ConfigureGlitchTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViReal64(glitchWidth),
            ViInt32(glitchPolarity),
            ViInt32(glitchCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigDelayGlitchTriggerSource(self, vi, source, level, glitchWidth, glitchPolarity, glitchCondition):
        _status = self.dll.tkdpo7k_ConfigDelayGlitchTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViReal64(glitchWidth),
            ViInt32(glitchPolarity),
            ViInt32(glitchCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGlitchTriggerIf(self, vi, glitchTriggerIf):
        _status = self.dll.tkdpo7k_ConfigureGlitchTriggerIf(ViSession(vi), ViInt32(glitchTriggerIf))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayGlitchTriggerIf(self, vi, glitchTriggerIf):
        _status = self.dll.tkdpo7k_ConfigureDelayGlitchTriggerIf(ViSession(vi), ViInt32(glitchTriggerIf))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWidthTriggerSource(
        self,
        vi,
        source,
        level,
        widthLowThreshold,
        widthHighThreshold,
        widthPolarity,
        widthCondition,
    ):
        _status = self.dll.tkdpo7k_ConfigureWidthTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViReal64(widthLowThreshold),
            ViReal64(widthHighThreshold),
            ViInt32(widthPolarity),
            ViInt32(widthCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigDelayWidthTriggerSource(
        self,
        vi,
        source,
        level,
        widthLowThreshold,
        widthHighThreshold,
        widthPolarity,
        widthCondition,
    ):
        _status = self.dll.tkdpo7k_ConfigDelayWidthTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViReal64(widthLowThreshold),
            ViReal64(widthHighThreshold),
            ViInt32(widthPolarity),
            ViInt32(widthCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWidthTriggerIf(self, vi, widthTriggerIf):
        _status = self.dll.tkdpo7k_ConfigureWidthTriggerIf(ViSession(vi), ViInt32(widthTriggerIf))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayWidthTriggerIf(self, vi, widthTriggerIf):
        _status = self.dll.tkdpo7k_ConfigureDelayWidthTriggerIf(ViSession(vi), ViInt32(widthTriggerIf))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTimeoutTriggerSource(self, vi, source, level, timeoutTime, timeoutPolarity):
        _status = self.dll.tkdpo7k_ConfigureTimeoutTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViReal64(timeoutTime),
            ViInt32(timeoutPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigDelayTimeoutTriggerSource(self, vi, source, level, timeoutTime, timeoutPolarity):
        _status = self.dll.tkdpo7k_ConfigDelayTimeoutTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViReal64(timeoutTime),
            ViInt32(timeoutPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTimeoutTriggerIf(self, vi, timeoutTriggerIf):
        _status = self.dll.tkdpo7k_ConfigureTimeoutTriggerIf(ViSession(vi), ViInt32(timeoutTriggerIf))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayTimeoutTriggerIf(self, vi, timeoutTriggerIf):
        _status = self.dll.tkdpo7k_ConfigureDelayTimeoutTriggerIf(ViSession(vi), ViInt32(timeoutTriggerIf))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigTransitionTriggerSource(
        self,
        vi,
        source,
        transitionLowThreshold,
        transitionHighThreshold,
        transitionDeltaTime,
        transitionPolarity,
        transitionCondition,
    ):
        _status = self.dll.tkdpo7k_ConfigTransitionTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(transitionLowThreshold),
            ViReal64(transitionHighThreshold),
            ViReal64(transitionDeltaTime),
            ViInt32(transitionPolarity),
            ViInt32(transitionCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigDelayTransitionTriggerSrc(
        self,
        vi,
        source,
        transitionLowThreshold,
        transitionHighThreshold,
        transitionDeltaTime,
        transitionPolarity,
        transitionCondition,
    ):
        _status = self.dll.tkdpo7k_ConfigDelayTransitionTriggerSrc(
            ViSession(vi),
            ViConstString(source),
            ViReal64(transitionLowThreshold),
            ViReal64(transitionHighThreshold),
            ViReal64(transitionDeltaTime),
            ViInt32(transitionPolarity),
            ViInt32(transitionCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTransitionTriggerIf(self, vi, transitionTriggerIf):
        _status = self.dll.tkdpo7k_ConfigureTransitionTriggerIf(ViSession(vi), ViInt32(transitionTriggerIf))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayTransitionTriggerIf(self, vi, transitionTriggerIf):
        _status = self.dll.tkdpo7k_ConfigureDelayTransitionTriggerIf(ViSession(vi), ViInt32(transitionTriggerIf))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWindowTriggerSource(
        self,
        vi,
        source,
        windowLowThreshold,
        windowHighThreshold,
        windowWidth,
        windowCondition,
    ):
        _status = self.dll.tkdpo7k_ConfigureWindowTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(windowLowThreshold),
            ViReal64(windowHighThreshold),
            ViReal64(windowWidth),
            ViInt32(windowCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigDelayWindowTriggerSource(
        self,
        vi,
        source,
        windowLowThreshold,
        windowHighThreshold,
        windowWidth,
        windowCondition,
    ):
        _status = self.dll.tkdpo7k_ConfigDelayWindowTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(windowLowThreshold),
            ViReal64(windowHighThreshold),
            ViReal64(windowWidth),
            ViInt32(windowCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWindowTriggerIf(self, vi, windowTriggerIf):
        _status = self.dll.tkdpo7k_ConfigureWindowTriggerIf(ViSession(vi), ViInt32(windowTriggerIf))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayWindowTriggerIf(self, vi, windowTriggerIf):
        _status = self.dll.tkdpo7k_ConfigureDelayWindowTriggerIf(ViSession(vi), ViInt32(windowTriggerIf))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternTrigger(self, vi, patternFunction, patternMoreTime, patternLessTime, patternCondition):
        _status = self.dll.tkdpo7k_ConfigurePatternTrigger(
            ViSession(vi),
            ViInt32(patternFunction),
            ViReal64(patternMoreTime),
            ViReal64(patternLessTime),
            ViInt32(patternCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayPatternTrigger(self, vi, patternFunction, patternMoreTime, patternLessTime, patternCondition):
        _status = self.dll.tkdpo7k_ConfigureDelayPatternTrigger(
            ViSession(vi),
            ViInt32(patternFunction),
            ViReal64(patternMoreTime),
            ViReal64(patternLessTime),
            ViInt32(patternCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternTriggerInput(self, vi, channelName, inputPolarity, inputLevel):
        _status = self.dll.tkdpo7k_ConfigurePatternTriggerInput(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(inputPolarity),
            ViReal64(inputLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigDelayPatternTriggerInput(self, vi, channelName, inputPolarity, inputLevel):
        _status = self.dll.tkdpo7k_ConfigDelayPatternTriggerInput(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(inputPolarity),
            ViReal64(inputLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureStateTrigger(self, vi, stateFunction, stateCondition):
        _status = self.dll.tkdpo7k_ConfigureStateTrigger(ViSession(vi), ViInt32(stateFunction), ViInt32(stateCondition))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayStateTrigger(self, vi, stateFunction, stateCondition):
        _status = self.dll.tkdpo7k_ConfigureDelayStateTrigger(
            ViSession(vi), ViInt32(stateFunction), ViInt32(stateCondition)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureStateTriggerInput(self, vi, channelName, inputPolarity, inputLevel):
        _status = self.dll.tkdpo7k_ConfigureStateTriggerInput(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(inputPolarity),
            ViReal64(inputLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayStateTriggerInput(self, vi, channelName, inputPolarity, inputLevel):
        _status = self.dll.tkdpo7k_ConfigureDelayStateTriggerInput(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(inputPolarity),
            ViReal64(inputLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureStateTriggerClockEdge(self, vi, channelName, clockEdge):
        _status = self.dll.tkdpo7k_ConfigureStateTriggerClockEdge(
            ViSession(vi), ViConstString(channelName), ViInt32(clockEdge)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CfgDelayStateTriggerClockEdge(self, vi, channelName, clockEdge):
        _status = self.dll.tkdpo7k_CfgDelayStateTriggerClockEdge(
            ViSession(vi), ViConstString(channelName), ViInt32(clockEdge)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSetholdTriggerSource(
        self,
        vi,
        dataSource,
        clockSource,
        dataLevel,
        clockLevel,
        clockEdge,
        setupTime,
        holdTime,
    ):
        _status = self.dll.tkdpo7k_ConfigureSetholdTriggerSource(
            ViSession(vi),
            ViConstString(dataSource),
            ViConstString(clockSource),
            ViReal64(dataLevel),
            ViReal64(clockLevel),
            ViInt32(clockEdge),
            ViReal64(setupTime),
            ViReal64(holdTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigDelaySetholdTriggerSource(
        self,
        vi,
        dataSource,
        clockSource,
        dataLevel,
        clockLevel,
        clockEdge,
        setupTime,
        holdTime,
    ):
        _status = self.dll.tkdpo7k_ConfigDelaySetholdTriggerSource(
            ViSession(vi),
            ViConstString(dataSource),
            ViConstString(clockSource),
            ViReal64(dataLevel),
            ViReal64(clockLevel),
            ViInt32(clockEdge),
            ViReal64(setupTime),
            ViReal64(holdTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSetholdTriggerIf(self, vi, triggerIf):
        _status = self.dll.tkdpo7k_ConfigureSetholdTriggerIf(ViSession(vi), ViInt32(triggerIf))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelaySetholdTriggerIf(self, vi, triggerIf):
        _status = self.dll.tkdpo7k_ConfigureDelaySetholdTriggerIf(ViSession(vi), ViInt32(triggerIf))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCommTriggerSource(self, vi, triggerSource, coding, standard, sourceType, clockPolarity, pulseForm):
        _status = self.dll.tkdpo7k_ConfigureCommTriggerSource(
            ViSession(vi),
            ViConstString(triggerSource),
            ViInt32(coding),
            ViInt32(standard),
            ViInt32(sourceType),
            ViInt32(clockPolarity),
            ViInt32(pulseForm),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCommAMIThreshold(self, vi, lowThreshold, highThreshold):
        _status = self.dll.tkdpo7k_ConfigureCommAMIThreshold(
            ViSession(vi), ViReal64(lowThreshold), ViReal64(highThreshold)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANTriggerSource(self, vi, dataSource, dataLevel, signalType, bitRate, frameType, condition):
        _status = self.dll.tkdpo7k_ConfigureCANTriggerSource(
            ViSession(vi),
            ViConstString(dataSource),
            ViReal64(dataLevel),
            ViInt32(signalType),
            ViReal64(bitRate),
            ViInt32(frameType),
            ViInt32(condition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANTriggerData(self, vi, dataDirection, dataValue):
        _status = self.dll.tkdpo7k_ConfigureCANTriggerData(
            ViSession(vi), ViInt32(dataDirection), ViConstString(dataValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCANTriggerID(self, vi, idMode, idValue):
        _status = self.dll.tkdpo7k_ConfigureCANTriggerID(ViSession(vi), ViInt32(idMode), ViConstString(idValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CTriggerSource(self, vi, dataSource, dataLevel, clockSource, clockLevel, condition):
        _status = self.dll.tkdpo7k_ConfigureI2CTriggerSource(
            ViSession(vi),
            ViConstString(dataSource),
            ViReal64(dataLevel),
            ViConstString(clockSource),
            ViReal64(clockLevel),
            ViInt32(condition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CTriggerData(self, vi, dataDirection, dataStart, dataValue):
        _status = self.dll.tkdpo7k_ConfigureI2CTriggerData(
            ViSession(vi),
            ViInt32(dataDirection),
            ViInt32(dataStart),
            ViConstString(dataValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureI2CTriggerAddress(self, vi, addrType, addrMode, addrValue):
        _status = self.dll.tkdpo7k_ConfigureI2CTriggerAddress(
            ViSession(vi), ViInt32(addrType), ViInt32(addrMode), ViConstString(addrValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRS232TriggerSource(self, vi, dataSource, dataLevel, parity, baudRate):
        _status = self.dll.tkdpo7k_ConfigureRS232TriggerSource(
            ViSession(vi),
            ViConstString(dataSource),
            ViReal64(dataLevel),
            ViInt32(parity),
            ViReal64(baudRate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRS232TriggerData(self, vi, dataValue):
        _status = self.dll.tkdpo7k_ConfigureRS232TriggerData(ViSession(vi), ViConstString(dataValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialTriggerSource(
        self,
        vi,
        dataSource,
        dataLevel,
        clockSource,
        clockLevel,
        clockPolarity,
        standard,
        code,
    ):
        _status = self.dll.tkdpo7k_ConfigureSerialTriggerSource(
            ViSession(vi),
            ViConstString(dataSource),
            ViReal64(dataLevel),
            ViConstString(clockSource),
            ViReal64(clockLevel),
            ViInt32(clockPolarity),
            ViInt32(standard),
            ViInt32(code),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSerialTriggerData(self, vi, dataValue):
        _status = self.dll.tkdpo7k_ConfigureSerialTriggerData(ViSession(vi), ViConstString(dataValue))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CfgSerialTriggerCustomBitRate(self, vi, bitRate):
        _status = self.dll.tkdpo7k_CfgSerialTriggerCustomBitRate(ViSession(vi), ViReal64(bitRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPITriggerSource(self, vi, MOSISource, MISOSource, SCLKSource, SSSource, condition):
        _status = self.dll.tkdpo7k_ConfigureSPITriggerSource(
            ViSession(vi),
            ViConstString(MOSISource),
            ViConstString(MISOSource),
            ViConstString(SCLKSource),
            ViConstString(SSSource),
            ViInt32(condition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPITriggerData(self, vi, MOSIValue, MISOValue, dataStart):
        _status = self.dll.tkdpo7k_ConfigureSPITriggerData(
            ViSession(vi),
            ViConstString(MOSIValue),
            ViConstString(MISOValue),
            ViInt32(dataStart),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPITriggerMOSI(self, vi, MOSIPolarity, MOSILevel):
        _status = self.dll.tkdpo7k_ConfigureSPITriggerMOSI(ViSession(vi), ViInt32(MOSIPolarity), ViReal64(MOSILevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPITriggerMISO(self, vi, MISOPolarity, MISOLevel):
        _status = self.dll.tkdpo7k_ConfigureSPITriggerMISO(ViSession(vi), ViInt32(MISOPolarity), ViReal64(MISOLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPITriggerSS(self, vi, SSPolarity, SSLevel):
        _status = self.dll.tkdpo7k_ConfigureSPITriggerSS(ViSession(vi), ViInt32(SSPolarity), ViReal64(SSLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSPITriggerSCLK(self, vi, SCLKPolarity, SCLKLevel):
        _status = self.dll.tkdpo7k_ConfigureSPITriggerSCLK(ViSession(vi), ViInt32(SCLKPolarity), ViReal64(SCLKLevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadWaveform(self, vi, channel, waveformSize, maxTime):
        waveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tkdpo7k_ReadWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            ViInt32(maxTime),
            waveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveform = list(waveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveform, actualPoints, initialX, xIncrement

    def InitiateAcquisition(self, vi):
        _status = self.dll.tkdpo7k_InitiateAcquisition(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AcquisitionStatus(self, vi):
        status = ViInt32()
        _status = self.dll.tkdpo7k_AcquisitionStatus(ViSession(vi), byref(status))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(status.value)

    def Abort(self, vi):
        _status = self.dll.tkdpo7k_Abort(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FetchWaveform(self, vi, channel, waveformSize):
        waveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tkdpo7k_FetchWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            waveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveform = list(waveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveform, actualPoints, initialX, xIncrement

    def ReadMinMaxWaveform(self, vi, channel, waveformSize, maxTime):
        minWaveform = ARRAY_ViReal64(waveformSize)
        maxWaveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tkdpo7k_ReadMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            ViInt32(maxTime),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def FetchMinMaxWaveform(self, vi, channel, waveformSize):
        minWaveform = ARRAY_ViReal64(waveformSize)
        maxWaveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tkdpo7k_FetchMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def ConfigureRefLevels(self, vi, lowRef, midRef, highRef):
        _status = self.dll.tkdpo7k_ConfigureRefLevels(
            ViSession(vi), ViReal64(lowRef), ViReal64(midRef), ViReal64(highRef)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayRefLevels(self, vi, mid2):
        _status = self.dll.tkdpo7k_ConfigureDelayRefLevels(ViSession(vi), ViReal64(mid2))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRefCalcMethod(self, vi, referenceLevelCalcMethod):
        _status = self.dll.tkdpo7k_ConfigureRefCalcMethod(ViSession(vi), ViInt32(referenceLevelCalcMethod))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasSignalType(self, vi, source1SignalType, source2SignalType):
        _status = self.dll.tkdpo7k_ConfigureMeasSignalType(
            ViSession(vi), ViInt32(source1SignalType), ViInt32(source2SignalType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadWaveformMeasurement(self, vi, channel, measurementFunction, maxTime):
        measurement = ViReal64()
        _status = self.dll.tkdpo7k_ReadWaveformMeasurement(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(measurementFunction),
            ViInt32(maxTime),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def ReadDelayMeasurement(
        self,
        vi,
        measureSource1,
        measureSource2,
        delayEdge1,
        delayEdge2,
        delayDirection,
        maxTime,
    ):
        measurement = ViReal64()
        _status = self.dll.tkdpo7k_ReadDelayMeasurement(
            ViSession(vi),
            ViConstString(measureSource1),
            ViConstString(measureSource2),
            ViInt32(delayEdge1),
            ViInt32(delayEdge2),
            ViInt32(delayDirection),
            ViInt32(maxTime),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def ReadPhaseMeasurement(self, vi, measureSource1, measureSource2, maxTime):
        measurement = ViReal64()
        _status = self.dll.tkdpo7k_ReadPhaseMeasurement(
            ViSession(vi),
            ViConstString(measureSource1),
            ViConstString(measureSource2),
            ViInt32(maxTime),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def FetchWaveformMeasurement(self, vi, channel, measurementFunction):
        measurement = ViReal64()
        _status = self.dll.tkdpo7k_FetchWaveformMeasurement(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(measurementFunction),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def FetchDelayMeasurement(self, vi, measureSource1, measureSource2, delayEdge1, delayEdge2, delayDirection):
        measurement = ViReal64()
        _status = self.dll.tkdpo7k_FetchDelayMeasurement(
            ViSession(vi),
            ViConstString(measureSource1),
            ViConstString(measureSource2),
            ViInt32(delayEdge1),
            ViInt32(delayEdge2),
            ViInt32(delayDirection),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def FetchPhaseMeasurement(self, vi, measureSource1, measureSource2):
        measurement = ViReal64()
        _status = self.dll.tkdpo7k_FetchPhaseMeasurement(
            ViSession(vi),
            ViConstString(measureSource1),
            ViConstString(measureSource2),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def UnaryOperationEditor(self, vi, function, inputExpression, bufferSize):
        outputExpression = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkdpo7k_UnaryOperationEditor(
            ViSession(vi),
            ViInt32(function),
            ViString(inputExpression),
            ViInt32(bufferSize),
            outputExpression,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(outputExpression)

    def BinaryOperationEditor(self, vi, inputExpression1, inputOperator, inputExpression2, bufferSize):
        outputExpression = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkdpo7k_BinaryOperationEditor(
            ViSession(vi),
            ViString(inputExpression1),
            ViInt32(inputOperator),
            ViString(inputExpression2),
            ViInt32(bufferSize),
            outputExpression,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(outputExpression)

    def ConfigureMathChannel(self, vi, channelName, source1, inputOperator, source2):
        _status = self.dll.tkdpo7k_ConfigureMathChannel(
            ViSession(vi),
            ViConstString(channelName),
            ViConstString(source1),
            ViInt32(inputOperator),
            ViConstString(source2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathChannelAdvanced(self, vi, channelName, expression):
        _status = self.dll.tkdpo7k_ConfigureMathChannelAdvanced(
            ViSession(vi), ViConstString(channelName), ViConstString(expression)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def StoreWfmToRefChannel(self, vi, sourceChannel, refChannel):
        _status = self.dll.tkdpo7k_StoreWfmToRefChannel(
            ViSession(vi), ViConstString(sourceChannel), ViConstString(refChannel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBusType(self, vi, busNumber, type):
        _status = self.dll.tkdpo7k_ConfigureBusType(ViSession(vi), ViInt32(busNumber), ViInt32(type))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBusSPI(
        self,
        vi,
        busNumber,
        shiftDirection,
        clockSource,
        clockPolarity,
        selectSource,
        selectPolarity,
        dataSource,
        dataPolarity,
        dataSize,
    ):
        _status = self.dll.tkdpo7k_ConfigureBusSPI(
            ViSession(vi),
            ViInt32(busNumber),
            ViInt32(shiftDirection),
            ViInt32(clockSource),
            ViInt32(clockPolarity),
            ViInt32(selectSource),
            ViInt32(selectPolarity),
            ViInt32(dataSource),
            ViInt32(dataPolarity),
            ViInt32(dataSize),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBusI2C(self, vi, busNumber, clockSource, RWAddressEnable, dataSource):
        _status = self.dll.tkdpo7k_ConfigureBusI2C(
            ViSession(vi),
            ViInt32(busNumber),
            ViInt32(clockSource),
            ViBoolean(RWAddressEnable),
            ViInt32(dataSource),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBusParallel(self, vi, busNumber, clockSource, clockEdge, clockEnable, sourcesString):
        _status = self.dll.tkdpo7k_ConfigureBusParallel(
            ViSession(vi),
            ViInt32(busNumber),
            ViInt32(clockSource),
            ViInt32(clockEdge),
            ViBoolean(clockEnable),
            ViString(sourcesString),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDigitalChannel(self, vi, digitalChannel, threshold, enabled):
        _status = self.dll.tkdpo7k_ConfigureDigitalChannel(
            ViSession(vi),
            ViConstString(digitalChannel),
            ViReal64(threshold),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCQChannel(self, vi, CQChannel, CQThreshHold):
        _status = self.dll.tkdpo7k_ConfigureCQChannel(ViSession(vi), ViConstString(CQChannel), ViReal64(CQThreshHold))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutoSetup(self, vi):
        _status = self.dll.tkdpo7k_AutoSetup(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IsInvalidWfmElement(self, vi, elementValue):
        isInvalid = ViBoolean()
        _status = self.dll.tkdpo7k_IsInvalidWfmElement(ViSession(vi), ViReal64(elementValue), byref(isInvalid))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(isInvalid.value)

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        _status = self.dll.tkdpo7k_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def GetError(self, vi, bufferSize):
        code = ViStatus()
        description = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkdpo7k_GetError(ViSession(vi), byref(code), ViInt32(bufferSize), description)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        description = decode(description)
        return code, description

    def ClearError(self, vi):
        _status = self.dll.tkdpo7k_ClearError(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        _status = self.dll.tkdpo7k_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(errorMessage)

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkdpo7k_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        _status = self.dll.tkdpo7k_ResetInterchangeCheck(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearInterchangeWarnings(self, vi):
        _status = self.dll.tkdpo7k_ClearInterchangeWarnings(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InvalidateAllAttributes(self, vi):
        _status = self.dll.tkdpo7k_InvalidateAllAttributes(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def reset(self, vi):
        _status = self.dll.tkdpo7k_reset(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetWithDefaults(self, vi):
        _status = self.dll.tkdpo7k_ResetWithDefaults(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        _status = self.dll.tkdpo7k_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        _status = self.dll.tkdpo7k_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def Disable(self, vi):
        _status = self.dll.tkdpo7k_Disable(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def viWrite(self, vi, buffer, count):
        _buffer = (ViByte * len(buffer))(*buffer)
        returnCount = ViInt64()
        _status = self.dll.tkdpo7k_viWrite(ViSession(vi), _buffer, ViInt64(count), byref(returnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(returnCount.value)

    def viRead(self, vi, bufferSize):
        buffer = ARRAY_ViByte(bufferSize)
        returnCount = ViInt64()
        _status = self.dll.tkdpo7k_viRead(ViSession(vi), ViInt64(bufferSize), buffer, byref(returnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnCount = int(returnCount.value)
        return buffer, returnCount

    def WriteInstrData(self, vi, writeBuffer):
        _status = self.dll.tkdpo7k_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        _status = self.dll.tkdpo7k_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        _status = self.dll.tkdpo7k_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        _status = self.dll.tkdpo7k_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(bufSize)
        _status = self.dll.tkdpo7k_GetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViInt32(bufSize),
            value,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        _status = self.dll.tkdpo7k_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        _status = self.dll.tkdpo7k_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.tkdpo7k_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.tkdpo7k_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.tkdpo7k_SetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.tkdpo7k_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.tkdpo7k_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.tkdpo7k_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.tkdpo7k_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.tkdpo7k_CheckAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.tkdpo7k_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.tkdpo7k_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
