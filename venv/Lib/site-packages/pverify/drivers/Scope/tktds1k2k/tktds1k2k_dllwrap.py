from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import tktds1k2k_const as const
from .tktds1k2k_const import *


class tktds1k2k_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("tktds1k2k_32.dll", "tktds1k2k_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "tktds1k2k"

    @property
    def const(self):
        return const

    def GetErrorInfo(self, vi):
        primaryError = ViStatus()
        secondaryError = ViStatus()
        errorElaboration = ARRAY_ViChar(256)
        _status = self.dll.tktds1k2k_GetErrorInfo(
            ViSession(vi), byref(primaryError), byref(secondaryError), errorElaboration
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorElaboration = decode(errorElaboration)
        return primaryError, secondaryError, errorElaboration

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        _status = self.dll.tktds1k2k_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        _status = self.dll.tktds1k2k_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViConstString(optionString),
            byref(newVi),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(newVi.value)

    def close(self, vi):
        _status = self.dll.tktds1k2k_close(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(bufferSize)
        _status = self.dll.tktds1k2k_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(record)

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(bufferSize)
        _status = self.dll.tktds1k2k_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        _status = self.dll.tktds1k2k_ResetInterchangeCheck(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearInterchangeWarnings(self, vi):
        _status = self.dll.tktds1k2k_ClearInterchangeWarnings(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.tktds1k2k_LockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.tktds1k2k_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def ConfigureChannel(self, vi, channel, range, offset, coupling, probeAttenuation, enabled):
        _status = self.dll.tktds1k2k_ConfigureChannel(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(range),
            ViReal64(offset),
            ViInt32(coupling),
            ViReal64(probeAttenuation),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChanCharacteristics(self, vi, channel, inputImpedance, maxInputFrequency):
        _status = self.dll.tktds1k2k_ConfigureChanCharacteristics(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(inputImpedance),
            ViReal64(maxInputFrequency),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChannelPosition(self, vi, channel, vertPosition):
        _status = self.dll.tktds1k2k_ConfigureChannelPosition(
            ViSession(vi), ViConstString(channel), ViReal64(vertPosition)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTrigger(self, vi, triggerType, holdoff):
        _status = self.dll.tktds1k2k_ConfigureTrigger(ViSession(vi), ViInt32(triggerType), ViReal64(holdoff))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerCoupling(self, vi, coupling):
        _status = self.dll.tktds1k2k_ConfigureTriggerCoupling(ViSession(vi), ViInt32(coupling))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerModifier(self, vi, modifier):
        _status = self.dll.tktds1k2k_ConfigureTriggerModifier(ViSession(vi), ViInt32(modifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEdgeTriggerSource(self, vi, source, level, slope):
        _status = self.dll.tktds1k2k_ConfigureEdgeTriggerSource(
            ViSession(vi), ViConstString(source), ViReal64(level), ViInt32(slope)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTVTriggerSource(self, vi, source, TVSignalFormat, TVEvent, TVPolarity):
        _status = self.dll.tktds1k2k_ConfigureTVTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViInt32(TVSignalFormat),
            ViInt32(TVEvent),
            ViInt32(TVPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTVTriggerLineNumber(self, vi, TVTriggerLine):
        _status = self.dll.tktds1k2k_ConfigureTVTriggerLineNumber(ViSession(vi), ViInt32(TVTriggerLine))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAcLineTriggerSlope(self, vi, acLineTriggerSlope):
        _status = self.dll.tktds1k2k_ConfigureAcLineTriggerSlope(ViSession(vi), ViInt32(acLineTriggerSlope))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGlitchTriggerSource(self, vi, source, level, glitchWidth, glitchPolarity, glitchCondition):
        _status = self.dll.tktds1k2k_ConfigureGlitchTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViReal64(glitchWidth),
            ViInt32(glitchPolarity),
            ViInt32(glitchCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MainTriggerFrequency(self, vi):
        trigFreq = ViReal64()
        _status = self.dll.tktds1k2k_MainTriggerFrequency(ViSession(vi), byref(trigFreq))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(trigFreq.value)

    def ConfigureAcquisitionType(self, vi, acquisitionType):
        _status = self.dll.tktds1k2k_ConfigureAcquisitionType(ViSession(vi), ViInt32(acquisitionType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNumAverages(self, vi, numberOfAverages):
        _status = self.dll.tktds1k2k_ConfigureNumAverages(ViSession(vi), ViInt32(numberOfAverages))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAcquisitionRecord(self, vi, timePerRecord, minimumRecordLength, acquisitionStartTime):
        _status = self.dll.tktds1k2k_ConfigureAcquisitionRecord(
            ViSession(vi),
            ViReal64(timePerRecord),
            ViInt32(minimumRecordLength),
            ViReal64(acquisitionStartTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ActualRecordLength(self, vi):
        actualRecordLength = ViInt32()
        _status = self.dll.tktds1k2k_ActualRecordLength(ViSession(vi), byref(actualRecordLength))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(actualRecordLength.value)

    def ConfigureInitiateContinuous(self, vi, continuous):
        _status = self.dll.tktds1k2k_ConfigureInitiateContinuous(ViSession(vi), ViBoolean(continuous))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SendSWTrigger(self, vi):
        _status = self.dll.tktds1k2k_SendSWTrigger(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadWaveform(self, vi, channel, waveformSize, maxTime):
        waveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tktds1k2k_ReadWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            ViInt32(maxTime),
            waveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveform = list(waveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveform, actualPoints, initialX, xIncrement

    def InitiateAcquisition(self, vi):
        _status = self.dll.tktds1k2k_InitiateAcquisition(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AcquisitionStatus(self, vi):
        status = ViInt32()
        _status = self.dll.tktds1k2k_AcquisitionStatus(ViSession(vi), byref(status))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(status.value)

    def Abort(self, vi):
        _status = self.dll.tktds1k2k_Abort(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FetchWaveform(self, vi, channel, waveformSize):
        waveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tktds1k2k_FetchWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            waveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveform = list(waveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveform, actualPoints, initialX, xIncrement

    def ReadMinMaxWaveform(self, vi, channel, waveformSize, maxTime):
        minWaveform = ARRAY_ViReal64(waveformSize)
        maxWaveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tktds1k2k_ReadMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            ViInt32(maxTime),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def FetchMinMaxWaveform(self, vi, channel, waveformSize):
        minWaveform = ARRAY_ViReal64(waveformSize)
        maxWaveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tktds1k2k_FetchMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def SampleRate(self, vi):
        sampleRate = ViReal64()
        _status = self.dll.tktds1k2k_SampleRate(ViSession(vi), byref(sampleRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(sampleRate.value)

    def ConfigureMeasurementGating(self, vi, enableMeasurementGating):
        _status = self.dll.tktds1k2k_ConfigureMeasurementGating(ViSession(vi), ViBoolean(enableMeasurementGating))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRefLevels(self, vi, low, mid, high):
        _status = self.dll.tktds1k2k_ConfigureRefLevels(ViSession(vi), ViReal64(low), ViReal64(mid), ViReal64(high))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementSnapshot(self, vi, source, snapshotAction):
        _status = self.dll.tktds1k2k_ConfigureMeasurementSnapshot(
            ViSession(vi), ViInt32(source), ViInt32(snapshotAction)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadWaveformMeasurement(self, vi, channel, measurementFunction, maxTime):
        measurement = ViReal64()
        _status = self.dll.tktds1k2k_ReadWaveformMeasurement(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(measurementFunction),
            ViInt32(maxTime),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def ReadWaveformMeasurement_2CH(self, vi, channel, channel2, measurementFunction, maxTime):
        measurement = ViReal64()
        _status = self.dll.tktds1k2k_ReadWaveformMeasurement_2CH(
            ViSession(vi),
            ViConstString(channel),
            ViConstString(channel2),
            ViInt32(measurementFunction),
            ViInt32(maxTime),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def FetchWaveformMeasurement(self, vi, channel, measurementFunction):
        measurement = ViReal64()
        _status = self.dll.tktds1k2k_FetchWaveformMeasurement(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(measurementFunction),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def FetchWaveformMeasurement_2CH(self, vi, channel1, channel2, measurementFunction):
        measurement = ViReal64()
        _status = self.dll.tktds1k2k_FetchWaveformMeasurement_2CH(
            ViSession(vi),
            ViConstString(channel1),
            ViConstString(channel2),
            ViInt32(measurementFunction),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def AutoSetup(self, vi):
        _status = self.dll.tktds1k2k_AutoSetup(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureCounterFrequency(self, vi, channelName, enableCounterFrequency, triggerLevel):
        _status = self.dll.tktds1k2k_ConfigureCounterFrequency(
            ViSession(vi),
            ViConstString(channelName),
            ViBoolean(enableCounterFrequency),
            ViReal64(triggerLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureZoomWindow(self, vi, enableZoom, zoomFactor, horizontalPosition):
        _status = self.dll.tktds1k2k_ConfigureZoomWindow(
            ViSession(vi),
            ViBoolean(enableZoom),
            ViInt32(zoomFactor),
            ViReal64(horizontalPosition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDataLogging(self, vi, source, duration, state):
        _status = self.dll.tktds1k2k_ConfigureDataLogging(
            ViSession(vi), ViInt32(source), ViInt32(duration), ViBoolean(state)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLimitTestComparison(self, vi, source, templateWaveform, saveImageEnabled, saveWaveformEnabled):
        _status = self.dll.tktds1k2k_ConfigureLimitTestComparison(
            ViSession(vi),
            ViInt32(source),
            ViInt32(templateWaveform),
            ViBoolean(saveImageEnabled),
            ViBoolean(saveWaveformEnabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLimitTestStopAfter(self, vi, mode, time, violation, waveform):
        _status = self.dll.tktds1k2k_ConfigureLimitTestStopAfter(
            ViSession(vi),
            ViInt32(mode),
            ViReal64(time),
            ViReal64(violation),
            ViReal64(waveform),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLimitTestTemplate(self, vi, source, horizontal, vertical, destinationReference):
        _status = self.dll.tktds1k2k_ConfigureLimitTestTemplate(
            ViSession(vi),
            ViInt32(source),
            ViReal64(horizontal),
            ViReal64(vertical),
            ViInt32(destinationReference),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLimitTestTemplateDualSource(self, vi, source, horizontal, vertical):
        _status = self.dll.tktds1k2k_ConfigureLimitTestTemplateDualSource(
            ViSession(vi), ViInt32(source), ViReal64(horizontal), ViReal64(vertical)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CreateLimitTestTemplate(self, vi):
        _status = self.dll.tktds1k2k_CreateLimitTestTemplate(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLimitTestEnabled(self, vi, limitTestEnabled):
        _status = self.dll.tktds1k2k_ConfigureLimitTestEnabled(ViSession(vi), ViBoolean(limitTestEnabled))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryLimitTestResults(self, vi):
        totalNumber = ViInt32()
        passNumber = ViInt32()
        failureNumber = ViInt32()
        _status = self.dll.tktds1k2k_QueryLimitTestResults(
            ViSession(vi), byref(totalNumber), byref(passNumber), byref(failureNumber)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        totalNumber = int(totalNumber.value)
        passNumber = int(passNumber.value)
        failureNumber = int(failureNumber.value)
        return totalNumber, passNumber, failureNumber

    def SaveLimitTestTemplateSource(self, vi, targetSource):
        _status = self.dll.tktds1k2k_SaveLimitTestTemplateSource(ViSession(vi), ViInt32(targetSource))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTrendPlot(self, vi, source, runningState, trendPlotSource, trendPlotType):
        _status = self.dll.tktds1k2k_ConfigureTrendPlot(
            ViSession(vi),
            ViConstString(source),
            ViInt32(runningState),
            ViInt32(trendPlotSource),
            ViInt32(trendPlotType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryTrendPlotParameters(self, instrumentHandle, source):
        elapsedTime = ARRAY_ViChar(1024)
        minimumValue = ViReal64()
        maximumValue = ViReal64()
        averageValue = ViReal64()
        scale = ViReal64()
        maximumScale = ViReal64()
        minimumScale = ViReal64()
        units = ARRAY_ViChar(1024)
        _status = self.dll.tktds1k2k_QueryTrendPlotParameters(
            ViSession(instrumentHandle),
            ViConstString(source),
            elapsedTime,
            byref(minimumValue),
            byref(maximumValue),
            byref(averageValue),
            byref(scale),
            byref(maximumScale),
            byref(minimumScale),
            units,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        elapsedTime = decode(elapsedTime)
        minimumValue = float(minimumValue.value)
        maximumValue = float(maximumValue.value)
        averageValue = float(averageValue.value)
        scale = float(scale.value)
        maximumScale = float(maximumScale.value)
        minimumScale = float(minimumScale.value)
        units = decode(units)
        return (
            elapsedTime,
            minimumValue,
            maximumValue,
            averageValue,
            scale,
            maximumScale,
            minimumScale,
            units,
        )

    def IsInvalidWfmElement(self, vi, elementValue):
        isInvalid = ViBoolean()
        _status = self.dll.tktds1k2k_IsInvalidWfmElement(ViSession(vi), ViReal64(elementValue), byref(isInvalid))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(isInvalid.value)

    def EnableChannel(self, vi, channelName):
        _status = self.dll.tktds1k2k_EnableChannel(ViSession(vi), ViConstString(channelName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DisableChannel(self, vi, channelName):
        _status = self.dll.tktds1k2k_DisableChannel(ViSession(vi), ViConstString(channelName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InvertChannel(self, vi, channelName, invert):
        _status = self.dll.tktds1k2k_InvertChannel(ViSession(vi), ViConstString(channelName), ViBoolean(invert))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CurrentProbeScale(self, vi, channelName, scaleAttenuation):
        _status = self.dll.tktds1k2k_CurrentProbeScale(
            ViSession(vi), ViConstString(channelName), ViReal64(scaleAttenuation)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ProbeUnits(self, vi, channelName, units):
        _status = self.dll.tktds1k2k_ProbeUnits(ViSession(vi), ViConstString(channelName), ViInt32(units))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFFT(self, vi, FFTChannel, FFTWindow, enableDisplay):
        _status = self.dll.tktds1k2k_ConfigureFFT(
            ViSession(vi),
            ViConstString(FFTChannel),
            ViInt32(FFTWindow),
            ViBoolean(enableDisplay),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathChannel(self, vi, function):
        _status = self.dll.tktds1k2k_ConfigureMathChannel(ViSession(vi), ViInt32(function))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathFFT(self, vi, horzPos, horzScale, vertPos, vertScale):
        _status = self.dll.tktds1k2k_ConfigureMathFFT(
            ViSession(vi),
            ViInt32(horzPos),
            ViInt32(horzScale),
            ViInt32(vertPos),
            ViReal64(vertScale),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMath(self, vi, vertPos, vertScale):
        _status = self.dll.tktds1k2k_ConfigureMath(ViSession(vi), ViReal64(vertPos), ViReal64(vertScale))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHarmonics(self, vi, channelName, show, setup, selected):
        _status = self.dll.tktds1k2k_ConfigureHarmonics(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(show),
            ViInt32(setup),
            ViInt32(selected),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PowerAnalysisSources(self, vi, channelNames):
        _status = self.dll.tktds1k2k_PowerAnalysisSources(ViSession(vi), ViInt32(channelNames))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WaveformAnalysisSource(self, vi, channelName):
        _status = self.dll.tktds1k2k_WaveformAnalysisSource(ViSession(vi), ViConstString(channelName))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSWLChannels(self, vi, channelNames):
        _status = self.dll.tktds1k2k_ConfigureSWLChannels(ViSession(vi), ViInt32(channelNames))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSWLTurn(self, vi, turnOnStart, turnOnEnd, turnOffStart, turnOffEnd):
        _status = self.dll.tktds1k2k_ConfigureSWLTurn(
            ViSession(vi),
            ViInt32(turnOnStart),
            ViInt32(turnOnEnd),
            ViInt32(turnOffStart),
            ViInt32(turnOffEnd),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSwitchingLoss(self, vi, saturationVoltage, stopAfter, units):
        _status = self.dll.tktds1k2k_ConfigureSwitchingLoss(
            ViSession(vi), ViReal64(saturationVoltage), ViInt16(stopAfter), ViInt32(units)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def EnableFrontPanelEvent(self, vi):
        _status = self.dll.tktds1k2k_EnableFrontPanelEvent(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def DisableFrontPanelEvent(self, vi):
        _status = self.dll.tktds1k2k_DisableFrontPanelEvent(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def FrontPanelEventState(self, vi):
        eventState = ViBoolean()
        _status = self.dll.tktds1k2k_FrontPanelEventState(ViSession(vi), byref(eventState))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(eventState.value)

    def QueryCounterFrequency(self, vi, channelName):
        counterFrequency = ViReal64()
        _status = self.dll.tktds1k2k_QueryCounterFrequency(
            ViSession(vi), ViConstString(channelName), byref(counterFrequency)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(counterFrequency.value)

    def QueryZoomWindowTimeScale(self, vi):
        counterTimeScale = ViReal64()
        _status = self.dll.tktds1k2k_QueryZoomWindowTimeScale(ViSession(vi), byref(counterTimeScale))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(counterTimeScale.value)

    def StoreWfmToRefChannel(self, vi, source, refChan):
        _status = self.dll.tktds1k2k_StoreWfmToRefChannel(ViSession(vi), ViConstString(source), ViConstString(refChan))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetChannelName(self, vi, index, bufferSize):
        name = ARRAY_ViChar(bufferSize)
        _status = self.dll.tktds1k2k_GetChannelName(ViSession(vi), ViInt32(index), ViInt32(bufferSize), name)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(name)

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        _status = self.dll.tktds1k2k_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        _status = self.dll.tktds1k2k_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(errorMessage)

    def GetError(self, vi, bufferSize):
        errorCode = ViStatus()
        description = ARRAY_ViChar(bufferSize)
        _status = self.dll.tktds1k2k_GetError(ViSession(vi), byref(errorCode), ViInt32(bufferSize), description)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        description = decode(description)
        return errorCode, description

    def ClearError(self, vi):
        _status = self.dll.tktds1k2k_ClearError(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def reset(self, vi):
        _status = self.dll.tktds1k2k_reset(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        _status = self.dll.tktds1k2k_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        _status = self.dll.tktds1k2k_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def viWrite(self, vi, buffer, count):
        _buffer = (ViByte * len(buffer))(*buffer)
        returnCount = ViInt64()
        _status = self.dll.tktds1k2k_viWrite(ViSession(vi), _buffer, ViInt64(count), byref(returnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(returnCount.value)

    def viRead(self, vi, bufferSize):
        buffer = ARRAY_ViByte(bufferSize)
        returnCount = ViInt64()
        _status = self.dll.tktds1k2k_viRead(ViSession(vi), ViInt64(bufferSize), buffer, byref(returnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnCount = int(returnCount.value)
        return buffer, returnCount

    def WriteInstrData(self, vi, writeBuffer):
        _status = self.dll.tktds1k2k_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        _status = self.dll.tktds1k2k_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def InvalidateAllAttributes(self, vi):
        _status = self.dll.tktds1k2k_InvalidateAllAttributes(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetWithDefaults(self, vi):
        _status = self.dll.tktds1k2k_ResetWithDefaults(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def Disable(self, vi):
        _status = self.dll.tktds1k2k_Disable(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        _status = self.dll.tktds1k2k_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        _status = self.dll.tktds1k2k_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(bufSize)
        _status = self.dll.tktds1k2k_GetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViInt32(bufSize),
            value,
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        _status = self.dll.tktds1k2k_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        _status = self.dll.tktds1k2k_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.tktds1k2k_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.tktds1k2k_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.tktds1k2k_SetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.tktds1k2k_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.tktds1k2k_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.tktds1k2k_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.tktds1k2k_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.tktds1k2k_CheckAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.tktds1k2k_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.tktds1k2k_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IviInit(self, resourceName, IDQuery, reset, vi):
        _status = self.dll.tktds1k2k_IviInit(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(reset), ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IviClose(self, vi):
        _status = self.dll.tktds1k2k_IviClose(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetErrorInfo(self, vi):
        primaryError = ViStatus()
        secondaryError = ViStatus()
        errorElaboration = ARRAY_ViChar(256)
        _status = self.dll.tktds1k2k_GetErrorInfo(
            ViSession(vi), byref(primaryError), byref(secondaryError), errorElaboration
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorElaboration = decode(errorElaboration)
        return primaryError, secondaryError, errorElaboration

    def ClearErrorInfo(self, vi):
        _status = self.dll.tktds1k2k_ClearErrorInfo(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return
