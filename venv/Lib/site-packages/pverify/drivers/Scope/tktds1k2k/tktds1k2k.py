from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .tktds1k2k_dllwrap import *


class tktds1k2k(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = tktds1k2k_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def GetErrorInfo(self):
        """"""
        return self._dllwrap.GetErrorInfo(self._vi)

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def GetNextCoercionRecord(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def GetNextInterchangeWarning(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def ConfigureChannel(self, channel, range, offset, coupling, probeAttenuation, enabled):
        """

        :param channel:
        :type channel:
        :param range:
        :type range:
        :param offset:
        :type offset:
        :param coupling:
        :type coupling:
        :param probeAttenuation:
        :type probeAttenuation:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureChannel(self._vi, channel, range, offset, coupling, probeAttenuation, enabled)

    def ConfigureChanCharacteristics(self, channel, inputImpedance, maxInputFrequency):
        """

        :param channel:
        :type channel:
        :param inputImpedance:
        :type inputImpedance:
        :param maxInputFrequency:
        :type maxInputFrequency:
        """
        return self._dllwrap.ConfigureChanCharacteristics(self._vi, channel, inputImpedance, maxInputFrequency)

    def ConfigureChannelPosition(self, channel, vertPosition):
        """

        :param channel:
        :type channel:
        :param vertPosition:
        :type vertPosition:
        """
        return self._dllwrap.ConfigureChannelPosition(self._vi, channel, vertPosition)

    def ConfigureTrigger(self, triggerType, holdoff):
        """

        :param triggerType:
        :type triggerType:
        :param holdoff:
        :type holdoff:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, triggerType, holdoff)

    def ConfigureTriggerCoupling(self, coupling):
        """

        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureTriggerCoupling(self._vi, coupling)

    def ConfigureTriggerModifier(self, modifier):
        """

        :param modifier:
        :type modifier:
        """
        return self._dllwrap.ConfigureTriggerModifier(self._vi, modifier)

    def ConfigureEdgeTriggerSource(self, source, level, slope):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureEdgeTriggerSource(self._vi, source, level, slope)

    def ConfigureTVTriggerSource(self, source, TVSignalFormat, TVEvent, TVPolarity):
        """

        :param source:
        :type source:
        :param TVSignalFormat:
        :type TVSignalFormat:
        :param TVEvent:
        :type TVEvent:
        :param TVPolarity:
        :type TVPolarity:
        """
        return self._dllwrap.ConfigureTVTriggerSource(self._vi, source, TVSignalFormat, TVEvent, TVPolarity)

    def ConfigureTVTriggerLineNumber(self, TVTriggerLine):
        """

        :param TVTriggerLine:
        :type TVTriggerLine:
        """
        return self._dllwrap.ConfigureTVTriggerLineNumber(self._vi, TVTriggerLine)

    def ConfigureAcLineTriggerSlope(self, acLineTriggerSlope):
        """

        :param acLineTriggerSlope:
        :type acLineTriggerSlope:
        """
        return self._dllwrap.ConfigureAcLineTriggerSlope(self._vi, acLineTriggerSlope)

    def ConfigureGlitchTriggerSource(self, source, level, glitchWidth, glitchPolarity, glitchCondition):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param glitchWidth:
        :type glitchWidth:
        :param glitchPolarity:
        :type glitchPolarity:
        :param glitchCondition:
        :type glitchCondition:
        """
        return self._dllwrap.ConfigureGlitchTriggerSource(
            self._vi, source, level, glitchWidth, glitchPolarity, glitchCondition
        )

    def MainTriggerFrequency(self):
        """"""
        return self._dllwrap.MainTriggerFrequency(self._vi)

    def ConfigureAcquisitionType(self, acquisitionType):
        """

        :param acquisitionType:
        :type acquisitionType:
        """
        return self._dllwrap.ConfigureAcquisitionType(self._vi, acquisitionType)

    def ConfigureNumAverages(self, numberOfAverages):
        """

        :param numberOfAverages:
        :type numberOfAverages:
        """
        return self._dllwrap.ConfigureNumAverages(self._vi, numberOfAverages)

    def ConfigureAcquisitionRecord(self, timePerRecord, minimumRecordLength, acquisitionStartTime):
        """

        :param timePerRecord:
        :type timePerRecord:
        :param minimumRecordLength:
        :type minimumRecordLength:
        :param acquisitionStartTime:
        :type acquisitionStartTime:
        """
        return self._dllwrap.ConfigureAcquisitionRecord(
            self._vi, timePerRecord, minimumRecordLength, acquisitionStartTime
        )

    def ActualRecordLength(self):
        """"""
        return self._dllwrap.ActualRecordLength(self._vi)

    def ConfigureInitiateContinuous(self, continuous):
        """

        :param continuous:
        :type continuous:
        """
        return self._dllwrap.ConfigureInitiateContinuous(self._vi, continuous)

    def SendSWTrigger(self):
        """"""
        return self._dllwrap.SendSWTrigger(self._vi)

    def ReadWaveform(self, channel, waveformSize, maxTime):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadWaveform(self._vi, channel, waveformSize, maxTime)

    def InitiateAcquisition(self):
        """"""
        return self._dllwrap.InitiateAcquisition(self._vi)

    def AcquisitionStatus(self):
        """"""
        return self._dllwrap.AcquisitionStatus(self._vi)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def FetchWaveform(self, channel, waveformSize):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchWaveform(self._vi, channel, waveformSize)

    def ReadMinMaxWaveform(self, channel, waveformSize, maxTime):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadMinMaxWaveform(self._vi, channel, waveformSize, maxTime)

    def FetchMinMaxWaveform(self, channel, waveformSize):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchMinMaxWaveform(self._vi, channel, waveformSize)

    def SampleRate(self):
        """"""
        return self._dllwrap.SampleRate(self._vi)

    def ConfigureMeasurementGating(self, enableMeasurementGating):
        """

        :param enableMeasurementGating:
        :type enableMeasurementGating:
        """
        return self._dllwrap.ConfigureMeasurementGating(self._vi, enableMeasurementGating)

    def ConfigureRefLevels(self, low, mid, high):
        """

        :param low:
        :type low:
        :param mid:
        :type mid:
        :param high:
        :type high:
        """
        return self._dllwrap.ConfigureRefLevels(self._vi, low, mid, high)

    def ConfigureMeasurementSnapshot(self, source, snapshotAction):
        """

        :param source:
        :type source:
        :param snapshotAction:
        :type snapshotAction:
        """
        return self._dllwrap.ConfigureMeasurementSnapshot(self._vi, source, snapshotAction)

    def ReadWaveformMeasurement(self, channel, measurementFunction, maxTime):
        """

        :param channel:
        :type channel:
        :param measurementFunction:
        :type measurementFunction:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadWaveformMeasurement(self._vi, channel, measurementFunction, maxTime)

    def ReadWaveformMeasurement_2CH(self, channel, channel2, measurementFunction, maxTime):
        """

        :param channel:
        :type channel:
        :param channel2:
        :type channel2:
        :param measurementFunction:
        :type measurementFunction:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadWaveformMeasurement_2CH(self._vi, channel, channel2, measurementFunction, maxTime)

    def FetchWaveformMeasurement(self, channel, measurementFunction):
        """

        :param channel:
        :type channel:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.FetchWaveformMeasurement(self._vi, channel, measurementFunction)

    def FetchWaveformMeasurement_2CH(self, channel1, channel2, measurementFunction):
        """

        :param channel1:
        :type channel1:
        :param channel2:
        :type channel2:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.FetchWaveformMeasurement_2CH(self._vi, channel1, channel2, measurementFunction)

    def AutoSetup(self):
        """"""
        return self._dllwrap.AutoSetup(self._vi)

    def ConfigureCounterFrequency(self, channelName, enableCounterFrequency, triggerLevel):
        """

        :param channelName:
        :type channelName:
        :param enableCounterFrequency:
        :type enableCounterFrequency:
        :param triggerLevel:
        :type triggerLevel:
        """
        return self._dllwrap.ConfigureCounterFrequency(self._vi, channelName, enableCounterFrequency, triggerLevel)

    def ConfigureZoomWindow(self, enableZoom, zoomFactor, horizontalPosition):
        """

        :param enableZoom:
        :type enableZoom:
        :param zoomFactor:
        :type zoomFactor:
        :param horizontalPosition:
        :type horizontalPosition:
        """
        return self._dllwrap.ConfigureZoomWindow(self._vi, enableZoom, zoomFactor, horizontalPosition)

    def ConfigureDataLogging(self, source, duration, state):
        """

        :param source:
        :type source:
        :param duration:
        :type duration:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureDataLogging(self._vi, source, duration, state)

    def ConfigureLimitTestComparison(self, source, templateWaveform, saveImageEnabled, saveWaveformEnabled):
        """

        :param source:
        :type source:
        :param templateWaveform:
        :type templateWaveform:
        :param saveImageEnabled:
        :type saveImageEnabled:
        :param saveWaveformEnabled:
        :type saveWaveformEnabled:
        """
        return self._dllwrap.ConfigureLimitTestComparison(
            self._vi, source, templateWaveform, saveImageEnabled, saveWaveformEnabled
        )

    def ConfigureLimitTestStopAfter(self, mode, time, violation, waveform):
        """

        :param mode:
        :type mode:
        :param time:
        :type time:
        :param violation:
        :type violation:
        :param waveform:
        :type waveform:
        """
        return self._dllwrap.ConfigureLimitTestStopAfter(self._vi, mode, time, violation, waveform)

    def ConfigureLimitTestTemplate(self, source, horizontal, vertical, destinationReference):
        """

        :param source:
        :type source:
        :param horizontal:
        :type horizontal:
        :param vertical:
        :type vertical:
        :param destinationReference:
        :type destinationReference:
        """
        return self._dllwrap.ConfigureLimitTestTemplate(self._vi, source, horizontal, vertical, destinationReference)

    def ConfigureLimitTestTemplateDualSource(self, source, horizontal, vertical):
        """

        :param source:
        :type source:
        :param horizontal:
        :type horizontal:
        :param vertical:
        :type vertical:
        """
        return self._dllwrap.ConfigureLimitTestTemplateDualSource(self._vi, source, horizontal, vertical)

    def CreateLimitTestTemplate(self):
        """"""
        return self._dllwrap.CreateLimitTestTemplate(self._vi)

    def ConfigureLimitTestEnabled(self, limitTestEnabled):
        """

        :param limitTestEnabled:
        :type limitTestEnabled:
        """
        return self._dllwrap.ConfigureLimitTestEnabled(self._vi, limitTestEnabled)

    def QueryLimitTestResults(self):
        """"""
        return self._dllwrap.QueryLimitTestResults(self._vi)

    def SaveLimitTestTemplateSource(self, targetSource):
        """

        :param targetSource:
        :type targetSource:
        """
        return self._dllwrap.SaveLimitTestTemplateSource(self._vi, targetSource)

    def ConfigureTrendPlot(self, source, runningState, trendPlotSource, trendPlotType):
        """

        :param source:
        :type source:
        :param runningState:
        :type runningState:
        :param trendPlotSource:
        :type trendPlotSource:
        :param trendPlotType:
        :type trendPlotType:
        """
        return self._dllwrap.ConfigureTrendPlot(self._vi, source, runningState, trendPlotSource, trendPlotType)

    def QueryTrendPlotParameters(self, source):
        """

        :param source:
        :type source:
        """
        return self._dllwrap.QueryTrendPlotParameters(self._vi, source)

    def IsInvalidWfmElement(self, elementValue):
        """

        :param elementValue:
        :type elementValue:
        """
        return self._dllwrap.IsInvalidWfmElement(self._vi, elementValue)

    def EnableChannel(self, channelName):
        """

        :param channelName:
        :type channelName:
        """
        return self._dllwrap.EnableChannel(self._vi, channelName)

    def DisableChannel(self, channelName):
        """

        :param channelName:
        :type channelName:
        """
        return self._dllwrap.DisableChannel(self._vi, channelName)

    def InvertChannel(self, channelName, invert):
        """

        :param channelName:
        :type channelName:
        :param invert:
        :type invert:
        """
        return self._dllwrap.InvertChannel(self._vi, channelName, invert)

    def CurrentProbeScale(self, channelName, scaleAttenuation):
        """

        :param channelName:
        :type channelName:
        :param scaleAttenuation:
        :type scaleAttenuation:
        """
        return self._dllwrap.CurrentProbeScale(self._vi, channelName, scaleAttenuation)

    def ProbeUnits(self, channelName, units):
        """

        :param channelName:
        :type channelName:
        :param units:
        :type units:
        """
        return self._dllwrap.ProbeUnits(self._vi, channelName, units)

    def ConfigureFFT(self, FFTChannel, FFTWindow, enableDisplay):
        """

        :param FFTChannel:
        :type FFTChannel:
        :param FFTWindow:
        :type FFTWindow:
        :param enableDisplay:
        :type enableDisplay:
        """
        return self._dllwrap.ConfigureFFT(self._vi, FFTChannel, FFTWindow, enableDisplay)

    def ConfigureMathChannel(self, function):
        """

        :param function:
        :type function:
        """
        return self._dllwrap.ConfigureMathChannel(self._vi, function)

    def ConfigureMathFFT(self, horzPos, horzScale, vertPos, vertScale):
        """

        :param horzPos:
        :type horzPos:
        :param horzScale:
        :type horzScale:
        :param vertPos:
        :type vertPos:
        :param vertScale:
        :type vertScale:
        """
        return self._dllwrap.ConfigureMathFFT(self._vi, horzPos, horzScale, vertPos, vertScale)

    def ConfigureMath(self, vertPos, vertScale):
        """

        :param vertPos:
        :type vertPos:
        :param vertScale:
        :type vertScale:
        """
        return self._dllwrap.ConfigureMath(self._vi, vertPos, vertScale)

    def ConfigureHarmonics(self, channelName, show, setup, selected):
        """

        :param channelName:
        :type channelName:
        :param show:
        :type show:
        :param setup:
        :type setup:
        :param selected:
        :type selected:
        """
        return self._dllwrap.ConfigureHarmonics(self._vi, channelName, show, setup, selected)

    def PowerAnalysisSources(self, channelNames):
        """

        :param channelNames:
        :type channelNames:
        """
        return self._dllwrap.PowerAnalysisSources(self._vi, channelNames)

    def WaveformAnalysisSource(self, channelName):
        """

        :param channelName:
        :type channelName:
        """
        return self._dllwrap.WaveformAnalysisSource(self._vi, channelName)

    def ConfigureSWLChannels(self, channelNames):
        """

        :param channelNames:
        :type channelNames:
        """
        return self._dllwrap.ConfigureSWLChannels(self._vi, channelNames)

    def ConfigureSWLTurn(self, turnOnStart, turnOnEnd, turnOffStart, turnOffEnd):
        """

        :param turnOnStart:
        :type turnOnStart:
        :param turnOnEnd:
        :type turnOnEnd:
        :param turnOffStart:
        :type turnOffStart:
        :param turnOffEnd:
        :type turnOffEnd:
        """
        return self._dllwrap.ConfigureSWLTurn(self._vi, turnOnStart, turnOnEnd, turnOffStart, turnOffEnd)

    def ConfigureSwitchingLoss(self, saturationVoltage, stopAfter, units):
        """

        :param saturationVoltage:
        :type saturationVoltage:
        :param stopAfter:
        :type stopAfter:
        :param units:
        :type units:
        """
        return self._dllwrap.ConfigureSwitchingLoss(self._vi, saturationVoltage, stopAfter, units)

    def EnableFrontPanelEvent(self):
        """"""
        return self._dllwrap.EnableFrontPanelEvent(self._vi)

    def DisableFrontPanelEvent(self):
        """"""
        return self._dllwrap.DisableFrontPanelEvent(self._vi)

    def FrontPanelEventState(self):
        """"""
        return self._dllwrap.FrontPanelEventState(self._vi)

    def QueryCounterFrequency(self, channelName):
        """

        :param channelName:
        :type channelName:
        """
        return self._dllwrap.QueryCounterFrequency(self._vi, channelName)

    def QueryZoomWindowTimeScale(self):
        """"""
        return self._dllwrap.QueryZoomWindowTimeScale(self._vi)

    def StoreWfmToRefChannel(self, source, refChan):
        """

        :param source:
        :type source:
        :param refChan:
        :type refChan:
        """
        return self._dllwrap.StoreWfmToRefChannel(self._vi, source, refChan)

    def GetChannelName(self, index, bufferSize):
        """

        :param index:
        :type index:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, index, bufferSize)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def GetError(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def viWrite(self, buffer, count):
        """

        :param buffer:
        :type buffer:
        :param count:
        :type count:
        """
        return self._dllwrap.viWrite(self._vi, buffer, count)

    def viRead(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.viRead(self._vi, bufferSize)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """

        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def GetAttributeViInt32(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName, attribute, bufSize):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param bufSize:
        :type bufSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)

    def IviInit(self, resourceName, IDQuery, reset):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param reset:
        :type reset:
        """
        return self._dllwrap.IviInit(resourceName, IDQuery, reset, self._vi)

    def IviClose(self):
        """"""
        return self._dllwrap.IviClose(self._vi)

    def ClearErrorInfo(self):
        """"""
        return self._dllwrap.ClearErrorInfo(self._vi)
