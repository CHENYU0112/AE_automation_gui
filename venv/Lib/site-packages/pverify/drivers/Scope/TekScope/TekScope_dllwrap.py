from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import TekScope_const as const
from .TekScope_const import *


class TekScope_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("TekScope.dll", "TekScope_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "TekScope"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.TekScope_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.TekScope_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.TekScope_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.TekScope_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.TekScope_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        status = self.dll.TekScope_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.TekScope_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, Vi):
        status = self.dll.TekScope_ClearInterchangeWarnings(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        status = self.dll.TekScope_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(InterchangeWarningBufferSize)
        status = self.dll.TekScope_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.TekScope_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetInterchangeCheck(self, Vi):
        status = self.dll.TekScope_ResetInterchangeCheck(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.TekScope_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.TekScope_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.TekScope_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.TekScope_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.TekScope_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.TekScope_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.TekScope_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def IsInvalidWfmElement(self, Vi, ElementValue):
        IsInvalid = ViBoolean()
        status = self.dll.TekScope_IsInvalidWfmElement(ViSession(Vi), ViReal64(ElementValue), byref(IsInvalid))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(IsInvalid.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.TekScope_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.TekScope_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.TekScope_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.TekScope_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        status = self.dll.TekScope_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.TekScope_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.TekScope_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.TekScope_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.TekScope_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.TekScope_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearAll(self, Vi):
        status = self.dll.TekScope_ClearAll(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetS8b10bPatternChar(self, Vi, Index, S8B10BPatternCharBufferSize):
        S8B10BPatternChar = ARRAY_ViChar(S8B10BPatternCharBufferSize)
        status = self.dll.TekScope_GetS8b10bPatternChar(
            ViSession(Vi),
            ViInt32(Index),
            ViInt32(S8B10BPatternCharBufferSize),
            S8B10BPatternChar,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(S8B10BPatternChar)

    def SetS8b10bPatternChar(self, Vi, Index, S8B10BPatternChar):
        status = self.dll.TekScope_SetS8b10bPatternChar(ViSession(Vi), ViInt32(Index), ViConstString(S8B10BPatternChar))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetS8b10bPatternSymbolrdPlus(self, Vi, Index, S8B10BPatternSymbolRDPlusBufferSize):
        S8B10BPatternSymbolRDPlus = ARRAY_ViChar(S8B10BPatternSymbolRDPlusBufferSize)
        status = self.dll.TekScope_GetS8b10bPatternSymbolrdPlus(
            ViSession(Vi),
            ViInt32(Index),
            ViInt32(S8B10BPatternSymbolRDPlusBufferSize),
            S8B10BPatternSymbolRDPlus,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(S8B10BPatternSymbolRDPlus)

    def SetS8b10bPatternSymbolrdPlus(self, Vi, Index, S8B10BPatternSymbolRDPlus):
        status = self.dll.TekScope_SetS8b10bPatternSymbolrdPlus(
            ViSession(Vi), ViInt32(Index), ViConstString(S8B10BPatternSymbolRDPlus)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetS8b10bPatternSymbolrdMinus(self, Vi, Index, S8B10BPatternSymbolRDMinusBufferSize):
        S8B10BPatternSymbolRDMinus = ARRAY_ViChar(S8B10BPatternSymbolRDMinusBufferSize)
        status = self.dll.TekScope_GetS8b10bPatternSymbolrdMinus(
            ViSession(Vi),
            ViInt32(Index),
            ViInt32(S8B10BPatternSymbolRDMinusBufferSize),
            S8B10BPatternSymbolRDMinus,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(S8B10BPatternSymbolRDMinus)

    def SetS8b10bPatternSymbolrdMinus(self, Vi, Index, S8B10BPatternSymbolRDMinus):
        status = self.dll.TekScope_SetS8b10bPatternSymbolrdMinus(
            ViSession(Vi), ViInt32(Index), ViConstString(S8B10BPatternSymbolRDMinus)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetHeaderValue(self, Vi, HeaderFieldType, FlexrayHeaderValueBufferSize):
        FlexrayHeaderValue = ARRAY_ViChar(FlexrayHeaderValueBufferSize)
        status = self.dll.TekScope_GetHeaderValue(
            ViSession(Vi),
            ViInt32(HeaderFieldType),
            ViInt32(FlexrayHeaderValueBufferSize),
            FlexrayHeaderValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(FlexrayHeaderValue)

    def SetHeaderValue(self, Vi, HeaderFieldType, FlexrayHeaderValue):
        status = self.dll.TekScope_SetHeaderValue(
            ViSession(Vi), ViInt32(HeaderFieldType), ViConstString(FlexrayHeaderValue)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPcIePatternCharacters(self, Vi, Character, PCIePatternCharactersBufferSize):
        PCIePatternCharacters = ARRAY_ViChar(PCIePatternCharactersBufferSize)
        status = self.dll.TekScope_GetPcIePatternCharacters(
            ViSession(Vi),
            ViInt32(Character),
            ViInt32(PCIePatternCharactersBufferSize),
            PCIePatternCharacters,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(PCIePatternCharacters)

    def SetPcIePatternCharacters(self, Vi, Character, PCIePatternCharacters):
        status = self.dll.TekScope_SetPcIePatternCharacters(
            ViSession(Vi), ViInt32(Character), ViConstString(PCIePatternCharacters)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPcIePatternSymbolrdPlus(self, Vi, Field, PCIePatternSymbolRDPlusBufferSize):
        PCIePatternSymbolRDPlus = ARRAY_ViChar(PCIePatternSymbolRDPlusBufferSize)
        status = self.dll.TekScope_GetPcIePatternSymbolrdPlus(
            ViSession(Vi),
            ViInt32(Field),
            ViInt32(PCIePatternSymbolRDPlusBufferSize),
            PCIePatternSymbolRDPlus,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(PCIePatternSymbolRDPlus)

    def SetPcIePatternSymbolrdPlus(self, Vi, Field, PCIePatternSymbolRDPlus):
        status = self.dll.TekScope_SetPcIePatternSymbolrdPlus(
            ViSession(Vi), ViInt32(Field), ViConstString(PCIePatternSymbolRDPlus)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPcIePatternSymbolrdMinus(self, Vi, Field, PCIePatternSymbolRDMinusBufferSize):
        PCIePatternSymbolRDMinus = ARRAY_ViChar(PCIePatternSymbolRDMinusBufferSize)
        status = self.dll.TekScope_GetPcIePatternSymbolrdMinus(
            ViSession(Vi),
            ViInt32(Field),
            ViInt32(PCIePatternSymbolRDMinusBufferSize),
            PCIePatternSymbolRDMinus,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(PCIePatternSymbolRDMinus)

    def SetPcIePatternSymbolrdMinus(self, Vi, Field, PCIePatternSymbolRDMinus):
        status = self.dll.TekScope_SetPcIePatternSymbolrdMinus(
            ViSession(Vi), ViInt32(Field), ViConstString(PCIePatternSymbolRDMinus)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPcIeErrorState(self, Vi):
        PCIeErrorState = ViInt32()
        status = self.dll.TekScope_GetPcIeErrorState(ViSession(Vi), byref(PCIeErrorState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(PCIeErrorState.value)

    def SetPcIeErrorState(self, Vi, PCIeErrorState):
        status = self.dll.TekScope_SetPcIeErrorState(ViSession(Vi), ViInt32(PCIeErrorState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAreaDisplayState(self, Vi, Area):
        AreaDisplayState = ViBoolean()
        status = self.dll.TekScope_GetAreaDisplayState(ViSession(Vi), ViInt32(Area), byref(AreaDisplayState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AreaDisplayState.value)

    def SetAreaDisplayState(self, Vi, Area, AreaDisplayState):
        status = self.dll.TekScope_SetAreaDisplayState(ViSession(Vi), ViInt32(Area), ViBoolean(AreaDisplayState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAreaLogicDisplay(self, Vi, Area):
        AreaLogicDisplay = ViBoolean()
        status = self.dll.TekScope_GetAreaLogicDisplay(ViSession(Vi), ViInt32(Area), byref(AreaLogicDisplay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AreaLogicDisplay.value)

    def SetAreaLogicDisplay(self, Vi, Area, AreaLogicDisplay):
        status = self.dll.TekScope_SetAreaLogicDisplay(ViSession(Vi), ViInt32(Area), ViBoolean(AreaLogicDisplay))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAreaShape(self, Vi, Area):
        AreaShape = ViInt32()
        status = self.dll.TekScope_GetAreaShape(ViSession(Vi), ViInt32(Area), byref(AreaShape))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AreaShape.value)

    def SetAreaShape(self, Vi, Area, AreaShape):
        status = self.dll.TekScope_SetAreaShape(ViSession(Vi), ViInt32(Area), ViInt32(AreaShape))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAreaSource(self, Vi, Area):
        AreaSource = ViInt32()
        status = self.dll.TekScope_GetAreaSource(ViSession(Vi), ViInt32(Area), byref(AreaSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AreaSource.value)

    def SetAreaSource(self, Vi, Area, AreaSource):
        status = self.dll.TekScope_SetAreaSource(ViSession(Vi), ViInt32(Area), ViInt32(AreaSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAreaOperation(self, Vi, Area):
        AreaOperation = ViInt32()
        status = self.dll.TekScope_GetAreaOperation(ViSession(Vi), ViInt32(Area), byref(AreaOperation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AreaOperation.value)

    def SetAreaOperation(self, Vi, Area, AreaOperation):
        status = self.dll.TekScope_SetAreaOperation(ViSession(Vi), ViInt32(Area), ViInt32(AreaOperation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SaveSetup(self, Vi, Filename):
        status = self.dll.TekScope_SaveSetup(ViSession(Vi), ViConstString(Filename))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RecallSetup(self, Vi, Filename):
        status = self.dll.TekScope_RecallSetup(ViSession(Vi), ViConstString(Filename))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetTriggerEquation(self, Vi, EquationNumber, TriggerEquation):
        status = self.dll.TekScope_SetTriggerEquation(
            ViSession(Vi), ViInt32(EquationNumber), ViConstString(TriggerEquation)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetTriggerEquation(self, Vi, EquationNumber, TriggerEquationBufferSize):
        TriggerEquation = ARRAY_ViChar(TriggerEquationBufferSize)
        status = self.dll.TekScope_GetTriggerEquation(
            ViSession(Vi),
            ViInt32(EquationNumber),
            ViInt32(TriggerEquationBufferSize),
            TriggerEquation,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(TriggerEquation)

    def DeleteAllAreas(self, Vi):
        status = self.dll.TekScope_DeleteAllAreas(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DeleteArea(self, Vi, Area):
        status = self.dll.TekScope_DeleteArea(ViSession(Vi), ViInt32(Area))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DuplicateArea(self, Vi, Area):
        status = self.dll.TekScope_DuplicateArea(ViSession(Vi), ViInt32(Area))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetRotationalAngle(self, Vi, Area):
        RotationalAngle = ViReal64()
        status = self.dll.TekScope_GetRotationalAngle(ViSession(Vi), ViInt32(Area), byref(RotationalAngle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(RotationalAngle.value)

    def SetRotationalAngle(self, Vi, Area, RotationalAngle):
        status = self.dll.TekScope_SetRotationalAngle(ViSession(Vi), ViInt32(Area), ViReal64(RotationalAngle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Flip(self, Vi, Area, FlipType):
        status = self.dll.TekScope_Flip(ViSession(Vi), ViInt32(Area), ViInt32(FlipType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAreaxPosition(self, Vi, Area):
        AreaXPosition = ViReal64()
        status = self.dll.TekScope_GetAreaxPosition(ViSession(Vi), ViInt32(Area), byref(AreaXPosition))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AreaXPosition.value)

    def SetAreaxPosition(self, Vi, Area, AreaXPosition):
        status = self.dll.TekScope_SetAreaxPosition(ViSession(Vi), ViInt32(Area), ViReal64(AreaXPosition))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAreayPosition(self, Vi, Area):
        AreaYPosition = ViReal64()
        status = self.dll.TekScope_GetAreayPosition(ViSession(Vi), ViInt32(Area), byref(AreaYPosition))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AreaYPosition.value)

    def SetAreayPosition(self, Vi, Area, AreaYPosition):
        status = self.dll.TekScope_SetAreayPosition(ViSession(Vi), ViInt32(Area), ViReal64(AreaYPosition))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAreaWidth(self, Vi, Area):
        AreaWidth = ViReal64()
        status = self.dll.TekScope_GetAreaWidth(ViSession(Vi), ViInt32(Area), byref(AreaWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AreaWidth.value)

    def SetAreaWidth(self, Vi, Area, AreaWidth):
        status = self.dll.TekScope_SetAreaWidth(ViSession(Vi), ViInt32(Area), ViReal64(AreaWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAreaHeight(self, Vi, Area):
        AreaHeight = ViReal64()
        status = self.dll.TekScope_GetAreaHeight(ViSession(Vi), ViInt32(Area), byref(AreaHeight))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AreaHeight.value)

    def SetAreaHeight(self, Vi, Area, AreaHeight):
        status = self.dll.TekScope_SetAreaHeight(ViSession(Vi), ViInt32(Area), ViReal64(AreaHeight))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAreaLabel(self, Vi, Area, AreaLabelBufferSize):
        AreaLabel = ARRAY_ViChar(AreaLabelBufferSize)
        status = self.dll.TekScope_GetAreaLabel(ViSession(Vi), ViInt32(Area), ViInt32(AreaLabelBufferSize), AreaLabel)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AreaLabel)

    def SetAreaLabel(self, Vi, Area, AreaLabel):
        status = self.dll.TekScope_SetAreaLabel(ViSession(Vi), ViInt32(Area), ViConstString(AreaLabel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSerialRS232Bus(self, Vi, Bus, InputSource, InputPolarity, Bitrate, DataBits, InputParity):
        status = self.dll.TekScope_ConfigureSerialRS232Bus(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(InputSource),
            ViInt32(InputPolarity),
            ViReal64(Bitrate),
            ViInt32(DataBits),
            ViInt32(InputParity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSerialUSBBus(self, Vi, Bus, InputSource, Probe, Bitrate, DPLUSSource, DMINUSSource):
        status = self.dll.TekScope_ConfigureSerialUSBBus(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(InputSource),
            ViInt32(Probe),
            ViInt32(Bitrate),
            ViInt32(DPLUSSource),
            ViInt32(DMINUSSource),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadSerialRS232Bus(self, Vi, Bus):
        InputSource = ViInt32()
        InputPolarity = ViInt32()
        Bitrate = ViReal64()
        DataBits = ViInt32()
        InputParity = ViInt32()
        status = self.dll.TekScope_ReadSerialRS232Bus(
            ViSession(Vi),
            ViConstString(Bus),
            byref(InputSource),
            byref(InputPolarity),
            byref(Bitrate),
            byref(DataBits),
            byref(InputParity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        InputSource = int(InputSource.value)
        InputPolarity = int(InputPolarity.value)
        Bitrate = float(Bitrate.value)
        DataBits = int(DataBits.value)
        InputParity = int(InputParity.value)
        return InputSource, InputPolarity, Bitrate, DataBits, InputParity

    def ReadSerialUSBBus(self, Vi, Bus):
        InputSource = ViInt32()
        Probe = ViInt32()
        Bitrate = ViInt32()
        DPLUSSource = ViInt32()
        DMINUSSource = ViInt32()
        status = self.dll.TekScope_ReadSerialUSBBus(
            ViSession(Vi),
            ViConstString(Bus),
            byref(InputSource),
            byref(Probe),
            byref(Bitrate),
            byref(DPLUSSource),
            byref(DMINUSSource),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        InputSource = int(InputSource.value)
        Probe = int(Probe.value)
        Bitrate = int(Bitrate.value)
        DPLUSSource = int(DPLUSSource.value)
        DMINUSSource = int(DMINUSSource.value)
        return InputSource, Probe, Bitrate, DPLUSSource, DMINUSSource

    def ConfigureSerialMipiCsiTwoClock(self, Vi, Bus, ClockSource, ClockType):
        status = self.dll.TekScope_ConfigureSerialMipiCsiTwoClock(
            ViSession(Vi), ViConstString(Bus), ViInt32(ClockSource), ViInt32(ClockType)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSerialMipiCsiTwoLanes(self, Vi, Bus, LaneNumber, Type, SourceDPlus, SourceDMinus, SourceDifferential):
        status = self.dll.TekScope_ConfigureSerialMipiCsiTwoLanes(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(LaneNumber),
            ViInt32(Type),
            ViInt32(SourceDPlus),
            ViInt32(SourceDMinus),
            ViInt32(SourceDifferential),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadSerialMipiCsiTwoClock(self, Vi, Bus):
        ClockSource = ViInt32()
        ClockType = ViInt32()
        status = self.dll.TekScope_ReadSerialMipiCsiTwoClock(
            ViSession(Vi), ViConstString(Bus), byref(ClockSource), byref(ClockType)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ClockSource = int(ClockSource.value)
        ClockType = int(ClockType.value)
        return ClockSource, ClockType

    def SetThreshold(self, Vi, Bus, InputSource, Threshold):
        status = self.dll.TekScope_SetThreshold(
            ViSession(Vi), ViConstString(Bus), ViInt32(InputSource), ViReal64(Threshold)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetThreshold(self, Vi, Bus, InputSource):
        Threshold = ViReal64()
        status = self.dll.TekScope_GetThreshold(
            ViSession(Vi), ViConstString(Bus), ViInt32(InputSource), byref(Threshold)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Threshold.value)

    def SetLowThreshhold(self, Vi, Bus, InputSource, Threshold):
        status = self.dll.TekScope_SetLowThreshhold(
            ViSession(Vi), ViConstString(Bus), ViInt32(InputSource), ViReal64(Threshold)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetLowThreshold(self, Vi, Bus, InputSource):
        Threshold = ViReal64()
        status = self.dll.TekScope_GetLowThreshold(
            ViSession(Vi), ViConstString(Bus), ViInt32(InputSource), byref(Threshold)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Threshold.value)

    def SaveEventTable(self, Vi, Bus, Filename):
        status = self.dll.TekScope_SaveEventTable(ViSession(Vi), ViConstString(Bus), ViConstString(Filename))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSerialMipiDsiOneClock(self, Vi, Bus, ClockSource, ClockType):
        status = self.dll.TekScope_ConfigureSerialMipiDsiOneClock(
            ViSession(Vi), ViConstString(Bus), ViInt32(ClockSource), ViInt32(ClockType)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSerialMipiDsiOneLanes(self, Vi, Bus, LaneNumber, Type, SourceDPlus, SourceDMinus, SourceDifferential):
        status = self.dll.TekScope_ConfigureSerialMipiDsiOneLanes(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(LaneNumber),
            ViInt32(Type),
            ViInt32(SourceDPlus),
            ViInt32(SourceDMinus),
            ViInt32(SourceDifferential),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadSerialMipiDsiOneClock(self, Vi, Bus):
        ClockSource = ViInt32()
        ClockType = ViInt32()
        status = self.dll.TekScope_ReadSerialMipiDsiOneClock(
            ViSession(Vi), ViConstString(Bus), byref(ClockSource), byref(ClockType)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ClockSource = int(ClockSource.value)
        ClockType = int(ClockType.value)
        return ClockSource, ClockType

    def ReadSerialMipiCsiTwoLanes(self, Vi, Bus, LaneNumber):
        Type = ViInt32()
        SourceDPlus = ViInt32()
        SourceDMinus = ViInt32()
        SourceDifferential = ViInt32()
        status = self.dll.TekScope_ReadSerialMipiCsiTwoLanes(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(LaneNumber),
            byref(Type),
            byref(SourceDPlus),
            byref(SourceDMinus),
            byref(SourceDifferential),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Type = int(Type.value)
        SourceDPlus = int(SourceDPlus.value)
        SourceDMinus = int(SourceDMinus.value)
        SourceDifferential = int(SourceDifferential.value)
        return Type, SourceDPlus, SourceDMinus, SourceDifferential

    def ReadSerialMipiDsiOneLanes(self, Vi, Bus, LaneNumber):
        Type = ViInt32()
        SourceDPlus = ViInt32()
        SourceDMinus = ViInt32()
        SourceDifferential = ViInt32()
        status = self.dll.TekScope_ReadSerialMipiDsiOneLanes(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(LaneNumber),
            byref(Type),
            byref(SourceDPlus),
            byref(SourceDMinus),
            byref(SourceDifferential),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Type = int(Type.value)
        SourceDPlus = int(SourceDPlus.value)
        SourceDMinus = int(SourceDMinus.value)
        SourceDifferential = int(SourceDifferential.value)
        return Type, SourceDPlus, SourceDMinus, SourceDifferential

    def ConfigureSerial8B10B(self, Vi, Bus, Source, Standard, Bitrate, Hysteresis):
        status = self.dll.TekScope_ConfigureSerial8B10B(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(Source),
            ViInt32(Standard),
            ViReal64(Bitrate),
            ViReal64(Hysteresis),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadSerial8B10B(self, Vi, Bus):
        Source = ViInt32()
        Standard = ViInt32()
        Bitrate = ViReal64()
        Hysteresis = ViReal64()
        status = self.dll.TekScope_ReadSerial8B10B(
            ViSession(Vi),
            ViConstString(Bus),
            byref(Source),
            byref(Standard),
            byref(Bitrate),
            byref(Hysteresis),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Source = int(Source.value)
        Standard = int(Standard.value)
        Bitrate = float(Bitrate.value)
        Hysteresis = float(Hysteresis.value)
        return Source, Standard, Bitrate, Hysteresis

    def GetDisplayState(self, Vi, Bus, DisplayForm):
        DisplayState = ViBoolean()
        status = self.dll.TekScope_GetDisplayState(
            ViSession(Vi), ViConstString(Bus), ViInt32(DisplayForm), byref(DisplayState)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(DisplayState.value)

    def SetDisplayState(self, Vi, Bus, DisplayForm, DisplayState):
        status = self.dll.TekScope_SetDisplayState(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(DisplayForm),
            ViBoolean(DisplayState),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCAN(self, Vi, Bus, Source, Bitrate, ProbeType, BitrateValue):
        status = self.dll.TekScope_ConfigureCAN(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(Source),
            ViInt32(Bitrate),
            ViInt32(ProbeType),
            ViReal64(BitrateValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadCAN(self, Vi, Bus):
        Source = ViInt32()
        Bitrate = ViInt32()
        ProbeType = ViInt32()
        BitrateValue = ViReal64()
        status = self.dll.TekScope_ReadCAN(
            ViSession(Vi),
            ViConstString(Bus),
            byref(Source),
            byref(Bitrate),
            byref(ProbeType),
            byref(BitrateValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Source = int(Source.value)
        Bitrate = int(Bitrate.value)
        ProbeType = int(ProbeType.value)
        BitrateValue = float(BitrateValue.value)
        return Source, Bitrate, ProbeType, BitrateValue

    def ConfigureLIN(
        self,
        Vi,
        Bus,
        Source,
        Polarity,
        Bitrate,
        Standard,
        IDwithParityBitState,
        BitrateValue,
    ):
        status = self.dll.TekScope_ConfigureLIN(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(Source),
            ViInt32(Polarity),
            ViInt32(Bitrate),
            ViInt32(Standard),
            ViBoolean(IDwithParityBitState),
            ViReal64(BitrateValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadLIN(self, Vi, Bus):
        Source = ViInt32()
        Polarity = ViInt32()
        Bitrate = ViInt32()
        Standard = ViInt32()
        IDwithParityBitState = ViBoolean()
        BitrateValue = ViReal64()
        status = self.dll.TekScope_ReadLIN(
            ViSession(Vi),
            ViConstString(Bus),
            byref(Source),
            byref(Polarity),
            byref(Bitrate),
            byref(Standard),
            byref(IDwithParityBitState),
            byref(BitrateValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Source = int(Source.value)
        Polarity = int(Polarity.value)
        Bitrate = int(Bitrate.value)
        Standard = int(Standard.value)
        IDwithParityBitState = bool(IDwithParityBitState.value)
        BitrateValue = float(BitrateValue.value)
        return Source, Polarity, Bitrate, Standard, IDwithParityBitState, BitrateValue

    def ConfigureFlexray(self, Vi, Bus, Source, Bitrate, ProbeType, ChannelType, BitrateValue):
        status = self.dll.TekScope_ConfigureFlexray(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(Source),
            ViInt32(Bitrate),
            ViInt32(ProbeType),
            ViInt32(ChannelType),
            ViReal64(BitrateValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadFlexray(self, Vi, Bus):
        Source = ViInt32()
        Bitrate = ViInt32()
        ProbeType = ViInt32()
        ChannelType = ViInt32()
        BitrateValue = ViReal64()
        status = self.dll.TekScope_ReadFlexray(
            ViSession(Vi),
            ViConstString(Bus),
            byref(Source),
            byref(Bitrate),
            byref(ProbeType),
            byref(ChannelType),
            byref(BitrateValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Source = int(Source.value)
        Bitrate = int(Bitrate.value)
        ProbeType = int(ProbeType.value)
        ChannelType = int(ChannelType.value)
        BitrateValue = float(BitrateValue.value)
        return Source, Bitrate, ProbeType, ChannelType, BitrateValue

    def ConfigurePCIe(self, Vi, Bus, Source, Bitrate, Hysteresis, Lane, BitrateValue):
        status = self.dll.TekScope_ConfigurePCIe(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(Source),
            ViInt32(Bitrate),
            ViReal64(Hysteresis),
            ViReal64(Lane),
            ViReal64(BitrateValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadPCIe(self, Vi, Bus):
        Source = ViInt32()
        Bitrate = ViInt32()
        Hysteresis = ViReal64()
        Lane = ViReal64()
        BitrateValue = ViReal64()
        status = self.dll.TekScope_ReadPCIe(
            ViSession(Vi),
            ViConstString(Bus),
            byref(Source),
            byref(Bitrate),
            byref(Hysteresis),
            byref(Lane),
            byref(BitrateValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Source = int(Source.value)
        Bitrate = int(Bitrate.value)
        Hysteresis = float(Hysteresis.value)
        Lane = float(Lane.value)
        BitrateValue = float(BitrateValue.value)
        return Source, Bitrate, Hysteresis, Lane, BitrateValue

    def ConfigureMIL1553(self, Vi, Bus, InputSource, InputPolarity, ResponseTimeMin, ResponseTimeMax):
        status = self.dll.TekScope_ConfigureMIL1553(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(InputSource),
            ViInt32(InputPolarity),
            ViReal64(ResponseTimeMin),
            ViReal64(ResponseTimeMax),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadMIL1553(self, Vi, Bus):
        InputSource = ViInt32()
        InputPolarity = ViInt32()
        ResponseTimeMin = ViReal64()
        ResponseTimeMax = ViReal64()
        status = self.dll.TekScope_ReadMIL1553(
            ViSession(Vi),
            ViConstString(Bus),
            byref(InputSource),
            byref(InputPolarity),
            byref(ResponseTimeMin),
            byref(ResponseTimeMax),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        InputSource = int(InputSource.value)
        InputPolarity = int(InputPolarity.value)
        ResponseTimeMin = float(ResponseTimeMin.value)
        ResponseTimeMax = float(ResponseTimeMax.value)
        return InputSource, InputPolarity, ResponseTimeMin, ResponseTimeMax

    def ConfigureEthernet(self, Vi, Bus, InputSource, Type, Probe):
        status = self.dll.TekScope_ConfigureEthernet(
            ViSession(Vi),
            ViConstString(Bus),
            ViInt32(InputSource),
            ViInt32(Type),
            ViInt32(Probe),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadEthernet(self, Vi, Bus):
        InputSource = ViInt32()
        Type = ViInt32()
        Probe = ViInt32()
        status = self.dll.TekScope_ReadEthernet(
            ViSession(Vi),
            ViConstString(Bus),
            byref(InputSource),
            byref(Type),
            byref(Probe),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        InputSource = int(InputSource.value)
        Type = int(Type.value)
        Probe = int(Probe.value)
        return InputSource, Type, Probe

    def SetPixelRGBValues(
        self,
        Vi,
        Search,
        RedQualifier,
        RedValue,
        GreenQualifier,
        GreenValue,
        BlueQualifier,
        BlueValue,
    ):
        status = self.dll.TekScope_SetPixelRGBValues(
            ViSession(Vi),
            ViConstString(Search),
            ViInt32(RedQualifier),
            ViInt32(RedValue),
            ViInt32(GreenQualifier),
            ViInt32(GreenValue),
            ViInt32(BlueQualifier),
            ViInt32(BlueValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPixelRGBValues(self, Vi, Search):
        RedQualifier = ViInt32()
        RedValue = ViInt32()
        GreenQualifier = ViInt32()
        GreenValue = ViInt32()
        BlueQualifier = ViInt32()
        BlueValue = ViInt32()
        status = self.dll.TekScope_GetPixelRGBValues(
            ViSession(Vi),
            ViConstString(Search),
            byref(RedQualifier),
            byref(RedValue),
            byref(GreenQualifier),
            byref(GreenValue),
            byref(BlueQualifier),
            byref(BlueValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RedQualifier = int(RedQualifier.value)
        RedValue = int(RedValue.value)
        GreenQualifier = int(GreenQualifier.value)
        GreenValue = int(GreenValue.value)
        BlueQualifier = int(BlueQualifier.value)
        BlueValue = int(BlueValue.value)
        return (
            RedQualifier,
            RedValue,
            GreenQualifier,
            GreenValue,
            BlueQualifier,
            BlueValue,
        )

    def SetPixelYUValues(self, Vi, Search, YQualifier, YValue, UQualifier, UValue, VQualifier, VValue):
        status = self.dll.TekScope_SetPixelYUValues(
            ViSession(Vi),
            ViConstString(Search),
            ViInt32(YQualifier),
            ViInt32(YValue),
            ViInt32(UQualifier),
            ViInt32(UValue),
            ViInt32(VQualifier),
            ViInt32(VValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPixelYUValues(self, Vi, Search):
        YQualifier = ViInt32()
        YValue = ViInt32()
        UQualifier = ViInt32()
        UValue = ViInt32()
        VQualifier = ViInt32()
        VValue = ViInt32()
        status = self.dll.TekScope_GetPixelYUValues(
            ViSession(Vi),
            ViConstString(Search),
            byref(YQualifier),
            byref(YValue),
            byref(UQualifier),
            byref(UValue),
            byref(VQualifier),
            byref(VValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        YQualifier = int(YQualifier.value)
        YValue = int(YValue.value)
        UQualifier = int(UQualifier.value)
        UValue = int(UValue.value)
        VQualifier = int(VQualifier.value)
        VValue = int(VValue.value)
        return YQualifier, YValue, UQualifier, UValue, VQualifier, VValue

    def SetPixelYCBCRValues(self, Vi, Search, YCBCRType, Qualifier, Value):
        status = self.dll.TekScope_SetPixelYCBCRValues(
            ViSession(Vi),
            ViConstString(Search),
            ViInt32(YCBCRType),
            ViInt32(Qualifier),
            ViReal64(Value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetPixelYCBCRValues(self, Vi, Search, YCBCRType):
        Qualifier = ViInt32()
        Value = ViReal64()
        status = self.dll.TekScope_GetPixelYCBCRValues(
            ViSession(Vi),
            ViConstString(Search),
            ViInt32(YCBCRType),
            byref(Qualifier),
            byref(Value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Qualifier = int(Qualifier.value)
        Value = float(Value.value)
        return Qualifier, Value

    def GetPixmapWaveformDataEx(self, Vi, WaveformSource, WaveformArrayBufferSize):
        WaveformArray = ARRAY_ViReal64(WaveformArrayBufferSize)
        WaveformArrayActualSize = ViInt32()
        MaxCols = ViInt32()
        MaxRows = ViInt32()
        status = self.dll.TekScope_GetPixmapWaveformDataEx(
            ViSession(Vi),
            ViInt32(WaveformSource),
            ViInt32(WaveformArrayBufferSize),
            WaveformArray,
            byref(WaveformArrayActualSize),
            byref(MaxCols),
            byref(MaxRows),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArray = list(WaveformArray)
        WaveformArrayActualSize = int(WaveformArrayActualSize.value)
        MaxCols = int(MaxCols.value)
        MaxRows = int(MaxRows.value)
        return WaveformArray, WaveformArrayActualSize, MaxCols, MaxRows

    def FetchDigitalAllWaveform(self, Vi, WaveformArrayBufferSize):
        WaveformArray = ARRAY_ViInt32(WaveformArrayBufferSize)
        WaveformArrayActualSize = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.TekScope_FetchDigitalAllWaveform(
            ViSession(Vi),
            ViInt32(WaveformArrayBufferSize),
            WaveformArray,
            byref(WaveformArrayActualSize),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArrayActualSize = int(WaveformArrayActualSize.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, WaveformArrayActualSize, InitialX, XIncrement

    def FetchDigitalWaveform(self, Vi, Source, WaveformArrayBufferSize):
        WaveformArray = ARRAY_ViInt32(WaveformArrayBufferSize)
        WaveformArrayActualSize = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.TekScope_FetchDigitalWaveform(
            ViSession(Vi),
            ViInt32(Source),
            ViInt32(WaveformArrayBufferSize),
            WaveformArray,
            byref(WaveformArrayActualSize),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArrayActualSize = int(WaveformArrayActualSize.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, WaveformArrayActualSize, InitialX, XIncrement

    def GetState(self, Vi, Type):
        State = ViBoolean()
        status = self.dll.TekScope_GetState(ViSession(Vi), ViInt32(Type), byref(State))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(State.value)

    def SetState(self, Vi, Type, State):
        status = self.dll.TekScope_SetState(ViSession(Vi), ViInt32(Type), ViBoolean(State))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetFilesState(self, Vi, Type):
        FilesState = ViBoolean()
        status = self.dll.TekScope_GetFilesState(ViSession(Vi), ViInt32(Type), byref(FilesState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(FilesState.value)

    def SetFilesState(self, Vi, Type, FilesState):
        status = self.dll.TekScope_SetFilesState(ViSession(Vi), ViInt32(Type), ViBoolean(FilesState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCustomName(self, Vi, FileName, FileCount, FileAutoIncrementState):
        status = self.dll.TekScope_ConfigureCustomName(
            ViSession(Vi),
            ViConstString(FileName),
            ViInt32(FileCount),
            ViBoolean(FileAutoIncrementState),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadCustomName(self, Vi, FileNameBufferSize):
        FileName = ARRAY_ViChar(FileNameBufferSize)
        FileCount = ViInt32()
        FileAutoIncrementState = ViBoolean()
        status = self.dll.TekScope_ReadCustomName(
            ViSession(Vi),
            ViInt32(FileNameBufferSize),
            FileName,
            byref(FileCount),
            byref(FileAutoIncrementState),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        FileName = decode(FileName)
        FileCount = int(FileCount.value)
        FileAutoIncrementState = bool(FileAutoIncrementState.value)
        return FileName, FileCount, FileAutoIncrementState

    def GetOPCEx(self, Vi, TimeOut):
        Val = ViBoolean()
        status = self.dll.TekScope_GetOPCEx(ViSession(Vi), ViInt32(TimeOut), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def SaveMarks(self, Vi, FileName):
        status = self.dll.TekScope_SaveMarks(ViSession(Vi), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetMultiScopeIdentityName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.TekScope_GetMultiScopeIdentityName(
            ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def ActualRecordLength(self, Vi):
        ActualRecordLength = ViInt32()
        status = self.dll.TekScope_ActualRecordLength(ViSession(Vi), byref(ActualRecordLength))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ActualRecordLength.value)

    def SampleRate(self, Vi):
        SampleRate = ViReal64()
        status = self.dll.TekScope_SampleRate(ViSession(Vi), byref(SampleRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(SampleRate.value)

    def AutoProbeSenseValue(self, Vi, ChannelName):
        AutoProbeSenseValue = ViReal64()
        status = self.dll.TekScope_AutoProbeSenseValue(
            ViSession(Vi), ViConstString(ChannelName), byref(AutoProbeSenseValue)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AutoProbeSenseValue.value)

    def SampleMode(self, Vi):
        SampleMode = ViInt32()
        status = self.dll.TekScope_SampleMode(ViSession(Vi), byref(SampleMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(SampleMode.value)

    def AutoSetup(self, Vi):
        status = self.dll.TekScope_AutoSetup(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionType(self, Vi, AcquisitionType):
        status = self.dll.TekScope_ConfigureAcquisitionType(ViSession(Vi), ViInt32(AcquisitionType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInterpolation(self, Vi, Interpolation):
        status = self.dll.TekScope_ConfigureInterpolation(ViSession(Vi), ViInt32(Interpolation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInitiateContinuous(self, Vi, ContinuousAcquisition):
        status = self.dll.TekScope_ConfigureInitiateContinuous(ViSession(Vi), ViBoolean(ContinuousAcquisition))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNumAverages(self, Vi, NumberOfAverages):
        status = self.dll.TekScope_ConfigureNumAverages(ViSession(Vi), ViInt32(NumberOfAverages))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNumEnvelopes(self, Vi, NumEnvelopes):
        status = self.dll.TekScope_ConfigureNumEnvelopes(ViSession(Vi), ViInt32(NumEnvelopes))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionRecord(self, Vi, TimePerRecord, MinNumPts, AcquisitionStartTime):
        status = self.dll.TekScope_ConfigureAcquisitionRecord(
            ViSession(Vi),
            ViReal64(TimePerRecord),
            ViInt32(MinNumPts),
            ViReal64(AcquisitionStartTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerCoupling(self, Vi, Coupling):
        status = self.dll.TekScope_ConfigureTriggerCoupling(ViSession(Vi), ViInt32(Coupling))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerLineNumber(self, Vi, TVLineNumber):
        status = self.dll.TekScope_ConfigureTVTriggerLineNumber(ViSession(Vi), ViInt32(TVLineNumber))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcLineTriggerSlope(self, Vi, ACLineSlope):
        status = self.dll.TekScope_ConfigureAcLineTriggerSlope(ViSession(Vi), ViInt32(ACLineSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerModifier(self, Vi, TriggerModifier):
        status = self.dll.TekScope_ConfigureTriggerModifier(ViSession(Vi), ViInt32(TriggerModifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, Vi, TriggerType, Holdoff):
        status = self.dll.TekScope_ConfigureTrigger(ViSession(Vi), ViInt32(TriggerType), ViReal64(Holdoff))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEdgeTriggerSource(self, Vi, Source, Level, Slope):
        status = self.dll.TekScope_ConfigureEdgeTriggerSource(
            ViSession(Vi), ViConstString(Source), ViReal64(Level), ViInt32(Slope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGlitchTriggerSource(self, Vi, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition):
        status = self.dll.TekScope_ConfigureGlitchTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViReal64(Level),
            ViReal64(GlitchWidth),
            ViInt32(GlitchPolarity),
            ViInt32(GlitchCondition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRuntTriggerSource(self, Vi, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity):
        status = self.dll.TekScope_ConfigureRuntTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViReal64(RuntThresholdLow),
            ViReal64(RuntThresholdHigh),
            ViInt32(RuntPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerSource(self, Vi, Source, TVSignalFormat, TVEvent, TVPolarity):
        status = self.dll.TekScope_ConfigureTVTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViInt32(TVSignalFormat),
            ViInt32(TVEvent),
            ViInt32(TVPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureWidthTriggerSource(
        self,
        Vi,
        Source,
        Level,
        WidthLowThreshold,
        WidthHighThreshold,
        WidthPolarity,
        WidthCondition,
    ):
        status = self.dll.TekScope_ConfigureWidthTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViReal64(Level),
            ViReal64(WidthLowThreshold),
            ViReal64(WidthHighThreshold),
            ViInt32(WidthPolarity),
            ViInt32(WidthCondition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.TekScope_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def ConfigureChannel(self, Vi, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled):
        status = self.dll.TekScope_ConfigureChannel(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(Range),
            ViReal64(Offset),
            ViInt32(Coupling),
            ViReal64(ProbeAttenuation),
            ViBoolean(Enabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChanCharacteristics(self, Vi, Channel, InputImpedance, MaxInputFrequency):
        status = self.dll.TekScope_ConfigureChanCharacteristics(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(InputImpedance),
            ViReal64(MaxInputFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefLevels(self, Vi, Low, Mid, High):
        status = self.dll.TekScope_ConfigureRefLevels(ViSession(Vi), ViReal64(Low), ViReal64(Mid), ViReal64(High))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadWaveform(self, Vi, Channel, WaveformSize, MaxTimeMilliseconds):
        WaveformArray = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.TekScope_ReadWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            ViInt32(MaxTimeMilliseconds),
            WaveformArray,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArray = list(WaveformArray)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, ActualPoints, InitialX, XIncrement

    def ReadWaveformMeasurement(self, Vi, Channel, MeasFunction, MaxTimeMilliseconds):
        Measurement = ViReal64()
        status = self.dll.TekScope_ReadWaveformMeasurement(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(MeasFunction),
            ViInt32(MaxTimeMilliseconds),
            byref(Measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Measurement.value)

    def ReadMinMaxWaveform(self, Vi, Channel, WaveformSize, MaxTimeMilliseconds):
        MinWaveform = ARRAY_ViReal64(WaveformSize)
        MaxWaveform = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.TekScope_ReadMinMaxWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            ViInt32(MaxTimeMilliseconds),
            MinWaveform,
            MaxWaveform,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MinWaveform = list(MinWaveform)
        MaxWaveform = list(MaxWaveform)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement

    def FetchWaveform(self, Vi, Channel, WaveformSize):
        WaveformArray = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.TekScope_FetchWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            WaveformArray,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArray = list(WaveformArray)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, ActualPoints, InitialX, XIncrement

    def FetchWaveformMeasurement(self, Vi, Channel, MeasFunction):
        Measurement = ViReal64()
        status = self.dll.TekScope_FetchWaveformMeasurement(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(MeasFunction),
            byref(Measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Measurement.value)

    def FetchMinMaxWaveform(self, Vi, Channel, WaveformSize):
        MinWaveform = ARRAY_ViReal64(WaveformSize)
        MaxWaveform = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.TekScope_FetchMinMaxWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            MinWaveform,
            MaxWaveform,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MinWaveform = list(MinWaveform)
        MaxWaveform = list(MaxWaveform)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement

    def Abort(self, Vi):
        status = self.dll.TekScope_Abort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitiateAcquisition(self, Vi):
        status = self.dll.TekScope_InitiateAcquisition(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AcquisitionStatus(self, Vi):
        Status = ViInt32()
        retcode = self.dll.TekScope_AcquisitionStatus(ViSession(Vi), byref(Status))
        if int(retcode) < 0:
            raise InstrumentError(retcode)
        elif int(retcode) > 0:
            raise InstrumentWarning(retcode)
        return int(Status.value)
