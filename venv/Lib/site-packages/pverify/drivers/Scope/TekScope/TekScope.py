from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .TekScope_dllwrap import *


class TekScope(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = TekScope_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def IsInvalidWfmElement(self, ElementValue):
        """

        :param ElementValue:
        :type ElementValue:
        """
        return self._dllwrap.IsInvalidWfmElement(self._vi, ElementValue)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ClearAll(self):
        """"""
        return self._dllwrap.ClearAll(self._vi)

    def GetS8b10bPatternChar(self, Index, S8B10BPatternCharBufferSize):
        """

        :param Index:
        :type Index:
        :param S8B10BPatternCharBufferSize:
        :type S8B10BPatternCharBufferSize:
        """
        return self._dllwrap.GetS8b10bPatternChar(self._vi, Index, S8B10BPatternCharBufferSize)

    def SetS8b10bPatternChar(self, Index, S8B10BPatternChar):
        """

        :param Index:
        :type Index:
        :param S8B10BPatternChar:
        :type S8B10BPatternChar:
        """
        return self._dllwrap.SetS8b10bPatternChar(self._vi, Index, S8B10BPatternChar)

    def GetS8b10bPatternSymbolrdPlus(self, Index, S8B10BPatternSymbolRDPlusBufferSize):
        """

        :param Index:
        :type Index:
        :param S8B10BPatternSymbolRDPlusBufferSize:
        :type S8B10BPatternSymbolRDPlusBufferSize:
        """
        return self._dllwrap.GetS8b10bPatternSymbolrdPlus(self._vi, Index, S8B10BPatternSymbolRDPlusBufferSize)

    def SetS8b10bPatternSymbolrdPlus(self, Index, S8B10BPatternSymbolRDPlus):
        """

        :param Index:
        :type Index:
        :param S8B10BPatternSymbolRDPlus:
        :type S8B10BPatternSymbolRDPlus:
        """
        return self._dllwrap.SetS8b10bPatternSymbolrdPlus(self._vi, Index, S8B10BPatternSymbolRDPlus)

    def GetS8b10bPatternSymbolrdMinus(self, Index, S8B10BPatternSymbolRDMinusBufferSize):
        """

        :param Index:
        :type Index:
        :param S8B10BPatternSymbolRDMinusBufferSize:
        :type S8B10BPatternSymbolRDMinusBufferSize:
        """
        return self._dllwrap.GetS8b10bPatternSymbolrdMinus(self._vi, Index, S8B10BPatternSymbolRDMinusBufferSize)

    def SetS8b10bPatternSymbolrdMinus(self, Index, S8B10BPatternSymbolRDMinus):
        """

        :param Index:
        :type Index:
        :param S8B10BPatternSymbolRDMinus:
        :type S8B10BPatternSymbolRDMinus:
        """
        return self._dllwrap.SetS8b10bPatternSymbolrdMinus(self._vi, Index, S8B10BPatternSymbolRDMinus)

    def GetHeaderValue(self, HeaderFieldType, FlexrayHeaderValueBufferSize):
        """

        :param HeaderFieldType:
        :type HeaderFieldType:
        :param FlexrayHeaderValueBufferSize:
        :type FlexrayHeaderValueBufferSize:
        """
        return self._dllwrap.GetHeaderValue(self._vi, HeaderFieldType, FlexrayHeaderValueBufferSize)

    def SetHeaderValue(self, HeaderFieldType, FlexrayHeaderValue):
        """

        :param HeaderFieldType:
        :type HeaderFieldType:
        :param FlexrayHeaderValue:
        :type FlexrayHeaderValue:
        """
        return self._dllwrap.SetHeaderValue(self._vi, HeaderFieldType, FlexrayHeaderValue)

    def GetPcIePatternCharacters(self, Character, PCIePatternCharactersBufferSize):
        """

        :param Character:
        :type Character:
        :param PCIePatternCharactersBufferSize:
        :type PCIePatternCharactersBufferSize:
        """
        return self._dllwrap.GetPcIePatternCharacters(self._vi, Character, PCIePatternCharactersBufferSize)

    def SetPcIePatternCharacters(self, Character, PCIePatternCharacters):
        """

        :param Character:
        :type Character:
        :param PCIePatternCharacters:
        :type PCIePatternCharacters:
        """
        return self._dllwrap.SetPcIePatternCharacters(self._vi, Character, PCIePatternCharacters)

    def GetPcIePatternSymbolrdPlus(self, Field, PCIePatternSymbolRDPlusBufferSize):
        """

        :param Field:
        :type Field:
        :param PCIePatternSymbolRDPlusBufferSize:
        :type PCIePatternSymbolRDPlusBufferSize:
        """
        return self._dllwrap.GetPcIePatternSymbolrdPlus(self._vi, Field, PCIePatternSymbolRDPlusBufferSize)

    def SetPcIePatternSymbolrdPlus(self, Field, PCIePatternSymbolRDPlus):
        """

        :param Field:
        :type Field:
        :param PCIePatternSymbolRDPlus:
        :type PCIePatternSymbolRDPlus:
        """
        return self._dllwrap.SetPcIePatternSymbolrdPlus(self._vi, Field, PCIePatternSymbolRDPlus)

    def GetPcIePatternSymbolrdMinus(self, Field, PCIePatternSymbolRDMinusBufferSize):
        """

        :param Field:
        :type Field:
        :param PCIePatternSymbolRDMinusBufferSize:
        :type PCIePatternSymbolRDMinusBufferSize:
        """
        return self._dllwrap.GetPcIePatternSymbolrdMinus(self._vi, Field, PCIePatternSymbolRDMinusBufferSize)

    def SetPcIePatternSymbolrdMinus(self, Field, PCIePatternSymbolRDMinus):
        """

        :param Field:
        :type Field:
        :param PCIePatternSymbolRDMinus:
        :type PCIePatternSymbolRDMinus:
        """
        return self._dllwrap.SetPcIePatternSymbolrdMinus(self._vi, Field, PCIePatternSymbolRDMinus)

    def GetPcIeErrorState(self):
        """"""
        return self._dllwrap.GetPcIeErrorState(self._vi)

    def SetPcIeErrorState(self, PCIeErrorState):
        """

        :param PCIeErrorState:
        :type PCIeErrorState:
        """
        return self._dllwrap.SetPcIeErrorState(self._vi, PCIeErrorState)

    def GetAreaDisplayState(self, Area):
        """

        :param Area:
        :type Area:
        """
        return self._dllwrap.GetAreaDisplayState(self._vi, Area)

    def SetAreaDisplayState(self, Area, AreaDisplayState):
        """

        :param Area:
        :type Area:
        :param AreaDisplayState:
        :type AreaDisplayState:
        """
        return self._dllwrap.SetAreaDisplayState(self._vi, Area, AreaDisplayState)

    def GetAreaLogicDisplay(self, Area):
        """

        :param Area:
        :type Area:
        """
        return self._dllwrap.GetAreaLogicDisplay(self._vi, Area)

    def SetAreaLogicDisplay(self, Area, AreaLogicDisplay):
        """

        :param Area:
        :type Area:
        :param AreaLogicDisplay:
        :type AreaLogicDisplay:
        """
        return self._dllwrap.SetAreaLogicDisplay(self._vi, Area, AreaLogicDisplay)

    def GetAreaShape(self, Area):
        """

        :param Area:
        :type Area:
        """
        return self._dllwrap.GetAreaShape(self._vi, Area)

    def SetAreaShape(self, Area, AreaShape):
        """

        :param Area:
        :type Area:
        :param AreaShape:
        :type AreaShape:
        """
        return self._dllwrap.SetAreaShape(self._vi, Area, AreaShape)

    def GetAreaSource(self, Area):
        """

        :param Area:
        :type Area:
        """
        return self._dllwrap.GetAreaSource(self._vi, Area)

    def SetAreaSource(self, Area, AreaSource):
        """

        :param Area:
        :type Area:
        :param AreaSource:
        :type AreaSource:
        """
        return self._dllwrap.SetAreaSource(self._vi, Area, AreaSource)

    def GetAreaOperation(self, Area):
        """

        :param Area:
        :type Area:
        """
        return self._dllwrap.GetAreaOperation(self._vi, Area)

    def SetAreaOperation(self, Area, AreaOperation):
        """

        :param Area:
        :type Area:
        :param AreaOperation:
        :type AreaOperation:
        """
        return self._dllwrap.SetAreaOperation(self._vi, Area, AreaOperation)

    def SaveSetup(self, Filename):
        """

        :param Filename:
        :type Filename:
        """
        return self._dllwrap.SaveSetup(self._vi, Filename)

    def RecallSetup(self, Filename):
        """

        :param Filename:
        :type Filename:
        """
        return self._dllwrap.RecallSetup(self._vi, Filename)

    def SetTriggerEquation(self, EquationNumber, TriggerEquation):
        """

        :param EquationNumber:
        :type EquationNumber:
        :param TriggerEquation:
        :type TriggerEquation:
        """
        return self._dllwrap.SetTriggerEquation(self._vi, EquationNumber, TriggerEquation)

    def GetTriggerEquation(self, EquationNumber, TriggerEquationBufferSize):
        """

        :param EquationNumber:
        :type EquationNumber:
        :param TriggerEquationBufferSize:
        :type TriggerEquationBufferSize:
        """
        return self._dllwrap.GetTriggerEquation(self._vi, EquationNumber, TriggerEquationBufferSize)

    def DeleteAllAreas(self):
        """"""
        return self._dllwrap.DeleteAllAreas(self._vi)

    def DeleteArea(self, Area):
        """

        :param Area:
        :type Area:
        """
        return self._dllwrap.DeleteArea(self._vi, Area)

    def DuplicateArea(self, Area):
        """

        :param Area:
        :type Area:
        """
        return self._dllwrap.DuplicateArea(self._vi, Area)

    def GetRotationalAngle(self, Area):
        """

        :param Area:
        :type Area:
        """
        return self._dllwrap.GetRotationalAngle(self._vi, Area)

    def SetRotationalAngle(self, Area, RotationalAngle):
        """

        :param Area:
        :type Area:
        :param RotationalAngle:
        :type RotationalAngle:
        """
        return self._dllwrap.SetRotationalAngle(self._vi, Area, RotationalAngle)

    def Flip(self, Area, FlipType):
        """

        :param Area:
        :type Area:
        :param FlipType:
        :type FlipType:
        """
        return self._dllwrap.Flip(self._vi, Area, FlipType)

    def GetAreaxPosition(self, Area):
        """

        :param Area:
        :type Area:
        """
        return self._dllwrap.GetAreaxPosition(self._vi, Area)

    def SetAreaxPosition(self, Area, AreaXPosition):
        """

        :param Area:
        :type Area:
        :param AreaXPosition:
        :type AreaXPosition:
        """
        return self._dllwrap.SetAreaxPosition(self._vi, Area, AreaXPosition)

    def GetAreayPosition(self, Area):
        """

        :param Area:
        :type Area:
        """
        return self._dllwrap.GetAreayPosition(self._vi, Area)

    def SetAreayPosition(self, Area, AreaYPosition):
        """

        :param Area:
        :type Area:
        :param AreaYPosition:
        :type AreaYPosition:
        """
        return self._dllwrap.SetAreayPosition(self._vi, Area, AreaYPosition)

    def GetAreaWidth(self, Area):
        """

        :param Area:
        :type Area:
        """
        return self._dllwrap.GetAreaWidth(self._vi, Area)

    def SetAreaWidth(self, Area, AreaWidth):
        """

        :param Area:
        :type Area:
        :param AreaWidth:
        :type AreaWidth:
        """
        return self._dllwrap.SetAreaWidth(self._vi, Area, AreaWidth)

    def GetAreaHeight(self, Area):
        """

        :param Area:
        :type Area:
        """
        return self._dllwrap.GetAreaHeight(self._vi, Area)

    def SetAreaHeight(self, Area, AreaHeight):
        """

        :param Area:
        :type Area:
        :param AreaHeight:
        :type AreaHeight:
        """
        return self._dllwrap.SetAreaHeight(self._vi, Area, AreaHeight)

    def GetAreaLabel(self, Area, AreaLabelBufferSize):
        """

        :param Area:
        :type Area:
        :param AreaLabelBufferSize:
        :type AreaLabelBufferSize:
        """
        return self._dllwrap.GetAreaLabel(self._vi, Area, AreaLabelBufferSize)

    def SetAreaLabel(self, Area, AreaLabel):
        """

        :param Area:
        :type Area:
        :param AreaLabel:
        :type AreaLabel:
        """
        return self._dllwrap.SetAreaLabel(self._vi, Area, AreaLabel)

    def ConfigureSerialRS232Bus(self, Bus, InputSource, InputPolarity, Bitrate, DataBits, InputParity):
        """

        :param Bus:
        :type Bus:
        :param InputSource:
        :type InputSource:
        :param InputPolarity:
        :type InputPolarity:
        :param Bitrate:
        :type Bitrate:
        :param DataBits:
        :type DataBits:
        :param InputParity:
        :type InputParity:
        """
        return self._dllwrap.ConfigureSerialRS232Bus(
            self._vi, Bus, InputSource, InputPolarity, Bitrate, DataBits, InputParity
        )

    def ConfigureSerialUSBBus(self, Bus, InputSource, Probe, Bitrate, DPLUSSource, DMINUSSource):
        """

        :param Bus:
        :type Bus:
        :param InputSource:
        :type InputSource:
        :param Probe:
        :type Probe:
        :param Bitrate:
        :type Bitrate:
        :param DPLUSSource:
        :type DPLUSSource:
        :param DMINUSSource:
        :type DMINUSSource:
        """
        return self._dllwrap.ConfigureSerialUSBBus(
            self._vi, Bus, InputSource, Probe, Bitrate, DPLUSSource, DMINUSSource
        )

    def ReadSerialRS232Bus(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadSerialRS232Bus(self._vi, Bus)

    def ReadSerialUSBBus(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadSerialUSBBus(self._vi, Bus)

    def ConfigureSerialMipiCsiTwoClock(self, Bus, ClockSource, ClockType):
        """

        :param Bus:
        :type Bus:
        :param ClockSource:
        :type ClockSource:
        :param ClockType:
        :type ClockType:
        """
        return self._dllwrap.ConfigureSerialMipiCsiTwoClock(self._vi, Bus, ClockSource, ClockType)

    def ConfigureSerialMipiCsiTwoLanes(self, Bus, LaneNumber, Type, SourceDPlus, SourceDMinus, SourceDifferential):
        """

        :param Bus:
        :type Bus:
        :param LaneNumber:
        :type LaneNumber:
        :param Type:
        :type Type:
        :param SourceDPlus:
        :type SourceDPlus:
        :param SourceDMinus:
        :type SourceDMinus:
        :param SourceDifferential:
        :type SourceDifferential:
        """
        return self._dllwrap.ConfigureSerialMipiCsiTwoLanes(
            self._vi, Bus, LaneNumber, Type, SourceDPlus, SourceDMinus, SourceDifferential
        )

    def ReadSerialMipiCsiTwoClock(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadSerialMipiCsiTwoClock(self._vi, Bus)

    def SetThreshold(self, Bus, InputSource, Threshold):
        """

        :param Bus:
        :type Bus:
        :param InputSource:
        :type InputSource:
        :param Threshold:
        :type Threshold:
        """
        return self._dllwrap.SetThreshold(self._vi, Bus, InputSource, Threshold)

    def GetThreshold(self, Bus, InputSource):
        """

        :param Bus:
        :type Bus:
        :param InputSource:
        :type InputSource:
        """
        return self._dllwrap.GetThreshold(self._vi, Bus, InputSource)

    def SetLowThreshhold(self, Bus, InputSource, Threshold):
        """

        :param Bus:
        :type Bus:
        :param InputSource:
        :type InputSource:
        :param Threshold:
        :type Threshold:
        """
        return self._dllwrap.SetLowThreshhold(self._vi, Bus, InputSource, Threshold)

    def GetLowThreshold(self, Bus, InputSource):
        """

        :param Bus:
        :type Bus:
        :param InputSource:
        :type InputSource:
        """
        return self._dllwrap.GetLowThreshold(self._vi, Bus, InputSource)

    def SaveEventTable(self, Bus, Filename):
        """

        :param Bus:
        :type Bus:
        :param Filename:
        :type Filename:
        """
        return self._dllwrap.SaveEventTable(self._vi, Bus, Filename)

    def ConfigureSerialMipiDsiOneClock(self, Bus, ClockSource, ClockType):
        """

        :param Bus:
        :type Bus:
        :param ClockSource:
        :type ClockSource:
        :param ClockType:
        :type ClockType:
        """
        return self._dllwrap.ConfigureSerialMipiDsiOneClock(self._vi, Bus, ClockSource, ClockType)

    def ConfigureSerialMipiDsiOneLanes(self, Bus, LaneNumber, Type, SourceDPlus, SourceDMinus, SourceDifferential):
        """

        :param Bus:
        :type Bus:
        :param LaneNumber:
        :type LaneNumber:
        :param Type:
        :type Type:
        :param SourceDPlus:
        :type SourceDPlus:
        :param SourceDMinus:
        :type SourceDMinus:
        :param SourceDifferential:
        :type SourceDifferential:
        """
        return self._dllwrap.ConfigureSerialMipiDsiOneLanes(
            self._vi, Bus, LaneNumber, Type, SourceDPlus, SourceDMinus, SourceDifferential
        )

    def ReadSerialMipiDsiOneClock(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadSerialMipiDsiOneClock(self._vi, Bus)

    def ReadSerialMipiCsiTwoLanes(self, Bus, LaneNumber):
        """

        :param Bus:
        :type Bus:
        :param LaneNumber:
        :type LaneNumber:
        """
        return self._dllwrap.ReadSerialMipiCsiTwoLanes(self._vi, Bus, LaneNumber)

    def ReadSerialMipiDsiOneLanes(self, Bus, LaneNumber):
        """

        :param Bus:
        :type Bus:
        :param LaneNumber:
        :type LaneNumber:
        """
        return self._dllwrap.ReadSerialMipiDsiOneLanes(self._vi, Bus, LaneNumber)

    def ConfigureSerial8B10B(self, Bus, Source, Standard, Bitrate, Hysteresis):
        """

        :param Bus:
        :type Bus:
        :param Source:
        :type Source:
        :param Standard:
        :type Standard:
        :param Bitrate:
        :type Bitrate:
        :param Hysteresis:
        :type Hysteresis:
        """
        return self._dllwrap.ConfigureSerial8B10B(self._vi, Bus, Source, Standard, Bitrate, Hysteresis)

    def ReadSerial8B10B(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadSerial8B10B(self._vi, Bus)

    def GetDisplayState(self, Bus, DisplayForm):
        """

        :param Bus:
        :type Bus:
        :param DisplayForm:
        :type DisplayForm:
        """
        return self._dllwrap.GetDisplayState(self._vi, Bus, DisplayForm)

    def SetDisplayState(self, Bus, DisplayForm, DisplayState):
        """

        :param Bus:
        :type Bus:
        :param DisplayForm:
        :type DisplayForm:
        :param DisplayState:
        :type DisplayState:
        """
        return self._dllwrap.SetDisplayState(self._vi, Bus, DisplayForm, DisplayState)

    def ConfigureCAN(self, Bus, Source, Bitrate, ProbeType, BitrateValue):
        """

        :param Bus:
        :type Bus:
        :param Source:
        :type Source:
        :param Bitrate:
        :type Bitrate:
        :param ProbeType:
        :type ProbeType:
        :param BitrateValue:
        :type BitrateValue:
        """
        return self._dllwrap.ConfigureCAN(self._vi, Bus, Source, Bitrate, ProbeType, BitrateValue)

    def ReadCAN(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadCAN(self._vi, Bus)

    def ConfigureLIN(self, Bus, Source, Polarity, Bitrate, Standard, IDwithParityBitState, BitrateValue):
        """

        :param Bus:
        :type Bus:
        :param Source:
        :type Source:
        :param Polarity:
        :type Polarity:
        :param Bitrate:
        :type Bitrate:
        :param Standard:
        :type Standard:
        :param IDwithParityBitState:
        :type IDwithParityBitState:
        :param BitrateValue:
        :type BitrateValue:
        """
        return self._dllwrap.ConfigureLIN(
            self._vi,
            Bus,
            Source,
            Polarity,
            Bitrate,
            Standard,
            IDwithParityBitState,
            BitrateValue,
        )

    def ReadLIN(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadLIN(self._vi, Bus)

    def ConfigureFlexray(self, Bus, Source, Bitrate, ProbeType, ChannelType, BitrateValue):
        """

        :param Bus:
        :type Bus:
        :param Source:
        :type Source:
        :param Bitrate:
        :type Bitrate:
        :param ProbeType:
        :type ProbeType:
        :param ChannelType:
        :type ChannelType:
        :param BitrateValue:
        :type BitrateValue:
        """
        return self._dllwrap.ConfigureFlexray(self._vi, Bus, Source, Bitrate, ProbeType, ChannelType, BitrateValue)

    def ReadFlexray(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadFlexray(self._vi, Bus)

    def ConfigurePCIe(self, Bus, Source, Bitrate, Hysteresis, Lane, BitrateValue):
        """

        :param Bus:
        :type Bus:
        :param Source:
        :type Source:
        :param Bitrate:
        :type Bitrate:
        :param Hysteresis:
        :type Hysteresis:
        :param Lane:
        :type Lane:
        :param BitrateValue:
        :type BitrateValue:
        """
        return self._dllwrap.ConfigurePCIe(self._vi, Bus, Source, Bitrate, Hysteresis, Lane, BitrateValue)

    def ReadPCIe(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadPCIe(self._vi, Bus)

    def ConfigureMIL1553(self, Bus, InputSource, InputPolarity, ResponseTimeMin, ResponseTimeMax):
        """

        :param Bus:
        :type Bus:
        :param InputSource:
        :type InputSource:
        :param InputPolarity:
        :type InputPolarity:
        :param ResponseTimeMin:
        :type ResponseTimeMin:
        :param ResponseTimeMax:
        :type ResponseTimeMax:
        """
        return self._dllwrap.ConfigureMIL1553(
            self._vi, Bus, InputSource, InputPolarity, ResponseTimeMin, ResponseTimeMax
        )

    def ReadMIL1553(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadMIL1553(self._vi, Bus)

    def ConfigureEthernet(self, Bus, InputSource, Type, Probe):
        """

        :param Bus:
        :type Bus:
        :param InputSource:
        :type InputSource:
        :param Type:
        :type Type:
        :param Probe:
        :type Probe:
        """
        return self._dllwrap.ConfigureEthernet(self._vi, Bus, InputSource, Type, Probe)

    def ReadEthernet(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadEthernet(self._vi, Bus)

    def SetPixelRGBValues(
        self,
        Search,
        RedQualifier,
        RedValue,
        GreenQualifier,
        GreenValue,
        BlueQualifier,
        BlueValue,
    ):
        """

        :param Search:
        :type Search:
        :param RedQualifier:
        :type RedQualifier:
        :param RedValue:
        :type RedValue:
        :param GreenQualifier:
        :type GreenQualifier:
        :param GreenValue:
        :type GreenValue:
        :param BlueQualifier:
        :type BlueQualifier:
        :param BlueValue:
        :type BlueValue:
        """
        return self._dllwrap.SetPixelRGBValues(
            self._vi,
            Search,
            RedQualifier,
            RedValue,
            GreenQualifier,
            GreenValue,
            BlueQualifier,
            BlueValue,
        )

    def GetPixelRGBValues(self, Search):
        """

        :param Search:
        :type Search:
        """
        return self._dllwrap.GetPixelRGBValues(self._vi, Search)

    def SetPixelYUValues(self, Search, YQualifier, YValue, UQualifier, UValue, VQualifier, VValue):
        """

        :param Search:
        :type Search:
        :param YQualifier:
        :type YQualifier:
        :param YValue:
        :type YValue:
        :param UQualifier:
        :type UQualifier:
        :param UValue:
        :type UValue:
        :param VQualifier:
        :type VQualifier:
        :param VValue:
        :type VValue:
        """
        return self._dllwrap.SetPixelYUValues(
            self._vi, Search, YQualifier, YValue, UQualifier, UValue, VQualifier, VValue
        )

    def GetPixelYUValues(self, Search):
        """

        :param Search:
        :type Search:
        """
        return self._dllwrap.GetPixelYUValues(self._vi, Search)

    def SetPixelYCBCRValues(self, Search, YCBCRType, Qualifier, Value):
        """

        :param Search:
        :type Search:
        :param YCBCRType:
        :type YCBCRType:
        :param Qualifier:
        :type Qualifier:
        :param Value:
        :type Value:
        """
        return self._dllwrap.SetPixelYCBCRValues(self._vi, Search, YCBCRType, Qualifier, Value)

    def GetPixelYCBCRValues(self, Search, YCBCRType):
        """

        :param Search:
        :type Search:
        :param YCBCRType:
        :type YCBCRType:
        """
        return self._dllwrap.GetPixelYCBCRValues(self._vi, Search, YCBCRType)

    def GetPixmapWaveformDataEx(self, WaveformSource, WaveformArrayBufferSize):
        """

        :param WaveformSource:
        :type WaveformSource:
        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        """
        return self._dllwrap.GetPixmapWaveformDataEx(self._vi, WaveformSource, WaveformArrayBufferSize)

    def FetchDigitalAllWaveform(self, WaveformArrayBufferSize):
        """

        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        """
        return self._dllwrap.FetchDigitalAllWaveform(self._vi, WaveformArrayBufferSize)

    def FetchDigitalWaveform(self, Source, WaveformArrayBufferSize):
        """

        :param Source:
        :type Source:
        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        """
        return self._dllwrap.FetchDigitalWaveform(self._vi, Source, WaveformArrayBufferSize)

    def GetState(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.GetState(self._vi, Type)

    def SetState(self, Type, State):
        """

        :param Type:
        :type Type:
        :param State:
        :type State:
        """
        return self._dllwrap.SetState(self._vi, Type, State)

    def GetFilesState(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.GetFilesState(self._vi, Type)

    def SetFilesState(self, Type, FilesState):
        """

        :param Type:
        :type Type:
        :param FilesState:
        :type FilesState:
        """
        return self._dllwrap.SetFilesState(self._vi, Type, FilesState)

    def ConfigureCustomName(self, FileName, FileCount, FileAutoIncrementState):
        """

        :param FileName:
        :type FileName:
        :param FileCount:
        :type FileCount:
        :param FileAutoIncrementState:
        :type FileAutoIncrementState:
        """
        return self._dllwrap.ConfigureCustomName(self._vi, FileName, FileCount, FileAutoIncrementState)

    def ReadCustomName(self, FileNameBufferSize):
        """

        :param FileNameBufferSize:
        :type FileNameBufferSize:
        """
        return self._dllwrap.ReadCustomName(self._vi, FileNameBufferSize)

    def GetOPCEx(self, TimeOut):
        """

        :param TimeOut:
        :type TimeOut:
        """
        return self._dllwrap.GetOPCEx(self._vi, TimeOut)

    def SaveMarks(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.SaveMarks(self._vi, FileName)

    def GetMultiScopeIdentityName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetMultiScopeIdentityName(self._vi, Index, NameBufferSize)

    def ActualRecordLength(self):
        """"""
        return self._dllwrap.ActualRecordLength(self._vi)

    def SampleRate(self):
        """"""
        return self._dllwrap.SampleRate(self._vi)

    def AutoProbeSenseValue(self, ChannelName):
        """

        :param ChannelName:
        :type ChannelName:
        """
        return self._dllwrap.AutoProbeSenseValue(self._vi, ChannelName)

    def SampleMode(self):
        """"""
        return self._dllwrap.SampleMode(self._vi)

    def AutoSetup(self):
        """"""
        return self._dllwrap.AutoSetup(self._vi)

    def ConfigureAcquisitionType(self, AcquisitionType):
        """

        :param AcquisitionType:
        :type AcquisitionType:
        """
        return self._dllwrap.ConfigureAcquisitionType(self._vi, AcquisitionType)

    def ConfigureInterpolation(self, Interpolation):
        """

        :param Interpolation:
        :type Interpolation:
        """
        return self._dllwrap.ConfigureInterpolation(self._vi, Interpolation)

    def ConfigureInitiateContinuous(self, ContinuousAcquisition):
        """

        :param ContinuousAcquisition:
        :type ContinuousAcquisition:
        """
        return self._dllwrap.ConfigureInitiateContinuous(self._vi, ContinuousAcquisition)

    def ConfigureNumAverages(self, NumberOfAverages):
        """

        :param NumberOfAverages:
        :type NumberOfAverages:
        """
        return self._dllwrap.ConfigureNumAverages(self._vi, NumberOfAverages)

    def ConfigureNumEnvelopes(self, NumEnvelopes):
        """

        :param NumEnvelopes:
        :type NumEnvelopes:
        """
        return self._dllwrap.ConfigureNumEnvelopes(self._vi, NumEnvelopes)

    def ConfigureAcquisitionRecord(self, TimePerRecord, MinNumPts, AcquisitionStartTime):
        """

        :param TimePerRecord:
        :type TimePerRecord:
        :param MinNumPts:
        :type MinNumPts:
        :param AcquisitionStartTime:
        :type AcquisitionStartTime:
        """
        return self._dllwrap.ConfigureAcquisitionRecord(self._vi, TimePerRecord, MinNumPts, AcquisitionStartTime)

    def ConfigureTriggerCoupling(self, Coupling):
        """

        :param Coupling:
        :type Coupling:
        """
        return self._dllwrap.ConfigureTriggerCoupling(self._vi, Coupling)

    def ConfigureTVTriggerLineNumber(self, TVLineNumber):
        """

        :param TVLineNumber:
        :type TVLineNumber:
        """
        return self._dllwrap.ConfigureTVTriggerLineNumber(self._vi, TVLineNumber)

    def ConfigureAcLineTriggerSlope(self, ACLineSlope):
        """

        :param ACLineSlope:
        :type ACLineSlope:
        """
        return self._dllwrap.ConfigureAcLineTriggerSlope(self._vi, ACLineSlope)

    def ConfigureTriggerModifier(self, TriggerModifier):
        """

        :param TriggerModifier:
        :type TriggerModifier:
        """
        return self._dllwrap.ConfigureTriggerModifier(self._vi, TriggerModifier)

    def ConfigureTrigger(self, TriggerType, Holdoff):
        """

        :param TriggerType:
        :type TriggerType:
        :param Holdoff:
        :type Holdoff:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, TriggerType, Holdoff)

    def ConfigureEdgeTriggerSource(self, Source, Level, Slope):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.ConfigureEdgeTriggerSource(self._vi, Source, Level, Slope)

    def ConfigureGlitchTriggerSource(self, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param GlitchWidth:
        :type GlitchWidth:
        :param GlitchPolarity:
        :type GlitchPolarity:
        :param GlitchCondition:
        :type GlitchCondition:
        """
        return self._dllwrap.ConfigureGlitchTriggerSource(
            self._vi, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition
        )

    def ConfigureRuntTriggerSource(self, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity):
        """

        :param Source:
        :type Source:
        :param RuntThresholdLow:
        :type RuntThresholdLow:
        :param RuntThresholdHigh:
        :type RuntThresholdHigh:
        :param RuntPolarity:
        :type RuntPolarity:
        """
        return self._dllwrap.ConfigureRuntTriggerSource(
            self._vi, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity
        )

    def ConfigureTVTriggerSource(self, Source, TVSignalFormat, TVEvent, TVPolarity):
        """

        :param Source:
        :type Source:
        :param TVSignalFormat:
        :type TVSignalFormat:
        :param TVEvent:
        :type TVEvent:
        :param TVPolarity:
        :type TVPolarity:
        """
        return self._dllwrap.ConfigureTVTriggerSource(self._vi, Source, TVSignalFormat, TVEvent, TVPolarity)

    def ConfigureWidthTriggerSource(
        self,
        Source,
        Level,
        WidthLowThreshold,
        WidthHighThreshold,
        WidthPolarity,
        WidthCondition,
    ):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param WidthLowThreshold:
        :type WidthLowThreshold:
        :param WidthHighThreshold:
        :type WidthHighThreshold:
        :param WidthPolarity:
        :type WidthPolarity:
        :param WidthCondition:
        :type WidthCondition:
        """
        return self._dllwrap.ConfigureWidthTriggerSource(
            self._vi,
            Source,
            Level,
            WidthLowThreshold,
            WidthHighThreshold,
            WidthPolarity,
            WidthCondition,
        )

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def ConfigureChannel(self, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled):
        """

        :param Channel:
        :type Channel:
        :param Range:
        :type Range:
        :param Offset:
        :type Offset:
        :param Coupling:
        :type Coupling:
        :param ProbeAttenuation:
        :type ProbeAttenuation:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureChannel(self._vi, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled)

    def ConfigureChanCharacteristics(self, Channel, InputImpedance, MaxInputFrequency):
        """

        :param Channel:
        :type Channel:
        :param InputImpedance:
        :type InputImpedance:
        :param MaxInputFrequency:
        :type MaxInputFrequency:
        """
        return self._dllwrap.ConfigureChanCharacteristics(self._vi, Channel, InputImpedance, MaxInputFrequency)

    def ConfigureRefLevels(self, Low, Mid, High):
        """

        :param Low:
        :type Low:
        :param Mid:
        :type Mid:
        :param High:
        :type High:
        """
        return self._dllwrap.ConfigureRefLevels(self._vi, Low, Mid, High)

    def ReadWaveform(self, Channel, WaveformSize, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadWaveform(self._vi, Channel, WaveformSize, MaxTimeMilliseconds)

    def ReadWaveformMeasurement(self, Channel, MeasFunction, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param MeasFunction:
        :type MeasFunction:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadWaveformMeasurement(self._vi, Channel, MeasFunction, MaxTimeMilliseconds)

    def ReadMinMaxWaveform(self, Channel, WaveformSize, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadMinMaxWaveform(self._vi, Channel, WaveformSize, MaxTimeMilliseconds)

    def FetchWaveform(self, Channel, WaveformSize):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        """
        return self._dllwrap.FetchWaveform(self._vi, Channel, WaveformSize)

    def FetchWaveformMeasurement(self, Channel, MeasFunction):
        """

        :param Channel:
        :type Channel:
        :param MeasFunction:
        :type MeasFunction:
        """
        return self._dllwrap.FetchWaveformMeasurement(self._vi, Channel, MeasFunction)

    def FetchMinMaxWaveform(self, Channel, WaveformSize):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        """
        return self._dllwrap.FetchMinMaxWaveform(self._vi, Channel, WaveformSize)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def InitiateAcquisition(self):
        """"""
        return self._dllwrap.InitiateAcquisition(self._vi)

    def AcquisitionStatus(self):
        """"""
        return self._dllwrap.AcquisitionStatus(self._vi)
