# -------------------------------------------------------------------------------
# Name           :
# Description    :
#
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
from __future__ import annotations

from pverify.drivers.BaseInstrument import InstrumentError
from pverify.drivers.Scope.ykdlm4000 import IIviScopeEnums

from .error_handling import get_error_msg


class IIviScopeBase:
    """Common methods/properties for all interfaces.

    Attributes:
        Enums
            NOT AVAILABLE IN OFFICIAL IVI DRIVERS
            Contains python dictionaries that contain the enumerations

        interface
            NOT AVAILABLE IN OFFICIAL IVI DRIVERS
            Specific for instrument connection via VISA.
            Provides interface for wrapped VISA library.
    """

    def __init__(self, interface, logger=None):
        self.Enums = IIviScopeEnums
        self.interface = interface
        self._log = logger
        if False:
            from pverify.drivers.BaseInstrument import BaseVisaInstrument

            self.interface = BaseVisaInstrument()

    def GetError(self):
        """Queries all error messages of the scopes error buffer an
        raises an error if one or more errors occurred.
        Additionally occurred error are logged.

        :raise: InstrumentError
        """
        errorList = []
        error = 1
        while error:
            ret = self.interface.vi_query(":STAT:ERR?").strip().split(",")
            errNo = int(ret[0])
            error = (1 if errNo != 420 else 0) if errNo else 0
            if error:
                errMsgExt = get_error_msg(errNo)
                msg = f"Code: {errNo}, Msg: {ret[1]}, MsgExt: {errMsgExt}"
                errorList.append(msg)
                self.interface._Log.error(msg)
        if errorList:
            raise InstrumentError(str(errorList))
