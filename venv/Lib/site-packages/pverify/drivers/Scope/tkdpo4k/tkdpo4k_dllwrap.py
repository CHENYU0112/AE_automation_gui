from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import tkdpo4k_const as const
from .tkdpo4k_const import *


class tkdpo4k_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("tkdpo4k_32.dll", "tkdpo4k_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "tkdpo4k"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        status = self.dll.tkdpo4k_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        status = self.dll.tkdpo4k_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViConstString(optionString),
            byref(newVi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(newVi.value)

    def close(self, vi):
        status = self.dll.tkdpo4k_close(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(1024)
        status = self.dll.tkdpo4k_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.tkdpo4k_LockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.tkdpo4k_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def ConfigureChannel(self, vi, channel, range, offset, coupling, probeAttenuation, enabled):
        status = self.dll.tkdpo4k_ConfigureChannel(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(range),
            ViReal64(offset),
            ViInt32(coupling),
            ViReal64(probeAttenuation),
            ViBoolean(enabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalChannel(self, vi, channel, threshold, enabled):
        status = self.dll.tkdpo4k_ConfigureDigitalChannel(
            ViSession(vi), ViConstString(channel), ViReal64(threshold), ViBoolean(enabled)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChanCharacteristics(self, vi, channel, inputImpedance, maxInputFrequency):
        status = self.dll.tkdpo4k_ConfigureChanCharacteristics(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(inputImpedance),
            ViReal64(maxInputFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AutoProbeSenseValue(self, vi, channel):
        autoProbeSenseValue = ViReal64()
        status = self.dll.tkdpo4k_AutoProbeSenseValue(ViSession(vi), ViConstString(channel), byref(autoProbeSenseValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(autoProbeSenseValue.value)

    def ConfigureBusThreshold(self, vi, channel, upperThreshold, lowerThreshold):
        status = self.dll.tkdpo4k_ConfigureBusThreshold(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(upperThreshold),
            ViReal64(lowerThreshold),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, vi, triggerType, holdoff):
        status = self.dll.tkdpo4k_ConfigureTrigger(ViSession(vi), ViInt32(triggerType), ViReal64(holdoff))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerCoupling(self, vi, coupling):
        status = self.dll.tkdpo4k_ConfigureTriggerCoupling(ViSession(vi), ViInt32(coupling))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerLevel(self, vi, channel, level):
        status = self.dll.tkdpo4k_ConfigureTriggerLevel(ViSession(vi), ViConstString(channel), ViReal64(level))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerThreshold(self, vi, channel, upperThreshold, lowerThreshold):
        status = self.dll.tkdpo4k_ConfigureTriggerThreshold(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(upperThreshold),
            ViReal64(lowerThreshold),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEdgeTriggerSource(self, vi, source, level, slope):
        status = self.dll.tkdpo4k_ConfigureEdgeTriggerSource(
            ViSession(vi), ViConstString(source), ViReal64(level), ViInt32(slope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAuxInTriggerLevel(self, vi, TriggerLevel):
        status = self.dll.tkdpo4k_ConfigureAuxInTriggerLevel(ViSession(vi), ViReal64(TriggerLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcLineTriggerSlope(self, vi, acLineSlope):
        status = self.dll.tkdpo4k_ConfigureAcLineTriggerSlope(ViSession(vi), ViInt32(acLineSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDelayTriggerSource(self, vi, source, coupling, level, slope):
        status = self.dll.tkdpo4k_ConfigureDelayTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViInt32(coupling),
            ViReal64(level),
            ViInt32(slope),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDelayTriggerMode(self, vi, mode):
        status = self.dll.tkdpo4k_ConfigureDelayTriggerMode(ViSession(vi), ViInt32(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDelayTriggerEvents(self, vi, events):
        status = self.dll.tkdpo4k_ConfigureDelayTriggerEvents(ViSession(vi), ViInt32(events))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDelayTriggerTime(self, vi, time):
        status = self.dll.tkdpo4k_ConfigureDelayTriggerTime(ViSession(vi), ViReal64(time))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerSource(self, vi, source, TVSignalFormat, TVEvent, TVPolarity):
        status = self.dll.tkdpo4k_ConfigureTVTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViInt32(TVSignalFormat),
            ViInt32(TVEvent),
            ViInt32(TVPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerLineNumber(self, vi, tvLineNumber):
        status = self.dll.tkdpo4k_ConfigureTVTriggerLineNumber(ViSession(vi), ViInt32(tvLineNumber))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerFieldHoldoff(self, vi, holdoff):
        status = self.dll.tkdpo4k_ConfigureTVTriggerFieldHoldoff(ViSession(vi), ViReal64(holdoff))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerHDTV(self, vi, format):
        status = self.dll.tkdpo4k_ConfigureTVTriggerHDTV(ViSession(vi), ViInt32(format))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerCustom(self, vi, format, scanRate, linePeriod, syncInterval):
        status = self.dll.tkdpo4k_ConfigureTVTriggerCustom(
            ViSession(vi),
            ViInt32(format),
            ViInt32(scanRate),
            ViReal64(linePeriod),
            ViReal64(syncInterval),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRuntTriggerSource(self, vi, source, runtLowThreshold, runtHighThreshold, runtPolarity):
        status = self.dll.tkdpo4k_ConfigureRuntTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(runtLowThreshold),
            ViReal64(runtHighThreshold),
            ViInt32(runtPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRuntTriggerCondition(self, vi, runtWidth, runtCondition):
        status = self.dll.tkdpo4k_ConfigureRuntTriggerCondition(
            ViSession(vi), ViReal64(runtWidth), ViInt32(runtCondition)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGlitchTriggerSource(self, vi, source, level, glitchWidth, glitchPolarity, glitchCondition):
        status = self.dll.tkdpo4k_ConfigureGlitchTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViReal64(glitchWidth),
            ViInt32(glitchPolarity),
            ViInt32(glitchCondition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTransitTriggerSource(self, vi, source, polarity, when, deltaTime, lowThreshold, highThreshold):
        status = self.dll.tkdpo4k_ConfigureTransitTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViInt32(polarity),
            ViInt32(when),
            ViReal64(deltaTime),
            ViReal64(lowThreshold),
            ViReal64(highThreshold),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLogicTriggerThreshold(self, vi, channel, threshold):
        status = self.dll.tkdpo4k_ConfigureLogicTriggerThreshold(
            ViSession(vi), ViConstString(channel), ViReal64(threshold)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePatternTrigger(self, vi, function, deltaTime, condition):
        status = self.dll.tkdpo4k_ConfigurePatternTrigger(
            ViSession(vi), ViInt32(function), ViReal64(deltaTime), ViInt32(condition)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePatternTriggerInput(self, vi, channel, logicInput):
        status = self.dll.tkdpo4k_ConfigurePatternTriggerInput(
            ViSession(vi), ViConstString(channel), ViInt32(logicInput)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureStateTrigger(self, vi, function):
        status = self.dll.tkdpo4k_ConfigureStateTrigger(ViSession(vi), ViInt32(function))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureStateTriggerDataInput(self, vi, channel, logicInput):
        status = self.dll.tkdpo4k_ConfigureStateTriggerDataInput(
            ViSession(vi), ViConstString(channel), ViInt32(logicInput)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureStateTriggerClockInput(self, vi, clockSource, edge):
        status = self.dll.tkdpo4k_ConfigureStateTriggerClockInput(ViSession(vi), ViInt32(clockSource), ViInt32(edge))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSetholdTriggerSource(self, vi, dataSource, clockSource, clockEdge, setTime, holdTime):
        status = self.dll.tkdpo4k_ConfigureSetholdTriggerSource(
            ViSession(vi),
            ViInt32(dataSource),
            ViInt32(clockSource),
            ViInt32(clockEdge),
            ViReal64(setTime),
            ViReal64(holdTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSerialTriggerSource(self, vi, busSource):
        status = self.dll.tkdpo4k_ConfigureSerialTriggerSource(ViSession(vi), ViInt32(busSource))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCANTrigger(self, vi, busNumber, condition):
        status = self.dll.tkdpo4k_ConfigureCANTrigger(ViSession(vi), ViInt32(busNumber), ViInt32(condition))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCANTriggerID(self, vi, busNumber, mode, value):
        status = self.dll.tkdpo4k_ConfigureCANTriggerID(
            ViSession(vi), ViInt32(busNumber), ViInt32(mode), ViConstString(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCANTriggerData(self, vi, busNumber, size, value):
        status = self.dll.tkdpo4k_ConfigureCANTriggerData(
            ViSession(vi), ViInt32(busNumber), ViInt32(size), ViConstString(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCANTriggerFrameType(self, vi, busNumber, frameType):
        status = self.dll.tkdpo4k_ConfigureCANTriggerFrameType(ViSession(vi), ViInt32(busNumber), ViInt32(frameType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureI2CTrigger(self, vi, busNumber, condition, direction):
        status = self.dll.tkdpo4k_ConfigureI2CTrigger(
            ViSession(vi), ViInt32(busNumber), ViInt32(condition), ViInt32(direction)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureI2CTriggerAddress(self, vi, busNumber, mode, value):
        status = self.dll.tkdpo4k_ConfigureI2CTriggerAddress(
            ViSession(vi), ViInt32(busNumber), ViInt32(mode), ViConstString(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureI2CTriggerData(self, vi, busNumber, size, value):
        status = self.dll.tkdpo4k_ConfigureI2CTriggerData(
            ViSession(vi), ViInt32(busNumber), ViInt32(size), ViConstString(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSPITrigger(self, vi, busNumber, condition, dataSize, MISOValue, MOSIValue):
        status = self.dll.tkdpo4k_ConfigureSPITrigger(
            ViSession(vi),
            ViInt32(busNumber),
            ViInt32(condition),
            ViInt32(dataSize),
            ViConstString(MISOValue),
            ViConstString(MOSIValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureParallelTrigger(self, vi, busNumber, value):
        status = self.dll.tkdpo4k_ConfigureParallelTrigger(ViSession(vi), ViInt32(busNumber), ViString(value))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureUSBTrigger(
        self,
        vi,
        busNumber,
        hubAddress,
        portAddress,
        splitTranStartEnd,
        splitTranField,
        splitTranEnd,
    ):
        status = self.dll.tkdpo4k_ConfigureUSBTrigger(
            ViSession(vi),
            ViInt32(busNumber),
            ViString(hubAddress),
            ViString(portAddress),
            ViInt32(splitTranStartEnd),
            ViInt32(splitTranField),
            ViInt32(splitTranEnd),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEthernetTriggerBasic(self, vi, busNumber, frameType, condition, qualifier):
        status = self.dll.tkdpo4k_ConfigureEthernetTriggerBasic(
            ViSession(vi),
            ViInt32(busNumber),
            ViInt32(frameType),
            ViInt32(condition),
            ViInt32(qualifier),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEthernetTriggerData(self, vi, busNumber, size, offset, upperLimit, data):
        status = self.dll.tkdpo4k_ConfigureEthernetTriggerData(
            ViSession(vi),
            ViInt32(busNumber),
            ViInt32(size),
            ViInt32(offset),
            ViString(upperLimit),
            ViString(data),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEthernetTriggerIPH(self, vi, busNumber, srcAddress, dstAddress, protocol):
        status = self.dll.tkdpo4k_ConfigureEthernetTriggerIPH(
            ViSession(vi),
            ViInt32(busNumber),
            ViString(srcAddress),
            ViString(dstAddress),
            ViString(protocol),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEthernetTriggerMAC(self, vi, busNumber, srcAddress, dstAddress, upperLength, length):
        status = self.dll.tkdpo4k_ConfigureEthernetTriggerMAC(
            ViSession(vi),
            ViInt32(busNumber),
            ViString(srcAddress),
            ViString(dstAddress),
            ViString(upperLength),
            ViString(length),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEthernetTriggerQTAG(self, vi, busNumber, QTAG):
        status = self.dll.tkdpo4k_ConfigureEthernetTriggerQTAG(ViSession(vi), ViInt32(busNumber), ViString(QTAG))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEthernetTriggerTCPH(self, vi, busNumber, srcAddress, dstAddress, seqNumber, ackNumber):
        status = self.dll.tkdpo4k_ConfigureEthernetTriggerTCPH(
            ViSession(vi),
            ViInt32(busNumber),
            ViString(srcAddress),
            ViString(dstAddress),
            ViString(seqNumber),
            ViString(ackNumber),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRS232Trigger(self, vi, busNumber, condition, RxSize, RxValue, TxSize, TxValue):
        status = self.dll.tkdpo4k_ConfigureRS232Trigger(
            ViSession(vi),
            ViInt32(busNumber),
            ViInt32(condition),
            ViInt32(RxSize),
            ViString(RxValue),
            ViInt32(TxSize),
            ViString(TxValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionRecord(self, vi, timePerRecord, minimumRecordLength, acquisitionStartTime):
        status = self.dll.tkdpo4k_ConfigureAcquisitionRecord(
            ViSession(vi),
            ViReal64(timePerRecord),
            ViInt32(minimumRecordLength),
            ViReal64(acquisitionStartTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ActualRecordLength(self, vi):
        actualRecordLength = ViInt32()
        status = self.dll.tkdpo4k_ActualRecordLength(ViSession(vi), byref(actualRecordLength))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(actualRecordLength.value)

    def ConfigureAcquisitionType(self, vi, acquisitionType):
        status = self.dll.tkdpo4k_ConfigureAcquisitionType(ViSession(vi), ViInt32(acquisitionType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNumAverages(self, vi, numberOfAverages):
        status = self.dll.tkdpo4k_ConfigureNumAverages(ViSession(vi), ViInt32(numberOfAverages))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNumEnvelopes(self, vi, numberOfEnvelopes):
        status = self.dll.tkdpo4k_ConfigureNumEnvelopes(ViSession(vi), ViInt32(numberOfEnvelopes))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMagnivuEnabled(self, vi, magnivuEnabled):
        status = self.dll.tkdpo4k_ConfigureMagnivuEnabled(ViSession(vi), ViBoolean(magnivuEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ForceTrigger(self, vi):
        status = self.dll.tkdpo4k_ForceTrigger(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureWfmBufferSize(self, vi, bufferSize):
        status = self.dll.tkdpo4k_ConfigureWfmBufferSize(ViSession(vi), ViInt32(bufferSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadWaveform(self, vi, channel, waveformSize, maxTime):
        waveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.tkdpo4k_ReadWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            ViInt32(maxTime),
            waveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        waveform = list(waveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveform, actualPoints, initialX, xIncrement

    def InitiateAcquisition(self, vi):
        status = self.dll.tkdpo4k_InitiateAcquisition(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AcquisitionStatus(self, vi):
        status = ViInt32()
        retcode = self.dll.tkdpo4k_AcquisitionStatus(ViSession(vi), byref(status))
        if int(retcode) < 0:
            raise InstrumentError(retcode)
        elif int(retcode) > 0:
            raise InstrumentWarning(retcode)
        return int(status.value)

    def Abort(self, vi):
        status = self.dll.tkdpo4k_Abort(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FetchWaveform(self, vi, channel, waveformSize):
        waveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.tkdpo4k_FetchWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            waveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        waveform = list(waveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveform, actualPoints, initialX, xIncrement

    def ConfigureFastAcquisition(self, vi, WaveformGrading, FastAcqusitionEnable):
        status = self.dll.tkdpo4k_ConfigureFastAcquisition(
            ViSession(vi), ViInt32(WaveformGrading), ViBoolean(FastAcqusitionEnable)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SampleRate(self, vi):
        rate = ViReal64()
        status = self.dll.tkdpo4k_SampleRate(ViSession(vi), byref(rate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(rate.value)

    def SampleMode(self, vi):
        mode = ViInt32()
        status = self.dll.tkdpo4k_SampleMode(ViSession(vi), byref(mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(mode.value)

    def ConfigureTriggerModifier(self, vi, triggerModifier):
        status = self.dll.tkdpo4k_ConfigureTriggerModifier(ViSession(vi), ViInt32(triggerModifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInitiateContinuous(self, vi, continuousAcquisition):
        status = self.dll.tkdpo4k_ConfigureInitiateContinuous(ViSession(vi), ViBoolean(continuousAcquisition))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadMinMaxWaveform(self, vi, channel, waveformSize, maxTime):
        minWaveform = ARRAY_ViReal64(waveformSize)
        maxWaveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.tkdpo4k_ReadMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            ViInt32(maxTime),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def FetchMinMaxWaveform(self, vi, channel, waveformSize):
        minWaveform = ARRAY_ViReal64(waveformSize)
        maxWaveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.tkdpo4k_FetchMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def InitiateContinuousAcquisition(self, vi, waveformSize):
        status = self.dll.tkdpo4k_InitiateContinuousAcquisition(ViSession(vi), ViInt32(waveformSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FetchContinuousWaveform(self, vi, channel):
        waveform = ARRAY_ViReal64(1000000)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.tkdpo4k_FetchContinuousWaveform(
            ViSession(vi),
            ViConstString(channel),
            waveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        waveform = list(waveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveform, actualPoints, initialX, xIncrement

    def FetchContinuousMinMaxWaveform(self, vi, channel):
        minWaveform = ARRAY_ViReal64(1000000)
        maxWaveform = ARRAY_ViReal64(1000000)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.tkdpo4k_FetchContinuousMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def StopContinuousAcquisition(self, vi):
        status = self.dll.tkdpo4k_StopContinuousAcquisition(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMidRef(self, vi, mid):
        status = self.dll.tkdpo4k_ConfigureMidRef(ViSession(vi), ViReal64(mid))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefLevels(self, vi, low, mid, high):
        status = self.dll.tkdpo4k_ConfigureRefLevels(ViSession(vi), ViReal64(low), ViReal64(mid), ViReal64(high))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasurement(self, vi, referenceLevelCalcMethod, gating):
        status = self.dll.tkdpo4k_ConfigureMeasurement(
            ViSession(vi), ViInt32(referenceLevelCalcMethod), ViInt32(gating)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadWaveformMeasurement(self, vi, channel, measurementFunction, maxTime):
        measurement = ViReal64()
        status = self.dll.tkdpo4k_ReadWaveformMeasurement(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(measurementFunction),
            ViInt32(maxTime),
            byref(measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def ReadPhaseMeasurement(self, vi, measureSource1, measureSource2, maxTime):
        measurement = ViReal64()
        status = self.dll.tkdpo4k_ReadPhaseMeasurement(
            ViSession(vi),
            ViConstString(measureSource1),
            ViConstString(measureSource2),
            ViInt32(maxTime),
            byref(measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def ReadFreqDomainMeasurement(self, vi, ACPRAdjacentChannel):
        RFChannelPower = ViReal64()
        unit = ViInt32()
        ACPR = ViReal64()
        status = self.dll.tkdpo4k_ReadFreqDomainMeasurement(
            ViSession(vi),
            byref(RFChannelPower),
            byref(unit),
            byref(ACPR),
            ViConstString(ACPRAdjacentChannel),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        RFChannelPower = float(RFChannelPower.value)
        unit = int(unit.value)
        ACPR = float(ACPR.value)
        return RFChannelPower, unit, ACPR

    def ReadDelayMeasurement(
        self,
        vi,
        measureSource1,
        measureSource2,
        delayEdge1,
        delayEdge2,
        delayDirection,
        maxTime,
    ):
        measurement = ViReal64()
        status = self.dll.tkdpo4k_ReadDelayMeasurement(
            ViSession(vi),
            ViConstString(measureSource1),
            ViConstString(measureSource2),
            ViInt32(delayEdge1),
            ViInt32(delayEdge2),
            ViInt32(delayDirection),
            ViInt32(maxTime),
            byref(measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def ReadSnapshotMeasurement(self, vi):
        SnapshotMeasValue = ViReal64()
        status = self.dll.tkdpo4k_ReadSnapshotMeasurement(ViSession(vi), byref(SnapshotMeasValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(SnapshotMeasValue.value)

    def ReadRFVersusBandwidth(self, vi):
        VersusTimeBandwidth = ViReal64()
        status = self.dll.tkdpo4k_ReadRFVersusBandwidth(ViSession(vi), byref(VersusTimeBandwidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(VersusTimeBandwidth.value)

    def ReadSpectrogramTime(self, vi):
        SecondsNum = ViInt32()
        TimeStamp = ViInt32()
        status = self.dll.tkdpo4k_ReadSpectrogramTime(ViSession(vi), byref(SecondsNum), byref(TimeStamp))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        SecondsNum = int(SecondsNum.value)
        TimeStamp = int(TimeStamp.value)
        return SecondsNum, TimeStamp

    def FetchWaveformMeasurement(self, vi, channel, measurementFunction):
        measurement = ViReal64()
        status = self.dll.tkdpo4k_FetchWaveformMeasurement(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(measurementFunction),
            byref(measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def FetchPhaseMeasurement(self, vi, measureSource1, measureSource2):
        measurement = ViReal64()
        status = self.dll.tkdpo4k_FetchPhaseMeasurement(
            ViSession(vi),
            ViConstString(measureSource1),
            ViConstString(measureSource2),
            byref(measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def FetchDelayMeasurement(self, vi, measureSource1, measureSource2, delayEdge1, delayEdge2, delayDirection):
        measurement = ViReal64()
        status = self.dll.tkdpo4k_FetchDelayMeasurement(
            ViSession(vi),
            ViConstString(measureSource1),
            ViConstString(measureSource2),
            ViInt32(delayEdge1),
            ViInt32(delayEdge2),
            ViInt32(delayDirection),
            byref(measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def ConfigureBUSType(self, vi, busNumber, type):
        status = self.dll.tkdpo4k_ConfigureBUSType(ViSession(vi), ViInt32(busNumber), ViInt32(type))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureBUSState(self, vi, busNumber, state):
        status = self.dll.tkdpo4k_ConfigureBUSState(ViSession(vi), ViInt32(busNumber), ViBoolean(state))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCAN(self, vi, busNumber, bitRate, probeType, source):
        status = self.dll.tkdpo4k_ConfigureCAN(
            ViSession(vi),
            ViInt32(busNumber),
            ViInt32(bitRate),
            ViInt32(probeType),
            ViInt32(source),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureI2C(self, vi, busNumber, clockSource, dataSource):
        status = self.dll.tkdpo4k_ConfigureI2C(
            ViSession(vi), ViInt32(busNumber), ViInt32(clockSource), ViInt32(dataSource)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSPI(
        self,
        vi,
        busNumber,
        SCLKSource,
        SCLKPolarity,
        SSSource,
        SSPolarity,
        MOSISource,
        MOSIPolarity,
        MISOSource,
        MISOPolarity,
    ):
        status = self.dll.tkdpo4k_ConfigureSPI(
            ViSession(vi),
            ViInt32(busNumber),
            ViInt32(SCLKSource),
            ViInt32(SCLKPolarity),
            ViInt32(SSSource),
            ViInt32(SSPolarity),
            ViInt32(MOSISource),
            ViInt32(MOSIPolarity),
            ViInt32(MISOSource),
            ViInt32(MISOPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureParallel(self, vi, busNumber, bitsSource, clockSource, clockEdge, clockLocked, width):
        status = self.dll.tkdpo4k_ConfigureParallel(
            ViSession(vi),
            ViInt32(busNumber),
            ViConstString(bitsSource),
            ViInt32(clockSource),
            ViInt32(clockEdge),
            ViBoolean(clockLocked),
            ViInt32(width),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRS232(self, vi, busNumber, bitRate, dataBits, delimiter, parity, RxSource, TxSource):
        status = self.dll.tkdpo4k_ConfigureRS232(
            ViSession(vi),
            ViInt32(busNumber),
            ViInt32(bitRate),
            ViInt32(dataBits),
            ViInt32(delimiter),
            ViInt32(parity),
            ViInt32(RxSource),
            ViInt32(TxSource),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEthernet(
        self,
        vi,
        busNumber,
        ethernetType,
        probeType,
        diffInputDataSrc,
        plusDataSrc,
        minusDataSrc,
        protocol,
    ):
        status = self.dll.tkdpo4k_ConfigureEthernet(
            ViSession(vi),
            ViInt32(busNumber),
            ViInt32(ethernetType),
            ViInt32(probeType),
            ViInt32(diffInputDataSrc),
            ViInt32(plusDataSrc),
            ViInt32(minusDataSrc),
            ViInt32(protocol),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AutoSetup(self, vi):
        status = self.dll.tkdpo4k_AutoSetup(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathChannel(self, vi, mathSource1, mathFunction, mathSource2):
        status = self.dll.tkdpo4k_ConfigureMathChannel(
            ViSession(vi),
            ViInt32(mathSource1),
            ViInt32(mathFunction),
            ViInt32(mathSource2),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathChannelFFT(self, vi, mathSource1, fftWindow, fftScale):
        status = self.dll.tkdpo4k_ConfigureMathChannelFFT(
            ViSession(vi), ViInt32(mathSource1), ViInt32(fftWindow), ViInt32(fftScale)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathChannelAdvanced(self, vi, var1, var2, funcDefinition):
        status = self.dll.tkdpo4k_ConfigureMathChannelAdvanced(
            ViSession(vi), ViReal64(var1), ViReal64(var2), ViConstString(funcDefinition)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathChannelSpectrum(self, vi, mathRFSource1, mathRFSource2, mathFunction):
        status = self.dll.tkdpo4k_ConfigureMathChannelSpectrum(
            ViSession(vi),
            ViInt32(mathRFSource1),
            ViInt32(mathRFSource2),
            ViInt32(mathFunction),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def EnableMathChannel(self, vi, enableMathChannel):
        status = self.dll.tkdpo4k_EnableMathChannel(ViSession(vi), ViBoolean(enableMathChannel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathExpDisplay(self, vi, AutoScale):
        status = self.dll.tkdpo4k_ConfigureMathExpDisplay(ViSession(vi), ViBoolean(AutoScale))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StoreWfmToRefChannel(self, vi, sourceChannel, refChannel):
        status = self.dll.tkdpo4k_StoreWfmToRefChannel(
            ViSession(vi), ViConstString(sourceChannel), ViConstString(refChannel)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def EnableReferenceChannel(self, vi, refChannel, enableRefChannel):
        status = self.dll.tkdpo4k_EnableReferenceChannel(
            ViSession(vi), ViConstString(refChannel), ViBoolean(enableRefChannel)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRFRbw(
        self,
        vi,
        spanBandwidth,
        autoResolution,
        manualResolution,
        manualReference,
        autoReference,
    ):
        status = self.dll.tkdpo4k_ConfigureRFRbw(
            ViSession(vi),
            ViReal64(spanBandwidth),
            ViBoolean(autoResolution),
            ViReal64(manualResolution),
            ViReal64(manualReference),
            ViBoolean(autoReference),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRFSquelch(self, vi, enableSquelch, squelchThreshold):
        status = self.dll.tkdpo4k_ConfigureRFSquelch(
            ViSession(vi), ViBoolean(enableSquelch), ViReal64(squelchThreshold)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRFSpectrum(
        self,
        vi,
        spectrumMode,
        frequencySettingMode,
        centerFrequency,
        spanFrequency,
        startFrequency,
        stopFrequency,
    ):
        status = self.dll.tkdpo4k_ConfigureRFSpectrum(
            ViSession(vi),
            ViInt32(spectrumMode),
            ViInt32(frequencySettingMode),
            ViReal64(centerFrequency),
            ViReal64(spanFrequency),
            ViReal64(startFrequency),
            ViReal64(stopFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRFDetection(self, vi, enableAutoDetectionMode, RFChannel, detectionMethod):
        status = self.dll.tkdpo4k_ConfigureRFDetection(
            ViSession(vi),
            ViBoolean(enableAutoDetectionMode),
            ViConstString(RFChannel),
            ViInt32(detectionMethod),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRFNumAverages(self, vi, numberOfAverages):
        status = self.dll.tkdpo4k_ConfigureRFNumAverages(ViSession(vi), ViInt32(numberOfAverages))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRFMeasurement(
        self,
        vi,
        measureType,
        channelBandwidth,
        ACPRAdjacentPairCount,
        ACPRChannelSpacing,
        OBWPowerPercentage,
    ):
        status = self.dll.tkdpo4k_ConfigureRFMeasurement(
            ViSession(vi),
            ViInt32(measureType),
            ViReal64(channelBandwidth),
            ViInt32(ACPRAdjacentPairCount),
            ViReal64(ACPRChannelSpacing),
            ViReal64(OBWPowerPercentage),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRFPhaseTrace(self, vi, PhaseInDegrees, DegreesNumber, EnablePhaseWrap):
        status = self.dll.tkdpo4k_ConfigureRFPhaseTrace(
            ViSession(vi),
            ViInt32(PhaseInDegrees),
            ViInt32(DegreesNumber),
            ViBoolean(EnablePhaseWrap),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTimeDomainWinFunc(self, vi, RFWindowFunction):
        status = self.dll.tkdpo4k_ConfigureTimeDomainWinFunc(ViSession(vi), ViInt32(RFWindowFunction))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def EnableRFChannel(self, vi, refChannel, enable):
        status = self.dll.tkdpo4k_EnableRFChannel(ViSession(vi), ViConstString(refChannel), ViBoolean(enable))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetRFIQDataFileFormat(self, vi, FileFormat):
        status = self.dll.tkdpo4k_SetRFIQDataFileFormat(ViSession(vi), ViInt32(FileFormat))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetSpectrumTraces(self, vi):
        status = self.dll.tkdpo4k_ResetSpectrumTraces(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearSpectrogram(self, vi):
        status = self.dll.tkdpo4k_ClearSpectrogram(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureStandardWaveform(self, vi, Waveform, Amplitude, DCOffset, Frequency, StartPhase):
        status = self.dll.tkdpo4k_ConfigureStandardWaveform(
            ViSession(vi),
            ViInt32(Waveform),
            ViReal64(Amplitude),
            ViReal64(DCOffset),
            ViReal64(Frequency),
            ViReal64(StartPhase),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePresetLevel(self, vi, PresetLevel):
        status = self.dll.tkdpo4k_ConfigurePresetLevel(ViSession(vi), ViInt32(PresetLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNoise(self, vi, EnableNoise, NoiseLevel):
        status = self.dll.tkdpo4k_ConfigureNoise(ViSession(vi), ViBoolean(EnableNoise), ViInt32(NoiseLevel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputEnabled(self, vi, Enabled):
        status = self.dll.tkdpo4k_ConfigureOutputEnabled(ViSession(vi), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureOutputImpedance(self, vi, Impedance):
        status = self.dll.tkdpo4k_ConfigureOutputImpedance(ViSession(vi), ViInt32(Impedance))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePeriod(self, vi, Period):
        status = self.dll.tkdpo4k_ConfigurePeriod(ViSession(vi), ViReal64(Period))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSquareDutyCycle(self, vi, DutyCycle):
        status = self.dll.tkdpo4k_ConfigureSquareDutyCycle(ViSession(vi), ViReal64(DutyCycle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePulseWidth(self, vi, PulseWidth):
        status = self.dll.tkdpo4k_ConfigurePulseWidth(ViSession(vi), ViReal64(PulseWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRampSymmetry(self, vi, RampSymmetry):
        status = self.dll.tkdpo4k_ConfigureRampSymmetry(ViSession(vi), ViReal64(RampSymmetry))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def QueryArbitraryWaveform(self, vi):
        WaveformSlot = ARRAY_ViChar(1024)
        WaveformDate = ARRAY_ViChar(1024)
        WaveformTime = ARRAY_ViChar(1024)
        status = self.dll.tkdpo4k_QueryArbitraryWaveform(ViSession(vi), WaveformSlot, WaveformDate, WaveformTime)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformSlot = decode(WaveformSlot)
        WaveformDate = decode(WaveformDate)
        WaveformTime = decode(WaveformTime)
        return WaveformSlot, WaveformDate, WaveformTime

    def QueryEditedArbitraryWaveform(self, vi):
        Function = ARRAY_ViChar(1024)
        PointNumber = ViInt32()
        status = self.dll.tkdpo4k_QueryEditedArbitraryWaveform(ViSession(vi), Function, byref(PointNumber))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Function = decode(Function)
        PointNumber = int(PointNumber.value)
        return Function, PointNumber

    def ConfigureWaveformLabel(self, vi, WaveformSlot, Label):
        status = self.dll.tkdpo4k_ConfigureWaveformLabel(
            ViSession(vi), ViConstString(WaveformSlot), ViConstString(Label)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GenerateArbWaveformFunction(self, vi, Function, PointNumber):
        status = self.dll.tkdpo4k_GenerateArbWaveformFunction(ViSession(vi), ViInt32(Function), ViInt32(PointNumber))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CreateArbWaveform(self, vi, wfmSize, wfmData):
        _wfmData = (ViReal64 * len(wfmData))(*wfmData)
        wfmHandle = ViInt32()
        _status = self.dll.tkdpo4k_CreateArbWaveform(ViSession(vi), ViInt32(wfmSize), _wfmData, byref(wfmHandle))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(wfmHandle.value)

    def ConfigureArbWaveform(self, vi, Handle, Amplitude, Offset, Frequency):
        status = self.dll.tkdpo4k_ConfigureArbWaveform(
            ViSession(vi),
            ViInt32(Handle),
            ViReal64(Amplitude),
            ViReal64(Offset),
            ViReal64(Frequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearArbWaveform(self, vi, wfmHandle):
        status = self.dll.tkdpo4k_ClearArbWaveform(ViSession(vi), ViInt32(wfmHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SaveWaveform(self, vi, Source, Destination):
        status = self.dll.tkdpo4k_SaveWaveform(ViSession(vi), ViConstString(Source), ViConstString(Destination))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RecallWaveform(self, vi, Source, Destination):
        status = self.dll.tkdpo4k_RecallWaveform(ViSession(vi), ViConstString(Source), ViConstString(Destination))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetDigitalVoltmeter(self, vi):
        status = self.dll.tkdpo4k_ResetDigitalVoltmeter(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalVoltmeter(self, vi, Type, Source, AutoRange):
        status = self.dll.tkdpo4k_ConfigureDigitalVoltmeter(
            ViSession(vi), ViInt32(Type), ViInt32(Source), ViBoolean(AutoRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadDigitalVoltmeter(self, vi):
        Value = ViReal64()
        Frequency = ViReal64()
        status = self.dll.tkdpo4k_ReadDigitalVoltmeter(ViSession(vi), byref(Value), byref(Frequency))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Value = float(Value.value)
        Frequency = float(Frequency.value)
        return Value, Frequency

    def ReadHistoryDVM(self, vi):
        Average = ViReal64()
        Maximum = ViReal64()
        Minimum = ViReal64()
        status = self.dll.tkdpo4k_ReadHistoryDVM(ViSession(vi), byref(Average), byref(Maximum), byref(Minimum))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Average = float(Average.value)
        Maximum = float(Maximum.value)
        Minimum = float(Minimum.value)
        return Average, Maximum, Minimum

    def ReadStatisticsDVM(self, vi):
        Maximum = ViReal64()
        Minimum = ViReal64()
        status = self.dll.tkdpo4k_ReadStatisticsDVM(ViSession(vi), byref(Maximum), byref(Minimum))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Maximum = float(Maximum.value)
        Minimum = float(Minimum.value)
        return Maximum, Minimum

    def ConfigureEvent(self, vi, EventType, AcquisitionNumber, RepeatCount):
        status = self.dll.tkdpo4k_ConfigureEvent(
            ViSession(vi),
            ViInt32(EventType),
            ViInt32(AcquisitionNumber),
            ViInt32(RepeatCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEventEnabled(self, vi, EventAction, EventEnabled):
        status = self.dll.tkdpo4k_ConfigureEventEnabled(ViSession(vi), ViInt32(EventAction), ViBoolean(EventEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        status = self.dll.tkdpo4k_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        status = self.dll.tkdpo4k_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(errorMessage)

    def GetError(self, vi, bufferSize):
        errorCode = ViStatus()
        description = ARRAY_ViChar(1024)
        status = self.dll.tkdpo4k_GetError(ViSession(vi), byref(errorCode), ViInt32(bufferSize), description)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        description = decode(description)
        return errorCode, description

    def ClearError(self, vi):
        status = self.dll.tkdpo4k_ClearError(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetChannelName(self, vi, index, bufferSize):
        name = ARRAY_ViChar(1024)
        status = self.dll.tkdpo4k_GetChannelName(ViSession(vi), ViInt32(index), ViInt32(bufferSize), name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(name)

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(1024)
        status = self.dll.tkdpo4k_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        status = self.dll.tkdpo4k_ResetInterchangeCheck(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, vi):
        status = self.dll.tkdpo4k_ClearInterchangeWarnings(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def reset(self, vi):
        status = self.dll.tkdpo4k_reset(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, vi):
        status = self.dll.tkdpo4k_ResetWithDefaults(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, vi):
        status = self.dll.tkdpo4k_Disable(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InvalidateAllAttributes(self, vi):
        status = self.dll.tkdpo4k_InvalidateAllAttributes(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        status = self.dll.tkdpo4k_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        status = self.dll.tkdpo4k_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def WriteInstrData(self, vi, writeBuffer):
        status = self.dll.tkdpo4k_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        status = self.dll.tkdpo4k_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def IsInvalidWfmElement(self, vi, elementValue):
        isInvalid = ViBoolean()
        status = self.dll.tkdpo4k_IsInvalidWfmElement(ViSession(vi), ViReal64(elementValue), byref(isInvalid))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(isInvalid.value)

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        status = self.dll.tkdpo4k_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        status = self.dll.tkdpo4k_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(1024)
        status = self.dll.tkdpo4k_GetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViInt32(bufSize),
            value,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        status = self.dll.tkdpo4k_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        status = self.dll.tkdpo4k_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        status = self.dll.tkdpo4k_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        status = self.dll.tkdpo4k_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        status = self.dll.tkdpo4k_SetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        status = self.dll.tkdpo4k_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        status = self.dll.tkdpo4k_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        status = self.dll.tkdpo4k_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        status = self.dll.tkdpo4k_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        status = self.dll.tkdpo4k_CheckAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        status = self.dll.tkdpo4k_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        status = self.dll.tkdpo4k_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviInit(self, resourceName, IDQuery, reset, vi):
        status = self.dll.tkdpo4k_IviInit(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(reset), ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviClose(self, vi):
        status = self.dll.tkdpo4k_IviClose(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetErrorInfo(self, vi):
        primaryError = ViStatus()
        secondaryError = ViStatus()
        errorElaboration = ARRAY_ViChar(256)
        status = self.dll.tkdpo4k_GetErrorInfo(
            ViSession(vi), byref(primaryError), byref(secondaryError), errorElaboration
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        errorElaboration = decode(errorElaboration)
        return primaryError, secondaryError, errorElaboration

    def ClearErrorInfo(self, vi):
        status = self.dll.tkdpo4k_ClearErrorInfo(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
