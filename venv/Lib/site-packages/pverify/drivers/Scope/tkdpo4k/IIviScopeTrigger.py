from __future__ import annotations

from .tkdpo4k import *


class IIviScopeTrigger:
    def __init__(self, root):
        self.root = root

        from .IIviScopeTriggerAcLine import IIviScopeTriggerAcLine

        self.AcLine = IIviScopeTriggerAcLine(self.root)

        from .IIviScopeTriggerEdge import IIviScopeTriggerEdge

        self.Edge = IIviScopeTriggerEdge(self.root)

        from .IIviScopeTriggerGlitch import IIviScopeTriggerGlitch

        self.Glitch = IIviScopeTriggerGlitch(self.root)

        from .IIviScopeTriggerRunt import IIviScopeTriggerRunt

        self.Runt = IIviScopeTriggerRunt(self.root)

        from .IIviScopeTriggerTv import IIviScopeTriggerTv

        self.TV = IIviScopeTriggerTv(self.root)

        from .IIviScopeTriggerWidth import IIviScopeTriggerWidth

        self.Width = IIviScopeTriggerWidth(self.root)

    @property
    def Continuous(self):
        return self.root.dllwrap.GetAttributeViBoolean(None, IVI_CLASS_PUBLIC_ATTR_BASE + 107)

    @Continuous.setter
    def Continuous(self, value):
        """
        If True, the oscilloscope waits trigger holdoff seconds after a waveform
        acquisition is complete and then immediatley enters the wait for trigger state
        without passing through the idle state.
        """
        self.root.dllwrap.SetAttributeViBoolean(None, IVI_CLASS_PUBLIC_ATTR_BASE + 107, value)

    @property
    def Coupling(self):
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 14)

    @Coupling.setter
    def Coupling(self, value):
        """
        How the oscilloscope couples the trigger source.
        """
        self.root.dllwrap.SetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 14, value)

    @property
    def Level(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 17)

    @Level.setter
    def Level(self, value):
        """
        The voltage threshold for the trigger subsystem. The units are volts.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 17, value)

    @property
    def Modifier(self):
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 102)

    @Modifier.setter
    def Modifier(self, value):
        """
        The trigger modifier determines the oscilloscope's behavior in the absence of a
        trigger.
        """
        self.root.dllwrap.SetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 102, value)

    @property
    def Source(self):
        return self.root.dllwrap.GetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 13, 1024)

    @Source.setter
    def Source(self, value):
        """
        The signal the oscilloscope monitors for a trigger. It can be channel or one of
        many other values.
        """
        self.root.dllwrap.SetAttributeViString(None, IVI_CLASS_PUBLIC_ATTR_BASE + 13, value)

    @property
    def Holdoff(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 16)

    @Holdoff.setter
    def Holdoff(self, value):
        """
        The length of time the oscilloscope waits after it fills the acquisition buffer
        until the oscilloscope enables the trigger subsystem to detect another trigger.
        The units are seconds.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 16, value)

    @property
    def Type(self):
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 12)

    @Type.setter
    def Type(self, value):
        """
        The kind of event that triggers the osciolloscope.
        """
        self.root.dllwrap.SetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 12, value)

    def Configure(self, Type, Holdoff):
        """
        Configures trigger Type and Holdoff. Holdoff units are seconds.

        :param Type: Specifies the trigger type. This value sets the Trigger Type property.
        :type Type: IviScopeTriggerTypeEnum
        :param Holdoff: Specifies the trigger hold-off. This value sets the Trigger Holdoff property.
        :type Holdoff: float
        """
        self.root.dllwrap.ConfigureTrigger(Type, Holdoff)
