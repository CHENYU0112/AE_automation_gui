from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .tkdpo4k_dllwrap import *


class tkdpo4k(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = tkdpo4k_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def GetNextCoercionRecord(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def ConfigureChannel(self, channel, range, offset, coupling, probeAttenuation, enabled):
        """

        :param channel:
        :type channel:
        :param range:
        :type range:
        :param offset:
        :type offset:
        :param coupling:
        :type coupling:
        :param probeAttenuation:
        :type probeAttenuation:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureChannel(self._vi, channel, range, offset, coupling, probeAttenuation, enabled)

    def ConfigureDigitalChannel(self, channel, threshold, enabled):
        """

        :param channel:
        :type channel:
        :param threshold:
        :type threshold:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureDigitalChannel(self._vi, channel, threshold, enabled)

    def ConfigureChanCharacteristics(self, channel, inputImpedance, maxInputFrequency):
        """

        :param channel:
        :type channel:
        :param inputImpedance:
        :type inputImpedance:
        :param maxInputFrequency:
        :type maxInputFrequency:
        """
        return self._dllwrap.ConfigureChanCharacteristics(self._vi, channel, inputImpedance, maxInputFrequency)

    def AutoProbeSenseValue(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.AutoProbeSenseValue(self._vi, channel)

    def ConfigureBusThreshold(self, channel, upperThreshold, lowerThreshold):
        """

        :param channel:
        :type channel:
        :param upperThreshold:
        :type upperThreshold:
        :param lowerThreshold:
        :type lowerThreshold:
        """
        return self._dllwrap.ConfigureBusThreshold(self._vi, channel, upperThreshold, lowerThreshold)

    def ConfigureTrigger(self, triggerType, holdoff):
        """

        :param triggerType:
        :type triggerType:
        :param holdoff:
        :type holdoff:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, triggerType, holdoff)

    def ConfigureTriggerCoupling(self, coupling):
        """

        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureTriggerCoupling(self._vi, coupling)

    def ConfigureTriggerLevel(self, channel, level):
        """

        :param channel:
        :type channel:
        :param level:
        :type level:
        """
        return self._dllwrap.ConfigureTriggerLevel(self._vi, channel, level)

    def ConfigureTriggerThreshold(self, channel, upperThreshold, lowerThreshold):
        """

        :param channel:
        :type channel:
        :param upperThreshold:
        :type upperThreshold:
        :param lowerThreshold:
        :type lowerThreshold:
        """
        return self._dllwrap.ConfigureTriggerThreshold(self._vi, channel, upperThreshold, lowerThreshold)

    def ConfigureEdgeTriggerSource(self, source, level, slope):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureEdgeTriggerSource(self._vi, source, level, slope)

    def ConfigureAuxInTriggerLevel(self, TriggerLevel):
        """

        :param TriggerLevel:
        :type TriggerLevel:
        """
        return self._dllwrap.ConfigureAuxInTriggerLevel(self._vi, TriggerLevel)

    def ConfigureAcLineTriggerSlope(self, acLineSlope):
        """

        :param acLineSlope:
        :type acLineSlope:
        """
        return self._dllwrap.ConfigureAcLineTriggerSlope(self._vi, acLineSlope)

    def ConfigureDelayTriggerSource(self, source, coupling, level, slope):
        """

        :param source:
        :type source:
        :param coupling:
        :type coupling:
        :param level:
        :type level:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureDelayTriggerSource(self._vi, source, coupling, level, slope)

    def ConfigureDelayTriggerMode(self, mode):
        """

        :param mode:
        :type mode:
        """
        return self._dllwrap.ConfigureDelayTriggerMode(self._vi, mode)

    def ConfigureDelayTriggerEvents(self, events):
        """

        :param events:
        :type events:
        """
        return self._dllwrap.ConfigureDelayTriggerEvents(self._vi, events)

    def ConfigureDelayTriggerTime(self, time):
        """

        :param time:
        :type time:
        """
        return self._dllwrap.ConfigureDelayTriggerTime(self._vi, time)

    def ConfigureTVTriggerSource(self, source, TVSignalFormat, TVEvent, TVPolarity):
        """

        :param source:
        :type source:
        :param TVSignalFormat:
        :type TVSignalFormat:
        :param TVEvent:
        :type TVEvent:
        :param TVPolarity:
        :type TVPolarity:
        """
        return self._dllwrap.ConfigureTVTriggerSource(self._vi, source, TVSignalFormat, TVEvent, TVPolarity)

    def ConfigureTVTriggerLineNumber(self, tvLineNumber):
        """

        :param tvLineNumber:
        :type tvLineNumber:
        """
        return self._dllwrap.ConfigureTVTriggerLineNumber(self._vi, tvLineNumber)

    def ConfigureTVTriggerFieldHoldoff(self, holdoff):
        """

        :param holdoff:
        :type holdoff:
        """
        return self._dllwrap.ConfigureTVTriggerFieldHoldoff(self._vi, holdoff)

    def ConfigureTVTriggerHDTV(self, format):
        """

        :param format:
        :type format:
        """
        return self._dllwrap.ConfigureTVTriggerHDTV(self._vi, format)

    def ConfigureTVTriggerCustom(self, format, scanRate, linePeriod, syncInterval):
        """

        :param format:
        :type format:
        :param scanRate:
        :type scanRate:
        :param linePeriod:
        :type linePeriod:
        :param syncInterval:
        :type syncInterval:
        """
        return self._dllwrap.ConfigureTVTriggerCustom(self._vi, format, scanRate, linePeriod, syncInterval)

    def ConfigureRuntTriggerSource(self, source, runtLowThreshold, runtHighThreshold, runtPolarity):
        """

        :param source:
        :type source:
        :param runtLowThreshold:
        :type runtLowThreshold:
        :param runtHighThreshold:
        :type runtHighThreshold:
        :param runtPolarity:
        :type runtPolarity:
        """
        return self._dllwrap.ConfigureRuntTriggerSource(
            self._vi, source, runtLowThreshold, runtHighThreshold, runtPolarity
        )

    def ConfigureRuntTriggerCondition(self, runtWidth, runtCondition):
        """

        :param runtWidth:
        :type runtWidth:
        :param runtCondition:
        :type runtCondition:
        """
        return self._dllwrap.ConfigureRuntTriggerCondition(self._vi, runtWidth, runtCondition)

    def ConfigureGlitchTriggerSource(self, source, level, glitchWidth, glitchPolarity, glitchCondition):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param glitchWidth:
        :type glitchWidth:
        :param glitchPolarity:
        :type glitchPolarity:
        :param glitchCondition:
        :type glitchCondition:
        """
        return self._dllwrap.ConfigureGlitchTriggerSource(
            self._vi, source, level, glitchWidth, glitchPolarity, glitchCondition
        )

    def ConfigureTransitTriggerSource(self, source, polarity, when, deltaTime, lowThreshold, highThreshold):
        """

        :param source:
        :type source:
        :param polarity:
        :type polarity:
        :param when:
        :type when:
        :param deltaTime:
        :type deltaTime:
        :param lowThreshold:
        :type lowThreshold:
        :param highThreshold:
        :type highThreshold:
        """
        return self._dllwrap.ConfigureTransitTriggerSource(
            self._vi, source, polarity, when, deltaTime, lowThreshold, highThreshold
        )

    def ConfigureLogicTriggerThreshold(self, channel, threshold):
        """

        :param channel:
        :type channel:
        :param threshold:
        :type threshold:
        """
        return self._dllwrap.ConfigureLogicTriggerThreshold(self._vi, channel, threshold)

    def ConfigurePatternTrigger(self, function, deltaTime, condition):
        """

        :param function:
        :type function:
        :param deltaTime:
        :type deltaTime:
        :param condition:
        :type condition:
        """
        return self._dllwrap.ConfigurePatternTrigger(self._vi, function, deltaTime, condition)

    def ConfigurePatternTriggerInput(self, channel, logicInput):
        """

        :param channel:
        :type channel:
        :param logicInput:
        :type logicInput:
        """
        return self._dllwrap.ConfigurePatternTriggerInput(self._vi, channel, logicInput)

    def ConfigureStateTrigger(self, function):
        """

        :param function:
        :type function:
        """
        return self._dllwrap.ConfigureStateTrigger(self._vi, function)

    def ConfigureStateTriggerDataInput(self, channel, logicInput):
        """

        :param channel:
        :type channel:
        :param logicInput:
        :type logicInput:
        """
        return self._dllwrap.ConfigureStateTriggerDataInput(self._vi, channel, logicInput)

    def ConfigureStateTriggerClockInput(self, clockSource, edge):
        """

        :param clockSource:
        :type clockSource:
        :param edge:
        :type edge:
        """
        return self._dllwrap.ConfigureStateTriggerClockInput(self._vi, clockSource, edge)

    def ConfigureSetholdTriggerSource(self, dataSource, clockSource, clockEdge, setTime, holdTime):
        """

        :param dataSource:
        :type dataSource:
        :param clockSource:
        :type clockSource:
        :param clockEdge:
        :type clockEdge:
        :param setTime:
        :type setTime:
        :param holdTime:
        :type holdTime:
        """
        return self._dllwrap.ConfigureSetholdTriggerSource(
            self._vi, dataSource, clockSource, clockEdge, setTime, holdTime
        )

    def ConfigureSerialTriggerSource(self, busSource):
        """

        :param busSource:
        :type busSource:
        """
        return self._dllwrap.ConfigureSerialTriggerSource(self._vi, busSource)

    def ConfigureCANTrigger(self, busNumber, condition):
        """

        :param busNumber:
        :type busNumber:
        :param condition:
        :type condition:
        """
        return self._dllwrap.ConfigureCANTrigger(self._vi, busNumber, condition)

    def ConfigureCANTriggerID(self, busNumber, mode, value):
        """

        :param busNumber:
        :type busNumber:
        :param mode:
        :type mode:
        :param value:
        :type value:
        """
        return self._dllwrap.ConfigureCANTriggerID(self._vi, busNumber, mode, value)

    def ConfigureCANTriggerData(self, busNumber, size, value):
        """

        :param busNumber:
        :type busNumber:
        :param size:
        :type size:
        :param value:
        :type value:
        """
        return self._dllwrap.ConfigureCANTriggerData(self._vi, busNumber, size, value)

    def ConfigureCANTriggerFrameType(self, busNumber, frameType):
        """

        :param busNumber:
        :type busNumber:
        :param frameType:
        :type frameType:
        """
        return self._dllwrap.ConfigureCANTriggerFrameType(self._vi, busNumber, frameType)

    def ConfigureI2CTrigger(self, busNumber, condition, direction):
        """

        :param busNumber:
        :type busNumber:
        :param condition:
        :type condition:
        :param direction:
        :type direction:
        """
        return self._dllwrap.ConfigureI2CTrigger(self._vi, busNumber, condition, direction)

    def ConfigureI2CTriggerAddress(self, busNumber, mode, value):
        """

        :param busNumber:
        :type busNumber:
        :param mode:
        :type mode:
        :param value:
        :type value:
        """
        return self._dllwrap.ConfigureI2CTriggerAddress(self._vi, busNumber, mode, value)

    def ConfigureI2CTriggerData(self, busNumber, size, value):
        """

        :param busNumber:
        :type busNumber:
        :param size:
        :type size:
        :param value:
        :type value:
        """
        return self._dllwrap.ConfigureI2CTriggerData(self._vi, busNumber, size, value)

    def ConfigureSPITrigger(self, busNumber, condition, dataSize, MISOValue, MOSIValue):
        """

        :param busNumber:
        :type busNumber:
        :param condition:
        :type condition:
        :param dataSize:
        :type dataSize:
        :param MISOValue:
        :type MISOValue:
        :param MOSIValue:
        :type MOSIValue:
        """
        return self._dllwrap.ConfigureSPITrigger(self._vi, busNumber, condition, dataSize, MISOValue, MOSIValue)

    def ConfigureParallelTrigger(self, busNumber, value):
        """

        :param busNumber:
        :type busNumber:
        :param value:
        :type value:
        """
        return self._dllwrap.ConfigureParallelTrigger(self._vi, busNumber, value)

    def ConfigureUSBTrigger(
        self,
        busNumber,
        hubAddress,
        portAddress,
        splitTranStartEnd,
        splitTranField,
        splitTranEnd,
    ):
        """

        :param busNumber:
        :type busNumber:
        :param hubAddress:
        :type hubAddress:
        :param portAddress:
        :type portAddress:
        :param splitTranStartEnd:
        :type splitTranStartEnd:
        :param splitTranField:
        :type splitTranField:
        :param splitTranEnd:
        :type splitTranEnd:
        """
        return self._dllwrap.ConfigureUSBTrigger(
            self._vi,
            busNumber,
            hubAddress,
            portAddress,
            splitTranStartEnd,
            splitTranField,
            splitTranEnd,
        )

    def ConfigureEthernetTriggerBasic(self, busNumber, frameType, condition, qualifier):
        """

        :param busNumber:
        :type busNumber:
        :param frameType:
        :type frameType:
        :param condition:
        :type condition:
        :param qualifier:
        :type qualifier:
        """
        return self._dllwrap.ConfigureEthernetTriggerBasic(self._vi, busNumber, frameType, condition, qualifier)

    def ConfigureEthernetTriggerData(self, busNumber, size, offset, upperLimit, data):
        """

        :param busNumber:
        :type busNumber:
        :param size:
        :type size:
        :param offset:
        :type offset:
        :param upperLimit:
        :type upperLimit:
        :param data:
        :type data:
        """
        return self._dllwrap.ConfigureEthernetTriggerData(self._vi, busNumber, size, offset, upperLimit, data)

    def ConfigureEthernetTriggerIPH(self, busNumber, srcAddress, dstAddress, protocol):
        """

        :param busNumber:
        :type busNumber:
        :param srcAddress:
        :type srcAddress:
        :param dstAddress:
        :type dstAddress:
        :param protocol:
        :type protocol:
        """
        return self._dllwrap.ConfigureEthernetTriggerIPH(self._vi, busNumber, srcAddress, dstAddress, protocol)

    def ConfigureEthernetTriggerMAC(self, busNumber, srcAddress, dstAddress, upperLength, length):
        """

        :param busNumber:
        :type busNumber:
        :param srcAddress:
        :type srcAddress:
        :param dstAddress:
        :type dstAddress:
        :param upperLength:
        :type upperLength:
        :param length:
        :type length:
        """
        return self._dllwrap.ConfigureEthernetTriggerMAC(
            self._vi, busNumber, srcAddress, dstAddress, upperLength, length
        )

    def ConfigureEthernetTriggerQTAG(self, busNumber, QTAG):
        """

        :param busNumber:
        :type busNumber:
        :param QTAG:
        :type QTAG:
        """
        return self._dllwrap.ConfigureEthernetTriggerQTAG(self._vi, busNumber, QTAG)

    def ConfigureEthernetTriggerTCPH(self, busNumber, srcAddress, dstAddress, seqNumber, ackNumber):
        """

        :param busNumber:
        :type busNumber:
        :param srcAddress:
        :type srcAddress:
        :param dstAddress:
        :type dstAddress:
        :param seqNumber:
        :type seqNumber:
        :param ackNumber:
        :type ackNumber:
        """
        return self._dllwrap.ConfigureEthernetTriggerTCPH(
            self._vi, busNumber, srcAddress, dstAddress, seqNumber, ackNumber
        )

    def ConfigureRS232Trigger(self, busNumber, condition, RxSize, RxValue, TxSize, TxValue):
        """

        :param busNumber:
        :type busNumber:
        :param condition:
        :type condition:
        :param RxSize:
        :type RxSize:
        :param RxValue:
        :type RxValue:
        :param TxSize:
        :type TxSize:
        :param TxValue:
        :type TxValue:
        """
        return self._dllwrap.ConfigureRS232Trigger(self._vi, busNumber, condition, RxSize, RxValue, TxSize, TxValue)

    def ConfigureAcquisitionRecord(self, timePerRecord, minimumRecordLength, acquisitionStartTime):
        """

        :param timePerRecord:
        :type timePerRecord:
        :param minimumRecordLength:
        :type minimumRecordLength:
        :param acquisitionStartTime:
        :type acquisitionStartTime:
        """
        return self._dllwrap.ConfigureAcquisitionRecord(
            self._vi, timePerRecord, minimumRecordLength, acquisitionStartTime
        )

    def ActualRecordLength(self):
        """"""
        return self._dllwrap.ActualRecordLength(self._vi)

    def ConfigureAcquisitionType(self, acquisitionType):
        """

        :param acquisitionType:
        :type acquisitionType:
        """
        return self._dllwrap.ConfigureAcquisitionType(self._vi, acquisitionType)

    def ConfigureNumAverages(self, numberOfAverages):
        """

        :param numberOfAverages:
        :type numberOfAverages:
        """
        return self._dllwrap.ConfigureNumAverages(self._vi, numberOfAverages)

    def ConfigureNumEnvelopes(self, numberOfEnvelopes):
        """

        :param numberOfEnvelopes:
        :type numberOfEnvelopes:
        """
        return self._dllwrap.ConfigureNumEnvelopes(self._vi, numberOfEnvelopes)

    def ConfigureMagnivuEnabled(self, magnivuEnabled):
        """

        :param magnivuEnabled:
        :type magnivuEnabled:
        """
        return self._dllwrap.ConfigureMagnivuEnabled(self._vi, magnivuEnabled)

    def ForceTrigger(self):
        """"""
        return self._dllwrap.ForceTrigger(self._vi)

    def ConfigureWfmBufferSize(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.ConfigureWfmBufferSize(self._vi, bufferSize)

    def ReadWaveform(self, channel, waveformSize, maxTime):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadWaveform(self._vi, channel, waveformSize, maxTime)

    def InitiateAcquisition(self):
        """"""
        return self._dllwrap.InitiateAcquisition(self._vi)

    def AcquisitionStatus(self):
        """"""
        return self._dllwrap.AcquisitionStatus(self._vi)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def FetchWaveform(self, channel, waveformSize):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchWaveform(self._vi, channel, waveformSize)

    def ConfigureFastAcquisition(self, WaveformGrading, FastAcqusitionEnable):
        """

        :param WaveformGrading:
        :type WaveformGrading:
        :param FastAcqusitionEnable:
        :type FastAcqusitionEnable:
        """
        return self._dllwrap.ConfigureFastAcquisition(self._vi, WaveformGrading, FastAcqusitionEnable)

    def SampleRate(self):
        """"""
        return self._dllwrap.SampleRate(self._vi)

    def SampleMode(self):
        """"""
        return self._dllwrap.SampleMode(self._vi)

    def ConfigureTriggerModifier(self, triggerModifier):
        """

        :param triggerModifier:
        :type triggerModifier:
        """
        return self._dllwrap.ConfigureTriggerModifier(self._vi, triggerModifier)

    def ConfigureInitiateContinuous(self, continuousAcquisition):
        """

        :param continuousAcquisition:
        :type continuousAcquisition:
        """
        return self._dllwrap.ConfigureInitiateContinuous(self._vi, continuousAcquisition)

    def ReadMinMaxWaveform(self, channel, waveformSize, maxTime):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadMinMaxWaveform(self._vi, channel, waveformSize, maxTime)

    def FetchMinMaxWaveform(self, channel, waveformSize):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchMinMaxWaveform(self._vi, channel, waveformSize)

    def InitiateContinuousAcquisition(self, waveformSize):
        """

        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.InitiateContinuousAcquisition(self._vi, waveformSize)

    def FetchContinuousWaveform(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.FetchContinuousWaveform(self._vi, channel)

    def FetchContinuousMinMaxWaveform(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.FetchContinuousMinMaxWaveform(self._vi, channel)

    def StopContinuousAcquisition(self):
        """"""
        return self._dllwrap.StopContinuousAcquisition(self._vi)

    def ConfigureMidRef(self, mid):
        """

        :param mid:
        :type mid:
        """
        return self._dllwrap.ConfigureMidRef(self._vi, mid)

    def ConfigureRefLevels(self, low, mid, high):
        """

        :param low:
        :type low:
        :param mid:
        :type mid:
        :param high:
        :type high:
        """
        return self._dllwrap.ConfigureRefLevels(self._vi, low, mid, high)

    def ConfigureMeasurement(self, referenceLevelCalcMethod, gating):
        """

        :param referenceLevelCalcMethod:
        :type referenceLevelCalcMethod:
        :param gating:
        :type gating:
        """
        return self._dllwrap.ConfigureMeasurement(self._vi, referenceLevelCalcMethod, gating)

    def ReadWaveformMeasurement(self, channel, measurementFunction, maxTime):
        """

        :param channel:
        :type channel:
        :param measurementFunction:
        :type measurementFunction:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadWaveformMeasurement(self._vi, channel, measurementFunction, maxTime)

    def ReadPhaseMeasurement(self, measureSource1, measureSource2, maxTime):
        """

        :param measureSource1:
        :type measureSource1:
        :param measureSource2:
        :type measureSource2:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadPhaseMeasurement(self._vi, measureSource1, measureSource2, maxTime)

    def ReadFreqDomainMeasurement(self, ACPRAdjacentChannel):
        """

        :param ACPRAdjacentChannel:
        :type ACPRAdjacentChannel:
        """
        return self._dllwrap.ReadFreqDomainMeasurement(self._vi, ACPRAdjacentChannel)

    def ReadDelayMeasurement(
        self,
        measureSource1,
        measureSource2,
        delayEdge1,
        delayEdge2,
        delayDirection,
        maxTime,
    ):
        """

        :param measureSource1:
        :type measureSource1:
        :param measureSource2:
        :type measureSource2:
        :param delayEdge1:
        :type delayEdge1:
        :param delayEdge2:
        :type delayEdge2:
        :param delayDirection:
        :type delayDirection:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadDelayMeasurement(
            self._vi,
            measureSource1,
            measureSource2,
            delayEdge1,
            delayEdge2,
            delayDirection,
            maxTime,
        )

    def ReadSnapshotMeasurement(self):
        """"""
        return self._dllwrap.ReadSnapshotMeasurement(self._vi)

    def ReadRFVersusBandwidth(self):
        """"""
        return self._dllwrap.ReadRFVersusBandwidth(self._vi)

    def ReadSpectrogramTime(self):
        """"""
        return self._dllwrap.ReadSpectrogramTime(self._vi)

    def FetchWaveformMeasurement(self, channel, measurementFunction):
        """

        :param channel:
        :type channel:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.FetchWaveformMeasurement(self._vi, channel, measurementFunction)

    def FetchPhaseMeasurement(self, measureSource1, measureSource2):
        """

        :param measureSource1:
        :type measureSource1:
        :param measureSource2:
        :type measureSource2:
        """
        return self._dllwrap.FetchPhaseMeasurement(self._vi, measureSource1, measureSource2)

    def FetchDelayMeasurement(self, measureSource1, measureSource2, delayEdge1, delayEdge2, delayDirection):
        """

        :param measureSource1:
        :type measureSource1:
        :param measureSource2:
        :type measureSource2:
        :param delayEdge1:
        :type delayEdge1:
        :param delayEdge2:
        :type delayEdge2:
        :param delayDirection:
        :type delayDirection:
        """
        return self._dllwrap.FetchDelayMeasurement(
            self._vi,
            measureSource1,
            measureSource2,
            delayEdge1,
            delayEdge2,
            delayDirection,
        )

    def ConfigureBUSType(self, busNumber, type):
        """

        :param busNumber:
        :type busNumber:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureBUSType(self._vi, busNumber, type)

    def ConfigureBUSState(self, busNumber, state):
        """

        :param busNumber:
        :type busNumber:
        :param state:
        :type state:
        """
        return self._dllwrap.ConfigureBUSState(self._vi, busNumber, state)

    def ConfigureCAN(self, busNumber, bitRate, probeType, source):
        """

        :param busNumber:
        :type busNumber:
        :param bitRate:
        :type bitRate:
        :param probeType:
        :type probeType:
        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureCAN(self._vi, busNumber, bitRate, probeType, source)

    def ConfigureI2C(self, busNumber, clockSource, dataSource):
        """

        :param busNumber:
        :type busNumber:
        :param clockSource:
        :type clockSource:
        :param dataSource:
        :type dataSource:
        """
        return self._dllwrap.ConfigureI2C(self._vi, busNumber, clockSource, dataSource)

    def ConfigureSPI(
        self,
        busNumber,
        SCLKSource,
        SCLKPolarity,
        SSSource,
        SSPolarity,
        MOSISource,
        MOSIPolarity,
        MISOSource,
        MISOPolarity,
    ):
        """

        :param busNumber:
        :type busNumber:
        :param SCLKSource:
        :type SCLKSource:
        :param SCLKPolarity:
        :type SCLKPolarity:
        :param SSSource:
        :type SSSource:
        :param SSPolarity:
        :type SSPolarity:
        :param MOSISource:
        :type MOSISource:
        :param MOSIPolarity:
        :type MOSIPolarity:
        :param MISOSource:
        :type MISOSource:
        :param MISOPolarity:
        :type MISOPolarity:
        """
        return self._dllwrap.ConfigureSPI(
            self._vi,
            busNumber,
            SCLKSource,
            SCLKPolarity,
            SSSource,
            SSPolarity,
            MOSISource,
            MOSIPolarity,
            MISOSource,
            MISOPolarity,
        )

    def ConfigureParallel(self, busNumber, bitsSource, clockSource, clockEdge, clockLocked, width):
        """

        :param busNumber:
        :type busNumber:
        :param bitsSource:
        :type bitsSource:
        :param clockSource:
        :type clockSource:
        :param clockEdge:
        :type clockEdge:
        :param clockLocked:
        :type clockLocked:
        :param width:
        :type width:
        """
        return self._dllwrap.ConfigureParallel(
            self._vi, busNumber, bitsSource, clockSource, clockEdge, clockLocked, width
        )

    def ConfigureRS232(self, busNumber, bitRate, dataBits, delimiter, parity, RxSource, TxSource):
        """

        :param busNumber:
        :type busNumber:
        :param bitRate:
        :type bitRate:
        :param dataBits:
        :type dataBits:
        :param delimiter:
        :type delimiter:
        :param parity:
        :type parity:
        :param RxSource:
        :type RxSource:
        :param TxSource:
        :type TxSource:
        """
        return self._dllwrap.ConfigureRS232(
            self._vi, busNumber, bitRate, dataBits, delimiter, parity, RxSource, TxSource
        )

    def ConfigureEthernet(
        self,
        busNumber,
        ethernetType,
        probeType,
        diffInputDataSrc,
        plusDataSrc,
        minusDataSrc,
        protocol,
    ):
        """

        :param busNumber:
        :type busNumber:
        :param ethernetType:
        :type ethernetType:
        :param probeType:
        :type probeType:
        :param diffInputDataSrc:
        :type diffInputDataSrc:
        :param plusDataSrc:
        :type plusDataSrc:
        :param minusDataSrc:
        :type minusDataSrc:
        :param protocol:
        :type protocol:
        """
        return self._dllwrap.ConfigureEthernet(
            self._vi,
            busNumber,
            ethernetType,
            probeType,
            diffInputDataSrc,
            plusDataSrc,
            minusDataSrc,
            protocol,
        )

    def AutoSetup(self):
        """"""
        return self._dllwrap.AutoSetup(self._vi)

    def ConfigureMathChannel(self, mathSource1, mathFunction, mathSource2):
        """

        :param mathSource1:
        :type mathSource1:
        :param mathFunction:
        :type mathFunction:
        :param mathSource2:
        :type mathSource2:
        """
        return self._dllwrap.ConfigureMathChannel(self._vi, mathSource1, mathFunction, mathSource2)

    def ConfigureMathChannelFFT(self, mathSource1, fftWindow, fftScale):
        """

        :param mathSource1:
        :type mathSource1:
        :param fftWindow:
        :type fftWindow:
        :param fftScale:
        :type fftScale:
        """
        return self._dllwrap.ConfigureMathChannelFFT(self._vi, mathSource1, fftWindow, fftScale)

    def ConfigureMathChannelAdvanced(self, var1, var2, funcDefinition):
        """

        :param var1:
        :type var1:
        :param var2:
        :type var2:
        :param funcDefinition:
        :type funcDefinition:
        """
        return self._dllwrap.ConfigureMathChannelAdvanced(self._vi, var1, var2, funcDefinition)

    def ConfigureMathChannelSpectrum(self, mathRFSource1, mathRFSource2, mathFunction):
        """

        :param mathRFSource1:
        :type mathRFSource1:
        :param mathRFSource2:
        :type mathRFSource2:
        :param mathFunction:
        :type mathFunction:
        """
        return self._dllwrap.ConfigureMathChannelSpectrum(self._vi, mathRFSource1, mathRFSource2, mathFunction)

    def EnableMathChannel(self, enableMathChannel):
        """

        :param enableMathChannel:
        :type enableMathChannel:
        """
        return self._dllwrap.EnableMathChannel(self._vi, enableMathChannel)

    def ConfigureMathExpDisplay(self, AutoScale):
        """

        :param AutoScale:
        :type AutoScale:
        """
        return self._dllwrap.ConfigureMathExpDisplay(self._vi, AutoScale)

    def StoreWfmToRefChannel(self, sourceChannel, refChannel):
        """

        :param sourceChannel:
        :type sourceChannel:
        :param refChannel:
        :type refChannel:
        """
        return self._dllwrap.StoreWfmToRefChannel(self._vi, sourceChannel, refChannel)

    def EnableReferenceChannel(self, refChannel, enableRefChannel):
        """

        :param refChannel:
        :type refChannel:
        :param enableRefChannel:
        :type enableRefChannel:
        """
        return self._dllwrap.EnableReferenceChannel(self._vi, refChannel, enableRefChannel)

    def ConfigureRFRbw(
        self,
        spanBandwidth,
        autoResolution,
        manualResolution,
        manualReference,
        autoReference,
    ):
        """

        :param spanBandwidth:
        :type spanBandwidth:
        :param autoResolution:
        :type autoResolution:
        :param manualResolution:
        :type manualResolution:
        :param manualReference:
        :type manualReference:
        :param autoReference:
        :type autoReference:
        """
        return self._dllwrap.ConfigureRFRbw(
            self._vi,
            spanBandwidth,
            autoResolution,
            manualResolution,
            manualReference,
            autoReference,
        )

    def ConfigureRFSquelch(self, enableSquelch, squelchThreshold):
        """

        :param enableSquelch:
        :type enableSquelch:
        :param squelchThreshold:
        :type squelchThreshold:
        """
        return self._dllwrap.ConfigureRFSquelch(self._vi, enableSquelch, squelchThreshold)

    def ConfigureRFSpectrum(
        self,
        spectrumMode,
        frequencySettingMode,
        centerFrequency,
        spanFrequency,
        startFrequency,
        stopFrequency,
    ):
        """

        :param spectrumMode:
        :type spectrumMode:
        :param frequencySettingMode:
        :type frequencySettingMode:
        :param centerFrequency:
        :type centerFrequency:
        :param spanFrequency:
        :type spanFrequency:
        :param startFrequency:
        :type startFrequency:
        :param stopFrequency:
        :type stopFrequency:
        """
        return self._dllwrap.ConfigureRFSpectrum(
            self._vi,
            spectrumMode,
            frequencySettingMode,
            centerFrequency,
            spanFrequency,
            startFrequency,
            stopFrequency,
        )

    def ConfigureRFDetection(self, enableAutoDetectionMode, RFChannel, detectionMethod):
        """

        :param enableAutoDetectionMode:
        :type enableAutoDetectionMode:
        :param RFChannel:
        :type RFChannel:
        :param detectionMethod:
        :type detectionMethod:
        """
        return self._dllwrap.ConfigureRFDetection(self._vi, enableAutoDetectionMode, RFChannel, detectionMethod)

    def ConfigureRFNumAverages(self, numberOfAverages):
        """

        :param numberOfAverages:
        :type numberOfAverages:
        """
        return self._dllwrap.ConfigureRFNumAverages(self._vi, numberOfAverages)

    def ConfigureRFMeasurement(
        self,
        measureType,
        channelBandwidth,
        ACPRAdjacentPairCount,
        ACPRChannelSpacing,
        OBWPowerPercentage,
    ):
        """

        :param measureType:
        :type measureType:
        :param channelBandwidth:
        :type channelBandwidth:
        :param ACPRAdjacentPairCount:
        :type ACPRAdjacentPairCount:
        :param ACPRChannelSpacing:
        :type ACPRChannelSpacing:
        :param OBWPowerPercentage:
        :type OBWPowerPercentage:
        """
        return self._dllwrap.ConfigureRFMeasurement(
            self._vi,
            measureType,
            channelBandwidth,
            ACPRAdjacentPairCount,
            ACPRChannelSpacing,
            OBWPowerPercentage,
        )

    def ConfigureRFPhaseTrace(self, PhaseInDegrees, DegreesNumber, EnablePhaseWrap):
        """

        :param PhaseInDegrees:
        :type PhaseInDegrees:
        :param DegreesNumber:
        :type DegreesNumber:
        :param EnablePhaseWrap:
        :type EnablePhaseWrap:
        """
        return self._dllwrap.ConfigureRFPhaseTrace(self._vi, PhaseInDegrees, DegreesNumber, EnablePhaseWrap)

    def ConfigureTimeDomainWinFunc(self, RFWindowFunction):
        """

        :param RFWindowFunction:
        :type RFWindowFunction:
        """
        return self._dllwrap.ConfigureTimeDomainWinFunc(self._vi, RFWindowFunction)

    def EnableRFChannel(self, refChannel, enable):
        """

        :param refChannel:
        :type refChannel:
        :param enable:
        :type enable:
        """
        return self._dllwrap.EnableRFChannel(self._vi, refChannel, enable)

    def SetRFIQDataFileFormat(self, FileFormat):
        """

        :param FileFormat:
        :type FileFormat:
        """
        return self._dllwrap.SetRFIQDataFileFormat(self._vi, FileFormat)

    def ResetSpectrumTraces(self):
        """"""
        return self._dllwrap.ResetSpectrumTraces(self._vi)

    def ClearSpectrogram(self):
        """"""
        return self._dllwrap.ClearSpectrogram(self._vi)

    def ConfigureStandardWaveform(self, Waveform, Amplitude, DCOffset, Frequency, StartPhase):
        """

        :param Waveform:
        :type Waveform:
        :param Amplitude:
        :type Amplitude:
        :param DCOffset:
        :type DCOffset:
        :param Frequency:
        :type Frequency:
        :param StartPhase:
        :type StartPhase:
        """
        return self._dllwrap.ConfigureStandardWaveform(self._vi, Waveform, Amplitude, DCOffset, Frequency, StartPhase)

    def ConfigurePresetLevel(self, PresetLevel):
        """

        :param PresetLevel:
        :type PresetLevel:
        """
        return self._dllwrap.ConfigurePresetLevel(self._vi, PresetLevel)

    def ConfigureNoise(self, EnableNoise, NoiseLevel):
        """

        :param EnableNoise:
        :type EnableNoise:
        :param NoiseLevel:
        :type NoiseLevel:
        """
        return self._dllwrap.ConfigureNoise(self._vi, EnableNoise, NoiseLevel)

    def ConfigureOutputEnabled(self, Enabled):
        """

        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureOutputEnabled(self._vi, Enabled)

    def ConfigureOutputImpedance(self, Impedance):
        """

        :param Impedance:
        :type Impedance:
        """
        return self._dllwrap.ConfigureOutputImpedance(self._vi, Impedance)

    def ConfigurePeriod(self, Period):
        """

        :param Period:
        :type Period:
        """
        return self._dllwrap.ConfigurePeriod(self._vi, Period)

    def ConfigureSquareDutyCycle(self, DutyCycle):
        """

        :param DutyCycle:
        :type DutyCycle:
        """
        return self._dllwrap.ConfigureSquareDutyCycle(self._vi, DutyCycle)

    def ConfigurePulseWidth(self, PulseWidth):
        """

        :param PulseWidth:
        :type PulseWidth:
        """
        return self._dllwrap.ConfigurePulseWidth(self._vi, PulseWidth)

    def ConfigureRampSymmetry(self, RampSymmetry):
        """

        :param RampSymmetry:
        :type RampSymmetry:
        """
        return self._dllwrap.ConfigureRampSymmetry(self._vi, RampSymmetry)

    def QueryArbitraryWaveform(self):
        """"""
        return self._dllwrap.QueryArbitraryWaveform(self._vi)

    def QueryEditedArbitraryWaveform(self):
        """"""
        return self._dllwrap.QueryEditedArbitraryWaveform(self._vi)

    def ConfigureWaveformLabel(self, WaveformSlot, Label):
        """

        :param WaveformSlot:
        :type WaveformSlot:
        :param Label:
        :type Label:
        """
        return self._dllwrap.ConfigureWaveformLabel(self._vi, WaveformSlot, Label)

    def GenerateArbWaveformFunction(self, Function, PointNumber):
        """

        :param Function:
        :type Function:
        :param PointNumber:
        :type PointNumber:
        """
        return self._dllwrap.GenerateArbWaveformFunction(self._vi, Function, PointNumber)

    def CreateArbWaveform(self, wfmSize, wfmData):
        """

        :param wfmSize:
        :type wfmSize:
        :param wfmData:
        :type wfmData:
        """
        return self._dllwrap.CreateArbWaveform(self._vi, wfmSize, wfmData)

    def ConfigureArbWaveform(self, Handle, Amplitude, Offset, Frequency):
        """

        :param Handle:
        :type Handle:
        :param Amplitude:
        :type Amplitude:
        :param Offset:
        :type Offset:
        :param Frequency:
        :type Frequency:
        """
        return self._dllwrap.ConfigureArbWaveform(self._vi, Handle, Amplitude, Offset, Frequency)

    def ClearArbWaveform(self, wfmHandle):
        """

        :param wfmHandle:
        :type wfmHandle:
        """
        return self._dllwrap.ClearArbWaveform(self._vi, wfmHandle)

    def SaveWaveform(self, Source, Destination):
        """

        :param Source:
        :type Source:
        :param Destination:
        :type Destination:
        """
        return self._dllwrap.SaveWaveform(self._vi, Source, Destination)

    def RecallWaveform(self, Source, Destination):
        """

        :param Source:
        :type Source:
        :param Destination:
        :type Destination:
        """
        return self._dllwrap.RecallWaveform(self._vi, Source, Destination)

    def ResetDigitalVoltmeter(self):
        """"""
        return self._dllwrap.ResetDigitalVoltmeter(self._vi)

    def ConfigureDigitalVoltmeter(self, Type, Source, AutoRange):
        """

        :param Type:
        :type Type:
        :param Source:
        :type Source:
        :param AutoRange:
        :type AutoRange:
        """
        return self._dllwrap.ConfigureDigitalVoltmeter(self._vi, Type, Source, AutoRange)

    def ReadDigitalVoltmeter(self):
        """"""
        return self._dllwrap.ReadDigitalVoltmeter(self._vi)

    def ReadHistoryDVM(self):
        """"""
        return self._dllwrap.ReadHistoryDVM(self._vi)

    def ReadStatisticsDVM(self):
        """"""
        return self._dllwrap.ReadStatisticsDVM(self._vi)

    def ConfigureEvent(self, EventType, AcquisitionNumber, RepeatCount):
        """

        :param EventType:
        :type EventType:
        :param AcquisitionNumber:
        :type AcquisitionNumber:
        :param RepeatCount:
        :type RepeatCount:
        """
        return self._dllwrap.ConfigureEvent(self._vi, EventType, AcquisitionNumber, RepeatCount)

    def ConfigureEventEnabled(self, EventAction, EventEnabled):
        """

        :param EventAction:
        :type EventAction:
        :param EventEnabled:
        :type EventEnabled:
        """
        return self._dllwrap.ConfigureEventEnabled(self._vi, EventAction, EventEnabled)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def GetError(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def GetChannelName(self, index, bufferSize):
        """

        :param index:
        :type index:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, index, bufferSize)

    def GetNextInterchangeWarning(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """

        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def IsInvalidWfmElement(self, elementValue):
        """

        :param elementValue:
        :type elementValue:
        """
        return self._dllwrap.IsInvalidWfmElement(self._vi, elementValue)

    def GetAttributeViInt32(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName, attribute, bufSize):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param bufSize:
        :type bufSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)

    def IviInit(self, resourceName, IDQuery, reset):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param reset:
        :type reset:
        """
        return self._dllwrap.IviInit(resourceName, IDQuery, reset, self._vi)

    def IviClose(self):
        """"""
        return self._dllwrap.IviClose(self._vi)

    def GetErrorInfo(self):
        """"""
        return self._dllwrap.GetErrorInfo(self._vi)

    def ClearErrorInfo(self):
        """"""
        return self._dllwrap.ClearErrorInfo(self._vi)
