from __future__ import annotations

from .tkdpo4k import *


class IIviScopeTriggerWidth:
    def __init__(self, root):
        self.root = root

    @property
    def condition(self):
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 504)

    @condition.setter
    def condition(self, value):
        """
        The condition of a pulse that triggers the oscilloscope. The condition is either
        inside or outside of the high and low thresholds.
        """
        self.root.dllwrap.SetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 504, value)

    @property
    def polarity(self):
        return self.root.dllwrap.GetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 503)

    @polarity.setter
    def polarity(self, value):
        """
        The polarity of the pulse that triggers the oscilloscope.
        """
        self.root.dllwrap.SetAttributeViInt32(None, IVI_CLASS_PUBLIC_ATTR_BASE + 503, value)

    @property
    def ThresholdLow(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 501)

    @ThresholdLow.setter
    def ThresholdLow(self, value):
        """
        The low width threshold time. The units are seconds.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 501, value)

    @property
    def ThresholdHigh(self):
        return self.root.dllwrap.GetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 502)

    @ThresholdHigh.setter
    def ThresholdHigh(self, value):
        """
        The high width threshold time. The units are seconds.
        """
        self.root.dllwrap.SetAttributeViReal64(None, IVI_CLASS_PUBLIC_ATTR_BASE + 502, value)

    def Configure(self, Source, Level, ThresholdLow, ThresholdHigh, polarity, condition):
        """
        Configures the width trigger Source, Level, ThresholdLow, ThresholdHigh,
        Polarity, and Condition. A width trigger occurs when a pulse, that passes
        through Level, with a width between or outside, the width thresholds is
        detected.

        :param Source: None
        :type Source: str
        :param Level: Trigger Level. This value sets the Trigger Level property.
        :type Level: float
        :param ThresholdLow: Sets the width triggering low threshold in seconds. This value sets the Width
            Low Threshold property.
        :type ThresholdLow: float
        :param ThresholdHigh: Sets the width triggering high threshold in seconds. This value sets the Width
            High Threshold property.
        :type ThresholdHigh: float
        :param polarity: Sets the width polarity. This value sets the Width Polarity property.
        :type polarity: IviScopeWidthPolarityEnum
        :param condition: Specifies whether a pulse that is within or outside the user-specified
            thresholds trigger waveform acquisition. This value sets the Width Condition
            property.
        :type condition: IviScopeWidthConditionEnum
        """
        self.root.dllwrap.ConfigureWidthTriggerSource(Source, Level, ThresholdLow, ThresholdHigh, polarity, condition)
