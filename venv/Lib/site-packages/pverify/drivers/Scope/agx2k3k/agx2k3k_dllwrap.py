from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import agx2k3k_const as const
from .agx2k3k_const import *


class agx2k3k_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("agx2k3k_32.dll", "agx2k3k_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "agx2k3k"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        status = self.dll.agx2k3k_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        status = self.dll.agx2k3k_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViConstString(optionString),
            byref(newVi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(newVi.value)

    def close(self, vi):
        status = self.dll.agx2k3k_close(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DeviceClear(self, instrumentHandle):
        status = self.dll.agx2k3k_DeviceClear(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(1024)
        status = self.dll.agx2k3k_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.agx2k3k_LockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.agx2k3k_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def GetChannelName(self, vi, index, bufferSize):
        name = ARRAY_ViChar(1024)
        status = self.dll.agx2k3k_GetChannelName(ViSession(vi), ViInt32(index), ViInt32(bufferSize), name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(name)

    def ConfigureAcquisitionType(self, vi, acquisitionType):
        status = self.dll.agx2k3k_ConfigureAcquisitionType(ViSession(vi), ViInt32(acquisitionType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionMode(self, vi, acquisitionMode):
        status = self.dll.agx2k3k_ConfigureAcquisitionMode(ViSession(vi), ViInt32(acquisitionMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionRecord(self, vi, timePerRecord, minimumRecordLength, acqStartTime):
        status = self.dll.agx2k3k_ConfigureAcquisitionRecord(
            ViSession(vi),
            ViReal64(timePerRecord),
            ViInt32(minimumRecordLength),
            ViReal64(acqStartTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRecordMode(self, vi, horizontalRecordMode):
        status = self.dll.agx2k3k_ConfigureRecordMode(ViSession(vi), ViInt32(horizontalRecordMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNumAverages(self, vi, numberOfAverages):
        status = self.dll.agx2k3k_ConfigureNumAverages(ViSession(vi), ViInt32(numberOfAverages))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SampleMode(self, vi):
        sampleMode = ViInt32()
        status = self.dll.agx2k3k_SampleMode(ViSession(vi), byref(sampleMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(sampleMode.value)

    def SampleRate(self, vi):
        sampleRate = ViReal64()
        status = self.dll.agx2k3k_SampleRate(ViSession(vi), byref(sampleRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(sampleRate.value)

    def ConfigureFunBus(self, vi, busClock, busSlope, busIncrementY, busOriginY, busUnitY):
        status = self.dll.agx2k3k_ConfigureFunBus(
            ViSession(vi),
            ViInt32(busClock),
            ViInt32(busSlope),
            ViReal64(busIncrementY),
            ViReal64(busOriginY),
            ViInt32(busUnitY),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFunBusMultiChan(self, vi, FunctionChannel, busClock, busSlope, busIncrementY, busOriginY, busUnitY):
        status = self.dll.agx2k3k_ConfigureFunBusMultiChan(
            ViSession(vi),
            ViConstString(FunctionChannel),
            ViInt32(busClock),
            ViInt32(busSlope),
            ViReal64(busIncrementY),
            ViReal64(busOriginY),
            ViInt32(busUnitY),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFunTrendMeas(self, vi, trendMeasurement):
        status = self.dll.agx2k3k_ConfigureFunTrendMeas(ViSession(vi), ViInt32(trendMeasurement))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrendMeasMultiChan(self, vi, FunctionChannel, trendMeasurement):
        status = self.dll.agx2k3k_ConfigureTrendMeasMultiChan(
            ViSession(vi), ViConstString(FunctionChannel), ViInt32(trendMeasurement)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFunLinear(self, vi, linearGain, linearOffset):
        status = self.dll.agx2k3k_ConfigureFunLinear(ViSession(vi), ViReal64(linearGain), ViReal64(linearOffset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFunLinearMultiChan(self, vi, linearGain, linearOffset):
        Function_Channel = ARRAY_ViChar(1024)
        status = self.dll.agx2k3k_ConfigureFunLinearMultiChan(
            ViSession(vi), Function_Channel, ViReal64(linearGain), ViReal64(linearOffset)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Function_Channel)

    def ConfigureFunFrequency(self, vi, highPass, lowPass):
        status = self.dll.agx2k3k_ConfigureFunFrequency(ViSession(vi), ViReal64(highPass), ViReal64(lowPass))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFunFreqMultiChan(self, vi, Function_Channel, highPass, lowPass):
        status = self.dll.agx2k3k_ConfigureFunFreqMultiChan(
            ViSession(vi),
            ViConstString(Function_Channel),
            ViReal64(highPass),
            ViReal64(lowPass),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFunFFTUnit(self, vi, unit):
        status = self.dll.agx2k3k_ConfigureFunFFTUnit(ViSession(vi), ViInt32(unit))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFFTUnitMultiChan(self, vi, Function_Channel, unit):
        status = self.dll.agx2k3k_ConfigureFFTUnitMultiChan(
            ViSession(vi), ViConstString(Function_Channel), ViInt32(unit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureFunInputOffset(self, vi, inputOffset):
        status = self.dll.agx2k3k_ConfigureFunInputOffset(ViSession(vi), ViReal64(inputOffset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInputOffsMultiChan(self, vi, Function_Channel, inputOffset):
        status = self.dll.agx2k3k_ConfigureInputOffsMultiChan(
            ViSession(vi), ViConstString(Function_Channel), ViReal64(inputOffset)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathChannelEnabled(self, vi, channelEnabled):
        status = self.dll.agx2k3k_ConfigureMathChannelEnabled(ViSession(vi), ViBoolean(channelEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathChanMultiChan(self, vi, Function_Channel, channelEnabled):
        status = self.dll.agx2k3k_ConfigureMathChanMultiChan(
            ViSession(vi), ViConstString(Function_Channel), ViBoolean(channelEnabled)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathFunction(self, vi, source1, source2, operation):
        status = self.dll.agx2k3k_ConfigureMathFunction(
            ViSession(vi),
            ViConstString(source1),
            ViConstString(source2),
            ViInt32(operation),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathSettings(self, vi, scale, offset):
        status = self.dll.agx2k3k_ConfigureMathSettings(ViSession(vi), ViReal64(scale), ViReal64(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathMultiChan(self, vi, Function_Channel, scale, offset):
        status = self.dll.agx2k3k_ConfigureMathMultiChan(
            ViSession(vi),
            ViConstString(Function_Channel),
            ViReal64(scale),
            ViReal64(offset),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathFFT(self, vi, span, center, window):
        status = self.dll.agx2k3k_ConfigureMathFFT(ViSession(vi), ViReal64(span), ViReal64(center), ViInt32(window))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathFFTMultiChan(self, vi, FunctionChannel, span, center, window):
        status = self.dll.agx2k3k_ConfigureMathFFTMultiChan(
            ViSession(vi),
            ViConstString(FunctionChannel),
            ViReal64(span),
            ViReal64(center),
            ViInt32(window),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ActualRecordLength(self, vi):
        actualRecordLength = ViInt32()
        status = self.dll.agx2k3k_ActualRecordLength(ViSession(vi), byref(actualRecordLength))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(actualRecordLength.value)

    def ConfigureInitiateContinuous(self, vi, continuous):
        status = self.dll.agx2k3k_ConfigureInitiateContinuous(ViSession(vi), ViBoolean(continuous))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionSegment(self, vi, segmentAnalyzeEnable, segmentCount, segmentIndex):
        status = self.dll.agx2k3k_ConfigureAcquisitionSegment(
            ViSession(vi),
            ViBoolean(segmentAnalyzeEnable),
            ViInt32(segmentCount),
            ViInt32(segmentIndex),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannel(self, vi, channel, range, offset, coupling, probeAttenuation, enabled):
        status = self.dll.agx2k3k_ConfigureChannel(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(range),
            ViReal64(offset),
            ViInt32(coupling),
            ViReal64(probeAttenuation),
            ViBoolean(enabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalChannel(self, vi, channelName, size, threshold, channelEnabled):
        status = self.dll.agx2k3k_ConfigureDigitalChannel(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(size),
            ViReal64(threshold),
            ViBoolean(channelEnabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChanCharacteristics(self, vi, channel, inputImpedance, maxInputFrequency):
        status = self.dll.agx2k3k_ConfigureChanCharacteristics(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(inputImpedance),
            ViReal64(maxInputFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AutoProbeSenseValue(self, vi, channel):
        autoProbeSenseValue = ViReal64()
        status = self.dll.agx2k3k_AutoProbeSenseValue(ViSession(vi), ViConstString(channel), byref(autoProbeSenseValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(autoProbeSenseValue.value)

    def ConfigureChannelInvert(self, vi, channel, invert):
        status = self.dll.agx2k3k_ConfigureChannelInvert(ViSession(vi), ViConstString(channel), ViBoolean(invert))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannelVernier(self, vi, channel, vernier):
        status = self.dll.agx2k3k_ConfigureChannelVernier(ViSession(vi), ViConstString(channel), ViBoolean(vernier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannelProbe(self, vi, channel, skew, units):
        status = self.dll.agx2k3k_ConfigureChannelProbe(
            ViSession(vi), ViConstString(channel), ViReal64(skew), ViInt32(units)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannelLabel(self, vi, channel, label):
        status = self.dll.agx2k3k_ConfigureChannelLabel(ViSession(vi), ViConstString(channel), ViConstString(label))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalPosition(self, vi, channelName, position):
        status = self.dll.agx2k3k_ConfigureDigitalPosition(ViSession(vi), ViConstString(channelName), ViInt32(position))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTimebaseMode(self, vi, timebaseMode):
        status = self.dll.agx2k3k_ConfigureTimebaseMode(ViSession(vi), ViInt32(timebaseMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTimebase(self, vi, reference, vernier):
        status = self.dll.agx2k3k_ConfigureTimebase(ViSession(vi), ViInt32(reference), ViBoolean(vernier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureWindowTimebase(self, vi, position, range, scale):
        status = self.dll.agx2k3k_ConfigureWindowTimebase(
            ViSession(vi), ViReal64(position), ViReal64(range), ViReal64(scale)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, vi, triggerType, holdoff):
        status = self.dll.agx2k3k_ConfigureTrigger(ViSession(vi), ViInt32(triggerType), ViReal64(holdoff))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerCoupling(self, vi, coupling):
        status = self.dll.agx2k3k_ConfigureTriggerCoupling(ViSession(vi), ViInt32(coupling))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerModifier(self, vi, modifier):
        status = self.dll.agx2k3k_ConfigureTriggerModifier(ViSession(vi), ViInt32(modifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerReject(self, vi, noiseReject, HFReject):
        status = self.dll.agx2k3k_ConfigureTriggerReject(ViSession(vi), ViBoolean(noiseReject), ViBoolean(HFReject))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerLevel(self, vi, levelHigh, levelLow):
        status = self.dll.agx2k3k_ConfigureTriggerLevel(ViSession(vi), ViReal64(levelHigh), ViReal64(levelLow))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEdgeTriggerSource(self, vi, source, level, slope):
        status = self.dll.agx2k3k_ConfigureEdgeTriggerSource(
            ViSession(vi), ViConstString(source), ViReal64(level), ViInt32(slope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRuntTriggerSource(self, vi, triggerSource, runtPolarity, triggerCondition, runtTime):
        status = self.dll.agx2k3k_ConfigureRuntTriggerSource(
            ViSession(vi),
            ViConstString(triggerSource),
            ViInt32(runtPolarity),
            ViInt32(triggerCondition),
            ViReal64(runtTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTransitionTrigger(self, vi, triggerSource, slope, triggerCondition, transitionTime):
        status = self.dll.agx2k3k_ConfigureTransitionTrigger(
            ViSession(vi),
            ViConstString(triggerSource),
            ViInt32(slope),
            ViInt32(triggerCondition),
            ViReal64(transitionTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSetupHoldTrigger(self, vi, clockSource, dataSource, slope, holdTime, setupTime):
        status = self.dll.agx2k3k_ConfigureSetupHoldTrigger(
            ViSession(vi),
            ViConstString(clockSource),
            ViConstString(dataSource),
            ViInt32(slope),
            ViReal64(holdTime),
            ViReal64(setupTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerSource(self, vi, source, TVSignalFormat, TVEvent, TVPolarity):
        status = self.dll.agx2k3k_ConfigureTVTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViInt32(TVSignalFormat),
            ViInt32(TVEvent),
            ViInt32(TVPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerLineNumber(self, vi, lineNumber):
        status = self.dll.agx2k3k_ConfigureTVTriggerLineNumber(ViSession(vi), ViInt32(lineNumber))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureIICBusSource(self, vi, busName, serialClockSource, serialDataSource, type):
        status = self.dll.agx2k3k_ConfigureIICBusSource(
            ViSession(vi),
            ViConstString(busName),
            ViConstString(serialClockSource),
            ViConstString(serialDataSource),
            ViInt32(type),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureIICEEPROMQualifier(self, vi, busName, qualifier):
        status = self.dll.agx2k3k_ConfigureIICEEPROMQualifier(ViSession(vi), ViConstString(busName), ViInt32(qualifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureIICData(self, vi, busName, address, addressSize, data, data2):
        status = self.dll.agx2k3k_ConfigureIICData(
            ViSession(vi),
            ViConstString(busName),
            ViInt32(address),
            ViInt32(addressSize),
            ViInt32(data),
            ViInt32(data2),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureI2SBusSource(self, vi, busName, clockSource, dataSource, wsSource):
        status = self.dll.agx2k3k_ConfigureI2SBusSource(
            ViSession(vi),
            ViConstString(busName),
            ViConstString(clockSource),
            ViConstString(dataSource),
            ViConstString(wsSource),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureI2SBus(self, vi, busName, rxWidth, txWidth, wsPolarity, clockSlope, alignment):
        status = self.dll.agx2k3k_ConfigureI2SBus(
            ViSession(vi),
            ViConstString(busName),
            ViInt32(rxWidth),
            ViInt32(txWidth),
            ViInt32(wsPolarity),
            ViInt32(clockSlope),
            ViInt32(alignment),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureI2STrigger(
        self,
        vi,
        busName,
        triggerCondition,
        triggerAudio,
        patternData,
        rangeLow,
        rangeHigh,
    ):
        status = self.dll.agx2k3k_ConfigureI2STrigger(
            ViSession(vi),
            ViConstString(busName),
            ViInt32(triggerCondition),
            ViInt32(triggerAudio),
            ViConstString(patternData),
            ViInt32(rangeLow),
            ViInt32(rangeHigh),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLINBus(self, vi, busName, LINSource, baudRate, standard, syncBreak, parity):
        status = self.dll.agx2k3k_ConfigureLINBus(
            ViSession(vi),
            ViConstString(busName),
            ViConstString(LINSource),
            ViInt32(baudRate),
            ViInt32(standard),
            ViInt32(syncBreak),
            ViBoolean(parity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLINTrigger(self, vi, busName, triggerCondition, patternDataLength, patternData, patternID):
        status = self.dll.agx2k3k_ConfigureLINTrigger(
            ViSession(vi),
            ViConstString(busName),
            ViInt32(triggerCondition),
            ViInt32(patternDataLength),
            ViConstString(patternData),
            ViInt32(patternID),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSPITrigger(
        self,
        vi,
        busName,
        triggerType,
        MISODataWidth,
        MISODataValue,
        MOSIDataWidth,
        MOSIDataValue,
    ):
        status = self.dll.agx2k3k_ConfigureSPITrigger(
            ViSession(vi),
            ViConstString(busName),
            ViInt32(triggerType),
            ViInt32(MISODataWidth),
            ViConstString(MISODataValue),
            ViInt32(MOSIDataWidth),
            ViConstString(MOSIDataValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSBusFlexrayTrigger(
        self,
        vi,
        busName,
        trigger,
        triggerEventBssID,
        triggerEventType,
        triggerFrameCCBase,
        triggerFrameCCRepetition,
        triggerFrameID,
        triggerFrameType,
    ):
        status = self.dll.agx2k3k_ConfigureSBusFlexrayTrigger(
            ViSession(vi),
            ViConstString(busName),
            ViInt32(trigger),
            ViInt32(triggerEventBssID),
            ViInt32(triggerEventType),
            ViInt32(triggerFrameCCBase),
            ViInt32(triggerFrameCCRepetition),
            ViInt32(triggerFrameID),
            ViInt32(triggerFrameType),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSPIBus(
        self,
        vi,
        busName,
        clockSource,
        dataSource,
        frameSource,
        frameBy,
        slope,
        bitOrder,
        wordWidth,
    ):
        status = self.dll.agx2k3k_ConfigureSPIBus(
            ViSession(vi),
            ViConstString(busName),
            ViConstString(clockSource),
            ViConstString(dataSource),
            ViConstString(frameSource),
            ViInt32(frameBy),
            ViInt32(slope),
            ViInt32(bitOrder),
            ViInt32(wordWidth),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSPITriggerTimeout(self, vi, busName, timeout):
        status = self.dll.agx2k3k_ConfigureSPITriggerTimeout(ViSession(vi), ViConstString(busName), ViReal64(timeout))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEdgeTriggerReject(self, vi, triggerRejectFilter):
        status = self.dll.agx2k3k_ConfigureEdgeTriggerReject(ViSession(vi), ViInt32(triggerRejectFilter))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEdgeBurstTrigger(self, vi, triggerSource, slope, count, idleTime):
        status = self.dll.agx2k3k_ConfigureEdgeBurstTrigger(
            ViSession(vi),
            ViConstString(triggerSource),
            ViInt32(slope),
            ViInt32(count),
            ViReal64(idleTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGlitchTriggerSource(self, vi, source, level, glitchWidth, glitchPolarity, glitchCondition):
        status = self.dll.agx2k3k_ConfigureGlitchTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViReal64(glitchWidth),
            ViInt32(glitchPolarity),
            ViInt32(glitchCondition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGlitchWidth(self, vi, minWidth):
        status = self.dll.agx2k3k_ConfigureGlitchWidth(ViSession(vi), ViReal64(minWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGlitchRange(self, vi, greaterThanTime, lessThanTime):
        status = self.dll.agx2k3k_ConfigureGlitchRange(ViSession(vi), ViReal64(greaterThanTime), ViReal64(lessThanTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePatternTrigger(self, vi, patternValue, triggerCondition, greaterThanTime, lessThanTime):
        status = self.dll.agx2k3k_ConfigurePatternTrigger(
            ViSession(vi),
            ViConstString(patternValue),
            ViInt32(triggerCondition),
            ViReal64(greaterThanTime),
            ViReal64(lessThanTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCANBus(self, vi, busName, source, baudRate, signal):
        status = self.dll.agx2k3k_ConfigureCANBus(
            ViSession(vi),
            ViConstString(busName),
            ViConstString(source),
            ViInt32(baudRate),
            ViInt32(signal),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCANTrigger(self, vi, busName, trigger, dataLength, patternData, idType, idValue):
        status = self.dll.agx2k3k_ConfigureCANTrigger(
            ViSession(vi),
            ViConstString(busName),
            ViInt32(trigger),
            ViInt32(dataLength),
            ViConstString(patternData),
            ViInt32(idType),
            ViConstString(idValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGeneratorAmplitude(self, vi, settingStyle, amplitude, offset, highLevel, lowLevel, loadImpendance):
        status = self.dll.agx2k3k_ConfigureGeneratorAmplitude(
            ViSession(vi),
            ViInt32(settingStyle),
            ViReal64(amplitude),
            ViReal64(offset),
            ViReal64(highLevel),
            ViReal64(lowLevel),
            ViInt32(loadImpendance),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGenAmpMultiChan(
        self,
        vi,
        WaveGenChannel,
        settingStyle,
        amplitude,
        offset,
        highLevel,
        lowLevel,
        loadImpendance,
    ):
        status = self.dll.agx2k3k_ConfigureGenAmpMultiChan(
            ViSession(vi),
            ViConstString(WaveGenChannel),
            ViInt32(settingStyle),
            ViReal64(amplitude),
            ViReal64(offset),
            ViReal64(highLevel),
            ViReal64(lowLevel),
            ViInt32(loadImpendance),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureWaveform(
        self,
        vi,
        functionType,
        settingSytle,
        period,
        frequency,
        symmetry,
        dutyCycle,
        pulseWidth,
    ):
        status = self.dll.agx2k3k_ConfigureWaveform(
            ViSession(vi),
            ViInt32(functionType),
            ViInt32(settingSytle),
            ViReal64(period),
            ViReal64(frequency),
            ViReal64(symmetry),
            ViReal64(dutyCycle),
            ViReal64(pulseWidth),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureWaveformMultiChan(
        self,
        vi,
        WaveGenChannel,
        functionType,
        settingSytle,
        period,
        frequency,
        symmetry,
        dutyCycle,
        pulseWidth,
    ):
        status = self.dll.agx2k3k_ConfigureWaveformMultiChan(
            ViSession(vi),
            ViConstString(WaveGenChannel),
            ViInt32(functionType),
            ViInt32(settingSytle),
            ViReal64(period),
            ViReal64(frequency),
            ViReal64(symmetry),
            ViReal64(dutyCycle),
            ViReal64(pulseWidth),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def EnableGeneratorOutput(self, vi, enableOutput):
        status = self.dll.agx2k3k_EnableGeneratorOutput(ViSession(vi), ViBoolean(enableOutput))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def EnableGenOutputMultiChan(self, vi, Wave_Gen_Channel, enableOutput):
        status = self.dll.agx2k3k_EnableGenOutputMultiChan(
            ViSession(vi), ViConstString(Wave_Gen_Channel), ViBoolean(enableOutput)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadWaveform(self, vi, channel, waveformSize, maxTime):
        waveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.agx2k3k_ReadWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            ViInt32(maxTime),
            waveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        waveform = list(waveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveform, actualPoints, initialX, xIncrement

    def InitiateAcquisition(self, vi):
        status = self.dll.agx2k3k_InitiateAcquisition(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AcquisitionStatus(self, vi):
        status = ViInt32()
        retcode = self.dll.agx2k3k_AcquisitionStatus(ViSession(vi), byref(status))
        if int(retcode) < 0:
            raise InstrumentError(retcode)
        elif int(retcode) > 0:
            raise InstrumentWarning(retcode)
        return int(status.value)

    def Abort(self, vi):
        status = self.dll.agx2k3k_Abort(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FetchEfficiency(self, instrumentHandle):
        measurement = ViReal64()
        status = self.dll.agx2k3k_FetchEfficiency(ViSession(instrumentHandle), byref(measurement))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def FetchRipple(self, instrumentHandle):
        channelName = ARRAY_ViChar(1024)
        measurement = ViReal64()
        status = self.dll.agx2k3k_FetchRipple(ViSession(instrumentHandle), channelName, byref(measurement))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        channelName = decode(channelName)
        measurement = float(measurement.value)
        return channelName, measurement

    def FetchWaveform(self, vi, channel, waveformSize):
        waveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.agx2k3k_FetchWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            waveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        waveform = list(waveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveform, actualPoints, initialX, xIncrement

    def ReadEfficiency(self, instrumentHandle):
        measurement = ViReal64()
        status = self.dll.agx2k3k_ReadEfficiency(ViSession(instrumentHandle), byref(measurement))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def ReadRipple(self, instrumentHandle):
        channelName = ARRAY_ViChar(1024)
        measurement = ViReal64()
        status = self.dll.agx2k3k_ReadRipple(ViSession(instrumentHandle), channelName, byref(measurement))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        channelName = decode(channelName)
        measurement = float(measurement.value)
        return channelName, measurement

    def ReadMinMaxWaveform(self, vi, channel, waveformSize, maxTime):
        minWaveform = ARRAY_ViReal64(waveformSize)
        maxWaveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.agx2k3k_ReadMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            ViInt32(maxTime),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def FetchMinMaxWaveform(self, vi, channel, waveformSize):
        minWaveform = ARRAY_ViReal64(waveformSize)
        maxWaveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.agx2k3k_FetchMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def ConfigureUSBTriggerSource(self, vi, trigger, speed, dPlus, dMinus):
        status = self.dll.agx2k3k_ConfigureUSBTriggerSource(
            ViSession(vi),
            ViInt32(trigger),
            ViInt32(speed),
            ViConstString(dPlus),
            ViConstString(dMinus),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasSource(self, vi, source1, source2):
        status = self.dll.agx2k3k_ConfigureMeasSource(ViSession(vi), ViConstString(source1), ViConstString(source2))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasurementDelay(self, vi, edgeSpec1, edgeSpec2):
        status = self.dll.agx2k3k_ConfigureMeasurementDelay(ViSession(vi), ViInt32(edgeSpec1), ViInt32(edgeSpec2))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefLevels(self, vi, lowRef, midRef, highRef):
        status = self.dll.agx2k3k_ConfigureRefLevels(
            ViSession(vi), ViReal64(lowRef), ViReal64(midRef), ViReal64(highRef)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadWaveformMeasurement(self, vi, channel, measurementFunction, maxTime):
        measurement = ViReal64()
        status = self.dll.agx2k3k_ReadWaveformMeasurement(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(measurementFunction),
            ViInt32(maxTime),
            byref(measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def FetchWaveformMeasurement(self, vi, channel, measurementFunction):
        measurement = ViReal64()
        status = self.dll.agx2k3k_FetchWaveformMeasurement(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(measurementFunction),
            byref(measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def ConfigureUARTBus(
        self,
        vi,
        busName,
        baudRate,
        bitOrder,
        frameTerminateValue,
        parity,
        polarity,
        bitCount,
    ):
        status = self.dll.agx2k3k_ConfigureUARTBus(
            ViSession(vi),
            ViConstString(busName),
            ViInt32(baudRate),
            ViInt32(bitOrder),
            ViInt32(frameTerminateValue),
            ViInt32(parity),
            ViInt32(polarity),
            ViInt32(bitCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureUARTBusSource(self, vi, busName, rxSource, txSource):
        status = self.dll.agx2k3k_ConfigureUARTBusSource(
            ViSession(vi),
            ViConstString(busName),
            ViConstString(rxSource),
            ViConstString(txSource),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureUARTTrigger(
        self,
        vi,
        busName,
        triggerType,
        triggerCondition,
        triggerData,
        burstValue,
        idlePeriod,
    ):
        status = self.dll.agx2k3k_ConfigureUARTTrigger(
            ViSession(vi),
            ViConstString(busName),
            ViInt32(triggerType),
            ViInt32(triggerCondition),
            ViInt32(triggerData),
            ViInt32(burstValue),
            ViReal64(idlePeriod),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AutoSetup(self, vi):
        status = self.dll.agx2k3k_AutoSetup(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsInvalidWfmElement(self, vi, elementValue):
        isInvalid = ViBoolean()
        status = self.dll.agx2k3k_IsInvalidWfmElement(ViSession(vi), ViReal64(elementValue), byref(isInvalid))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(isInvalid.value)

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        status = self.dll.agx2k3k_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def GetError(self, vi, bufferSize):
        code = ViStatus()
        description = ARRAY_ViChar(1024)
        status = self.dll.agx2k3k_GetError(ViSession(vi), byref(code), ViInt32(bufferSize), description)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        description = decode(description)
        return code, description

    def ClearError(self, vi):
        status = self.dll.agx2k3k_ClearError(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        status = self.dll.agx2k3k_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(errorMessage)

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(1024)
        status = self.dll.agx2k3k_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        status = self.dll.agx2k3k_ResetInterchangeCheck(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, vi):
        status = self.dll.agx2k3k_ClearInterchangeWarnings(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InvalidateAllAttributes(self, vi):
        status = self.dll.agx2k3k_InvalidateAllAttributes(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def reset(self, vi):
        status = self.dll.agx2k3k_reset(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, vi):
        status = self.dll.agx2k3k_ResetWithDefaults(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        status = self.dll.agx2k3k_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        status = self.dll.agx2k3k_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def Disable(self, vi):
        status = self.dll.agx2k3k_Disable(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def WriteInstrData(self, vi, writeBuffer):
        status = self.dll.agx2k3k_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        status = self.dll.agx2k3k_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        status = self.dll.agx2k3k_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        status = self.dll.agx2k3k_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(1024)
        status = self.dll.agx2k3k_GetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViInt32(bufSize),
            value,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        status = self.dll.agx2k3k_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        status = self.dll.agx2k3k_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        status = self.dll.agx2k3k_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        status = self.dll.agx2k3k_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        status = self.dll.agx2k3k_SetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        status = self.dll.agx2k3k_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        status = self.dll.agx2k3k_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        status = self.dll.agx2k3k_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        status = self.dll.agx2k3k_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        status = self.dll.agx2k3k_CheckAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        status = self.dll.agx2k3k_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        status = self.dll.agx2k3k_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviInit(self, resourceName, IDQuery, reset, vi):
        status = self.dll.agx2k3k_IviInit(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(reset), ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviClose(self, vi):
        status = self.dll.agx2k3k_IviClose(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSignalSource(
        self,
        vi,
        CurrentFirstSource,
        CurrentSecondSource,
        VoltageFirstSource,
        VoltageSecondSource,
    ):
        status = self.dll.agx2k3k_ConfigureSignalSource(
            ViSession(vi),
            ViInt32(CurrentFirstSource),
            ViInt32(CurrentSecondSource),
            ViInt32(VoltageFirstSource),
            ViInt32(VoltageSecondSource),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AutoSetupPowerSignal(self, vi, PowerAnalysisType):
        status = self.dll.agx2k3k_AutoSetupPowerSignal(ViSession(vi), ViInt32(PowerAnalysisType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ApplyPowerQuality(self, vi):
        status = self.dll.agx2k3k_ApplyPowerQuality(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ApplyPowerSLEW(self, vi):
        status = self.dll.agx2k3k_ApplyPowerSLEW(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerSLEWSource(self, vi, Source):
        status = self.dll.agx2k3k_ConfigurePowerSLEWSource(ViSession(vi), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ApplyPowerRipple(self, vi):
        status = self.dll.agx2k3k_ApplyPowerRipple(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerQuality(self, vi, QualityType):
        status = self.dll.agx2k3k_ConfigurePowerQuality(ViSession(vi), ViInt32(QualityType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ApplyPowerOnOff(self, vi):
        status = self.dll.agx2k3k_ApplyPowerOnOff(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ApplyPowerPSRR(self, vi):
        status = self.dll.agx2k3k_ApplyPowerPSRR(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerPSRR(self, vi, FreqMax, FreqMin, MaxRatioValue):
        status = self.dll.agx2k3k_ConfigurePowerPSRR(
            ViSession(vi), ViInt32(FreqMax), ViInt32(FreqMin), ViInt32(MaxRatioValue)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerSignal(
        self,
        vi,
        SignalCycles,
        SignalDuration,
        SignalInrushExpected,
        SignalOvershoot,
        MaxExpectedVoltage,
        SteadyStateVoltage,
    ):
        status = self.dll.agx2k3k_ConfigurePowerSignal(
            ViSession(vi),
            ViInt32(SignalCycles),
            ViReal64(SignalDuration),
            ViReal64(SignalInrushExpected),
            ViInt32(SignalOvershoot),
            ViReal64(MaxExpectedVoltage),
            ViReal64(SteadyStateVoltage),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StopPowerOnOff(self, vi):
        status = self.dll.agx2k3k_StopPowerOnOff(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def NextPowerOnOff(self, vi):
        status = self.dll.agx2k3k_NextPowerOnOff(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ApplyPowerInrush(self, vi):
        status = self.dll.agx2k3k_ApplyPowerInrush(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ApplyPowerModulation(self, vi):
        status = self.dll.agx2k3k_ApplyPowerModulation(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerModulation(self, vi, ModulationSource, ModulationType):
        status = self.dll.agx2k3k_ConfigurePowerModulation(
            ViSession(vi), ViInt32(ModulationSource), ViInt32(ModulationType)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StopPowerInrush(self, vi):
        status = self.dll.agx2k3k_StopPowerInrush(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def NextPowerInrush(self, vi):
        status = self.dll.agx2k3k_NextPowerInrush(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerHarmonics(self, vi, DisplayStyle, FreqSettingLine, Standard):
        status = self.dll.agx2k3k_ConfigurePowerHarmonics(
            ViSession(vi),
            ViInt32(DisplayStyle),
            ViInt32(FreqSettingLine),
            ViInt32(Standard),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ApplyPowerEfficiency(self, vi):
        status = self.dll.agx2k3k_ApplyPowerEfficiency(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ApplyPowerHarmonics(self, vi):
        status = self.dll.agx2k3k_ApplyPowerHarmonics(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def EnablePowerAnalysis(self, vi, PowerAnalysisEnabled):
        status = self.dll.agx2k3k_EnablePowerAnalysis(ViSession(vi), ViBoolean(PowerAnalysisEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def LaunchAutoDeskew(self, vi):
        status = self.dll.agx2k3k_LaunchAutoDeskew(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ApplyPowerSwitch(self, vi):
        status = self.dll.agx2k3k_ApplyPowerSwitch(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerSwitch(
        self,
        vi,
        SwitchConduction,
        CurrentSwitchPercent,
        VoltageSwitchPercent,
        SwitchRDS,
        SwitchVCE,
    ):
        status = self.dll.agx2k3k_ConfigurePowerSwitch(
            ViSession(vi),
            ViInt32(SwitchConduction),
            ViInt32(CurrentSwitchPercent),
            ViInt32(VoltageSwitchPercent),
            ViReal64(SwitchRDS),
            ViReal64(SwitchVCE),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ApplyPowerTransient(self, vi):
        status = self.dll.agx2k3k_ApplyPowerTransient(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StopPowerTransient(self, vi):
        status = self.dll.agx2k3k_StopPowerTransient(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def NextPowerTransient(self, vi):
        status = self.dll.agx2k3k_NextPowerTransient(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerTransient(self, vi, InitCurrent, NewCurrent):
        status = self.dll.agx2k3k_ConfigurePowerTransient(ViSession(vi), ViReal64(InitCurrent), ViReal64(NewCurrent))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSearchSerialA429(self, vi, Label, Mode, PatternData, PatternSDI, PatternSSM):
        status = self.dll.agx2k3k_ConfigureSearchSerialA429(
            ViSession(vi),
            ViInt32(Label),
            ViInt32(Mode),
            ViConstString(PatternData),
            ViConstString(PatternSDI),
            ViConstString(PatternSSM),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSearchSerialFlexray(self, vi, Cycle, Mode, Data, FrameID, DataLength):
        status = self.dll.agx2k3k_ConfigureSearchSerialFlexray(
            ViSession(vi),
            ViInt32(Cycle),
            ViInt32(Mode),
            ViConstString(Data),
            ViInt32(FrameID),
            ViInt32(DataLength),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSearchSerialM1553(self, vi, Mode, PatternData, RemoteTerminalAddress):
        status = self.dll.agx2k3k_ConfigureSearchSerialM1553(
            ViSession(vi),
            ViInt32(Mode),
            ViConstString(PatternData),
            ViInt32(RemoteTerminalAddress),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def RecallDataFromFile(self, vi, FileName, StartColumn):
        status = self.dll.agx2k3k_RecallDataFromFile(ViSession(vi), ViConstString(FileName), ViInt32(StartColumn))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasureStatistics(self, vi, DeviationEnabled, MaxStatisticsNumber):
        status = self.dll.agx2k3k_ConfigureMeasureStatistics(
            ViSession(vi), ViBoolean(DeviationEnabled), ViInt32(MaxStatisticsNumber)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDemoFunction(self, vi, DemoFunction):
        status = self.dll.agx2k3k_ConfigureDemoFunction(ViSession(vi), ViInt32(DemoFunction))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ForceTrigger(self, vi):
        status = self.dll.agx2k3k_ForceTrigger(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerDelay(
        self,
        vi,
        ArmSlope,
        ArmSource,
        DelayTime,
        TriggerCount,
        TriggerSlope,
        TriggerSource,
    ):
        status = self.dll.agx2k3k_ConfigureTriggerDelay(
            ViSession(vi),
            ViInt32(ArmSlope),
            ViInt32(ArmSource),
            ViReal64(DelayTime),
            ViInt32(TriggerCount),
            ViInt32(TriggerSlope),
            ViInt32(TriggerSource),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerPattern(self, vi, Format, Qualifier, GreaterThan, LessThan):
        status = self.dll.agx2k3k_ConfigureTriggerPattern(
            ViSession(vi),
            ViInt32(Format),
            ViInt32(Qualifier),
            ViReal64(GreaterThan),
            ViReal64(LessThan),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerTV(self, vi, UDTVEnumber, UDTVHsyncEnabled, UDTVHtime, UDTVPGHtime):
        status = self.dll.agx2k3k_ConfigureTriggerTV(
            ViSession(vi),
            ViInt32(UDTVEnumber),
            ViBoolean(UDTVHsyncEnabled),
            ViReal64(UDTVHtime),
            ViReal64(UDTVPGHtime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SaveArbitraryWave(self, vi, fileName):
        status = self.dll.agx2k3k_SaveArbitraryWave(ViSession(vi), ViConstString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SavePowerAnalysis(self, vi, fileName):
        status = self.dll.agx2k3k_SavePowerAnalysis(ViSession(vi), ViConstString(fileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def EnableSaveMaxWave(self, vi, SaveMaxWaveEnabled):
        status = self.dll.agx2k3k_EnableSaveMaxWave(ViSession(vi), ViBoolean(SaveMaxWaveEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AutoSetupA429(self, vi, busName):
        status = self.dll.agx2k3k_AutoSetupA429(ViSession(vi), ViConstString(busName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AutoSetupFlexray(self, vi, busName):
        status = self.dll.agx2k3k_AutoSetupFlexray(ViSession(vi), ViConstString(busName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AutoSetupM1553(self, vi, busName):
        status = self.dll.agx2k3k_AutoSetupM1553(ViSession(vi), ViConstString(busName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetSBusA429(self, vi, busName):
        status = self.dll.agx2k3k_ResetSBusA429(ViSession(vi), ViConstString(busName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetSBusFlexray(self, vi, busName):
        status = self.dll.agx2k3k_ResetSBusFlexray(ViSession(vi), ViConstString(busName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSBusA429(self, vi, BusName, Base, Format, Signal, Source, SignalSpeed):
        status = self.dll.agx2k3k_ConfigureSBusA429(
            ViSession(vi),
            ViConstString(BusName),
            ViInt32(Base),
            ViInt32(Format),
            ViInt32(Signal),
            ViInt32(Source),
            ViInt32(SignalSpeed),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSBusFlexray(self, vi, BusName, Baudrate, Channel, Source):
        status = self.dll.agx2k3k_ConfigureSBusFlexray(
            ViSession(vi),
            ViConstString(BusName),
            ViInt32(Baudrate),
            ViInt32(Channel),
            ViInt32(Source),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSBusA429Trigger(
        self,
        vi,
        busName,
        triggerLabel,
        triggerPatternData,
        triggerPatternSDI,
        triggerPatternSSM,
        triggerType,
        triggerRangeMin,
        triggerRangeMax,
    ):
        status = self.dll.agx2k3k_ConfigureSBusA429Trigger(
            ViSession(vi),
            ViConstString(busName),
            ViInt32(triggerLabel),
            ViConstString(triggerPatternData),
            ViConstString(triggerPatternSDI),
            ViConstString(triggerPatternSSM),
            ViInt32(triggerType),
            ViInt32(triggerRangeMin),
            ViInt32(triggerRangeMax),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSBusM1553(self, vi, BusName, Base, Source, TriggerRTA, TriggerPatternData, TriggerType):
        status = self.dll.agx2k3k_ConfigureSBusM1553(
            ViSession(vi),
            ViConstString(BusName),
            ViInt32(Base),
            ViInt32(Source),
            ViInt32(TriggerRTA),
            ViConstString(TriggerPatternData),
            ViInt32(TriggerType),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMarkerXCursorUnit(self, vi, XCursorUnit, ResetXCursorLocation):
        status = self.dll.agx2k3k_ConfigureMarkerXCursorUnit(
            ViSession(vi), ViInt32(XCursorUnit), ViBoolean(ResetXCursorLocation)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMarkerYCursorUnit(self, vi, YCursorUnit, ResetYCursorLocation):
        status = self.dll.agx2k3k_ConfigureMarkerYCursorUnit(
            ViSession(vi), ViInt32(YCursorUnit), ViBoolean(ResetYCursorLocation)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureModulationNoise(self, vi, byteOrder, interpolateEnabled, noisePercent):
        status = self.dll.agx2k3k_ConfigureModulationNoise(
            ViSession(vi),
            ViInt32(byteOrder),
            ViBoolean(interpolateEnabled),
            ViInt32(noisePercent),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureModNoiseMultiChan(self, vi, WaveGenChannel, ByteOrder, NoisePercent):
        status = self.dll.agx2k3k_ConfigureModNoiseMultiChan(
            ViSession(vi),
            ViConstString(WaveGenChannel),
            ViInt32(ByteOrder),
            ViInt32(NoisePercent),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefSignalType(self, vi, ReferenceSignalMode):
        status = self.dll.agx2k3k_ConfigureRefSignalType(ViSession(vi), ViInt32(ReferenceSignalMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalVoltmeter(self, vi, AutoRange, EnableDVM, DVMMode, DVMAnalogSource):
        status = self.dll.agx2k3k_ConfigureDigitalVoltmeter(
            ViSession(vi),
            ViBoolean(AutoRange),
            ViBoolean(EnableDVM),
            ViInt32(DVMMode),
            ViInt32(DVMAnalogSource),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadDigitalVoltmeter(self, vi):
        DVMFrequency = ViReal64()
        DVMCurrent = ViReal64()
        status = self.dll.agx2k3k_ReadDigitalVoltmeter(ViSession(vi), byref(DVMFrequency), byref(DVMCurrent))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DVMFrequency = float(DVMFrequency.value)
        DVMCurrent = float(DVMCurrent.value)
        return DVMFrequency, DVMCurrent

    def ConfigureFunAverageNumber(self, vi, FunctionChannel, NumberAverages):
        status = self.dll.agx2k3k_ConfigureFunAverageNumber(
            ViSession(vi), ViConstString(FunctionChannel), ViInt32(NumberAverages)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSelectedFunction(self, vi, FunctionChannel, VerticalAxis, ReferenceLevel):
        status = self.dll.agx2k3k_ConfigureSelectedFunction(
            ViSession(vi),
            ViConstString(FunctionChannel),
            ViReal64(VerticalAxis),
            ViReal64(ReferenceLevel),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMarkerUnits(self, vi, Dimension):
        status = self.dll.agx2k3k_ConfigureMarkerUnits(ViSession(vi), ViInt32(Dimension))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadQualityPowerAnalysis(self, vi):
        PhaseAngle = ViReal64()
        ApparentPower = ViReal64()
        CrestFactor = ViReal64()
        PowerFactor = ViReal64()
        ReactivePower = ViReal64()
        RealPower = ViReal64()
        status = self.dll.agx2k3k_ReadQualityPowerAnalysis(
            ViSession(vi),
            byref(PhaseAngle),
            byref(ApparentPower),
            byref(CrestFactor),
            byref(PowerFactor),
            byref(ReactivePower),
            byref(RealPower),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        PhaseAngle = float(PhaseAngle.value)
        ApparentPower = float(ApparentPower.value)
        CrestFactor = float(CrestFactor.value)
        PowerFactor = float(PowerFactor.value)
        ReactivePower = float(ReactivePower.value)
        RealPower = float(RealPower.value)
        return (
            PhaseAngle,
            ApparentPower,
            CrestFactor,
            PowerFactor,
            ReactivePower,
            RealPower,
        )

    def ReadCurrentValue(self, vi):
        Area = ViReal64()
        status = self.dll.agx2k3k_ReadCurrentValue(ViSession(vi), byref(Area))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Area.value)

    def ClearMeasurementsMarkers(self, vi):
        status = self.dll.agx2k3k_ClearMeasurementsMarkers(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadSwitchLossPowerAnalysis(self, vi):
        PowerLossPerCycle = ViReal64()
        EnergyLoss = ViReal64()
        PowerLoss = ViReal64()
        status = self.dll.agx2k3k_ReadSwitchLossPowerAnalysis(
            ViSession(vi), byref(PowerLossPerCycle), byref(EnergyLoss), byref(PowerLoss)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        PowerLossPerCycle = float(PowerLossPerCycle.value)
        EnergyLoss = float(EnergyLoss.value)
        PowerLoss = float(PowerLoss.value)
        return PowerLossPerCycle, EnergyLoss, PowerLoss

    def ReadEfficiencyPowerAnalysis(self, vi):
        InputPower = ViReal64()
        OutputPower = ViReal64()
        status = self.dll.agx2k3k_ReadEfficiencyPowerAnalysis(ViSession(vi), byref(InputPower), byref(OutputPower))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        InputPower = float(InputPower.value)
        OutputPower = float(OutputPower.value)
        return InputPower, OutputPower

    def ReadOnOffTime(self, vi):
        TurnOffTime = ViReal64()
        TurnOnTime = ViReal64()
        status = self.dll.agx2k3k_ReadOnOffTime(ViSession(vi), byref(TurnOffTime), byref(TurnOnTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TurnOffTime = float(TurnOffTime.value)
        TurnOnTime = float(TurnOnTime.value)
        return TurnOffTime, TurnOnTime

    def ConfigureStatisticsType(self, vi, MeasureInformationType):
        status = self.dll.agx2k3k_ConfigureStatisticsType(ViSession(vi), ViInt32(MeasureInformationType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadDisplayedMeasurements(self, vi, ResultLength):
        ContinuouslyDisplayedMeasurements = ARRAY_ViChar(1024)
        status = self.dll.agx2k3k_ReadDisplayedMeasurements(
            ViSession(vi), ContinuouslyDisplayedMeasurements, ViInt32(ResultLength)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ContinuouslyDisplayedMeasurements)

    def ReadPowerHarmonics(self, vi, DataLength):
        TableData = ARRAY_ViChar(1024)
        status = self.dll.agx2k3k_ReadPowerHarmonics(ViSession(vi), ViInt32(DataLength), TableData)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(TableData)

    def ReadHarmonicsPowerAnalysis(self, vi):
        FailCount = ViInt32()
        PowerFactor = ViReal64()
        IterationCount = ViInt32()
        TotalHarmonicsDistortion = ViReal64()
        OverallStatus = ViInt32()
        status = self.dll.agx2k3k_ReadHarmonicsPowerAnalysis(
            ViSession(vi),
            byref(FailCount),
            byref(PowerFactor),
            byref(IterationCount),
            byref(TotalHarmonicsDistortion),
            byref(OverallStatus),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        FailCount = int(FailCount.value)
        PowerFactor = float(PowerFactor.value)
        IterationCount = int(IterationCount.value)
        TotalHarmonicsDistortion = float(TotalHarmonicsDistortion.value)
        OverallStatus = int(OverallStatus.value)
        return (
            FailCount,
            PowerFactor,
            IterationCount,
            TotalHarmonicsDistortion,
            OverallStatus,
        )

    def ConfigurePowerCycleCount(self, vi, HarmonicsCycleCount, QualityCycleCount):
        status = self.dll.agx2k3k_ConfigurePowerCycleCount(
            ViSession(vi), ViInt32(HarmonicsCycleCount), ViInt32(QualityCycleCount)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerDuration(
        self,
        vi,
        EfficiencyDuration,
        ModulationDuration,
        TurnOffDuration,
        TurnOnDuration,
        RippleDuration,
        TransientDuration,
    ):
        status = self.dll.agx2k3k_ConfigurePowerDuration(
            ViSession(vi),
            ViReal64(EfficiencyDuration),
            ViReal64(ModulationDuration),
            ViReal64(TurnOffDuration),
            ViReal64(TurnOnDuration),
            ViReal64(RippleDuration),
            ViReal64(TransientDuration),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerVoltage(
        self,
        vi,
        InrushMaxVoltage,
        TurnOffMaxVoltage,
        TurnOnMaxVoltage,
        TurnOffSteadyVoltage,
        TurnOnSteadyVoltage,
        TransientSteadyVoltage,
    ):
        status = self.dll.agx2k3k_ConfigurePowerVoltage(
            ViSession(vi),
            ViReal64(InrushMaxVoltage),
            ViReal64(TurnOffMaxVoltage),
            ViReal64(TurnOnMaxVoltage),
            ViReal64(TurnOffSteadyVoltage),
            ViReal64(TurnOnSteadyVoltage),
            ViReal64(TransientSteadyVoltage),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePowerInrushCurrent(self, vi, InrushCurrentAmplitude):
        status = self.dll.agx2k3k_ConfigurePowerInrushCurrent(ViSession(vi), ViReal64(InrushCurrentAmplitude))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadSBusA429(self, vi):
        BusName = ARRAY_ViChar(1024)
        A429ErrorCount = ViInt32()
        A429WordCount = ViInt32()
        status = self.dll.agx2k3k_ReadSBusA429(ViSession(vi), BusName, byref(A429ErrorCount), byref(A429WordCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        BusName = decode(BusName)
        A429ErrorCount = int(A429ErrorCount.value)
        A429WordCount = int(A429WordCount.value)
        return BusName, A429ErrorCount, A429WordCount

    def ConfigureA429TriggerRange(self, vi, BusName, A429TriggerRange):
        status = self.dll.agx2k3k_ConfigureA429TriggerRange(
            ViSession(vi), ViConstString(BusName), ViConstString(A429TriggerRange)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadSBusFlexray(self, vi):
        BusName = ARRAY_ViChar(1024)
        FlexSyncFrameCount = ViInt32()
        FlexTotalFrameCount = ViInt32()
        status = self.dll.agx2k3k_ReadSBusFlexray(
            ViSession(vi), BusName, byref(FlexSyncFrameCount), byref(FlexTotalFrameCount)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        BusName = decode(BusName)
        FlexSyncFrameCount = int(FlexSyncFrameCount.value)
        FlexTotalFrameCount = int(FlexTotalFrameCount.value)
        return BusName, FlexSyncFrameCount, FlexTotalFrameCount

    def ConfigureFlexTriggerType(self, vi, BusName, FlexrayTriggerMode):
        status = self.dll.agx2k3k_ConfigureFlexTriggerType(
            ViSession(vi), ViConstString(BusName), ViInt32(FlexrayTriggerMode)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureUSBTriggerSource2(self, vi, BusName, Speed, D_Plus, D_Minus):
        status = self.dll.agx2k3k_ConfigureUSBTriggerSource2(
            ViSession(vi),
            ViConstString(BusName),
            ViInt32(Speed),
            ViInt32(D_Plus),
            ViInt32(D_Minus),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureUSBTriggerType(self, vi, BusName, TriggerType):
        status = self.dll.agx2k3k_ConfigureUSBTriggerType(ViSession(vi), ViConstString(BusName), ViInt32(TriggerType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureUSBPortion(
        self,
        vi,
        BusName,
        AddressPortion,
        CRCPortion,
        DataPortion,
        DataLength,
        EndpointPortion,
    ):
        status = self.dll.agx2k3k_ConfigureUSBPortion(
            ViSession(vi),
            ViConstString(BusName),
            ViConstString(AddressPortion),
            ViConstString(CRCPortion),
            ViConstString(DataPortion),
            ViInt32(DataLength),
            ViConstString(EndpointPortion),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureUSBPortionAdvanced(
        self,
        vi,
        BusName,
        ETPortion,
        FramePortion,
        HubAddressPortion,
        PidCheckPortion,
        PortPortion,
        SCPortion,
        SEUPortion,
    ):
        status = self.dll.agx2k3k_ConfigureUSBPortionAdvanced(
            ViSession(vi),
            ViConstString(BusName),
            ViConstString(ETPortion),
            ViConstString(FramePortion),
            ViConstString(HubAddressPortion),
            ViConstString(PidCheckPortion),
            ViConstString(PortPortion),
            ViConstString(SCPortion),
            ViConstString(SEUPortion),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureUSBPID(self, vi, BusName, DataPid, HandshakePid, SpecialPid, TokenPid):
        status = self.dll.agx2k3k_ConfigureUSBPID(
            ViSession(vi),
            ViConstString(BusName),
            ViInt32(DataPid),
            ViInt32(HandshakePid),
            ViInt32(SpecialPid),
            ViInt32(TokenPid),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureUSBNormal(self, vi, BusName, UsbBase, UsbDifferentialSource):
        status = self.dll.agx2k3k_ConfigureUSBNormal(
            ViSession(vi),
            ViConstString(BusName),
            ViInt32(UsbBase),
            ViInt32(UsbDifferentialSource),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSearchUSBType(self, vi, SearchType):
        status = self.dll.agx2k3k_ConfigureSearchUSBType(ViSession(vi), ViInt32(SearchType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSearchUSBPortion(self, vi, AddressPortion, CRCPortion, DataPortion, DataLength, EndpointPortion):
        status = self.dll.agx2k3k_ConfigureSearchUSBPortion(
            ViSession(vi),
            ViConstString(AddressPortion),
            ViConstString(CRCPortion),
            ViConstString(DataPortion),
            ViInt32(DataLength),
            ViConstString(EndpointPortion),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSearchUSBPortionAd(
        self,
        vi,
        ETPortion,
        FramePortion,
        HubAddressPortion,
        PortPortion,
        SCPortion,
        SEUPortion,
    ):
        status = self.dll.agx2k3k_ConfigureSearchUSBPortionAd(
            ViSession(vi),
            ViConstString(ETPortion),
            ViConstString(FramePortion),
            ViConstString(HubAddressPortion),
            ViConstString(PortPortion),
            ViConstString(SCPortion),
            ViConstString(SEUPortion),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSearchUSBPID(self, vi, DataPid, HandshakePid, SpecialPid, TokenPid):
        status = self.dll.agx2k3k_ConfigureSearchUSBPID(
            ViSession(vi),
            ViInt32(DataPid),
            ViInt32(HandshakePid),
            ViInt32(SpecialPid),
            ViInt32(TokenPid),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureArbWaveformData(self, vi, WaveGenChannel, ArbData, ArbDacData, PointsCount):
        status = self.dll.agx2k3k_ConfigureArbWaveformData(
            ViSession(vi),
            ViConstString(WaveGenChannel),
            ViConstString(ArbData),
            ViConstString(ArbDacData),
            ViInt32(PointsCount),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearArbWaveformData(self, vi, WaveGenChannel):
        status = self.dll.agx2k3k_ClearArbWaveformData(ViSession(vi), ViConstString(WaveGenChannel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StoreArbWaveform(self, vi, WaveGenChannel, Source):
        status = self.dll.agx2k3k_StoreArbWaveform(ViSession(vi), ViConstString(WaveGenChannel), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureModulationAM(self, vi, WaveGenChannel, DepthPercent, WaveformFrequency):
        status = self.dll.agx2k3k_ConfigureModulationAM(
            ViSession(vi),
            ViConstString(WaveGenChannel),
            ViInt32(DepthPercent),
            ViReal64(WaveformFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureModulationFM(self, vi, WaveGenChannel, Deviation, Frequency):
        status = self.dll.agx2k3k_ConfigureModulationFM(
            ViSession(vi),
            ViConstString(WaveGenChannel),
            ViReal64(Deviation),
            ViReal64(Frequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureModulationFSKey(self, vi, WaveGenChannel, Frequency, Rate):
        status = self.dll.agx2k3k_ConfigureModulationFSKey(
            ViSession(vi),
            ViConstString(WaveGenChannel),
            ViReal64(Frequency),
            ViReal64(Rate),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureModulationFunction(self, vi, WaveGenChannel, SignalShape, RampSymmetry):
        status = self.dll.agx2k3k_ConfigureModulationFunction(
            ViSession(vi),
            ViConstString(WaveGenChannel),
            ViInt32(SignalShape),
            ViInt32(RampSymmetry),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureModulationState(self, vi, WaveGenChannel, EnableModulatedWaveform):
        status = self.dll.agx2k3k_ConfigureModulationState(
            ViSession(vi),
            ViConstString(WaveGenChannel),
            ViBoolean(EnableModulatedWaveform),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureModulationType(self, vi, WaveGenChannel, ModulationType):
        status = self.dll.agx2k3k_ConfigureModulationType(
            ViSession(vi), ViConstString(WaveGenChannel), ViInt32(ModulationType)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGeneratorTracking(
        self,
        vi,
        WaveGenChannel,
        EnableTracking,
        EnableAmplitudeTracking,
        EnableFrequencyTracking,
        SetIdentical,
    ):
        status = self.dll.agx2k3k_ConfigureGeneratorTracking(
            ViSession(vi),
            ViConstString(WaveGenChannel),
            ViBoolean(EnableTracking),
            ViBoolean(EnableAmplitudeTracking),
            ViBoolean(EnableFrequencyTracking),
            ViBoolean(SetIdentical),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGeneratorInverted(self, vi, WaveGenChannel, OutputPolarity):
        status = self.dll.agx2k3k_ConfigureGeneratorInverted(
            ViSession(vi), ViConstString(WaveGenChannel), ViInt32(OutputPolarity)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInterpolation(self, vi, InterpolationMethod):
        status = self.dll.agx2k3k_ConfigureInterpolation(ViSession(vi), ViInt32(InterpolationMethod))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInterpolationByChannel(self, vi, waveGenChannel, InterpolationMethod):
        status = self.dll.agx2k3k_ConfigureInterpolationByChannel(
            ViSession(vi), ViConstString(waveGenChannel), ViInt32(InterpolationMethod)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
