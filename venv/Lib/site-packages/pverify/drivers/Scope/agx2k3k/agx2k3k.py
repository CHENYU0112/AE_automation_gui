from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .agx2k3k_dllwrap import *


class agx2k3k(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = agx2k3k_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def DeviceClear(self):
        """"""
        return self._dllwrap.DeviceClear(self._vi)

    def GetNextCoercionRecord(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetChannelName(self, index, bufferSize):
        """

        :param index:
        :type index:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, index, bufferSize)

    def ConfigureAcquisitionType(self, acquisitionType):
        """

        :param acquisitionType:
        :type acquisitionType:
        """
        return self._dllwrap.ConfigureAcquisitionType(self._vi, acquisitionType)

    def ConfigureAcquisitionMode(self, acquisitionMode):
        """

        :param acquisitionMode:
        :type acquisitionMode:
        """
        return self._dllwrap.ConfigureAcquisitionMode(self._vi, acquisitionMode)

    def ConfigureAcquisitionRecord(self, timePerRecord, minimumRecordLength, acqStartTime):
        """

        :param timePerRecord:
        :type timePerRecord:
        :param minimumRecordLength:
        :type minimumRecordLength:
        :param acqStartTime:
        :type acqStartTime:
        """
        return self._dllwrap.ConfigureAcquisitionRecord(self._vi, timePerRecord, minimumRecordLength, acqStartTime)

    def ConfigureRecordMode(self, horizontalRecordMode):
        """

        :param horizontalRecordMode:
        :type horizontalRecordMode:
        """
        return self._dllwrap.ConfigureRecordMode(self._vi, horizontalRecordMode)

    def ConfigureNumAverages(self, numberOfAverages):
        """

        :param numberOfAverages:
        :type numberOfAverages:
        """
        return self._dllwrap.ConfigureNumAverages(self._vi, numberOfAverages)

    def SampleMode(self):
        """"""
        return self._dllwrap.SampleMode(self._vi)

    def SampleRate(self):
        """"""
        return self._dllwrap.SampleRate(self._vi)

    def ConfigureFunBus(self, busClock, busSlope, busIncrementY, busOriginY, busUnitY):
        """

        :param busClock:
        :type busClock:
        :param busSlope:
        :type busSlope:
        :param busIncrementY:
        :type busIncrementY:
        :param busOriginY:
        :type busOriginY:
        :param busUnitY:
        :type busUnitY:
        """
        return self._dllwrap.ConfigureFunBus(self._vi, busClock, busSlope, busIncrementY, busOriginY, busUnitY)

    def ConfigureFunBusMultiChan(self, FunctionChannel, busClock, busSlope, busIncrementY, busOriginY, busUnitY):
        """

        :param FunctionChannel:
        :type FunctionChannel:
        :param busClock:
        :type busClock:
        :param busSlope:
        :type busSlope:
        :param busIncrementY:
        :type busIncrementY:
        :param busOriginY:
        :type busOriginY:
        :param busUnitY:
        :type busUnitY:
        """
        return self._dllwrap.ConfigureFunBusMultiChan(
            self._vi,
            FunctionChannel,
            busClock,
            busSlope,
            busIncrementY,
            busOriginY,
            busUnitY,
        )

    def ConfigureFunTrendMeas(self, trendMeasurement):
        """

        :param trendMeasurement:
        :type trendMeasurement:
        """
        return self._dllwrap.ConfigureFunTrendMeas(self._vi, trendMeasurement)

    def ConfigureTrendMeasMultiChan(self, FunctionChannel, trendMeasurement):
        """

        :param FunctionChannel:
        :type FunctionChannel:
        :param trendMeasurement:
        :type trendMeasurement:
        """
        return self._dllwrap.ConfigureTrendMeasMultiChan(self._vi, FunctionChannel, trendMeasurement)

    def ConfigureFunLinear(self, linearGain, linearOffset):
        """

        :param linearGain:
        :type linearGain:
        :param linearOffset:
        :type linearOffset:
        """
        return self._dllwrap.ConfigureFunLinear(self._vi, linearGain, linearOffset)

    def ConfigureFunLinearMultiChan(self, linearGain, linearOffset):
        """

        :param linearGain:
        :type linearGain:
        :param linearOffset:
        :type linearOffset:
        """
        return self._dllwrap.ConfigureFunLinearMultiChan(self._vi, linearGain, linearOffset)

    def ConfigureFunFrequency(self, highPass, lowPass):
        """

        :param highPass:
        :type highPass:
        :param lowPass:
        :type lowPass:
        """
        return self._dllwrap.ConfigureFunFrequency(self._vi, highPass, lowPass)

    def ConfigureFunFreqMultiChan(self, Function_Channel, highPass, lowPass):
        """

        :param Function_Channel:
        :type Function_Channel:
        :param highPass:
        :type highPass:
        :param lowPass:
        :type lowPass:
        """
        return self._dllwrap.ConfigureFunFreqMultiChan(self._vi, Function_Channel, highPass, lowPass)

    def ConfigureFunFFTUnit(self, unit):
        """

        :param unit:
        :type unit:
        """
        return self._dllwrap.ConfigureFunFFTUnit(self._vi, unit)

    def ConfigureFFTUnitMultiChan(self, Function_Channel, unit):
        """

        :param Function_Channel:
        :type Function_Channel:
        :param unit:
        :type unit:
        """
        return self._dllwrap.ConfigureFFTUnitMultiChan(self._vi, Function_Channel, unit)

    def ConfigureFunInputOffset(self, inputOffset):
        """

        :param inputOffset:
        :type inputOffset:
        """
        return self._dllwrap.ConfigureFunInputOffset(self._vi, inputOffset)

    def ConfigureInputOffsMultiChan(self, Function_Channel, inputOffset):
        """

        :param Function_Channel:
        :type Function_Channel:
        :param inputOffset:
        :type inputOffset:
        """
        return self._dllwrap.ConfigureInputOffsMultiChan(self._vi, Function_Channel, inputOffset)

    def ConfigureMathChannelEnabled(self, channelEnabled):
        """

        :param channelEnabled:
        :type channelEnabled:
        """
        return self._dllwrap.ConfigureMathChannelEnabled(self._vi, channelEnabled)

    def ConfigureMathChanMultiChan(self, Function_Channel, channelEnabled):
        """

        :param Function_Channel:
        :type Function_Channel:
        :param channelEnabled:
        :type channelEnabled:
        """
        return self._dllwrap.ConfigureMathChanMultiChan(self._vi, Function_Channel, channelEnabled)

    def ConfigureMathFunction(self, source1, source2, operation):
        """

        :param source1:
        :type source1:
        :param source2:
        :type source2:
        :param operation:
        :type operation:
        """
        return self._dllwrap.ConfigureMathFunction(self._vi, source1, source2, operation)

    def ConfigureMathSettings(self, scale, offset):
        """

        :param scale:
        :type scale:
        :param offset:
        :type offset:
        """
        return self._dllwrap.ConfigureMathSettings(self._vi, scale, offset)

    def ConfigureMathMultiChan(self, Function_Channel, scale, offset):
        """

        :param Function_Channel:
        :type Function_Channel:
        :param scale:
        :type scale:
        :param offset:
        :type offset:
        """
        return self._dllwrap.ConfigureMathMultiChan(self._vi, Function_Channel, scale, offset)

    def ConfigureMathFFT(self, span, center, window):
        """

        :param span:
        :type span:
        :param center:
        :type center:
        :param window:
        :type window:
        """
        return self._dllwrap.ConfigureMathFFT(self._vi, span, center, window)

    def ConfigureMathFFTMultiChan(self, FunctionChannel, span, center, window):
        """

        :param FunctionChannel:
        :type FunctionChannel:
        :param span:
        :type span:
        :param center:
        :type center:
        :param window:
        :type window:
        """
        return self._dllwrap.ConfigureMathFFTMultiChan(self._vi, FunctionChannel, span, center, window)

    def ActualRecordLength(self):
        """"""
        return self._dllwrap.ActualRecordLength(self._vi)

    def ConfigureInitiateContinuous(self, continuous):
        """

        :param continuous:
        :type continuous:
        """
        return self._dllwrap.ConfigureInitiateContinuous(self._vi, continuous)

    def ConfigureAcquisitionSegment(self, segmentAnalyzeEnable, segmentCount, segmentIndex):
        """

        :param segmentAnalyzeEnable:
        :type segmentAnalyzeEnable:
        :param segmentCount:
        :type segmentCount:
        :param segmentIndex:
        :type segmentIndex:
        """
        return self._dllwrap.ConfigureAcquisitionSegment(self._vi, segmentAnalyzeEnable, segmentCount, segmentIndex)

    def ConfigureChannel(self, channel, range, offset, coupling, probeAttenuation, enabled):
        """

        :param channel:
        :type channel:
        :param range:
        :type range:
        :param offset:
        :type offset:
        :param coupling:
        :type coupling:
        :param probeAttenuation:
        :type probeAttenuation:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureChannel(self._vi, channel, range, offset, coupling, probeAttenuation, enabled)

    def ConfigureDigitalChannel(self, channelName, size, threshold, channelEnabled):
        """

        :param channelName:
        :type channelName:
        :param size:
        :type size:
        :param threshold:
        :type threshold:
        :param channelEnabled:
        :type channelEnabled:
        """
        return self._dllwrap.ConfigureDigitalChannel(self._vi, channelName, size, threshold, channelEnabled)

    def ConfigureChanCharacteristics(self, channel, inputImpedance, maxInputFrequency):
        """

        :param channel:
        :type channel:
        :param inputImpedance:
        :type inputImpedance:
        :param maxInputFrequency:
        :type maxInputFrequency:
        """
        return self._dllwrap.ConfigureChanCharacteristics(self._vi, channel, inputImpedance, maxInputFrequency)

    def AutoProbeSenseValue(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.AutoProbeSenseValue(self._vi, channel)

    def ConfigureChannelInvert(self, channel, invert):
        """

        :param channel:
        :type channel:
        :param invert:
        :type invert:
        """
        return self._dllwrap.ConfigureChannelInvert(self._vi, channel, invert)

    def ConfigureChannelVernier(self, channel, vernier):
        """

        :param channel:
        :type channel:
        :param vernier:
        :type vernier:
        """
        return self._dllwrap.ConfigureChannelVernier(self._vi, channel, vernier)

    def ConfigureChannelProbe(self, channel, skew, units):
        """

        :param channel:
        :type channel:
        :param skew:
        :type skew:
        :param units:
        :type units:
        """
        return self._dllwrap.ConfigureChannelProbe(self._vi, channel, skew, units)

    def ConfigureChannelLabel(self, channel, label):
        """

        :param channel:
        :type channel:
        :param label:
        :type label:
        """
        return self._dllwrap.ConfigureChannelLabel(self._vi, channel, label)

    def ConfigureDigitalPosition(self, channelName, position):
        """

        :param channelName:
        :type channelName:
        :param position:
        :type position:
        """
        return self._dllwrap.ConfigureDigitalPosition(self._vi, channelName, position)

    def ConfigureTimebaseMode(self, timebaseMode):
        """

        :param timebaseMode:
        :type timebaseMode:
        """
        return self._dllwrap.ConfigureTimebaseMode(self._vi, timebaseMode)

    def ConfigureTimebase(self, reference, vernier):
        """

        :param reference:
        :type reference:
        :param vernier:
        :type vernier:
        """
        return self._dllwrap.ConfigureTimebase(self._vi, reference, vernier)

    def ConfigureWindowTimebase(self, position, range, scale):
        """

        :param position:
        :type position:
        :param range:
        :type range:
        :param scale:
        :type scale:
        """
        return self._dllwrap.ConfigureWindowTimebase(self._vi, position, range, scale)

    def ConfigureTrigger(self, triggerType, holdoff):
        """

        :param triggerType:
        :type triggerType:
        :param holdoff:
        :type holdoff:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, triggerType, holdoff)

    def ConfigureTriggerCoupling(self, coupling):
        """

        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureTriggerCoupling(self._vi, coupling)

    def ConfigureTriggerModifier(self, modifier):
        """

        :param modifier:
        :type modifier:
        """
        return self._dllwrap.ConfigureTriggerModifier(self._vi, modifier)

    def ConfigureTriggerReject(self, noiseReject, HFReject):
        """

        :param noiseReject:
        :type noiseReject:
        :param HFReject:
        :type HFReject:
        """
        return self._dllwrap.ConfigureTriggerReject(self._vi, noiseReject, HFReject)

    def ConfigureTriggerLevel(self, levelHigh, levelLow):
        """

        :param levelHigh:
        :type levelHigh:
        :param levelLow:
        :type levelLow:
        """
        return self._dllwrap.ConfigureTriggerLevel(self._vi, levelHigh, levelLow)

    def ConfigureEdgeTriggerSource(self, source, level, slope):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureEdgeTriggerSource(self._vi, source, level, slope)

    def ConfigureRuntTriggerSource(self, triggerSource, runtPolarity, triggerCondition, runtTime):
        """

        :param triggerSource:
        :type triggerSource:
        :param runtPolarity:
        :type runtPolarity:
        :param triggerCondition:
        :type triggerCondition:
        :param runtTime:
        :type runtTime:
        """
        return self._dllwrap.ConfigureRuntTriggerSource(
            self._vi, triggerSource, runtPolarity, triggerCondition, runtTime
        )

    def ConfigureTransitionTrigger(self, triggerSource, slope, triggerCondition, transitionTime):
        """

        :param triggerSource:
        :type triggerSource:
        :param slope:
        :type slope:
        :param triggerCondition:
        :type triggerCondition:
        :param transitionTime:
        :type transitionTime:
        """
        return self._dllwrap.ConfigureTransitionTrigger(
            self._vi, triggerSource, slope, triggerCondition, transitionTime
        )

    def ConfigureSetupHoldTrigger(self, clockSource, dataSource, slope, holdTime, setupTime):
        """

        :param clockSource:
        :type clockSource:
        :param dataSource:
        :type dataSource:
        :param slope:
        :type slope:
        :param holdTime:
        :type holdTime:
        :param setupTime:
        :type setupTime:
        """
        return self._dllwrap.ConfigureSetupHoldTrigger(self._vi, clockSource, dataSource, slope, holdTime, setupTime)

    def ConfigureTVTriggerSource(self, source, TVSignalFormat, TVEvent, TVPolarity):
        """

        :param source:
        :type source:
        :param TVSignalFormat:
        :type TVSignalFormat:
        :param TVEvent:
        :type TVEvent:
        :param TVPolarity:
        :type TVPolarity:
        """
        return self._dllwrap.ConfigureTVTriggerSource(self._vi, source, TVSignalFormat, TVEvent, TVPolarity)

    def ConfigureTVTriggerLineNumber(self, lineNumber):
        """

        :param lineNumber:
        :type lineNumber:
        """
        return self._dllwrap.ConfigureTVTriggerLineNumber(self._vi, lineNumber)

    def ConfigureIICBusSource(self, busName, serialClockSource, serialDataSource, type):
        """

        :param busName:
        :type busName:
        :param serialClockSource:
        :type serialClockSource:
        :param serialDataSource:
        :type serialDataSource:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureIICBusSource(self._vi, busName, serialClockSource, serialDataSource, type)

    def ConfigureIICEEPROMQualifier(self, busName, qualifier):
        """

        :param busName:
        :type busName:
        :param qualifier:
        :type qualifier:
        """
        return self._dllwrap.ConfigureIICEEPROMQualifier(self._vi, busName, qualifier)

    def ConfigureIICData(self, busName, address, addressSize, data, data2):
        """

        :param busName:
        :type busName:
        :param address:
        :type address:
        :param addressSize:
        :type addressSize:
        :param data:
        :type data:
        :param data2:
        :type data2:
        """
        return self._dllwrap.ConfigureIICData(self._vi, busName, address, addressSize, data, data2)

    def ConfigureI2SBusSource(self, busName, clockSource, dataSource, wsSource):
        """

        :param busName:
        :type busName:
        :param clockSource:
        :type clockSource:
        :param dataSource:
        :type dataSource:
        :param wsSource:
        :type wsSource:
        """
        return self._dllwrap.ConfigureI2SBusSource(self._vi, busName, clockSource, dataSource, wsSource)

    def ConfigureI2SBus(self, busName, rxWidth, txWidth, wsPolarity, clockSlope, alignment):
        """

        :param busName:
        :type busName:
        :param rxWidth:
        :type rxWidth:
        :param txWidth:
        :type txWidth:
        :param wsPolarity:
        :type wsPolarity:
        :param clockSlope:
        :type clockSlope:
        :param alignment:
        :type alignment:
        """
        return self._dllwrap.ConfigureI2SBus(self._vi, busName, rxWidth, txWidth, wsPolarity, clockSlope, alignment)

    def ConfigureI2STrigger(self, busName, triggerCondition, triggerAudio, patternData, rangeLow, rangeHigh):
        """

        :param busName:
        :type busName:
        :param triggerCondition:
        :type triggerCondition:
        :param triggerAudio:
        :type triggerAudio:
        :param patternData:
        :type patternData:
        :param rangeLow:
        :type rangeLow:
        :param rangeHigh:
        :type rangeHigh:
        """
        return self._dllwrap.ConfigureI2STrigger(
            self._vi,
            busName,
            triggerCondition,
            triggerAudio,
            patternData,
            rangeLow,
            rangeHigh,
        )

    def ConfigureLINBus(self, busName, LINSource, baudRate, standard, syncBreak, parity):
        """

        :param busName:
        :type busName:
        :param LINSource:
        :type LINSource:
        :param baudRate:
        :type baudRate:
        :param standard:
        :type standard:
        :param syncBreak:
        :type syncBreak:
        :param parity:
        :type parity:
        """
        return self._dllwrap.ConfigureLINBus(self._vi, busName, LINSource, baudRate, standard, syncBreak, parity)

    def ConfigureLINTrigger(self, busName, triggerCondition, patternDataLength, patternData, patternID):
        """

        :param busName:
        :type busName:
        :param triggerCondition:
        :type triggerCondition:
        :param patternDataLength:
        :type patternDataLength:
        :param patternData:
        :type patternData:
        :param patternID:
        :type patternID:
        """
        return self._dllwrap.ConfigureLINTrigger(
            self._vi, busName, triggerCondition, patternDataLength, patternData, patternID
        )

    def ConfigureSPITrigger(
        self,
        busName,
        triggerType,
        MISODataWidth,
        MISODataValue,
        MOSIDataWidth,
        MOSIDataValue,
    ):
        """

        :param busName:
        :type busName:
        :param triggerType:
        :type triggerType:
        :param MISODataWidth:
        :type MISODataWidth:
        :param MISODataValue:
        :type MISODataValue:
        :param MOSIDataWidth:
        :type MOSIDataWidth:
        :param MOSIDataValue:
        :type MOSIDataValue:
        """
        return self._dllwrap.ConfigureSPITrigger(
            self._vi,
            busName,
            triggerType,
            MISODataWidth,
            MISODataValue,
            MOSIDataWidth,
            MOSIDataValue,
        )

    def ConfigureSBusFlexrayTrigger(
        self,
        busName,
        trigger,
        triggerEventBssID,
        triggerEventType,
        triggerFrameCCBase,
        triggerFrameCCRepetition,
        triggerFrameID,
        triggerFrameType,
    ):
        """

        :param busName:
        :type busName:
        :param trigger:
        :type trigger:
        :param triggerEventBssID:
        :type triggerEventBssID:
        :param triggerEventType:
        :type triggerEventType:
        :param triggerFrameCCBase:
        :type triggerFrameCCBase:
        :param triggerFrameCCRepetition:
        :type triggerFrameCCRepetition:
        :param triggerFrameID:
        :type triggerFrameID:
        :param triggerFrameType:
        :type triggerFrameType:
        """
        return self._dllwrap.ConfigureSBusFlexrayTrigger(
            self._vi,
            busName,
            trigger,
            triggerEventBssID,
            triggerEventType,
            triggerFrameCCBase,
            triggerFrameCCRepetition,
            triggerFrameID,
            triggerFrameType,
        )

    def ConfigureSPIBus(
        self,
        busName,
        clockSource,
        dataSource,
        frameSource,
        frameBy,
        slope,
        bitOrder,
        wordWidth,
    ):
        """

        :param busName:
        :type busName:
        :param clockSource:
        :type clockSource:
        :param dataSource:
        :type dataSource:
        :param frameSource:
        :type frameSource:
        :param frameBy:
        :type frameBy:
        :param slope:
        :type slope:
        :param bitOrder:
        :type bitOrder:
        :param wordWidth:
        :type wordWidth:
        """
        return self._dllwrap.ConfigureSPIBus(
            self._vi,
            busName,
            clockSource,
            dataSource,
            frameSource,
            frameBy,
            slope,
            bitOrder,
            wordWidth,
        )

    def ConfigureSPITriggerTimeout(self, busName, timeout):
        """

        :param busName:
        :type busName:
        :param timeout:
        :type timeout:
        """
        return self._dllwrap.ConfigureSPITriggerTimeout(self._vi, busName, timeout)

    def ConfigureEdgeTriggerReject(self, triggerRejectFilter):
        """

        :param triggerRejectFilter:
        :type triggerRejectFilter:
        """
        return self._dllwrap.ConfigureEdgeTriggerReject(self._vi, triggerRejectFilter)

    def ConfigureEdgeBurstTrigger(self, triggerSource, slope, count, idleTime):
        """

        :param triggerSource:
        :type triggerSource:
        :param slope:
        :type slope:
        :param count:
        :type count:
        :param idleTime:
        :type idleTime:
        """
        return self._dllwrap.ConfigureEdgeBurstTrigger(self._vi, triggerSource, slope, count, idleTime)

    def ConfigureGlitchTriggerSource(self, source, level, glitchWidth, glitchPolarity, glitchCondition):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param glitchWidth:
        :type glitchWidth:
        :param glitchPolarity:
        :type glitchPolarity:
        :param glitchCondition:
        :type glitchCondition:
        """
        return self._dllwrap.ConfigureGlitchTriggerSource(
            self._vi, source, level, glitchWidth, glitchPolarity, glitchCondition
        )

    def ConfigureGlitchWidth(self, minWidth):
        """

        :param minWidth:
        :type minWidth:
        """
        return self._dllwrap.ConfigureGlitchWidth(self._vi, minWidth)

    def ConfigureGlitchRange(self, greaterThanTime, lessThanTime):
        """

        :param greaterThanTime:
        :type greaterThanTime:
        :param lessThanTime:
        :type lessThanTime:
        """
        return self._dllwrap.ConfigureGlitchRange(self._vi, greaterThanTime, lessThanTime)

    def ConfigurePatternTrigger(self, patternValue, triggerCondition, greaterThanTime, lessThanTime):
        """

        :param patternValue:
        :type patternValue:
        :param triggerCondition:
        :type triggerCondition:
        :param greaterThanTime:
        :type greaterThanTime:
        :param lessThanTime:
        :type lessThanTime:
        """
        return self._dllwrap.ConfigurePatternTrigger(
            self._vi, patternValue, triggerCondition, greaterThanTime, lessThanTime
        )

    def ConfigureCANBus(self, busName, source, baudRate, signal):
        """

        :param busName:
        :type busName:
        :param source:
        :type source:
        :param baudRate:
        :type baudRate:
        :param signal:
        :type signal:
        """
        return self._dllwrap.ConfigureCANBus(self._vi, busName, source, baudRate, signal)

    def ConfigureCANTrigger(self, busName, trigger, dataLength, patternData, idType, idValue):
        """

        :param busName:
        :type busName:
        :param trigger:
        :type trigger:
        :param dataLength:
        :type dataLength:
        :param patternData:
        :type patternData:
        :param idType:
        :type idType:
        :param idValue:
        :type idValue:
        """
        return self._dllwrap.ConfigureCANTrigger(self._vi, busName, trigger, dataLength, patternData, idType, idValue)

    def ConfigureGeneratorAmplitude(self, settingStyle, amplitude, offset, highLevel, lowLevel, loadImpendance):
        """

        :param settingStyle:
        :type settingStyle:
        :param amplitude:
        :type amplitude:
        :param offset:
        :type offset:
        :param highLevel:
        :type highLevel:
        :param lowLevel:
        :type lowLevel:
        :param loadImpendance:
        :type loadImpendance:
        """
        return self._dllwrap.ConfigureGeneratorAmplitude(
            self._vi, settingStyle, amplitude, offset, highLevel, lowLevel, loadImpendance
        )

    def ConfigureGenAmpMultiChan(
        self,
        WaveGenChannel,
        settingStyle,
        amplitude,
        offset,
        highLevel,
        lowLevel,
        loadImpendance,
    ):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param settingStyle:
        :type settingStyle:
        :param amplitude:
        :type amplitude:
        :param offset:
        :type offset:
        :param highLevel:
        :type highLevel:
        :param lowLevel:
        :type lowLevel:
        :param loadImpendance:
        :type loadImpendance:
        """
        return self._dllwrap.ConfigureGenAmpMultiChan(
            self._vi,
            WaveGenChannel,
            settingStyle,
            amplitude,
            offset,
            highLevel,
            lowLevel,
            loadImpendance,
        )

    def ConfigureWaveform(
        self,
        functionType,
        settingSytle,
        period,
        frequency,
        symmetry,
        dutyCycle,
        pulseWidth,
    ):
        """

        :param functionType:
        :type functionType:
        :param settingSytle:
        :type settingSytle:
        :param period:
        :type period:
        :param frequency:
        :type frequency:
        :param symmetry:
        :type symmetry:
        :param dutyCycle:
        :type dutyCycle:
        :param pulseWidth:
        :type pulseWidth:
        """
        return self._dllwrap.ConfigureWaveform(
            self._vi,
            functionType,
            settingSytle,
            period,
            frequency,
            symmetry,
            dutyCycle,
            pulseWidth,
        )

    def ConfigureWaveformMultiChan(
        self,
        WaveGenChannel,
        functionType,
        settingSytle,
        period,
        frequency,
        symmetry,
        dutyCycle,
        pulseWidth,
    ):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param functionType:
        :type functionType:
        :param settingSytle:
        :type settingSytle:
        :param period:
        :type period:
        :param frequency:
        :type frequency:
        :param symmetry:
        :type symmetry:
        :param dutyCycle:
        :type dutyCycle:
        :param pulseWidth:
        :type pulseWidth:
        """
        return self._dllwrap.ConfigureWaveformMultiChan(
            self._vi,
            WaveGenChannel,
            functionType,
            settingSytle,
            period,
            frequency,
            symmetry,
            dutyCycle,
            pulseWidth,
        )

    def EnableGeneratorOutput(self, enableOutput):
        """

        :param enableOutput:
        :type enableOutput:
        """
        return self._dllwrap.EnableGeneratorOutput(self._vi, enableOutput)

    def EnableGenOutputMultiChan(self, Wave_Gen_Channel, enableOutput):
        """

        :param Wave_Gen_Channel:
        :type Wave_Gen_Channel:
        :param enableOutput:
        :type enableOutput:
        """
        return self._dllwrap.EnableGenOutputMultiChan(self._vi, Wave_Gen_Channel, enableOutput)

    def ReadWaveform(self, channel, waveformSize, maxTime):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadWaveform(self._vi, channel, waveformSize, maxTime)

    def InitiateAcquisition(self):
        """"""
        return self._dllwrap.InitiateAcquisition(self._vi)

    def AcquisitionStatus(self):
        """"""
        return self._dllwrap.AcquisitionStatus(self._vi)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def FetchEfficiency(self):
        """"""
        return self._dllwrap.FetchEfficiency(self._vi)

    def FetchRipple(self):
        """"""
        return self._dllwrap.FetchRipple(self._vi)

    def FetchWaveform(self, channel, waveformSize):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchWaveform(self._vi, channel, waveformSize)

    def ReadEfficiency(self):
        """"""
        return self._dllwrap.ReadEfficiency(self._vi)

    def ReadRipple(self):
        """"""
        return self._dllwrap.ReadRipple()

    def ReadMinMaxWaveform(self, channel, waveformSize, maxTime):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadMinMaxWaveform(self._vi, channel, waveformSize, maxTime)

    def FetchMinMaxWaveform(self, channel, waveformSize):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchMinMaxWaveform(self._vi, channel, waveformSize)

    def ConfigureUSBTriggerSource(self, trigger, speed, dPlus, dMinus):
        """

        :param trigger:
        :type trigger:
        :param speed:
        :type speed:
        :param dPlus:
        :type dPlus:
        :param dMinus:
        :type dMinus:
        """
        return self._dllwrap.ConfigureUSBTriggerSource(self._vi, trigger, speed, dPlus, dMinus)

    def ConfigureMeasSource(self, source1, source2):
        """

        :param source1:
        :type source1:
        :param source2:
        :type source2:
        """
        return self._dllwrap.ConfigureMeasSource(self._vi, source1, source2)

    def ConfigureMeasurementDelay(self, edgeSpec1, edgeSpec2):
        """

        :param edgeSpec1:
        :type edgeSpec1:
        :param edgeSpec2:
        :type edgeSpec2:
        """
        return self._dllwrap.ConfigureMeasurementDelay(self._vi, edgeSpec1, edgeSpec2)

    def ConfigureRefLevels(self, lowRef, midRef, highRef):
        """

        :param lowRef:
        :type lowRef:
        :param midRef:
        :type midRef:
        :param highRef:
        :type highRef:
        """
        return self._dllwrap.ConfigureRefLevels(self._vi, lowRef, midRef, highRef)

    def ReadWaveformMeasurement(self, channel, measurementFunction, maxTime):
        """

        :param channel:
        :type channel:
        :param measurementFunction:
        :type measurementFunction:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadWaveformMeasurement(self._vi, channel, measurementFunction, maxTime)

    def FetchWaveformMeasurement(self, channel, measurementFunction):
        """

        :param channel:
        :type channel:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.FetchWaveformMeasurement(self._vi, channel, measurementFunction)

    def ConfigureUARTBus(self, busName, baudRate, bitOrder, frameTerminateValue, parity, polarity, bitCount):
        """

        :param busName:
        :type busName:
        :param baudRate:
        :type baudRate:
        :param bitOrder:
        :type bitOrder:
        :param frameTerminateValue:
        :type frameTerminateValue:
        :param parity:
        :type parity:
        :param polarity:
        :type polarity:
        :param bitCount:
        :type bitCount:
        """
        return self._dllwrap.ConfigureUARTBus(
            self._vi,
            busName,
            baudRate,
            bitOrder,
            frameTerminateValue,
            parity,
            polarity,
            bitCount,
        )

    def ConfigureUARTBusSource(self, busName, rxSource, txSource):
        """

        :param busName:
        :type busName:
        :param rxSource:
        :type rxSource:
        :param txSource:
        :type txSource:
        """
        return self._dllwrap.ConfigureUARTBusSource(self._vi, busName, rxSource, txSource)

    def ConfigureUARTTrigger(self, busName, triggerType, triggerCondition, triggerData, burstValue, idlePeriod):
        """

        :param busName:
        :type busName:
        :param triggerType:
        :type triggerType:
        :param triggerCondition:
        :type triggerCondition:
        :param triggerData:
        :type triggerData:
        :param burstValue:
        :type burstValue:
        :param idlePeriod:
        :type idlePeriod:
        """
        return self._dllwrap.ConfigureUARTTrigger(
            self._vi,
            busName,
            triggerType,
            triggerCondition,
            triggerData,
            burstValue,
            idlePeriod,
        )

    def AutoSetup(self):
        """"""
        return self._dllwrap.AutoSetup(self._vi)

    def IsInvalidWfmElement(self, elementValue):
        """

        :param elementValue:
        :type elementValue:
        """
        return self._dllwrap.IsInvalidWfmElement(self._vi, elementValue)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def GetError(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def GetNextInterchangeWarning(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """

        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def GetAttributeViInt32(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName, attribute, bufSize):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param bufSize:
        :type bufSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)

    def IviInit(self, resourceName, IDQuery, reset):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param reset:
        :type reset:
        """
        return self._dllwrap.IviInit(resourceName, IDQuery, reset, self._vi)

    def IviClose(self):
        """"""
        return self._dllwrap.IviClose(self._vi)

    def ConfigureSignalSource(
        self,
        CurrentFirstSource,
        CurrentSecondSource,
        VoltageFirstSource,
        VoltageSecondSource,
    ):
        """

        :param CurrentFirstSource:
        :type CurrentFirstSource:
        :param CurrentSecondSource:
        :type CurrentSecondSource:
        :param VoltageFirstSource:
        :type VoltageFirstSource:
        :param VoltageSecondSource:
        :type VoltageSecondSource:
        """
        return self._dllwrap.ConfigureSignalSource(
            self._vi,
            CurrentFirstSource,
            CurrentSecondSource,
            VoltageFirstSource,
            VoltageSecondSource,
        )

    def AutoSetupPowerSignal(self, PowerAnalysisType):
        """

        :param PowerAnalysisType:
        :type PowerAnalysisType:
        """
        return self._dllwrap.AutoSetupPowerSignal(self._vi, PowerAnalysisType)

    def ApplyPowerQuality(self):
        """"""
        return self._dllwrap.ApplyPowerQuality(self._vi)

    def ApplyPowerSLEW(self):
        """"""
        return self._dllwrap.ApplyPowerSLEW(self._vi)

    def ConfigurePowerSLEWSource(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigurePowerSLEWSource(self._vi, Source)

    def ApplyPowerRipple(self):
        """"""
        return self._dllwrap.ApplyPowerRipple(self._vi)

    def ConfigurePowerQuality(self, QualityType):
        """

        :param QualityType:
        :type QualityType:
        """
        return self._dllwrap.ConfigurePowerQuality(self._vi, QualityType)

    def ApplyPowerOnOff(self):
        """"""
        return self._dllwrap.ApplyPowerOnOff(self._vi)

    def ApplyPowerPSRR(self):
        """"""
        return self._dllwrap.ApplyPowerPSRR(self._vi)

    def ConfigurePowerPSRR(self, FreqMax, FreqMin, MaxRatioValue):
        """

        :param FreqMax:
        :type FreqMax:
        :param FreqMin:
        :type FreqMin:
        :param MaxRatioValue:
        :type MaxRatioValue:
        """
        return self._dllwrap.ConfigurePowerPSRR(self._vi, FreqMax, FreqMin, MaxRatioValue)

    def ConfigurePowerSignal(
        self,
        SignalCycles,
        SignalDuration,
        SignalInrushExpected,
        SignalOvershoot,
        MaxExpectedVoltage,
        SteadyStateVoltage,
    ):
        """

        :param SignalCycles:
        :type SignalCycles:
        :param SignalDuration:
        :type SignalDuration:
        :param SignalInrushExpected:
        :type SignalInrushExpected:
        :param SignalOvershoot:
        :type SignalOvershoot:
        :param MaxExpectedVoltage:
        :type MaxExpectedVoltage:
        :param SteadyStateVoltage:
        :type SteadyStateVoltage:
        """
        return self._dllwrap.ConfigurePowerSignal(
            self._vi,
            SignalCycles,
            SignalDuration,
            SignalInrushExpected,
            SignalOvershoot,
            MaxExpectedVoltage,
            SteadyStateVoltage,
        )

    def StopPowerOnOff(self):
        """"""
        return self._dllwrap.StopPowerOnOff(self._vi)

    def NextPowerOnOff(self):
        """"""
        return self._dllwrap.NextPowerOnOff(self._vi)

    def ApplyPowerInrush(self):
        """"""
        return self._dllwrap.ApplyPowerInrush(self._vi)

    def ApplyPowerModulation(self):
        """"""
        return self._dllwrap.ApplyPowerModulation(self._vi)

    def ConfigurePowerModulation(self, ModulationSource, ModulationType):
        """

        :param ModulationSource:
        :type ModulationSource:
        :param ModulationType:
        :type ModulationType:
        """
        return self._dllwrap.ConfigurePowerModulation(self._vi, ModulationSource, ModulationType)

    def StopPowerInrush(self):
        """"""
        return self._dllwrap.StopPowerInrush(self._vi)

    def NextPowerInrush(self):
        """"""
        return self._dllwrap.NextPowerInrush(self._vi)

    def ConfigurePowerHarmonics(self, DisplayStyle, FreqSettingLine, Standard):
        """

        :param DisplayStyle:
        :type DisplayStyle:
        :param FreqSettingLine:
        :type FreqSettingLine:
        :param Standard:
        :type Standard:
        """
        return self._dllwrap.ConfigurePowerHarmonics(self._vi, DisplayStyle, FreqSettingLine, Standard)

    def ApplyPowerEfficiency(self):
        """"""
        return self._dllwrap.ApplyPowerEfficiency(self._vi)

    def ApplyPowerHarmonics(self):
        """"""
        return self._dllwrap.ApplyPowerHarmonics(self._vi)

    def EnablePowerAnalysis(self, PowerAnalysisEnabled):
        """

        :param PowerAnalysisEnabled:
        :type PowerAnalysisEnabled:
        """
        return self._dllwrap.EnablePowerAnalysis(self._vi, PowerAnalysisEnabled)

    def LaunchAutoDeskew(self):
        """"""
        return self._dllwrap.LaunchAutoDeskew(self._vi)

    def ApplyPowerSwitch(self):
        """"""
        return self._dllwrap.ApplyPowerSwitch(self._vi)

    def ConfigurePowerSwitch(
        self,
        SwitchConduction,
        CurrentSwitchPercent,
        VoltageSwitchPercent,
        SwitchRDS,
        SwitchVCE,
    ):
        """

        :param SwitchConduction:
        :type SwitchConduction:
        :param CurrentSwitchPercent:
        :type CurrentSwitchPercent:
        :param VoltageSwitchPercent:
        :type VoltageSwitchPercent:
        :param SwitchRDS:
        :type SwitchRDS:
        :param SwitchVCE:
        :type SwitchVCE:
        """
        return self._dllwrap.ConfigurePowerSwitch(
            self._vi,
            SwitchConduction,
            CurrentSwitchPercent,
            VoltageSwitchPercent,
            SwitchRDS,
            SwitchVCE,
        )

    def ApplyPowerTransient(self):
        """"""
        return self._dllwrap.ApplyPowerTransient(self._vi)

    def StopPowerTransient(self):
        """"""
        return self._dllwrap.StopPowerTransient(self._vi)

    def NextPowerTransient(self):
        """"""
        return self._dllwrap.NextPowerTransient(self._vi)

    def ConfigurePowerTransient(self, InitCurrent, NewCurrent):
        """

        :param InitCurrent:
        :type InitCurrent:
        :param NewCurrent:
        :type NewCurrent:
        """
        return self._dllwrap.ConfigurePowerTransient(self._vi, InitCurrent, NewCurrent)

    def ConfigureSearchSerialA429(self, Label, Mode, PatternData, PatternSDI, PatternSSM):
        """

        :param Label:
        :type Label:
        :param Mode:
        :type Mode:
        :param PatternData:
        :type PatternData:
        :param PatternSDI:
        :type PatternSDI:
        :param PatternSSM:
        :type PatternSSM:
        """
        return self._dllwrap.ConfigureSearchSerialA429(self._vi, Label, Mode, PatternData, PatternSDI, PatternSSM)

    def ConfigureSearchSerialFlexray(self, Cycle, Mode, Data, FrameID, DataLength):
        """

        :param Cycle:
        :type Cycle:
        :param Mode:
        :type Mode:
        :param Data:
        :type Data:
        :param FrameID:
        :type FrameID:
        :param DataLength:
        :type DataLength:
        """
        return self._dllwrap.ConfigureSearchSerialFlexray(self._vi, Cycle, Mode, Data, FrameID, DataLength)

    def ConfigureSearchSerialM1553(self, Mode, PatternData, RemoteTerminalAddress):
        """

        :param Mode:
        :type Mode:
        :param PatternData:
        :type PatternData:
        :param RemoteTerminalAddress:
        :type RemoteTerminalAddress:
        """
        return self._dllwrap.ConfigureSearchSerialM1553(self._vi, Mode, PatternData, RemoteTerminalAddress)

    def RecallDataFromFile(self, FileName, StartColumn):
        """

        :param FileName:
        :type FileName:
        :param StartColumn:
        :type StartColumn:
        """
        return self._dllwrap.RecallDataFromFile(self._vi, FileName, StartColumn)

    def ConfigureMeasureStatistics(self, DeviationEnabled, MaxStatisticsNumber):
        """

        :param DeviationEnabled:
        :type DeviationEnabled:
        :param MaxStatisticsNumber:
        :type MaxStatisticsNumber:
        """
        return self._dllwrap.ConfigureMeasureStatistics(self._vi, DeviationEnabled, MaxStatisticsNumber)

    def ConfigureDemoFunction(self, DemoFunction):
        """

        :param DemoFunction:
        :type DemoFunction:
        """
        return self._dllwrap.ConfigureDemoFunction(self._vi, DemoFunction)

    def ForceTrigger(self):
        """"""
        return self._dllwrap.ForceTrigger(self._vi)

    def ConfigureTriggerDelay(self, ArmSlope, ArmSource, DelayTime, TriggerCount, TriggerSlope, TriggerSource):
        """

        :param ArmSlope:
        :type ArmSlope:
        :param ArmSource:
        :type ArmSource:
        :param DelayTime:
        :type DelayTime:
        :param TriggerCount:
        :type TriggerCount:
        :param TriggerSlope:
        :type TriggerSlope:
        :param TriggerSource:
        :type TriggerSource:
        """
        return self._dllwrap.ConfigureTriggerDelay(
            self._vi,
            ArmSlope,
            ArmSource,
            DelayTime,
            TriggerCount,
            TriggerSlope,
            TriggerSource,
        )

    def ConfigureTriggerPattern(self, Format, Qualifier, GreaterThan, LessThan):
        """

        :param Format:
        :type Format:
        :param Qualifier:
        :type Qualifier:
        :param GreaterThan:
        :type GreaterThan:
        :param LessThan:
        :type LessThan:
        """
        return self._dllwrap.ConfigureTriggerPattern(self._vi, Format, Qualifier, GreaterThan, LessThan)

    def ConfigureTriggerTV(self, UDTVEnumber, UDTVHsyncEnabled, UDTVHtime, UDTVPGHtime):
        """

        :param UDTVEnumber:
        :type UDTVEnumber:
        :param UDTVHsyncEnabled:
        :type UDTVHsyncEnabled:
        :param UDTVHtime:
        :type UDTVHtime:
        :param UDTVPGHtime:
        :type UDTVPGHtime:
        """
        return self._dllwrap.ConfigureTriggerTV(self._vi, UDTVEnumber, UDTVHsyncEnabled, UDTVHtime, UDTVPGHtime)

    def SaveArbitraryWave(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.SaveArbitraryWave(self._vi, fileName)

    def SavePowerAnalysis(self, fileName):
        """

        :param fileName:
        :type fileName:
        """
        return self._dllwrap.SavePowerAnalysis(self._vi, fileName)

    def EnableSaveMaxWave(self, SaveMaxWaveEnabled):
        """

        :param SaveMaxWaveEnabled:
        :type SaveMaxWaveEnabled:
        """
        return self._dllwrap.EnableSaveMaxWave(self._vi, SaveMaxWaveEnabled)

    def AutoSetupA429(self, busName):
        """

        :param busName:
        :type busName:
        """
        return self._dllwrap.AutoSetupA429(self._vi, busName)

    def AutoSetupFlexray(self, busName):
        """

        :param busName:
        :type busName:
        """
        return self._dllwrap.AutoSetupFlexray(self._vi, busName)

    def AutoSetupM1553(self, busName):
        """

        :param busName:
        :type busName:
        """
        return self._dllwrap.AutoSetupM1553(self._vi, busName)

    def ResetSBusA429(self, busName):
        """

        :param busName:
        :type busName:
        """
        return self._dllwrap.ResetSBusA429(self._vi, busName)

    def ResetSBusFlexray(self, busName):
        """

        :param busName:
        :type busName:
        """
        return self._dllwrap.ResetSBusFlexray(self._vi, busName)

    def ConfigureSBusA429(self, BusName, Base, Format, Signal, Source, SignalSpeed):
        """

        :param BusName:
        :type BusName:
        :param Base:
        :type Base:
        :param Format:
        :type Format:
        :param Signal:
        :type Signal:
        :param Source:
        :type Source:
        :param SignalSpeed:
        :type SignalSpeed:
        """
        return self._dllwrap.ConfigureSBusA429(self._vi, BusName, Base, Format, Signal, Source, SignalSpeed)

    def ConfigureSBusFlexray(self, BusName, Baudrate, Channel, Source):
        """

        :param BusName:
        :type BusName:
        :param Baudrate:
        :type Baudrate:
        :param Channel:
        :type Channel:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureSBusFlexray(self._vi, BusName, Baudrate, Channel, Source)

    def ConfigureSBusA429Trigger(
        self,
        busName,
        triggerLabel,
        triggerPatternData,
        triggerPatternSDI,
        triggerPatternSSM,
        triggerType,
        triggerRangeMin,
        triggerRangeMax,
    ):
        """

        :param busName:
        :type busName:
        :param triggerLabel:
        :type triggerLabel:
        :param triggerPatternData:
        :type triggerPatternData:
        :param triggerPatternSDI:
        :type triggerPatternSDI:
        :param triggerPatternSSM:
        :type triggerPatternSSM:
        :param triggerType:
        :type triggerType:
        :param triggerRangeMin:
        :type triggerRangeMin:
        :param triggerRangeMax:
        :type triggerRangeMax:
        """
        return self._dllwrap.ConfigureSBusA429Trigger(
            self._vi,
            busName,
            triggerLabel,
            triggerPatternData,
            triggerPatternSDI,
            triggerPatternSSM,
            triggerType,
            triggerRangeMin,
            triggerRangeMax,
        )

    def ConfigureSBusM1553(self, BusName, Base, Source, TriggerRTA, TriggerPatternData, TriggerType):
        """

        :param BusName:
        :type BusName:
        :param Base:
        :type Base:
        :param Source:
        :type Source:
        :param TriggerRTA:
        :type TriggerRTA:
        :param TriggerPatternData:
        :type TriggerPatternData:
        :param TriggerType:
        :type TriggerType:
        """
        return self._dllwrap.ConfigureSBusM1553(
            self._vi, BusName, Base, Source, TriggerRTA, TriggerPatternData, TriggerType
        )

    def ConfigureMarkerXCursorUnit(self, XCursorUnit, ResetXCursorLocation):
        """

        :param XCursorUnit:
        :type XCursorUnit:
        :param ResetXCursorLocation:
        :type ResetXCursorLocation:
        """
        return self._dllwrap.ConfigureMarkerXCursorUnit(self._vi, XCursorUnit, ResetXCursorLocation)

    def ConfigureMarkerYCursorUnit(self, YCursorUnit, ResetYCursorLocation):
        """

        :param YCursorUnit:
        :type YCursorUnit:
        :param ResetYCursorLocation:
        :type ResetYCursorLocation:
        """
        return self._dllwrap.ConfigureMarkerYCursorUnit(self._vi, YCursorUnit, ResetYCursorLocation)

    def ConfigureModulationNoise(self, byteOrder, interpolateEnabled, noisePercent):
        """

        :param byteOrder:
        :type byteOrder:
        :param interpolateEnabled:
        :type interpolateEnabled:
        :param noisePercent:
        :type noisePercent:
        """
        return self._dllwrap.ConfigureModulationNoise(self._vi, byteOrder, interpolateEnabled, noisePercent)

    def ConfigureModNoiseMultiChan(self, WaveGenChannel, ByteOrder, NoisePercent):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param ByteOrder:
        :type ByteOrder:
        :param NoisePercent:
        :type NoisePercent:
        """
        return self._dllwrap.ConfigureModNoiseMultiChan(self._vi, WaveGenChannel, ByteOrder, NoisePercent)

    def ConfigureRefSignalType(self, ReferenceSignalMode):
        """

        :param ReferenceSignalMode:
        :type ReferenceSignalMode:
        """
        return self._dllwrap.ConfigureRefSignalType(self._vi, ReferenceSignalMode)

    def ConfigureDigitalVoltmeter(self, AutoRange, EnableDVM, DVMMode, DVMAnalogSource):
        """

        :param AutoRange:
        :type AutoRange:
        :param EnableDVM:
        :type EnableDVM:
        :param DVMMode:
        :type DVMMode:
        :param DVMAnalogSource:
        :type DVMAnalogSource:
        """
        return self._dllwrap.ConfigureDigitalVoltmeter(self._vi, AutoRange, EnableDVM, DVMMode, DVMAnalogSource)

    def ReadDigitalVoltmeter(self):
        """"""
        return self._dllwrap.ReadDigitalVoltmeter(self._vi)

    def ConfigureFunAverageNumber(self, FunctionChannel, NumberAverages):
        """

        :param FunctionChannel:
        :type FunctionChannel:
        :param NumberAverages:
        :type NumberAverages:
        """
        return self._dllwrap.ConfigureFunAverageNumber(self._vi, FunctionChannel, NumberAverages)

    def ConfigureSelectedFunction(self, FunctionChannel, VerticalAxis, ReferenceLevel):
        """

        :param FunctionChannel:
        :type FunctionChannel:
        :param VerticalAxis:
        :type VerticalAxis:
        :param ReferenceLevel:
        :type ReferenceLevel:
        """
        return self._dllwrap.ConfigureSelectedFunction(self._vi, FunctionChannel, VerticalAxis, ReferenceLevel)

    def ConfigureMarkerUnits(self, Dimension):
        """

        :param Dimension:
        :type Dimension:
        """
        return self._dllwrap.ConfigureMarkerUnits(self._vi, Dimension)

    def ReadQualityPowerAnalysis(self):
        """"""
        return self._dllwrap.ReadQualityPowerAnalysis(self._vi)

    def ReadCurrentValue(self):
        """"""
        return self._dllwrap.ReadCurrentValue(self._vi)

    def ClearMeasurementsMarkers(self):
        """"""
        return self._dllwrap.ClearMeasurementsMarkers(self._vi)

    def ReadSwitchLossPowerAnalysis(self):
        """"""
        return self._dllwrap.ReadSwitchLossPowerAnalysis(self._vi)

    def ReadEfficiencyPowerAnalysis(self):
        """"""
        return self._dllwrap.ReadEfficiencyPowerAnalysis(self._vi)

    def ReadOnOffTime(self):
        """"""
        return self._dllwrap.ReadOnOffTime(self._vi)

    def ConfigureStatisticsType(self, MeasureInformationType):
        """

        :param MeasureInformationType:
        :type MeasureInformationType:
        """
        return self._dllwrap.ConfigureStatisticsType(self._vi, MeasureInformationType)

    def ReadDisplayedMeasurements(self, ResultLength):
        """

        :param ResultLength:
        :type ResultLength:
        """
        return self._dllwrap.ReadDisplayedMeasurements(self._vi, ResultLength)

    def ReadPowerHarmonics(self, DataLength):
        """

        :param DataLength:
        :type DataLength:
        """
        return self._dllwrap.ReadPowerHarmonics(self._vi, DataLength)

    def ReadHarmonicsPowerAnalysis(self):
        """"""
        return self._dllwrap.ReadHarmonicsPowerAnalysis(self._vi)

    def ConfigurePowerCycleCount(self, HarmonicsCycleCount, QualityCycleCount):
        """

        :param HarmonicsCycleCount:
        :type HarmonicsCycleCount:
        :param QualityCycleCount:
        :type QualityCycleCount:
        """
        return self._dllwrap.ConfigurePowerCycleCount(self._vi, HarmonicsCycleCount, QualityCycleCount)

    def ConfigurePowerDuration(
        self,
        EfficiencyDuration,
        ModulationDuration,
        TurnOffDuration,
        TurnOnDuration,
        RippleDuration,
        TransientDuration,
    ):
        """

        :param EfficiencyDuration:
        :type EfficiencyDuration:
        :param ModulationDuration:
        :type ModulationDuration:
        :param TurnOffDuration:
        :type TurnOffDuration:
        :param TurnOnDuration:
        :type TurnOnDuration:
        :param RippleDuration:
        :type RippleDuration:
        :param TransientDuration:
        :type TransientDuration:
        """
        return self._dllwrap.ConfigurePowerDuration(
            self._vi,
            EfficiencyDuration,
            ModulationDuration,
            TurnOffDuration,
            TurnOnDuration,
            RippleDuration,
            TransientDuration,
        )

    def ConfigurePowerVoltage(
        self,
        InrushMaxVoltage,
        TurnOffMaxVoltage,
        TurnOnMaxVoltage,
        TurnOffSteadyVoltage,
        TurnOnSteadyVoltage,
        TransientSteadyVoltage,
    ):
        """

        :param InrushMaxVoltage:
        :type InrushMaxVoltage:
        :param TurnOffMaxVoltage:
        :type TurnOffMaxVoltage:
        :param TurnOnMaxVoltage:
        :type TurnOnMaxVoltage:
        :param TurnOffSteadyVoltage:
        :type TurnOffSteadyVoltage:
        :param TurnOnSteadyVoltage:
        :type TurnOnSteadyVoltage:
        :param TransientSteadyVoltage:
        :type TransientSteadyVoltage:
        """
        return self._dllwrap.ConfigurePowerVoltage(
            self._vi,
            InrushMaxVoltage,
            TurnOffMaxVoltage,
            TurnOnMaxVoltage,
            TurnOffSteadyVoltage,
            TurnOnSteadyVoltage,
            TransientSteadyVoltage,
        )

    def ConfigurePowerInrushCurrent(self, InrushCurrentAmplitude):
        """

        :param InrushCurrentAmplitude:
        :type InrushCurrentAmplitude:
        """
        return self._dllwrap.ConfigurePowerInrushCurrent(self._vi, InrushCurrentAmplitude)

    def ReadSBusA429(self):
        """"""
        return self._dllwrap.ReadSBusA429(self._vi)

    def ConfigureA429TriggerRange(self, BusName, A429TriggerRange):
        """

        :param BusName:
        :type BusName:
        :param A429TriggerRange:
        :type A429TriggerRange:
        """
        return self._dllwrap.ConfigureA429TriggerRange(self._vi, BusName, A429TriggerRange)

    def ReadSBusFlexray(self):
        """"""
        return self._dllwrap.ReadSBusFlexray(self._vi)

    def ConfigureFlexTriggerType(self, BusName, FlexrayTriggerMode):
        """

        :param BusName:
        :type BusName:
        :param FlexrayTriggerMode:
        :type FlexrayTriggerMode:
        """
        return self._dllwrap.ConfigureFlexTriggerType(self._vi, BusName, FlexrayTriggerMode)

    def ConfigureUSBTriggerSource2(self, BusName, Speed, D_Plus, D_Minus):
        """

        :param BusName:
        :type BusName:
        :param Speed:
        :type Speed:
        :param D_Plus:
        :type D_Plus:
        :param D_Minus:
        :type D_Minus:
        """
        return self._dllwrap.ConfigureUSBTriggerSource2(self._vi, BusName, Speed, D_Plus, D_Minus)

    def ConfigureUSBTriggerType(self, BusName, TriggerType):
        """

        :param BusName:
        :type BusName:
        :param TriggerType:
        :type TriggerType:
        """
        return self._dllwrap.ConfigureUSBTriggerType(self._vi, BusName, TriggerType)

    def ConfigureUSBPortion(
        self,
        BusName,
        AddressPortion,
        CRCPortion,
        DataPortion,
        DataLength,
        EndpointPortion,
    ):
        """

        :param BusName:
        :type BusName:
        :param AddressPortion:
        :type AddressPortion:
        :param CRCPortion:
        :type CRCPortion:
        :param DataPortion:
        :type DataPortion:
        :param DataLength:
        :type DataLength:
        :param EndpointPortion:
        :type EndpointPortion:
        """
        return self._dllwrap.ConfigureUSBPortion(
            self._vi,
            BusName,
            AddressPortion,
            CRCPortion,
            DataPortion,
            DataLength,
            EndpointPortion,
        )

    def ConfigureUSBPortionAdvanced(
        self,
        BusName,
        ETPortion,
        FramePortion,
        HubAddressPortion,
        PidCheckPortion,
        PortPortion,
        SCPortion,
        SEUPortion,
    ):
        """

        :param BusName:
        :type BusName:
        :param ETPortion:
        :type ETPortion:
        :param FramePortion:
        :type FramePortion:
        :param HubAddressPortion:
        :type HubAddressPortion:
        :param PidCheckPortion:
        :type PidCheckPortion:
        :param PortPortion:
        :type PortPortion:
        :param SCPortion:
        :type SCPortion:
        :param SEUPortion:
        :type SEUPortion:
        """
        return self._dllwrap.ConfigureUSBPortionAdvanced(
            self._vi,
            BusName,
            ETPortion,
            FramePortion,
            HubAddressPortion,
            PidCheckPortion,
            PortPortion,
            SCPortion,
            SEUPortion,
        )

    def ConfigureUSBPID(self, BusName, DataPid, HandshakePid, SpecialPid, TokenPid):
        """

        :param BusName:
        :type BusName:
        :param DataPid:
        :type DataPid:
        :param HandshakePid:
        :type HandshakePid:
        :param SpecialPid:
        :type SpecialPid:
        :param TokenPid:
        :type TokenPid:
        """
        return self._dllwrap.ConfigureUSBPID(self._vi, BusName, DataPid, HandshakePid, SpecialPid, TokenPid)

    def ConfigureUSBNormal(self, BusName, UsbBase, UsbDifferentialSource):
        """

        :param BusName:
        :type BusName:
        :param UsbBase:
        :type UsbBase:
        :param UsbDifferentialSource:
        :type UsbDifferentialSource:
        """
        return self._dllwrap.ConfigureUSBNormal(self._vi, BusName, UsbBase, UsbDifferentialSource)

    def ConfigureSearchUSBType(self, SearchType):
        """

        :param SearchType:
        :type SearchType:
        """
        return self._dllwrap.ConfigureSearchUSBType(self._vi, SearchType)

    def ConfigureSearchUSBPortion(self, AddressPortion, CRCPortion, DataPortion, DataLength, EndpointPortion):
        """

        :param AddressPortion:
        :type AddressPortion:
        :param CRCPortion:
        :type CRCPortion:
        :param DataPortion:
        :type DataPortion:
        :param DataLength:
        :type DataLength:
        :param EndpointPortion:
        :type EndpointPortion:
        """
        return self._dllwrap.ConfigureSearchUSBPortion(
            self._vi, AddressPortion, CRCPortion, DataPortion, DataLength, EndpointPortion
        )

    def ConfigureSearchUSBPortionAd(
        self,
        ETPortion,
        FramePortion,
        HubAddressPortion,
        PortPortion,
        SCPortion,
        SEUPortion,
    ):
        """

        :param ETPortion:
        :type ETPortion:
        :param FramePortion:
        :type FramePortion:
        :param HubAddressPortion:
        :type HubAddressPortion:
        :param PortPortion:
        :type PortPortion:
        :param SCPortion:
        :type SCPortion:
        :param SEUPortion:
        :type SEUPortion:
        """
        return self._dllwrap.ConfigureSearchUSBPortionAd(
            self._vi,
            ETPortion,
            FramePortion,
            HubAddressPortion,
            PortPortion,
            SCPortion,
            SEUPortion,
        )

    def ConfigureSearchUSBPID(self, DataPid, HandshakePid, SpecialPid, TokenPid):
        """

        :param DataPid:
        :type DataPid:
        :param HandshakePid:
        :type HandshakePid:
        :param SpecialPid:
        :type SpecialPid:
        :param TokenPid:
        :type TokenPid:
        """
        return self._dllwrap.ConfigureSearchUSBPID(self._vi, DataPid, HandshakePid, SpecialPid, TokenPid)

    def ConfigureArbWaveformData(self, WaveGenChannel, ArbData, ArbDacData, PointsCount):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param ArbData:
        :type ArbData:
        :param ArbDacData:
        :type ArbDacData:
        :param PointsCount:
        :type PointsCount:
        """
        return self._dllwrap.ConfigureArbWaveformData(self._vi, WaveGenChannel, ArbData, ArbDacData, PointsCount)

    def ClearArbWaveformData(self, WaveGenChannel):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        """
        return self._dllwrap.ClearArbWaveformData(self._vi, WaveGenChannel)

    def StoreArbWaveform(self, WaveGenChannel, Source):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param Source:
        :type Source:
        """
        return self._dllwrap.StoreArbWaveform(self._vi, WaveGenChannel, Source)

    def ConfigureModulationAM(self, WaveGenChannel, DepthPercent, WaveformFrequency):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param DepthPercent:
        :type DepthPercent:
        :param WaveformFrequency:
        :type WaveformFrequency:
        """
        return self._dllwrap.ConfigureModulationAM(self._vi, WaveGenChannel, DepthPercent, WaveformFrequency)

    def ConfigureModulationFM(self, WaveGenChannel, Deviation, Frequency):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param Deviation:
        :type Deviation:
        :param Frequency:
        :type Frequency:
        """
        return self._dllwrap.ConfigureModulationFM(self._vi, WaveGenChannel, Deviation, Frequency)

    def ConfigureModulationFSKey(self, WaveGenChannel, Frequency, Rate):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param Frequency:
        :type Frequency:
        :param Rate:
        :type Rate:
        """
        return self._dllwrap.ConfigureModulationFSKey(self._vi, WaveGenChannel, Frequency, Rate)

    def ConfigureModulationFunction(self, WaveGenChannel, SignalShape, RampSymmetry):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param SignalShape:
        :type SignalShape:
        :param RampSymmetry:
        :type RampSymmetry:
        """
        return self._dllwrap.ConfigureModulationFunction(self._vi, WaveGenChannel, SignalShape, RampSymmetry)

    def ConfigureModulationState(self, WaveGenChannel, EnableModulatedWaveform):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param EnableModulatedWaveform:
        :type EnableModulatedWaveform:
        """
        return self._dllwrap.ConfigureModulationState(self._vi, WaveGenChannel, EnableModulatedWaveform)

    def ConfigureModulationType(self, WaveGenChannel, ModulationType):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param ModulationType:
        :type ModulationType:
        """
        return self._dllwrap.ConfigureModulationType(self._vi, WaveGenChannel, ModulationType)

    def ConfigureGeneratorTracking(
        self,
        WaveGenChannel,
        EnableTracking,
        EnableAmplitudeTracking,
        EnableFrequencyTracking,
        SetIdentical,
    ):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param EnableTracking:
        :type EnableTracking:
        :param EnableAmplitudeTracking:
        :type EnableAmplitudeTracking:
        :param EnableFrequencyTracking:
        :type EnableFrequencyTracking:
        :param SetIdentical:
        :type SetIdentical:
        """
        return self._dllwrap.ConfigureGeneratorTracking(
            self._vi,
            WaveGenChannel,
            EnableTracking,
            EnableAmplitudeTracking,
            EnableFrequencyTracking,
            SetIdentical,
        )

    def ConfigureGeneratorInverted(self, WaveGenChannel, OutputPolarity):
        """

        :param WaveGenChannel:
        :type WaveGenChannel:
        :param OutputPolarity:
        :type OutputPolarity:
        """
        return self._dllwrap.ConfigureGeneratorInverted(self._vi, WaveGenChannel, OutputPolarity)

    def ConfigureInterpolation(self, InterpolationMethod):
        """

        :param InterpolationMethod:
        :type InterpolationMethod:
        """
        return self._dllwrap.ConfigureInterpolation(self._vi, InterpolationMethod)

    def ConfigureInterpolationByChannel(self, waveGenChannel, InterpolationMethod):
        """

        :param waveGenChannel:
        :type waveGenChannel:
        :param InterpolationMethod:
        :type InterpolationMethod:
        """
        return self._dllwrap.ConfigureInterpolationByChannel(self._vi, waveGenChannel, InterpolationMethod)
