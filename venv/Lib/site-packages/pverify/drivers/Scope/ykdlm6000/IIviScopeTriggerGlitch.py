# -------------------------------------------------------------------------------
# Name           :
# Description    :
#
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
from __future__ import annotations

from pverify.drivers.Scope.ykdlm6000 import IIviScopeBase


class IIviScopeTriggerGlitch(IIviScopeBase.IIviScopeBase):
    def __init__(self, interface):
        IIviScopeBase.IIviScopeBase.__init__(self, interface)
        self._Source = None

    # Read-write dependent properties
    @property
    def condition(self):
        """
        The condition of a pulse that triggers the oscilloscope. The condition
        is either inside or outside of the high and low thresholds.

        :rtype: IviScopeGlitchConditionEnum
        """
        ret = self.interface.vi_query(":TRIG:WIDT:MODE?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeGlitchConditionEnum, ret)

    @condition.setter
    def condition(self, value):
        """
        The condition of a pulse that triggers the oscilloscope. The condition
        is either inside or outside of the high and low thresholds.

        :type value: IviScopeGlitchConditionEnum
        """
        cmd = self.Enums.IviScopeGlitchConditionEnum[value.name]
        self.interface.vi_write(f":TRIG:WIDT:MODE {cmd.value}")
        self.GetError()

    @property
    def polarity(self):
        """
        The polarity of the pulse that triggers the oscilloscope.

        :rtype: IviScopeGlitchPolarityEnum
        """
        ret = self.interface.vi_query(":TRIG:EDGE:POL?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeGlitchPolarityEnum, ret)

    @polarity.setter
    def polarity(self, value):
        """
        The polarity of the pulse that triggers the oscilloscope.

        :type value: IviScopeGlitchPolarityEnum
        """
        windowEnabled = self.interface.vi_query(":TRIG:SOUR:CHAN%d:WIND?" % self._Source, rformat="%d")
        if not windowEnabled and value in [
            self.Enums.IviScopeGlitchPolarityEnum.IviScopeGlitchPolarityNegative,
            self.Enums.IviScopeGlitchPolarityEnum.IviScopeGlitchPolarityPositive,
        ]:
            cmd = self.Enums.IviScopeGlitchPolarityEnum[value.name]
            self.interface.vi_write(f":TRIG:WIDT:POL {cmd.value}")
        self.GetError()

    @property
    def Width(self):
        """
        The glitch width. The units are seconds.
        """
        ret = self.interface.vi_query(":TRIG:WIDT:TIME1?", rformat="%f\n")
        self.GetError()
        return ret

    @Width.setter
    def Width(self, value):
        """
        The glitch width. The units are seconds.
        """
        self.interface.vi_write(f":TRIG:WIDT:TIME1 {value:.3E}")
        self.GetError()

    # Methods
    def Configure(self, Source, Level, Width, Polarity, Condition):
        """
        Configure the glitch trigger Source, Level, Width, Polarity, and
        Condition. A glitch trigger occurs when the edge of a pulse that
        matches the Width and Polarity crosses the specified Level (in Volts).

        :param Source:
            Specifies the trigger source. This value sets the Trigger Source
            property.

        :param Level:
            Specifies the trigger level. This value sets the Trigger Level
            property.

        :param Width:
            Specifies the glitch triggering glitch width in seconds. This value
            sets the Glitch Width property.

        :param Polarity:
            Specifies the glitch polarity. This value sets the Glitch Polarity
            property.

        :param Condition:
            Specifies the glitch condition. This value sets the Glitch Condition
            property.
        """
        if Polarity in [
            self.Enums.IviScopeGlitchPolarityEnum.IviScopeGlitchPolarityPositive,
            self.Enums.IviScopeGlitchPolarityEnum.IviScopeGlitchPolarityNegative,
        ]:
            if (int(Source) >= 1) and (int(Source) <= 8):
                self.interface.vi_write(":TRIG:WIDT:SOUR %d" % Source)
                self._updateSource(Source)
            else:
                raise IndexError("Channel '%d' does not exist." % Source)
            self.polarity = Polarity
            self.Width = Width
            self.condition = Condition
            self.interface.vi_write(f":TRIG:EDGE:LEV {Level:f}")

        else:
            msg = "Polarity has to be either IviScopeGlitchPolarityPositive or IviScopeGlitchPolarityNegative."
            raise TypeError(msg)

    def _updateSource(self, Source):
        self._Source = Source
