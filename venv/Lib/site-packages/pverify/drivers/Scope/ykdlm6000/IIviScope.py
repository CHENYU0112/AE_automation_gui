from __future__ import annotations

import logging
import sys

from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper
from pverify.drivers.BaseInstrument import InstrumentError

from . import (
    IIviDriverIdentity,
    IIviDriverOperation,
    IIviDriverUtility,
    IIviScopeAcquisition,
    IIviScopeBase,
    IIviScopeChannels,
    IIviScopeMeasurements,
    IIviScopeReferenceLevel,
    IIviScopeTrigger,
)

DEBUG = False


class IIviScope(IVICOMDriverWrapper, IIviScopeBase.IIviScopeBase):
    """IVI Scope class-compliant root interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        Acquisition
            Pointer to the class-compliant IIviScopeAcquisition interface
        Channels
            Pointer to the class-compliant IIviScopeChannels interface
        measurements
            Pointer to the class-compliant IIviScopeMeasurements interface
        ReferenceLevel
            Pointer to the class-compliant IIviScopeReferenceLevel interface
        Trigger
            Pointer to the class-compliant IIviScopeTrigger interface

        interface
            Specific for instrument connection via VISA.
            Provides interface for wrapped VISA library.

    Methods:
        Initialize(self, ResourceName, IdQuery=1, Reset=1, OptionString="Calibrate=True"):
            Opens the I/O session to the instrument. Driver methods and properties
            that access the instrument are only accessible after Initialize is called.
            Initialize optionally performs a Reset and queries the instrument to
            validate the instrument model.

        Close(self)
            Closes the I/O session to the instrument.
            Driver methods and properties that access the
            instrument are not accessible after Close is called.
    """

    def __init__(self, logger: logging.Logger | None = None):
        IVICOMDriverWrapper.__init__(self, ivi_compliant=True)
        self._debug_mode = DEBUG
        self.IDN = ""

        if isinstance(logger, logging.Logger):
            self._log = logger
        else:
            self._log = logging.getLogger(self.__class__.__name__)
            if len(self._log.handlers) == 0:  # only add streamhandler if none exists
                formatter = logging.Formatter(fmt="[%(levelname)-8s] -> %(message)s")
                console_handler = logging.StreamHandler(sys.stdout)
                console_handler.setFormatter(formatter)
                self._log.addHandler(console_handler)
            if self._debug_mode:
                self._log.setLevel(logging.DEBUG)
            else:
                self._log.setLevel(logging.INFO)

        from pverify.drivers.BaseInstrument import BaseVisaInstrument

        self.interface = BaseVisaInstrument()
        self.__Initialized = False
        IIviScopeBase.IIviScopeBase.__init__(self, self.interface, self._log)
        self.Acquisition = IIviScopeAcquisition.IIviScopeAcquisition(self)

        self.Channels = IIviScopeChannels.IIviScopeChannels(self)

        self.Measurements = IIviScopeMeasurements.IIviScopeMeasurements(self)

        self.ReferenceLevel = IIviScopeReferenceLevel.IIviScopeReferenceLevel(self)

        self.Trigger = IIviScopeTrigger.IIviScopeTrigger(self)

        self.DriverOperation = IIviDriverOperation.IIviDriverOperation(self)

        self.Identity = IIviDriverIdentity.IIviDriverIdentity(self)

        self.Utility = IIviDriverUtility.IIviDriverUtility(self)

    # Read only dependent properties
    @property
    def Initialized(self):
        """
        Initialized is True between a successful call to the Initialize method
        and a successful call to the Close method, and False at all other
        times.
        """
        return self.__Initialized

    @property
    def drivername(self):
        return "YK_DLM6054"

    # Methods
    def Initialize(self, ResourceName, IdQuery=1, Reset=1, OptionString="Calibrate=True"):
        """
        Opens the I/O session to the instrument. Driver methods and properties
        that access the instrument are only accessible after Initialize is
        called. Initialize optionally performs a Reset and queries the
        instrument to validate the instrument model.

        :param ResourceName:
            An IVI logical name or an instrument specific string that identifies
            the address of the instrument, such as a VISA resource descriptor
            string.
        :type ResourceName: str

        :param IdQuery:
            Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool

        :param Reset:
            Specifies whether to reset the instrument.
            :type Reset: bool

        :param OptionString:
            Provides additional functionality for the initialization process.
            - "Calibrate=[True|False]"
                Performs a calibration of the scope after initialization.
        :type OptionString: str
        """
        self.interface.ResourceName = ResourceName
        self.interface.vi_open()
        self.__Initialized = True

        try:
            self.GetError()
        except InstrumentError as ie:
            if self._log is not None:
                self._log.debug(
                    f"Suppressed errors:\n\tDescription: {ie}, Status: {ie.errorID}",
                    exc_info=False,
                )

        if True:
            ret = self.interface.vi_query("*IDN?")
            ret = ret.strip()
            self.IDN = ret
            if ret.find("YOKOGAWA,DLM6") == -1:
                self.__Initialized = False
                self.interface.vi_close()
                msg = "ykdlm6000: Cant't find '{}' in the returned IDN string '{}'".format(ret, "YOKOGAWA,DLM6")
                raise ValueError(msg)
            try:
                self.GetError()
            except InstrumentError as ie:
                if self._log is not None:
                    self._log.debug(
                        f"Suppressed errors:\n\tDescription: {ie}, Status: {ie.errorID}",
                        exc_info=False,
                    )
        if Reset:
            self.Utility.Reset()
            self.interface.vi_write(":CHAN1:DISP OFF")
            self.interface.vi_write(":CHAN2:DISP OFF")
            self.interface.vi_write(":CHAN3:DISP OFF")
            self.interface.vi_write(":CHAN4:DISP OFF")
            self.GetError()

        self.interface.vi_write(":COMM:HEAD OFF")
        self.interface.vi_write(":DISP:ACC:MODE OFF")
        self.interface.vi_write(":COMM:VERB OFF")
        self.interface.vi_write(":MEAS:MODE BASIC")
        self.interface.vi_write(":MEAS:TRAN1 -5,5;TRAN2 -5,5")
        if OptionString.upper().find("CALIBRATE=FALSE") == -1:
            self.interface.vi_write(":CAL:EXEC")  # Execute calibration
        self.interface.vi_write(":CAL:MODE OFF")  # Disable auto-calibration
        self.GetError()

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and
        properties that access the instrument are not accessible after Close
        is called.
        """
        if self.__Initialized:
            self.__Initialized = False
            try:
                self.interface.vi_write(":COMM:REM OFF")
            finally:
                self.interface.vi_close()

    def GetScreenshot(self, LocalFilepath):
        self.interface.vi_write(":IMAG:TONE COL;FORM JPEG")
        self.interface.vi_write(":IMAG:SEND?")
        ret = self.interface.vi_read_raw()
        PictureData = ret[int(ret[1]) + 2 : -1]
        with open(LocalFilepath, "wb") as fobj:
            fobj.write(PictureData)
