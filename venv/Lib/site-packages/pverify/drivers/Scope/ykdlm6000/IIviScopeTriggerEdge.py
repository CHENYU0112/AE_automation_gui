# -------------------------------------------------------------------------------
# Name           :
# Description    :
#
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
from __future__ import annotations

from pverify.drivers.Scope.ykdlm6000 import IIviScopeBase


class IIviScopeTriggerEdge(IIviScopeBase.IIviScopeBase):
    """IVI Scope class-compliant edge trigger interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        Slope [String] [rw]
            The slope, a rising or a falling edge, that triggers the oscilloscope.
            Values:
                "IviScopeTriggerSlopeNegative"
                "IviScopeTriggerSlopePositive"

        *HFRejection [String] [rw]
            Status of the trigger source low-pass filter (HF rejection) for edge triggering.
            Values:
                'IviScopeTriggerHFRejectionOff'
                'IviScopeTriggerHFRejection15kHz'
                'IviScopeTriggerHFRejection20MHz'

        *Hysteresis [String] [rw]
            Noise rejection setting for the edge trigger source trigger level.
            Values:
                "IviScopeTriggerHysteresisLow"
                "IviScopeTriggerHysteresisHigh"

    Methods:
        Configure(Source, Level, Slope)
            Configures the conidtions for edge trigger. An edge trigger occurs
            when the trigger source signal passes through the trigger level with
            the specified slope.

    """

    def __init__(self, interface):
        IIviScopeBase.IIviScopeBase.__init__(self, interface)
        self._Source = None

    # Read-write dependent properties
    @property
    def Slope(self):
        """
        The slope, a rising or a falling edge, that triggers the oscilloscope.

        :rtype:IviScopeTriggerSlopeEnum
        """
        ret = self.interface.vi_query(":TRIG:EDGE:SLOP?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeTriggerSlopeEnum, ret)

    @Slope.setter
    def Slope(self, value):
        """
        The slope, a rising or a falling edge, that triggers the oscilloscope.

        :type value: IviScopeTriggerSlopeEnum
        """
        windowEnabled = self.interface.vi_query(":TRIG:EDGE:WIND?", rformat="%d")
        if (
            windowEnabled
            and value
            in [
                self.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopeEnter,
                self.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopeLeave,
            ]
            or not windowEnabled
            and value
            in [
                self.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopePositive,
                self.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopeNegative,
            ]
        ):
            self.interface.vi_write(f":TRIG:EDGE:SLOP {value.value}")
            self.GetError()
        else:
            msg = "You can only use Positive/Negative for normal triggering and Enter/Leave for window triggering."
            raise ValueError(msg)

    @property
    def Source(self):
        """
        The signal the oscilloscope monitors for a trigger. It can be channel
        or one of many other values.
        """
        ret = self.interface.vi_query(":TRIG:EDGE:SOUR?", rformat="%d\n")
        self.GetError()
        return ret

    @Source.setter
    def Source(self, value):
        """
        The signal the oscilloscope monitors for a trigger. It can be channel
        or one of many other values.
        """
        if str(value).lower in ("ext", "line"):
            self.interface.vi_write(f":TRIG:SIMP:SOUR {value}")
        elif (int(value) >= 1) and (int(value) <= 8):
            self.interface.vi_write(":TRIG:SIMP:SOUR %d" % value)
        else:
            msg = "Unknown trigger source!"
            raise IndexError(msg)
        self.GetError()

    @property
    def Level(self):
        """
        The voltage threshold for the trigger subsystem. The units are volts.
        """
        ret = self.interface.vi_query(":TRIG:EDGE:LEV?", rformat="%f\n")
        self.GetError()
        return ret

    @Level.setter
    def Level(self, value):
        """
        The voltage threshold for the trigger subsystem. The units are volts.
        """
        self.interface.vi_write(f":TRIG:EDGE:LEV {value:.3E}")
        self.GetError()

    @property
    def Hysteresis(self):
        """
        Noise rejection setting for the edge trigger source trigger level.

        :rtype: IviScopeTriggerHysteresisEnum
        """
        if not self._Source:
            msg = "Set the trigger source before setting other properties."
            raise Exception(msg)
        ret = self.interface.vi_query(f":TRIG:SOUR:CHAN{self._Source}:HYST?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeTriggerHysteresisEnum, ret)

    @Hysteresis.setter
    def Hysteresis(self, value):
        """
        Noise rejection setting for the edge trigger source trigger level.

        :type value: IviScopeTriggerHysteresisEnum
        """
        if not self._Source:
            msg = "Set the trigger source before setting other properties."
            raise Exception(msg)
        self.interface.vi_write(f":TRIG:SOUR:CHAN{self._Source}:HYST {value.value}")
        self.GetError()

    @property
    def HFRejection(self):
        """
        Status of the trigger source low-pass filter (HF rejection) for edge triggering.

        :rtype: IviScopeTriggerHFRejectionEnum
        """
        if not self._Source:
            msg = "Set the trigger source before setting other properties."
            raise Exception(msg)
        ret = self.interface.vi_query(f":TRIG:SOUR:CHAN{self._Source}:HFR?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeTriggerHFRejectionEnum, ret)

    @HFRejection.setter
    def HFRejection(self, value):
        """
        Status of the trigger source low-pass filter (HF rejection) for edge triggering.
        :type value: IviScopeTriggerHFRejectionEnum
        """
        if not self._Source:
            msg = "Set the trigger source before setting other properties."
            raise Exception(msg)
        self.interface.vi_write(f":TRIG:SOUR:CHAN{self._Source}:HFR {value.value}")
        self.GetError()

    # Methods
    def Configure(self, Source, Level, Slope):
        """
        Configures the conidtions for edge trigger. An edge trigger occurs
        when the trigger source signal passes through the trigger level with
        the specified slope.

        :param Source: Specifies the trigger source. This value sets the Trigger Sourceproperty.
        :type Source: int
        :param Level: Specifies the trigger level. This value sets the Trigger Level property.
        :type Level: float
        :param Slope: Specifies the trigger slope. This value sets the Trigger Slope property.
        :type Slope: IviScopeTriggerSlopeEnum
        """
        # Set source
        self.Source = Source

        # Set level
        self.Level = Level

        # Set slope
        self.Slope = Slope

    def ConfigureWindow(self, Source, Level, WindowWidth, Slope, Enabled=True):
        """
        NON-COMPLIANCE FUNCTION
        Configures the edge trigger source window.

        :param Source: Specifies the trigger source. This value sets the Trigger Sourceproperty.
        :type Source: int
        :param Level: The center of the trigger window.
        :type Level: float
        :param WindowWidth: The window width in volt/ampere the trigger scans.
        :type WindowWidth: float
        :param Slope: Defines triggered on entering or leaving the window.
            Only use with IviScopeTriggerSlopeEnter or IviScopeTriggerSlopeLeave.
        :type Slope: IviScopeTriggerSlopeEnum
        :param Enabled: Enables/Disables the window function.
        :type Enabled: bool
        """
        # Enable/Disable window
        if Enabled:
            if (Slope == self.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopeEnter) or (
                Slope == self.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopeLeave
            ):
                self.interface.vi_write(":TRIG:EDGE:WIND ON")

                # Set source
                if (Source >= 1) and (Source <= 8):
                    self.interface.vi_write(":TRIG:EDGE:SOUR %d" % Source)
                    self._updateSource(Source)
                else:
                    raise IndexError("Channel '%d' does not exist." % Source)

                # Set level
                self.interface.vi_write(f":TRIG:EDGE:LEV {Level:.3E}")

                # Set window width
                self.interface.vi_write(f":TRIG:EDGE:WIDT {WindowWidth:.3E}")

                # Set slope
                self.Slope = Slope
            else:
                msg = "Slope has to be either IviScopeTriggerSlopeEnter or IviScopeTriggerSlopeLeave enum."
                raise TypeError(msg)
        else:
            self.interface.vi_write(":TRIG:EDGE:WIND OFF")

    def _updateSource(self, Source):
        self._Source = Source
