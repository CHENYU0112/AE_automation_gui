# -------------------------------------------------------------------------------
# Name           :
# Description    :
#
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
from __future__ import annotations

import time

from pverify.drivers.Scope.ykdlm6000 import (
    IIviScopeBase,
    IIviScopeTriggerEdge,
    IIviScopeTriggerGlitch,
    IIviScopeTriggerWidth,
)


class IIviScopeTrigger(IIviScopeBase.IIviScopeBase):
    """IVI Scope class-compliant trigger interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        #AcLine
            Pointer to the class-compliant IIviScopeTriggerAcLine interface
        Edge
            Pointer to the class-compliant IIviScopeTriggerEdge interface
        Glitch
            Pointer to the class-compliant IIviScopeTriggerGlitch interface
        #Runt
            Pointer to the class-compliant IIviScopeTriggerRunt interface
        #TV
            Pointer to the class-compliant IIviScopeTriggerTv interface
        Width
            Pointer to the class-compliant IIviScopeTriggerWidth interface

        #Continuous [Boolean] [rw]
            If True, the oscilloscope waits trigger holdoff seconds after a
            waveform acquisition is complete and then immediatley enters the
            wait for trigger state without passing through the idle state.

        Coupling [String] [rw]
            How the oscilloscope couples the trigger source.

        Level [Float] [rw]
            The voltage threshold for the trigger subsystem. The units are volts.
            Use with float value.

        Modifier [String] [rw]
            The trigger modifier determines the oscilloscope's behavior in the absence of a trigger.

        Source [Int] [rw]
            The signal the oscilloscope monitors for a trigger.
            It can be channel or one of many other values.
            Values: 1-8

        Holdoff [Float] [rw]
            The length of time the oscilloscope waits after it fills the
            acquisition buffer until the oscilloscope enables the trigger
            subsystem to detect another trigger. The units are seconds.
            Use with float value.

        Type [String] [rw]
            The kind of event that triggers the osciolloscope.

        *Position [Float] [rw]
            Horizontal position of the trigger
            Use with float value.

    Methods:
        Configure
            Configures trigger Type and Holdoff. Holdoff units are seconds.



    """

    def __init__(self, parent):
        self.parent = parent
        if False:
            from .IIviScope import IIviScope

            self.parent = IIviScope()
        IIviScopeBase.IIviScopeBase.__init__(self, self.parent.interface)

        self.Edge = IIviScopeTriggerEdge.IIviScopeTriggerEdge(self.interface)
        self.Glitch = IIviScopeTriggerGlitch.IIviScopeTriggerGlitch(self.interface)
        self.Width = IIviScopeTriggerWidth.IIviScopeTriggerWidth(self.interface)

        self.__Continuous = True

    @property
    def Continuous(self):
        """
        If True, the oscilloscope waits trigger holdoff seconds after a
        waveform acquisition is complete and then immediatley enters the wait
        for trigger state without passing through the idle state.
        """
        return self.__Continuous

    @Continuous.setter
    def Continuous(self, value):
        """
        If True, the oscilloscope waits trigger holdoff seconds after a
        waveform acquisition is complete and then immediatley enters the wait
        for trigger state without passing through the idle state.
        """
        self.__Continuous = bool(value)

    @property
    def Coupling(self):
        """
        How the oscilloscope couples the trigger source.

        :rtype: IviScopeTriggerCouplingEnum
        """
        ret = self.interface.vi_query(":TRIG:EDGE:COUP?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeTriggerCouplingEnum, ret)

    @Coupling.setter
    def Coupling(self, value):
        """
        How the oscilloscope couples the trigger source.

        :type value: IviScopeTriggerCouplingEnum
        """
        self.interface.vi_write(f":TRIG:EDGE:COUP {value.value}")
        self.GetError()

    @property
    def Level(self):
        """
        The voltage threshold for the trigger subsystem. The units are volts.

        :rtype: float
        """
        ret = self.interface.vi_query(":TRIG:EDGE:LEV?", rformat="%f\n")
        self.GetError()
        return ret

    @Level.setter
    def Level(self, value):
        """
        The voltage threshold for the trigger subsystem. The units are volts.

        :type value: float
        """
        self.interface.vi_write(f":TRIG:EDGE:LEV {value:.3E}")
        self.GetError()

    @property
    def Modifier(self):
        """
        The trigger modifier determines the oscilloscope's behavior in the absence of a trigger.

        :rtype: IviScopeTriggerModifierEnum
        """
        ret = self.interface.vi_query(":TRIG:MODE?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeTriggerModifierEnum, ret)

    @Modifier.setter
    def Modifier(self, value):
        """
        The trigger modifier determines the oscilloscope's behavior in the absence of a trigger.

        :type value: IviScopeTriggerModifierEnum
        """
        self.interface.vi_write(f":TRIG:MODE {value.value}")
        self.GetError()

    @property
    def Source(self):
        """
        The signal the oscilloscope monitors for a trigger.

        :rtype: int
        """
        ret = self.interface.vi_query(":TRIG:EDGE:SOUR?", rformat="%d\n")
        self.Edge._updateSource(ret)
        self.Width._updateSource(ret)
        self.Glitch._updateSource(ret)
        self.GetError()
        return ret

    @Source.setter
    def Source(self, value):
        """
        The signal the oscilloscope monitors for a trigger. It can be channel or one of many other values.

        :type value: int
        """
        if (value >= 1) and (value <= 4):
            self.interface.vi_write(":TRIG:EDGE:SOUR %d" % value)
            self.Edge._updateSource(value)
            self.Width._updateSource(value)
            self.Glitch._updateSource(value)
        else:
            raise IndexError("Channel '%d' does not exist." % value)
        self.GetError()

    @property
    def Holdoff(self):
        """
        The length of time the oscilloscope waits after it fills the
        acquisition buffer until the oscilloscope enables the trigger
        subsystem to detect another trigger. The units are seconds.

        :rtype: float
        """
        ret = self.interface.vi_query(":TRIG:HOLD?", rformat="%f\n")
        self.GetError()
        return ret

    @Holdoff.setter
    def Holdoff(self, value):
        """
        The length of time the oscilloscope waits after it fills the
        acquisition buffer until the oscilloscope enables the trigger
        subsystem to detect another trigger. The units are seconds.

        :type value: float
        """
        self.interface.vi_write(f":TRIG:HOLD {value:.3E}")
        self.GetError()

    @property
    def Type(self):
        """
        The kind of event that triggers the osciolloscope.

        :rtype: IviScopeTriggerTypeEnum
        """
        ret = self.interface.vi_query(":TRIG:TYPE?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeTriggerTypeEnum, ret)

    @Type.setter
    def Type(self, value):
        """
        The kind of event that triggers the osciolloscope.

        :type value: IviScopeTriggerTypeEnum
        """
        self.interface.vi_write(f":TRIG:TYPE {value.value}")
        self.GetError()

    @property
    def Position(self):
        """
        Horizontal position of the trigger in percent.

        :rtype: float
        """
        ret = self.interface.vi_query(":TRIG:POS?", rformat="%f\n")
        self.GetError()
        return ret

    @Position.setter
    def Position(self, value):
        """
        Horizontal position of the trigger in percent.

        :type value: float
        """
        self.interface.vi_write(f":TRIG:POS {value:.3E}")
        self.GetError()

    # Methods
    def Configure(self, Type, Holdoff):
        """
        Configures trigger Type and Holdoff. Holdoff units are seconds.

        :param Type: Specifies the trigger type. This value sets the Trigger Type property.
        :type Type: IviScopeTriggerTypeEnum

        :param Holdoff: Specifies the trigger hold-off. This value sets the Trigger Holdoff property.
        :type Holdoff: float
        """
        self.Type = Type
        self.Holdoff = Holdoff

    def ForceTrigger(self):
        """
        Forces the scope to trigger.
        """
        tpr = self.parent.Acquisition.TimePerRecord
        trigpos = self.Position / 100.0
        sleep_dur = (1.0 - trigpos) * tpr + 1.0
        self.interface.vi_write(":TRIG:FORC")
        self.GetError()
        time.sleep(sleep_dur)
