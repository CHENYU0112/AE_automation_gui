# -------------------------------------------------------------------------------
# Name           :
# Description    :
#
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
from __future__ import annotations

from pverify.drivers.Scope.ykdlm6000 import IIviScopeBase
from pverify.drivers.Scope.ykdlm6000.IIviScopeMeasurement import IIviScopeMeasurement


class IIviScopeMeasurements(IIviScopeBase.IIviScopeBase):
    """IVI Scope class-compliant measurement collection interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Methods:
        Item
            An interface reference pointer to one of the IviScopeMeasurement
            interfaces which is selected by the channel name.

        Count
            The number of measurements.

        Name
            The channel name for given index.

        Initiate
            Initiates a waveform acquisition.
            The oscilloscope leaves the Idle state and waits for a trigger.
            The oscilloscope acquires a waveform for each enabled channel.

        Abort
            Aborts an acquisition and returns the oscilloscope to the Idle state.

        AutoSetup
            Automatically configures all the oscilloscopes settings based on the input signals.

        Status
            Returns whether an acquisition is in progress, complete.
            Returns
                "IviScopeAcqInProgress" or "IviScopeAcqComplete"
    """

    def __init__(self, parent):
        self.parent = parent
        if False:
            from .IIviScope import IIviScope

            self.parent = IIviScope()
        IIviScopeBase.IIviScopeBase.__init__(self, self.parent.interface)
        self.__channels = {
            "C1": IIviScopeMeasurement(self.interface, "1"),
            "C2": IIviScopeMeasurement(self.interface, "2"),
            "C3": IIviScopeMeasurement(self.interface, "3"),
            "C4": IIviScopeMeasurement(self.interface, "4"),
            "MATH1": IIviScopeMeasurement(self.interface, "MATH1"),
            "MATH2": IIviScopeMeasurement(self.interface, "MATH2"),
            "MATH3": IIviScopeMeasurement(self.interface, "MATH3"),
            "MATH4": IIviScopeMeasurement(self.interface, "MATH4"),
        }

        # Read only dependent properties

    @property
    def Count(self):
        """
        The number of measurements.
        """
        raise NotImplementedError

    # Methods
    def Initiate(self):
        """
        Initiates a waveform acquisition. The oscilloscope leaves the Idle state and waits for a trigger.
        The oscilloscope acquires a waveform for each enabled channel.
        """
        self.interface.vi_query(":SST? 0")
        self.GetError()

    def Abort(self):
        """
        Aborts an acquisition and returns the oscilloscope to the Idle state.
        """
        self.interface.vi_write(":STOP")
        self.GetError()

    def AutoSetup(self):
        """
        Automatically configures all the oscilloscopes settings based on the input signals.
        """
        self.interface.vi_write(":ASET:EXEC")
        self.GetError()

    def Status(self):
        """
        Returns whether an acquisition is in progress or complete.

        :rtype: IviScopeAcquisitionStatusEnum
        """
        ret = self.interface.vi_query(":SST? -1", rformat="%d\n")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeAcquisitionStatusEnum, ret)

    def Item(self, Name):
        """
        Returns a pointer to a measurement object.

        :param Name: Channel name: "C1", "C2", "C3", "C4", "MATH1", "MATH2", "MATH3", "MATH4"
        :type Name: int
        :rtype: IIviScopeMeasurement
        """
        return self.__channels[str(Name)]

    def Name(self, Index):
        """
        Returns the name of a channel.

        :param Index:
            Valid values are between one and the value of the Channel Count property.
            If the user passes an invalid value for the Index parameter, the value of this property is an empty string
        :type Index: int
        """
        if isinstance(Index, int) and 1 <= Index <= 8:
            return ["C1", "C2", "C3", "C4", "MATH1", "MATH2", "MATH3", "MATH4"][Index - 1]
        else:
            msg = "ykdlm6000: Channel index exceeds the limits 1-8"
            raise IndexError(msg)

    def ConfigureMath(self, MathChannel, Expression, Unit="EU"):
        """
        NON-COMPLIANCE FUNCTION.
        Configures a user-defined math function.

        :param MathChannel: The math channel index (1-4)
        :type MathChannel: int
        :param Expression: The expression for the user defined math function
        :type Expression: str
        """
        if 1 <= MathChannel <= 4:
            self.interface.vi_write(":MATH%d:SEL MATH" % MathChannel)
            self.interface.vi_write(':MATH%d:USER:DEF "%s"' % (MathChannel, Expression))
            self.interface.vi_write(":MATH%d:OPER USER" % MathChannel)
            self.interface.vi_write(":MATH%d:UNIT:MODE USER" % MathChannel)
            self.interface.vi_write(':MATH%d:UNIT:DEF "%s"' % (MathChannel, Unit.upper()))
            self.GetError()
