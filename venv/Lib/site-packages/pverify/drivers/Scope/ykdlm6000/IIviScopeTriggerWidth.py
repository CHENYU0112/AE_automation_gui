# -------------------------------------------------------------------------------
# Name           :
# Description    :
#
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
from __future__ import annotations

from pverify.drivers.Scope.ykdlm6000 import IIviScopeBase


class IIviScopeTriggerWidth(IIviScopeBase.IIviScopeBase):
    def __init__(self, interface):
        IIviScopeBase.IIviScopeBase.__init__(self, interface)
        self._Source = None

    # Read-write dependent properties
    @property
    def condition(self):
        """
        The condition of a pulse that triggers the oscilloscope. The condition
        is either inside or outside of the high and low thresholds.

        :rtype: IviScopeWidthConditionEnum
        """
        ret = self.interface.vi_query(":TRIG:WIDT:MODE?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeWidthConditionEnum, ret)

    @condition.setter
    def condition(self, value):
        """
        The condition of a pulse that triggers the oscilloscope. The condition
        is either inside or outside of the high and low thresholds.

        :type value: IviScopeWidthConditionEnum
        """
        cmd = self.Enums.IviScopeWidthConditionEnum[value.name]
        self.interface.vi_write(f":TRIG:WIDT:MODE {cmd.value}")
        self.GetError()

    @property
    def polarity(self):
        """
        The polarity of the pulse that triggers the oscilloscope.

        :rtype: IviScopeWidthPolarityEnum
        """
        ret = self.interface.vi_query(":TRIG:WIDT:POL?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeWidthPolarityEnum, ret)

    @polarity.setter
    def polarity(self, value):
        """
        The polarity of the pulse that triggers the oscilloscope.

        :type value: IviScopeWidthPolarityEnum
        """
        windowEnabled = self.interface.vi_query(":TRIG:SOUR:CHAN%d:WIND?" % self._Source, rformat="%d")
        if not windowEnabled and value in [
            self.Enums.IviScopeWidthPolarityEnum.IviScopeWidthPolarityNegative,
            self.Enums.IviScopeWidthPolarityEnum.IviScopeWidthPolarityPositive,
        ]:
            cmd = self.Enums.IviScopeWidthPolarityEnum[value.name]
            self.interface.vi_write(f":TRIG:WIDT:POL {cmd.value}")
        self.GetError()

    @property
    def ThresholdLow(self):
        """
        The low width threshold time. The units are seconds.

        :rtype: float
        """
        ret = self.interface.vi_query(":TRIG:WIDT:TIME1?", rformat="%f\n")
        self.GetError()
        return ret

    @ThresholdLow.setter
    def ThresholdLow(self, value):
        """
        The low width threshold time. The units are seconds.

        :type value: float
        """
        self.interface.vi_write(f":TRIG:WIDT:TIME1 {value:.3E}")
        self.GetError()

    @property
    def ThresholdHigh(self):
        """
        The high width threshold time. The units are seconds.

        :rtype: float
        """
        ret = self.interface.vi_query(":TRIG:WIDT:TIME2?", rformat="%f\n")
        self.GetError()
        return ret

    @ThresholdHigh.setter
    def ThresholdHigh(self, value):
        """
        The high width threshold time. The units are seconds.

        :type value: float
        """
        self.interface.vi_write(f":TRIG:WIDT:TIME2 {value:.3E}")
        self.GetError()

    @property
    def Source(self):
        """
        The signal the oscilloscope monitors for a trigger.

        :rtype: int
        """
        ret = self.interface.vi_query(":TRIG:PULS:SOUR?", rformat="%d\n")
        self.GetError()
        return int(ret)

    @Source.setter
    def Source(self, value):
        """
        The signal the oscilloscope monitors for a trigger.

        :param value: Channel number to use as trigger source.
        :type value: int
        """
        self.interface.vi_write(":TRIG:WIDT:COND FALS")
        if (int(value) >= 1) and (int(value) <= 8):
            self.interface.vi_write(":TRIG:PULS:SOUR %d" % value)
            self._updateSource(value)
        else:
            raise IndexError("Channel '%d' does not exist." % value)
        self.GetError()

    # Methods
    def Configure(self, Source, Level, ThresholdLow, ThresholdHigh, Polarity, Condition):
        """
        Configures the width trigger Source, Level, ThresholdLow,
        ThresholdHigh, Polarity, and Condition. A width trigger occurs when a
        pulse, that passes through Level, with a width between or outside, the
        width thresholds is detected.

        :param Source:
            The signal the oscilloscope monitors for a trigger.
        :type Source: int

        :param Level:
            Trigger Level. This value sets the Trigger Level property.
        :type Level: float

        :param ThresholdLow:
            Sets the width triggering low threshold in seconds. This value sets
            the Width Low Threshold property.
        :type ThresholdLow: float

        :param ThresholdHigh:
            Sets the width triggering high threshold in seconds. This value sets
            the Width High Threshold property.
        :type ThresholdHigh: float

        :param Polarity:
            Sets the width polarity. This value sets the Width Polarity property.
        :type Polarity: IviScopeWidthPolarityEnum

        :param Condition:
            Specifies whether a pulse that is within or outside the user-specified
            thresholds trigger waveform acquisition. This value sets the Width
            Condition property.
        :type Condition: IviScopeWidthConditionEnum
        """
        if Polarity in [
            self.Enums.IviScopeWidthPolarityEnum.IviScopeWidthPolarityNegative,
            self.Enums.IviScopeWidthPolarityEnum.IviScopeWidthPolarityPositive,
        ]:
            self.interface.vi_write(":TRIG:WIDT:COND FALS")
            if (int(Source) >= 1) and (int(Source) <= 8):
                self.interface.vi_write(":TRIG:WIDT:SOUR %d" % Source)
                self._updateSource(Source)
            else:
                raise IndexError("Channel '%d' does not exist." % Source)
            self.polarity = Polarity
            self.ThresholdLow = ThresholdLow
            if Condition == self.Enums.IviScopeWidthConditionEnum.IviScopeWidthConditionTimeout:
                self.ThresholdHigh = ThresholdLow
            else:
                self.ThresholdHigh = ThresholdHigh
            self.condition = Condition
            self.interface.vi_write(f":TRIG:EDGE:LEV {Level:f}")

        else:
            msg = "Polarity has to be either IviScopeWidthPolarityNegative or IviScopeWidthPolarityPositive."
            raise TypeError(msg)

    def _updateSource(self, Source):
        self._Source = int(Source)
