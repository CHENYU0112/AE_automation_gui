# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
IVI Scope class-compliant acquisition interface.
"""

from __future__ import annotations

from pverify.drivers.Scope.ykdlm6000 import IIviScopeBase


class IIviScopeAcquisition(IIviScopeBase.IIviScopeBase):
    """IVI Scope class-compliant acquisition interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        NumberOfAverages [Int] [rw]
            The number of waveforms the oscilloscope acquires and
            averages before returning to the idle state.

        NumberOfEnvelopes [Int] [rw]
            The number of waveforms the oscilloscope acquires and analyzes to
            create the minimum and maximum waveforms, before returning to the
            idle state. Applies only when acquisition Type is Envelope

        #Interpolation [] [rw]
            The interpolation method the oscilloscope uses when it cannot
            sample a voltage for every point in the waveform record.

        RecordLength [r]
            The actual number of points the oscilloscope acquires for each channel.
            It is equal to or greater than the minimum number of points specified
            with the Horizontal Minimun Number of Points property.

        SampleMode [r]
            The sample mode the oscilloscope is currently using.
                Values:
                    "IviScopeSampleModeRealTime"
                    #"IviScopeSampleModeEquivalentTime"
                    *"IviScopeSampleModeInterpolate"
                    *"IviScopeSampleModeRepetitive"

        SampleRate [r]
            The effective digitizing rate using the current configuration.
            The units are samples per second.

        Type [String] [rw]
            How the oscilloscope acquires data and fills the waveform record.
            When set to Envelope or Peak Detect, the oscilloscope acquires
            minimum and maximum waveforms.
                Values:
                    "IviScopeAcquisitionTypeNormal"
                    #"IviScopeAcquisitionTypePeakDetect"
                    #"IviScopeAcquisitionTypeHiRes"
                    *"IviScopeAcquisitionTypeEnvelope"
                    *"IviScopeAcquisitionTypeAverage"

        NumberOfPointsMin [Int] [rw]
            The minimum number of points which can be in a waveform record for
            each channel. It configures the record length that the oscilloscope
            uses for waveform acquisition.
            The Record Length property returns the actual record length.

        interface
            Specific for instrument connection via VISA.
            Provides interface for wrapped VISA library.

    Methods:
        ConfigureRecord(TimePerRecord, MinNumPts=0, AcquisitionStartTime=0)
            Configures the most commonly used properties of the oscilloscopes
            acquisition subsystem: time per record, minimum record length,
            and the acquisition start time.

    """

    def __init__(self, parent):
        self.parent = parent
        if False:
            from .IIviScope import IIviScope

            self.parent = IIviScope()
        IIviScopeBase.IIviScopeBase.__init__(self, self.parent.interface)

    # Read only dependent properties
    @property
    def RecordLength(self):
        """
        The actual number of points the oscilloscope acquires for each
        channel. It is equal to or greater than the minimum number of points
        specified with the horizontal minimum number of points property.
        """
        ret = self.interface.vi_query(":ACQ:RLEN?", rformat="%d\n")
        self.GetError()
        return ret

    @property
    def SampleMode(self):
        """
        The sample mode the oscilloscope is currently using.

        :rtype: IviScopeSampleModeEnum
        """
        ret = self.interface.vi_query(":ACQ:SAMP?", rformat="%s")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeSampleModeEnum, ret)

    @property
    def SampleRate(self):
        """
        The effective digitizing rate using the current configuration. The
        units are samples per second.

        :rtype: int
        """
        ret = self.interface.vi_query(":TIM:SRAT?", rformat="%f\n")
        self.GetError()
        return ret

    # Read-write dependent properties
    @property
    def NumberOfAverages(self):
        """
        The number of waveforms the oscilloscope acquires and averages before
        returning to the idle state.

        :rtype: int
        """
        ret = self.interface.vi_query(":ACQ:AVER:COUN?", rformat="%d\n")
        self.GetError()
        return ret

    @NumberOfAverages.setter
    def NumberOfAverages(self, value):
        """
        The number of waveforms the oscilloscope acquires and averages before
        returning to the idle state.

        :type value: int
        """
        self.interface.vi_write(":ACQ:AVER:COUN %d" % value)
        self.GetError()

    @property
    def NumberOfEnvelopes(self):
        """
        The number of waveforms the oscilloscope acquires and analyzes to
        create the minimum and maximum waveforms, before returning to the idle
        state. Applies only when acquisition Type is Envelope.

        :rtype: int
        """
        # ret = self.interface.vi_query(':ACQ:COUN?', rformat="%s\n")
        # self.GetError()
        # if ret == "INF":
        #     return 0
        # else:
        #     return int(ret)
        return 0

    @NumberOfEnvelopes.setter
    def NumberOfEnvelopes(self, value):
        """
        The number of waveforms the oscilloscope acquires and analyzes to
        create the minimum and maximum waveforms, before returning to the idle
        state. Applies only when acquisition Type is Envelope
        Value 0 sets count to INF.

        :type value: int
        """
        if value > 0:
            pass  # self.interface.vi_write(':TRIG:SCOUN %d' % value)
        else:
            pass
        self.GetError()

    @property
    def Interpolation(self):
        """
        The interpolation method the oscilloscope uses when it cannot sample a
        voltage for every point in the waveform record.
        """
        raise NotImplementedError

    @Interpolation.setter
    def Interpolation(self, value):
        """
        The interpolation method the oscilloscope uses when it cannot sample a
        voltage for every point in the waveform record.
        """
        raise NotImplementedError

    @property
    def Type(self):
        """
        How the oscilloscope acquires data and fills the waveform record. When
        set to Envelope or Peak Detect, the oscilloscope acquires minimum and
        maximum waveforms.

        :rtype: IviScopeAcquisitionTypeEnum
        """
        ret = self.interface.vi_query(":ACQ:MODE?", rformat="%s")
        self.GetError()
        key = self.Enums.enum_from_value(self.Enums.IviScopeAcquisitionTypeEnum, ret)
        if key:
            return key
        return None
        # elif bool(self.interface.vi_query(':ACQ:RES?', rformat='%d')):
        #    return "IviScopeAcquisitionTypeHiRes"

    @Type.setter
    def Type(self, value):
        """
        How the oscilloscope acquires data and fills the waveform record. When
        set to Envelope or Peak Detect, the oscilloscope acquires minimum and
        maximum waveforms.

        :type value: IviScopeAcquisitionTypeEnum
        """
        if value != self.Enums.IviScopeAcquisitionTypeEnum.IviScopeAcquisitionTypeHiRes:
            self.interface.vi_write(":ACQ:HRM ON")
            self.interface.vi_write(f":ACQ:MODE {value.value}")
        elif value == self.Enums.IviScopeAcquisitionTypeEnum.IviScopeAcquisitionTypeHiRes:
            self.interface.vi_write(":ACQ:HRM ON")
        self.GetError()

    @property
    def NumberOfPointsMin(self):
        """
        The minimum number of points which can be in a waveform record for
        each channel. It configures the record length that the oscilloscope
        uses for waveform acquisition. The Record Length property returns the
        actual record length.

        :rtype: int
        """
        ret = self.interface.vi_query(":ACQ:RLEN?", rformat="%d\n")
        self.GetError()
        return ret

    @NumberOfPointsMin.setter
    def NumberOfPointsMin(self, value):
        """
        The minimum number of points which can be in a waveform record for
        each channel. It configures the record length that the oscilloscope
        uses for waveform acquisition. The Record Length property returns the
        actual record length.

        :type value: int
        """
        self.interface.vi_write(":ACQ:RLEN %d" % value)
        self.GetError()

    @property
    def StartTime(self):
        """
        The length of time from the trigger event to the first point in the
        waveform record. The units are seconds. If positive, the first point
        in the waveform occurs after the trigger. If negative, the first point
        in the waveform occurs before the trigger.

        :rtype: float
        """
        ret = self.interface.vi_query(":TRIG:POS?", rformat="%f\n")
        len = self.TimePerRecord
        self.GetError()
        return ret * len / 100.0

    @StartTime.setter
    def StartTime(self, value):
        """
        The length of time from the trigger event to the first point in the
        waveform record. The units are seconds. If positive, the first point
        in the waveform occurs after the trigger. If negative, the first point
        in the waveform occurs before the trigger.

        :type value: float
        """
        len = self.TimePerRecord
        self.interface.vi_write(f":TRIG:POS {abs(float(-value) / len):.3E}")
        self.GetError()

    @property
    def TimePerRecord(self):
        """
        The time in seconds that corresponds to the record length.

        :rtype: float
        """
        ret = self.interface.vi_query(":TIM:TDIV?", rformat="%f\n")
        self.GetError()
        return ret * 10.0

    @TimePerRecord.setter
    def TimePerRecord(self, value):
        """
        The time in seconds that corresponds to the record length.

        :type value: float
        """
        self.interface.vi_write(":TIM:TDIV %.3E" % (value / 10.0))
        self.GetError()

    # Methods
    def ConfigureRecord(self, TimePerRecord, MinNumPts=0, AcquisitionStartTime=0):
        """
        Configures the most commonly used properties of the oscilloscope's
        acquisition subsystem: time per record, minimum record length, and the
        acquisition start time.

        :param TimePerRecord:
            Specifies the time per record. This value sets the Horizontal Time Per
            Record property.
        :type TimePerRecord: float

        :param MinNumPts:
            Specifies the minimum number of points the end-user allows in the
            waveform recorded. This value sets the Horizontal Minimum Number of
            Points property.
        :type MinNumPts: int

        :param AcquisitionStartTime:
            Specifies the position of the first point in the waveform record
            relative to the trigger event. This value sets the Acquisition Start
            Time property.
        :type AcquisitionStartTime: int
        """

        self.TimePerRecord = TimePerRecord
        self.NumberOfPointsMin = MinNumPts
        self.StartTime = AcquisitionStartTime
