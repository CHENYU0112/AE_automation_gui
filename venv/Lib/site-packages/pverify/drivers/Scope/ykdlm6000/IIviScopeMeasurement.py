# -------------------------------------------------------------------------------
# Name           :
# Description    :
#
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
from __future__ import annotations

from struct import unpack
from time import perf_counter, sleep

import numpy as np
from pyvisa.constants import VI_ATTR_TMO_VALUE

from pverify.drivers.Scope.ykdlm6000 import IIviScopeBase


class IIviScopeMeasurement(IIviScopeBase.IIviScopeBase):
    """IVI Scope class-compliant measurement interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Methods:
        FetchWaveform
            Returns a previously acquired waveform for this channel.
            The acquisition must be made prior to calling this method.
            Call this method separately for each channel.

        FetchWaveformMeasurement
            Returns a previously acquired waveform measurement for this channel.
            The acquisition must be made prior to calling this method.
            Call this method separately for each measurement.

        #FetchWaveformMinMax
            Returns the previously acquired minimum and maximum waveforms
            for this specified channel. The acquisition must be made prior
            to calling this method. Call this method separately for each channel.

        ReadWaveform
            Initiates an acquisition on all enabled channels, waits
            (up to MaxTime) for the acquisition to complete, and returns
            the waveform for this channel. Call FetchWaveform to obtain the
            waveforms for other channels.

        ReadWaveformMeasurement
            Initiates an acquisition on all enabled channels, waits
            (up to MaxTime) for the acquisition to complete, and returns
            the measurement for this channel. Call FetchWaveformMeasurement
            to obtain other measurements for this or other channels.

        #ReadWaveformMinMax
            Initiates an acquisition on all enabled channels, waits
            (up to MaxTime) for the acquisition to complete, and returns
            the min/max waveforms for this channel. Call FetchMinMaxWaveform
            to obtain the min/max waveforms for other channels.

    """

    def __init__(self, interface, Channelname):
        self._Channel = Channelname
        IIviScopeBase.IIviScopeBase.__init__(self, interface)

    # Methods
    def FetchWaveform(self):
        """
        Returns a previously acquired waveform for this channel. The
        acquisition must be made prior to calling this method.
        Call this method separately for each channel.

        :return: Returns a waveform datatype as dictionary of form {"time": <np.ndarray>, "data": <np.ndarray>}
        """
        tmo = self.interface.get_visa_attribute(VI_ATTR_TMO_VALUE)
        self.interface.set_visa_attribute(VI_ATTR_TMO_VALUE, 5000)

        self.interface.vi_write(f":WAV:FORM WORD;BYT LSBF;TRAC {self._Channel}")
        self.interface.vi_write(":WAV:SEND?")
        ret = self.interface.vi_read_raw()
        self.interface.set_visa_attribute(VI_ATTR_TMO_VALUE, tmo)

        DataStartIndex = 2 + int(ret[1])
        Length = int(ret[2 : 2 + int(ret[1])])
        WaveformArray = ret[DataStartIndex : DataStartIndex + Length]

        WaveformArray = bytes(WaveformArray, "latin-1")
        WaveformArray = np.array(unpack("%dh" % (len(WaveformArray) / 2), WaveformArray))

        xInitial = 0
        xIncrement = 1 / self.interface.vi_query(":WAV:SRAT?", "%s", "%f")
        Range = self.interface.vi_query(":WAV:RANG?", "%s", "%f")
        Offset = self.interface.vi_query(":WAV:OFFS?", "%s", "%f")
        data = (float(Range) * (WaveformArray / 3200.0)) + Offset
        self.GetError()

        return data, xInitial, xIncrement

    def FetchWaveformMeasurement(self, MeasFunction):
        """
        Returns a previously acquired waveform measurement for this channel.
        The acquisition must be made prior to calling this method.
        Call this method separately for each measurement.

        :param MeasFunction: Waveform measurement to be measured.
        :type MeasFunction: IviScopeMeasurementEnum

        """
        self.interface.vi_write(":MEAS:MODE BASIC;DISP ON")

        if (
            self.interface.vi_query(
                f":MEAS:TRAC{self._Channel}:AREA1:{MeasFunction.value}:STAT?",
                rformat="%d",
            )
            == 0
        ):
            self.interface.vi_write(f":MEAS:TRAC{self._Channel}:AREA1:{MeasFunction.value}:STAT ON;")
        try:
            value = self.interface.vi_query(
                f":MEAS:TRAC{self._Channel}:AREA1:{MeasFunction.value}:VAL? 1",
                rformat="%f",
            )
        except Exception:
            try:
                sleep(0.5)
                value = self.interface.vi_query(
                    f":MEAS:TRAC{self._Channel}:AREA1:{MeasFunction.value}:VAL? 1",
                    rformat="%f",
                )
            except Exception:
                sleep(0.5)
                value = self.interface.vi_query(
                    f":MEAS:TRAC{self._Channel}:AREA1:{MeasFunction.value}:VAL? 1",
                    rformat="%f",
                )
        # self.interface.vi_write(':MEAS:CHAN%s:%s:STAT OFF' % (self._Channel, MeasFunction.value))
        self.GetError()
        if MeasFunction == self.Enums.IviScopeMeasurementEnum.IviScopeMeasurementAverageFrequency:
            value = 1.0 / value
        return value

    def ReadWaveform(self, MaxTimeMilliseconds=5000):
        """
        Initiates an acquisition on all enabled channels, waits (up to
        MaxTime) for the acquisition to complete, and returns the waveform
        for this channel. Call FetchWaveform to obtain the waveforms for other
        channels.

        :param MaxTimeMilliseconds:
            Specifies the maximum time the end-user allows for this method to complete in milliseconds.
        :type MaxTimeMilliseconds: int

        :return: Returns a waveform datatype as dictionary of form {"time": <np.ndarray>, "data": <np.ndarray>}
        """
        from pverify.drivers.Scope.ykdlm6000.IIviScopeAcquisition import IIviScopeAcquisition
        from pverify.drivers.Scope.ykdlm6000.IIviScopeMeasurements import IIviScopeMeasurements as SM

        tmpObj_Acquisition = IIviScopeAcquisition(self.interface)

        tmpObj_Measurements = SM(self.interface)

        ElapsedTime = 0
        {"xInitial": 0, "xIncrement": 0, "data": np.array([])}

        # Save previous settings,set NumberOfAverages to 1 to get a single start and initiate acquisition
        tmpObj_Measurements.Initiate()
        sleep(0.5)

        # Wait for acquisition complete
        StartTime = perf_counter()
        while (ElapsedTime * 1000 <= MaxTimeMilliseconds) and (
            tmpObj_Measurements.Status() == self.Enums.IviScopeAcquisitionStatusEnum.IviScopeAcqInProgress
        ):
            sleep(0.2)
            ElapsedTime = perf_counter() - StartTime
        AcqInProg = tmpObj_Measurements.Status() == self.Enums.IviScopeAcquisitionStatusEnum.IviScopeAcqInProgress

        if (ElapsedTime > MaxTimeMilliseconds) and AcqInProg:
            msg = "ykdlm6000: A timeout occurred while acquisition was in progress"
            raise Exception(msg)
        elif not AcqInProg:
            # Acquisition completed
            if tmpObj_Acquisition.Type == self.Enums.IviScopeAcquisitionTypeEnum.IviScopeAcquisitionTypeAverage:
                tmpObj_Measurements.Abort()
            data, xInitial, xIncrement = self.FetchWaveform()

        tmpObj_Measurements.Abort()
        self.GetError()

        return data, xInitial, xIncrement

    def ReadWaveformMeasurement(self, MeasFunction, MaxTimeMilliseconds=5000):
        """
        Initiates an acquisition on all enabled channels, waits (up to MaxTimeMilliseconds) for the
        acquisition to complete, and returns the measurement for this channel.

        :param MeasFunction: Waveform measurement to be measured.
        :type MeasFunction: IviScopeMeasurementEnum

        :param MaxTimeMilliseconds:
            Specifies the maximum time the end-user allows for this method to complete in milliseconds.
        :type MaxTimeMilliseconds: int
        """
        from pverify.drivers.Scope.ykdlm6000.IIviScopeAcquisition import IIviScopeAcquisition
        from pverify.drivers.Scope.ykdlm6000.IIviScopeMeasurements import IIviScopeMeasurements as SM

        tmpObj_Acquisition = IIviScopeAcquisition(self.interface)

        tmpObj_Measurements = SM(self.interface)

        ElapsedTime = 0
        Measurement = None

        tmpObj_Measurements.Initiate()
        sleep(0.5)

        # Wait for acquisition complete
        StartTime = perf_counter()
        while (ElapsedTime * 1000 <= MaxTimeMilliseconds) and (
            tmpObj_Measurements.Status() == self.Enums.IviScopeAcquisitionStatusEnum.IviScopeAcqInProgress
        ):
            sleep(0.2)
            ElapsedTime = perf_counter() - StartTime
        AcqInProg = tmpObj_Measurements.Status == self.Enums.IviScopeAcquisitionStatusEnum.IviScopeAcqInProgress

        if (ElapsedTime > MaxTimeMilliseconds) and AcqInProg:
            msg = "ykdlm6000: A timeout occurred while acquisition was in progress"
            raise Exception(msg)
        elif not AcqInProg:
            # Acquisition completed
            if tmpObj_Acquisition.Type == self.Enums.IviScopeAcquisitionTypeEnum.IviScopeAcquisitionTypeAverage:
                tmpObj_Measurements.Abort()
            Measurement = self.FetchWaveformMeasurement(MeasFunction)

        tmpObj_Measurements.Abort()
        self.GetError()

        return Measurement

    def AutoRangeMath(self):
        """
        Performs an autorange if this IIviScopeMeasurement object is linked to a math channel.
        """
        if self._Channel in ["MATH1", "MATH2", "MATH3", "MATH4"]:
            self.interface.vi_write(f":{self._Channel}:USER:ARAN")
            sleep(0.5)

    def FetchWaveformMinMax(self):
        """
        Returns the previously acquired minimum and maximum waveforms for this
        specified channel. The acquisition
        must be made prior to calling
        this method. Call this method separately for each channel.

        Parameter "MinWaveform"
            This array contains the min waveform.

        Parameter "MaxWaveform"
            This array contains the max waveform.

        Parameter "InitialX"
            The time in relation to the Trigger Event of the first point in the
            waveform in seconds.

        Parameter "XIncrement"
            The time between points in the acquired waveform in seconds.

        """
        raise NotImplementedError

    def ReadWaveformMinMax(self, MaxTimeMilliseconds):
        """
        Initiates an acquisition on all enabled channels, waits (up to
        MaxTime) for the acquisition to complete,
        and returns the min/max
        waveforms for this channel. Call FetchMinMaxWaveform to obtain the
        min/max waveforms for
        other channels.

        Parameter "MaxTimeMilliseconds"
            Specifies the maximum time the end-user allows for this method to
            complete in milliseconds. The values defined in
            IviScopeTimeOutEnum are also allowed.

        Parameter "MinWaveform"
            This array contains the min waveform.

        Parameter "MaxWaveform"
            This array contains the max waveform.

        Parameter "InitialX"
            The time in relation to the Trigger Event of the first point in the
            waveform in seconds.

        Parameter "XIncrement"
            The time between points in the acquired waveform in seconds.

        """
        raise NotImplementedError
