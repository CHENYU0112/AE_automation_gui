# ===========================================================================
# Copyright (C) 2012-2013 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

from time import sleep

from pverify.drivers.Scope.ykdlm6000 import IIviScopeBase


class IIviScopeChannel(IIviScopeBase.IIviScopeBase):
    """IVI Scope class-compliant channel interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        Coupling [String] [rw]
            Describes how the oscilloscope couples the input signal.
            Use with enumeration values:
                "IviScopeVerticalCouplingAC"
                "IviScopeVerticalCouplingDC"
                "IviScopeVerticalCouplingGnd"

        Enabled [Boolean] [rw]
            If True, the oscilloscope acquires a waveform for this channel when
            the Initiate Acquisition, Read Waveform, Read Min Max Waveform, or
            Read Waveform Measurement methods are called.
            Use with boolean value.

        InputFrequencyMax [Int] [rw]
            The maximum input bandwidth of this channel. The units are hertz.
            Use with float value.

        #InputImpedance [] [rw]
            The input impedance of this channel. The units are ohms.

        Offset [Float] [rw]
            The location of the center of the range that you specify with the
            Range property. The units are volts, with respect to ground.
            For example, to acquire a sine wave spanning 0.0 to 10.0 volts,
            set Offset to 5.0 volts.
            Use with float value.

        ProbeAttenuation [Float/String] [rw]
            The scaling factor by which the probe attenuates the input signal.
            For example, with a 10:1 probe, the value is 10.0.
            Use with float value for voltage probe or
            String values:
                C0_001|C0_002|C0_005|C0_01|C0_02|C0_05|C0_1|C0_2|C0_5|
                C1|C2|C5|C10|C20|C50|C100|C200|C500|C1000|C2000

        #ProbeSense [] [rw]
            The probe attenuation value the oscilloscope automatically senses. If
            the automatic probe sense is disabled, its value is the manual probe
            attenuation setting.

        Range [Float] [rw]
            The absolute value of the input range the oscilloscope can acquire
            for the channel. The units are volts. For example, to acquire a
            sine wave spanning -5.0 to 5.0 volts, set Range to 10.0 volts.
            Use with float value.

        *Position [Float] [rw]
            The vertical position of a channel.
            Use with float value.


    Methods:
        Configure(Range, Offset, Coupling, ProbeAttenuation, Enabled):
            Configures the most commonly used properties of the oscilloscope
            channel sub-system. They are the range, offset, coupling, probe
            attenuation, and whether the channel is enabled.

        ConfigureCharacteristics(InputImpedance=0, InputFrequencyMax=0):
            Configures the properties that control the electrical characteristics
            of the channel. They are the input impedance and the maximum frequency
            of the input signal.

        *Label(Labelname, Enabled)
            The waveform name that is shown on the scope's screen

        *PZCalibrate
            Performs zero calibration of the current probe.

    """

    def __init__(self, interface, Channel):
        self._Channel = str(Channel).strip()
        IIviScopeBase.IIviScopeBase.__init__(self, interface)

        # Read only dependent properties

    @property
    def ProbeSense(self):
        """
        The probe attenuation value the oscilloscope automatically senses. If
        the automatic probe sense is disabled, its value is the manual probe
        attenuation setting.
        """
        raise NotImplementedError

    # Read-write dependent properties
    @property
    def Coupling(self):
        """
        Describes how the oscilloscope couples the input signal.

        :rtype: IviScopeVerticalCouplingEnum
        """
        ret = self.interface.vi_query(f":CHAN{self._Channel}:COUP?", rformat="%s\n")
        self.GetError()
        return self.Enums.enum_from_value(self.Enums.IviScopeTriggerCouplingEnum, ret)

    @Coupling.setter
    def Coupling(self, value):
        """
        How the oscilloscope couples the input signal.

        :type value: IviScopeVerticalCouplingEnum
        """
        self.interface.vi_write(f":CHAN{self._Channel}:COUP {value.value}")
        self.GetError()

    @property
    def Enabled(self):
        """
        If True, the oscilloscope acquires a waveform for this channel when
        the Initiate Acquisition, Read Waveform, Read Min Max Waveform, or
        Read Waveform Measurement methods are called.

        :rtype: bool
        """
        ret = self.interface.vi_query(f":CHAN{self._Channel}:DISP?", rformat="%s\n")
        self.GetError()
        return ret.upper() in ["ON", "1"]

    @Enabled.setter
    def Enabled(self, value):
        """
        If True, the oscilloscope acquires a waveform for this channel when
        the Initiate Acquisition, Read Waveform, Read Min Max Waveform, or
        Read Waveform Measurement methods are called.

        :type value: bool
        """
        if bool(value):
            self.interface.vi_write(f":CHAN{self._Channel}:DISP ON")
        else:
            self.interface.vi_write(f":CHAN{self._Channel}:DISP OFF")
        self.GetError()

    @property
    def InputFrequencyMax(self):
        """
        The maximum input frequency of this channel. It the frequency at which
        the input circuitry attenuates the input signal by 3 dB. The units are
        hertz.

        :rtype: float
        """
        ret = self.interface.vi_query(f":CHAN{self._Channel}:BWID?", rformat="%s\n")
        self.GetError()
        if ret == "FULL":
            return 0
        else:
            return float(ret)

    @InputFrequencyMax.setter
    def InputFrequencyMax(self, value):
        """
        The maximum input frequency of this channel. It the frequency at which
        the input circuitry attenuates the input signal by 3 dB. The units are
        hertz.
        Use with Integer values.
        For FULL bandwidth set to 0.

        :type value: float
        """
        if value:
            self.interface.vi_write(f":CHAN{self._Channel}:BWID {value:.3E}")
        else:
            self.interface.vi_write(f":CHAN{self._Channel}:BWID FULL")
        self.GetError()

    @property
    def InputImpedance(self):
        """
        The input impedance of this channel. The units are ohms.
        """
        coupl = self.interface.vi_query(f":CHAN{self._Channel}:COUP?", rformat="%s\n").upper()
        if "DC50" in coupl:
            return 50.0
        else:
            return 1e6

    @InputImpedance.setter
    def InputImpedance(self, value):
        """
        The input impedance of this channel. The units are ohms.
        """
        if float(value) == 50:
            self.interface.vi_write(f":CHAN{self._Channel}:COUP DC50")
        else:
            self.interface.vi_write(f":CHAN{self._Channel}:COUP DC")

    @property
    def Offset(self):
        """
        The location of the center of the range that you specify with the
        Range property. The units are volts, with respect to ground. For
        example, to acquire a sine wave spanning 0.0 to 10.0 volts, set Offset
        to 5.0 volts.

        :rtype: float
        """
        ret = self.interface.vi_query(f":CHAN{self._Channel}:OFFS?", rformat="%f\n")
        # ret = self.interface.vi_query(':CHAN%s:POS?' % self._Channel, rformat="%f\n")
        self.GetError()
        return ret

    @Offset.setter
    def Offset(self, value):
        """
        The location of the center of the range that you specify with the
        Range property. The units are volts, with respect to ground. For
        example, to acquire a sine wave spanning 0.0 to 10.0 volts, set Offset
        to 5.0 volts.

        :type value: float
        """
        self.interface.vi_write(f":CHAN{self._Channel}:OFFS {value:.3E}")
        # self.interface.vi_write(':CHAN%s:POS %.3E' % (self._Channel, value))
        self.GetError()

    @property
    def Position(self):
        """
        NON-COMPLIANCE ATTRIBUTE.
        Sets or queries the vertical position of a channel.

        :rtype: float
        """
        ret = self.interface.vi_query(f":CHAN{self._Channel}:POS?", rformat="%f\n")
        self.GetError()
        return ret

    @Position.setter
    def Position(self, value):
        """
        Sets or queries the vertical position of a channel

        :type value: float
        """
        self.interface.vi_write(f":CHAN{self._Channel}:POS {value:.3E}")
        self.GetError()

    @property
    def ProbeAttenuation(self):
        """
        The scaling factor by which the probe attenuates the input signal. For
        example, with a 10:1 probe, the value is 10.0.

        :return:
          float for voltage probe or
          string for current probe:
            C1|C10|C100
        """
        ret = self.interface.vi_query(f":CHAN{self._Channel}:PROB:MODE?", rformat="%s\n")
        self.GetError()
        if ret[0] == "C":
            return ret
        else:
            return float(ret)

    @ProbeAttenuation.setter
    def ProbeAttenuation(self, value):
        """
        The scaling factor by which the probe attenuates the input signal. For
        example, with a 10:1 probe, the value is 10.0.

        :param value:
          float for voltage probe or
          string for current probe:
            C1|C10|C100
        """
        if isinstance(value, (int, float)):
            self.interface.vi_write(f":CHAN{self._Channel}:PROB:MODE {value:.3E}")
        else:
            self.interface.vi_write(f":CHAN{self._Channel}:PROB:MODE {value}")

    @property
    def Range(self):
        """
        The absolute value of the input range the oscilloscope can acquire for
        the channel. The units are volts. For example, to acquire a sine wave
        spanning -5.0 to 5.0 volts, set Range to 10.0 volts.

        :rtype: float
        """
        ret = self.interface.vi_query(f":CHAN{self._Channel}:VDIV?", rformat="%f\n")
        self.GetError()
        return ret * 8.0

    @Range.setter
    def Range(self, value):
        """
        The absolute value of the input range the oscilloscope can acquire for
        the channel. The units are volts. For example, to acquire a sine wave
        spanning -5.0 to 5.0 volts, set Range to 10.0 volts.

        :type value: float
        """
        self.interface.vi_write(f":CHAN{self._Channel}:VDIV {(value / 8.0):.3E}")
        self.GetError()

    # Methods
    def Configure(self, Range, Offset, Coupling, ProbeAttenuation, Enabled, Position=0.0):
        """
        Configures the most commonly used properties of the oscilloscope
        channel sub-system. They are the range, offset, coupling, probe
        attenuation, and whether the channel is enabled.

        :param Range: Specifies the vertical range.
        :type Range: float

        :param Offset: Specifies the vertical offset.
        :type Offset: flaot

        :param Coupling: Specifies how to couple the input signal.
        :type Coupling: IviScopeVerticalCouplingEnum

        :param ProbeAttenuation: Specifies the probe attenuation.
        :type ProbeAttenuation: float or string (C0_001|C0_002|C0_005|C0_01|C0_02|C0_05|C0_1|C0_2|C0_5|
                                                 C1|C2|C5|C10|C20|C50|C100|C200|C500|C1000|C2000)

        :param Enabled: Specifies if the channel is enabled for acquisition.
        :type Enabled: bool

        :param Position: NON-COMPLIANCE ATTRIBUTE. Sets or queries the vertical position of a channel
        :type Position: float
        """
        self.Range = Range
        self.Offset = Offset
        self.Coupling = Coupling
        self.ProbeAttenuation = ProbeAttenuation
        self.Enabled = Enabled
        self.Position = Position

    def ConfigureCharacteristics(self, InputImpedance=0, InputFrequencyMax=0):
        """
        Configures the properties that control the electrical characteristics
        of the channel. They are the input impedance and the maximum frequency
        of the input signal.

        :param InputImpedance:
            NOT IMPLEMENTED!
            The input impedance for the channel. The driver sets the Input
            Impedance to this value.

        :param InputFrequencyMax:
            The maximum input frequency for the channel. The driver sets the Max
            Input Frequency to this value.
        :type InputFrequencyMax: int
        """
        self.InputFrequencyMax = InputFrequencyMax

    # def AutoSetup(self):
    #     """
    #     NON-COMPLIANCE FUNCTION
    #     Performs an auto-setup of the scope channel.
    #     """
    #     fwversion = self.interface.vi_query('*IDN?', rformat="%s\n")
    #     fwversion = float(str(fwversion).split(",")[-1].replace("F", ""))
    #     if fwversion >= 2.47:
    #         self.interface.vi_write(':CHAN%s:ASC:EXEC' % self._Channel)
    #         self.GetError()
    #     else:
    #         raise Exception("The scope's firmware (F%.2f) has to be at least version F2.47" % fwversion)

    def Label(self, Labelname, Enabled):
        """
        NON-COMPLIANCE FUNCTION
        Adds a named label to a displayed waveform or enables/disables the label.
        :param Labelname: The name of the waveform label
        :type Labelname: str
        :param Enabled: Enable/Disable the display of the label.
        :type Enabled: bool
        """
        if Enabled:
            self.interface.vi_write(f':CHAN{self._Channel}:LAB:DEF "{Labelname}";LAB:DISP ON')
        else:
            self.interface.vi_write(f":CHAN{self._Channel}:LAB:DISP OFF")
        self.GetError()

    def PZCalibrate(self):
        """
        NON-COMPLIANCE FUNCTION
        Performs zero calibration of the current probe.
        """
        self.interface.vi_write(f":CHAN{self._Channel}:PZC")
        sleep(3.0)
        self.GetError()
