# -------------------------------------------------------------------------------
# Name           :
# Description    :
#
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
from __future__ import annotations

from pverify.drivers.Scope.ykdlm6000 import IIviScopeBase


class IIviScopeReferenceLevel(IIviScopeBase.IIviScopeBase):
    """IVI Scope class-compliant reference level interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        #High
            The high reference for waveform measurements.
            It is a percentage of the difference between the Voltage High and Voltage Low.
            Voltage High and Voltage Low may be calculated using either the min/max or histogram methods.
        #Low
            The low reference for waveform measurements.
            It is a percentage of the difference between the Voltage High and Voltage Low.
            Voltage High and Voltage Low may be calculated using either the min/max or histogram methods.
        #Mid
            The mid reference for waveform measurements.
            It is a percentage of the difference between the Voltage High and Voltage Low.
            Voltage High and Voltage Low may be calculated using either the min/max or histogram methods.

    Methods:
        Configure(Low, High, *Mode, *AffectedChannels=[])
            Configures the reference levels for waveform measurements, low, mid, and high.
            Parameter 'Mode'
                Values: "Percent" or "Unit"
            Parameter 'AffectedChannels'
                Numeric list that contains the channel numbers to apply to.
                If empty apply to all.
    """

    def __init__(self, parent):
        self.parent = parent
        if False:
            from .IIviScope import IIviScope

            self.parent = IIviScope()
        IIviScopeBase.IIviScopeBase.__init__(self, self.parent.interface)

        # Read-write dependent properties

    @property
    def High(self):
        """
        The high reference for waveform measurements. It is a percentage of
        the difference between the Voltage
        High and Voltage Low. Voltage
        High and Voltage Low may be calculated using either the min/max or
        histogram methods.
        """
        raise NotImplementedError

    @High.setter
    def High(self, value):
        """
        The high reference for waveform measurements. It is a percentage of
        the difference between the Voltage
        High and Voltage Low. Voltage
        High and Voltage Low may be calculated using either the min/max or
        histogram methods.
        """
        raise NotImplementedError

    @property
    def Low(self):
        """
        The low reference for waveform measurements. It is a percentage of the
        difference between the Voltage High and Voltage Low. Voltage High
        and Voltage Low may be calculated using either the min/max or
        histogram methods.
        """
        raise NotImplementedError

    @Low.setter
    def Low(self, value):
        """
        The low reference for waveform measurements. It is a percentage of the
        difference between the Voltage
                High and Voltage Low. Voltage High
        and Voltage Low may be calculated using either the min/max or
        histogram methods.
        """
        raise NotImplementedError

    @property
    def Mid(self):
        """
        The mid reference for waveform measurements. It is a percentage of the
        difference between the Voltage
        High and Voltage Low. Voltage High
        and Voltage Low may be calculated using either the min/max or
        histogram methods.
        """
        raise NotImplementedError

    @Mid.setter
    def Mid(self, value):
        """
        The mid reference for waveform measurements. It is a percentage of the
        difference between the Voltage
        High and Voltage Low. Voltage High
        and Voltage Low may be calculated using either the min/max or
        histogram methods.
        """
        raise NotImplementedError

    # Methods
    def Configure(self, Low, Mid, High, Mode="Percent", AffectedChannels=None):
        """
        Configures the reference levels for waveform measurements, low, mid and high.

        :param Low: Measurement low reference. This value sets the Meas Low Ref property
        :type Low: float
        :param Mid: Measurement mid reference. This value sets the Meas Mid Ref property.
        :type Mid: float
        :param High: Measurement high reference. This value sets the Meas High Ref property.
        :type High: float
        :param Mode: Sets the distal, mesial, and proximal points as percentages ("Percent") or voltages ("Unit").
        :type Mode: str
        :param AffectedChannels:
            List of channels which shall be affected.
            If set to None all channels including math channels are affected
        :type AffectedChannels: list
        """
        if AffectedChannels is None:
            AffectedChannels = [1, 2, 3, 4, 5, 6, 7, 8]

        if Mode.upper() == "PERCENT":
            if AffectedChannels:
                for chan in AffectedChannels:
                    self.interface.vi_write(":MEAS:TRAC%s:DPR:MODE PERC;PERC %d,%d" % (int(chan), Low, High))
            else:
                self.interface.vi_write(":MEAS:TRAC1:DPR:MODE PERC;PERC %d,%d" % (Low, High))
                self.interface.vi_write(":MEAS:TRAC2:DPR:MODE PERC;PERC %d,%d" % (Low, High))
                self.interface.vi_write(":MEAS:TRAC3:DPR:MODE PERC;PERC %d,%d" % (Low, High))
                self.interface.vi_write(":MEAS:TRAC4:DPR:MODE PERC;PERC %d,%d" % (Low, High))
                self.interface.vi_write(":MEAS:TRAC5:DPR:MODE PERC;PERC %d,%d" % (Low, High))
                self.interface.vi_write(":MEAS:TRAC6:DPR:MODE PERC;PERC %d,%d" % (Low, High))
                self.interface.vi_write(":MEAS:TRAC7:DPR:MODE PERC;PERC %d,%d" % (Low, High))
                self.interface.vi_write(":MEAS:TRAC8:DPR:MODE PERC;PERC %d,%d" % (Low, High))

        elif Mode.upper() == "UNIT":
            if AffectedChannels:
                for chan in AffectedChannels:
                    self.interface.vi_write(f":MEAS:TRAC{int(chan)}:DPR:MODE UNIT;UNIT {Low:f},{High:f}")
            else:
                self.interface.vi_write(f":MEAS:TRAC1:DPR:MODE UNIT;UNIT {Low:f},{High:f}")
                self.interface.vi_write(f":MEAS:TRAC2:DPR:MODE UNIT;UNIT {Low:f},{High:f}")
                self.interface.vi_write(f":MEAS:TRAC3:DPR:MODE UNIT;UNIT {Low:f},{High:f}")
                self.interface.vi_write(f":MEAS:TRAC4:DPR:MODE UNIT;UNIT {Low:f},{High:f}")
                self.interface.vi_write(f":MEAS:TRAC5:DPR:MODE UNIT;UNIT {Low:f},{High:f}")
                self.interface.vi_write(f":MEAS:TRAC6:DPR:MODE UNIT;UNIT {Low:f},{High:f}")
                self.interface.vi_write(f":MEAS:TRAC7:DPR:MODE UNIT;UNIT {Low:f},{High:f}")
                self.interface.vi_write(f":MEAS:TRAC8:DPR:MODE UNIT;UNIT {Low:f},{High:f}")
