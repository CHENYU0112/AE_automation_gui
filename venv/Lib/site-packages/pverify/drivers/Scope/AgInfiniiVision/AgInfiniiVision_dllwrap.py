from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import AgInfiniiVision_const as const
from .AgInfiniiVision_const import *


class AgInfiniiVision_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("AgInfiniiVision.dll", "AgInfiniiVision_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "AgInfiniiVision"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.AgInfiniiVision_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.AgInfiniiVision_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.AgInfiniiVision_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.AgInfiniiVision_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.AgInfiniiVision_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        status = self.dll.AgInfiniiVision_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.AgInfiniiVision_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        status = self.dll.AgInfiniiVision_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.AgInfiniiVision_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.AgInfiniiVision_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.AgInfiniiVision_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.AgInfiniiVision_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.AgInfiniiVision_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.AgInfiniiVision_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.AgInfiniiVision_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.AgInfiniiVision_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def IsInvalidWfmElement(self, Vi, elementValue):
        IsInvalid = ViBoolean()
        status = self.dll.AgInfiniiVision_IsInvalidWfmElement(ViSession(Vi), ViReal64(elementValue), byref(IsInvalid))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(IsInvalid.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.AgInfiniiVision_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.AgInfiniiVision_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.AgInfiniiVision_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.AgInfiniiVision_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        status = self.dll.AgInfiniiVision_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgInfiniiVision_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgInfiniiVision_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgInfiniiVision_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgInfiniiVision_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgInfiniiVision_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt64()
        status = self.dll.AgInfiniiVision_GetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def SetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgInfiniiVision_SetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(AttributeID),
            ViInt64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ActualRecordLength(self, Vi):
        ActualRecordLength = ViInt32()
        status = self.dll.AgInfiniiVision_ActualRecordLength(ViSession(Vi), byref(ActualRecordLength))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ActualRecordLength.value)

    def SampleRate(self, Vi):
        SampleRate = ViReal64()
        status = self.dll.AgInfiniiVision_SampleRate(ViSession(Vi), byref(SampleRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(SampleRate.value)

    def AutoProbeSenseValue(self, Vi, ChannelName):
        AutoProbeSenseValue = ViReal64()
        status = self.dll.AgInfiniiVision_AutoProbeSenseValue(
            ViSession(Vi), ViConstString(ChannelName), byref(AutoProbeSenseValue)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AutoProbeSenseValue.value)

    def SampleMode(self, Vi):
        SampleMode = ViInt32()
        status = self.dll.AgInfiniiVision_SampleMode(ViSession(Vi), byref(SampleMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(SampleMode.value)

    def AutoSetup(self, Vi):
        status = self.dll.AgInfiniiVision_AutoSetup(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionType(self, Vi, AcquisitionType):
        status = self.dll.AgInfiniiVision_ConfigureAcquisitionType(ViSession(Vi), ViInt32(AcquisitionType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInterpolation(self, Vi, Interpolation):
        status = self.dll.AgInfiniiVision_ConfigureInterpolation(ViSession(Vi), ViInt32(Interpolation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInitiateContinuous(self, Vi, ContinuousAcquisition):
        status = self.dll.AgInfiniiVision_ConfigureInitiateContinuous(ViSession(Vi), ViBoolean(ContinuousAcquisition))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNumAverages(self, Vi, NumberOfAverages):
        status = self.dll.AgInfiniiVision_ConfigureNumAverages(ViSession(Vi), ViInt32(NumberOfAverages))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNumEnvelopes(self, Vi, NumEnvelopes):
        status = self.dll.AgInfiniiVision_ConfigureNumEnvelopes(ViSession(Vi), ViInt32(NumEnvelopes))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionRecord(self, Vi, TimePerRecord, MinNumPts, AcquisitionStartTime):
        status = self.dll.AgInfiniiVision_ConfigureAcquisitionRecord(
            ViSession(Vi),
            ViReal64(TimePerRecord),
            ViInt32(MinNumPts),
            ViReal64(AcquisitionStartTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerCoupling(self, Vi, Coupling):
        status = self.dll.AgInfiniiVision_ConfigureTriggerCoupling(ViSession(Vi), ViInt32(Coupling))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerLineNumber(self, Vi, TVLineNumber):
        status = self.dll.AgInfiniiVision_ConfigureTVTriggerLineNumber(ViSession(Vi), ViInt32(TVLineNumber))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcLineTriggerSlope(self, Vi, ACLineSlope):
        status = self.dll.AgInfiniiVision_ConfigureAcLineTriggerSlope(ViSession(Vi), ViInt32(ACLineSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerModifier(self, Vi, TriggerModifier):
        status = self.dll.AgInfiniiVision_ConfigureTriggerModifier(ViSession(Vi), ViInt32(TriggerModifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, Vi, TriggerType, Holdoff):
        status = self.dll.AgInfiniiVision_ConfigureTrigger(ViSession(Vi), ViInt32(TriggerType), ViReal64(Holdoff))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEdgeTriggerSource(self, Vi, Source, Level, Slope):
        status = self.dll.AgInfiniiVision_ConfigureEdgeTriggerSource(
            ViSession(Vi), ViConstString(Source), ViReal64(Level), ViInt32(Slope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGlitchTriggerSource(self, Vi, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition):
        status = self.dll.AgInfiniiVision_ConfigureGlitchTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViReal64(Level),
            ViReal64(GlitchWidth),
            ViInt32(GlitchPolarity),
            ViInt32(GlitchCondition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRuntTriggerSource(self, Vi, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity):
        status = self.dll.AgInfiniiVision_ConfigureRuntTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViReal64(RuntThresholdLow),
            ViReal64(RuntThresholdHigh),
            ViInt32(RuntPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerSource(self, Vi, Source, TVSignalFormat, TVEvent, TVPolarity):
        status = self.dll.AgInfiniiVision_ConfigureTVTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViInt32(TVSignalFormat),
            ViInt32(TVEvent),
            ViInt32(TVPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureWidthTriggerSource(
        self,
        Vi,
        Source,
        Level,
        WidthLowThreshold,
        WidthHighThreshold,
        WidthPolarity,
        WidthCondition,
    ):
        status = self.dll.AgInfiniiVision_ConfigureWidthTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViReal64(Level),
            ViReal64(WidthLowThreshold),
            ViReal64(WidthHighThreshold),
            ViInt32(WidthPolarity),
            ViInt32(WidthCondition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgInfiniiVision_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def ConfigureChannel(self, Vi, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled):
        status = self.dll.AgInfiniiVision_ConfigureChannel(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(Range),
            ViReal64(Offset),
            ViInt32(Coupling),
            ViReal64(ProbeAttenuation),
            ViBoolean(Enabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChanCharacteristics(self, Vi, Channel, InputImpedance, MaxInputFrequency):
        status = self.dll.AgInfiniiVision_ConfigureChanCharacteristics(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(InputImpedance),
            ViReal64(MaxInputFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefLevels(self, Vi, Low, Mid, High):
        status = self.dll.AgInfiniiVision_ConfigureRefLevels(
            ViSession(Vi), ViReal64(Low), ViReal64(Mid), ViReal64(High)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadWaveform(self, Vi, Channel, WaveformSize, MaxTimeMilliseconds):
        WaveformArray = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniiVision_ReadWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            ViInt32(MaxTimeMilliseconds),
            WaveformArray,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArray = list(WaveformArray)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, ActualPoints, InitialX, XIncrement

    def ReadWaveformMeasurement(self, Vi, Channel, MeasFunction, MaxTimeMilliseconds):
        Measurement = ViReal64()
        status = self.dll.AgInfiniiVision_ReadWaveformMeasurement(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(MeasFunction),
            ViInt32(MaxTimeMilliseconds),
            byref(Measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Measurement.value)

    def ReadMinMaxWaveform(self, Vi, Channel, WaveformSize, MaxTimeMilliseconds):
        MinWaveform = ARRAY_ViReal64(WaveformSize)
        MaxWaveform = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniiVision_ReadMinMaxWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            ViInt32(MaxTimeMilliseconds),
            MinWaveform,
            MaxWaveform,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MinWaveform = list(MinWaveform)
        MaxWaveform = list(MaxWaveform)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement

    def FetchWaveform(self, Vi, Channel, WaveformSize):
        WaveformArray = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniiVision_FetchWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            WaveformArray,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArray = list(WaveformArray)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, ActualPoints, InitialX, XIncrement

    def FetchWaveformMeasurement(self, Vi, Channel, MeasFunction):
        Measurement = ViReal64()
        status = self.dll.AgInfiniiVision_FetchWaveformMeasurement(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(MeasFunction),
            byref(Measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Measurement.value)

    def FetchMinMaxWaveform(self, Vi, Channel, WaveformSize):
        MinWaveform = ARRAY_ViReal64(WaveformSize)
        MaxWaveform = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniiVision_FetchMinMaxWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            MinWaveform,
            MaxWaveform,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MinWaveform = list(MinWaveform)
        MaxWaveform = list(MaxWaveform)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement

    def Abort(self, Vi):
        status = self.dll.AgInfiniiVision_Abort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitiateAcquisition(self, Vi):
        status = self.dll.AgInfiniiVision_InitiateAcquisition(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AcquisitionStatus(self, Vi):
        Status = ViInt32()
        status = self.dll.AgInfiniiVision_AcquisitionStatus(ViSession(Vi), byref(Status))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Status.value)

    def GetMeasurementName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgInfiniiVision_GetMeasurementName(
            ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def MeasurementsAbort(self, Vi):
        status = self.dll.AgInfiniiVision_MeasurementsAbort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsAutoSetup(self, Vi):
        status = self.dll.AgInfiniiVision_MeasurementsAutoSetup(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsInitiate(self, Vi):
        status = self.dll.AgInfiniiVision_MeasurementsInitiate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementsIsInvalidWfmElement(self, Vi, elementValue):
        IsInvalid = ViBoolean()
        status = self.dll.AgInfiniiVision_MeasurementsIsInvalidWfmElement(
            ViSession(Vi), ViReal64(elementValue), byref(IsInvalid)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(IsInvalid.value)

    def MeasurementsAcquisitionStatus(self, Vi):
        Status = ViInt32()
        status = self.dll.AgInfiniiVision_MeasurementsAcquisitionStatus(ViSession(Vi), byref(Status))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Status.value)

    def MeasurementFetchWaveform(self, Vi, Measurement, WaveformSize):
        WaveformArray = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniiVision_MeasurementFetchWaveform(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(WaveformSize),
            WaveformArray,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArray = list(WaveformArray)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, ActualPoints, InitialX, XIncrement

    def MeasurementFetchWaveformMeasurement(self, Vi, Measurement2, MeasFunction):
        Measurement = ViReal64()
        status = self.dll.AgInfiniiVision_MeasurementFetchWaveformMeasurement(
            ViSession(Vi),
            ViConstString(Measurement2),
            ViInt32(MeasFunction),
            byref(Measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Measurement.value)

    def MeasurementFetchMinMaxWaveform(self, Vi, Measurement, WaveformSize):
        MinWaveform = ARRAY_ViReal64(WaveformSize)
        MaxWaveform = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniiVision_MeasurementFetchMinMaxWaveform(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(WaveformSize),
            MinWaveform,
            MaxWaveform,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MinWaveform = list(MinWaveform)
        MaxWaveform = list(MaxWaveform)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement

    def MeasurementReadWaveform(self, Vi, Measurement, WaveformSize, MaxTimeMilliseconds):
        WaveformArray = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniiVision_MeasurementReadWaveform(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(WaveformSize),
            ViInt32(MaxTimeMilliseconds),
            WaveformArray,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArray = list(WaveformArray)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, ActualPoints, InitialX, XIncrement

    def MeasurementReadWaveformMeasurement(self, Vi, Measurement2, MeasFunction, MaxTimeMilliseconds):
        Measurement = ViReal64()
        status = self.dll.AgInfiniiVision_MeasurementReadWaveformMeasurement(
            ViSession(Vi),
            ViConstString(Measurement2),
            ViInt32(MeasFunction),
            ViInt32(MaxTimeMilliseconds),
            byref(Measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Measurement.value)

    def MeasurementReadMinMaxWaveform(self, Vi, Measurement, WaveformSize, MaxTimeMilliseconds):
        MinWaveform = ARRAY_ViReal64(WaveformSize)
        MaxWaveform = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniiVision_MeasurementReadMinMaxWaveform(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(WaveformSize),
            ViInt32(MaxTimeMilliseconds),
            MinWaveform,
            MaxWaveform,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MinWaveform = list(MinWaveform)
        MaxWaveform = list(MaxWaveform)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement

    def MeasurementsClear(self, Vi):
        status = self.dll.AgInfiniiVision_MeasurementsClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementConfigureJitterMeasurement(self, Vi, Measurement, MeasFunction, Slope, NumberOfPeriods, Unit):
        status = self.dll.AgInfiniiVision_MeasurementConfigureJitterMeasurement(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(MeasFunction),
            ViInt32(Slope),
            ViInt32(NumberOfPeriods),
            ViInt32(Unit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementReadJitterMeasurement(
        self,
        Vi,
        Measurement,
        MeasFunction,
        MaxTimeMilliseconds,
        Slope,
        NumberOfPeriods,
        Unit,
    ):
        Result = ViReal64()
        status = self.dll.AgInfiniiVision_MeasurementReadJitterMeasurement(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(MeasFunction),
            ViInt32(MaxTimeMilliseconds),
            ViInt32(Slope),
            ViInt32(NumberOfPeriods),
            ViInt32(Unit),
            byref(Result),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Result.value)

    def FetchJitterMeasurement(self, Vi, Measurement, MeasFunction, Slope, NumberOfPeriods, Unit):
        Result = ViReal64()
        status = self.dll.AgInfiniiVision_FetchJitterMeasurement(
            ViSession(Vi),
            ViConstString(Measurement),
            ViInt32(MeasFunction),
            ViInt32(Slope),
            ViInt32(NumberOfPeriods),
            ViInt32(Unit),
            byref(Result),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Result.value)

    def MeasurementConfigurationConfigureDelay(
        self,
        Vi,
        Source2BufferSize,
        Source2,
        DelaySlope1,
        DelaySlope2,
        DelayOccurrence1,
        DelayOccurrence2,
    ):
        status = self.dll.AgInfiniiVision_MeasurementConfigurationConfigureDelay(
            ViSession(Vi),
            ViInt32(Source2BufferSize),
            ViConstString(Source2),
            ViInt32(DelaySlope1),
            ViInt32(DelaySlope2),
            ViInt32(DelayOccurrence1),
            ViInt32(DelayOccurrence2),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetStatisticsResults(self, Vi, ResultsBufferSize):
        Results = ARRAY_ViChar(ResultsBufferSize)
        status = self.dll.AgInfiniiVision_GetStatisticsResults(ViSession(Vi), ViInt32(ResultsBufferSize), Results)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Results)

    def IncrementStatistics(self, Vi):
        status = self.dll.AgInfiniiVision_IncrementStatistics(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InstallMeasurementStatistics(self, Vi, SourceBufferSize, Source, Measurement):
        status = self.dll.AgInfiniiVision_InstallMeasurementStatistics(
            ViSession(Vi),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
            ViInt32(Measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetStatistics(self, Vi):
        status = self.dll.AgInfiniiVision_ResetStatistics(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrationCalibrate(self, Vi):
        status = self.dll.AgInfiniiVision_CalibrationCalibrate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CalibrationResult(self, Vi, SummaryResultBufferSize, StatusStringBufferSize2):
        StatusString = ARRAY_ViChar(StatusStringBufferSize2)
        StatusCode = ViInt32()
        status = self.dll.AgInfiniiVision_CalibrationResult(
            ViSession(Vi),
            ViInt32(SummaryResultBufferSize),
            ViInt32(StatusStringBufferSize2),
            StatusString,
            byref(StatusCode),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        StatusString = decode(StatusString)
        StatusCode = int(StatusCode.value)
        return StatusString, StatusCode

    def UseCursorPosition(self, Vi, CursorsType):
        status = self.dll.AgInfiniiVision_UseCursorPosition(ViSession(Vi), ViInt32(CursorsType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayErase(self, Vi):
        status = self.dll.AgInfiniiVision_DisplayErase(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayGetScreenBitmap(self, Vi, ImageFormat, Palette, ValBufferSize):
        Val = ARRAY_ViByte(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgInfiniiVision_DisplayGetScreenBitmap(
            ViSession(Vi),
            ViInt32(ImageFormat),
            ViInt32(Palette),
            ViInt32(ValBufferSize),
            Val,
            byref(ValActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def DisplayAnnotationSetColor(self, Vi, Index, Color):
        status = self.dll.AgInfiniiVision_DisplayAnnotationSetColor(ViSession(Vi), ViInt32(Index), ViInt32(Color))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayAnnotationSetBackground(self, Vi, Index, Background):
        status = self.dll.AgInfiniiVision_DisplayAnnotationSetBackground(
            ViSession(Vi), ViInt32(Index), ViInt32(Background)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayAnnotationSetText(self, Vi, Index, Text):
        status = self.dll.AgInfiniiVision_DisplayAnnotationSetText(ViSession(Vi), ViInt32(Index), ViConstString(Text))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayAnnotationSetEnabled(self, Vi, Index, Enabled):
        status = self.dll.AgInfiniiVision_DisplayAnnotationSetEnabled(ViSession(Vi), ViInt32(Index), ViBoolean(Enabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayAnnotationGetBackground(self, Vi, Index):
        Val = ViInt32()
        status = self.dll.AgInfiniiVision_DisplayAnnotationGetBackground(ViSession(Vi), ViInt32(Index), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def DisplayAnnotationGetColor(self, Vi, Index):
        Val = ViInt32()
        status = self.dll.AgInfiniiVision_DisplayAnnotationGetColor(ViSession(Vi), ViInt32(Index), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def DisplayAnnotationGetText(self, Vi, Index, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniiVision_DisplayAnnotationGetText(
            ViSession(Vi), ViInt32(Index), ViInt32(ValBufferSize), Val
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def DisplayAnnotationSetX1Position(self, Vi, Index, Position):
        status = self.dll.AgInfiniiVision_DisplayAnnotationSetX1Position(
            ViSession(Vi), ViInt32(Index), ViReal64(Position)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayAnnotationGetX1Position(self, Vi, Index):
        Val = ViInt64()
        status = self.dll.AgInfiniiVision_DisplayAnnotationGetX1Position(ViSession(Vi), ViInt32(Index), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def DisplayAnnotationSetY1Position(self, Vi, Index, Position):
        status = self.dll.AgInfiniiVision_DisplayAnnotationSetY1Position(
            ViSession(Vi), ViInt32(Index), ViReal64(Position)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayAnnotationGetY1Position(self, Vi, Index):
        Val = ViInt64()
        status = self.dll.AgInfiniiVision_DisplayAnnotationGetY1Position(ViSession(Vi), ViInt32(Index), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def DisplayAnnotationGetEnabled(self, Vi, Index):
        Val = ViBoolean()
        status = self.dll.AgInfiniiVision_DisplayAnnotationGetEnabled(ViSession(Vi), ViInt32(Index), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def StatusClear(self, Vi):
        status = self.dll.AgInfiniiVision_StatusClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusConfigureServiceRequest(self, Vi, Reason):
        status = self.dll.AgInfiniiVision_StatusConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusPreset(self, Vi):
        status = self.dll.AgInfiniiVision_StatusPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusGetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.AgInfiniiVision_StatusGetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatusSetRegister(self, Vi, Register, SubRegister, Val):
        status = self.dll.AgInfiniiVision_StatusSetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemDisableLocalControls(self, Vi):
        status = self.dll.AgInfiniiVision_SystemDisableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemEnableLocalControls(self, Vi):
        status = self.dll.AgInfiniiVision_SystemEnableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemGetState(self, Vi, DataBufferSize):
        Data = ARRAY_ViByte(DataBufferSize)
        DataActualSize = ViInt32()
        status = self.dll.AgInfiniiVision_SystemGetState(
            ViSession(Vi), ViInt32(DataBufferSize), Data, byref(DataActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DataActualSize = int(DataActualSize.value)
        return Data, DataActualSize

    def SystemPutState(self, Vi, DataBufferSize, Data):
        _Data = (ViByte * len(Data))(*Data)
        status = self.dll.AgInfiniiVision_SystemPutState(ViSession(Vi), ViInt32(DataBufferSize), _Data)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRecallState(self, Vi, MemoryLocation):
        status = self.dll.AgInfiniiVision_SystemRecallState(ViSession(Vi), ViInt32(MemoryLocation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemSaveState(self, Vi, MemoryLocation):
        status = self.dll.AgInfiniiVision_SystemSaveState(ViSession(Vi), ViInt32(MemoryLocation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        status = self.dll.AgInfiniiVision_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemClearIO(self, Vi):
        status = self.dll.AgInfiniiVision_SystemClearIO(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWriteBytes(self, Vi, BufferBufferSize, Buffer):
        _Buffer = (ViByte * len(Buffer))(*Buffer)
        status = self.dll.AgInfiniiVision_SystemWriteBytes(ViSession(Vi), ViInt32(BufferBufferSize), _Buffer)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWriteString(self, Vi, DataBufferSize, Data):
        status = self.dll.AgInfiniiVision_SystemWriteString(ViSession(Vi), ViInt32(DataBufferSize), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemReadBytes(self, Vi, ValBufferSize):
        Val = ARRAY_ViByte(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgInfiniiVision_SystemReadBytes(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniiVision_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViByte(BufferSize)
        ReturnCount = ViInt64()
        status = self.dll.AgInfiniiVision_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def viWrite(self, Vi, Count, Buffer):
        _Buffer = (ViByte * len(Buffer))(*Buffer)
        ReturnCount = ViInt64()
        status = self.dll.AgInfiniiVision_viWrite(ViSession(Vi), ViInt64(Count), _Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ReturnCount.value)

    def SystemWriteString2(self, Vi, Data):
        status = self.dll.AgInfiniiVision_SystemWriteString2(ViSession(Vi), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelClearProtection(self, Vi, Channel):
        status = self.dll.AgInfiniiVision_ChannelClearProtection(ViSession(Vi), ViConstString(Channel))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetProbeID(self, Vi, Channel, ProbeIDBufferSize):
        ProbeID = ARRAY_ViChar(ProbeIDBufferSize)
        status = self.dll.AgInfiniiVision_GetProbeID(
            ViSession(Vi), ViConstString(Channel), ViInt32(ProbeIDBufferSize), ProbeID
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ProbeID)

    def GetDigitalChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgInfiniiVision_GetDigitalChannelName(
            ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def DigitalChannelFetchDigitalWaveform(self, Vi, DigitalChannel, WaveformArrayBufferSize):
        WaveformArray = ARRAY_ViByte(WaveformArrayBufferSize)
        WaveformArrayActualSize = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniiVision_DigitalChannelFetchDigitalWaveform(
            ViSession(Vi),
            ViConstString(DigitalChannel),
            ViInt32(WaveformArrayBufferSize),
            WaveformArray,
            byref(WaveformArrayActualSize),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArrayActualSize = int(WaveformArrayActualSize.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, WaveformArrayActualSize, InitialX, XIncrement

    def DigitalChannelReadDigitalWaveform(self, Vi, DigitalChannel, WaveformArrayBufferSize, MaxTime):
        WaveformArray = ARRAY_ViByte(WaveformArrayBufferSize)
        WaveformArrayActualSize = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniiVision_DigitalChannelReadDigitalWaveform(
            ViSession(Vi),
            ViConstString(DigitalChannel),
            ViInt32(WaveformArrayBufferSize),
            WaveformArray,
            byref(WaveformArrayActualSize),
            byref(InitialX),
            byref(XIncrement),
            ViInt32(MaxTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArrayActualSize = int(WaveformArrayActualSize.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, WaveformArrayActualSize, InitialX, XIncrement

    def DigitalChannelReadActivity(self, Vi):
        Edge = ViInt32()
        Level = ViInt32()
        status = self.dll.AgInfiniiVision_DigitalChannelReadActivity(ViSession(Vi), byref(Edge), byref(Level))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Edge = int(Edge.value)
        Level = int(Level.value)
        return Edge, Level

    def DigitalChannelResetActivity(self, Vi):
        status = self.dll.AgInfiniiVision_DigitalChannelResetActivity(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalChannelBusSetDigitalBit(self, Vi, BusType, DigitalBits, BitState):
        status = self.dll.AgInfiniiVision_DigitalChannelBusSetDigitalBit(
            ViSession(Vi), ViInt16(BusType), ViInt16(DigitalBits), ViBoolean(BitState)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalChannelBusSetChannelBit(self, Vi, BusType, ChannelListBufferSize, ChannelList, BitState):
        status = self.dll.AgInfiniiVision_DigitalChannelBusSetChannelBit(
            ViSession(Vi),
            ViInt16(BusType),
            ViInt32(ChannelListBufferSize),
            ViConstString(ChannelList),
            ViBoolean(BitState),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalChannelBusClear(self, Vi, BusType):
        status = self.dll.AgInfiniiVision_DigitalChannelBusClear(ViSession(Vi), ViInt16(BusType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalChannelBusEnable(self, Vi, BusType, ViewState):
        status = self.dll.AgInfiniiVision_DigitalChannelBusEnable(ViSession(Vi), ViInt16(BusType), ViBoolean(ViewState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalChannelBusSetLabel(self, Vi, BusType, LabelBufferSize, Label):
        status = self.dll.AgInfiniiVision_DigitalChannelBusSetLabel(
            ViSession(Vi),
            ViInt16(BusType),
            ViInt32(LabelBufferSize),
            ViConstString(Label),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalChannelBusSetMaskBit(self, Vi, BusType, MaskBitsBufferSize, MaskBits):
        status = self.dll.AgInfiniiVision_DigitalChannelBusSetMaskBit(
            ViSession(Vi),
            ViInt16(BusType),
            ViInt32(MaskBitsBufferSize),
            ViConstString(MaskBits),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DigitalChannelBusGetLabel(self, Vi, BusType, LabelBufferSize, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniiVision_DigitalChannelBusGetLabel(
            ViSession(Vi),
            ViInt16(BusType),
            ViInt32(LabelBufferSize),
            ViInt32(ValBufferSize),
            Val,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def DigitalChannelBusIsEnabled(self, Vi, BusType):
        Val = ViBoolean()
        status = self.dll.AgInfiniiVision_DigitalChannelBusIsEnabled(ViSession(Vi), ViInt16(BusType), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def DigitalChannelBusIsDigitalBitEnabled(self, Vi, BusType, DigtalBits):
        Val = ViBoolean()
        status = self.dll.AgInfiniiVision_DigitalChannelBusIsDigitalBitEnabled(
            ViSession(Vi), ViInt16(BusType), ViInt16(DigtalBits), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def DigitalChannelBusGetMaskBit(self, Vi, BusType, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniiVision_DigitalChannelBusGetMaskBit(
            ViSession(Vi), ViInt16(BusType), ViInt32(ValBufferSize), Val
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def DigitalChannelBusGetChannelBit(self, Vi, BusType, ChannelBitBufferSize, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniiVision_DigitalChannelBusGetChannelBit(
            ViSession(Vi),
            ViInt16(BusType),
            ViInt32(ChannelBitBufferSize),
            ViInt32(ValBufferSize),
            Val,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def MastTestAutoMask(self, Vi):
        status = self.dll.AgInfiniiVision_MastTestAutoMask(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MaskTestReset(self, Vi):
        status = self.dll.AgInfiniiVision_MaskTestReset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MaskTestDelete(self, Vi):
        status = self.dll.AgInfiniiVision_MaskTestDelete(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReferenceWaveformClear(self, Vi, WaveformLocation):
        status = self.dll.AgInfiniiVision_ReferenceWaveformClear(ViSession(Vi), ViInt16(WaveformLocation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReferenceWaveformSave(self, Vi, WaveformLocation, SourceBufferSize, Source):
        status = self.dll.AgInfiniiVision_ReferenceWaveformSave(
            ViSession(Vi),
            ViInt16(WaveformLocation),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReferenceWaveformEnable(self, Vi, WaveformLocation, DisplayState):
        status = self.dll.AgInfiniiVision_ReferenceWaveformEnable(
            ViSession(Vi), ViInt16(WaveformLocation), ViBoolean(DisplayState)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReferenceWaveformIsEnabled(self, Vi, WaveformLocation):
        Val = ViBoolean()
        status = self.dll.AgInfiniiVision_ReferenceWaveformIsEnabled(
            ViSession(Vi), ViInt16(WaveformLocation), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def ReferenceWaveformSetLabel(self, Vi, WaveformLocation, LabelBufferSize, Label):
        status = self.dll.AgInfiniiVision_ReferenceWaveformSetLabel(
            ViSession(Vi),
            ViInt16(WaveformLocation),
            ViInt32(LabelBufferSize),
            ViConstString(Label),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReferenceWaveformGetLabel(self, Vi, WaveformLocation, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniiVision_ReferenceWaveformGetLabel(
            ViSession(Vi), ViInt16(WaveformLocation), ViInt32(ValBufferSize), Val
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def ReferenceWaveformSetSkewFactor(self, Vi, WaveformLocation, Skewfactor):
        status = self.dll.AgInfiniiVision_ReferenceWaveformSetSkewFactor(
            ViSession(Vi), ViInt16(WaveformLocation), ViReal64(Skewfactor)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReferenceWaveformGetSkewFactor(self, Vi, WaveformLocation):
        Val = ViReal64()
        status = self.dll.AgInfiniiVision_ReferenceWaveformGetSkewFactor(
            ViSession(Vi), ViInt16(WaveformLocation), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ReferenceWaveformSetOffset(self, Vi, WaveformLocation, OffsetValue):
        status = self.dll.AgInfiniiVision_ReferenceWaveformSetOffset(
            ViSession(Vi), ViInt16(WaveformLocation), ViReal64(OffsetValue)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReferenceWaveformGetOffset(self, Vi, WaveformLocation):
        Val = ViReal64()
        status = self.dll.AgInfiniiVision_ReferenceWaveformGetOffset(
            ViSession(Vi), ViInt16(WaveformLocation), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ReferenceWaveformSetRange(self, Vi, WaveformLocation, Range):
        status = self.dll.AgInfiniiVision_ReferenceWaveformSetRange(
            ViSession(Vi), ViInt16(WaveformLocation), ViReal64(Range)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReferenceWaveformGetRange(self, Vi, WaveformLocation):
        Val = ViReal64()
        status = self.dll.AgInfiniiVision_ReferenceWaveformGetRange(
            ViSession(Vi), ViInt16(WaveformLocation), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def ReferenceWaveformSetVerticalScale(self, Vi, WaveformLocation, VerticalScale):
        status = self.dll.AgInfiniiVision_ReferenceWaveformSetVerticalScale(
            ViSession(Vi), ViInt16(WaveformLocation), ViReal64(VerticalScale)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReferenceWaveformGetVerticalScale(self, Vi, WaveformLocation):
        Val = ViReal64()
        status = self.dll.AgInfiniiVision_ReferenceWaveformGetVerticalScale(
            ViSession(Vi), ViInt16(WaveformLocation), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def WaveformPreamble(self, Vi, ValBufferSize):
        Val = ARRAY_ViReal64(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgInfiniiVision_WaveformPreamble(
            ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Val = list(Val)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def AcquisitionSingleAcquisition(self, Vi):
        status = self.dll.AgInfiniiVision_AcquisitionSingleAcquisition(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AcquisitionStop(self, Vi):
        status = self.dll.AgInfiniiVision_AcquisitionStop(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AcquisitionSetSampleMode(self, Vi, Mode):
        status = self.dll.AgInfiniiVision_AcquisitionSetSampleMode(ViSession(Vi), ViInt32(Mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWaveformGenerator(self, Vi):
        status = self.dll.AgInfiniiVision_ResetWaveformGenerator(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetArbitraryData(self, Vi, ValuesBufferSize, Values):
        _Values = (ViReal64 * len(Values))(*Values)
        status = self.dll.AgInfiniiVision_SetArbitraryData(ViSession(Vi), ViInt32(ValuesBufferSize), _Values)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetArbitraryDACData(self, Vi, ValuesBufferSize, Values):
        _Values = (ViInt16 * len(Values))(*Values)
        status = self.dll.AgInfiniiVision_SetArbitraryDACData(ViSession(Vi), ViInt32(ValuesBufferSize), _Values)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetArbitrary(self, Vi):
        status = self.dll.AgInfiniiVision_ResetArbitrary(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StoreArbitrary(self, Vi, SourceBufferSize, Source):
        status = self.dll.AgInfiniiVision_StoreArbitrary(
            ViSession(Vi), ViInt32(SourceBufferSize), ViConstString(Source)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemorySave(self, Vi, Options, FileName):
        status = self.dll.AgInfiniiVision_MemorySave(ViSession(Vi), ViInt32(Options), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MemoryRecall(self, Vi, Options, FileName):
        status = self.dll.AgInfiniiVision_MemoryRecall(ViSession(Vi), ViInt32(Options), ViConstString(FileName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ForceTrigger(self, Vi):
        status = self.dll.AgInfiniiVision_ForceTrigger(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerAutoSetup(self, Vi):
        status = self.dll.AgInfiniiVision_TriggerAutoSetup(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerGlitchSetRange(self, Vi, LowerLimit, UpperLimit):
        status = self.dll.AgInfiniiVision_TriggerGlitchSetRange(
            ViSession(Vi), ViReal64(LowerLimit), ViReal64(UpperLimit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerGlitchGetRange(self, Vi):
        LowerLimit = ViReal64()
        UpperLimit = ViReal64()
        status = self.dll.AgInfiniiVision_TriggerGlitchGetRange(ViSession(Vi), byref(LowerLimit), byref(UpperLimit))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        LowerLimit = float(LowerLimit.value)
        UpperLimit = float(UpperLimit.value)
        return LowerLimit, UpperLimit

    def TriggerPatternSetRange(self, Vi, LessThanTime, GreaterThanTime):
        status = self.dll.AgInfiniiVision_TriggerPatternSetRange(
            ViSession(Vi), ViReal64(LessThanTime), ViReal64(GreaterThanTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerPatternGetRange(self, Vi):
        LessThanTime = ViReal64()
        GreaterThanTime = ViReal64()
        status = self.dll.AgInfiniiVision_TriggerPatternGetRange(
            ViSession(Vi), byref(LessThanTime), byref(GreaterThanTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        LessThanTime = float(LessThanTime.value)
        GreaterThanTime = float(GreaterThanTime.value)
        return LessThanTime, GreaterThanTime

    def TriggerPatternConfigure(self, Vi, AnalogPattern, DigitalPattern, Condition):
        status = self.dll.AgInfiniiVision_TriggerPatternConfigure(
            ViSession(Vi),
            ViConstString(AnalogPattern),
            ViConstString(DigitalPattern),
            ViInt32(Condition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerRuntConfigure(self, Vi, SourceBufferSize, Source, ThresholdLow, ThresholdHigh, Polarity):
        status = self.dll.AgInfiniiVision_TriggerRuntConfigure(
            ViSession(Vi),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
            ViReal64(ThresholdLow),
            ViReal64(ThresholdHigh),
            ViInt32(Polarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerWidthConfigure(
        self,
        Vi,
        SourceBufferSize,
        Source,
        Level,
        ThresholdLow,
        ThresholdHigh,
        Polarity,
        Condition,
    ):
        status = self.dll.AgInfiniiVision_TriggerWidthConfigure(
            ViSession(Vi),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
            ViReal64(Level),
            ViReal64(ThresholdLow),
            ViReal64(ThresholdHigh),
            ViInt32(Polarity),
            ViInt32(Condition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerDelay(
        self,
        Vi,
        TriggerSourceBufferSize,
        TriggerSource,
        TriggerSlope,
        EdgeCount,
        ArmingSourceBufferSize,
        ArmingSource,
        ArmingSlope,
        DelayTime,
    ):
        status = self.dll.AgInfiniiVision_ConfigureTriggerDelay(
            ViSession(Vi),
            ViInt32(TriggerSourceBufferSize),
            ViConstString(TriggerSource),
            ViInt32(TriggerSlope),
            ViInt32(EdgeCount),
            ViInt32(ArmingSourceBufferSize),
            ViConstString(ArmingSource),
            ViInt32(ArmingSlope),
            ViReal64(DelayTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerEdgeBurst(self, Vi, SourceBufferSize, Source, Slope, IdleTime, NthEdge):
        status = self.dll.AgInfiniiVision_ConfigureTriggerEdgeBurst(
            ViSession(Vi),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
            ViInt32(Slope),
            ViReal64(IdleTime),
            ViInt32(NthEdge),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerSetupAndHold(
        self,
        Vi,
        ClockSourceBufferSize,
        ClockSource,
        Slope,
        DataSourceBufferSize,
        DataSource,
        SetupTime,
        HoldTime,
    ):
        status = self.dll.AgInfiniiVision_ConfigureTriggerSetupAndHold(
            ViSession(Vi),
            ViInt32(ClockSourceBufferSize),
            ViConstString(ClockSource),
            ViInt32(Slope),
            ViInt32(DataSourceBufferSize),
            ViConstString(DataSource),
            ViReal64(SetupTime),
            ViReal64(HoldTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerTransition(self, Vi, SourceBufferSize, Source, Slope, Condition, QualifierTime):
        status = self.dll.AgInfiniiVision_ConfigureTriggerTransition(
            ViSession(Vi),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
            ViInt32(Slope),
            ViInt32(Condition),
            ViReal64(QualifierTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerUSB(
        self,
        Vi,
        Condition,
        Speed,
        DPlusSourceBufferSize,
        DPlusSource,
        DMinusSourceBufferSize,
        DMinusSource,
    ):
        status = self.dll.AgInfiniiVision_ConfigureTriggerUSB(
            ViSession(Vi),
            ViInt32(Condition),
            ViInt32(Speed),
            ViInt32(DPlusSourceBufferSize),
            ViConstString(DPlusSource),
            ViInt32(DMinusSourceBufferSize),
            ViConstString(DMinusSource),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerZoneGetEnabled(self, Vi, Zone):
        StateEnabled = ViBoolean()
        status = self.dll.AgInfiniiVision_TriggerZoneGetEnabled(ViSession(Vi), ViInt32(Zone), byref(StateEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(StateEnabled.value)

    def TriggerZoneSetEnabled(self, Vi, Zone, StateEnabled):
        status = self.dll.AgInfiniiVision_TriggerZoneSetEnabled(ViSession(Vi), ViInt32(Zone), ViBoolean(StateEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerZoneGetMode(self, Vi, Zone):
        Mode = ViInt32()
        status = self.dll.AgInfiniiVision_TriggerZoneGetMode(ViSession(Vi), ViInt32(Zone), byref(Mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Mode.value)

    def TriggerZoneSetMode(self, Vi, Zone, Mode):
        status = self.dll.AgInfiniiVision_TriggerZoneSetMode(ViSession(Vi), ViInt32(Zone), ViInt32(Mode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerZoneGetZonePlacement(self, Vi, Zone):
        Width = ViReal64()
        Height = ViReal64()
        XCenter = ViReal64()
        YCenter = ViReal64()
        status = self.dll.AgInfiniiVision_TriggerZoneGetZonePlacement(
            ViSession(Vi),
            ViInt32(Zone),
            byref(Width),
            byref(Height),
            byref(XCenter),
            byref(YCenter),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Width = float(Width.value)
        Height = float(Height.value)
        XCenter = float(XCenter.value)
        YCenter = float(YCenter.value)
        return Width, Height, XCenter, YCenter

    def TriggerZoneSetZonePlacement(self, Vi, Zone, Width, Height, XCenter, YCenter):
        status = self.dll.AgInfiniiVision_TriggerZoneSetZonePlacement(
            ViSession(Vi),
            ViInt32(Zone),
            ViReal64(Width),
            ViReal64(Height),
            ViReal64(XCenter),
            ViReal64(YCenter),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerZoneGetValidity(self, Vi, Zone):
        Validity = ViInt32()
        status = self.dll.AgInfiniiVision_TriggerZoneGetValidity(ViSession(Vi), ViInt32(Zone), byref(Validity))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Validity.value)

    def TriggerPXISetMasterArmLine(self, Vi, Index, State):
        status = self.dll.AgInfiniiVision_TriggerPXISetMasterArmLine(ViSession(Vi), ViInt32(Index), ViBoolean(State))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerPXIGetMasterArmLine(self, Vi, Index):
        Val = ViBoolean()
        status = self.dll.AgInfiniiVision_TriggerPXIGetMasterArmLine(ViSession(Vi), ViInt32(Index), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def SegmentedMemoryAnalyze(self, Vi):
        status = self.dll.AgInfiniiVision_SegmentedMemoryAnalyze(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSearchEdge(self, Vi, SourceBufferSize, Source, Slope):
        status = self.dll.AgInfiniiVision_ConfigureSearchEdge(
            ViSession(Vi),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
            ViInt32(Slope),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetSearchGlitchRange(self, Vi, LowerLimit, UpperLimit):
        status = self.dll.AgInfiniiVision_SetSearchGlitchRange(
            ViSession(Vi), ViReal64(LowerLimit), ViReal64(UpperLimit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSearchGlitchRange(self, Vi):
        LowerLimit = ViReal64()
        UpperLimit = ViReal64()
        status = self.dll.AgInfiniiVision_GetSearchGlitchRange(ViSession(Vi), byref(LowerLimit), byref(UpperLimit))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        LowerLimit = float(LowerLimit.value)
        UpperLimit = float(UpperLimit.value)
        return LowerLimit, UpperLimit

    def ConfigureSearchGlitch(self, Vi, SourceBufferSize, Source, Polarity, Condition):
        status = self.dll.AgInfiniiVision_ConfigureSearchGlitch(
            ViSession(Vi),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
            ViInt32(Polarity),
            ViInt32(Condition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSearchRunt(self, Vi, SourceBufferSize, Source, Polarity, Condition, QualifierTime):
        status = self.dll.AgInfiniiVision_ConfigureSearchRunt(
            ViSession(Vi),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
            ViInt32(Polarity),
            ViInt32(Condition),
            ViReal64(QualifierTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSearchTransition(self, Vi, SourceBufferSize, Source, Slope, Condition, QualifierTime):
        status = self.dll.AgInfiniiVision_ConfigureSearchTransition(
            ViSession(Vi),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
            ViInt32(Slope),
            ViInt32(Condition),
            ViReal64(QualifierTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSearchSerialI2SRange(self, Vi):
        LowerLimit = ViInt32()
        UpperLimit = ViInt32()
        status = self.dll.AgInfiniiVision_GetSearchSerialI2SRange(ViSession(Vi), byref(LowerLimit), byref(UpperLimit))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        LowerLimit = int(LowerLimit.value)
        UpperLimit = int(UpperLimit.value)
        return LowerLimit, UpperLimit

    def SetSearchSerialI2SRange(self, Vi, LowerLimitBufferSize, LowerLimit, UpperLimitBufferSize, UpperLimit):
        status = self.dll.AgInfiniiVision_SetSearchSerialI2SRange(
            ViSession(Vi),
            ViInt32(LowerLimitBufferSize),
            ViConstString(LowerLimit),
            ViInt32(UpperLimitBufferSize),
            ViConstString(UpperLimit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSerialBusName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgInfiniiVision_GetSerialBusName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def ResetSerialBusCounters(self, Vi, SerialBus):
        status = self.dll.AgInfiniiVision_ResetSerialBusCounters(ViSession(Vi), ViConstString(SerialBus))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSerialBusI2STriggerRange(self, Vi, SerialBus, LowerLimitBufferSize, UpperLimitBufferSize):
        LowerLimit = ViInt32()
        UpperLimit = ViInt32()
        status = self.dll.AgInfiniiVision_GetSerialBusI2STriggerRange(
            ViSession(Vi),
            ViConstString(SerialBus),
            ViInt32(LowerLimitBufferSize),
            byref(LowerLimit),
            ViInt32(UpperLimitBufferSize),
            byref(UpperLimit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        LowerLimit = int(LowerLimit.value)
        UpperLimit = int(UpperLimit.value)
        return LowerLimit, UpperLimit

    def SetSerialBusI2STriggerRange(
        self,
        Vi,
        SerialBus,
        LowerLimitBufferSize,
        LowerLimit,
        UpperLimitBufferSize,
        UpperLimit,
    ):
        status = self.dll.AgInfiniiVision_SetSerialBusI2STriggerRange(
            ViSession(Vi),
            ViConstString(SerialBus),
            ViInt32(LowerLimitBufferSize),
            ViConstString(LowerLimit),
            ViInt32(UpperLimitBufferSize),
            ViConstString(UpperLimit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetSerialBusUARTCounters(self, Vi, SerialBus):
        status = self.dll.AgInfiniiVision_ResetSerialBusUARTCounters(ViSession(Vi), ViConstString(SerialBus))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetListerData(self, Vi, DataBufferSize):
        Data = ARRAY_ViChar(DataBufferSize)
        status = self.dll.AgInfiniiVision_GetListerData(ViSession(Vi), ViInt32(DataBufferSize), Data)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Data)

    def SerialBusARINC429AutoSetup(self, Vi, SerialBus):
        status = self.dll.AgInfiniiVision_SerialBusARINC429AutoSetup(ViSession(Vi), ViConstString(SerialBus))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetSerialBusARINC429Counters(self, Vi, SerialBus):
        status = self.dll.AgInfiniiVision_ResetSerialBusARINC429Counters(ViSession(Vi), ViConstString(SerialBus))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetSerialBusARINC429TriggerRange(self, Vi, SerialBus):
        LowerLimit = ViInt32()
        UpperLimit = ViInt32()
        status = self.dll.AgInfiniiVision_GetSerialBusARINC429TriggerRange(
            ViSession(Vi), ViConstString(SerialBus), byref(LowerLimit), byref(UpperLimit)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        LowerLimit = int(LowerLimit.value)
        UpperLimit = int(UpperLimit.value)
        return LowerLimit, UpperLimit

    def SetSerialBusARINC429TriggerRange(
        self,
        Vi,
        SerialBus,
        LowerLimitBufferSize,
        LowerLimit,
        UpperLimitBufferSize,
        UpperLimit,
    ):
        status = self.dll.AgInfiniiVision_SetSerialBusARINC429TriggerRange(
            ViSession(Vi),
            ViConstString(SerialBus),
            ViInt32(LowerLimitBufferSize),
            ViConstString(LowerLimit),
            ViInt32(UpperLimitBufferSize),
            ViConstString(UpperLimit),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SerialBusM1553AutoSetup(self, Vi, SerialBus):
        status = self.dll.AgInfiniiVision_SerialBusM1553AutoSetup(ViSession(Vi), ViConstString(SerialBus))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SerialBusFlexRayAutoSetup(self, Vi, SerialBus):
        status = self.dll.AgInfiniiVision_SerialBusFlexRayAutoSetup(ViSession(Vi), ViConstString(SerialBus))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetSerialBusFlexRayCounters(self, Vi, SerialBus):
        status = self.dll.AgInfiniiVision_ResetSerialBusFlexRayCounters(ViSession(Vi), ViConstString(SerialBus))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SerialBusFlexRayTriggerEventAutoSetup(self, Vi, SerialBus):
        status = self.dll.AgInfiniiVision_SerialBusFlexRayTriggerEventAutoSetup(ViSession(Vi), ViConstString(SerialBus))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SerialBusSentGetSignalDisplay(self, Vi, SerialBus, Index):
        Val = ViBoolean()
        status = self.dll.AgInfiniiVision_SerialBusSentGetSignalDisplay(
            ViSession(Vi), ViConstString(SerialBus), ViInt32(Index), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def SerialBusSentGetSignalLength(self, Vi, SerialBus, Index):
        Val = ViInt32()
        status = self.dll.AgInfiniiVision_SerialBusSentGetSignalLength(
            ViSession(Vi), ViConstString(SerialBus), ViInt32(Index), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def SerialBusSentGetSignalMultiplier(self, Vi, SerialBus, Index):
        Val = ViReal64()
        status = self.dll.AgInfiniiVision_SerialBusSentGetSignalMultiplier(
            ViSession(Vi), ViConstString(SerialBus), ViInt32(Index), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def SerialBusSentGetSignalNibbleOrder(self, Vi, SerialBus, Index):
        Val = ViInt32()
        status = self.dll.AgInfiniiVision_SerialBusSentGetSignalNibbleOrder(
            ViSession(Vi), ViConstString(SerialBus), ViInt32(Index), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def SerialBusSentGetSignalOffset(self, Vi, SerialBus, Index):
        Val = ViReal64()
        status = self.dll.AgInfiniiVision_SerialBusSentGetSignalOffset(
            ViSession(Vi), ViConstString(SerialBus), ViInt32(Index), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def SerialBusSentGetSignalStartPosition(self, Vi, SerialBus, Index):
        Val = ViInt32()
        status = self.dll.AgInfiniiVision_SerialBusSentGetSignalStartPosition(
            ViSession(Vi), ViConstString(SerialBus), ViInt32(Index), byref(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def SerialBusSentSetSignalDisplay(self, Vi, SerialBus, Index, StateEnabled):
        status = self.dll.AgInfiniiVision_SerialBusSentSetSignalDisplay(
            ViSession(Vi),
            ViConstString(SerialBus),
            ViInt32(Index),
            ViBoolean(StateEnabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SerialBusSentSetSignalLength(self, Vi, SerialBus, Index, Length):
        status = self.dll.AgInfiniiVision_SerialBusSentSetSignalLength(
            ViSession(Vi), ViConstString(SerialBus), ViInt32(Index), ViInt32(Length)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SerialBusSentSetSignalMultiplier(self, Vi, SerialBus, Index, Multiplier):
        status = self.dll.AgInfiniiVision_SerialBusSentSetSignalMultiplier(
            ViSession(Vi), ViConstString(SerialBus), ViInt32(Index), ViReal64(Multiplier)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SerialBusSentSetSignalNibbleOrder(self, Vi, SerialBus, Index, Order):
        status = self.dll.AgInfiniiVision_SerialBusSentSetSignalNibbleOrder(
            ViSession(Vi), ViConstString(SerialBus), ViInt32(Index), ViInt32(Order)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SerialBusSentSetSignalOffset(self, Vi, SerialBus, Index, Offset):
        status = self.dll.AgInfiniiVision_SerialBusSentSetSignalOffset(
            ViSession(Vi), ViConstString(SerialBus), ViInt32(Index), ViReal64(Offset)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SerialBusSentSetSignalStartPosition(self, Vi, SerialBus, Index, Position):
        status = self.dll.AgInfiniiVision_SerialBusSentSetSignalStartPosition(
            ViSession(Vi), ViConstString(SerialBus), ViInt32(Index), ViInt32(Position)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetMathFunctionName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgInfiniiVision_GetMathFunctionName(
            ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetWaveGenName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgInfiniiVision_GetWaveGenName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def WaveGenReset(self, Vi, WaveGen):
        status = self.dll.AgInfiniiVision_WaveGenReset(ViSession(Vi), ViConstString(WaveGen))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def OutputSingle(self, Vi, WaveGen):
        status = self.dll.AgInfiniiVision_OutputSingle(ViSession(Vi), ViConstString(WaveGen))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TrackingCopySignal(self, Vi, WaveGen):
        status = self.dll.AgInfiniiVision_TrackingCopySignal(ViSession(Vi), ViConstString(WaveGen))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def WaveGenSetArbitraryData(self, Vi, WaveGen, ValuesBufferSize, Values):
        _Values = (ViReal64 * len(Values))(*Values)
        status = self.dll.AgInfiniiVision_WaveGenSetArbitraryData(
            ViSession(Vi), ViConstString(WaveGen), ViInt32(ValuesBufferSize), _Values
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def WaveGenSetArbitraryDACData(self, Vi, WaveGen, ValuesBufferSize, Values):
        _Values = (ViInt16 * len(Values))(*Values)
        status = self.dll.AgInfiniiVision_WaveGenSetArbitraryDACData(
            ViSession(Vi), ViConstString(WaveGen), ViInt32(ValuesBufferSize), _Values
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def WaveGenResetArbitrary(self, Vi, WaveGen):
        status = self.dll.AgInfiniiVision_WaveGenResetArbitrary(ViSession(Vi), ViConstString(WaveGen))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def WaveGenStoreArbitrary(self, Vi, WaveGen, SourceBufferSize, Source):
        status = self.dll.AgInfiniiVision_WaveGenStoreArbitrary(
            ViSession(Vi),
            ViConstString(WaveGen),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CounterConfigure(self, Vi, Mode, NumberOfDigits, SourceBufferSize, Source, TotalizeSlope):
        status = self.dll.AgInfiniiVision_CounterConfigure(
            ViSession(Vi),
            ViInt32(Mode),
            ViInt32(NumberOfDigits),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
            ViInt32(TotalizeSlope),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CounterTotalizeClear(self, Vi):
        status = self.dll.AgInfiniiVision_CounterTotalizeClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CounterTotalizeGatedConfigure(self, Vi, Polarity, SourceBufferSize, Source):
        status = self.dll.AgInfiniiVision_CounterTotalizeGatedConfigure(
            ViSession(Vi),
            ViInt32(Polarity),
            ViInt32(SourceBufferSize),
            ViConstString(Source),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def HistogramReset(self, Vi):
        status = self.dll.AgInfiniiVision_HistogramReset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def HistogramGetResult(self, Vi, ResultType):
        Val = ViReal64()
        status = self.dll.AgInfiniiVision_HistogramGetResult(ViSession(Vi), ViInt32(ResultType), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)

    def JitterConfigureHistogram(self, Vi):
        status = self.dll.AgInfiniiVision_JitterConfigureHistogram(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def JitterTrendConfigure(self, Vi):
        status = self.dll.AgInfiniiVision_JitterTrendConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def JitterTrendConfigureSmoothing(self, Vi):
        status = self.dll.AgInfiniiVision_JitterTrendConfigureSmoothing(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def JitterSpectrumConfigure(self, Vi):
        status = self.dll.AgInfiniiVision_JitterSpectrumConfigure(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClockRecoveryGetMethod(self, Vi, SourceBufferSize):
        ClockMethod = ViInt32()
        DataRate = ViReal64()
        LoopBandwidth = ViReal64()
        DampingFactor = ViReal64()
        Source = ARRAY_ViChar(SourceBufferSize)
        Slope = ViInt32()
        Multiplier = ViInt32()
        status = self.dll.AgInfiniiVision_ClockRecoveryGetMethod(
            ViSession(Vi),
            byref(ClockMethod),
            byref(DataRate),
            byref(LoopBandwidth),
            byref(DampingFactor),
            ViInt32(SourceBufferSize),
            Source,
            byref(Slope),
            byref(Multiplier),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ClockMethod = int(ClockMethod.value)
        DataRate = float(DataRate.value)
        LoopBandwidth = float(LoopBandwidth.value)
        DampingFactor = float(DampingFactor.value)
        Source = decode(Source)
        Slope = int(Slope.value)
        Multiplier = int(Multiplier.value)
        return (
            ClockMethod,
            DataRate,
            LoopBandwidth,
            DampingFactor,
            Source,
            Slope,
            Multiplier,
        )

    def ClockRecoverySetMethod(
        self,
        Vi,
        ClockMethod,
        DataRate,
        LoopBandwidth,
        DampingFactor,
        Source,
        Slope,
        Multiplier,
    ):
        status = self.dll.AgInfiniiVision_ClockRecoverySetMethod(
            ViSession(Vi),
            ViInt32(ClockMethod),
            ViReal64(DataRate),
            ViReal64(LoopBandwidth),
            ViReal64(DampingFactor),
            ViConstString(Source),
            ViInt32(Slope),
            ViInt32(Multiplier),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FFTClear(self, Vi):
        status = self.dll.AgInfiniiVision_FFTClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AnalogBusGetBit(self, Vi, Bit):
        Val = ViBoolean()
        status = self.dll.AgInfiniiVision_AnalogBusGetBit(ViSession(Vi), ViInt16(Bit), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(Val.value)

    def AnalogBusGetBits(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniiVision_AnalogBusGetBits(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def AnalogBusSetBit(self, Vi, Bits, BitState):
        status = self.dll.AgInfiniiVision_AnalogBusSetBit(ViSession(Vi), ViInt16(Bits), ViBoolean(BitState))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AnalogBusSetBits(self, Vi, ChannelList, BitState):
        status = self.dll.AgInfiniiVision_AnalogBusSetBits(
            ViSession(Vi), ViConstString(ChannelList), ViBoolean(BitState)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AnalogBusClear(self, Vi):
        status = self.dll.AgInfiniiVision_AnalogBusClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FRAFetchData(
        self,
        Vi,
        FrequencyBufferSize,
        AmplitudeBufferSize,
        GainBufferSize,
        PhaseBufferSize,
    ):
        Frequency = ARRAY_ViReal64(FrequencyBufferSize)
        FrequencyActualSize = ViInt32()
        Amplitude = ARRAY_ViReal64(AmplitudeBufferSize)
        AmplitudeActualSize = ViInt32()
        Gain = ARRAY_ViReal64(GainBufferSize)
        GainActualSize = ViInt32()
        Phase = ARRAY_ViReal64(PhaseBufferSize)
        PhaseActualSize = ViInt32()
        status = self.dll.AgInfiniiVision_FRAFetchData(
            ViSession(Vi),
            ViInt32(FrequencyBufferSize),
            Frequency,
            byref(FrequencyActualSize),
            ViInt32(AmplitudeBufferSize),
            Amplitude,
            byref(AmplitudeActualSize),
            ViInt32(GainBufferSize),
            Gain,
            byref(GainActualSize),
            ViInt32(PhaseBufferSize),
            Phase,
            byref(PhaseActualSize),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Frequency = list(Frequency)
        FrequencyActualSize = int(FrequencyActualSize.value)
        Amplitude = list(Amplitude)
        AmplitudeActualSize = int(AmplitudeActualSize.value)
        Gain = list(Gain)
        GainActualSize = int(GainActualSize.value)
        Phase = list(Phase)
        PhaseActualSize = int(PhaseActualSize.value)
        return (
            Frequency,
            FrequencyActualSize,
            Amplitude,
            AmplitudeActualSize,
            Gain,
            GainActualSize,
            Phase,
            PhaseActualSize,
        )

    def FRARun(self, Vi):
        status = self.dll.AgInfiniiVision_FRARun(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FRASetAmplitudeProfile(self, Vi, Amplitude, Range):
        status = self.dll.AgInfiniiVision_FRASetAmplitudeProfile(ViSession(Vi), ViReal64(Amplitude), ViInt32(Range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FRAGetAmplitudeProfile(self, Vi, Range):
        Val = ViReal64()
        status = self.dll.AgInfiniiVision_FRAGetAmplitudeProfile(ViSession(Vi), ViInt32(Range), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Val.value)
