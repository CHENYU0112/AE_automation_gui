from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .AgInfiniiVision_dllwrap import *


class AgInfiniiVision(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = AgInfiniiVision_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def IsInvalidWfmElement(self, elementValue):
        """

        :param elementValue:
        :type elementValue:
        """
        return self._dllwrap.IsInvalidWfmElement(self._vi, elementValue)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def GetAttributeViInt64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID)

    def SetAttributeViInt64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ActualRecordLength(self):
        """"""
        return self._dllwrap.ActualRecordLength(self._vi)

    def SampleRate(self):
        """"""
        return self._dllwrap.SampleRate(self._vi)

    def AutoProbeSenseValue(self, ChannelName):
        """

        :param ChannelName:
        :type ChannelName:
        """
        return self._dllwrap.AutoProbeSenseValue(self._vi, ChannelName)

    def SampleMode(self):
        """"""
        return self._dllwrap.SampleMode(self._vi)

    def AutoSetup(self):
        """"""
        return self._dllwrap.AutoSetup(self._vi)

    def ConfigureAcquisitionType(self, AcquisitionType):
        """

        :param AcquisitionType:
        :type AcquisitionType:
        """
        return self._dllwrap.ConfigureAcquisitionType(self._vi, AcquisitionType)

    def ConfigureInterpolation(self, Interpolation):
        """

        :param Interpolation:
        :type Interpolation:
        """
        return self._dllwrap.ConfigureInterpolation(self._vi, Interpolation)

    def ConfigureInitiateContinuous(self, ContinuousAcquisition):
        """

        :param ContinuousAcquisition:
        :type ContinuousAcquisition:
        """
        return self._dllwrap.ConfigureInitiateContinuous(self._vi, ContinuousAcquisition)

    def ConfigureNumAverages(self, NumberOfAverages):
        """

        :param NumberOfAverages:
        :type NumberOfAverages:
        """
        return self._dllwrap.ConfigureNumAverages(self._vi, NumberOfAverages)

    def ConfigureNumEnvelopes(self, NumEnvelopes):
        """

        :param NumEnvelopes:
        :type NumEnvelopes:
        """
        return self._dllwrap.ConfigureNumEnvelopes(self._vi, NumEnvelopes)

    def ConfigureAcquisitionRecord(self, TimePerRecord, MinNumPts, AcquisitionStartTime):
        """

        :param TimePerRecord:
        :type TimePerRecord:
        :param MinNumPts:
        :type MinNumPts:
        :param AcquisitionStartTime:
        :type AcquisitionStartTime:
        """
        return self._dllwrap.ConfigureAcquisitionRecord(self._vi, TimePerRecord, MinNumPts, AcquisitionStartTime)

    def ConfigureTriggerCoupling(self, Coupling):
        """

        :param Coupling:
        :type Coupling:
        """
        return self._dllwrap.ConfigureTriggerCoupling(self._vi, Coupling)

    def ConfigureTVTriggerLineNumber(self, TVLineNumber):
        """

        :param TVLineNumber:
        :type TVLineNumber:
        """
        return self._dllwrap.ConfigureTVTriggerLineNumber(self._vi, TVLineNumber)

    def ConfigureAcLineTriggerSlope(self, ACLineSlope):
        """

        :param ACLineSlope:
        :type ACLineSlope:
        """
        return self._dllwrap.ConfigureAcLineTriggerSlope(self._vi, ACLineSlope)

    def ConfigureTriggerModifier(self, TriggerModifier):
        """

        :param TriggerModifier:
        :type TriggerModifier:
        """
        return self._dllwrap.ConfigureTriggerModifier(self._vi, TriggerModifier)

    def ConfigureTrigger(self, TriggerType, Holdoff):
        """

        :param TriggerType:
        :type TriggerType:
        :param Holdoff:
        :type Holdoff:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, TriggerType, Holdoff)

    def ConfigureEdgeTriggerSource(self, Source, Level, Slope):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.ConfigureEdgeTriggerSource(self._vi, Source, Level, Slope)

    def ConfigureGlitchTriggerSource(self, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param GlitchWidth:
        :type GlitchWidth:
        :param GlitchPolarity:
        :type GlitchPolarity:
        :param GlitchCondition:
        :type GlitchCondition:
        """
        return self._dllwrap.ConfigureGlitchTriggerSource(
            self._vi, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition
        )

    def ConfigureRuntTriggerSource(self, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity):
        """

        :param Source:
        :type Source:
        :param RuntThresholdLow:
        :type RuntThresholdLow:
        :param RuntThresholdHigh:
        :type RuntThresholdHigh:
        :param RuntPolarity:
        :type RuntPolarity:
        """
        return self._dllwrap.ConfigureRuntTriggerSource(
            self._vi, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity
        )

    def ConfigureTVTriggerSource(self, Source, TVSignalFormat, TVEvent, TVPolarity):
        """

        :param Source:
        :type Source:
        :param TVSignalFormat:
        :type TVSignalFormat:
        :param TVEvent:
        :type TVEvent:
        :param TVPolarity:
        :type TVPolarity:
        """
        return self._dllwrap.ConfigureTVTriggerSource(self._vi, Source, TVSignalFormat, TVEvent, TVPolarity)

    def ConfigureWidthTriggerSource(
        self,
        Source,
        Level,
        WidthLowThreshold,
        WidthHighThreshold,
        WidthPolarity,
        WidthCondition,
    ):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param WidthLowThreshold:
        :type WidthLowThreshold:
        :param WidthHighThreshold:
        :type WidthHighThreshold:
        :param WidthPolarity:
        :type WidthPolarity:
        :param WidthCondition:
        :type WidthCondition:
        """
        return self._dllwrap.ConfigureWidthTriggerSource(
            self._vi,
            Source,
            Level,
            WidthLowThreshold,
            WidthHighThreshold,
            WidthPolarity,
            WidthCondition,
        )

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def ConfigureChannel(self, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled):
        """

        :param Channel:
        :type Channel:
        :param Range:
        :type Range:
        :param Offset:
        :type Offset:
        :param Coupling:
        :type Coupling:
        :param ProbeAttenuation:
        :type ProbeAttenuation:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureChannel(self._vi, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled)

    def ConfigureChanCharacteristics(self, Channel, InputImpedance, MaxInputFrequency):
        """

        :param Channel:
        :type Channel:
        :param InputImpedance:
        :type InputImpedance:
        :param MaxInputFrequency:
        :type MaxInputFrequency:
        """
        return self._dllwrap.ConfigureChanCharacteristics(self._vi, Channel, InputImpedance, MaxInputFrequency)

    def ConfigureRefLevels(self, Low, Mid, High):
        """

        :param Low:
        :type Low:
        :param Mid:
        :type Mid:
        :param High:
        :type High:
        """
        return self._dllwrap.ConfigureRefLevels(self._vi, Low, Mid, High)

    def ReadWaveform(self, Channel, WaveformSize, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadWaveform(self._vi, Channel, WaveformSize, MaxTimeMilliseconds)

    def ReadWaveformMeasurement(self, Channel, MeasFunction, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param MeasFunction:
        :type MeasFunction:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadWaveformMeasurement(self._vi, Channel, MeasFunction, MaxTimeMilliseconds)

    def ReadMinMaxWaveform(self, Channel, WaveformSize, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadMinMaxWaveform(self._vi, Channel, WaveformSize, MaxTimeMilliseconds)

    def FetchWaveform(self, Channel, WaveformSize):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        """
        return self._dllwrap.FetchWaveform(self._vi, Channel, WaveformSize)

    def FetchWaveformMeasurement(self, Channel, MeasFunction):
        """

        :param Channel:
        :type Channel:
        :param MeasFunction:
        :type MeasFunction:
        """
        return self._dllwrap.FetchWaveformMeasurement(self._vi, Channel, MeasFunction)

    def FetchMinMaxWaveform(self, Channel, WaveformSize):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        """
        return self._dllwrap.FetchMinMaxWaveform(self._vi, Channel, WaveformSize)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def InitiateAcquisition(self):
        """"""
        return self._dllwrap.InitiateAcquisition(self._vi)

    def AcquisitionStatus(self):
        """"""
        return self._dllwrap.AcquisitionStatus(self._vi)

    def GetMeasurementName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetMeasurementName(self._vi, Index, NameBufferSize)

    def MeasurementsAbort(self):
        """"""
        return self._dllwrap.MeasurementsAbort(self._vi)

    def MeasurementsAutoSetup(self):
        """"""
        return self._dllwrap.MeasurementsAutoSetup(self._vi)

    def MeasurementsInitiate(self):
        """"""
        return self._dllwrap.MeasurementsInitiate(self._vi)

    def MeasurementsIsInvalidWfmElement(self, elementValue):
        """

        :param elementValue:
        :type elementValue:
        """
        return self._dllwrap.MeasurementsIsInvalidWfmElement(self._vi, elementValue)

    def MeasurementsAcquisitionStatus(self):
        """"""
        return self._dllwrap.MeasurementsAcquisitionStatus(self._vi)

    def MeasurementFetchWaveform(self, Measurement, WaveformSize):
        """

        :param Measurement:
        :type Measurement:
        :param WaveformSize:
        :type WaveformSize:
        """
        return self._dllwrap.MeasurementFetchWaveform(self._vi, Measurement, WaveformSize)

    def MeasurementFetchWaveformMeasurement(self, Measurement2, MeasFunction):
        """

        :param Measurement2:
        :type Measurement2:
        :param MeasFunction:
        :type MeasFunction:
        """
        return self._dllwrap.MeasurementFetchWaveformMeasurement(self._vi, Measurement2, MeasFunction)

    def MeasurementFetchMinMaxWaveform(self, Measurement, WaveformSize):
        """

        :param Measurement:
        :type Measurement:
        :param WaveformSize:
        :type WaveformSize:
        """
        return self._dllwrap.MeasurementFetchMinMaxWaveform(self._vi, Measurement, WaveformSize)

    def MeasurementReadWaveform(self, Measurement, WaveformSize, MaxTimeMilliseconds):
        """

        :param Measurement:
        :type Measurement:
        :param WaveformSize:
        :type WaveformSize:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.MeasurementReadWaveform(self._vi, Measurement, WaveformSize, MaxTimeMilliseconds)

    def MeasurementReadWaveformMeasurement(self, Measurement2, MeasFunction, MaxTimeMilliseconds):
        """

        :param Measurement2:
        :type Measurement2:
        :param MeasFunction:
        :type MeasFunction:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.MeasurementReadWaveformMeasurement(
            self._vi, Measurement2, MeasFunction, MaxTimeMilliseconds
        )

    def MeasurementReadMinMaxWaveform(self, Measurement, WaveformSize, MaxTimeMilliseconds):
        """

        :param Measurement:
        :type Measurement:
        :param WaveformSize:
        :type WaveformSize:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.MeasurementReadMinMaxWaveform(self._vi, Measurement, WaveformSize, MaxTimeMilliseconds)

    def MeasurementsClear(self):
        """"""
        return self._dllwrap.MeasurementsClear(self._vi)

    def MeasurementConfigureJitterMeasurement(self, Measurement, MeasFunction, Slope, NumberOfPeriods, Unit):
        """

        :param Measurement:
        :type Measurement:
        :param MeasFunction:
        :type MeasFunction:
        :param Slope:
        :type Slope:
        :param NumberOfPeriods:
        :type NumberOfPeriods:
        :param Unit:
        :type Unit:
        """
        return self._dllwrap.MeasurementConfigureJitterMeasurement(
            self._vi, Measurement, MeasFunction, Slope, NumberOfPeriods, Unit
        )

    def MeasurementReadJitterMeasurement(
        self, Measurement, MeasFunction, MaxTimeMilliseconds, Slope, NumberOfPeriods, Unit
    ):
        """

        :param Measurement:
        :type Measurement:
        :param MeasFunction:
        :type MeasFunction:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param Slope:
        :type Slope:
        :param NumberOfPeriods:
        :type NumberOfPeriods:
        :param Unit:
        :type Unit:
        """
        return self._dllwrap.MeasurementReadJitterMeasurement(
            self._vi,
            Measurement,
            MeasFunction,
            MaxTimeMilliseconds,
            Slope,
            NumberOfPeriods,
            Unit,
        )

    def FetchJitterMeasurement(self, Measurement, MeasFunction, Slope, NumberOfPeriods, Unit):
        """

        :param Measurement:
        :type Measurement:
        :param MeasFunction:
        :type MeasFunction:
        :param Slope:
        :type Slope:
        :param NumberOfPeriods:
        :type NumberOfPeriods:
        :param Unit:
        :type Unit:
        """
        return self._dllwrap.FetchJitterMeasurement(self._vi, Measurement, MeasFunction, Slope, NumberOfPeriods, Unit)

    def MeasurementConfigurationConfigureDelay(
        self,
        Source2BufferSize,
        Source2,
        DelaySlope1,
        DelaySlope2,
        DelayOccurrence1,
        DelayOccurrence2,
    ):
        """

        :param Source2BufferSize:
        :type Source2BufferSize:
        :param Source2:
        :type Source2:
        :param DelaySlope1:
        :type DelaySlope1:
        :param DelaySlope2:
        :type DelaySlope2:
        :param DelayOccurrence1:
        :type DelayOccurrence1:
        :param DelayOccurrence2:
        :type DelayOccurrence2:
        """
        return self._dllwrap.MeasurementConfigurationConfigureDelay(
            self._vi,
            Source2BufferSize,
            Source2,
            DelaySlope1,
            DelaySlope2,
            DelayOccurrence1,
            DelayOccurrence2,
        )

    def GetStatisticsResults(self, ResultsBufferSize):
        """

        :param ResultsBufferSize:
        :type ResultsBufferSize:
        """
        return self._dllwrap.GetStatisticsResults(self._vi, ResultsBufferSize)

    def IncrementStatistics(self):
        """"""
        return self._dllwrap.IncrementStatistics(self._vi)

    def InstallMeasurementStatistics(self, SourceBufferSize, Source, Measurement):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        :param Measurement:
        :type Measurement:
        """
        return self._dllwrap.InstallMeasurementStatistics(self._vi, SourceBufferSize, Source, Measurement)

    def ResetStatistics(self):
        """"""
        return self._dllwrap.ResetStatistics(self._vi)

    def CalibrationCalibrate(self):
        """"""
        return self._dllwrap.CalibrationCalibrate(self._vi)

    def CalibrationResult(self, SummaryResultBufferSize, StatusStringBufferSize2):
        """

        :param SummaryResultBufferSize:
        :type SummaryResultBufferSize:
        :param StatusStringBufferSize2:
        :type StatusStringBufferSize2:
        """
        return self._dllwrap.CalibrationResult(self._vi, SummaryResultBufferSize, StatusStringBufferSize2)

    def UseCursorPosition(self, CursorsType):
        """

        :param CursorsType:
        :type CursorsType:
        """
        return self._dllwrap.UseCursorPosition(self._vi, CursorsType)

    def DisplayErase(self):
        """"""
        return self._dllwrap.DisplayErase(self._vi)

    def DisplayGetScreenBitmap(self, ImageFormat, Palette, ValBufferSize):
        """

        :param ImageFormat:
        :type ImageFormat:
        :param Palette:
        :type Palette:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.DisplayGetScreenBitmap(self._vi, ImageFormat, Palette, ValBufferSize)

    def DisplayAnnotationSetColor(self, Index, Color):
        """

        :param Index:
        :type Index:
        :param Color:
        :type Color:
        """
        return self._dllwrap.DisplayAnnotationSetColor(self._vi, Index, Color)

    def DisplayAnnotationSetBackground(self, Index, Background):
        """

        :param Index:
        :type Index:
        :param Background:
        :type Background:
        """
        return self._dllwrap.DisplayAnnotationSetBackground(self._vi, Index, Background)

    def DisplayAnnotationSetText(self, Index, Text):
        """

        :param Index:
        :type Index:
        :param Text:
        :type Text:
        """
        return self._dllwrap.DisplayAnnotationSetText(self._vi, Index, Text)

    def DisplayAnnotationSetEnabled(self, Index, Enabled):
        """

        :param Index:
        :type Index:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.DisplayAnnotationSetEnabled(self._vi, Index, Enabled)

    def DisplayAnnotationGetBackground(self, Index):
        """

        :param Index:
        :type Index:
        """
        return self._dllwrap.DisplayAnnotationGetBackground(self._vi, Index)

    def DisplayAnnotationGetColor(self, Index):
        """

        :param Index:
        :type Index:
        """
        return self._dllwrap.DisplayAnnotationGetColor(self._vi, Index)

    def DisplayAnnotationGetText(self, Index, ValBufferSize):
        """

        :param Index:
        :type Index:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.DisplayAnnotationGetText(self._vi, Index, ValBufferSize)

    def DisplayAnnotationSetX1Position(self, Index, Position):
        """

        :param Index:
        :type Index:
        :param Position:
        :type Position:
        """
        return self._dllwrap.DisplayAnnotationSetX1Position(self._vi, Index, Position)

    def DisplayAnnotationGetX1Position(self, Index):
        """

        :param Index:
        :type Index:
        """
        return self._dllwrap.DisplayAnnotationGetX1Position(self._vi, Index)

    def DisplayAnnotationSetY1Position(self, Index, Position):
        """

        :param Index:
        :type Index:
        :param Position:
        :type Position:
        """
        return self._dllwrap.DisplayAnnotationSetY1Position(self._vi, Index, Position)

    def DisplayAnnotationGetY1Position(self, Index):
        """

        :param Index:
        :type Index:
        """
        return self._dllwrap.DisplayAnnotationGetY1Position(self._vi, Index)

    def DisplayAnnotationGetEnabled(self, Index):
        """

        :param Index:
        :type Index:
        """
        return self._dllwrap.DisplayAnnotationGetEnabled(self._vi, Index)

    def StatusClear(self):
        """"""
        return self._dllwrap.StatusClear(self._vi)

    def StatusConfigureServiceRequest(self, Reason):
        """

        :param Reason:
        :type Reason:
        """
        return self._dllwrap.StatusConfigureServiceRequest(self._vi, Reason)

    def StatusPreset(self):
        """"""
        return self._dllwrap.StatusPreset(self._vi)

    def StatusGetRegister(self, Register, SubRegister):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        """
        return self._dllwrap.StatusGetRegister(self._vi, Register, SubRegister)

    def StatusSetRegister(self, Register, SubRegister, Val):
        """

        :param Register:
        :type Register:
        :param SubRegister:
        :type SubRegister:
        :param Val:
        :type Val:
        """
        return self._dllwrap.StatusSetRegister(self._vi, Register, SubRegister, Val)

    def SystemDisableLocalControls(self):
        """"""
        return self._dllwrap.SystemDisableLocalControls(self._vi)

    def SystemEnableLocalControls(self):
        """"""
        return self._dllwrap.SystemEnableLocalControls(self._vi)

    def SystemGetState(self, DataBufferSize):
        """

        :param DataBufferSize:
        :type DataBufferSize:
        """
        return self._dllwrap.SystemGetState(self._vi, DataBufferSize)

    def SystemPutState(self, DataBufferSize, Data):
        """

        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemPutState(self._vi, DataBufferSize, Data)

    def SystemRecallState(self, MemoryLocation):
        """

        :param MemoryLocation:
        :type MemoryLocation:
        """
        return self._dllwrap.SystemRecallState(self._vi, MemoryLocation)

    def SystemSaveState(self, MemoryLocation):
        """

        :param MemoryLocation:
        :type MemoryLocation:
        """
        return self._dllwrap.SystemSaveState(self._vi, MemoryLocation)

    def SystemWaitForOperationComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.SystemWaitForOperationComplete(self._vi, MaxTimeMilliseconds)

    def SystemClearIO(self):
        """"""
        return self._dllwrap.SystemClearIO(self._vi)

    def SystemWriteBytes(self, BufferBufferSize, Buffer):
        """

        :param BufferBufferSize:
        :type BufferBufferSize:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.SystemWriteBytes(self._vi, BufferBufferSize, Buffer)

    def SystemWriteString(self, DataBufferSize, Data):
        """

        :param DataBufferSize:
        :type DataBufferSize:
        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString(self._vi, DataBufferSize, Data)

    def SystemReadBytes(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadBytes(self._vi, ValBufferSize)

    def SystemReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.SystemReadString(self._vi, ValBufferSize)

    def viRead(self, BufferSize):
        """

        :param BufferSize:
        :type BufferSize:
        """
        return self._dllwrap.viRead(self._vi, BufferSize)

    def viWrite(self, Count, Buffer):
        """

        :param Count:
        :type Count:
        :param Buffer:
        :type Buffer:
        """
        return self._dllwrap.viWrite(self._vi, Count, Buffer)

    def SystemWriteString2(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.SystemWriteString2(self._vi, Data)

    def ChannelClearProtection(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.ChannelClearProtection(self._vi, Channel)

    def GetProbeID(self, Channel, ProbeIDBufferSize):
        """

        :param Channel:
        :type Channel:
        :param ProbeIDBufferSize:
        :type ProbeIDBufferSize:
        """
        return self._dllwrap.GetProbeID(self._vi, Channel, ProbeIDBufferSize)

    def GetDigitalChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetDigitalChannelName(self._vi, Index, NameBufferSize)

    def DigitalChannelFetchDigitalWaveform(self, DigitalChannel, WaveformArrayBufferSize):
        """

        :param DigitalChannel:
        :type DigitalChannel:
        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        """
        return self._dllwrap.DigitalChannelFetchDigitalWaveform(self._vi, DigitalChannel, WaveformArrayBufferSize)

    def DigitalChannelReadDigitalWaveform(self, DigitalChannel, WaveformArrayBufferSize, MaxTime):
        """

        :param DigitalChannel:
        :type DigitalChannel:
        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        :param MaxTime:
        :type MaxTime:
        """
        return self._dllwrap.DigitalChannelReadDigitalWaveform(
            self._vi, DigitalChannel, WaveformArrayBufferSize, MaxTime
        )

    def DigitalChannelReadActivity(self):
        """"""
        return self._dllwrap.DigitalChannelReadActivity(self._vi)

    def DigitalChannelResetActivity(self):
        """"""
        return self._dllwrap.DigitalChannelResetActivity(self._vi)

    def DigitalChannelBusSetDigitalBit(self, BusType, DigitalBits, BitState):
        """

        :param BusType:
        :type BusType:
        :param DigitalBits:
        :type DigitalBits:
        :param BitState:
        :type BitState:
        """
        return self._dllwrap.DigitalChannelBusSetDigitalBit(self._vi, BusType, DigitalBits, BitState)

    def DigitalChannelBusSetChannelBit(self, BusType, ChannelListBufferSize, ChannelList, BitState):
        """

        :param BusType:
        :type BusType:
        :param ChannelListBufferSize:
        :type ChannelListBufferSize:
        :param ChannelList:
        :type ChannelList:
        :param BitState:
        :type BitState:
        """
        return self._dllwrap.DigitalChannelBusSetChannelBit(
            self._vi, BusType, ChannelListBufferSize, ChannelList, BitState
        )

    def DigitalChannelBusClear(self, BusType):
        """

        :param BusType:
        :type BusType:
        """
        return self._dllwrap.DigitalChannelBusClear(self._vi, BusType)

    def DigitalChannelBusEnable(self, BusType, ViewState):
        """

        :param BusType:
        :type BusType:
        :param ViewState:
        :type ViewState:
        """
        return self._dllwrap.DigitalChannelBusEnable(self._vi, BusType, ViewState)

    def DigitalChannelBusSetLabel(self, BusType, LabelBufferSize, Label):
        """

        :param BusType:
        :type BusType:
        :param LabelBufferSize:
        :type LabelBufferSize:
        :param Label:
        :type Label:
        """
        return self._dllwrap.DigitalChannelBusSetLabel(self._vi, BusType, LabelBufferSize, Label)

    def DigitalChannelBusSetMaskBit(self, BusType, MaskBitsBufferSize, MaskBits):
        """

        :param BusType:
        :type BusType:
        :param MaskBitsBufferSize:
        :type MaskBitsBufferSize:
        :param MaskBits:
        :type MaskBits:
        """
        return self._dllwrap.DigitalChannelBusSetMaskBit(self._vi, BusType, MaskBitsBufferSize, MaskBits)

    def DigitalChannelBusGetLabel(self, BusType, LabelBufferSize, ValBufferSize):
        """

        :param BusType:
        :type BusType:
        :param LabelBufferSize:
        :type LabelBufferSize:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.DigitalChannelBusGetLabel(self._vi, BusType, LabelBufferSize, ValBufferSize)

    def DigitalChannelBusIsEnabled(self, BusType):
        """

        :param BusType:
        :type BusType:
        """
        return self._dllwrap.DigitalChannelBusIsEnabled(self._vi, BusType)

    def DigitalChannelBusIsDigitalBitEnabled(self, BusType, DigtalBits):
        """

        :param BusType:
        :type BusType:
        :param DigtalBits:
        :type DigtalBits:
        """
        return self._dllwrap.DigitalChannelBusIsDigitalBitEnabled(self._vi, BusType, DigtalBits)

    def DigitalChannelBusGetMaskBit(self, BusType, ValBufferSize):
        """

        :param BusType:
        :type BusType:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.DigitalChannelBusGetMaskBit(self._vi, BusType, ValBufferSize)

    def DigitalChannelBusGetChannelBit(self, BusType, ChannelBitBufferSize, ValBufferSize):
        """

        :param BusType:
        :type BusType:
        :param ChannelBitBufferSize:
        :type ChannelBitBufferSize:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.DigitalChannelBusGetChannelBit(self._vi, BusType, ChannelBitBufferSize, ValBufferSize)

    def MastTestAutoMask(self):
        """"""
        return self._dllwrap.MastTestAutoMask(self._vi)

    def MaskTestReset(self):
        """"""
        return self._dllwrap.MaskTestReset(self._vi)

    def MaskTestDelete(self):
        """"""
        return self._dllwrap.MaskTestDelete(self._vi)

    def ReferenceWaveformClear(self, WaveformLocation):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        """
        return self._dllwrap.ReferenceWaveformClear(self._vi, WaveformLocation)

    def ReferenceWaveformSave(self, WaveformLocation, SourceBufferSize, Source):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ReferenceWaveformSave(self._vi, WaveformLocation, SourceBufferSize, Source)

    def ReferenceWaveformEnable(self, WaveformLocation, DisplayState):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        :param DisplayState:
        :type DisplayState:
        """
        return self._dllwrap.ReferenceWaveformEnable(self._vi, WaveformLocation, DisplayState)

    def ReferenceWaveformIsEnabled(self, WaveformLocation):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        """
        return self._dllwrap.ReferenceWaveformIsEnabled(self._vi, WaveformLocation)

    def ReferenceWaveformSetLabel(self, WaveformLocation, LabelBufferSize, Label):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        :param LabelBufferSize:
        :type LabelBufferSize:
        :param Label:
        :type Label:
        """
        return self._dllwrap.ReferenceWaveformSetLabel(self._vi, WaveformLocation, LabelBufferSize, Label)

    def ReferenceWaveformGetLabel(self, WaveformLocation, ValBufferSize):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReferenceWaveformGetLabel(self._vi, WaveformLocation, ValBufferSize)

    def ReferenceWaveformSetSkewFactor(self, WaveformLocation, Skewfactor):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        :param Skewfactor:
        :type Skewfactor:
        """
        return self._dllwrap.ReferenceWaveformSetSkewFactor(self._vi, WaveformLocation, Skewfactor)

    def ReferenceWaveformGetSkewFactor(self, WaveformLocation):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        """
        return self._dllwrap.ReferenceWaveformGetSkewFactor(self._vi, WaveformLocation)

    def ReferenceWaveformSetOffset(self, WaveformLocation, OffsetValue):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        :param OffsetValue:
        :type OffsetValue:
        """
        return self._dllwrap.ReferenceWaveformSetOffset(self._vi, WaveformLocation, OffsetValue)

    def ReferenceWaveformGetOffset(self, WaveformLocation):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        """
        return self._dllwrap.ReferenceWaveformGetOffset(self._vi, WaveformLocation)

    def ReferenceWaveformSetRange(self, WaveformLocation, Range):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        :param Range:
        :type Range:
        """
        return self._dllwrap.ReferenceWaveformSetRange(self._vi, WaveformLocation, Range)

    def ReferenceWaveformGetRange(self, WaveformLocation):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        """
        return self._dllwrap.ReferenceWaveformGetRange(self._vi, WaveformLocation)

    def ReferenceWaveformSetVerticalScale(self, WaveformLocation, VerticalScale):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        :param VerticalScale:
        :type VerticalScale:
        """
        return self._dllwrap.ReferenceWaveformSetVerticalScale(self._vi, WaveformLocation, VerticalScale)

    def ReferenceWaveformGetVerticalScale(self, WaveformLocation):
        """

        :param WaveformLocation:
        :type WaveformLocation:
        """
        return self._dllwrap.ReferenceWaveformGetVerticalScale(self._vi, WaveformLocation)

    def WaveformPreamble(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.WaveformPreamble(self._vi, ValBufferSize)

    def AcquisitionSingleAcquisition(self):
        """"""
        return self._dllwrap.AcquisitionSingleAcquisition(self._vi)

    def AcquisitionStop(self):
        """"""
        return self._dllwrap.AcquisitionStop(self._vi)

    def AcquisitionSetSampleMode(self, Mode):
        """

        :param Mode:
        :type Mode:
        """
        return self._dllwrap.AcquisitionSetSampleMode(self._vi, Mode)

    def ResetWaveformGenerator(self):
        """"""
        return self._dllwrap.ResetWaveformGenerator(self._vi)

    def SetArbitraryData(self, ValuesBufferSize, Values):
        """

        :param ValuesBufferSize:
        :type ValuesBufferSize:
        :param Values:
        :type Values:
        """
        return self._dllwrap.SetArbitraryData(self._vi, ValuesBufferSize, Values)

    def SetArbitraryDACData(self, ValuesBufferSize, Values):
        """

        :param ValuesBufferSize:
        :type ValuesBufferSize:
        :param Values:
        :type Values:
        """
        return self._dllwrap.SetArbitraryDACData(self._vi, ValuesBufferSize, Values)

    def ResetArbitrary(self):
        """"""
        return self._dllwrap.ResetArbitrary(self._vi)

    def StoreArbitrary(self, SourceBufferSize, Source):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        """
        return self._dllwrap.StoreArbitrary(self._vi, SourceBufferSize, Source)

    def MemorySave(self, Options, FileName):
        """

        :param Options:
        :type Options:
        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemorySave(self._vi, Options, FileName)

    def MemoryRecall(self, Options, FileName):
        """

        :param Options:
        :type Options:
        :param FileName:
        :type FileName:
        """
        return self._dllwrap.MemoryRecall(self._vi, Options, FileName)

    def ForceTrigger(self):
        """"""
        return self._dllwrap.ForceTrigger(self._vi)

    def TriggerAutoSetup(self):
        """"""
        return self._dllwrap.TriggerAutoSetup(self._vi)

    def TriggerGlitchSetRange(self, LowerLimit, UpperLimit):
        """

        :param LowerLimit:
        :type LowerLimit:
        :param UpperLimit:
        :type UpperLimit:
        """
        return self._dllwrap.TriggerGlitchSetRange(self._vi, LowerLimit, UpperLimit)

    def TriggerGlitchGetRange(self):
        """"""
        return self._dllwrap.TriggerGlitchGetRange(self._vi)

    def TriggerPatternSetRange(self, LessThanTime, GreaterThanTime):
        """

        :param LessThanTime:
        :type LessThanTime:
        :param GreaterThanTime:
        :type GreaterThanTime:
        """
        return self._dllwrap.TriggerPatternSetRange(self._vi, LessThanTime, GreaterThanTime)

    def TriggerPatternGetRange(self):
        """"""
        return self._dllwrap.TriggerPatternGetRange(self._vi)

    def TriggerPatternConfigure(self, AnalogPattern, DigitalPattern, Condition):
        """

        :param AnalogPattern:
        :type AnalogPattern:
        :param DigitalPattern:
        :type DigitalPattern:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.TriggerPatternConfigure(self._vi, AnalogPattern, DigitalPattern, Condition)

    def TriggerRuntConfigure(self, SourceBufferSize, Source, ThresholdLow, ThresholdHigh, Polarity):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        :param ThresholdLow:
        :type ThresholdLow:
        :param ThresholdHigh:
        :type ThresholdHigh:
        :param Polarity:
        :type Polarity:
        """
        return self._dllwrap.TriggerRuntConfigure(
            self._vi, SourceBufferSize, Source, ThresholdLow, ThresholdHigh, Polarity
        )

    def TriggerWidthConfigure(
        self,
        SourceBufferSize,
        Source,
        Level,
        ThresholdLow,
        ThresholdHigh,
        Polarity,
        Condition,
    ):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param ThresholdLow:
        :type ThresholdLow:
        :param ThresholdHigh:
        :type ThresholdHigh:
        :param Polarity:
        :type Polarity:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.TriggerWidthConfigure(
            self._vi,
            SourceBufferSize,
            Source,
            Level,
            ThresholdLow,
            ThresholdHigh,
            Polarity,
            Condition,
        )

    def ConfigureTriggerDelay(
        self,
        TriggerSourceBufferSize,
        TriggerSource,
        TriggerSlope,
        EdgeCount,
        ArmingSourceBufferSize,
        ArmingSource,
        ArmingSlope,
        DelayTime,
    ):
        """

        :param TriggerSourceBufferSize:
        :type TriggerSourceBufferSize:
        :param TriggerSource:
        :type TriggerSource:
        :param TriggerSlope:
        :type TriggerSlope:
        :param EdgeCount:
        :type EdgeCount:
        :param ArmingSourceBufferSize:
        :type ArmingSourceBufferSize:
        :param ArmingSource:
        :type ArmingSource:
        :param ArmingSlope:
        :type ArmingSlope:
        :param DelayTime:
        :type DelayTime:
        """
        return self._dllwrap.ConfigureTriggerDelay(
            self._vi,
            TriggerSourceBufferSize,
            TriggerSource,
            TriggerSlope,
            EdgeCount,
            ArmingSourceBufferSize,
            ArmingSource,
            ArmingSlope,
            DelayTime,
        )

    def ConfigureTriggerEdgeBurst(self, SourceBufferSize, Source, Slope, IdleTime, NthEdge):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        :param Slope:
        :type Slope:
        :param IdleTime:
        :type IdleTime:
        :param NthEdge:
        :type NthEdge:
        """
        return self._dllwrap.ConfigureTriggerEdgeBurst(self._vi, SourceBufferSize, Source, Slope, IdleTime, NthEdge)

    def ConfigureTriggerSetupAndHold(
        self,
        ClockSourceBufferSize,
        ClockSource,
        Slope,
        DataSourceBufferSize,
        DataSource,
        SetupTime,
        HoldTime,
    ):
        """

        :param ClockSourceBufferSize:
        :type ClockSourceBufferSize:
        :param ClockSource:
        :type ClockSource:
        :param Slope:
        :type Slope:
        :param DataSourceBufferSize:
        :type DataSourceBufferSize:
        :param DataSource:
        :type DataSource:
        :param SetupTime:
        :type SetupTime:
        :param HoldTime:
        :type HoldTime:
        """
        return self._dllwrap.ConfigureTriggerSetupAndHold(
            self._vi,
            ClockSourceBufferSize,
            ClockSource,
            Slope,
            DataSourceBufferSize,
            DataSource,
            SetupTime,
            HoldTime,
        )

    def ConfigureTriggerTransition(self, SourceBufferSize, Source, Slope, Condition, QualifierTime):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        :param Slope:
        :type Slope:
        :param Condition:
        :type Condition:
        :param QualifierTime:
        :type QualifierTime:
        """
        return self._dllwrap.ConfigureTriggerTransition(
            self._vi, SourceBufferSize, Source, Slope, Condition, QualifierTime
        )

    def ConfigureTriggerUSB(
        self,
        Condition,
        Speed,
        DPlusSourceBufferSize,
        DPlusSource,
        DMinusSourceBufferSize,
        DMinusSource,
    ):
        """

        :param Condition:
        :type Condition:
        :param Speed:
        :type Speed:
        :param DPlusSourceBufferSize:
        :type DPlusSourceBufferSize:
        :param DPlusSource:
        :type DPlusSource:
        :param DMinusSourceBufferSize:
        :type DMinusSourceBufferSize:
        :param DMinusSource:
        :type DMinusSource:
        """
        return self._dllwrap.ConfigureTriggerUSB(
            self._vi,
            Condition,
            Speed,
            DPlusSourceBufferSize,
            DPlusSource,
            DMinusSourceBufferSize,
            DMinusSource,
        )

    def TriggerZoneGetEnabled(self, Zone):
        """

        :param Zone:
        :type Zone:
        """
        return self._dllwrap.TriggerZoneGetEnabled(self._vi, Zone)

    def TriggerZoneSetEnabled(self, Zone, StateEnabled):
        """

        :param Zone:
        :type Zone:
        :param StateEnabled:
        :type StateEnabled:
        """
        return self._dllwrap.TriggerZoneSetEnabled(self._vi, Zone, StateEnabled)

    def TriggerZoneGetMode(self, Zone):
        """

        :param Zone:
        :type Zone:
        """
        return self._dllwrap.TriggerZoneGetMode(self._vi, Zone)

    def TriggerZoneSetMode(self, Zone, Mode):
        """

        :param Zone:
        :type Zone:
        :param Mode:
        :type Mode:
        """
        return self._dllwrap.TriggerZoneSetMode(self._vi, Zone, Mode)

    def TriggerZoneGetZonePlacement(self, Zone):
        """

        :param Zone:
        :type Zone:
        """
        return self._dllwrap.TriggerZoneGetZonePlacement(self._vi, Zone)

    def TriggerZoneSetZonePlacement(self, Zone, Width, Height, XCenter, YCenter):
        """

        :param Zone:
        :type Zone:
        :param Width:
        :type Width:
        :param Height:
        :type Height:
        :param XCenter:
        :type XCenter:
        :param YCenter:
        :type YCenter:
        """
        return self._dllwrap.TriggerZoneSetZonePlacement(self._vi, Zone, Width, Height, XCenter, YCenter)

    def TriggerZoneGetValidity(self, Zone):
        """

        :param Zone:
        :type Zone:
        """
        return self._dllwrap.TriggerZoneGetValidity(self._vi, Zone)

    def TriggerPXISetMasterArmLine(self, Index, State):
        """

        :param Index:
        :type Index:
        :param State:
        :type State:
        """
        return self._dllwrap.TriggerPXISetMasterArmLine(self._vi, Index, State)

    def TriggerPXIGetMasterArmLine(self, Index):
        """

        :param Index:
        :type Index:
        """
        return self._dllwrap.TriggerPXIGetMasterArmLine(self._vi, Index)

    def SegmentedMemoryAnalyze(self):
        """"""
        return self._dllwrap.SegmentedMemoryAnalyze(self._vi)

    def ConfigureSearchEdge(self, SourceBufferSize, Source, Slope):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.ConfigureSearchEdge(self._vi, SourceBufferSize, Source, Slope)

    def SetSearchGlitchRange(self, LowerLimit, UpperLimit):
        """

        :param LowerLimit:
        :type LowerLimit:
        :param UpperLimit:
        :type UpperLimit:
        """
        return self._dllwrap.SetSearchGlitchRange(self._vi, LowerLimit, UpperLimit)

    def GetSearchGlitchRange(self):
        """"""
        return self._dllwrap.GetSearchGlitchRange(self._vi)

    def ConfigureSearchGlitch(self, SourceBufferSize, Source, Polarity, Condition):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        :param Polarity:
        :type Polarity:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.ConfigureSearchGlitch(self._vi, SourceBufferSize, Source, Polarity, Condition)

    def ConfigureSearchRunt(self, SourceBufferSize, Source, Polarity, Condition, QualifierTime):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        :param Polarity:
        :type Polarity:
        :param Condition:
        :type Condition:
        :param QualifierTime:
        :type QualifierTime:
        """
        return self._dllwrap.ConfigureSearchRunt(self._vi, SourceBufferSize, Source, Polarity, Condition, QualifierTime)

    def ConfigureSearchTransition(self, SourceBufferSize, Source, Slope, Condition, QualifierTime):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        :param Slope:
        :type Slope:
        :param Condition:
        :type Condition:
        :param QualifierTime:
        :type QualifierTime:
        """
        return self._dllwrap.ConfigureSearchTransition(
            self._vi, SourceBufferSize, Source, Slope, Condition, QualifierTime
        )

    def GetSearchSerialI2SRange(self):
        """"""
        return self._dllwrap.GetSearchSerialI2SRange(self._vi)

    def SetSearchSerialI2SRange(self, LowerLimitBufferSize, LowerLimit, UpperLimitBufferSize, UpperLimit):
        """

        :param LowerLimitBufferSize:
        :type LowerLimitBufferSize:
        :param LowerLimit:
        :type LowerLimit:
        :param UpperLimitBufferSize:
        :type UpperLimitBufferSize:
        :param UpperLimit:
        :type UpperLimit:
        """
        return self._dllwrap.SetSearchSerialI2SRange(
            self._vi, LowerLimitBufferSize, LowerLimit, UpperLimitBufferSize, UpperLimit
        )

    def GetSerialBusName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetSerialBusName(self._vi, Index, NameBufferSize)

    def ResetSerialBusCounters(self, SerialBus):
        """

        :param SerialBus:
        :type SerialBus:
        """
        return self._dllwrap.ResetSerialBusCounters(self._vi, SerialBus)

    def GetSerialBusI2STriggerRange(self, SerialBus, LowerLimitBufferSize, UpperLimitBufferSize):
        """

        :param SerialBus:
        :type SerialBus:
        :param LowerLimitBufferSize:
        :type LowerLimitBufferSize:
        :param UpperLimitBufferSize:
        :type UpperLimitBufferSize:
        """
        return self._dllwrap.GetSerialBusI2STriggerRange(
            self._vi, SerialBus, LowerLimitBufferSize, UpperLimitBufferSize
        )

    def SetSerialBusI2STriggerRange(
        self,
        SerialBus,
        LowerLimitBufferSize,
        LowerLimit,
        UpperLimitBufferSize,
        UpperLimit,
    ):
        """

        :param SerialBus:
        :type SerialBus:
        :param LowerLimitBufferSize:
        :type LowerLimitBufferSize:
        :param LowerLimit:
        :type LowerLimit:
        :param UpperLimitBufferSize:
        :type UpperLimitBufferSize:
        :param UpperLimit:
        :type UpperLimit:
        """
        return self._dllwrap.SetSerialBusI2STriggerRange(
            self._vi,
            SerialBus,
            LowerLimitBufferSize,
            LowerLimit,
            UpperLimitBufferSize,
            UpperLimit,
        )

    def ResetSerialBusUARTCounters(self, SerialBus):
        """

        :param SerialBus:
        :type SerialBus:
        """
        return self._dllwrap.ResetSerialBusUARTCounters(self._vi, SerialBus)

    def GetListerData(self, DataBufferSize):
        """

        :param DataBufferSize:
        :type DataBufferSize:
        """
        return self._dllwrap.GetListerData(self._vi, DataBufferSize)

    def SerialBusARINC429AutoSetup(self, SerialBus):
        """

        :param SerialBus:
        :type SerialBus:
        """
        return self._dllwrap.SerialBusARINC429AutoSetup(self._vi, SerialBus)

    def ResetSerialBusARINC429Counters(self, SerialBus):
        """

        :param SerialBus:
        :type SerialBus:
        """
        return self._dllwrap.ResetSerialBusARINC429Counters(self._vi, SerialBus)

    def GetSerialBusARINC429TriggerRange(self, SerialBus):
        """

        :param SerialBus:
        :type SerialBus:
        """
        return self._dllwrap.GetSerialBusARINC429TriggerRange(self._vi, SerialBus)

    def SetSerialBusARINC429TriggerRange(
        self,
        SerialBus,
        LowerLimitBufferSize,
        LowerLimit,
        UpperLimitBufferSize,
        UpperLimit,
    ):
        """

        :param SerialBus:
        :type SerialBus:
        :param LowerLimitBufferSize:
        :type LowerLimitBufferSize:
        :param LowerLimit:
        :type LowerLimit:
        :param UpperLimitBufferSize:
        :type UpperLimitBufferSize:
        :param UpperLimit:
        :type UpperLimit:
        """
        return self._dllwrap.SetSerialBusARINC429TriggerRange(
            self._vi,
            SerialBus,
            LowerLimitBufferSize,
            LowerLimit,
            UpperLimitBufferSize,
            UpperLimit,
        )

    def SerialBusM1553AutoSetup(self, SerialBus):
        """

        :param SerialBus:
        :type SerialBus:
        """
        return self._dllwrap.SerialBusM1553AutoSetup(self._vi, SerialBus)

    def SerialBusFlexRayAutoSetup(self, SerialBus):
        """

        :param SerialBus:
        :type SerialBus:
        """
        return self._dllwrap.SerialBusFlexRayAutoSetup(self._vi, SerialBus)

    def ResetSerialBusFlexRayCounters(self, SerialBus):
        """

        :param SerialBus:
        :type SerialBus:
        """
        return self._dllwrap.ResetSerialBusFlexRayCounters(self._vi, SerialBus)

    def SerialBusFlexRayTriggerEventAutoSetup(self, SerialBus):
        """

        :param SerialBus:
        :type SerialBus:
        """
        return self._dllwrap.SerialBusFlexRayTriggerEventAutoSetup(self._vi, SerialBus)

    def SerialBusSentGetSignalDisplay(self, SerialBus, Index):
        """

        :param SerialBus:
        :type SerialBus:
        :param Index:
        :type Index:
        """
        return self._dllwrap.SerialBusSentGetSignalDisplay(self._vi, SerialBus, Index)

    def SerialBusSentGetSignalLength(self, SerialBus, Index):
        """

        :param SerialBus:
        :type SerialBus:
        :param Index:
        :type Index:
        """
        return self._dllwrap.SerialBusSentGetSignalLength(self._vi, SerialBus, Index)

    def SerialBusSentGetSignalMultiplier(self, SerialBus, Index):
        """

        :param SerialBus:
        :type SerialBus:
        :param Index:
        :type Index:
        """
        return self._dllwrap.SerialBusSentGetSignalMultiplier(self._vi, SerialBus, Index)

    def SerialBusSentGetSignalNibbleOrder(self, SerialBus, Index):
        """

        :param SerialBus:
        :type SerialBus:
        :param Index:
        :type Index:
        """
        return self._dllwrap.SerialBusSentGetSignalNibbleOrder(self._vi, SerialBus, Index)

    def SerialBusSentGetSignalOffset(self, SerialBus, Index):
        """

        :param SerialBus:
        :type SerialBus:
        :param Index:
        :type Index:
        """
        return self._dllwrap.SerialBusSentGetSignalOffset(self._vi, SerialBus, Index)

    def SerialBusSentGetSignalStartPosition(self, SerialBus, Index):
        """

        :param SerialBus:
        :type SerialBus:
        :param Index:
        :type Index:
        """
        return self._dllwrap.SerialBusSentGetSignalStartPosition(self._vi, SerialBus, Index)

    def SerialBusSentSetSignalDisplay(self, SerialBus, Index, StateEnabled):
        """

        :param SerialBus:
        :type SerialBus:
        :param Index:
        :type Index:
        :param StateEnabled:
        :type StateEnabled:
        """
        return self._dllwrap.SerialBusSentSetSignalDisplay(self._vi, SerialBus, Index, StateEnabled)

    def SerialBusSentSetSignalLength(self, SerialBus, Index, Length):
        """

        :param SerialBus:
        :type SerialBus:
        :param Index:
        :type Index:
        :param Length:
        :type Length:
        """
        return self._dllwrap.SerialBusSentSetSignalLength(self._vi, SerialBus, Index, Length)

    def SerialBusSentSetSignalMultiplier(self, SerialBus, Index, Multiplier):
        """

        :param SerialBus:
        :type SerialBus:
        :param Index:
        :type Index:
        :param Multiplier:
        :type Multiplier:
        """
        return self._dllwrap.SerialBusSentSetSignalMultiplier(self._vi, SerialBus, Index, Multiplier)

    def SerialBusSentSetSignalNibbleOrder(self, SerialBus, Index, Order):
        """

        :param SerialBus:
        :type SerialBus:
        :param Index:
        :type Index:
        :param Order:
        :type Order:
        """
        return self._dllwrap.SerialBusSentSetSignalNibbleOrder(self._vi, SerialBus, Index, Order)

    def SerialBusSentSetSignalOffset(self, SerialBus, Index, Offset):
        """

        :param SerialBus:
        :type SerialBus:
        :param Index:
        :type Index:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.SerialBusSentSetSignalOffset(self._vi, SerialBus, Index, Offset)

    def SerialBusSentSetSignalStartPosition(self, SerialBus, Index, Position):
        """

        :param SerialBus:
        :type SerialBus:
        :param Index:
        :type Index:
        :param Position:
        :type Position:
        """
        return self._dllwrap.SerialBusSentSetSignalStartPosition(self._vi, SerialBus, Index, Position)

    def GetMathFunctionName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetMathFunctionName(self._vi, Index, NameBufferSize)

    def GetWaveGenName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetWaveGenName(self._vi, Index, NameBufferSize)

    def WaveGenReset(self, WaveGen):
        """

        :param WaveGen:
        :type WaveGen:
        """
        return self._dllwrap.WaveGenReset(self._vi, WaveGen)

    def OutputSingle(self, WaveGen):
        """

        :param WaveGen:
        :type WaveGen:
        """
        return self._dllwrap.OutputSingle(self._vi, WaveGen)

    def TrackingCopySignal(self, WaveGen):
        """

        :param WaveGen:
        :type WaveGen:
        """
        return self._dllwrap.TrackingCopySignal(self._vi, WaveGen)

    def WaveGenSetArbitraryData(self, WaveGen, ValuesBufferSize, Values):
        """

        :param WaveGen:
        :type WaveGen:
        :param ValuesBufferSize:
        :type ValuesBufferSize:
        :param Values:
        :type Values:
        """
        return self._dllwrap.WaveGenSetArbitraryData(self._vi, WaveGen, ValuesBufferSize, Values)

    def WaveGenSetArbitraryDACData(self, WaveGen, ValuesBufferSize, Values):
        """

        :param WaveGen:
        :type WaveGen:
        :param ValuesBufferSize:
        :type ValuesBufferSize:
        :param Values:
        :type Values:
        """
        return self._dllwrap.WaveGenSetArbitraryDACData(self._vi, WaveGen, ValuesBufferSize, Values)

    def WaveGenResetArbitrary(self, WaveGen):
        """

        :param WaveGen:
        :type WaveGen:
        """
        return self._dllwrap.WaveGenResetArbitrary(self._vi, WaveGen)

    def WaveGenStoreArbitrary(self, WaveGen, SourceBufferSize, Source):
        """

        :param WaveGen:
        :type WaveGen:
        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        """
        return self._dllwrap.WaveGenStoreArbitrary(self._vi, WaveGen, SourceBufferSize, Source)

    def CounterConfigure(self, Mode, NumberOfDigits, SourceBufferSize, Source, TotalizeSlope):
        """

        :param Mode:
        :type Mode:
        :param NumberOfDigits:
        :type NumberOfDigits:
        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        :param TotalizeSlope:
        :type TotalizeSlope:
        """
        return self._dllwrap.CounterConfigure(self._vi, Mode, NumberOfDigits, SourceBufferSize, Source, TotalizeSlope)

    def CounterTotalizeClear(self):
        """"""
        return self._dllwrap.CounterTotalizeClear(self._vi)

    def CounterTotalizeGatedConfigure(self, Polarity, SourceBufferSize, Source):
        """

        :param Polarity:
        :type Polarity:
        :param SourceBufferSize:
        :type SourceBufferSize:
        :param Source:
        :type Source:
        """
        return self._dllwrap.CounterTotalizeGatedConfigure(self._vi, Polarity, SourceBufferSize, Source)

    def HistogramReset(self):
        """"""
        return self._dllwrap.HistogramReset(self._vi)

    def HistogramGetResult(self, ResultType):
        """

        :param ResultType:
        :type ResultType:
        """
        return self._dllwrap.HistogramGetResult(self._vi, ResultType)

    def JitterConfigureHistogram(self):
        """"""
        return self._dllwrap.JitterConfigureHistogram(self._vi)

    def JitterTrendConfigure(self):
        """"""
        return self._dllwrap.JitterTrendConfigure(self._vi)

    def JitterTrendConfigureSmoothing(self):
        """"""
        return self._dllwrap.JitterTrendConfigureSmoothing(self._vi)

    def JitterSpectrumConfigure(self):
        """"""
        return self._dllwrap.JitterSpectrumConfigure(self._vi)

    def ClockRecoveryGetMethod(self, SourceBufferSize):
        """

        :param SourceBufferSize:
        :type SourceBufferSize:
        """
        return self._dllwrap.ClockRecoveryGetMethod(self._vi, SourceBufferSize)

    def ClockRecoverySetMethod(
        self,
        ClockMethod,
        DataRate,
        LoopBandwidth,
        DampingFactor,
        Source,
        Slope,
        Multiplier,
    ):
        """

        :param ClockMethod:
        :type ClockMethod:
        :param DataRate:
        :type DataRate:
        :param LoopBandwidth:
        :type LoopBandwidth:
        :param DampingFactor:
        :type DampingFactor:
        :param Source:
        :type Source:
        :param Slope:
        :type Slope:
        :param Multiplier:
        :type Multiplier:
        """
        return self._dllwrap.ClockRecoverySetMethod(
            self._vi,
            ClockMethod,
            DataRate,
            LoopBandwidth,
            DampingFactor,
            Source,
            Slope,
            Multiplier,
        )

    def FFTClear(self):
        """"""
        return self._dllwrap.FFTClear(self._vi)

    def AnalogBusGetBit(self, Bit):
        """

        :param Bit:
        :type Bit:
        """
        return self._dllwrap.AnalogBusGetBit(self._vi, Bit)

    def AnalogBusGetBits(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.AnalogBusGetBits(self._vi, ValBufferSize)

    def AnalogBusSetBit(self, Bits, BitState):
        """

        :param Bits:
        :type Bits:
        :param BitState:
        :type BitState:
        """
        return self._dllwrap.AnalogBusSetBit(self._vi, Bits, BitState)

    def AnalogBusSetBits(self, ChannelList, BitState):
        """

        :param ChannelList:
        :type ChannelList:
        :param BitState:
        :type BitState:
        """
        return self._dllwrap.AnalogBusSetBits(self._vi, ChannelList, BitState)

    def AnalogBusClear(self):
        """"""
        return self._dllwrap.AnalogBusClear(self._vi)

    def FRAFetchData(self, FrequencyBufferSize, AmplitudeBufferSize, GainBufferSize, PhaseBufferSize):
        """

        :param FrequencyBufferSize:
        :type FrequencyBufferSize:
        :param AmplitudeBufferSize:
        :type AmplitudeBufferSize:
        :param GainBufferSize:
        :type GainBufferSize:
        :param PhaseBufferSize:
        :type PhaseBufferSize:
        """
        return self._dllwrap.FRAFetchData(
            self._vi,
            FrequencyBufferSize,
            AmplitudeBufferSize,
            GainBufferSize,
            PhaseBufferSize,
        )

    def FRARun(self):
        """"""
        return self._dllwrap.FRARun(self._vi)

    def FRASetAmplitudeProfile(self, Amplitude, Range):
        """

        :param Amplitude:
        :type Amplitude:
        :param Range:
        :type Range:
        """
        return self._dllwrap.FRASetAmplitudeProfile(self._vi, Amplitude, Range)

    def FRAGetAmplitudeProfile(self, Range):
        """

        :param Range:
        :type Range:
        """
        return self._dllwrap.FRAGetAmplitudeProfile(self._vi, Range)
