from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .lcscope_dllwrap import *


class lcscope(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = lcscope_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :keyword OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        # Enforce no id-query since new devices are not supported otherwise
        self._vi = self._dllwrap.InitWithOptions(ResourceName, False, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def IsInvalidWfmElement(self, ElementValue):
        """

        :param ElementValue:
        :type ElementValue:
        """
        return self._dllwrap.IsInvalidWfmElement(self._vi, ElementValue)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViInt64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViInt64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ActualRecordLength(self):
        """"""
        return self._dllwrap.ActualRecordLength(self._vi)

    def SampleRate(self):
        """"""
        return self._dllwrap.SampleRate(self._vi)

    def AutoProbeSenseValue(self, ChannelName):
        """

        :param ChannelName:
        :type ChannelName:
        """
        return self._dllwrap.AutoProbeSenseValue(self._vi, ChannelName)

    def SampleMode(self):
        """"""
        return self._dllwrap.SampleMode(self._vi)

    def AutoSetup(self):
        """"""
        return self._dllwrap.AutoSetup(self._vi)

    def ConfigureAcquisitionType(self, AcquisitionType):
        """

        :param AcquisitionType:
        :type AcquisitionType:
        """
        return self._dllwrap.ConfigureAcquisitionType(self._vi, AcquisitionType)

    def ConfigureInterpolation(self, Interpolation):
        """

        :param Interpolation:
        :type Interpolation:
        """
        return self._dllwrap.ConfigureInterpolation(self._vi, Interpolation)

    def ConfigureInitiateContinuous(self, ContinuousAcquisition):
        """

        :param ContinuousAcquisition:
        :type ContinuousAcquisition:
        """
        return self._dllwrap.ConfigureInitiateContinuous(self._vi, ContinuousAcquisition)

    def ConfigureNumAverages(self, NumberOfAverages):
        """

        :param NumberOfAverages:
        :type NumberOfAverages:
        """
        return self._dllwrap.ConfigureNumAverages(self._vi, NumberOfAverages)

    def ConfigureAcquisitionRecord(self, TimePerRecord, MinNumPts, AcquisitionStartTime):
        """

        :param TimePerRecord:
        :type TimePerRecord:
        :param MinNumPts:
        :type MinNumPts:
        :param AcquisitionStartTime:
        :type AcquisitionStartTime:
        """
        return self._dllwrap.ConfigureAcquisitionRecord(self._vi, TimePerRecord, MinNumPts, AcquisitionStartTime)

    def ConfigureTriggerCoupling(self, Coupling):
        """

        :param Coupling:
        :type Coupling:
        """
        return self._dllwrap.ConfigureTriggerCoupling(self._vi, Coupling)

    def ConfigureTVTriggerLineNumber(self, TVLineNumber):
        """

        :param TVLineNumber:
        :type TVLineNumber:
        """
        return self._dllwrap.ConfigureTVTriggerLineNumber(self._vi, TVLineNumber)

    def ConfigureAcLineTriggerSlope(self, ACLineSlope):
        """

        :param ACLineSlope:
        :type ACLineSlope:
        """
        return self._dllwrap.ConfigureAcLineTriggerSlope(self._vi, ACLineSlope)

    def ConfigureTriggerModifier(self, TriggerModifier):
        """

        :param TriggerModifier:
        :type TriggerModifier:
        """
        return self._dllwrap.ConfigureTriggerModifier(self._vi, TriggerModifier)

    def ConfigureTrigger(self, TriggerType, Holdoff):
        """

        :param TriggerType:
        :type TriggerType:
        :param Holdoff:
        :type Holdoff:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, TriggerType, Holdoff)

    def ConfigureEdgeTriggerSource(self, Source, Level, Slope):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.ConfigureEdgeTriggerSource(self._vi, Source, Level, Slope)

    def ConfigureGlitchTriggerSource(self, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param GlitchWidth:
        :type GlitchWidth:
        :param GlitchPolarity:
        :type GlitchPolarity:
        :param GlitchCondition:
        :type GlitchCondition:
        """
        return self._dllwrap.ConfigureGlitchTriggerSource(
            self._vi, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition
        )

    def ConfigureRuntTriggerSource(self, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity):
        """

        :param Source:
        :type Source:
        :param RuntThresholdLow:
        :type RuntThresholdLow:
        :param RuntThresholdHigh:
        :type RuntThresholdHigh:
        :param RuntPolarity:
        :type RuntPolarity:
        """
        return self._dllwrap.ConfigureRuntTriggerSource(
            self._vi, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity
        )

    def ConfigureTVTriggerSource(self, Source, TVSignalFormat, TVEvent, TVPolarity):
        """

        :param Source:
        :type Source:
        :param TVSignalFormat:
        :type TVSignalFormat:
        :param TVEvent:
        :type TVEvent:
        :param TVPolarity:
        :type TVPolarity:
        """
        return self._dllwrap.ConfigureTVTriggerSource(self._vi, Source, TVSignalFormat, TVEvent, TVPolarity)

    def ConfigureWidthTriggerSource(
        self,
        Source,
        Level,
        WidthLowThreshold,
        WidthHighThreshold,
        WidthPolarity,
        WidthCondition,
    ):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param WidthLowThreshold:
        :type WidthLowThreshold:
        :param WidthHighThreshold:
        :type WidthHighThreshold:
        :param WidthPolarity:
        :type WidthPolarity:
        :param WidthCondition:
        :type WidthCondition:
        """
        return self._dllwrap.ConfigureWidthTriggerSource(
            self._vi,
            Source,
            Level,
            WidthLowThreshold,
            WidthHighThreshold,
            WidthPolarity,
            WidthCondition,
        )

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def ConfigureChannel(self, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled):
        """

        :param Channel:
        :type Channel:
        :param Range:
        :type Range:
        :param Offset:
        :type Offset:
        :param Coupling:
        :type Coupling:
        :param ProbeAttenuation:
        :type ProbeAttenuation:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureChannel(self._vi, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled)

    def ConfigureChanCharacteristics(self, Channel, InputImpedance, MaxInputFrequency):
        """

        :param Channel:
        :type Channel:
        :param InputImpedance:
        :type InputImpedance:
        :param MaxInputFrequency:
        :type MaxInputFrequency:
        """
        return self._dllwrap.ConfigureChanCharacteristics(self._vi, Channel, InputImpedance, MaxInputFrequency)

    def ConfigureRefLevels(self, Low, Mid, High):
        """

        :param Low:
        :type Low:
        :param Mid:
        :type Mid:
        :param High:
        :type High:
        """
        return self._dllwrap.ConfigureRefLevels(self._vi, Low, Mid, High)

    def ReadWaveform(self, Channel, WaveformSize, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadWaveform(self._vi, Channel, WaveformSize, MaxTimeMilliseconds)

    def ReadWaveformMeasurement(self, Channel, MeasFunction, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param MeasFunction:
        :type MeasFunction:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadWaveformMeasurement(self._vi, Channel, MeasFunction, MaxTimeMilliseconds)

    def ReadMinMaxWaveform(self, Channel, WaveformSize, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadMinMaxWaveform(self._vi, Channel, WaveformSize, MaxTimeMilliseconds)

    def FetchWaveform(self, Channel, WaveformSize):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        """
        return self._dllwrap.FetchWaveform(self._vi, Channel, WaveformSize)

    def FetchWaveformMeasurement(self, Channel, MeasFunction):
        """

        :param Channel:
        :type Channel:
        :param MeasFunction:
        :type MeasFunction:
        """
        return self._dllwrap.FetchWaveformMeasurement(self._vi, Channel, MeasFunction)

    def FetchMinMaxWaveform(self, Channel, WaveformSize):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        """
        return self._dllwrap.FetchMinMaxWaveform(self._vi, Channel, WaveformSize)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def InitiateAcquisition(self):
        """"""
        return self._dllwrap.InitiateAcquisition(self._vi)

    def AcquisitionStatus(self):
        """"""
        return self._dllwrap.AcquisitionStatus(self._vi)

    def WriteString(self, Data):
        """

        :param Data:
        :type Data:
        """
        return self._dllwrap.WriteString(self._vi, Data)

    def ReadString(self, MaxTimeMilliseconds, retValBufferSize):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param retValBufferSize:
        :type retValBufferSize:
        """
        return self._dllwrap.ReadString(self._vi, MaxTimeMilliseconds, retValBufferSize)
