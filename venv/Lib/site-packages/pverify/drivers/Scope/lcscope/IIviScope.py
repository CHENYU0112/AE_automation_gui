from __future__ import annotations

import pyvisa as visa
from pyvisa.resources.messagebased import MessageBasedResource as _MessageBasedResource

from pverify.core.lab.ivi.helper import InstrumentError
from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper

from .lcscope import *


class IIviScope(IVICOMDriverWrapper):
    def __init__(self):
        super().__init__()

        self.dllwrap = lcscope()
        self.__Initialized = False

        from . import IIviScopeEnums

        self.Enums = IIviScopeEnums

        from .IIviDriverOperation import IIviDriverOperation

        self.DriverOperation = IIviDriverOperation(self)

        from .IIviDriverIdentity import IIviDriverIdentity

        self.Identity = IIviDriverIdentity(self)

        from .IIviDriverUtility import IIviDriverUtility

        self.Utility = IIviDriverUtility(self)

        from .IIviScopeAcquisition import IIviScopeAcquisition

        self.Acquisition = IIviScopeAcquisition(self)

        from .IIviScopeChannels import IIviScopeChannels

        self.Channels = IIviScopeChannels(self)

        from .IIviScopeMeasurements import IIviScopeMeasurements

        self.Measurements = IIviScopeMeasurements(self)

        from .IIviScopeReferenceLevel import IIviScopeReferenceLevel

        self.ReferenceLevel = IIviScopeReferenceLevel(self)

        from .IIviScopeTrigger import IIviScopeTrigger

        self.Trigger = IIviScopeTrigger(self)

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def drivername(self):
        return self.dllwrap.drivername

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        :type OptionString: str
        """
        self._resourcename = ResourceName
        self._idquery = IdQuery
        self._optionstring = OptionString
        try:
            self.dllwrap.Initialize(self._resourcename, self._idquery, Reset, self._optionstring)
        except InstrumentError as ie:
            # Implemented workaround for jira INICIO_DEV-963 (Initialize without reset depends on current trigger type)
            if ie.status_hex == "0xBFFA0059" and bool(Reset) is False:
                # open scope with visa
                rm = visa.ResourceManager()
                viscope: _MessageBasedResource = _MessageBasedResource(rm, self._resourcename)
                viscope.open()
                viscope.read_termination = "\n"
                # fetch current trigger type
                cur_trigger_type = viscope.query(r"""VBS? 'return = app.Acquisition.Trigger.Type'""")
                # set to safe trigger type
                safe_trigger_type = "Edge"
                viscope.write(rf"""VBS 'app.Acquisition.Trigger.Type = "{safe_trigger_type}"'""")
                _ = viscope.query(r"""VBS? 'return = app.Acquisition.Trigger.Type'""")
                # retry initialize
                viscope.close()
                self.dllwrap.Initialize(self._resourcename, self._idquery, Reset, self._optionstring)
                # For some reason it is necessary to read back the Trigger Type after setting for this to work reliably.
                # Nothing else worked.
                self.dllwrap.WriteString(rf"""VBS 'app.Acquisition.Trigger.Type = "{cur_trigger_type}"' """)
                self.dllwrap.WriteString(r"""VBS? 'return = app.Acquisition.Trigger.Type'""")
                self.dllwrap.ReadString(int(1e3), 1024).strip("\n")
            else:
                raise ie

        self.__Initialized = True
        self.IDN = (
            f"{self.Identity.Vendor}, {self.Identity.InstrumentModel}, n.a., {self.Identity.InstrumentFirmwareRevision}"
        )

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self.dllwrap.Close()
        self.__Initialized = False

    def ConfigureDisplay(self, GridMode):
        """
        Configure the displays gridmode

        :param GridMode: The gridmode to display.
                         Valid values:

                           - "Auto" Automatically choose grid mode, one trace per grid
                           - "Dual" Dual grid mode
                           - "Octal" Octal grid mode
                           - "Quad" Quad grid mode
                           - "Single" Single grid mode
                           - "XY" XY grid mode
                           - "XYDual" XY + Dual grid mode
                           - "XYSingle" XY + Single grid mode

        :type GridMode: str
        """
        self.dllwrap.WriteString(f"""VBS 'app.Display.GridMode = "{GridMode}"'""")
