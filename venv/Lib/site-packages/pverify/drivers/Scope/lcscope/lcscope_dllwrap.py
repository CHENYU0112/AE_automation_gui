from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import lcscope_const as const
from .lcscope_const import *


class lcscope_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("lcscope.dll", "lcscope_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "lcscope"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.lcscope_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.lcscope_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.lcscope_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.lcscope_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.lcscope_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(1024)
        status = self.dll.lcscope_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.lcscope_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, Vi):
        status = self.dll.lcscope_ClearInterchangeWarnings(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(1024)
        status = self.dll.lcscope_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def GetNextInterchangeWarning(self, Vi, InterchangeWarningBufferSize):
        InterchangeWarning = ARRAY_ViChar(1024)
        status = self.dll.lcscope_GetNextInterchangeWarning(
            ViSession(Vi), ViInt32(InterchangeWarningBufferSize), InterchangeWarning
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(InterchangeWarning)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.lcscope_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetInterchangeCheck(self, Vi):
        status = self.dll.lcscope_ResetInterchangeCheck(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.lcscope_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.lcscope_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.lcscope_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.lcscope_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.lcscope_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.lcscope_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.lcscope_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def IsInvalidWfmElement(self, Vi, ElementValue):
        IsInvalid = ViBoolean()
        status = self.dll.lcscope_IsInvalidWfmElement(ViSession(Vi), ViReal64(ElementValue), byref(IsInvalid))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(IsInvalid.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.lcscope_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt64()
        status = self.dll.lcscope_GetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.lcscope_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.lcscope_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.lcscope_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(1024)
        status = self.dll.lcscope_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.lcscope_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViInt64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.lcscope_SetAttributeViInt64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.lcscope_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.lcscope_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.lcscope_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.lcscope_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ActualRecordLength(self, Vi):
        ActualRecordLength = ViInt32()
        status = self.dll.lcscope_ActualRecordLength(ViSession(Vi), byref(ActualRecordLength))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ActualRecordLength.value)

    def SampleRate(self, Vi):
        SampleRate = ViReal64()
        status = self.dll.lcscope_SampleRate(ViSession(Vi), byref(SampleRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(SampleRate.value)

    def AutoProbeSenseValue(self, Vi, ChannelName):
        AutoProbeSenseValue = ViReal64()
        status = self.dll.lcscope_AutoProbeSenseValue(
            ViSession(Vi), ViConstString(ChannelName), byref(AutoProbeSenseValue)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AutoProbeSenseValue.value)

    def SampleMode(self, Vi):
        SampleMode = ViInt32()
        status = self.dll.lcscope_SampleMode(ViSession(Vi), byref(SampleMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(SampleMode.value)

    def AutoSetup(self, Vi):
        status = self.dll.lcscope_AutoSetup(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionType(self, Vi, AcquisitionType):
        status = self.dll.lcscope_ConfigureAcquisitionType(ViSession(Vi), ViInt32(AcquisitionType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInterpolation(self, Vi, Interpolation):
        status = self.dll.lcscope_ConfigureInterpolation(ViSession(Vi), ViInt32(Interpolation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInitiateContinuous(self, Vi, ContinuousAcquisition):
        status = self.dll.lcscope_ConfigureInitiateContinuous(ViSession(Vi), ViBoolean(ContinuousAcquisition))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNumAverages(self, Vi, NumberOfAverages):
        status = self.dll.lcscope_ConfigureNumAverages(ViSession(Vi), ViInt32(NumberOfAverages))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionRecord(self, Vi, TimePerRecord, MinNumPts, AcquisitionStartTime):
        status = self.dll.lcscope_ConfigureAcquisitionRecord(
            ViSession(Vi),
            ViReal64(TimePerRecord),
            ViInt32(MinNumPts),
            ViReal64(AcquisitionStartTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerCoupling(self, Vi, Coupling):
        status = self.dll.lcscope_ConfigureTriggerCoupling(ViSession(Vi), ViInt32(Coupling))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerLineNumber(self, Vi, TVLineNumber):
        status = self.dll.lcscope_ConfigureTVTriggerLineNumber(ViSession(Vi), ViInt32(TVLineNumber))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcLineTriggerSlope(self, Vi, ACLineSlope):
        status = self.dll.lcscope_ConfigureAcLineTriggerSlope(ViSession(Vi), ViInt32(ACLineSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerModifier(self, Vi, TriggerModifier):
        status = self.dll.lcscope_ConfigureTriggerModifier(ViSession(Vi), ViInt32(TriggerModifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, Vi, TriggerType, Holdoff):
        status = self.dll.lcscope_ConfigureTrigger(ViSession(Vi), ViInt32(TriggerType), ViReal64(Holdoff))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEdgeTriggerSource(self, Vi, Source, Level, Slope):
        status = self.dll.lcscope_ConfigureEdgeTriggerSource(
            ViSession(Vi), ViConstString(Source), ViReal64(Level), ViInt32(Slope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGlitchTriggerSource(self, Vi, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition):
        status = self.dll.lcscope_ConfigureGlitchTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViReal64(Level),
            ViReal64(GlitchWidth),
            ViInt32(GlitchPolarity),
            ViInt32(GlitchCondition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRuntTriggerSource(self, Vi, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity):
        status = self.dll.lcscope_ConfigureRuntTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViReal64(RuntThresholdLow),
            ViReal64(RuntThresholdHigh),
            ViInt32(RuntPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerSource(self, Vi, Source, TVSignalFormat, TVEvent, TVPolarity):
        status = self.dll.lcscope_ConfigureTVTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViInt32(TVSignalFormat),
            ViInt32(TVEvent),
            ViInt32(TVPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureWidthTriggerSource(
        self,
        Vi,
        Source,
        Level,
        WidthLowThreshold,
        WidthHighThreshold,
        WidthPolarity,
        WidthCondition,
    ):
        status = self.dll.lcscope_ConfigureWidthTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViReal64(Level),
            ViReal64(WidthLowThreshold),
            ViReal64(WidthHighThreshold),
            ViInt32(WidthPolarity),
            ViInt32(WidthCondition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(1024)
        status = self.dll.lcscope_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def ConfigureChannel(self, Vi, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled):
        status = self.dll.lcscope_ConfigureChannel(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(Range),
            ViReal64(Offset),
            ViInt32(Coupling),
            ViReal64(ProbeAttenuation),
            ViBoolean(Enabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChanCharacteristics(self, Vi, Channel, InputImpedance, MaxInputFrequency):
        status = self.dll.lcscope_ConfigureChanCharacteristics(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(InputImpedance),
            ViReal64(MaxInputFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefLevels(self, Vi, Low, Mid, High):
        status = self.dll.lcscope_ConfigureRefLevels(ViSession(Vi), ViReal64(Low), ViReal64(Mid), ViReal64(High))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadWaveform(self, Vi, Channel, WaveformSize, MaxTimeMilliseconds):
        WaveformArray = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.lcscope_ReadWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            ViInt32(MaxTimeMilliseconds),
            WaveformArray,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArray = list(WaveformArray)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, ActualPoints, InitialX, XIncrement

    def ReadWaveformMeasurement(self, Vi, Channel, MeasFunction, MaxTimeMilliseconds):
        Measurement = ViReal64()
        status = self.dll.lcscope_ReadWaveformMeasurement(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(MeasFunction),
            ViInt32(MaxTimeMilliseconds),
            byref(Measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Measurement.value)

    def ReadMinMaxWaveform(self, Vi, Channel, WaveformSize, MaxTimeMilliseconds):
        MinWaveform = ARRAY_ViReal64(WaveformSize)
        MaxWaveform = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.lcscope_ReadMinMaxWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            ViInt32(MaxTimeMilliseconds),
            MinWaveform,
            MaxWaveform,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MinWaveform = list(MinWaveform)
        MaxWaveform = list(MaxWaveform)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement

    def FetchWaveform(self, Vi, Channel, WaveformSize):
        WaveformArray = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.lcscope_FetchWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            WaveformArray,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArray = list(WaveformArray)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, ActualPoints, InitialX, XIncrement

    def FetchWaveformMeasurement(self, Vi, Channel, MeasFunction):
        Measurement = ViReal64()
        status = self.dll.lcscope_FetchWaveformMeasurement(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(MeasFunction),
            byref(Measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Measurement.value)

    def FetchMinMaxWaveform(self, Vi, Channel, WaveformSize):
        MinWaveform = ARRAY_ViReal64(WaveformSize)
        MaxWaveform = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.lcscope_FetchMinMaxWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            MinWaveform,
            MaxWaveform,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MinWaveform = list(MinWaveform)
        MaxWaveform = list(MaxWaveform)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement

    def Abort(self, Vi):
        status = self.dll.lcscope_Abort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitiateAcquisition(self, Vi):
        status = self.dll.lcscope_InitiateAcquisition(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AcquisitionStatus(self, Vi):
        Status = ViInt32()
        retcode = self.dll.lcscope_AcquisitionStatus(ViSession(Vi), byref(Status))
        if int(retcode) < 0:
            raise InstrumentError(retcode)
        elif int(retcode) > 0:
            raise InstrumentWarning(retcode)
        return int(Status.value)

    def WriteString(self, Vi, Data):
        status = self.dll.lcscope_WriteString(ViSession(Vi), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadString(self, Vi, MaxTimeMilliseconds, retValBufferSize):
        retVal = ARRAY_ViChar(retValBufferSize)
        status = self.dll.lcscope_ReadString(
            ViSession(Vi), ViInt32(MaxTimeMilliseconds), ViInt32(retValBufferSize), retVal
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(retVal)
