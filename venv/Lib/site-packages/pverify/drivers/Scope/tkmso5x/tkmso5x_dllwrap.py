from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import tkmso5x_const as const
from .tkmso5x_const import *


class tkmso5x_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("tkmso5x_32.dll", "tkmso5x_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "tkmso5x"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        _status = self.dll.tkmso5x_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        _status = self.dll.tkmso5x_InitWithOptions(
            ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), ViConstString(optionString), byref(newVi)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(newVi.value)

    def close(self, vi):
        _status = self.dll.tkmso5x_close(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkmso5x_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.tkmso5x_LockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        _status = self.dll.tkmso5x_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(callerHasLock.value)

    def GetChannelName(self, vi, index, nameBufferSize):
        name = ARRAY_ViChar(nameBufferSize)
        _status = self.dll.tkmso5x_GetChannelName(ViSession(vi), ViInt32(index), ViInt32(nameBufferSize), name)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(name)

    def ConfigureAcquisitionType(self, vi, acquisitionType):
        _status = self.dll.tkmso5x_ConfigureAcquisitionType(ViSession(vi), ViInt32(acquisitionType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAcquisitionRecord(self, vi, timePerRecord, minNumPts, acquisitionStartTime):
        _status = self.dll.tkmso5x_ConfigureAcquisitionRecord(
            ViSession(vi), ViReal64(timePerRecord), ViInt32(minNumPts), ViReal64(acquisitionStartTime)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNumAverages(self, vi, numberOfAverages):
        _status = self.dll.tkmso5x_ConfigureNumAverages(ViSession(vi), ViInt32(numberOfAverages))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNumEnvelopes(self, vi, numberOfEnvelopes):
        _status = self.dll.tkmso5x_ConfigureNumEnvelopes(ViSession(vi), ViInt32(numberOfEnvelopes))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureInitiateContinuous(self, vi, continuousAcquisition):
        _status = self.dll.tkmso5x_ConfigureInitiateContinuous(ViSession(vi), ViBoolean(continuousAcquisition))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSingleAcquisition(self, vi, acquisitionType, NumberOfAcquisition):
        _status = self.dll.tkmso5x_ConfigureSingleAcquisition(
            ViSession(vi), ViInt32(acquisitionType), ViInt32(NumberOfAcquisition)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFastAcquisition(self, vi, fastacquisition, WaveformGrading):
        _status = self.dll.tkmso5x_ConfigureFastAcquisition(
            ViSession(vi), ViBoolean(fastacquisition), ViInt32(WaveformGrading)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ActualRecordLength(self, vi):
        actualRecordLength = ViInt32()
        _status = self.dll.tkmso5x_ActualRecordLength(ViSession(vi), byref(actualRecordLength))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(actualRecordLength.value)

    def SampleRate(self, vi):
        sampleRate = ViReal64()
        _status = self.dll.tkmso5x_SampleRate(ViSession(vi), byref(sampleRate))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(sampleRate.value)

    def AutoProbeSenseValue(self, vi, channel):
        autoProbeSenseValue = ViReal64()
        _status = self.dll.tkmso5x_AutoProbeSenseValue(
            ViSession(vi), ViConstString(channel), byref(autoProbeSenseValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(autoProbeSenseValue.value)

    def ConfigureChannel(self, vi, channel, range, offset, coupling, probeAttenuation, enabled):
        _status = self.dll.tkmso5x_ConfigureChannel(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(range),
            ViReal64(offset),
            ViInt32(coupling),
            ViReal64(probeAttenuation),
            ViBoolean(enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDigitalChannel(self, vi, digitalChannelgroup, digitalChannel, threshold, groupthreshold):
        _status = self.dll.tkmso5x_ConfigureDigitalChannel(
            ViSession(vi),
            ViConstString(digitalChannelgroup),
            ViConstString(digitalChannel),
            ViReal64(threshold),
            ViReal64(groupthreshold),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureChanCharacteristics(self, vi, channel, inputImpedance, maxInputFrequency):
        _status = self.dll.tkmso5x_ConfigureChanCharacteristics(
            ViSession(vi), ViConstString(channel), ViReal64(inputImpedance), ViReal64(maxInputFrequency)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureExternalAttenuator(self, vi, channelname, Unit, InputOutputRatio):
        _status = self.dll.tkmso5x_ConfigureExternalAttenuator(
            ViSession(vi), ViConstString(channelname), ViConstString(Unit), ViReal64(InputOutputRatio)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeRangeControl(self, vi, channelname, RangeControlType):
        _status = self.dll.tkmso5x_ConfigureProbeRangeControl(
            ViSession(vi), ViConstString(channelname), ViInt32(RangeControlType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbeAccessory(self, vi, channelname, Accessory):
        _status = self.dll.tkmso5x_ConfigureProbeAccessory(
            ViSession(vi), ViConstString(channelname), ViConstString(Accessory)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTimebase(self, vi, timebase, position):
        _status = self.dll.tkmso5x_ConfigureTimebase(ViSession(vi), ViReal64(timebase), ViReal64(position))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAuxiliaryOutput(self, vi, AuxiliarySource, AuxiliaryEdge):
        _status = self.dll.tkmso5x_ConfigureAuxiliaryOutput(
            ViSession(vi), ViInt32(AuxiliarySource), ViInt32(AuxiliaryEdge)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeskewSensitivity(self, vi, channelname, Deskewtime):
        _status = self.dll.tkmso5x_ConfigureDeskewSensitivity(
            ViSession(vi), ViConstString(channelname), ViReal64(Deskewtime)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDeskew(
        self,
        vi,
        DeskewType,
        DeskewSlope,
        SourceChannel,
        SourceRefLevel,
        SourceHysteresis,
        SourcePropagationDelay,
        TargetChannel,
        TargetRefLevel,
        TargetHysteresis,
        TargetPropagationDelay,
    ):
        _status = self.dll.tkmso5x_ConfigureDeskew(
            ViSession(vi),
            ViInt32(DeskewType),
            ViInt32(DeskewSlope),
            ViConstString(SourceChannel),
            ViReal64(SourceRefLevel),
            ViReal64(SourceHysteresis),
            ViReal64(SourcePropagationDelay),
            ViConstString(TargetChannel),
            ViReal64(TargetRefLevel),
            ViReal64(TargetHysteresis),
            ViReal64(TargetPropagationDelay),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureProbe(self, vi, channelname, probeforcedrange, probeoperation):
        _status = self.dll.tkmso5x_ConfigureProbe(
            ViSession(vi), ViConstString(channelname), ViReal64(probeforcedrange), ViInt32(probeoperation)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelay(self, vi, delayenable, HorizontalDelay):
        _status = self.dll.tkmso5x_ConfigureDelay(ViSession(vi), ViBoolean(delayenable), ViReal64(HorizontalDelay))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureInputMode(self, instrumentHandle, channel, inputMode, modeOffset, commonModeOffsetTrackEnabled):
        _status = self.dll.tkmso5x_ConfigureInputMode(
            ViSession(instrumentHandle),
            ViConstString(channel),
            ViInt32(inputMode),
            ViReal64(modeOffset),
            ViBoolean(commonModeOffsetTrackEnabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTerminationVoltage(
        self, instrumentHandle, channel, terminationVoltageA, terminationVoltageB, terminationVoltTrackEnabled
    ):
        _status = self.dll.tkmso5x_ConfigureTerminationVoltage(
            ViSession(instrumentHandle),
            ViConstString(channel),
            ViReal64(terminationVoltageA),
            ViReal64(terminationVoltageB),
            ViBoolean(terminationVoltTrackEnabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTimebaseReferenceOscillatorSource(self, instrumentHandle, timebaseReferenceSource):
        _status = self.dll.tkmso5x_ConfigureTimebaseReferenceOscillatorSource(
            ViSession(instrumentHandle), ViInt32(timebaseReferenceSource)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBandwidthFilterOptimization(self, instrumentHandle, channel, bandwidthFilterOptimization):
        _status = self.dll.tkmso5x_ConfigureBandwidthFilterOptimization(
            ViSession(instrumentHandle), ViConstString(channel), ViInt32(bandwidthFilterOptimization)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTrigger(self, vi, triggerType, holdoff):
        _status = self.dll.tkmso5x_ConfigureTrigger(ViSession(vi), ViInt32(triggerType), ViReal64(holdoff))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerCoupling(self, vi, coupling):
        _status = self.dll.tkmso5x_ConfigureTriggerCoupling(ViSession(vi), ViInt32(coupling))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerModifier(self, vi, triggerModifier):
        _status = self.dll.tkmso5x_ConfigureTriggerModifier(ViSession(vi), ViInt32(triggerModifier))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureEdgeTriggerSource(self, vi, source, level, slope):
        _status = self.dll.tkmso5x_ConfigureEdgeTriggerSource(
            ViSession(vi), ViConstString(source), ViReal64(level), ViInt32(slope)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWidthTriggerSource(
        self, vi, source, level, widthLowThreshold, widthHighThreshold, widthPolarity, widthCondition
    ):
        _status = self.dll.tkmso5x_ConfigureWidthTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViReal64(widthLowThreshold),
            ViReal64(widthHighThreshold),
            ViInt32(widthPolarity),
            ViInt32(widthCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWidthTriggerAdvanced(self, vi, widthCondition, triggerwidth, QualificationType, LogicQualification):
        _status = self.dll.tkmso5x_ConfigureWidthTriggerAdvanced(
            ViSession(vi),
            ViInt32(widthCondition),
            ViReal64(triggerwidth),
            ViInt32(QualificationType),
            ViInt32(LogicQualification),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRuntTriggerSource(self, vi, source, runtLowThreshold, runtHighThreshold, runtPolarity):
        _status = self.dll.tkmso5x_ConfigureRuntTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(runtLowThreshold),
            ViReal64(runtHighThreshold),
            ViInt32(runtPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRuntTriggerCondition(self, vi, runtCondition, triggerwidth, QualificationType, LogicQualification):
        _status = self.dll.tkmso5x_ConfigureRuntTriggerCondition(
            ViSession(vi),
            ViInt32(runtCondition),
            ViReal64(triggerwidth),
            ViInt32(QualificationType),
            ViInt32(LogicQualification),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTriggerHoldoffType(self, vi, Holdofftype):
        _status = self.dll.tkmso5x_ConfigureTriggerHoldoffType(ViSession(vi), ViInt32(Holdofftype))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureWindowTrigger(
        self,
        vi,
        source,
        windowCondition,
        windowHighThreshold,
        windowLowThreshold,
        triggerwidth,
        thresholdcrossing,
        QualificationType,
        LogicQualification,
    ):
        _status = self.dll.tkmso5x_ConfigureWindowTrigger(
            ViSession(vi),
            ViConstString(source),
            ViInt32(windowCondition),
            ViReal64(windowHighThreshold),
            ViReal64(windowLowThreshold),
            ViReal64(triggerwidth),
            ViInt32(thresholdcrossing),
            ViInt32(QualificationType),
            ViInt32(LogicQualification),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTimeoutTrigger(self, vi, source, timeoutCondition, time, level, QualificationType, LogicQualification):
        _status = self.dll.tkmso5x_ConfigureTimeoutTrigger(
            ViSession(vi),
            ViConstString(source),
            ViInt32(timeoutCondition),
            ViReal64(time),
            ViReal64(level),
            ViInt32(QualificationType),
            ViInt32(LogicQualification),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBusTrigger(self, vi, source):
        _status = self.dll.tkmso5x_ConfigureBusTrigger(ViSession(vi), ViConstString(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureTransitionTrigger(
        self,
        vi,
        source,
        transitionCondition,
        transitionHighThreshold,
        transitionLowThreshold,
        transitionPolarity,
        deltatime,
        QualificationType,
        LogicQualification,
    ):
        _status = self.dll.tkmso5x_ConfigureTransitionTrigger(
            ViSession(vi),
            ViConstString(source),
            ViInt32(transitionCondition),
            ViReal64(transitionHighThreshold),
            ViReal64(transitionLowThreshold),
            ViInt32(transitionPolarity),
            ViReal64(deltatime),
            ViInt32(QualificationType),
            ViInt32(LogicQualification),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSetupholdTrigger(
        self, vi, clocksource, ClockEdge, ClockLevel, HoldTime, SetupTime, DataSource, SourceInclusion
    ):
        _status = self.dll.tkmso5x_ConfigureSetupholdTrigger(
            ViSession(vi),
            ViConstString(clocksource),
            ViInt32(ClockEdge),
            ViReal64(ClockLevel),
            ViReal64(HoldTime),
            ViReal64(SetupTime),
            ViConstString(DataSource),
            ViInt32(SourceInclusion),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureLogicTrigger(
        self,
        vi,
        Logicfunction,
        Triggercondition,
        Deltatime,
        enableclocksource,
        clocksource,
        ClockPolarity,
        ClockLevel,
        InputSource,
        SourceLogic,
    ):
        _status = self.dll.tkmso5x_ConfigureLogicTrigger(
            ViSession(vi),
            ViInt32(Logicfunction),
            ViInt32(Triggercondition),
            ViReal64(Deltatime),
            ViBoolean(enableclocksource),
            ViConstString(clocksource),
            ViInt32(ClockPolarity),
            ViReal64(ClockLevel),
            ViConstString(InputSource),
            ViInt32(SourceLogic),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayTrigger(
        self, vi, EnableDelayTrigger, triggerType, TriggerMode, TriggerDelayTime, TriggerEventCount
    ):
        _status = self.dll.tkmso5x_ConfigureDelayTrigger(
            ViSession(vi),
            ViBoolean(EnableDelayTrigger),
            ViInt32(triggerType),
            ViInt32(TriggerMode),
            ViReal64(TriggerDelayTime),
            ViInt32(TriggerEventCount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayTriggerCoupling(self, vi, coupling):
        _status = self.dll.tkmso5x_ConfigureDelayTriggerCoupling(ViSession(vi), ViInt32(coupling))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayTriggerReset(self, vi, TriggerResetType, Timeout, TriggerSource, Coupling, Threshold, Slope):
        _status = self.dll.tkmso5x_ConfigureDelayTriggerReset(
            ViSession(vi),
            ViInt32(TriggerResetType),
            ViReal64(Timeout),
            ViConstString(TriggerSource),
            ViInt32(Coupling),
            ViReal64(Threshold),
            ViInt32(Slope),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayEdgeTriggerSource(self, vi, source, level, slope):
        _status = self.dll.tkmso5x_ConfigureDelayEdgeTriggerSource(
            ViSession(vi), ViConstString(source), ViReal64(level), ViInt32(slope)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayWidthTriggerSource(
        self, vi, source, level, widthLowThreshold, widthHighThreshold, widthPolarity, widthCondition
    ):
        _status = self.dll.tkmso5x_ConfigureDelayWidthTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViReal64(widthLowThreshold),
            ViReal64(widthHighThreshold),
            ViInt32(widthPolarity),
            ViInt32(widthCondition),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayWidthTriggerAdvanced(self, vi, widthCondition, triggerwidth):
        _status = self.dll.tkmso5x_ConfigureDelayWidthTriggerAdvanced(
            ViSession(vi), ViInt32(widthCondition), ViReal64(triggerwidth)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayRuntTriggerSource(self, vi, source, runtLowThreshold, runtHighThreshold, runtPolarity):
        _status = self.dll.tkmso5x_ConfigureDelayRuntTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(runtLowThreshold),
            ViReal64(runtHighThreshold),
            ViInt32(runtPolarity),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayRuntTriggerCondition(self, vi, runtCondition, triggerwidth):
        _status = self.dll.tkmso5x_ConfigureDelayRuntTriggerCondition(
            ViSession(vi), ViInt32(runtCondition), ViReal64(triggerwidth)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayWindowTrigger(
        self, vi, source, windowCondition, windowHighThreshold, windowLowThreshold, triggerwidth, thresholdcrossing
    ):
        _status = self.dll.tkmso5x_ConfigureDelayWindowTrigger(
            ViSession(vi),
            ViConstString(source),
            ViInt32(windowCondition),
            ViReal64(windowHighThreshold),
            ViReal64(windowLowThreshold),
            ViReal64(triggerwidth),
            ViInt32(thresholdcrossing),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayTimeoutTrigger(self, vi, source, timeoutCondition, time, level):
        _status = self.dll.tkmso5x_ConfigureDelayTimeoutTrigger(
            ViSession(vi), ViConstString(source), ViInt32(timeoutCondition), ViReal64(time), ViReal64(level)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayBusTrigger(self, vi, source):
        _status = self.dll.tkmso5x_ConfigureDelayBusTrigger(ViSession(vi), ViConstString(source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayTransitionTrigger(
        self,
        vi,
        source,
        transitionCondition,
        transitionHighThreshold,
        transitionLowThreshold,
        transitionPolarity,
        deltatime,
    ):
        _status = self.dll.tkmso5x_ConfigureDelayTransitionTrigger(
            ViSession(vi),
            ViConstString(source),
            ViInt32(transitionCondition),
            ViReal64(transitionHighThreshold),
            ViReal64(transitionLowThreshold),
            ViInt32(transitionPolarity),
            ViReal64(deltatime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelaySetupholdTrigger(
        self, vi, clocksource, ClockEdge, ClockLevel, HoldTime, SetupTime, DataSource, SourceInclusion
    ):
        _status = self.dll.tkmso5x_ConfigureDelaySetupholdTrigger(
            ViSession(vi),
            ViConstString(clocksource),
            ViInt32(ClockEdge),
            ViReal64(ClockLevel),
            ViReal64(HoldTime),
            ViReal64(SetupTime),
            ViConstString(DataSource),
            ViInt32(SourceInclusion),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDelayLogicTrigger(
        self,
        vi,
        Logicfunction,
        Triggercondition,
        Deltatime,
        enableclocksource,
        clocksource,
        ClockPolarity,
        ClockLevel,
        InputSource,
        SourceLogic,
    ):
        _status = self.dll.tkmso5x_ConfigureDelayLogicTrigger(
            ViSession(vi),
            ViInt32(Logicfunction),
            ViInt32(Triggercondition),
            ViReal64(Deltatime),
            ViBoolean(enableclocksource),
            ViConstString(clocksource),
            ViInt32(ClockPolarity),
            ViReal64(ClockLevel),
            ViConstString(InputSource),
            ViInt32(SourceLogic),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def MountNetworkDriveStatus(self, instrumentHandle, driveName):
        mountDriveStatus = ViBoolean()
        _status = self.dll.tkmso5x_MountNetworkDriveStatus(
            ViSession(instrumentHandle), ViConstString(driveName), byref(mountDriveStatus)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(mountDriveStatus.value)

    def MountNetworkDrive(
        self, instrumentHandle, driveName, serverIdentity, path, userName, password, domainName, SMBCIFSMount
    ):
        _status = self.dll.tkmso5x_MountNetworkDrive(
            ViSession(instrumentHandle),
            ViConstString(driveName),
            ViConstString(serverIdentity),
            ViConstString(path),
            ViConstString(userName),
            ViConstString(password),
            ViConstString(domainName),
            ViBoolean(SMBCIFSMount),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRefLevels(self, vi, low, mid, high):
        _status = self.dll.tkmso5x_ConfigureRefLevels(ViSession(vi), ViReal64(low), ViReal64(mid), ViReal64(high))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGlobalPercentRefLevel(
        self,
        vi,
        FallHighRef,
        FallLowRef,
        FallMidRef,
        RiseHighRef,
        RiseLowRef,
        RiseMidRef,
        Hysteresis,
        PercentType,
        BaseTopMethod,
        RefLevelMode,
    ):
        _status = self.dll.tkmso5x_ConfigureGlobalPercentRefLevel(
            ViSession(vi),
            ViReal64(FallHighRef),
            ViReal64(FallLowRef),
            ViReal64(FallMidRef),
            ViReal64(RiseHighRef),
            ViReal64(RiseLowRef),
            ViReal64(RiseMidRef),
            ViReal64(Hysteresis),
            ViInt32(PercentType),
            ViInt32(BaseTopMethod),
            ViInt32(RefLevelMode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGlobalAbsoluteRefLevel(
        self,
        vi,
        FallHighRef,
        FallLowRef,
        FallMidRef,
        RiseHighRef,
        RiseLowRef,
        RiseMidRef,
        Hysteresis,
        AbsoluteLevelType,
        RefLevelMode,
    ):
        _status = self.dll.tkmso5x_ConfigureGlobalAbsoluteRefLevel(
            ViSession(vi),
            ViReal64(FallHighRef),
            ViReal64(FallLowRef),
            ViReal64(FallMidRef),
            ViReal64(RiseHighRef),
            ViReal64(RiseLowRef),
            ViReal64(RiseMidRef),
            ViReal64(Hysteresis),
            ViInt32(AbsoluteLevelType),
            ViInt32(RefLevelMode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSourcePercentRefLevel(
        self,
        vi,
        Source,
        FallHighRef,
        FallLowRef,
        FallMidRef,
        RiseHighRef,
        RiseLowRef,
        RiseMidRef,
        Hysteresis,
        PercentType,
        BaseTopMethod,
    ):
        _status = self.dll.tkmso5x_ConfigureSourcePercentRefLevel(
            ViSession(vi),
            ViConstString(Source),
            ViReal64(FallHighRef),
            ViReal64(FallLowRef),
            ViReal64(FallMidRef),
            ViReal64(RiseHighRef),
            ViReal64(RiseLowRef),
            ViReal64(RiseMidRef),
            ViReal64(Hysteresis),
            ViInt32(PercentType),
            ViInt32(BaseTopMethod),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSourceAbsoluteRefLevel(
        self,
        vi,
        Source,
        FallHighRef,
        FallLowRef,
        FallMidRef,
        RiseHighRef,
        RiseLowRef,
        RiseMidRef,
        Hysteresis,
        AbsoluteType,
    ):
        _status = self.dll.tkmso5x_ConfigureSourceAbsoluteRefLevel(
            ViSession(vi),
            ViConstString(Source),
            ViReal64(FallHighRef),
            ViReal64(FallLowRef),
            ViReal64(FallMidRef),
            ViReal64(RiseHighRef),
            ViReal64(RiseLowRef),
            ViReal64(RiseMidRef),
            ViReal64(Hysteresis),
            ViInt32(AbsoluteType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementPercentRefLevel(
        self,
        vi,
        MeasurementNumber,
        RefLevelNumber,
        FallHighRef,
        FallLowRef,
        FallMidRef,
        RiseHighRef,
        RiseLowRef,
        RiseMidRef,
        Hysteresis,
        PercentType,
        BaseTopMethod,
        EnableSharedRefLevel,
    ):
        _status = self.dll.tkmso5x_ConfigureMeasurementPercentRefLevel(
            ViSession(vi),
            ViInt32(MeasurementNumber),
            ViInt32(RefLevelNumber),
            ViReal64(FallHighRef),
            ViReal64(FallLowRef),
            ViReal64(FallMidRef),
            ViReal64(RiseHighRef),
            ViReal64(RiseLowRef),
            ViReal64(RiseMidRef),
            ViReal64(Hysteresis),
            ViInt32(PercentType),
            ViInt32(BaseTopMethod),
            ViBoolean(EnableSharedRefLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementAbsoluteRefLevel(
        self,
        vi,
        MeasurementNumber,
        RefLevelNumber,
        FallHighRef,
        FallLowRef,
        FallMidRef,
        RiseHighRef,
        RiseLowRef,
        RiseMidRef,
        Hysteresis,
        AbsoluteType,
        EnableSharedRefLevel,
    ):
        _status = self.dll.tkmso5x_ConfigureMeasurementAbsoluteRefLevel(
            ViSession(vi),
            ViInt32(MeasurementNumber),
            ViInt32(RefLevelNumber),
            ViReal64(FallHighRef),
            ViReal64(FallLowRef),
            ViReal64(FallMidRef),
            ViReal64(RiseHighRef),
            ViReal64(RiseLowRef),
            ViReal64(RiseMidRef),
            ViReal64(Hysteresis),
            ViInt32(AbsoluteType),
            ViBoolean(EnableSharedRefLevel),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureConstantClockRecovery(
        self,
        vi,
        ConfigurationType,
        MeasurementNumber,
        ConstantClockMode,
        AutoCalculate,
        ClockFrequency,
        AdvancedMethod,
        BitRate,
        PatternFile,
    ):
        _status = self.dll.tkmso5x_ConfigureConstantClockRecovery(
            ViSession(vi),
            ViInt32(ConfigurationType),
            ViInt32(MeasurementNumber),
            ViInt32(ConstantClockMode),
            ViInt32(AutoCalculate),
            ViReal64(ClockFrequency),
            ViInt32(AdvancedMethod),
            ViReal64(BitRate),
            ViConstString(PatternFile),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePLLClockRecovery(
        self,
        vi,
        ConfigurationType,
        MeasurementNumber,
        PLLModel,
        LoopBandwidth,
        Standard,
        AdvancedMethod,
        BitRate,
        PatternFile,
    ):
        _status = self.dll.tkmso5x_ConfigurePLLClockRecovery(
            ViSession(vi),
            ViInt32(ConfigurationType),
            ViInt32(MeasurementNumber),
            ViInt32(PLLModel),
            ViReal64(LoopBandwidth),
            ViInt32(Standard),
            ViInt32(AdvancedMethod),
            ViReal64(BitRate),
            ViConstString(PatternFile),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePLLCustomClockRecovery(
        self,
        vi,
        ConfigurationType,
        MeasurementNumber,
        PLLModel,
        Damping,
        BandwidthType,
        LoopBandwidth,
        JTFBandwidth,
        AdvancedMethod,
        BitRate,
        PatternFile,
    ):
        _status = self.dll.tkmso5x_ConfigurePLLCustomClockRecovery(
            ViSession(vi),
            ViInt32(ConfigurationType),
            ViInt32(MeasurementNumber),
            ViInt32(PLLModel),
            ViReal64(Damping),
            ViInt32(BandwidthType),
            ViReal64(LoopBandwidth),
            ViReal64(JTFBandwidth),
            ViInt32(AdvancedMethod),
            ViReal64(BitRate),
            ViConstString(PatternFile),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureExplicitClockRecovery(
        self,
        vi,
        ConfigurationType,
        MeasurementNumber,
        ClockMode,
        ClockSource,
        ClockEdge,
        ClockMultiplier,
        PLLModel,
        Damping,
        BandwidthType,
        LoopBandwidth,
        JTFBandwidth,
        ClockOffsetType,
        Offset,
    ):
        _status = self.dll.tkmso5x_ConfigureExplicitClockRecovery(
            ViSession(vi),
            ViInt32(ConfigurationType),
            ViInt32(MeasurementNumber),
            ViInt32(ClockMode),
            ViConstString(ClockSource),
            ViInt32(ClockEdge),
            ViReal64(ClockMultiplier),
            ViInt32(PLLModel),
            ViReal64(Damping),
            ViInt32(BandwidthType),
            ViReal64(LoopBandwidth),
            ViReal64(JTFBandwidth),
            ViInt32(ClockOffsetType),
            ViReal64(Offset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgePeriodFrequency(self, vi, MeasurementNumber, EdgeType):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgePeriodFrequency(
            ViSession(vi), ViInt32(MeasurementNumber), ViInt32(EdgeType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgeJitter(self, vi, MeasurementNumber, JitterMethod, SignalType, ClockEdge, TargetBER):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgeJitter(
            ViSession(vi),
            ViInt32(MeasurementNumber),
            ViInt32(JitterMethod),
            ViInt32(SignalType),
            ViInt32(ClockEdge),
            ViReal64(TargetBER),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgeSkewPhaseDelay(
        self, vi, MeasurementNumber, TimingMethod, FromEdge, ToEdge, SearchDirection
    ):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgeSkewPhaseDelay(
            ViSession(vi),
            ViInt32(MeasurementNumber),
            ViInt32(TimingMethod),
            ViInt32(FromEdge),
            ViInt32(ToEdge),
            ViInt32(SearchDirection),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgeNPeriods(
        self, vi, MeasurementNumber, SignalType, ClockEdge, CyclesNumber, EdgeIncrement
    ):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgeNPeriods(
            ViSession(vi),
            ViInt32(MeasurementNumber),
            ViInt32(SignalType),
            ViInt32(ClockEdge),
            ViReal64(CyclesNumber),
            ViReal64(EdgeIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgeDutyCycle(self, vi, MeasurementNumber, ClockEdge):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgeDutyCycle(
            ViSession(vi), ViInt32(MeasurementNumber), ViInt32(ClockEdge)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgePhaseNoise(self, vi, MeasurementNumber, UpperFrequency, LowerFrequency):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgePhaseNoise(
            ViSession(vi), ViInt32(MeasurementNumber), ViReal64(UpperFrequency), ViReal64(LowerFrequency)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgeDCD(self, vi, MeasurementNumber, SignalType):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgeDCD(
            ViSession(vi), ViInt32(MeasurementNumber), ViInt32(SignalType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgeSetupHold(self, vi, MeasurementNumber, ClockEdge, DataEdge):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgeSetupHold(
            ViSession(vi), ViInt32(MeasurementNumber), ViInt32(ClockEdge), ViInt32(DataEdge)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgeSlewRate(self, vi, MeasurementNumber, SlewRateMethod, FromLevel, ToLevel):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgeSlewRate(
            ViSession(vi), ViInt32(MeasurementNumber), ViInt32(SlewRateMethod), ViInt32(FromLevel), ViInt32(ToLevel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgeTimeOutsideLevel(
        self, vi, MeasurementNumber, MeasurementCondition, HighRefVoltage, LowRefVoltage
    ):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgeTimeOutsideLevel(
            ViSession(vi),
            ViInt32(MeasurementNumber),
            ViInt32(MeasurementCondition),
            ViReal64(HighRefVoltage),
            ViReal64(LowRefVoltage),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgeOvershoot(self, vi, MeasurementNumber, RefLevelMode, RefVoltage):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgeOvershoot(
            ViSession(vi), ViInt32(MeasurementNumber), ViInt32(RefLevelMode), ViReal64(RefVoltage)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgeVDiffXovr(self, vi, MeasurementNumber, ClockEdge):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgeVDiffXovr(
            ViSession(vi), ViInt32(MeasurementNumber), ViInt32(ClockEdge)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureFilter(
        self,
        vi,
        ConfigurationType,
        MeasurementNumber,
        HighPassFilterSpec,
        HighPassFilterFrequency,
        LowPassFilterSpec,
        LowPassFilterFrequency,
        BlankingTime,
        RampTime,
    ):
        _status = self.dll.tkmso5x_ConfigureFilter(
            ViSession(vi),
            ViInt32(ConfigurationType),
            ViInt32(MeasurementNumber),
            ViInt32(HighPassFilterSpec),
            ViReal64(HighPassFilterFrequency),
            ViInt32(LowPassFilterSpec),
            ViReal64(LowPassFilterFrequency),
            ViReal64(BlankingTime),
            ViReal64(RampTime),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureGating(
        self, vi, ConfigurationType, MeasurementNumber, LogicSource, Gating, Active, GatingHysteresis, MidRefValue
    ):
        _status = self.dll.tkmso5x_ConfigureGating(
            ViSession(vi),
            ViInt32(ConfigurationType),
            ViInt32(MeasurementNumber),
            ViConstString(LogicSource),
            ViInt32(Gating),
            ViInt32(Active),
            ViReal64(GatingHysteresis),
            ViReal64(MidRefValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePopulation(self, vi, ConfigurationType, MeasurementNumber, EnablePopulationLimit, LimitValue):
        _status = self.dll.tkmso5x_ConfigurePopulation(
            ViSession(vi),
            ViInt32(ConfigurationType),
            ViInt32(MeasurementNumber),
            ViBoolean(EnablePopulationLimit),
            ViInt32(LimitValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementLimit(
        self, vi, ConfigurationType, MeasurementNumber, MaxValue, MinValue, EnableMeasurementLimit
    ):
        _status = self.dll.tkmso5x_ConfigureMeasurementLimit(
            ViSession(vi),
            ViInt32(ConfigurationType),
            ViInt32(MeasurementNumber),
            ViInt32(MaxValue),
            ViInt32(MinValue),
            ViBoolean(EnableMeasurementLimit),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementFlags(
        self,
        vi,
        MeasurementNumber,
        EnableGlobalFilter,
        EnableGlobalGating,
        EnableGlobalPopulation,
        EnableGlobalLimit,
        EnableGlobalClockRecovery,
    ):
        _status = self.dll.tkmso5x_ConfigureMeasurementFlags(
            ViSession(vi),
            ViInt32(MeasurementNumber),
            ViBoolean(EnableGlobalFilter),
            ViBoolean(EnableGlobalGating),
            ViBoolean(EnableGlobalPopulation),
            ViBoolean(EnableGlobalLimit),
            ViBoolean(EnableGlobalClockRecovery),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureBit(
        self,
        vi,
        MeasurementNumber,
        MeasurementFunction,
        BitType,
        BitConfigureMethod,
        Percentage,
        BitStart,
        BitEnd,
        BinSize,
        TargetBER,
    ):
        _status = self.dll.tkmso5x_ConfigureBit(
            ViSession(vi),
            ViInt32(MeasurementNumber),
            ViInt32(MeasurementFunction),
            ViInt32(BitType),
            ViInt32(BitConfigureMethod),
            ViReal64(Percentage),
            ViReal64(BitStart),
            ViReal64(BitEnd),
            ViReal64(BinSize),
            ViReal64(TargetBER),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpreadSpectrumClock(self, vi, MeasurementNumber, NominalFrequency, FrequencyType):
        _status = self.dll.tkmso5x_ConfigureSpreadSpectrumClock(
            ViSession(vi), ViInt32(MeasurementNumber), ViReal64(NominalFrequency), ViInt32(FrequencyType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementPreference(
        self, vi, MeasurementNumber, EnableEyeRendering, AutoTransition, WaveformInterpolationType
    ):
        _status = self.dll.tkmso5x_ConfigureMeasurementPreference(
            ViSession(vi),
            ViInt32(MeasurementNumber),
            ViBoolean(EnableEyeRendering),
            ViBoolean(AutoTransition),
            ViInt32(WaveformInterpolationType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureJitterDecompPreference(self, vi, JitterSeparationModel, DualDiracModel, MinNumberofUnitInterval):
        _status = self.dll.tkmso5x_ConfigureJitterDecompPreference(
            ViSession(vi), ViInt32(JitterSeparationModel), ViInt32(DualDiracModel), ViReal64(MinNumberofUnitInterval)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementType(
        self, vi, MeasurementNumber, MeasurementFunction, MeasurementSource1, MeasurementSource2
    ):
        _status = self.dll.tkmso5x_ConfigureMeasurementType(
            ViSession(vi),
            ViInt32(MeasurementNumber),
            ViInt32(MeasurementFunction),
            ViConstString(MeasurementSource1),
            ViConstString(MeasurementSource2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementCycleMode(self, vi, MeasurementNumber, CycleMode):
        _status = self.dll.tkmso5x_ConfigureMeasurementCycleMode(
            ViSession(vi), ViInt32(MeasurementNumber), ViInt32(CycleMode)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementACCommonMode(self, vi, MeasurementNumber, EnableHighPassFilter, SourceType):
        _status = self.dll.tkmso5x_ConfigureMeasurementACCommonMode(
            ViSession(vi), ViInt32(MeasurementNumber), ViBoolean(EnableHighPassFilter), ViInt32(SourceType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementJitterSummary(
        self,
        vi,
        MeasurementNumber,
        IncludeDCD,
        IncludeDDJ,
        IncludeDJDD,
        IncludeEYEWIDTHBER,
        IncludeNPJ,
        IncludePJ,
        IncludeRJDD,
        IncludeTIE,
        IncludeTJBER,
    ):
        _status = self.dll.tkmso5x_ConfigureMeasurementJitterSummary(
            ViSession(vi),
            ViInt32(MeasurementNumber),
            ViBoolean(IncludeDCD),
            ViBoolean(IncludeDDJ),
            ViBoolean(IncludeDJDD),
            ViBoolean(IncludeEYEWIDTHBER),
            ViBoolean(IncludeNPJ),
            ViBoolean(IncludePJ),
            ViBoolean(IncludeRJDD),
            ViBoolean(IncludeTIE),
            ViBoolean(IncludeTJBER),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementBurstWidth(self, vi, MeasurementNumber, IdleTime, Polarity):
        _status = self.dll.tkmso5x_ConfigureMeasurementBurstWidth(
            ViSession(vi), ViInt32(MeasurementNumber), ViReal64(IdleTime), ViInt32(Polarity)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePatternDetection(
        self, vi, MeasurementNumber, PatternDetection, PatternType, PatternLength, WindowLength
    ):
        _status = self.dll.tkmso5x_ConfigurePatternDetection(
            ViSession(vi),
            ViInt32(MeasurementNumber),
            ViInt32(PatternDetection),
            ViInt32(PatternType),
            ViReal64(PatternLength),
            ViReal64(WindowLength),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementEdgeBurstWidth(self, vi, MeasurementNumber, SignalType):
        _status = self.dll.tkmso5x_ConfigureMeasurementEdgeBurstWidth(
            ViSession(vi), ViInt32(MeasurementNumber), ViInt32(SignalType)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureHorizontal(
        self,
        vi,
        ControlType,
        FastAcquisitionMaximumRecordLength,
        EnableFastAcquisitionMaximumRecordLengthOverride,
        AnalyzeMinimumSampleRate,
        EnableAnalyzeMinimumSampleRateOverride,
        AutoAnalyzeMinSampleRate,
    ):
        _status = self.dll.tkmso5x_ConfigureHorizontal(
            ViSession(vi),
            ViInt32(ControlType),
            ViInt32(FastAcquisitionMaximumRecordLength),
            ViBoolean(EnableFastAcquisitionMaximumRecordLengthOverride),
            ViReal64(AnalyzeMinimumSampleRate),
            ViBoolean(EnableAnalyzeMinimumSampleRateOverride),
            ViBoolean(AutoAnalyzeMinSampleRate),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMeasurementDisplayUnit(self, vi, DisplayUnit):
        _status = self.dll.tkmso5x_ConfigureMeasurementDisplayUnit(ViSession(vi), ViInt32(DisplayUnit))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathAverage(self, vi, MathChannel, EnableAverage, NumberofAverages):
        _status = self.dll.tkmso5x_ConfigureMathAverage(
            ViSession(vi), ViConstString(MathChannel), ViBoolean(EnableAverage), ViInt32(NumberofAverages)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathBasic(self, vi, MathChannel, MathFunction, Source1, Source2):
        _status = self.dll.tkmso5x_ConfigureMathBasic(
            ViSession(vi),
            ViConstString(MathChannel),
            ViInt32(MathFunction),
            ViConstString(Source1),
            ViConstString(Source2),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathFFT(self, vi, MathChannel, Source, FFTType, HorizontalScale, WindowType):
        _status = self.dll.tkmso5x_ConfigureMathFFT(
            ViSession(vi),
            ViConstString(MathChannel),
            ViConstString(Source),
            ViInt32(FFTType),
            ViInt32(HorizontalScale),
            ViInt32(WindowType),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathAdvanced(self, vi, MathChannel, Expression):
        _status = self.dll.tkmso5x_ConfigureMathAdvanced(
            ViSession(vi), ViConstString(MathChannel), ViConstString(Expression)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def BinaryOperationEditor(
        self, vi, inputExpression1, inputOperator, inputExpression2, bufferSize, outputExpression
    ):
        _status = self.dll.tkmso5x_BinaryOperationEditor(
            ViSession(vi),
            ViConstString(inputExpression1),
            ViInt32(inputOperator),
            ViConstString(inputExpression2),
            ViInt32(bufferSize),
            ViConstString(outputExpression),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def UnaryOperationEditor(self, vi, function, inputExpression, bufferSize, outputExpression):
        _status = self.dll.tkmso5x_UnaryOperationEditor(
            ViSession(vi),
            ViInt32(function),
            ViConstString(inputExpression),
            ViInt32(bufferSize),
            ViConstString(outputExpression),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectralMagnitude(self, vi, MathChannel, MagnitudeUnit):
        _status = self.dll.tkmso5x_ConfigureSpectralMagnitude(
            ViSession(vi), ViConstString(MathChannel), ViInt32(MagnitudeUnit)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSpectralPhase(
        self,
        vi,
        MathChannel,
        PhaseUnit,
        EnablePhaseSuppression,
        SuppressionThreshold,
        EnablePhaseUnwrap,
        PhaseUnwrapValue,
    ):
        _status = self.dll.tkmso5x_ConfigureSpectralPhase(
            ViSession(vi),
            ViConstString(MathChannel),
            ViInt32(PhaseUnit),
            ViBoolean(EnablePhaseSuppression),
            ViReal64(SuppressionThreshold),
            ViBoolean(EnablePhaseUnwrap),
            ViInt32(PhaseUnwrapValue),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureMathFilterSource(self, vi, FilterNumber, FilePath):
        _status = self.dll.tkmso5x_ConfigureMathFilterSource(
            ViSession(vi), ViInt32(FilterNumber), ViConstString(FilePath)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureStandardWaveform(self, vi, WaveformFunction, Frequency, Amplitude, DCOffset):
        _status = self.dll.tkmso5x_ConfigureStandardWaveform(
            ViSession(vi), ViInt32(WaveformFunction), ViReal64(Frequency), ViReal64(Amplitude), ViReal64(DCOffset)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAFGWaveformLevel(self, vi, Highlevel, lowlevel):
        _status = self.dll.tkmso5x_ConfigureAFGWaveformLevel(ViSession(vi), ViReal64(Highlevel), ViReal64(lowlevel))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAFGWaveformPeriod(self, vi, period):
        _status = self.dll.tkmso5x_ConfigureAFGWaveformPeriod(ViSession(vi), ViReal64(period))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureNoise(self, vi, Noiselevel, Enablenoise):
        _status = self.dll.tkmso5x_ConfigureNoise(ViSession(vi), ViInt32(Noiselevel), ViBoolean(Enablenoise))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureOutputImpedance(self, vi, Impedance):
        _status = self.dll.tkmso5x_ConfigureOutputImpedance(ViSession(vi), ViInt32(Impedance))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigurePulseWidth(self, vi, pulsewidth):
        _status = self.dll.tkmso5x_ConfigurePulseWidth(ViSession(vi), ViReal64(pulsewidth))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureRampSymmetry(self, vi, RampSymmetry):
        _status = self.dll.tkmso5x_ConfigureRampSymmetry(ViSession(vi), ViReal64(RampSymmetry))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureSquareDutyCycle(self, vi, SquareDutyCycle):
        _status = self.dll.tkmso5x_ConfigureSquareDutyCycle(ViSession(vi), ViReal64(SquareDutyCycle))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAFGWaveformSource(self, vi, Source):
        _status = self.dll.tkmso5x_ConfigureAFGWaveformSource(ViSession(vi), ViConstString(Source))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def EnableAFGOutput(self, vi, EnableOutput):
        _status = self.dll.tkmso5x_EnableAFGOutput(ViSession(vi), ViBoolean(EnableOutput))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetLeveltoHalf(self, vi, TriggerType):
        _status = self.dll.tkmso5x_SetLeveltoHalf(ViSession(vi), ViInt32(TriggerType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def PerformDeskew(self, vi, DeskewType):
        _status = self.dll.tkmso5x_PerformDeskew(ViSession(vi), ViInt32(DeskewType))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ModifySource(self, vi, SourceType, Operation, SourceNumber):
        _status = self.dll.tkmso5x_ModifySource(
            ViSession(vi), ViInt32(SourceType), ViInt32(Operation), ViInt32(SourceNumber)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QuerySourceList(self, vi, SourceType):
        SourceList = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QuerySourceList(ViSession(vi), ViInt32(SourceType), SourceList)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(SourceList)

    def ModifyMeasurement(self, vi, Operation, MeasurementNumber):
        _status = self.dll.tkmso5x_ModifyMeasurement(ViSession(vi), ViInt32(Operation), ViInt32(MeasurementNumber))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMeasurementList(self, vi):
        MeasurementList = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QueryMeasurementList(ViSession(vi), MeasurementList)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(MeasurementList)

    def ModifyMeasurementTable(self, vi, Operation, MeasurementTableNumber):
        _status = self.dll.tkmso5x_ModifyMeasurementTable(
            ViSession(vi), ViInt32(Operation), ViInt32(MeasurementTableNumber)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryMeasurementTableList(self, vi):
        MeasurementTableList = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QueryMeasurementTableList(ViSession(vi), MeasurementTableList)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(MeasurementTableList)

    def StoreWaveform(self, vi, SourceChannel, WaveformFile):
        _status = self.dll.tkmso5x_StoreWaveform(
            ViSession(vi), ViConstString(SourceChannel), ViConstString(WaveformFile)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def RecallWaveformtoRefChannel(self, vi, WaveformFile, RefChannel):
        _status = self.dll.tkmso5x_RecallWaveformtoRefChannel(
            ViSession(vi), ViConstString(WaveformFile), ViConstString(RefChannel)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def QueryAvailableWaveformSources(self, vi):
        WaveformSources = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QueryAvailableWaveformSources(ViSession(vi), WaveformSources)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(WaveformSources)

    def QueryWaveformSavingSources(self, vi):
        WaveformSavingSources = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QueryWaveformSavingSources(ViSession(vi), WaveformSavingSources)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(WaveformSavingSources)

    def SendSoftwareTrigger(self, vi):
        _status = self.dll.tkmso5x_SendSoftwareTrigger(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetDigitalVoltmeter(self, vi):
        _status = self.dll.tkmso5x_ResetDigitalVoltmeter(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureDigitalVoltmeter(self, vi, dvmsource, dvmtype, dvmautorange):
        _status = self.dll.tkmso5x_ConfigureDigitalVoltmeter(
            ViSession(vi), ViConstString(dvmsource), ViInt32(dvmtype), ViBoolean(dvmautorange)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadDigitalVoltmeter(self, vi):
        Value = ViReal64()
        Frequency = ViReal64()
        _status = self.dll.tkmso5x_ReadDigitalVoltmeter(ViSession(vi), byref(Value), byref(Frequency))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Value = float(Value.value)
        Frequency = float(Frequency.value)
        return Value, Frequency

    def ReadDigitalVoltmeterHistory(self, vi):
        AverageValue = ViReal64()
        MaximumHistoricalValue = ViReal64()
        MinimumHistoricalValue = ViReal64()
        _status = self.dll.tkmso5x_ReadDigitalVoltmeterHistory(
            ViSession(vi), byref(AverageValue), byref(MaximumHistoricalValue), byref(MinimumHistoricalValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        AverageValue = float(AverageValue.value)
        MaximumHistoricalValue = float(MaximumHistoricalValue.value)
        MinimumHistoricalValue = float(MinimumHistoricalValue.value)
        return AverageValue, MaximumHistoricalValue, MinimumHistoricalValue

    def ReadDigitalVoltmeterStatistics(self, vi):
        MaximumValue = ViReal64()
        MinimumValue = ViReal64()
        _status = self.dll.tkmso5x_ReadDigitalVoltmeterStatistics(
            ViSession(vi), byref(MaximumValue), byref(MinimumValue)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        MaximumValue = float(MaximumValue.value)
        MinimumValue = float(MinimumValue.value)
        return MaximumValue, MinimumValue

    def CursorSetup(
        self,
        vi,
        EnableCursors,
        CursorSource,
        CursorBSource,
        CursorMode,
        CursorTrackMode,
        TimeCursorAPosition,
        TimeCursorBPosition,
        AmplitudeCursorAPosition,
        AmplitudeCursorBPosition,
        WaveViewNumber,
        CursorNumber,
        SourceSplitMode,
    ):
        _status = self.dll.tkmso5x_CursorSetup(
            ViSession(vi),
            ViBoolean(EnableCursors),
            ViConstString(CursorSource),
            ViConstString(CursorBSource),
            ViInt32(CursorMode),
            ViInt32(CursorTrackMode),
            ViReal64(TimeCursorAPosition),
            ViReal64(TimeCursorBPosition),
            ViReal64(AmplitudeCursorAPosition),
            ViReal64(AmplitudeCursorBPosition),
            ViInt32(WaveViewNumber),
            ViInt32(CursorNumber),
            ViInt32(SourceSplitMode),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AutoSetup(self, vi):
        _status = self.dll.tkmso5x_AutoSetup(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadWaveform(self, vi, channel, waveformSize, maxTimeMilliseconds):
        waveformArray = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tkmso5x_ReadWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            ViInt32(maxTimeMilliseconds),
            waveformArray,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveformArray, actualPoints, initialX, xIncrement

    def ReadMinMaxWaveform(self, vi, channel, WaveformSize, maxTime):
        minWaveform = ARRAY_ViReal64(WaveformSize)
        maxWaveform = ARRAY_ViReal64(WaveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tkmso5x_ReadMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(WaveformSize),
            ViInt32(maxTime),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def ReadDigitalWaveform(self, vi, Digitalchannel, waveformSize, maxTimeMilliseconds):
        waveformArray = ARRAY_ViInt32(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tkmso5x_ReadDigitalWaveform(
            ViSession(vi),
            ViConstString(Digitalchannel),
            ViInt32(waveformSize),
            ViInt32(maxTimeMilliseconds),
            waveformArray,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveformArray, actualPoints, initialX, xIncrement

    def ReadDigitalGroupWaveform(self, vi, Digitalchannel, waveformSize, maxTimeMilliseconds):
        msg = "Argument 'waveformArray' is a pointer to a pointers and is not supported by the automated wrapper generator! This function has to be fixed manually!"
        raise NotImplementedError(msg)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tkmso5x_ReadDigitalGroupWaveform(
            ViSession(vi),
            ViConstString(Digitalchannel),
            ViInt32(waveformSize),
            ViInt32(maxTimeMilliseconds),
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return actualPoints, initialX, xIncrement

    def ReadWaveformMeasurement(self, vi, channel, measFunction, maxTimeMilliseconds):
        measurement = ViReal64()
        _status = self.dll.tkmso5x_ReadWaveformMeasurement(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(measFunction),
            ViInt32(maxTimeMilliseconds),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def ReadDelayMeasurement(self, vi, measureSource1, measureSource2, delayEdge1, delayEdge2, delayDirection, maxTime):
        measurement = ViReal64()
        _status = self.dll.tkmso5x_ReadDelayMeasurement(
            ViSession(vi),
            ViConstString(measureSource1),
            ViConstString(measureSource2),
            ViInt32(delayEdge1),
            ViInt32(delayEdge2),
            ViInt32(delayDirection),
            ViInt32(maxTime),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def ReadPhaseMeasurement(self, vi, measureSource1, measureSource2, maxTime):
        measurement = ViReal64()
        _status = self.dll.tkmso5x_ReadPhaseMeasurement(
            ViSession(vi),
            ViConstString(measureSource1),
            ViConstString(measureSource2),
            ViInt32(maxTime),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def ReadWaveformMeasurementStatistics(
        self, vi, StatisticsType, MeasurementNumber, EnableStatisticsCycleMode, maxTimeMilliseconds
    ):
        MaximumValue = ViReal64()
        MeanValue = ViReal64()
        MinimumValue = ViReal64()
        PeaktoPeakValue = ViReal64()
        Population = ViReal64()
        StandardDeviation = ViReal64()
        _status = self.dll.tkmso5x_ReadWaveformMeasurementStatistics(
            ViSession(vi),
            ViInt32(StatisticsType),
            ViInt32(MeasurementNumber),
            ViBoolean(EnableStatisticsCycleMode),
            ViReal64(maxTimeMilliseconds),
            byref(MaximumValue),
            byref(MeanValue),
            byref(MinimumValue),
            byref(PeaktoPeakValue),
            byref(Population),
            byref(StandardDeviation),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        MaximumValue = float(MaximumValue.value)
        MeanValue = float(MeanValue.value)
        MinimumValue = float(MinimumValue.value)
        PeaktoPeakValue = float(PeaktoPeakValue.value)
        Population = float(Population.value)
        StandardDeviation = float(StandardDeviation.value)
        return MaximumValue, MeanValue, MinimumValue, PeaktoPeakValue, Population, StandardDeviation

    def QueryTimebaseReferenceOscillatorState(self, instrumentHandle):
        ROscillatorState = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QueryTimebaseReferenceOscillatorState(ViSession(instrumentHandle), ROscillatorState)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(ROscillatorState)

    def QueryProbeSetting(self, instrumentHandle, channel):
        dynamicRange = ViReal64()
        serialNumber = ARRAY_ViChar(1024)
        type_ = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QueryProbeSetting(
            ViSession(instrumentHandle), ViConstString(channel), serialNumber, byref(dynamicRange), type_
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        dynamicRange = float(dynamicRange.value)
        serialNumber = decode(serialNumber)
        type_ = decode(type_)
        return serialNumber, dynamicRange, type_

    def QueryHorizontalProperties(self, vi):
        InterpolationRatio = ViReal64()
        TimebaseDuration = ViReal64()
        DivisionNumber = ViReal64()
        _status = self.dll.tkmso5x_QueryHorizontalProperties(
            ViSession(vi), byref(InterpolationRatio), byref(TimebaseDuration), byref(DivisionNumber)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        InterpolationRatio = float(InterpolationRatio.value)
        TimebaseDuration = float(TimebaseDuration.value)
        DivisionNumber = float(DivisionNumber.value)
        return InterpolationRatio, TimebaseDuration, DivisionNumber

    def QueryWaveformDomain(self, vi):
        Domain = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QueryWaveformDomain(ViSession(vi), Domain)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(Domain)

    def QueryWaveformPointSetting(self, vi):
        TriggerPoint = ViInt32()
        PointNumber = ViInt32()
        PointFormat = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QueryWaveformPointSetting(
            ViSession(vi), byref(TriggerPoint), byref(PointNumber), PointFormat
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        TriggerPoint = int(TriggerPoint.value)
        PointNumber = int(PointNumber.value)
        PointFormat = decode(PointFormat)
        return TriggerPoint, PointNumber, PointFormat

    def QueryWaveformUnit(self, vi):
        XUnit = ARRAY_ViChar(1024)
        YUnit = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QueryWaveformUnit(ViSession(vi), XUnit, YUnit)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        XUnit = decode(XUnit)
        YUnit = decode(YUnit)
        return XUnit, YUnit

    def QueryWaveformIdentity(self, vi):
        Source = ARRAY_ViChar(1024)
        Coupling = ARRAY_ViChar(1024)
        VerticalScale = ARRAY_ViChar(1024)
        HorizontalScale = ARRAY_ViChar(1024)
        RecordLength = ARRAY_ViChar(1024)
        AcquisitionMode = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QueryWaveformIdentity(
            ViSession(vi), Source, Coupling, VerticalScale, HorizontalScale, RecordLength, AcquisitionMode
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Source = decode(Source)
        Coupling = decode(Coupling)
        VerticalScale = decode(VerticalScale)
        HorizontalScale = decode(HorizontalScale)
        RecordLength = decode(RecordLength)
        AcquisitionMode = decode(AcquisitionMode)
        return Source, Coupling, VerticalScale, HorizontalScale, RecordLength, AcquisitionMode

    def QueryDegaussCycleState(self, vi, channelname):
        DegaussState = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QueryDegaussCycleState(ViSession(vi), ViConstString(channelname), DegaussState)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(DegaussState)

    def QueryProbeInformation(self, vi, channelname):
        Type = ARRAY_ViChar(1024)
        SerialNumber = ARRAY_ViChar(1024)
        Unit = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_QueryProbeInformation(
            ViSession(vi), ViConstString(channelname), Type, SerialNumber, Unit
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        Type = decode(Type)
        SerialNumber = decode(SerialNumber)
        Unit = decode(Unit)
        return Type, SerialNumber, Unit

    def InitiateAcquisition(self, vi):
        _status = self.dll.tkmso5x_InitiateAcquisition(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def AcquisitionStatus(self, vi):
        statusRef = ViInt32()
        _status = self.dll.tkmso5x_AcquisitionStatus(ViSession(vi), byref(statusRef))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(statusRef.value)

    def FetchWaveform(self, vi, channel, waveformSize):
        waveformArray = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tkmso5x_FetchWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            waveformArray,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveformArray, actualPoints, initialX, xIncrement

    def FetchMinMaxWaveform(self, vi, channel, WaveformSize):
        minWaveform = ARRAY_ViReal64(WaveformSize)
        maxWaveform = ARRAY_ViReal64(WaveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tkmso5x_FetchMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(WaveformSize),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def FetchDigitalWaveform(self, vi, Digitalchannel, waveformSize):
        waveformArray = ARRAY_ViInt32(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tkmso5x_FetchDigitalWaveform(
            ViSession(vi),
            ViConstString(Digitalchannel),
            ViInt32(waveformSize),
            waveformArray,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        waveformArray = list(waveformArray)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveformArray, actualPoints, initialX, xIncrement

    def FetchDigitalGroupWaveform(self, vi, Digitalchannel, waveformSize):
        msg = "Argument 'waveformArray' is a pointer to a pointers and is not supported by the automated wrapper generator! This function has to be fixed manually!"
        raise NotImplementedError(msg)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        _status = self.dll.tkmso5x_FetchDigitalGroupWaveform(
            ViSession(vi),
            ViConstString(Digitalchannel),
            ViInt32(waveformSize),
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return actualPoints, initialX, xIncrement

    def FetchWaveformMeasurement(self, vi, channel, measFunction):
        measurement = ViReal64()
        _status = self.dll.tkmso5x_FetchWaveformMeasurement(
            ViSession(vi), ViConstString(channel), ViInt32(measFunction), byref(measurement)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def FetchDelayMeasurement(self, vi, measureSource1, measureSource2, delayEdge1, delayEdge2, delayDirection):
        measurement = ViReal64()
        _status = self.dll.tkmso5x_FetchDelayMeasurement(
            ViSession(vi),
            ViConstString(measureSource1),
            ViConstString(measureSource2),
            ViInt32(delayEdge1),
            ViInt32(delayEdge2),
            ViInt32(delayDirection),
            byref(measurement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def FetchPhaseMeasurement(self, vi, measureSource1, measureSource2):
        measurement = ViReal64()
        _status = self.dll.tkmso5x_FetchPhaseMeasurement(
            ViSession(vi), ViConstString(measureSource1), ViConstString(measureSource2), byref(measurement)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(measurement.value)

    def FetchWaveformMeasurementStatistics(self, vi, StatisticsType, MeasurementNumber, EnableStatisticsCycleMode):
        MaximumValue = ViReal64()
        MeanValue = ViReal64()
        MinimumValue = ViReal64()
        PeaktoPeakValue = ViReal64()
        Population = ViReal64()
        StandardDeviation = ViReal64()
        _status = self.dll.tkmso5x_FetchWaveformMeasurementStatistics(
            ViSession(vi),
            ViInt32(StatisticsType),
            ViInt32(MeasurementNumber),
            ViBoolean(EnableStatisticsCycleMode),
            byref(MaximumValue),
            byref(MeanValue),
            byref(MinimumValue),
            byref(PeaktoPeakValue),
            byref(Population),
            byref(StandardDeviation),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        MaximumValue = float(MaximumValue.value)
        MeanValue = float(MeanValue.value)
        MinimumValue = float(MinimumValue.value)
        PeaktoPeakValue = float(PeaktoPeakValue.value)
        Population = float(Population.value)
        StandardDeviation = float(StandardDeviation.value)
        return MaximumValue, MeanValue, MinimumValue, PeaktoPeakValue, Population, StandardDeviation

    def Abort(self, vi):
        _status = self.dll.tkmso5x_Abort(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def GetError(self, vi, bufferSize):
        code = ViStatus()
        description = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkmso5x_GetError(ViSession(vi), byref(code), ViInt32(bufferSize), description)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        description = decode(description)
        return code, description

    def ClearError(self, vi):
        _status = self.dll.tkmso5x_ClearError(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        _status = self.dll.tkmso5x_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(errorMessage)

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(bufferSize)
        _status = self.dll.tkmso5x_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        _status = self.dll.tkmso5x_ResetInterchangeCheck(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ClearInterchangeWarnings(self, vi):
        _status = self.dll.tkmso5x_ClearInterchangeWarnings(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def InvalidateAllAttributes(self, vi):
        _status = self.dll.tkmso5x_InvalidateAllAttributes(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def reset(self, vi):
        _status = self.dll.tkmso5x_reset(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ResetWithDefaults(self, vi):
        _status = self.dll.tkmso5x_ResetWithDefaults(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        _status = self.dll.tkmso5x_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def Disable(self, vi):
        _status = self.dll.tkmso5x_Disable(ViSession(vi))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def WriteInstrData(self, vi, writeBuffer):
        _status = self.dll.tkmso5x_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        _status = self.dll.tkmso5x_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def IsInvalidWfmElement(self, vi, elementValue):
        isInvalid = ViBoolean()
        _status = self.dll.tkmso5x_IsInvalidWfmElement(ViSession(vi), ViReal64(elementValue), byref(isInvalid))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(isInvalid.value)

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        _status = self.dll.tkmso5x_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViInt64(self, vi, channelName, attribute):
        value = ViInt64()
        _status = self.dll.tkmso5x_GetAttributeViInt64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        _status = self.dll.tkmso5x_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(bufSize)
        _status = self.dll.tkmso5x_GetAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(bufSize), value
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        _status = self.dll.tkmso5x_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        _status = self.dll.tkmso5x_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.tkmso5x_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViInt64(self, vi, channelName, attribute, value):
        _status = self.dll.tkmso5x_SetAttributeViInt64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.tkmso5x_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.tkmso5x_SetAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViConstString(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.tkmso5x_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.tkmso5x_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        _status = self.dll.tkmso5x_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViInt64(self, vi, channelName, attribute, value):
        _status = self.dll.tkmso5x_CheckAttributeViInt64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        _status = self.dll.tkmso5x_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        _status = self.dll.tkmso5x_CheckAttributeViString(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViConstString(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        _status = self.dll.tkmso5x_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        _status = self.dll.tkmso5x_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def viWrite(self, vi, buffer, count):
        _buffer = (ViByte * len(buffer))(*buffer)
        returnCount = ViInt64()
        _status = self.dll.tkmso5x_viWrite(ViSession(vi), _buffer, ViInt64(count), byref(returnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(returnCount.value)

    def viRead(self, vi, bufferSize):
        buffer = ARRAY_ViByte(bufferSize)
        returnCount = ViInt64()
        _status = self.dll.tkmso5x_viRead(ViSession(vi), ViInt64(bufferSize), buffer, byref(returnCount))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        returnCount = int(returnCount.value)
        return buffer, returnCount

    def ConfigureChannel_Digitizer(self, vi, ChannelName, Range, Offset, Coupling, Enabled):
        _status = self.dll.tkmso5x_ConfigureChannel_Digitizer(
            ViSession(vi),
            ViConstString(ChannelName),
            ViReal64(Range),
            ViReal64(Offset),
            ViInt32(Coupling),
            ViBoolean(Enabled),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ConfigureAcquisition(self, vi, NumRecordsToAcquire, RecordSize, SampleRate):
        _status = self.dll.tkmso5x_ConfigureAcquisition(
            ViSession(vi), ViInt64(NumRecordsToAcquire), ViInt64(RecordSize), ViReal64(SampleRate)
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def ReadWaveformInt16(self, vi, ChannelName, MaxTimeMilliseconds, WaveformArraySize):
        WaveformArray = ARRAY_ViInt16(WaveformArraySize)
        ActualPoints = ViInt64()
        FirstValidPoint = ViInt64()
        InitialXOffset = ViReal64()
        InitialXTimeSeconds = ViReal64()
        InitialXTimeFraction = ViReal64()
        XIncrement = ViReal64()
        ScaleFactor = ViReal64()
        ScaleOffset = ViReal64()
        _status = self.dll.tkmso5x_ReadWaveformInt16(
            ViSession(vi),
            ViConstString(ChannelName),
            ViInt32(MaxTimeMilliseconds),
            ViInt64(WaveformArraySize),
            WaveformArray,
            byref(ActualPoints),
            byref(FirstValidPoint),
            byref(InitialXOffset),
            byref(InitialXTimeSeconds),
            byref(InitialXTimeFraction),
            byref(XIncrement),
            byref(ScaleFactor),
            byref(ScaleOffset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ActualPoints = int(ActualPoints.value)
        FirstValidPoint = int(FirstValidPoint.value)
        InitialXOffset = float(InitialXOffset.value)
        InitialXTimeSeconds = float(InitialXTimeSeconds.value)
        InitialXTimeFraction = float(InitialXTimeFraction.value)
        XIncrement = float(XIncrement.value)
        ScaleFactor = float(ScaleFactor.value)
        ScaleOffset = float(ScaleOffset.value)
        return (
            WaveformArray,
            ActualPoints,
            FirstValidPoint,
            InitialXOffset,
            InitialXTimeSeconds,
            InitialXTimeFraction,
            XIncrement,
            ScaleFactor,
            ScaleOffset,
        )

    def ReadWaveformInt32(self, vi, ChannelName, MaxTimeMilliseconds, WaveformArraySize):
        WaveformArray = ARRAY_ViInt32(WaveformArraySize)
        ActualPoints = ViInt64()
        FirstValidPoint = ViInt64()
        InitialXOffset = ViReal64()
        InitialXTimeSeconds = ViReal64()
        InitialXTimeFraction = ViReal64()
        XIncrement = ViReal64()
        ScaleFactor = ViReal64()
        ScaleOffset = ViReal64()
        _status = self.dll.tkmso5x_ReadWaveformInt32(
            ViSession(vi),
            ViConstString(ChannelName),
            ViInt32(MaxTimeMilliseconds),
            ViInt64(WaveformArraySize),
            WaveformArray,
            byref(ActualPoints),
            byref(FirstValidPoint),
            byref(InitialXOffset),
            byref(InitialXTimeSeconds),
            byref(InitialXTimeFraction),
            byref(XIncrement),
            byref(ScaleFactor),
            byref(ScaleOffset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ActualPoints = int(ActualPoints.value)
        FirstValidPoint = int(FirstValidPoint.value)
        InitialXOffset = float(InitialXOffset.value)
        InitialXTimeSeconds = float(InitialXTimeSeconds.value)
        InitialXTimeFraction = float(InitialXTimeFraction.value)
        XIncrement = float(XIncrement.value)
        ScaleFactor = float(ScaleFactor.value)
        ScaleOffset = float(ScaleOffset.value)
        return (
            WaveformArray,
            ActualPoints,
            FirstValidPoint,
            InitialXOffset,
            InitialXTimeSeconds,
            InitialXTimeFraction,
            XIncrement,
            ScaleFactor,
            ScaleOffset,
        )

    def ReadWaveformInt8(self, vi, ChannelName, MaxTimeMilliseconds, WaveformArraySize):
        WaveformArray = ARRAY_ViInt8(WaveformArraySize)
        ActualPoints = ViInt64()
        FirstValidPoint = ViInt64()
        InitialXOffset = ViReal64()
        InitialXTimeSeconds = ViReal64()
        InitialXTimeFraction = ViReal64()
        XIncrement = ViReal64()
        ScaleFactor = ViReal64()
        ScaleOffset = ViReal64()
        _status = self.dll.tkmso5x_ReadWaveformInt8(
            ViSession(vi),
            ViConstString(ChannelName),
            ViInt32(MaxTimeMilliseconds),
            ViInt64(WaveformArraySize),
            WaveformArray,
            byref(ActualPoints),
            byref(FirstValidPoint),
            byref(InitialXOffset),
            byref(InitialXTimeSeconds),
            byref(InitialXTimeFraction),
            byref(XIncrement),
            byref(ScaleFactor),
            byref(ScaleOffset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ActualPoints = int(ActualPoints.value)
        FirstValidPoint = int(FirstValidPoint.value)
        InitialXOffset = float(InitialXOffset.value)
        InitialXTimeSeconds = float(InitialXTimeSeconds.value)
        InitialXTimeFraction = float(InitialXTimeFraction.value)
        XIncrement = float(XIncrement.value)
        ScaleFactor = float(ScaleFactor.value)
        ScaleOffset = float(ScaleOffset.value)
        return (
            WaveformArray,
            ActualPoints,
            FirstValidPoint,
            InitialXOffset,
            InitialXTimeSeconds,
            InitialXTimeFraction,
            XIncrement,
            ScaleFactor,
            ScaleOffset,
        )

    def ReadWaveformReal64(self, vi, ChannelName, MaxTimeMilliseconds, WaveformArraySize):
        WaveformArray = ARRAY_ViReal64(WaveformArraySize)
        ActualPoints = ViInt64()
        FirstValidPoint = ViInt64()
        InitialXOffset = ViReal64()
        InitialXTimeSeconds = ViReal64()
        InitialXTimeFraction = ViReal64()
        XIncrement = ViReal64()
        _status = self.dll.tkmso5x_ReadWaveformReal64(
            ViSession(vi),
            ViConstString(ChannelName),
            ViInt32(MaxTimeMilliseconds),
            ViInt64(WaveformArraySize),
            WaveformArray,
            byref(ActualPoints),
            byref(FirstValidPoint),
            byref(InitialXOffset),
            byref(InitialXTimeSeconds),
            byref(InitialXTimeFraction),
            byref(XIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        WaveformArray = list(WaveformArray)
        ActualPoints = int(ActualPoints.value)
        FirstValidPoint = int(FirstValidPoint.value)
        InitialXOffset = float(InitialXOffset.value)
        InitialXTimeSeconds = float(InitialXTimeSeconds.value)
        InitialXTimeFraction = float(InitialXTimeFraction.value)
        XIncrement = float(XIncrement.value)
        return (
            WaveformArray,
            ActualPoints,
            FirstValidPoint,
            InitialXOffset,
            InitialXTimeSeconds,
            InitialXTimeFraction,
            XIncrement,
        )

    def QueryMinWaveformMemory(self, vi, DataWidth, NumRecords, OffsetWithinRecord, NumPointsPerRecord):
        NumSamples = ViInt64()
        _status = self.dll.tkmso5x_QueryMinWaveformMemory(
            ViSession(vi),
            ViInt32(DataWidth),
            ViInt64(NumRecords),
            ViInt64(OffsetWithinRecord),
            ViInt64(NumPointsPerRecord),
            byref(NumSamples),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(NumSamples.value)

    def WaitForAcquisitionComplete(self, vi, MaxTimeMilliseconds):
        _status = self.dll.tkmso5x_WaitForAcquisitionComplete(ViSession(vi), ViInt32(MaxTimeMilliseconds))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)

        return

    def IsIdle(self, vi):
        Status = ViInt32()
        _status = self.dll.tkmso5x_IsIdle(ViSession(vi), byref(Status))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Status.value)

    def IsMeasuring(self, vi):
        Status = ViInt32()
        _status = self.dll.tkmso5x_IsMeasuring(ViSession(vi), byref(Status))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Status.value)

    def IsWaitingForArm(self, vi):
        Status = ViInt32()
        _status = self.dll.tkmso5x_IsWaitingForArm(ViSession(vi), byref(Status))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Status.value)

    def IsWaitingForTrigger(self, vi):
        Status = ViInt32()
        _status = self.dll.tkmso5x_IsWaitingForTrigger(ViSession(vi), byref(Status))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(Status.value)

    def FetchWaveformInt16(self, vi, ChannelName, WaveformArraySize):
        WaveformArray = ARRAY_ViInt16(WaveformArraySize)
        ActualPoints = ViInt64()
        FirstValidPoint = ViInt64()
        InitialXOffset = ViReal64()
        InitialXTimeSeconds = ViReal64()
        InitialXTimeFraction = ViReal64()
        XIncrement = ViReal64()
        ScaleFactor = ViReal64()
        ScaleOffset = ViReal64()
        _status = self.dll.tkmso5x_FetchWaveformInt16(
            ViSession(vi),
            ViConstString(ChannelName),
            ViInt64(WaveformArraySize),
            WaveformArray,
            byref(ActualPoints),
            byref(FirstValidPoint),
            byref(InitialXOffset),
            byref(InitialXTimeSeconds),
            byref(InitialXTimeFraction),
            byref(XIncrement),
            byref(ScaleFactor),
            byref(ScaleOffset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ActualPoints = int(ActualPoints.value)
        FirstValidPoint = int(FirstValidPoint.value)
        InitialXOffset = float(InitialXOffset.value)
        InitialXTimeSeconds = float(InitialXTimeSeconds.value)
        InitialXTimeFraction = float(InitialXTimeFraction.value)
        XIncrement = float(XIncrement.value)
        ScaleFactor = float(ScaleFactor.value)
        ScaleOffset = float(ScaleOffset.value)
        return (
            WaveformArray,
            ActualPoints,
            FirstValidPoint,
            InitialXOffset,
            InitialXTimeSeconds,
            InitialXTimeFraction,
            XIncrement,
            ScaleFactor,
            ScaleOffset,
        )

    def FetchWaveformInt32(self, vi, ChannelName, WaveformArraySize):
        WaveformArray = ARRAY_ViInt32(WaveformArraySize)
        ActualPoints = ViInt64()
        FirstValidPoint = ViInt64()
        InitialXOffset = ViReal64()
        InitialXTimeSeconds = ViReal64()
        InitialXTimeFraction = ViReal64()
        XIncrement = ViReal64()
        ScaleFactor = ViReal64()
        ScaleOffset = ViReal64()
        _status = self.dll.tkmso5x_FetchWaveformInt32(
            ViSession(vi),
            ViConstString(ChannelName),
            ViInt64(WaveformArraySize),
            WaveformArray,
            byref(ActualPoints),
            byref(FirstValidPoint),
            byref(InitialXOffset),
            byref(InitialXTimeSeconds),
            byref(InitialXTimeFraction),
            byref(XIncrement),
            byref(ScaleFactor),
            byref(ScaleOffset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ActualPoints = int(ActualPoints.value)
        FirstValidPoint = int(FirstValidPoint.value)
        InitialXOffset = float(InitialXOffset.value)
        InitialXTimeSeconds = float(InitialXTimeSeconds.value)
        InitialXTimeFraction = float(InitialXTimeFraction.value)
        XIncrement = float(XIncrement.value)
        ScaleFactor = float(ScaleFactor.value)
        ScaleOffset = float(ScaleOffset.value)
        return (
            WaveformArray,
            ActualPoints,
            FirstValidPoint,
            InitialXOffset,
            InitialXTimeSeconds,
            InitialXTimeFraction,
            XIncrement,
            ScaleFactor,
            ScaleOffset,
        )

    def FetchWaveformInt8(self, vi, ChannelName, WaveformArraySize):
        WaveformArray = ARRAY_ViInt8(WaveformArraySize)
        ActualPoints = ViInt64()
        FirstValidPoint = ViInt64()
        InitialXOffset = ViReal64()
        InitialXTimeSeconds = ViReal64()
        InitialXTimeFraction = ViReal64()
        XIncrement = ViReal64()
        ScaleFactor = ViReal64()
        ScaleOffset = ViReal64()
        _status = self.dll.tkmso5x_FetchWaveformInt8(
            ViSession(vi),
            ViConstString(ChannelName),
            ViInt64(WaveformArraySize),
            WaveformArray,
            byref(ActualPoints),
            byref(FirstValidPoint),
            byref(InitialXOffset),
            byref(InitialXTimeSeconds),
            byref(InitialXTimeFraction),
            byref(XIncrement),
            byref(ScaleFactor),
            byref(ScaleOffset),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        ActualPoints = int(ActualPoints.value)
        FirstValidPoint = int(FirstValidPoint.value)
        InitialXOffset = float(InitialXOffset.value)
        InitialXTimeSeconds = float(InitialXTimeSeconds.value)
        InitialXTimeFraction = float(InitialXTimeFraction.value)
        XIncrement = float(XIncrement.value)
        ScaleFactor = float(ScaleFactor.value)
        ScaleOffset = float(ScaleOffset.value)
        return (
            WaveformArray,
            ActualPoints,
            FirstValidPoint,
            InitialXOffset,
            InitialXTimeSeconds,
            InitialXTimeFraction,
            XIncrement,
            ScaleFactor,
            ScaleOffset,
        )

    def FetchWaveformReal64(self, vi, ChannelName, WaveformArraySize):
        WaveformArray = ARRAY_ViReal64(WaveformArraySize)
        ActualPoints = ViInt64()
        FirstValidPoint = ViInt64()
        InitialXOffset = ViReal64()
        InitialXTimeSeconds = ViReal64()
        InitialXTimeFraction = ViReal64()
        XIncrement = ViReal64()
        _status = self.dll.tkmso5x_FetchWaveformReal64(
            ViSession(vi),
            ViConstString(ChannelName),
            ViInt64(WaveformArraySize),
            WaveformArray,
            byref(ActualPoints),
            byref(FirstValidPoint),
            byref(InitialXOffset),
            byref(InitialXTimeSeconds),
            byref(InitialXTimeFraction),
            byref(XIncrement),
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        WaveformArray = list(WaveformArray)
        ActualPoints = int(ActualPoints.value)
        FirstValidPoint = int(FirstValidPoint.value)
        InitialXOffset = float(InitialXOffset.value)
        InitialXTimeSeconds = float(InitialXTimeSeconds.value)
        InitialXTimeFraction = float(InitialXTimeFraction.value)
        XIncrement = float(XIncrement.value)
        return (
            WaveformArray,
            ActualPoints,
            FirstValidPoint,
            InitialXOffset,
            InitialXTimeSeconds,
            InitialXTimeFraction,
            XIncrement,
        )

    def GetTriggerSourceName(self, vi, SourceIndex, SourceNameBufferSize):
        SourceName = ARRAY_ViChar(SourceNameBufferSize)
        _status = self.dll.tkmso5x_GetTriggerSourceName(
            ViSession(vi), ViInt32(SourceIndex), ViInt32(SourceNameBufferSize), SourceName
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(SourceName)

    def GetDelayTriggerSourceName(self, vi, SourceIndex, SourceNameBufferSize):
        SourceName = ARRAY_ViChar(SourceNameBufferSize)
        _status = self.dll.tkmso5x_GetDelayTriggerSourceName(
            ViSession(vi), ViInt32(SourceIndex), ViInt32(SourceNameBufferSize), SourceName
        )
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return decode(SourceName)
