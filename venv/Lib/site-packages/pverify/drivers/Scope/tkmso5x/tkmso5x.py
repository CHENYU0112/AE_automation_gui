from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .tkmso5x_dllwrap import *


class tkmso5x(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = tkmso5x_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def GetNextCoercionRecord(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def LockSession(self):
        """ """
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """ """
        return self._dllwrap.UnlockSession(self._vi)

    def GetChannelName(self, index, nameBufferSize):
        """

        :param index:
        :type index:
        :param nameBufferSize:
        :type nameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, index, nameBufferSize)

    def ConfigureAcquisitionType(self, acquisitionType):
        """

        :param acquisitionType:
        :type acquisitionType:
        """
        return self._dllwrap.ConfigureAcquisitionType(self._vi, acquisitionType)

    def ConfigureAcquisitionRecord(self, timePerRecord, minNumPts, acquisitionStartTime):
        """

        :param timePerRecord:
        :type timePerRecord:
        :param minNumPts:
        :type minNumPts:
        :param acquisitionStartTime:
        :type acquisitionStartTime:
        """
        return self._dllwrap.ConfigureAcquisitionRecord(self._vi, timePerRecord, minNumPts, acquisitionStartTime)

    def ConfigureNumAverages(self, numberOfAverages):
        """

        :param numberOfAverages:
        :type numberOfAverages:
        """
        return self._dllwrap.ConfigureNumAverages(self._vi, numberOfAverages)

    def ConfigureNumEnvelopes(self, numberOfEnvelopes):
        """

        :param numberOfEnvelopes:
        :type numberOfEnvelopes:
        """
        return self._dllwrap.ConfigureNumEnvelopes(self._vi, numberOfEnvelopes)

    def ConfigureInitiateContinuous(self, continuousAcquisition):
        """

        :param continuousAcquisition:
        :type continuousAcquisition:
        """
        return self._dllwrap.ConfigureInitiateContinuous(self._vi, continuousAcquisition)

    def ConfigureSingleAcquisition(self, acquisitionType, NumberOfAcquisition):
        """

        :param acquisitionType:
        :type acquisitionType:
        :param NumberOfAcquisition:
        :type NumberOfAcquisition:
        """
        return self._dllwrap.ConfigureSingleAcquisition(self._vi, acquisitionType, NumberOfAcquisition)

    def ConfigureFastAcquisition(self, fastacquisition, WaveformGrading):
        """

        :param fastacquisition:
        :type fastacquisition:
        :param WaveformGrading:
        :type WaveformGrading:
        """
        return self._dllwrap.ConfigureFastAcquisition(self._vi, fastacquisition, WaveformGrading)

    def ActualRecordLength(self):
        """ """
        return self._dllwrap.ActualRecordLength(self._vi)

    def SampleRate(self):
        """ """
        return self._dllwrap.SampleRate(self._vi)

    def AutoProbeSenseValue(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.AutoProbeSenseValue(self._vi, channel)

    def ConfigureChannel(self, channel, range, offset, coupling, probeAttenuation, enabled):
        """

        :param channel:
        :type channel:
        :param range:
        :type range:
        :param offset:
        :type offset:
        :param coupling:
        :type coupling:
        :param probeAttenuation:
        :type probeAttenuation:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureChannel(self._vi, channel, range, offset, coupling, probeAttenuation, enabled)

    def ConfigureDigitalChannel(self, digitalChannelgroup, digitalChannel, threshold, groupthreshold):
        """

        :param digitalChannelgroup:
        :type digitalChannelgroup:
        :param digitalChannel:
        :type digitalChannel:
        :param threshold:
        :type threshold:
        :param groupthreshold:
        :type groupthreshold:
        """
        return self._dllwrap.ConfigureDigitalChannel(
            self._vi, digitalChannelgroup, digitalChannel, threshold, groupthreshold
        )

    def ConfigureChanCharacteristics(self, channel, inputImpedance, maxInputFrequency):
        """

        :param channel:
        :type channel:
        :param inputImpedance:
        :type inputImpedance:
        :param maxInputFrequency:
        :type maxInputFrequency:
        """
        return self._dllwrap.ConfigureChanCharacteristics(self._vi, channel, inputImpedance, maxInputFrequency)

    def ConfigureExternalAttenuator(self, channelname, Unit, InputOutputRatio):
        """

        :param channelname:
        :type channelname:
        :param Unit:
        :type Unit:
        :param InputOutputRatio:
        :type InputOutputRatio:
        """
        return self._dllwrap.ConfigureExternalAttenuator(self._vi, channelname, Unit, InputOutputRatio)

    def ConfigureProbeRangeControl(self, channelname, RangeControlType):
        """

        :param channelname:
        :type channelname:
        :param RangeControlType:
        :type RangeControlType:
        """
        return self._dllwrap.ConfigureProbeRangeControl(self._vi, channelname, RangeControlType)

    def ConfigureProbeAccessory(self, channelname, Accessory):
        """

        :param channelname:
        :type channelname:
        :param Accessory:
        :type Accessory:
        """
        return self._dllwrap.ConfigureProbeAccessory(self._vi, channelname, Accessory)

    def ConfigureTimebase(self, timebase, position):
        """

        :param timebase:
        :type timebase:
        :param position:
        :type position:
        """
        return self._dllwrap.ConfigureTimebase(self._vi, timebase, position)

    def ConfigureAuxiliaryOutput(self, AuxiliarySource, AuxiliaryEdge):
        """

        :param AuxiliarySource:
        :type AuxiliarySource:
        :param AuxiliaryEdge:
        :type AuxiliaryEdge:
        """
        return self._dllwrap.ConfigureAuxiliaryOutput(self._vi, AuxiliarySource, AuxiliaryEdge)

    def ConfigureDeskewSensitivity(self, channelname, Deskewtime):
        """

        :param channelname:
        :type channelname:
        :param Deskewtime:
        :type Deskewtime:
        """
        return self._dllwrap.ConfigureDeskewSensitivity(self._vi, channelname, Deskewtime)

    def ConfigureDeskew(
        self,
        DeskewType,
        DeskewSlope,
        SourceChannel,
        SourceRefLevel,
        SourceHysteresis,
        SourcePropagationDelay,
        TargetChannel,
        TargetRefLevel,
        TargetHysteresis,
        TargetPropagationDelay,
    ):
        """

        :param DeskewType:
        :type DeskewType:
        :param DeskewSlope:
        :type DeskewSlope:
        :param SourceChannel:
        :type SourceChannel:
        :param SourceRefLevel:
        :type SourceRefLevel:
        :param SourceHysteresis:
        :type SourceHysteresis:
        :param SourcePropagationDelay:
        :type SourcePropagationDelay:
        :param TargetChannel:
        :type TargetChannel:
        :param TargetRefLevel:
        :type TargetRefLevel:
        :param TargetHysteresis:
        :type TargetHysteresis:
        :param TargetPropagationDelay:
        :type TargetPropagationDelay:
        """
        return self._dllwrap.ConfigureDeskew(
            self._vi,
            DeskewType,
            DeskewSlope,
            SourceChannel,
            SourceRefLevel,
            SourceHysteresis,
            SourcePropagationDelay,
            TargetChannel,
            TargetRefLevel,
            TargetHysteresis,
            TargetPropagationDelay,
        )

    def ConfigureProbe(self, channelname, probeforcedrange, probeoperation):
        """

        :param channelname:
        :type channelname:
        :param probeforcedrange:
        :type probeforcedrange:
        :param probeoperation:
        :type probeoperation:
        """
        return self._dllwrap.ConfigureProbe(self._vi, channelname, probeforcedrange, probeoperation)

    def ConfigureDelay(self, delayenable, HorizontalDelay):
        """

        :param delayenable:
        :type delayenable:
        :param HorizontalDelay:
        :type HorizontalDelay:
        """
        return self._dllwrap.ConfigureDelay(self._vi, delayenable, HorizontalDelay)

    def ConfigureInputMode(self, channel, inputMode, modeOffset, commonModeOffsetTrackEnabled):
        """

        :param channel:
        :type channel:
        :param inputMode:
        :type inputMode:
        :param modeOffset:
        :type modeOffset:
        :param commonModeOffsetTrackEnabled:
        :type commonModeOffsetTrackEnabled:
        """
        return self._dllwrap.ConfigureInputMode(self._vi, channel, inputMode, modeOffset, commonModeOffsetTrackEnabled)

    def ConfigureTerminationVoltage(
        self, channel, terminationVoltageA, terminationVoltageB, terminationVoltTrackEnabled
    ):
        """

        :param channel:
        :type channel:
        :param terminationVoltageA:
        :type terminationVoltageA:
        :param terminationVoltageB:
        :type terminationVoltageB:
        :param terminationVoltTrackEnabled:
        :type terminationVoltTrackEnabled:
        """
        return self._dllwrap.ConfigureTerminationVoltage(
            self._vi, channel, terminationVoltageA, terminationVoltageB, terminationVoltTrackEnabled
        )

    def ConfigureTimebaseReferenceOscillatorSource(self, timebaseReferenceSource):
        """

        :param timebaseReferenceSource:
        :type timebaseReferenceSource:
        """
        return self._dllwrap.ConfigureTimebaseReferenceOscillatorSource(self._vi, timebaseReferenceSource)

    def ConfigureBandwidthFilterOptimization(self, channel, bandwidthFilterOptimization):
        """

        :param channel:
        :type channel:
        :param bandwidthFilterOptimization:
        :type bandwidthFilterOptimization:
        """
        return self._dllwrap.ConfigureBandwidthFilterOptimization(self._vi, channel, bandwidthFilterOptimization)

    def ConfigureTrigger(self, triggerType, holdoff):
        """

        :param triggerType:
        :type triggerType:
        :param holdoff:
        :type holdoff:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, triggerType, holdoff)

    def ConfigureTriggerCoupling(self, coupling):
        """

        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureTriggerCoupling(self._vi, coupling)

    def ConfigureTriggerModifier(self, triggerModifier):
        """

        :param triggerModifier:
        :type triggerModifier:
        """
        return self._dllwrap.ConfigureTriggerModifier(self._vi, triggerModifier)

    def ConfigureEdgeTriggerSource(self, source, level, slope):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureEdgeTriggerSource(self._vi, source, level, slope)

    def ConfigureWidthTriggerSource(
        self, source, level, widthLowThreshold, widthHighThreshold, widthPolarity, widthCondition
    ):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param widthLowThreshold:
        :type widthLowThreshold:
        :param widthHighThreshold:
        :type widthHighThreshold:
        :param widthPolarity:
        :type widthPolarity:
        :param widthCondition:
        :type widthCondition:
        """
        return self._dllwrap.ConfigureWidthTriggerSource(
            self._vi, source, level, widthLowThreshold, widthHighThreshold, widthPolarity, widthCondition
        )

    def ConfigureWidthTriggerAdvanced(self, widthCondition, triggerwidth, QualificationType, LogicQualification):
        """

        :param widthCondition:
        :type widthCondition:
        :param triggerwidth:
        :type triggerwidth:
        :param QualificationType:
        :type QualificationType:
        :param LogicQualification:
        :type LogicQualification:
        """
        return self._dllwrap.ConfigureWidthTriggerAdvanced(
            self._vi, widthCondition, triggerwidth, QualificationType, LogicQualification
        )

    def ConfigureRuntTriggerSource(self, source, runtLowThreshold, runtHighThreshold, runtPolarity):
        """

        :param source:
        :type source:
        :param runtLowThreshold:
        :type runtLowThreshold:
        :param runtHighThreshold:
        :type runtHighThreshold:
        :param runtPolarity:
        :type runtPolarity:
        """
        return self._dllwrap.ConfigureRuntTriggerSource(
            self._vi, source, runtLowThreshold, runtHighThreshold, runtPolarity
        )

    def ConfigureRuntTriggerCondition(self, runtCondition, triggerwidth, QualificationType, LogicQualification):
        """

        :param runtCondition:
        :type runtCondition:
        :param triggerwidth:
        :type triggerwidth:
        :param QualificationType:
        :type QualificationType:
        :param LogicQualification:
        :type LogicQualification:
        """
        return self._dllwrap.ConfigureRuntTriggerCondition(
            self._vi, runtCondition, triggerwidth, QualificationType, LogicQualification
        )

    def ConfigureTriggerHoldoffType(self, Holdofftype):
        """

        :param Holdofftype:
        :type Holdofftype:
        """
        return self._dllwrap.ConfigureTriggerHoldoffType(self._vi, Holdofftype)

    def ConfigureWindowTrigger(
        self,
        source,
        windowCondition,
        windowHighThreshold,
        windowLowThreshold,
        triggerwidth,
        thresholdcrossing,
        QualificationType,
        LogicQualification,
    ):
        """

        :param source:
        :type source:
        :param windowCondition:
        :type windowCondition:
        :param windowHighThreshold:
        :type windowHighThreshold:
        :param windowLowThreshold:
        :type windowLowThreshold:
        :param triggerwidth:
        :type triggerwidth:
        :param thresholdcrossing:
        :type thresholdcrossing:
        :param QualificationType:
        :type QualificationType:
        :param LogicQualification:
        :type LogicQualification:
        """
        return self._dllwrap.ConfigureWindowTrigger(
            self._vi,
            source,
            windowCondition,
            windowHighThreshold,
            windowLowThreshold,
            triggerwidth,
            thresholdcrossing,
            QualificationType,
            LogicQualification,
        )

    def ConfigureTimeoutTrigger(self, source, timeoutCondition, time, level, QualificationType, LogicQualification):
        """

        :param source:
        :type source:
        :param timeoutCondition:
        :type timeoutCondition:
        :param time:
        :type time:
        :param level:
        :type level:
        :param QualificationType:
        :type QualificationType:
        :param LogicQualification:
        :type LogicQualification:
        """
        return self._dllwrap.ConfigureTimeoutTrigger(
            self._vi, source, timeoutCondition, time, level, QualificationType, LogicQualification
        )

    def ConfigureBusTrigger(self, source):
        """

        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureBusTrigger(self._vi, source)

    def ConfigureTransitionTrigger(
        self,
        source,
        transitionCondition,
        transitionHighThreshold,
        transitionLowThreshold,
        transitionPolarity,
        deltatime,
        QualificationType,
        LogicQualification,
    ):
        """

        :param source:
        :type source:
        :param transitionCondition:
        :type transitionCondition:
        :param transitionHighThreshold:
        :type transitionHighThreshold:
        :param transitionLowThreshold:
        :type transitionLowThreshold:
        :param transitionPolarity:
        :type transitionPolarity:
        :param deltatime:
        :type deltatime:
        :param QualificationType:
        :type QualificationType:
        :param LogicQualification:
        :type LogicQualification:
        """
        return self._dllwrap.ConfigureTransitionTrigger(
            self._vi,
            source,
            transitionCondition,
            transitionHighThreshold,
            transitionLowThreshold,
            transitionPolarity,
            deltatime,
            QualificationType,
            LogicQualification,
        )

    def ConfigureSetupholdTrigger(
        self, clocksource, ClockEdge, ClockLevel, HoldTime, SetupTime, DataSource, SourceInclusion
    ):
        """

        :param clocksource:
        :type clocksource:
        :param ClockEdge:
        :type ClockEdge:
        :param ClockLevel:
        :type ClockLevel:
        :param HoldTime:
        :type HoldTime:
        :param SetupTime:
        :type SetupTime:
        :param DataSource:
        :type DataSource:
        :param SourceInclusion:
        :type SourceInclusion:
        """
        return self._dllwrap.ConfigureSetupholdTrigger(
            self._vi, clocksource, ClockEdge, ClockLevel, HoldTime, SetupTime, DataSource, SourceInclusion
        )

    def ConfigureLogicTrigger(
        self,
        Logicfunction,
        Triggercondition,
        Deltatime,
        enableclocksource,
        clocksource,
        ClockPolarity,
        ClockLevel,
        InputSource,
        SourceLogic,
    ):
        """

        :param Logicfunction:
        :type Logicfunction:
        :param Triggercondition:
        :type Triggercondition:
        :param Deltatime:
        :type Deltatime:
        :param enableclocksource:
        :type enableclocksource:
        :param clocksource:
        :type clocksource:
        :param ClockPolarity:
        :type ClockPolarity:
        :param ClockLevel:
        :type ClockLevel:
        :param InputSource:
        :type InputSource:
        :param SourceLogic:
        :type SourceLogic:
        """
        return self._dllwrap.ConfigureLogicTrigger(
            self._vi,
            Logicfunction,
            Triggercondition,
            Deltatime,
            enableclocksource,
            clocksource,
            ClockPolarity,
            ClockLevel,
            InputSource,
            SourceLogic,
        )

    def ConfigureDelayTrigger(self, EnableDelayTrigger, triggerType, TriggerMode, TriggerDelayTime, TriggerEventCount):
        """

        :param EnableDelayTrigger:
        :type EnableDelayTrigger:
        :param triggerType:
        :type triggerType:
        :param TriggerMode:
        :type TriggerMode:
        :param TriggerDelayTime:
        :type TriggerDelayTime:
        :param TriggerEventCount:
        :type TriggerEventCount:
        """
        return self._dllwrap.ConfigureDelayTrigger(
            self._vi, EnableDelayTrigger, triggerType, TriggerMode, TriggerDelayTime, TriggerEventCount
        )

    def ConfigureDelayTriggerCoupling(self, coupling):
        """

        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureDelayTriggerCoupling(self._vi, coupling)

    def ConfigureDelayTriggerReset(self, TriggerResetType, Timeout, TriggerSource, Coupling, Threshold, Slope):
        """

        :param TriggerResetType:
        :type TriggerResetType:
        :param Timeout:
        :type Timeout:
        :param TriggerSource:
        :type TriggerSource:
        :param Coupling:
        :type Coupling:
        :param Threshold:
        :type Threshold:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.ConfigureDelayTriggerReset(
            self._vi, TriggerResetType, Timeout, TriggerSource, Coupling, Threshold, Slope
        )

    def ConfigureDelayEdgeTriggerSource(self, source, level, slope):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureDelayEdgeTriggerSource(self._vi, source, level, slope)

    def ConfigureDelayWidthTriggerSource(
        self, source, level, widthLowThreshold, widthHighThreshold, widthPolarity, widthCondition
    ):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param widthLowThreshold:
        :type widthLowThreshold:
        :param widthHighThreshold:
        :type widthHighThreshold:
        :param widthPolarity:
        :type widthPolarity:
        :param widthCondition:
        :type widthCondition:
        """
        return self._dllwrap.ConfigureDelayWidthTriggerSource(
            self._vi, source, level, widthLowThreshold, widthHighThreshold, widthPolarity, widthCondition
        )

    def ConfigureDelayWidthTriggerAdvanced(self, widthCondition, triggerwidth):
        """

        :param widthCondition:
        :type widthCondition:
        :param triggerwidth:
        :type triggerwidth:
        """
        return self._dllwrap.ConfigureDelayWidthTriggerAdvanced(self._vi, widthCondition, triggerwidth)

    def ConfigureDelayRuntTriggerSource(self, source, runtLowThreshold, runtHighThreshold, runtPolarity):
        """

        :param source:
        :type source:
        :param runtLowThreshold:
        :type runtLowThreshold:
        :param runtHighThreshold:
        :type runtHighThreshold:
        :param runtPolarity:
        :type runtPolarity:
        """
        return self._dllwrap.ConfigureDelayRuntTriggerSource(
            self._vi, source, runtLowThreshold, runtHighThreshold, runtPolarity
        )

    def ConfigureDelayRuntTriggerCondition(self, runtCondition, triggerwidth):
        """

        :param runtCondition:
        :type runtCondition:
        :param triggerwidth:
        :type triggerwidth:
        """
        return self._dllwrap.ConfigureDelayRuntTriggerCondition(self._vi, runtCondition, triggerwidth)

    def ConfigureDelayWindowTrigger(
        self, source, windowCondition, windowHighThreshold, windowLowThreshold, triggerwidth, thresholdcrossing
    ):
        """

        :param source:
        :type source:
        :param windowCondition:
        :type windowCondition:
        :param windowHighThreshold:
        :type windowHighThreshold:
        :param windowLowThreshold:
        :type windowLowThreshold:
        :param triggerwidth:
        :type triggerwidth:
        :param thresholdcrossing:
        :type thresholdcrossing:
        """
        return self._dllwrap.ConfigureDelayWindowTrigger(
            self._vi, source, windowCondition, windowHighThreshold, windowLowThreshold, triggerwidth, thresholdcrossing
        )

    def ConfigureDelayTimeoutTrigger(self, source, timeoutCondition, time, level):
        """

        :param source:
        :type source:
        :param timeoutCondition:
        :type timeoutCondition:
        :param time:
        :type time:
        :param level:
        :type level:
        """
        return self._dllwrap.ConfigureDelayTimeoutTrigger(self._vi, source, timeoutCondition, time, level)

    def ConfigureDelayBusTrigger(self, source):
        """

        :param source:
        :type source:
        """
        return self._dllwrap.ConfigureDelayBusTrigger(self._vi, source)

    def ConfigureDelayTransitionTrigger(
        self,
        source,
        transitionCondition,
        transitionHighThreshold,
        transitionLowThreshold,
        transitionPolarity,
        deltatime,
    ):
        """

        :param source:
        :type source:
        :param transitionCondition:
        :type transitionCondition:
        :param transitionHighThreshold:
        :type transitionHighThreshold:
        :param transitionLowThreshold:
        :type transitionLowThreshold:
        :param transitionPolarity:
        :type transitionPolarity:
        :param deltatime:
        :type deltatime:
        """
        return self._dllwrap.ConfigureDelayTransitionTrigger(
            self._vi,
            source,
            transitionCondition,
            transitionHighThreshold,
            transitionLowThreshold,
            transitionPolarity,
            deltatime,
        )

    def ConfigureDelaySetupholdTrigger(
        self, clocksource, ClockEdge, ClockLevel, HoldTime, SetupTime, DataSource, SourceInclusion
    ):
        """

        :param clocksource:
        :type clocksource:
        :param ClockEdge:
        :type ClockEdge:
        :param ClockLevel:
        :type ClockLevel:
        :param HoldTime:
        :type HoldTime:
        :param SetupTime:
        :type SetupTime:
        :param DataSource:
        :type DataSource:
        :param SourceInclusion:
        :type SourceInclusion:
        """
        return self._dllwrap.ConfigureDelaySetupholdTrigger(
            self._vi, clocksource, ClockEdge, ClockLevel, HoldTime, SetupTime, DataSource, SourceInclusion
        )

    def ConfigureDelayLogicTrigger(
        self,
        Logicfunction,
        Triggercondition,
        Deltatime,
        enableclocksource,
        clocksource,
        ClockPolarity,
        ClockLevel,
        InputSource,
        SourceLogic,
    ):
        """

        :param Logicfunction:
        :type Logicfunction:
        :param Triggercondition:
        :type Triggercondition:
        :param Deltatime:
        :type Deltatime:
        :param enableclocksource:
        :type enableclocksource:
        :param clocksource:
        :type clocksource:
        :param ClockPolarity:
        :type ClockPolarity:
        :param ClockLevel:
        :type ClockLevel:
        :param InputSource:
        :type InputSource:
        :param SourceLogic:
        :type SourceLogic:
        """
        return self._dllwrap.ConfigureDelayLogicTrigger(
            self._vi,
            Logicfunction,
            Triggercondition,
            Deltatime,
            enableclocksource,
            clocksource,
            ClockPolarity,
            ClockLevel,
            InputSource,
            SourceLogic,
        )

    def MountNetworkDriveStatus(self, driveName):
        """

        :param driveName:
        :type driveName:
        """
        return self._dllwrap.MountNetworkDriveStatus(self._vi, driveName)

    def MountNetworkDrive(self, driveName, serverIdentity, path, userName, password, domainName, SMBCIFSMount):
        """

        :param driveName:
        :type driveName:
        :param serverIdentity:
        :type serverIdentity:
        :param path:
        :type path:
        :param userName:
        :type userName:
        :param password:
        :type password:
        :param domainName:
        :type domainName:
        :param SMBCIFSMount:
        :type SMBCIFSMount:
        """
        return self._dllwrap.MountNetworkDrive(
            self._vi, driveName, serverIdentity, path, userName, password, domainName, SMBCIFSMount
        )

    def ConfigureRefLevels(self, low, mid, high):
        """

        :param low:
        :type low:
        :param mid:
        :type mid:
        :param high:
        :type high:
        """
        return self._dllwrap.ConfigureRefLevels(self._vi, low, mid, high)

    def ConfigureGlobalPercentRefLevel(
        self,
        FallHighRef,
        FallLowRef,
        FallMidRef,
        RiseHighRef,
        RiseLowRef,
        RiseMidRef,
        Hysteresis,
        PercentType,
        BaseTopMethod,
        RefLevelMode,
    ):
        """

        :param FallHighRef:
        :type FallHighRef:
        :param FallLowRef:
        :type FallLowRef:
        :param FallMidRef:
        :type FallMidRef:
        :param RiseHighRef:
        :type RiseHighRef:
        :param RiseLowRef:
        :type RiseLowRef:
        :param RiseMidRef:
        :type RiseMidRef:
        :param Hysteresis:
        :type Hysteresis:
        :param PercentType:
        :type PercentType:
        :param BaseTopMethod:
        :type BaseTopMethod:
        :param RefLevelMode:
        :type RefLevelMode:
        """
        return self._dllwrap.ConfigureGlobalPercentRefLevel(
            self._vi,
            FallHighRef,
            FallLowRef,
            FallMidRef,
            RiseHighRef,
            RiseLowRef,
            RiseMidRef,
            Hysteresis,
            PercentType,
            BaseTopMethod,
            RefLevelMode,
        )

    def ConfigureGlobalAbsoluteRefLevel(
        self,
        FallHighRef,
        FallLowRef,
        FallMidRef,
        RiseHighRef,
        RiseLowRef,
        RiseMidRef,
        Hysteresis,
        AbsoluteLevelType,
        RefLevelMode,
    ):
        """

        :param FallHighRef:
        :type FallHighRef:
        :param FallLowRef:
        :type FallLowRef:
        :param FallMidRef:
        :type FallMidRef:
        :param RiseHighRef:
        :type RiseHighRef:
        :param RiseLowRef:
        :type RiseLowRef:
        :param RiseMidRef:
        :type RiseMidRef:
        :param Hysteresis:
        :type Hysteresis:
        :param AbsoluteLevelType:
        :type AbsoluteLevelType:
        :param RefLevelMode:
        :type RefLevelMode:
        """
        return self._dllwrap.ConfigureGlobalAbsoluteRefLevel(
            self._vi,
            FallHighRef,
            FallLowRef,
            FallMidRef,
            RiseHighRef,
            RiseLowRef,
            RiseMidRef,
            Hysteresis,
            AbsoluteLevelType,
            RefLevelMode,
        )

    def ConfigureSourcePercentRefLevel(
        self,
        Source,
        FallHighRef,
        FallLowRef,
        FallMidRef,
        RiseHighRef,
        RiseLowRef,
        RiseMidRef,
        Hysteresis,
        PercentType,
        BaseTopMethod,
    ):
        """

        :param Source:
        :type Source:
        :param FallHighRef:
        :type FallHighRef:
        :param FallLowRef:
        :type FallLowRef:
        :param FallMidRef:
        :type FallMidRef:
        :param RiseHighRef:
        :type RiseHighRef:
        :param RiseLowRef:
        :type RiseLowRef:
        :param RiseMidRef:
        :type RiseMidRef:
        :param Hysteresis:
        :type Hysteresis:
        :param PercentType:
        :type PercentType:
        :param BaseTopMethod:
        :type BaseTopMethod:
        """
        return self._dllwrap.ConfigureSourcePercentRefLevel(
            self._vi,
            Source,
            FallHighRef,
            FallLowRef,
            FallMidRef,
            RiseHighRef,
            RiseLowRef,
            RiseMidRef,
            Hysteresis,
            PercentType,
            BaseTopMethod,
        )

    def ConfigureSourceAbsoluteRefLevel(
        self, Source, FallHighRef, FallLowRef, FallMidRef, RiseHighRef, RiseLowRef, RiseMidRef, Hysteresis, AbsoluteType
    ):
        """

        :param Source:
        :type Source:
        :param FallHighRef:
        :type FallHighRef:
        :param FallLowRef:
        :type FallLowRef:
        :param FallMidRef:
        :type FallMidRef:
        :param RiseHighRef:
        :type RiseHighRef:
        :param RiseLowRef:
        :type RiseLowRef:
        :param RiseMidRef:
        :type RiseMidRef:
        :param Hysteresis:
        :type Hysteresis:
        :param AbsoluteType:
        :type AbsoluteType:
        """
        return self._dllwrap.ConfigureSourceAbsoluteRefLevel(
            self._vi,
            Source,
            FallHighRef,
            FallLowRef,
            FallMidRef,
            RiseHighRef,
            RiseLowRef,
            RiseMidRef,
            Hysteresis,
            AbsoluteType,
        )

    def ConfigureMeasurementPercentRefLevel(
        self,
        MeasurementNumber,
        RefLevelNumber,
        FallHighRef,
        FallLowRef,
        FallMidRef,
        RiseHighRef,
        RiseLowRef,
        RiseMidRef,
        Hysteresis,
        PercentType,
        BaseTopMethod,
        EnableSharedRefLevel,
    ):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param RefLevelNumber:
        :type RefLevelNumber:
        :param FallHighRef:
        :type FallHighRef:
        :param FallLowRef:
        :type FallLowRef:
        :param FallMidRef:
        :type FallMidRef:
        :param RiseHighRef:
        :type RiseHighRef:
        :param RiseLowRef:
        :type RiseLowRef:
        :param RiseMidRef:
        :type RiseMidRef:
        :param Hysteresis:
        :type Hysteresis:
        :param PercentType:
        :type PercentType:
        :param BaseTopMethod:
        :type BaseTopMethod:
        :param EnableSharedRefLevel:
        :type EnableSharedRefLevel:
        """
        return self._dllwrap.ConfigureMeasurementPercentRefLevel(
            self._vi,
            MeasurementNumber,
            RefLevelNumber,
            FallHighRef,
            FallLowRef,
            FallMidRef,
            RiseHighRef,
            RiseLowRef,
            RiseMidRef,
            Hysteresis,
            PercentType,
            BaseTopMethod,
            EnableSharedRefLevel,
        )

    def ConfigureMeasurementAbsoluteRefLevel(
        self,
        MeasurementNumber,
        RefLevelNumber,
        FallHighRef,
        FallLowRef,
        FallMidRef,
        RiseHighRef,
        RiseLowRef,
        RiseMidRef,
        Hysteresis,
        AbsoluteType,
        EnableSharedRefLevel,
    ):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param RefLevelNumber:
        :type RefLevelNumber:
        :param FallHighRef:
        :type FallHighRef:
        :param FallLowRef:
        :type FallLowRef:
        :param FallMidRef:
        :type FallMidRef:
        :param RiseHighRef:
        :type RiseHighRef:
        :param RiseLowRef:
        :type RiseLowRef:
        :param RiseMidRef:
        :type RiseMidRef:
        :param Hysteresis:
        :type Hysteresis:
        :param AbsoluteType:
        :type AbsoluteType:
        :param EnableSharedRefLevel:
        :type EnableSharedRefLevel:
        """
        return self._dllwrap.ConfigureMeasurementAbsoluteRefLevel(
            self._vi,
            MeasurementNumber,
            RefLevelNumber,
            FallHighRef,
            FallLowRef,
            FallMidRef,
            RiseHighRef,
            RiseLowRef,
            RiseMidRef,
            Hysteresis,
            AbsoluteType,
            EnableSharedRefLevel,
        )

    def ConfigureConstantClockRecovery(
        self,
        ConfigurationType,
        MeasurementNumber,
        ConstantClockMode,
        AutoCalculate,
        ClockFrequency,
        AdvancedMethod,
        BitRate,
        PatternFile,
    ):
        """

        :param ConfigurationType:
        :type ConfigurationType:
        :param MeasurementNumber:
        :type MeasurementNumber:
        :param ConstantClockMode:
        :type ConstantClockMode:
        :param AutoCalculate:
        :type AutoCalculate:
        :param ClockFrequency:
        :type ClockFrequency:
        :param AdvancedMethod:
        :type AdvancedMethod:
        :param BitRate:
        :type BitRate:
        :param PatternFile:
        :type PatternFile:
        """
        return self._dllwrap.ConfigureConstantClockRecovery(
            self._vi,
            ConfigurationType,
            MeasurementNumber,
            ConstantClockMode,
            AutoCalculate,
            ClockFrequency,
            AdvancedMethod,
            BitRate,
            PatternFile,
        )

    def ConfigurePLLClockRecovery(
        self,
        ConfigurationType,
        MeasurementNumber,
        PLLModel,
        LoopBandwidth,
        Standard,
        AdvancedMethod,
        BitRate,
        PatternFile,
    ):
        """

        :param ConfigurationType:
        :type ConfigurationType:
        :param MeasurementNumber:
        :type MeasurementNumber:
        :param PLLModel:
        :type PLLModel:
        :param LoopBandwidth:
        :type LoopBandwidth:
        :param Standard:
        :type Standard:
        :param AdvancedMethod:
        :type AdvancedMethod:
        :param BitRate:
        :type BitRate:
        :param PatternFile:
        :type PatternFile:
        """
        return self._dllwrap.ConfigurePLLClockRecovery(
            self._vi,
            ConfigurationType,
            MeasurementNumber,
            PLLModel,
            LoopBandwidth,
            Standard,
            AdvancedMethod,
            BitRate,
            PatternFile,
        )

    def ConfigurePLLCustomClockRecovery(
        self,
        ConfigurationType,
        MeasurementNumber,
        PLLModel,
        Damping,
        BandwidthType,
        LoopBandwidth,
        JTFBandwidth,
        AdvancedMethod,
        BitRate,
        PatternFile,
    ):
        """

        :param ConfigurationType:
        :type ConfigurationType:
        :param MeasurementNumber:
        :type MeasurementNumber:
        :param PLLModel:
        :type PLLModel:
        :param Damping:
        :type Damping:
        :param BandwidthType:
        :type BandwidthType:
        :param LoopBandwidth:
        :type LoopBandwidth:
        :param JTFBandwidth:
        :type JTFBandwidth:
        :param AdvancedMethod:
        :type AdvancedMethod:
        :param BitRate:
        :type BitRate:
        :param PatternFile:
        :type PatternFile:
        """
        return self._dllwrap.ConfigurePLLCustomClockRecovery(
            self._vi,
            ConfigurationType,
            MeasurementNumber,
            PLLModel,
            Damping,
            BandwidthType,
            LoopBandwidth,
            JTFBandwidth,
            AdvancedMethod,
            BitRate,
            PatternFile,
        )

    def ConfigureExplicitClockRecovery(
        self,
        ConfigurationType,
        MeasurementNumber,
        ClockMode,
        ClockSource,
        ClockEdge,
        ClockMultiplier,
        PLLModel,
        Damping,
        BandwidthType,
        LoopBandwidth,
        JTFBandwidth,
        ClockOffsetType,
        Offset,
    ):
        """

        :param ConfigurationType:
        :type ConfigurationType:
        :param MeasurementNumber:
        :type MeasurementNumber:
        :param ClockMode:
        :type ClockMode:
        :param ClockSource:
        :type ClockSource:
        :param ClockEdge:
        :type ClockEdge:
        :param ClockMultiplier:
        :type ClockMultiplier:
        :param PLLModel:
        :type PLLModel:
        :param Damping:
        :type Damping:
        :param BandwidthType:
        :type BandwidthType:
        :param LoopBandwidth:
        :type LoopBandwidth:
        :param JTFBandwidth:
        :type JTFBandwidth:
        :param ClockOffsetType:
        :type ClockOffsetType:
        :param Offset:
        :type Offset:
        """
        return self._dllwrap.ConfigureExplicitClockRecovery(
            self._vi,
            ConfigurationType,
            MeasurementNumber,
            ClockMode,
            ClockSource,
            ClockEdge,
            ClockMultiplier,
            PLLModel,
            Damping,
            BandwidthType,
            LoopBandwidth,
            JTFBandwidth,
            ClockOffsetType,
            Offset,
        )

    def ConfigureMeasurementEdgePeriodFrequency(self, MeasurementNumber, EdgeType):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param EdgeType:
        :type EdgeType:
        """
        return self._dllwrap.ConfigureMeasurementEdgePeriodFrequency(self._vi, MeasurementNumber, EdgeType)

    def ConfigureMeasurementEdgeJitter(self, MeasurementNumber, JitterMethod, SignalType, ClockEdge, TargetBER):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param JitterMethod:
        :type JitterMethod:
        :param SignalType:
        :type SignalType:
        :param ClockEdge:
        :type ClockEdge:
        :param TargetBER:
        :type TargetBER:
        """
        return self._dllwrap.ConfigureMeasurementEdgeJitter(
            self._vi, MeasurementNumber, JitterMethod, SignalType, ClockEdge, TargetBER
        )

    def ConfigureMeasurementEdgeSkewPhaseDelay(
        self, MeasurementNumber, TimingMethod, FromEdge, ToEdge, SearchDirection
    ):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param TimingMethod:
        :type TimingMethod:
        :param FromEdge:
        :type FromEdge:
        :param ToEdge:
        :type ToEdge:
        :param SearchDirection:
        :type SearchDirection:
        """
        return self._dllwrap.ConfigureMeasurementEdgeSkewPhaseDelay(
            self._vi, MeasurementNumber, TimingMethod, FromEdge, ToEdge, SearchDirection
        )

    def ConfigureMeasurementEdgeNPeriods(self, MeasurementNumber, SignalType, ClockEdge, CyclesNumber, EdgeIncrement):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param SignalType:
        :type SignalType:
        :param ClockEdge:
        :type ClockEdge:
        :param CyclesNumber:
        :type CyclesNumber:
        :param EdgeIncrement:
        :type EdgeIncrement:
        """
        return self._dllwrap.ConfigureMeasurementEdgeNPeriods(
            self._vi, MeasurementNumber, SignalType, ClockEdge, CyclesNumber, EdgeIncrement
        )

    def ConfigureMeasurementEdgeDutyCycle(self, MeasurementNumber, ClockEdge):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param ClockEdge:
        :type ClockEdge:
        """
        return self._dllwrap.ConfigureMeasurementEdgeDutyCycle(self._vi, MeasurementNumber, ClockEdge)

    def ConfigureMeasurementEdgePhaseNoise(self, MeasurementNumber, UpperFrequency, LowerFrequency):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param UpperFrequency:
        :type UpperFrequency:
        :param LowerFrequency:
        :type LowerFrequency:
        """
        return self._dllwrap.ConfigureMeasurementEdgePhaseNoise(
            self._vi, MeasurementNumber, UpperFrequency, LowerFrequency
        )

    def ConfigureMeasurementEdgeDCD(self, MeasurementNumber, SignalType):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param SignalType:
        :type SignalType:
        """
        return self._dllwrap.ConfigureMeasurementEdgeDCD(self._vi, MeasurementNumber, SignalType)

    def ConfigureMeasurementEdgeSetupHold(self, MeasurementNumber, ClockEdge, DataEdge):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param ClockEdge:
        :type ClockEdge:
        :param DataEdge:
        :type DataEdge:
        """
        return self._dllwrap.ConfigureMeasurementEdgeSetupHold(self._vi, MeasurementNumber, ClockEdge, DataEdge)

    def ConfigureMeasurementEdgeSlewRate(self, MeasurementNumber, SlewRateMethod, FromLevel, ToLevel):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param SlewRateMethod:
        :type SlewRateMethod:
        :param FromLevel:
        :type FromLevel:
        :param ToLevel:
        :type ToLevel:
        """
        return self._dllwrap.ConfigureMeasurementEdgeSlewRate(
            self._vi, MeasurementNumber, SlewRateMethod, FromLevel, ToLevel
        )

    def ConfigureMeasurementEdgeTimeOutsideLevel(
        self, MeasurementNumber, MeasurementCondition, HighRefVoltage, LowRefVoltage
    ):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param MeasurementCondition:
        :type MeasurementCondition:
        :param HighRefVoltage:
        :type HighRefVoltage:
        :param LowRefVoltage:
        :type LowRefVoltage:
        """
        return self._dllwrap.ConfigureMeasurementEdgeTimeOutsideLevel(
            self._vi, MeasurementNumber, MeasurementCondition, HighRefVoltage, LowRefVoltage
        )

    def ConfigureMeasurementEdgeOvershoot(self, MeasurementNumber, RefLevelMode, RefVoltage):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param RefLevelMode:
        :type RefLevelMode:
        :param RefVoltage:
        :type RefVoltage:
        """
        return self._dllwrap.ConfigureMeasurementEdgeOvershoot(self._vi, MeasurementNumber, RefLevelMode, RefVoltage)

    def ConfigureMeasurementEdgeVDiffXovr(self, MeasurementNumber, ClockEdge):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param ClockEdge:
        :type ClockEdge:
        """
        return self._dllwrap.ConfigureMeasurementEdgeVDiffXovr(self._vi, MeasurementNumber, ClockEdge)

    def ConfigureFilter(
        self,
        ConfigurationType,
        MeasurementNumber,
        HighPassFilterSpec,
        HighPassFilterFrequency,
        LowPassFilterSpec,
        LowPassFilterFrequency,
        BlankingTime,
        RampTime,
    ):
        """

        :param ConfigurationType:
        :type ConfigurationType:
        :param MeasurementNumber:
        :type MeasurementNumber:
        :param HighPassFilterSpec:
        :type HighPassFilterSpec:
        :param HighPassFilterFrequency:
        :type HighPassFilterFrequency:
        :param LowPassFilterSpec:
        :type LowPassFilterSpec:
        :param LowPassFilterFrequency:
        :type LowPassFilterFrequency:
        :param BlankingTime:
        :type BlankingTime:
        :param RampTime:
        :type RampTime:
        """
        return self._dllwrap.ConfigureFilter(
            self._vi,
            ConfigurationType,
            MeasurementNumber,
            HighPassFilterSpec,
            HighPassFilterFrequency,
            LowPassFilterSpec,
            LowPassFilterFrequency,
            BlankingTime,
            RampTime,
        )

    def ConfigureGating(
        self, ConfigurationType, MeasurementNumber, LogicSource, Gating, Active, GatingHysteresis, MidRefValue
    ):
        """

        :param ConfigurationType:
        :type ConfigurationType:
        :param MeasurementNumber:
        :type MeasurementNumber:
        :param LogicSource:
        :type LogicSource:
        :param Gating:
        :type Gating:
        :param Active:
        :type Active:
        :param GatingHysteresis:
        :type GatingHysteresis:
        :param MidRefValue:
        :type MidRefValue:
        """
        return self._dllwrap.ConfigureGating(
            self._vi, ConfigurationType, MeasurementNumber, LogicSource, Gating, Active, GatingHysteresis, MidRefValue
        )

    def ConfigurePopulation(self, ConfigurationType, MeasurementNumber, EnablePopulationLimit, LimitValue):
        """

        :param ConfigurationType:
        :type ConfigurationType:
        :param MeasurementNumber:
        :type MeasurementNumber:
        :param EnablePopulationLimit:
        :type EnablePopulationLimit:
        :param LimitValue:
        :type LimitValue:
        """
        return self._dllwrap.ConfigurePopulation(
            self._vi, ConfigurationType, MeasurementNumber, EnablePopulationLimit, LimitValue
        )

    def ConfigureMeasurementLimit(
        self, ConfigurationType, MeasurementNumber, MaxValue, MinValue, EnableMeasurementLimit
    ):
        """

        :param ConfigurationType:
        :type ConfigurationType:
        :param MeasurementNumber:
        :type MeasurementNumber:
        :param MaxValue:
        :type MaxValue:
        :param MinValue:
        :type MinValue:
        :param EnableMeasurementLimit:
        :type EnableMeasurementLimit:
        """
        return self._dllwrap.ConfigureMeasurementLimit(
            self._vi, ConfigurationType, MeasurementNumber, MaxValue, MinValue, EnableMeasurementLimit
        )

    def ConfigureMeasurementFlags(
        self,
        MeasurementNumber,
        EnableGlobalFilter,
        EnableGlobalGating,
        EnableGlobalPopulation,
        EnableGlobalLimit,
        EnableGlobalClockRecovery,
    ):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param EnableGlobalFilter:
        :type EnableGlobalFilter:
        :param EnableGlobalGating:
        :type EnableGlobalGating:
        :param EnableGlobalPopulation:
        :type EnableGlobalPopulation:
        :param EnableGlobalLimit:
        :type EnableGlobalLimit:
        :param EnableGlobalClockRecovery:
        :type EnableGlobalClockRecovery:
        """
        return self._dllwrap.ConfigureMeasurementFlags(
            self._vi,
            MeasurementNumber,
            EnableGlobalFilter,
            EnableGlobalGating,
            EnableGlobalPopulation,
            EnableGlobalLimit,
            EnableGlobalClockRecovery,
        )

    def ConfigureBit(
        self,
        MeasurementNumber,
        MeasurementFunction,
        BitType,
        BitConfigureMethod,
        Percentage,
        BitStart,
        BitEnd,
        BinSize,
        TargetBER,
    ):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param MeasurementFunction:
        :type MeasurementFunction:
        :param BitType:
        :type BitType:
        :param BitConfigureMethod:
        :type BitConfigureMethod:
        :param Percentage:
        :type Percentage:
        :param BitStart:
        :type BitStart:
        :param BitEnd:
        :type BitEnd:
        :param BinSize:
        :type BinSize:
        :param TargetBER:
        :type TargetBER:
        """
        return self._dllwrap.ConfigureBit(
            self._vi,
            MeasurementNumber,
            MeasurementFunction,
            BitType,
            BitConfigureMethod,
            Percentage,
            BitStart,
            BitEnd,
            BinSize,
            TargetBER,
        )

    def ConfigureSpreadSpectrumClock(self, MeasurementNumber, NominalFrequency, FrequencyType):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param NominalFrequency:
        :type NominalFrequency:
        :param FrequencyType:
        :type FrequencyType:
        """
        return self._dllwrap.ConfigureSpreadSpectrumClock(self._vi, MeasurementNumber, NominalFrequency, FrequencyType)

    def ConfigureMeasurementPreference(
        self, MeasurementNumber, EnableEyeRendering, AutoTransition, WaveformInterpolationType
    ):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param EnableEyeRendering:
        :type EnableEyeRendering:
        :param AutoTransition:
        :type AutoTransition:
        :param WaveformInterpolationType:
        :type WaveformInterpolationType:
        """
        return self._dllwrap.ConfigureMeasurementPreference(
            self._vi, MeasurementNumber, EnableEyeRendering, AutoTransition, WaveformInterpolationType
        )

    def ConfigureJitterDecompPreference(self, JitterSeparationModel, DualDiracModel, MinNumberofUnitInterval):
        """

        :param JitterSeparationModel:
        :type JitterSeparationModel:
        :param DualDiracModel:
        :type DualDiracModel:
        :param MinNumberofUnitInterval:
        :type MinNumberofUnitInterval:
        """
        return self._dllwrap.ConfigureJitterDecompPreference(
            self._vi, JitterSeparationModel, DualDiracModel, MinNumberofUnitInterval
        )

    def ConfigureMeasurementType(self, MeasurementNumber, MeasurementFunction, MeasurementSource1, MeasurementSource2):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param MeasurementFunction:
        :type MeasurementFunction:
        :param MeasurementSource1:
        :type MeasurementSource1:
        :param MeasurementSource2:
        :type MeasurementSource2:
        """
        return self._dllwrap.ConfigureMeasurementType(
            self._vi, MeasurementNumber, MeasurementFunction, MeasurementSource1, MeasurementSource2
        )

    def ConfigureMeasurementCycleMode(self, MeasurementNumber, CycleMode):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param CycleMode:
        :type CycleMode:
        """
        return self._dllwrap.ConfigureMeasurementCycleMode(self._vi, MeasurementNumber, CycleMode)

    def ConfigureMeasurementACCommonMode(self, MeasurementNumber, EnableHighPassFilter, SourceType):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param EnableHighPassFilter:
        :type EnableHighPassFilter:
        :param SourceType:
        :type SourceType:
        """
        return self._dllwrap.ConfigureMeasurementACCommonMode(
            self._vi, MeasurementNumber, EnableHighPassFilter, SourceType
        )

    def ConfigureMeasurementJitterSummary(
        self,
        MeasurementNumber,
        IncludeDCD,
        IncludeDDJ,
        IncludeDJDD,
        IncludeEYEWIDTHBER,
        IncludeNPJ,
        IncludePJ,
        IncludeRJDD,
        IncludeTIE,
        IncludeTJBER,
    ):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param IncludeDCD:
        :type IncludeDCD:
        :param IncludeDDJ:
        :type IncludeDDJ:
        :param IncludeDJDD:
        :type IncludeDJDD:
        :param IncludeEYEWIDTHBER:
        :type IncludeEYEWIDTHBER:
        :param IncludeNPJ:
        :type IncludeNPJ:
        :param IncludePJ:
        :type IncludePJ:
        :param IncludeRJDD:
        :type IncludeRJDD:
        :param IncludeTIE:
        :type IncludeTIE:
        :param IncludeTJBER:
        :type IncludeTJBER:
        """
        return self._dllwrap.ConfigureMeasurementJitterSummary(
            self._vi,
            MeasurementNumber,
            IncludeDCD,
            IncludeDDJ,
            IncludeDJDD,
            IncludeEYEWIDTHBER,
            IncludeNPJ,
            IncludePJ,
            IncludeRJDD,
            IncludeTIE,
            IncludeTJBER,
        )

    def ConfigureMeasurementBurstWidth(self, MeasurementNumber, IdleTime, Polarity):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param IdleTime:
        :type IdleTime:
        :param Polarity:
        :type Polarity:
        """
        return self._dllwrap.ConfigureMeasurementBurstWidth(self._vi, MeasurementNumber, IdleTime, Polarity)

    def ConfigurePatternDetection(self, MeasurementNumber, PatternDetection, PatternType, PatternLength, WindowLength):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param PatternDetection:
        :type PatternDetection:
        :param PatternType:
        :type PatternType:
        :param PatternLength:
        :type PatternLength:
        :param WindowLength:
        :type WindowLength:
        """
        return self._dllwrap.ConfigurePatternDetection(
            self._vi, MeasurementNumber, PatternDetection, PatternType, PatternLength, WindowLength
        )

    def ConfigureMeasurementEdgeBurstWidth(self, MeasurementNumber, SignalType):
        """

        :param MeasurementNumber:
        :type MeasurementNumber:
        :param SignalType:
        :type SignalType:
        """
        return self._dllwrap.ConfigureMeasurementEdgeBurstWidth(self._vi, MeasurementNumber, SignalType)

    def ConfigureHorizontal(
        self,
        ControlType,
        FastAcquisitionMaximumRecordLength,
        EnableFastAcquisitionMaximumRecordLengthOverride,
        AnalyzeMinimumSampleRate,
        EnableAnalyzeMinimumSampleRateOverride,
        AutoAnalyzeMinSampleRate,
    ):
        """

        :param ControlType:
        :type ControlType:
        :param FastAcquisitionMaximumRecordLength:
        :type FastAcquisitionMaximumRecordLength:
        :param EnableFastAcquisitionMaximumRecordLengthOverride:
        :type EnableFastAcquisitionMaximumRecordLengthOverride:
        :param AnalyzeMinimumSampleRate:
        :type AnalyzeMinimumSampleRate:
        :param EnableAnalyzeMinimumSampleRateOverride:
        :type EnableAnalyzeMinimumSampleRateOverride:
        :param AutoAnalyzeMinSampleRate:
        :type AutoAnalyzeMinSampleRate:
        """
        return self._dllwrap.ConfigureHorizontal(
            self._vi,
            ControlType,
            FastAcquisitionMaximumRecordLength,
            EnableFastAcquisitionMaximumRecordLengthOverride,
            AnalyzeMinimumSampleRate,
            EnableAnalyzeMinimumSampleRateOverride,
            AutoAnalyzeMinSampleRate,
        )

    def ConfigureMeasurementDisplayUnit(self, DisplayUnit):
        """

        :param DisplayUnit:
        :type DisplayUnit:
        """
        return self._dllwrap.ConfigureMeasurementDisplayUnit(self._vi, DisplayUnit)

    def ConfigureMathAverage(self, MathChannel, EnableAverage, NumberofAverages):
        """

        :param MathChannel:
        :type MathChannel:
        :param EnableAverage:
        :type EnableAverage:
        :param NumberofAverages:
        :type NumberofAverages:
        """
        return self._dllwrap.ConfigureMathAverage(self._vi, MathChannel, EnableAverage, NumberofAverages)

    def ConfigureMathBasic(self, MathChannel, MathFunction, Source1, Source2):
        """

        :param MathChannel:
        :type MathChannel:
        :param MathFunction:
        :type MathFunction:
        :param Source1:
        :type Source1:
        :param Source2:
        :type Source2:
        """
        return self._dllwrap.ConfigureMathBasic(self._vi, MathChannel, MathFunction, Source1, Source2)

    def ConfigureMathFFT(self, MathChannel, Source, FFTType, HorizontalScale, WindowType):
        """

        :param MathChannel:
        :type MathChannel:
        :param Source:
        :type Source:
        :param FFTType:
        :type FFTType:
        :param HorizontalScale:
        :type HorizontalScale:
        :param WindowType:
        :type WindowType:
        """
        return self._dllwrap.ConfigureMathFFT(self._vi, MathChannel, Source, FFTType, HorizontalScale, WindowType)

    def ConfigureMathAdvanced(self, MathChannel, Expression):
        """

        :param MathChannel:
        :type MathChannel:
        :param Expression:
        :type Expression:
        """
        return self._dllwrap.ConfigureMathAdvanced(self._vi, MathChannel, Expression)

    def BinaryOperationEditor(self, inputExpression1, inputOperator, inputExpression2, bufferSize, outputExpression):
        """

        :param inputExpression1:
        :type inputExpression1:
        :param inputOperator:
        :type inputOperator:
        :param inputExpression2:
        :type inputExpression2:
        :param bufferSize:
        :type bufferSize:
        :param outputExpression:
        :type outputExpression:
        """
        return self._dllwrap.BinaryOperationEditor(
            self._vi, inputExpression1, inputOperator, inputExpression2, bufferSize, outputExpression
        )

    def UnaryOperationEditor(self, function, inputExpression, bufferSize, outputExpression):
        """

        :param function:
        :type function:
        :param inputExpression:
        :type inputExpression:
        :param bufferSize:
        :type bufferSize:
        :param outputExpression:
        :type outputExpression:
        """
        return self._dllwrap.UnaryOperationEditor(self._vi, function, inputExpression, bufferSize, outputExpression)

    def ConfigureSpectralMagnitude(self, MathChannel, MagnitudeUnit):
        """

        :param MathChannel:
        :type MathChannel:
        :param MagnitudeUnit:
        :type MagnitudeUnit:
        """
        return self._dllwrap.ConfigureSpectralMagnitude(self._vi, MathChannel, MagnitudeUnit)

    def ConfigureSpectralPhase(
        self, MathChannel, PhaseUnit, EnablePhaseSuppression, SuppressionThreshold, EnablePhaseUnwrap, PhaseUnwrapValue
    ):
        """

        :param MathChannel:
        :type MathChannel:
        :param PhaseUnit:
        :type PhaseUnit:
        :param EnablePhaseSuppression:
        :type EnablePhaseSuppression:
        :param SuppressionThreshold:
        :type SuppressionThreshold:
        :param EnablePhaseUnwrap:
        :type EnablePhaseUnwrap:
        :param PhaseUnwrapValue:
        :type PhaseUnwrapValue:
        """
        return self._dllwrap.ConfigureSpectralPhase(
            self._vi,
            MathChannel,
            PhaseUnit,
            EnablePhaseSuppression,
            SuppressionThreshold,
            EnablePhaseUnwrap,
            PhaseUnwrapValue,
        )

    def ConfigureMathFilterSource(self, FilterNumber, FilePath):
        """

        :param FilterNumber:
        :type FilterNumber:
        :param FilePath:
        :type FilePath:
        """
        return self._dllwrap.ConfigureMathFilterSource(self._vi, FilterNumber, FilePath)

    def ConfigureStandardWaveform(self, WaveformFunction, Frequency, Amplitude, DCOffset):
        """

        :param WaveformFunction:
        :type WaveformFunction:
        :param Frequency:
        :type Frequency:
        :param Amplitude:
        :type Amplitude:
        :param DCOffset:
        :type DCOffset:
        """
        return self._dllwrap.ConfigureStandardWaveform(self._vi, WaveformFunction, Frequency, Amplitude, DCOffset)

    def ConfigureAFGWaveformLevel(self, Highlevel, lowlevel):
        """

        :param Highlevel:
        :type Highlevel:
        :param lowlevel:
        :type lowlevel:
        """
        return self._dllwrap.ConfigureAFGWaveformLevel(self._vi, Highlevel, lowlevel)

    def ConfigureAFGWaveformPeriod(self, period):
        """

        :param period:
        :type period:
        """
        return self._dllwrap.ConfigureAFGWaveformPeriod(self._vi, period)

    def ConfigureNoise(self, Noiselevel, Enablenoise):
        """

        :param Noiselevel:
        :type Noiselevel:
        :param Enablenoise:
        :type Enablenoise:
        """
        return self._dllwrap.ConfigureNoise(self._vi, Noiselevel, Enablenoise)

    def ConfigureOutputImpedance(self, Impedance):
        """

        :param Impedance:
        :type Impedance:
        """
        return self._dllwrap.ConfigureOutputImpedance(self._vi, Impedance)

    def ConfigurePulseWidth(self, pulsewidth):
        """

        :param pulsewidth:
        :type pulsewidth:
        """
        return self._dllwrap.ConfigurePulseWidth(self._vi, pulsewidth)

    def ConfigureRampSymmetry(self, RampSymmetry):
        """

        :param RampSymmetry:
        :type RampSymmetry:
        """
        return self._dllwrap.ConfigureRampSymmetry(self._vi, RampSymmetry)

    def ConfigureSquareDutyCycle(self, SquareDutyCycle):
        """

        :param SquareDutyCycle:
        :type SquareDutyCycle:
        """
        return self._dllwrap.ConfigureSquareDutyCycle(self._vi, SquareDutyCycle)

    def ConfigureAFGWaveformSource(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ConfigureAFGWaveformSource(self._vi, Source)

    def EnableAFGOutput(self, EnableOutput):
        """

        :param EnableOutput:
        :type EnableOutput:
        """
        return self._dllwrap.EnableAFGOutput(self._vi, EnableOutput)

    def SetLeveltoHalf(self, TriggerType):
        """

        :param TriggerType:
        :type TriggerType:
        """
        return self._dllwrap.SetLeveltoHalf(self._vi, TriggerType)

    def PerformDeskew(self, DeskewType):
        """

        :param DeskewType:
        :type DeskewType:
        """
        return self._dllwrap.PerformDeskew(self._vi, DeskewType)

    def ModifySource(self, SourceType, Operation, SourceNumber):
        """

        :param SourceType:
        :type SourceType:
        :param Operation:
        :type Operation:
        :param SourceNumber:
        :type SourceNumber:
        """
        return self._dllwrap.ModifySource(self._vi, SourceType, Operation, SourceNumber)

    def QuerySourceList(self, SourceType):
        """

        :param SourceType:
        :type SourceType:
        """
        return self._dllwrap.QuerySourceList(self._vi, SourceType)

    def ModifyMeasurement(self, Operation, MeasurementNumber):
        """

        :param Operation:
        :type Operation:
        :param MeasurementNumber:
        :type MeasurementNumber:
        """
        return self._dllwrap.ModifyMeasurement(self._vi, Operation, MeasurementNumber)

    def QueryMeasurementList(self):
        """ """
        return self._dllwrap.QueryMeasurementList(self._vi)

    def ModifyMeasurementTable(self, Operation, MeasurementTableNumber):
        """

        :param Operation:
        :type Operation:
        :param MeasurementTableNumber:
        :type MeasurementTableNumber:
        """
        return self._dllwrap.ModifyMeasurementTable(self._vi, Operation, MeasurementTableNumber)

    def QueryMeasurementTableList(self):
        """ """
        return self._dllwrap.QueryMeasurementTableList(self._vi)

    def StoreWaveform(self, SourceChannel, WaveformFile):
        """

        :param SourceChannel:
        :type SourceChannel:
        :param WaveformFile:
        :type WaveformFile:
        """
        return self._dllwrap.StoreWaveform(self._vi, SourceChannel, WaveformFile)

    def RecallWaveformtoRefChannel(self, WaveformFile, RefChannel):
        """

        :param WaveformFile:
        :type WaveformFile:
        :param RefChannel:
        :type RefChannel:
        """
        return self._dllwrap.RecallWaveformtoRefChannel(self._vi, WaveformFile, RefChannel)

    def QueryAvailableWaveformSources(self):
        """ """
        return self._dllwrap.QueryAvailableWaveformSources(self._vi)

    def QueryWaveformSavingSources(self):
        """ """
        return self._dllwrap.QueryWaveformSavingSources(self._vi)

    def SendSoftwareTrigger(self):
        """ """
        return self._dllwrap.SendSoftwareTrigger(self._vi)

    def ResetDigitalVoltmeter(self):
        """ """
        return self._dllwrap.ResetDigitalVoltmeter(self._vi)

    def ConfigureDigitalVoltmeter(self, dvmsource, dvmtype, dvmautorange):
        """

        :param dvmsource:
        :type dvmsource:
        :param dvmtype:
        :type dvmtype:
        :param dvmautorange:
        :type dvmautorange:
        """
        return self._dllwrap.ConfigureDigitalVoltmeter(self._vi, dvmsource, dvmtype, dvmautorange)

    def ReadDigitalVoltmeter(self):
        """ """
        return self._dllwrap.ReadDigitalVoltmeter(self._vi)

    def ReadDigitalVoltmeterHistory(self):
        """ """
        return self._dllwrap.ReadDigitalVoltmeterHistory(self._vi)

    def ReadDigitalVoltmeterStatistics(self):
        """ """
        return self._dllwrap.ReadDigitalVoltmeterStatistics(self._vi)

    def CursorSetup(
        self,
        EnableCursors,
        CursorSource,
        CursorBSource,
        CursorMode,
        CursorTrackMode,
        TimeCursorAPosition,
        TimeCursorBPosition,
        AmplitudeCursorAPosition,
        AmplitudeCursorBPosition,
        WaveViewNumber,
        CursorNumber,
        SourceSplitMode,
    ):
        """

        :param EnableCursors:
        :type EnableCursors:
        :param CursorSource:
        :type CursorSource:
        :param CursorBSource:
        :type CursorBSource:
        :param CursorMode:
        :type CursorMode:
        :param CursorTrackMode:
        :type CursorTrackMode:
        :param TimeCursorAPosition:
        :type TimeCursorAPosition:
        :param TimeCursorBPosition:
        :type TimeCursorBPosition:
        :param AmplitudeCursorAPosition:
        :type AmplitudeCursorAPosition:
        :param AmplitudeCursorBPosition:
        :type AmplitudeCursorBPosition:
        :param WaveViewNumber:
        :type WaveViewNumber:
        :param CursorNumber:
        :type CursorNumber:
        :param SourceSplitMode:
        :type SourceSplitMode:
        """
        return self._dllwrap.CursorSetup(
            self._vi,
            EnableCursors,
            CursorSource,
            CursorBSource,
            CursorMode,
            CursorTrackMode,
            TimeCursorAPosition,
            TimeCursorBPosition,
            AmplitudeCursorAPosition,
            AmplitudeCursorBPosition,
            WaveViewNumber,
            CursorNumber,
            SourceSplitMode,
        )

    def AutoSetup(self):
        """ """
        return self._dllwrap.AutoSetup(self._vi)

    def ReadWaveform(self, channel, waveformSize, maxTimeMilliseconds):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        :param maxTimeMilliseconds:
        :type maxTimeMilliseconds:
        """
        return self._dllwrap.ReadWaveform(self._vi, channel, waveformSize, maxTimeMilliseconds)

    def ReadMinMaxWaveform(self, channel, WaveformSize, maxTime):
        """

        :param channel:
        :type channel:
        :param WaveformSize:
        :type WaveformSize:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadMinMaxWaveform(self._vi, channel, WaveformSize, maxTime)

    def ReadDigitalWaveform(self, Digitalchannel, waveformSize, maxTimeMilliseconds):
        """

        :param Digitalchannel:
        :type Digitalchannel:
        :param waveformSize:
        :type waveformSize:
        :param maxTimeMilliseconds:
        :type maxTimeMilliseconds:
        """
        return self._dllwrap.ReadDigitalWaveform(self._vi, Digitalchannel, waveformSize, maxTimeMilliseconds)

    def ReadDigitalGroupWaveform(self, Digitalchannel, waveformSize, maxTimeMilliseconds, waveformArray):
        """

        :param Digitalchannel:
        :type Digitalchannel:
        :param waveformSize:
        :type waveformSize:
        :param maxTimeMilliseconds:
        :type maxTimeMilliseconds:
        :param waveformArray:
        :type waveformArray:
        """
        return self._dllwrap.ReadDigitalGroupWaveform(
            self._vi, Digitalchannel, waveformSize, maxTimeMilliseconds, waveformArray
        )

    def ReadWaveformMeasurement(self, channel, measFunction, maxTimeMilliseconds):
        """

        :param channel:
        :type channel:
        :param measFunction:
        :type measFunction:
        :param maxTimeMilliseconds:
        :type maxTimeMilliseconds:
        """
        return self._dllwrap.ReadWaveformMeasurement(self._vi, channel, measFunction, maxTimeMilliseconds)

    def ReadDelayMeasurement(self, measureSource1, measureSource2, delayEdge1, delayEdge2, delayDirection, maxTime):
        """

        :param measureSource1:
        :type measureSource1:
        :param measureSource2:
        :type measureSource2:
        :param delayEdge1:
        :type delayEdge1:
        :param delayEdge2:
        :type delayEdge2:
        :param delayDirection:
        :type delayDirection:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadDelayMeasurement(
            self._vi, measureSource1, measureSource2, delayEdge1, delayEdge2, delayDirection, maxTime
        )

    def ReadPhaseMeasurement(self, measureSource1, measureSource2, maxTime):
        """

        :param measureSource1:
        :type measureSource1:
        :param measureSource2:
        :type measureSource2:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadPhaseMeasurement(self._vi, measureSource1, measureSource2, maxTime)

    def ReadWaveformMeasurementStatistics(
        self, StatisticsType, MeasurementNumber, EnableStatisticsCycleMode, maxTimeMilliseconds
    ):
        """

        :param StatisticsType:
        :type StatisticsType:
        :param MeasurementNumber:
        :type MeasurementNumber:
        :param EnableStatisticsCycleMode:
        :type EnableStatisticsCycleMode:
        :param maxTimeMilliseconds:
        :type maxTimeMilliseconds:
        """
        return self._dllwrap.ReadWaveformMeasurementStatistics(
            self._vi, StatisticsType, MeasurementNumber, EnableStatisticsCycleMode, maxTimeMilliseconds
        )

    def QueryTimebaseReferenceOscillatorState(self):
        """ """
        return self._dllwrap.QueryTimebaseReferenceOscillatorState(self._vi)

    def QueryProbeSetting(self, channel, serialNumber, type):
        """

        :param channel:
        :type channel:
        :param serialNumber:
        :type serialNumber:
        :param type:
        :type type:
        """
        return self._dllwrap.QueryProbeSetting(self._vi, channel, serialNumber, type)

    def QueryHorizontalProperties(self):
        """ """
        return self._dllwrap.QueryHorizontalProperties(self._vi)

    def QueryWaveformDomain(self):
        """ """
        return self._dllwrap.QueryWaveformDomain(self._vi)

    def QueryWaveformPointSetting(self):
        """ """
        return self._dllwrap.QueryWaveformPointSetting(self._vi)

    def QueryWaveformUnit(self):
        """ """
        return self._dllwrap.QueryWaveformUnit(self._vi)

    def QueryWaveformIdentity(self):
        """ """
        return self._dllwrap.QueryWaveformIdentity(self._vi)

    def QueryDegaussCycleState(self, channelname):
        """

        :param channelname:
        :type channelname:
        """
        return self._dllwrap.QueryDegaussCycleState(self._vi, channelname)

    def QueryProbeInformation(self, channelname):
        """

        :param channelname:
        :type channelname:
        """
        return self._dllwrap.QueryProbeInformation(self._vi, channelname)

    def InitiateAcquisition(self):
        """ """
        return self._dllwrap.InitiateAcquisition(self._vi)

    def AcquisitionStatus(self):
        """ """
        return self._dllwrap.AcquisitionStatus(self._vi)

    def FetchWaveform(self, channel, waveformSize):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchWaveform(self._vi, channel, waveformSize)

    def FetchMinMaxWaveform(self, channel, WaveformSize):
        """

        :param channel:
        :type channel:
        :param WaveformSize:
        :type WaveformSize:
        """
        return self._dllwrap.FetchMinMaxWaveform(self._vi, channel, WaveformSize)

    def FetchDigitalWaveform(self, Digitalchannel, waveformSize):
        """

        :param Digitalchannel:
        :type Digitalchannel:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchDigitalWaveform(self._vi, Digitalchannel, waveformSize)

    def FetchDigitalGroupWaveform(self, Digitalchannel, waveformSize, waveformArray):
        """

        :param Digitalchannel:
        :type Digitalchannel:
        :param waveformSize:
        :type waveformSize:
        :param waveformArray:
        :type waveformArray:
        """
        return self._dllwrap.FetchDigitalGroupWaveform(self._vi, Digitalchannel, waveformSize, waveformArray)

    def FetchWaveformMeasurement(self, channel, measFunction):
        """

        :param channel:
        :type channel:
        :param measFunction:
        :type measFunction:
        """
        return self._dllwrap.FetchWaveformMeasurement(self._vi, channel, measFunction)

    def FetchDelayMeasurement(self, measureSource1, measureSource2, delayEdge1, delayEdge2, delayDirection):
        """

        :param measureSource1:
        :type measureSource1:
        :param measureSource2:
        :type measureSource2:
        :param delayEdge1:
        :type delayEdge1:
        :param delayEdge2:
        :type delayEdge2:
        :param delayDirection:
        :type delayDirection:
        """
        return self._dllwrap.FetchDelayMeasurement(
            self._vi, measureSource1, measureSource2, delayEdge1, delayEdge2, delayDirection
        )

    def FetchPhaseMeasurement(self, measureSource1, measureSource2):
        """

        :param measureSource1:
        :type measureSource1:
        :param measureSource2:
        :type measureSource2:
        """
        return self._dllwrap.FetchPhaseMeasurement(self._vi, measureSource1, measureSource2)

    def FetchWaveformMeasurementStatistics(self, StatisticsType, MeasurementNumber, EnableStatisticsCycleMode):
        """

        :param StatisticsType:
        :type StatisticsType:
        :param MeasurementNumber:
        :type MeasurementNumber:
        :param EnableStatisticsCycleMode:
        :type EnableStatisticsCycleMode:
        """
        return self._dllwrap.FetchWaveformMeasurementStatistics(
            self._vi, StatisticsType, MeasurementNumber, EnableStatisticsCycleMode
        )

    def Abort(self):
        """ """
        return self._dllwrap.Abort(self._vi)

    def error_query(self):
        """ """
        return self._dllwrap.error_query(self._vi)

    def GetError(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        """ """
        return self._dllwrap.ClearError(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def GetNextInterchangeWarning(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        """ """
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        """ """
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def InvalidateAllAttributes(self):
        """ """
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def reset(self):
        """ """
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """ """
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """ """
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """ """
        return self._dllwrap.revision_query(self._vi)

    def Disable(self):
        """ """
        return self._dllwrap.Disable(self._vi)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """

        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def IsInvalidWfmElement(self, elementValue):
        """

        :param elementValue:
        :type elementValue:
        """
        return self._dllwrap.IsInvalidWfmElement(self._vi, elementValue)

    def GetAttributeViInt32(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViInt64(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt64(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName, attribute, bufSize):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param bufSize:
        :type bufSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViInt64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt64(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViInt64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt64(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)

    def viWrite(self, buffer, count):
        """

        :param buffer:
        :type buffer:
        :param count:
        :type count:
        """
        return self._dllwrap.viWrite(self._vi, buffer, count)

    def viRead(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.viRead(self._vi, bufferSize)

    def ConfigureChannel_Digitizer(self, ChannelName, Range, Offset, Coupling, Enabled):
        """

        :param ChannelName:
        :type ChannelName:
        :param Range:
        :type Range:
        :param Offset:
        :type Offset:
        :param Coupling:
        :type Coupling:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureChannel_Digitizer(self._vi, ChannelName, Range, Offset, Coupling, Enabled)

    def ConfigureAcquisition(self, NumRecordsToAcquire, RecordSize, SampleRate):
        """

        :param NumRecordsToAcquire:
        :type NumRecordsToAcquire:
        :param RecordSize:
        :type RecordSize:
        :param SampleRate:
        :type SampleRate:
        """
        return self._dllwrap.ConfigureAcquisition(self._vi, NumRecordsToAcquire, RecordSize, SampleRate)

    def ReadWaveformInt16(self, ChannelName, MaxTimeMilliseconds, WaveformArraySize):
        """

        :param ChannelName:
        :type ChannelName:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param WaveformArraySize:
        :type WaveformArraySize:
        """
        return self._dllwrap.ReadWaveformInt16(self._vi, ChannelName, MaxTimeMilliseconds, WaveformArraySize)

    def ReadWaveformInt32(self, ChannelName, MaxTimeMilliseconds, WaveformArraySize):
        """

        :param ChannelName:
        :type ChannelName:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param WaveformArraySize:
        :type WaveformArraySize:
        """
        return self._dllwrap.ReadWaveformInt32(self._vi, ChannelName, MaxTimeMilliseconds, WaveformArraySize)

    def ReadWaveformInt8(self, ChannelName, MaxTimeMilliseconds, WaveformArraySize):
        """

        :param ChannelName:
        :type ChannelName:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param WaveformArraySize:
        :type WaveformArraySize:
        """
        return self._dllwrap.ReadWaveformInt8(self._vi, ChannelName, MaxTimeMilliseconds, WaveformArraySize)

    def ReadWaveformReal64(self, ChannelName, MaxTimeMilliseconds, WaveformArraySize):
        """

        :param ChannelName:
        :type ChannelName:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        :param WaveformArraySize:
        :type WaveformArraySize:
        """
        return self._dllwrap.ReadWaveformReal64(self._vi, ChannelName, MaxTimeMilliseconds, WaveformArraySize)

    def QueryMinWaveformMemory(self, DataWidth, NumRecords, OffsetWithinRecord, NumPointsPerRecord):
        """

        :param DataWidth:
        :type DataWidth:
        :param NumRecords:
        :type NumRecords:
        :param OffsetWithinRecord:
        :type OffsetWithinRecord:
        :param NumPointsPerRecord:
        :type NumPointsPerRecord:
        """
        return self._dllwrap.QueryMinWaveformMemory(
            self._vi, DataWidth, NumRecords, OffsetWithinRecord, NumPointsPerRecord
        )

    def WaitForAcquisitionComplete(self, MaxTimeMilliseconds):
        """

        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.WaitForAcquisitionComplete(self._vi, MaxTimeMilliseconds)

    def IsIdle(self):
        """ """
        return self._dllwrap.IsIdle(self._vi)

    def IsMeasuring(self):
        """ """
        return self._dllwrap.IsMeasuring(self._vi)

    def IsWaitingForArm(self):
        """ """
        return self._dllwrap.IsWaitingForArm(self._vi)

    def IsWaitingForTrigger(self):
        """ """
        return self._dllwrap.IsWaitingForTrigger(self._vi)

    def FetchWaveformInt16(self, ChannelName, WaveformArraySize):
        """

        :param ChannelName:
        :type ChannelName:
        :param WaveformArraySize:
        :type WaveformArraySize:
        """
        return self._dllwrap.FetchWaveformInt16(self._vi, ChannelName, WaveformArraySize)

    def FetchWaveformInt32(self, ChannelName, WaveformArraySize):
        """

        :param ChannelName:
        :type ChannelName:
        :param WaveformArraySize:
        :type WaveformArraySize:
        """
        return self._dllwrap.FetchWaveformInt32(self._vi, ChannelName, WaveformArraySize)

    def FetchWaveformInt8(self, ChannelName, WaveformArraySize):
        """

        :param ChannelName:
        :type ChannelName:
        :param WaveformArraySize:
        :type WaveformArraySize:
        """
        return self._dllwrap.FetchWaveformInt8(self._vi, ChannelName, WaveformArraySize)

    def FetchWaveformReal64(self, ChannelName, WaveformArraySize):
        """

        :param ChannelName:
        :type ChannelName:
        :param WaveformArraySize:
        :type WaveformArraySize:
        """
        return self._dllwrap.FetchWaveformReal64(self._vi, ChannelName, WaveformArraySize)

    def GetTriggerSourceName(self, SourceIndex, SourceNameBufferSize):
        """

        :param SourceIndex:
        :type SourceIndex:
        :param SourceNameBufferSize:
        :type SourceNameBufferSize:
        """
        return self._dllwrap.GetTriggerSourceName(self._vi, SourceIndex, SourceNameBufferSize)

    def GetDelayTriggerSourceName(self, SourceIndex, SourceNameBufferSize):
        """

        :param SourceIndex:
        :type SourceIndex:
        :param SourceNameBufferSize:
        :type SourceNameBufferSize:
        """
        return self._dllwrap.GetDelayTriggerSourceName(self._vi, SourceIndex, SourceNameBufferSize)
