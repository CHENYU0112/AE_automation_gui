from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .Tkdpo2k3k4k_dllwrap import *


class Tkdpo2k3k4k(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = Tkdpo2k3k4k_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, ResourceName, IdQuery, Reset):
        """

        :param ResourceName:
        :type ResourceName:
        :param IdQuery:
        :type IdQuery:
        :param Reset:
        :type Reset:
        """
        return self._dllwrap.init(ResourceName, IdQuery, Reset)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def error_message(self, ErrorCode):
        """

        :param ErrorCode:
        :type ErrorCode:
        """
        return self._dllwrap.error_message(self._vi, ErrorCode)

    def GetError(self, ErrorDescriptionBufferSize):
        """

        :param ErrorDescriptionBufferSize:
        :type ErrorDescriptionBufferSize:
        """
        return self._dllwrap.GetError(self._vi, ErrorDescriptionBufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def GetNextCoercionRecord(self, CoercionRecordBufferSize):
        """

        :param CoercionRecordBufferSize:
        :type CoercionRecordBufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, CoercionRecordBufferSize)

    def GetNextInterchangeWarning(self, InterchangeWarningBufferSize):
        """

        :param InterchangeWarningBufferSize:
        :type InterchangeWarningBufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, InterchangeWarningBufferSize)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def IsInvalidWfmElement(self, ElementValue):
        """

        :param ElementValue:
        :type ElementValue:
        """
        return self._dllwrap.IsInvalidWfmElement(self._vi, ElementValue)

    def GetAttributeViInt32(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViReal64(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViBoolean(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViSession(self, RepCapIdentifier, AttributeID):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, RepCapIdentifier, AttributeID)

    def GetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValueBufferSize:
        :type AttributeValueBufferSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

    def SetAttributeViInt32(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViReal64(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViBoolean(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViSession(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def SetAttributeViString(self, RepCapIdentifier, AttributeID, AttributeValue):
        """

        :param RepCapIdentifier:
        :type RepCapIdentifier:
        :param AttributeID:
        :type AttributeID:
        :param AttributeValue:
        :type AttributeValue:
        """
        return self._dllwrap.SetAttributeViString(self._vi, RepCapIdentifier, AttributeID, AttributeValue)

    def ActualRecordLength(self):
        """"""
        return self._dllwrap.ActualRecordLength(self._vi)

    def SampleRate(self):
        """"""
        return self._dllwrap.SampleRate(self._vi)

    def AutoProbeSenseValue(self, ChannelName):
        """

        :param ChannelName:
        :type ChannelName:
        """
        return self._dllwrap.AutoProbeSenseValue(self._vi, ChannelName)

    def SampleMode(self):
        """"""
        return self._dllwrap.SampleMode(self._vi)

    def AutoSetup(self):
        """"""
        return self._dllwrap.AutoSetup(self._vi)

    def ConfigureAcquisitionType(self, AcquisitionType):
        """

        :param AcquisitionType:
        :type AcquisitionType:
        """
        return self._dllwrap.ConfigureAcquisitionType(self._vi, AcquisitionType)

    def ConfigureInterpolation(self, Interpolation):
        """

        :param Interpolation:
        :type Interpolation:
        """
        return self._dllwrap.ConfigureInterpolation(self._vi, Interpolation)

    def ConfigureInitiateContinuous(self, ContinuousAcquisition):
        """

        :param ContinuousAcquisition:
        :type ContinuousAcquisition:
        """
        return self._dllwrap.ConfigureInitiateContinuous(self._vi, ContinuousAcquisition)

    def ConfigureNumAverages(self, NumberOfAverages):
        """

        :param NumberOfAverages:
        :type NumberOfAverages:
        """
        return self._dllwrap.ConfigureNumAverages(self._vi, NumberOfAverages)

    def ConfigureNumEnvelopes(self, NumEnvelopes):
        """

        :param NumEnvelopes:
        :type NumEnvelopes:
        """
        return self._dllwrap.ConfigureNumEnvelopes(self._vi, NumEnvelopes)

    def ConfigureAcquisitionRecord(self, TimePerRecord, MinNumPts, AcquisitionStartTime):
        """

        :param TimePerRecord:
        :type TimePerRecord:
        :param MinNumPts:
        :type MinNumPts:
        :param AcquisitionStartTime:
        :type AcquisitionStartTime:
        """
        return self._dllwrap.ConfigureAcquisitionRecord(self._vi, TimePerRecord, MinNumPts, AcquisitionStartTime)

    def ConfigureTriggerCoupling(self, Coupling):
        """

        :param Coupling:
        :type Coupling:
        """
        return self._dllwrap.ConfigureTriggerCoupling(self._vi, Coupling)

    def ConfigureTVTriggerLineNumber(self, TVLineNumber):
        """

        :param TVLineNumber:
        :type TVLineNumber:
        """
        return self._dllwrap.ConfigureTVTriggerLineNumber(self._vi, TVLineNumber)

    def ConfigureAcLineTriggerSlope(self, ACLineSlope):
        """

        :param ACLineSlope:
        :type ACLineSlope:
        """
        return self._dllwrap.ConfigureAcLineTriggerSlope(self._vi, ACLineSlope)

    def ConfigureTriggerModifier(self, TriggerModifier):
        """

        :param TriggerModifier:
        :type TriggerModifier:
        """
        return self._dllwrap.ConfigureTriggerModifier(self._vi, TriggerModifier)

    def ConfigureTrigger(self, TriggerType, Holdoff):
        """

        :param TriggerType:
        :type TriggerType:
        :param Holdoff:
        :type Holdoff:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, TriggerType, Holdoff)

    def ConfigureEdgeTriggerSource(self, Source, Level, Slope):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.ConfigureEdgeTriggerSource(self._vi, Source, Level, Slope)

    def ConfigureGlitchTriggerSource(self, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param GlitchWidth:
        :type GlitchWidth:
        :param GlitchPolarity:
        :type GlitchPolarity:
        :param GlitchCondition:
        :type GlitchCondition:
        """
        return self._dllwrap.ConfigureGlitchTriggerSource(
            self._vi, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition
        )

    def ConfigureRuntTriggerSource(self, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity):
        """

        :param Source:
        :type Source:
        :param RuntThresholdLow:
        :type RuntThresholdLow:
        :param RuntThresholdHigh:
        :type RuntThresholdHigh:
        :param RuntPolarity:
        :type RuntPolarity:
        """
        return self._dllwrap.ConfigureRuntTriggerSource(
            self._vi, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity
        )

    def ConfigureTVTriggerSource(self, Source, TVSignalFormat, TVEvent, TVPolarity):
        """

        :param Source:
        :type Source:
        :param TVSignalFormat:
        :type TVSignalFormat:
        :param TVEvent:
        :type TVEvent:
        :param TVPolarity:
        :type TVPolarity:
        """
        return self._dllwrap.ConfigureTVTriggerSource(self._vi, Source, TVSignalFormat, TVEvent, TVPolarity)

    def ConfigureWidthTriggerSource(
        self,
        Source,
        Level,
        WidthLowThreshold,
        WidthHighThreshold,
        WidthPolarity,
        WidthCondition,
    ):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param WidthLowThreshold:
        :type WidthLowThreshold:
        :param WidthHighThreshold:
        :type WidthHighThreshold:
        :param WidthPolarity:
        :type WidthPolarity:
        :param WidthCondition:
        :type WidthCondition:
        """
        return self._dllwrap.ConfigureWidthTriggerSource(
            self._vi,
            Source,
            Level,
            WidthLowThreshold,
            WidthHighThreshold,
            WidthPolarity,
            WidthCondition,
        )

    def GetChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, Index, NameBufferSize)

    def ConfigureChannel(self, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled):
        """

        :param Channel:
        :type Channel:
        :param Range:
        :type Range:
        :param Offset:
        :type Offset:
        :param Coupling:
        :type Coupling:
        :param ProbeAttenuation:
        :type ProbeAttenuation:
        :param Enabled:
        :type Enabled:
        """
        return self._dllwrap.ConfigureChannel(self._vi, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled)

    def ConfigureChanCharacteristics(self, Channel, InputImpedance, MaxInputFrequency):
        """

        :param Channel:
        :type Channel:
        :param InputImpedance:
        :type InputImpedance:
        :param MaxInputFrequency:
        :type MaxInputFrequency:
        """
        return self._dllwrap.ConfigureChanCharacteristics(self._vi, Channel, InputImpedance, MaxInputFrequency)

    def ConfigureRefLevels(self, Low, Mid, High):
        """

        :param Low:
        :type Low:
        :param Mid:
        :type Mid:
        :param High:
        :type High:
        """
        return self._dllwrap.ConfigureRefLevels(self._vi, Low, Mid, High)

    def ReadWaveform(self, Channel, WaveformSize, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadWaveform(self._vi, Channel, WaveformSize, MaxTimeMilliseconds)

    def ReadWaveformMeasurement(self, Channel, MeasFunction, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param MeasFunction:
        :type MeasFunction:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadWaveformMeasurement(self._vi, Channel, MeasFunction, MaxTimeMilliseconds)

    def ReadMinMaxWaveform(self, Channel, WaveformSize, MaxTimeMilliseconds):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        :param MaxTimeMilliseconds:
        :type MaxTimeMilliseconds:
        """
        return self._dllwrap.ReadMinMaxWaveform(self._vi, Channel, WaveformSize, MaxTimeMilliseconds)

    def FetchWaveform(self, Channel, WaveformSize):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        """
        return self._dllwrap.FetchWaveform(self._vi, Channel, WaveformSize)

    def FetchWaveformMeasurement(self, Channel, MeasFunction):
        """

        :param Channel:
        :type Channel:
        :param MeasFunction:
        :type MeasFunction:
        """
        return self._dllwrap.FetchWaveformMeasurement(self._vi, Channel, MeasFunction)

    def FetchMinMaxWaveform(self, Channel, WaveformSize):
        """

        :param Channel:
        :type Channel:
        :param WaveformSize:
        :type WaveformSize:
        """
        return self._dllwrap.FetchMinMaxWaveform(self._vi, Channel, WaveformSize)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def InitiateAcquisition(self):
        """"""
        return self._dllwrap.InitiateAcquisition(self._vi)

    def AcquisitionStatus(self):
        """"""
        return self._dllwrap.AcquisitionStatus(self._vi)

    def AutoSet2(self):
        """"""
        return self._dllwrap.AutoSet2(self._vi)

    def SetAverageMode(self, NumberAverages):
        """

        :param NumberAverages:
        :type NumberAverages:
        """
        return self._dllwrap.SetAverageMode(self._vi, NumberAverages)

    def Start(self):
        """"""
        return self._dllwrap.Start(self._vi)

    def Stop(self):
        """"""
        return self._dllwrap.Stop(self._vi)

    def ConfigureRecord(self, TimePerRecord, MinNumPts, AcquisitionStartTime):
        """

        :param TimePerRecord:
        :type TimePerRecord:
        :param MinNumPts:
        :type MinNumPts:
        :param AcquisitionStartTime:
        :type AcquisitionStartTime:
        """
        return self._dllwrap.ConfigureRecord(self._vi, TimePerRecord, MinNumPts, AcquisitionStartTime)

    def GetSingleSequence(self):
        """"""
        return self._dllwrap.GetSingleSequence(self._vi)

    def SetSingleSequence(self, SingleSequence):
        """

        :param SingleSequence:
        :type SingleSequence:
        """
        return self._dllwrap.SetSingleSequence(self._vi, SingleSequence)

    def GetBusName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetBusName(self._vi, Index, NameBufferSize)

    def ConfigureI2C(self, Bus, ClockSource, DataSource, RWInAddress):
        """

        :param Bus:
        :type Bus:
        :param ClockSource:
        :type ClockSource:
        :param DataSource:
        :type DataSource:
        :param RWInAddress:
        :type RWInAddress:
        """
        return self._dllwrap.ConfigureI2C(self._vi, Bus, ClockSource, DataSource, RWInAddress)

    def ReadI2C(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadI2C(self._vi, Bus)

    def ConfigureAudioInputs(self, Bus, Type, ClockSource, DataSource, WordSelectSource, FrameSyncSource):
        """

        :param Bus:
        :type Bus:
        :param Type:
        :type Type:
        :param ClockSource:
        :type ClockSource:
        :param DataSource:
        :type DataSource:
        :param WordSelectSource:
        :type WordSelectSource:
        :param FrameSyncSource:
        :type FrameSyncSource:
        """
        return self._dllwrap.ConfigureAudioInputs(
            self._vi,
            Bus,
            Type,
            ClockSource,
            DataSource,
            WordSelectSource,
            FrameSyncSource,
        )

    def ReadAudioInputs(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadAudioInputs(self._vi, Bus)

    def ConfigureAudio(
        self,
        Bus,
        BitDelay,
        BitOrder,
        BitsPerChannel,
        ClockPolarity,
        DataPolarity,
        BitsPerWord,
        DisplayFormat,
        FrameSyncPolarity,
        WordSelectPolarity,
        ChannelsPerFrame,
    ):
        """

        :param Bus:
        :type Bus:
        :param BitDelay:
        :type BitDelay:
        :param BitOrder:
        :type BitOrder:
        :param BitsPerChannel:
        :type BitsPerChannel:
        :param ClockPolarity:
        :type ClockPolarity:
        :param DataPolarity:
        :type DataPolarity:
        :param BitsPerWord:
        :type BitsPerWord:
        :param DisplayFormat:
        :type DisplayFormat:
        :param FrameSyncPolarity:
        :type FrameSyncPolarity:
        :param WordSelectPolarity:
        :type WordSelectPolarity:
        :param ChannelsPerFrame:
        :type ChannelsPerFrame:
        """
        return self._dllwrap.ConfigureAudio(
            self._vi,
            Bus,
            BitDelay,
            BitOrder,
            BitsPerChannel,
            ClockPolarity,
            DataPolarity,
            BitsPerWord,
            DisplayFormat,
            FrameSyncPolarity,
            WordSelectPolarity,
            ChannelsPerFrame,
        )

    def ReadAudio(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadAudio(self._vi, Bus)

    def ConfigureCAN(self, Bus, Source, SamplePoint, SignalType, BitRate):
        """

        :param Bus:
        :type Bus:
        :param Source:
        :type Source:
        :param SamplePoint:
        :type SamplePoint:
        :param SignalType:
        :type SignalType:
        :param BitRate:
        :type BitRate:
        """
        return self._dllwrap.ConfigureCAN(self._vi, Bus, Source, SamplePoint, SignalType, BitRate)

    def ReadCAN(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadCAN(self._vi, Bus)

    def ConfigureFlexray(self, Bus, Source, IDFormat, Standard, BitRate):
        """

        :param Bus:
        :type Bus:
        :param Source:
        :type Source:
        :param IDFormat:
        :type IDFormat:
        :param Standard:
        :type Standard:
        :param BitRate:
        :type BitRate:
        """
        return self._dllwrap.ConfigureFlexray(self._vi, Bus, Source, IDFormat, Standard, BitRate)

    def ReadFlexray(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadFlexray(self._vi, Bus)

    def ConfigureLIN(self, Bus, Source, IDFormat, BitRate, Polarity, SamplePoint, Standard):
        """

        :param Bus:
        :type Bus:
        :param Source:
        :type Source:
        :param IDFormat:
        :type IDFormat:
        :param BitRate:
        :type BitRate:
        :param Polarity:
        :type Polarity:
        :param SamplePoint:
        :type SamplePoint:
        :param Standard:
        :type Standard:
        """
        return self._dllwrap.ConfigureLIN(self._vi, Bus, Source, IDFormat, BitRate, Polarity, SamplePoint, Standard)

    def ReadLIN(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadLIN(self._vi, Bus)

    def ConfigureRS232(self, Bus2, RXSource, InputPolarity, Bitrate, DataBits, InputParity, TXSource):
        """

        :param Bus2:
        :type Bus2:
        :param RXSource:
        :type RXSource:
        :param InputPolarity:
        :type InputPolarity:
        :param Bitrate:
        :type Bitrate:
        :param DataBits:
        :type DataBits:
        :param InputParity:
        :type InputParity:
        :param TXSource:
        :type TXSource:
        """
        return self._dllwrap.ConfigureRS232(
            self._vi,
            Bus2,
            RXSource,
            InputPolarity,
            Bitrate,
            DataBits,
            InputParity,
            TXSource,
        )

    def ReadRS232(self, Bus2):
        """

        :param Bus2:
        :type Bus2:
        """
        return self._dllwrap.ReadRS232(self._vi, Bus2)

    def ReadUSB(self, Bus2):
        """

        :param Bus2:
        :type Bus2:
        """
        return self._dllwrap.ReadUSB(self._vi, Bus2)

    def ConfigureUSB(self, Bus2, DifferentialSource, Probe, Bitrate, DPLUSSource, DMINUSSource):
        """

        :param Bus2:
        :type Bus2:
        :param DifferentialSource:
        :type DifferentialSource:
        :param Probe:
        :type Probe:
        :param Bitrate:
        :type Bitrate:
        :param DPLUSSource:
        :type DPLUSSource:
        :param DMINUSSource:
        :type DMINUSSource:
        """
        return self._dllwrap.ConfigureUSB(self._vi, Bus2, DifferentialSource, Probe, Bitrate, DPLUSSource, DMINUSSource)

    def GetLowThresholdChannel(self, Bus2, InputSource):
        """

        :param Bus2:
        :type Bus2:
        :param InputSource:
        :type InputSource:
        """
        return self._dllwrap.GetLowThresholdChannel(self._vi, Bus2, InputSource)

    def GetThresholdChannel(self, Bus2, InputSource):
        """

        :param Bus2:
        :type Bus2:
        :param InputSource:
        :type InputSource:
        """
        return self._dllwrap.GetThresholdChannel(self._vi, Bus2, InputSource)

    def SetLowThreshholdChannel(self, Bus2, InputSource, Threshold):
        """

        :param Bus2:
        :type Bus2:
        :param InputSource:
        :type InputSource:
        :param Threshold:
        :type Threshold:
        """
        return self._dllwrap.SetLowThreshholdChannel(self._vi, Bus2, InputSource, Threshold)

    def SetThresholdChannel(self, Bus2, InputSource, Threshold):
        """

        :param Bus2:
        :type Bus2:
        :param InputSource:
        :type InputSource:
        :param Threshold:
        :type Threshold:
        """
        return self._dllwrap.SetThresholdChannel(self._vi, Bus2, InputSource, Threshold)

    def SetThresholdDigitalChannel(self, Bus, InputSource, Threshold):
        """

        :param Bus:
        :type Bus:
        :param InputSource:
        :type InputSource:
        :param Threshold:
        :type Threshold:
        """
        return self._dllwrap.SetThresholdDigitalChannel(self._vi, Bus, InputSource, Threshold)

    def GetThresholdDigitalChannel(self, Bus, InputSource):
        """

        :param Bus:
        :type Bus:
        :param InputSource:
        :type InputSource:
        """
        return self._dllwrap.GetThresholdDigitalChannel(self._vi, Bus, InputSource)

    def SetUpperThreshhold(self, Bus, InputSource, Threshold):
        """

        :param Bus:
        :type Bus:
        :param InputSource:
        :type InputSource:
        :param Threshold:
        :type Threshold:
        """
        return self._dllwrap.SetUpperThreshhold(self._vi, Bus, InputSource, Threshold)

    def GetUpperThreshhold(self, Bus, InputSource):
        """

        :param Bus:
        :type Bus:
        :param InputSource:
        :type InputSource:
        """
        return self._dllwrap.GetUpperThreshhold(self._vi, Bus, InputSource)

    def SaveEventTable(self, Bus, Filename):
        """

        :param Bus:
        :type Bus:
        :param Filename:
        :type Filename:
        """
        return self._dllwrap.SaveEventTable(self._vi, Bus, Filename)

    def ConfigureSPI(
        self,
        Bus,
        Clocksource,
        ClockPolarity,
        DataSize,
        DataMISOSource,
        DataMISOPolarity,
        BitOrder,
        SlaveSelectSource,
        SlaveSelectPolarity,
        DataMOSISource,
        DataMOSIPolarity,
    ):
        """

        :param Bus:
        :type Bus:
        :param Clocksource:
        :type Clocksource:
        :param ClockPolarity:
        :type ClockPolarity:
        :param DataSize:
        :type DataSize:
        :param DataMISOSource:
        :type DataMISOSource:
        :param DataMISOPolarity:
        :type DataMISOPolarity:
        :param BitOrder:
        :type BitOrder:
        :param SlaveSelectSource:
        :type SlaveSelectSource:
        :param SlaveSelectPolarity:
        :type SlaveSelectPolarity:
        :param DataMOSISource:
        :type DataMOSISource:
        :param DataMOSIPolarity:
        :type DataMOSIPolarity:
        """
        return self._dllwrap.ConfigureSPI(
            self._vi,
            Bus,
            Clocksource,
            ClockPolarity,
            DataSize,
            DataMISOSource,
            DataMISOPolarity,
            BitOrder,
            SlaveSelectSource,
            SlaveSelectPolarity,
            DataMOSISource,
            DataMOSIPolarity,
        )

    def ReadSPI(self, Bus):
        """

        :param Bus:
        :type Bus:
        """
        return self._dllwrap.ReadSPI(self._vi, Bus)

    def GetParallelBitSource(self, Bus, Bit):
        """

        :param Bus:
        :type Bus:
        :param Bit:
        :type Bit:
        """
        return self._dllwrap.GetParallelBitSource(self._vi, Bus, Bit)

    def SetParallelBitSource(self, Bus, Bit, ParallelSource):
        """

        :param Bus:
        :type Bus:
        :param Bit:
        :type Bit:
        :param ParallelSource:
        :type ParallelSource:
        """
        return self._dllwrap.SetParallelBitSource(self._vi, Bus, Bit, ParallelSource)

    def SetMeasurementScale(self, MeasurementScale):
        """

        :param MeasurementScale:
        :type MeasurementScale:
        """
        return self._dllwrap.SetMeasurementScale(self._vi, MeasurementScale)

    def SetMeasurementScale2(self, MeasurementScale):
        """

        :param MeasurementScale:
        :type MeasurementScale:
        """
        return self._dllwrap.SetMeasurementScale2(self._vi, MeasurementScale)

    def SetMessageBoxCoordinates(self, X1, Y1, X2, Y2):
        """

        :param X1:
        :type X1:
        :param Y1:
        :type Y1:
        :param X2:
        :type X2:
        :param Y2:
        :type Y2:
        """
        return self._dllwrap.SetMessageBoxCoordinates(self._vi, X1, Y1, X2, Y2)

    def GetMessageBoxCoordinates(self):
        """"""
        return self._dllwrap.GetMessageBoxCoordinates(self._vi)

    def ShowMessage(self, Message):
        """

        :param Message:
        :type Message:
        """
        return self._dllwrap.ShowMessage(self._vi, Message)

    def ClearMessage(self):
        """"""
        return self._dllwrap.ClearMessage(self._vi)

    def GetDisplayMessage(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.GetDisplayMessage(self._vi, ValBufferSize)

    def Print(self):
        """"""
        return self._dllwrap.Print(self._vi)

    def Configure(self, Source, Mode):
        """

        :param Source:
        :type Source:
        :param Mode:
        :type Mode:
        """
        return self._dllwrap.Configure(self._vi, Source, Mode)

    def Read(self):
        """"""
        return self._dllwrap.Read(self._vi)

    def ConfigureBoxCoordinates(self, Top, Left, Right, Bottom):
        """

        :param Top:
        :type Top:
        :param Left:
        :type Left:
        :param Right:
        :type Right:
        :param Bottom:
        :type Bottom:
        """
        return self._dllwrap.ConfigureBoxCoordinates(self._vi, Top, Left, Right, Bottom)

    def ReadBoxCoordinates(self):
        """"""
        return self._dllwrap.ReadBoxCoordinates(self._vi)

    def ConfigureBoxCoordinatesPercent(self, Top, Left, Right, Bottom):
        """

        :param Top:
        :type Top:
        :param Left:
        :type Left:
        :param Right:
        :type Right:
        :param Bottom:
        :type Bottom:
        """
        return self._dllwrap.ConfigureBoxCoordinatesPercent(self._vi, Top, Left, Right, Bottom)

    def ReadBoxCoordinatesPercent(self):
        """"""
        return self._dllwrap.ReadBoxCoordinatesPercent(self._vi)

    def Reset2(self):
        """"""
        return self._dllwrap.Reset2(self._vi)

    def Configure2(self, Position, Scale, RecordLength):
        """

        :param Position:
        :type Position:
        :param Scale:
        :type Scale:
        :param RecordLength:
        :type RecordLength:
        """
        return self._dllwrap.Configure2(self._vi, Position, Scale, RecordLength)

    def ConfigureDelay(self, Mode, Time):
        """

        :param Mode:
        :type Mode:
        :param Time:
        :type Time:
        """
        return self._dllwrap.ConfigureDelay(self._vi, Mode, Time)

    def Read2(self):
        """"""
        return self._dllwrap.Read2(self._vi)

    def ReadDelay(self):
        """"""
        return self._dllwrap.ReadDelay(self._vi)

    def GetMathName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetMathName(self._vi, Index, NameBufferSize)

    def Configure3(
        self,
        Math,
        Expression,
        VerticalPosition,
        VerticalScale,
        HorizontalPosition,
        HorizontalScale,
        DisplayState,
        Type,
    ):
        """

        :param Math:
        :type Math:
        :param Expression:
        :type Expression:
        :param VerticalPosition:
        :type VerticalPosition:
        :param VerticalScale:
        :type VerticalScale:
        :param HorizontalPosition:
        :type HorizontalPosition:
        :param HorizontalScale:
        :type HorizontalScale:
        :param DisplayState:
        :type DisplayState:
        :param Type:
        :type Type:
        """
        return self._dllwrap.Configure3(
            self._vi,
            Math,
            Expression,
            VerticalPosition,
            VerticalScale,
            HorizontalPosition,
            HorizontalScale,
            DisplayState,
            Type,
        )

    def Read3(
        self,
        Math,
        ExpressionBufferSize,
        VerticalUnitsBufferSize,
        HorizontalUnitsBufferSize,
    ):
        """

        :param Math:
        :type Math:
        :param ExpressionBufferSize:
        :type ExpressionBufferSize:
        :param VerticalUnitsBufferSize:
        :type VerticalUnitsBufferSize:
        :param HorizontalUnitsBufferSize:
        :type HorizontalUnitsBufferSize:
        """
        return self._dllwrap.Read3(
            self._vi,
            Math,
            ExpressionBufferSize,
            VerticalUnitsBufferSize,
            HorizontalUnitsBufferSize,
        )

    def GetMathVariable(self, Math, Variable):
        """

        :param Math:
        :type Math:
        :param Variable:
        :type Variable:
        """
        return self._dllwrap.GetMathVariable(self._vi, Math, Variable)

    def SetMathVariable(self, Math, Variable, MathVariable):
        """

        :param Math:
        :type Math:
        :param Variable:
        :type Variable:
        :param MathVariable:
        :type MathVariable:
        """
        return self._dllwrap.SetMathVariable(self._vi, Math, Variable, MathVariable)

    def GetEndPointGatingIndicator(self, Math):
        """

        :param Math:
        :type Math:
        """
        return self._dllwrap.GetEndPointGatingIndicator(self._vi, Math)

    def GetStartPointGatingIndicator(self, Math):
        """

        :param Math:
        :type Math:
        """
        return self._dllwrap.GetStartPointGatingIndicator(self._vi, Math)

    def GetNyquistFrequency(self, Math):
        """

        :param Math:
        :type Math:
        """
        return self._dllwrap.GetNyquistFrequency(self._vi, Math)

    def GetMeasurementSlotName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetMeasurementSlotName(self._vi, Index, NameBufferSize)

    def ReadDelay2(self, MeasurementSlot):
        """

        :param MeasurementSlot:
        :type MeasurementSlot:
        """
        return self._dllwrap.ReadDelay2(self._vi, MeasurementSlot)

    def ClearStatistics(self):
        """"""
        return self._dllwrap.ClearStatistics(self._vi)

    def Configure15(self, MeasurementSlot, Source, Type):
        """

        :param MeasurementSlot:
        :type MeasurementSlot:
        :param Source:
        :type Source:
        :param Type:
        :type Type:
        """
        return self._dllwrap.Configure15(self._vi, MeasurementSlot, Source, Type)

    def ConfigureDelay3(self, MeasurementSlot, Source1, Source2, Direction, Edge1, Edge2):
        """

        :param MeasurementSlot:
        :type MeasurementSlot:
        :param Source1:
        :type Source1:
        :param Source2:
        :type Source2:
        :param Direction:
        :type Direction:
        :param Edge1:
        :type Edge1:
        :param Edge2:
        :type Edge2:
        """
        return self._dllwrap.ConfigureDelay3(self._vi, MeasurementSlot, Source1, Source2, Direction, Edge1, Edge2)

    def ConfigurePhase2(self, MeasurementSlot, Source1, Source2):
        """

        :param MeasurementSlot:
        :type MeasurementSlot:
        :param Source1:
        :type Source1:
        :param Source2:
        :type Source2:
        """
        return self._dllwrap.ConfigurePhase2(self._vi, MeasurementSlot, Source1, Source2)

    def Read9(self, MeasurementSlot):
        """

        :param MeasurementSlot:
        :type MeasurementSlot:
        """
        return self._dllwrap.Read9(self._vi, MeasurementSlot)

    def ReadValue2(
        self,
        MeasurementSlot,
        Source1,
        Source2,
        Direction,
        Edge1,
        Edge2,
        Type,
        UnitBufferSize,
    ):
        """

        :param MeasurementSlot:
        :type MeasurementSlot:
        :param Source1:
        :type Source1:
        :param Source2:
        :type Source2:
        :param Direction:
        :type Direction:
        :param Edge1:
        :type Edge1:
        :param Edge2:
        :type Edge2:
        :param Type:
        :type Type:
        :param UnitBufferSize:
        :type UnitBufferSize:
        """
        return self._dllwrap.ReadValue2(
            self._vi,
            MeasurementSlot,
            Source1,
            Source2,
            Direction,
            Edge1,
            Edge2,
            Type,
            UnitBufferSize,
        )

    def GetHorizontalValue(self, Indicator):
        """

        :param Indicator:
        :type Indicator:
        """
        return self._dllwrap.GetHorizontalValue(self._vi, Indicator)

    def GetVerticalValue(self, Indicator):
        """

        :param Indicator:
        :type Indicator:
        """
        return self._dllwrap.GetVerticalValue(self._vi, Indicator)

    def ConfigureChannelPower(self, Bandwidth):
        """

        :param Bandwidth:
        :type Bandwidth:
        """
        return self._dllwrap.ConfigureChannelPower(self._vi, Bandwidth)

    def ReadChannelPower(self):
        """"""
        return self._dllwrap.ReadChannelPower(self._vi)

    def ConfigureACPR(self, AdjacentChannels, ChannelBandwidth, ChannelSpacing):
        """

        :param AdjacentChannels:
        :type AdjacentChannels:
        :param ChannelBandwidth:
        :type ChannelBandwidth:
        :param ChannelSpacing:
        :type ChannelSpacing:
        """
        return self._dllwrap.ConfigureACPR(self._vi, AdjacentChannels, ChannelBandwidth, ChannelSpacing)

    def ReadACPR(self):
        """"""
        return self._dllwrap.ReadACPR(self._vi)

    def ConfigureOBW(self, AnalysisBandwidth, PercentageDown):
        """

        :param AnalysisBandwidth:
        :type AnalysisBandwidth:
        :param PercentageDown:
        :type PercentageDown:
        """
        return self._dllwrap.ConfigureOBW(self._vi, AnalysisBandwidth, PercentageDown)

    def ReadOBW(self):
        """"""
        return self._dllwrap.ReadOBW(self._vi)

    def SaveEventTableBusData(self, Bus, Filename):
        """

        :param Bus:
        :type Bus:
        :param Filename:
        :type Filename:
        """
        return self._dllwrap.SaveEventTableBusData(self._vi, Bus, Filename)

    def SaveImage(self, Filename, ImageFormat, ImageLayout):
        """

        :param Filename:
        :type Filename:
        :param ImageFormat:
        :type ImageFormat:
        :param ImageLayout:
        :type ImageLayout:
        """
        return self._dllwrap.SaveImage(self._vi, Filename, ImageFormat, ImageLayout)

    def DefaultSetup(self):
        """"""
        return self._dllwrap.DefaultSetup(self._vi)

    def RecallSetupFromFile(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.RecallSetupFromFile(self._vi, FileName)

    def RecallSetupFromMemory(self, Location):
        """

        :param Location:
        :type Location:
        """
        return self._dllwrap.RecallSetupFromMemory(self._vi, Location)

    def RecallWaveformFromFile(self, RefMemory, FileName):
        """

        :param RefMemory:
        :type RefMemory:
        :param FileName:
        :type FileName:
        """
        return self._dllwrap.RecallWaveformFromFile(self._vi, RefMemory, FileName)

    def SaveAllDigitalChannels(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.SaveAllDigitalChannels(self._vi, FileName)

    def SaveSetupToFile(self, FileName):
        """

        :param FileName:
        :type FileName:
        """
        return self._dllwrap.SaveSetupToFile(self._vi, FileName)

    def SaveSetupToMemory(self, Location):
        """

        :param Location:
        :type Location:
        """
        return self._dllwrap.SaveSetupToMemory(self._vi, Location)

    def SaveWaveformToFile(self, Source, FileName):
        """

        :param Source:
        :type Source:
        :param FileName:
        :type FileName:
        """
        return self._dllwrap.SaveWaveformToFile(self._vi, Source, FileName)

    def SaveWaveformToReference(self, Source, RefMemory):
        """

        :param Source:
        :type Source:
        :param RefMemory:
        :type RefMemory:
        """
        return self._dllwrap.SaveWaveformToReference(self._vi, Source, RefMemory)

    def SaveAllWaveformsToFile(self, FileName, FileFormat):
        """

        :param FileName:
        :type FileName:
        :param FileFormat:
        :type FileFormat:
        """
        return self._dllwrap.SaveAllWaveformsToFile(self._vi, FileName, FileFormat)

    def GetSearchName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetSearchName(self._vi, Index, NameBufferSize)

    def ConfigureLogicSearchSource(self, Search, Source, Input, Threshold, PatternInput):
        """

        :param Search:
        :type Search:
        :param Source:
        :type Source:
        :param Input:
        :type Input:
        :param Threshold:
        :type Threshold:
        :param PatternInput:
        :type PatternInput:
        """
        return self._dllwrap.ConfigureLogicSearchSource(self._vi, Search, Source, Input, Threshold, PatternInput)

    def ReadLogicSearchSource(self, Search, Source):
        """

        :param Search:
        :type Search:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ReadLogicSearchSource(self._vi, Search, Source)

    def ConfigureLogicClock(self, Search, Source, EdgeType):
        """

        :param Search:
        :type Search:
        :param Source:
        :type Source:
        :param EdgeType:
        :type EdgeType:
        """
        return self._dllwrap.ConfigureLogicClock(self._vi, Search, Source, EdgeType)

    def ReadLogicClock(self, Search):
        """

        :param Search:
        :type Search:
        """
        return self._dllwrap.ReadLogicClock(self._vi, Search)

    def ReadSetupHoldSearchSource(self, Search):
        """

        :param Search:
        :type Search:
        """
        return self._dllwrap.ReadSetupHoldSearchSource(self._vi, Search)

    def ConfigureAIndependentParameters(self, Search, Source, Level, UpperThreshold, LowerThreshold):
        """

        :param Search:
        :type Search:
        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param UpperThreshold:
        :type UpperThreshold:
        :param LowerThreshold:
        :type LowerThreshold:
        """
        return self._dllwrap.ConfigureAIndependentParameters(
            self._vi, Search, Source, Level, UpperThreshold, LowerThreshold
        )

    def ReadAIndependentParameters(self, Search, Source):
        """

        :param Search:
        :type Search:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ReadAIndependentParameters(self._vi, Search, Source)

    def ConfigureEdge(self, Search, Level, Source, Slope):
        """

        :param Search:
        :type Search:
        :param Level:
        :type Level:
        :param Source:
        :type Source:
        :param Slope:
        :type Slope:
        """
        return self._dllwrap.ConfigureEdge(self._vi, Search, Level, Source, Slope)

    def ConfigureLogicPattern(self, Search, Condition, LessLimit, MoreLimit, PatternType):
        """

        :param Search:
        :type Search:
        :param Condition:
        :type Condition:
        :param LessLimit:
        :type LessLimit:
        :param MoreLimit:
        :type MoreLimit:
        :param PatternType:
        :type PatternType:
        """
        return self._dllwrap.ConfigureLogicPattern(self._vi, Search, Condition, LessLimit, MoreLimit, PatternType)

    def ConfigurePulseWidth(self, Search, Level, Source, Condition, Polarity, HighLimit, LowLimit):
        """

        :param Search:
        :type Search:
        :param Level:
        :type Level:
        :param Source:
        :type Source:
        :param Condition:
        :type Condition:
        :param Polarity:
        :type Polarity:
        :param HighLimit:
        :type HighLimit:
        :param LowLimit:
        :type LowLimit:
        """
        return self._dllwrap.ConfigurePulseWidth(
            self._vi, Search, Level, Source, Condition, Polarity, HighLimit, LowLimit
        )

    def ConfigureRunt(self, Search, Source, When, Polarity, Width):
        """

        :param Search:
        :type Search:
        :param Source:
        :type Source:
        :param When:
        :type When:
        :param Polarity:
        :type Polarity:
        :param Width:
        :type Width:
        """
        return self._dllwrap.ConfigureRunt(self._vi, Search, Source, When, Polarity, Width)

    def ConfigureSetupHold(self, Search, Level, Source, ClockEdge, ClockSource, HoldTime, SetTime, ClockLevel):
        """

        :param Search:
        :type Search:
        :param Level:
        :type Level:
        :param Source:
        :type Source:
        :param ClockEdge:
        :type ClockEdge:
        :param ClockSource:
        :type ClockSource:
        :param HoldTime:
        :type HoldTime:
        :param SetTime:
        :type SetTime:
        :param ClockLevel:
        :type ClockLevel:
        """
        return self._dllwrap.ConfigureSetupHold(
            self._vi,
            Search,
            Level,
            Source,
            ClockEdge,
            ClockSource,
            HoldTime,
            SetTime,
            ClockLevel,
        )

    def ConfigureTransition(self, Search, Source, DeltaTime, When, Polarity):
        """

        :param Search:
        :type Search:
        :param Source:
        :type Source:
        :param DeltaTime:
        :type DeltaTime:
        :param When:
        :type When:
        :param Polarity:
        :type Polarity:
        """
        return self._dllwrap.ConfigureTransition(self._vi, Search, Source, DeltaTime, When, Polarity)

    def ReadEdge(self, Search):
        """

        :param Search:
        :type Search:
        """
        return self._dllwrap.ReadEdge(self._vi, Search)

    def ReadLogicPattern(self, Search):
        """

        :param Search:
        :type Search:
        """
        return self._dllwrap.ReadLogicPattern(self._vi, Search)

    def ReadPulseWidth(self, Search):
        """

        :param Search:
        :type Search:
        """
        return self._dllwrap.ReadPulseWidth(self._vi, Search)

    def ReadRunt(self, Search):
        """

        :param Search:
        :type Search:
        """
        return self._dllwrap.ReadRunt(self._vi, Search)

    def ReadSetupHold(self, Search):
        """

        :param Search:
        :type Search:
        """
        return self._dllwrap.ReadSetupHold(self._vi, Search)

    def ReadTransition(self, Search):
        """

        :param Search:
        :type Search:
        """
        return self._dllwrap.ReadTransition(self._vi, Search)

    def Copy(self, Search, Type):
        """

        :param Search:
        :type Search:
        :param Type:
        :type Type:
        """
        return self._dllwrap.Copy(self._vi, Search, Type)

    def ConfigureARFIndependentParameters(self, Search, Source, Level, UpperThreshold, LowerThreshold):
        """

        :param Search:
        :type Search:
        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param UpperThreshold:
        :type UpperThreshold:
        :param LowerThreshold:
        :type LowerThreshold:
        """
        return self._dllwrap.ConfigureARFIndependentParameters(
            self._vi, Search, Source, Level, UpperThreshold, LowerThreshold
        )

    def ReadARFIndependentParameters(self, Search, Source):
        """

        :param Search:
        :type Search:
        :param Source:
        :type Source:
        """
        return self._dllwrap.ReadARFIndependentParameters(self._vi, Search, Source)

    def Configure11(self, Search, BusSource, BusType):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param BusType:
        :type BusType:
        """
        return self._dllwrap.Configure11(self._vi, Search, BusSource, BusType)

    def GetParallelData2(self, Search, BusSource, ParallelDataBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param ParallelDataBufferSize:
        :type ParallelDataBufferSize:
        """
        return self._dllwrap.GetParallelData2(self._vi, Search, BusSource, ParallelDataBufferSize)

    def SetParallelData2(self, Search, BusSource, ParallelData):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param ParallelData:
        :type ParallelData:
        """
        return self._dllwrap.SetParallelData2(self._vi, Search, BusSource, ParallelData)

    def GetCondition9(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition9(self._vi, Search, BusSource)

    def SetCondition9(self, Search, BusSource, Condition):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition9(self._vi, Search, BusSource, Condition)

    def GetDataHighValue4(self, Search, BusSource, DataHighValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataHighValueBufferSize:
        :type DataHighValueBufferSize:
        """
        return self._dllwrap.GetDataHighValue4(self._vi, Search, BusSource, DataHighValueBufferSize)

    def SetDataHighValue4(self, Search, BusSource, DataHighValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataHighValue:
        :type DataHighValue:
        """
        return self._dllwrap.SetDataHighValue4(self._vi, Search, BusSource, DataHighValue)

    def GetDataOffset3(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataOffset3(self._vi, Search, BusSource)

    def SetDataOffset3(self, Search, BusSource, DataOffset):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataOffset:
        :type DataOffset:
        """
        return self._dllwrap.SetDataOffset3(self._vi, Search, BusSource, DataOffset)

    def GetDataQualifier5(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataQualifier5(self._vi, Search, BusSource)

    def SetDataQualifier5(self, Search, BusSource, DataQualifier):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataQualifier:
        :type DataQualifier:
        """
        return self._dllwrap.SetDataQualifier5(self._vi, Search, BusSource, DataQualifier)

    def GetDataValue6(self, Search, BusSource, DataValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataValueBufferSize:
        :type DataValueBufferSize:
        """
        return self._dllwrap.GetDataValue6(self._vi, Search, BusSource, DataValueBufferSize)

    def SetDataValue6(self, Search, BusSource, DataValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataValue:
        :type DataValue:
        """
        return self._dllwrap.SetDataValue6(self._vi, Search, BusSource, DataValue)

    def GetDataWord2(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataWord2(self._vi, Search, BusSource)

    def SetDataWord2(self, Search, BusSource, DataWord):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataWord:
        :type DataWord:
        """
        return self._dllwrap.SetDataWord2(self._vi, Search, BusSource, DataWord)

    def GetCondition10(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition10(self._vi, Search, BusSource)

    def SetCondition10(self, Search, BusSource, Condition):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition10(self._vi, Search, BusSource, Condition)

    def GetDataHighValue5(self, Search, BusSource, DataHighValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataHighValueBufferSize:
        :type DataHighValueBufferSize:
        """
        return self._dllwrap.GetDataHighValue5(self._vi, Search, BusSource, DataHighValueBufferSize)

    def SetDataHighValue5(self, Search, BusSource, DataHighValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataHighValue:
        :type DataHighValue:
        """
        return self._dllwrap.SetDataHighValue5(self._vi, Search, BusSource, DataHighValue)

    def GetDataOffset4(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataOffset4(self._vi, Search, BusSource)

    def SetDataOffset4(self, Search, BusSource, DataOffset):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataOffset:
        :type DataOffset:
        """
        return self._dllwrap.SetDataOffset4(self._vi, Search, BusSource, DataOffset)

    def GetDataQualifier6(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataQualifier6(self._vi, Search, BusSource)

    def SetDataQualifier6(self, Search, BusSource, DataQualifier):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataQualifier:
        :type DataQualifier:
        """
        return self._dllwrap.SetDataQualifier6(self._vi, Search, BusSource, DataQualifier)

    def GetDataValue7(self, Search, BusSource, DataValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataValueBufferSize:
        :type DataValueBufferSize:
        """
        return self._dllwrap.GetDataValue7(self._vi, Search, BusSource, DataValueBufferSize)

    def SetDataValue7(self, Search, BusSource, DataValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataValue:
        :type DataValue:
        """
        return self._dllwrap.SetDataValue7(self._vi, Search, BusSource, DataValue)

    def GetDataSize5(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataSize5(self._vi, Search, BusSource)

    def SetDataSize5(self, Search, BusSource, DataSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataSize:
        :type DataSize:
        """
        return self._dllwrap.SetDataSize5(self._vi, Search, BusSource, DataSize)

    def GetAddressValue4(self, Search, BusSource, AddressValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param AddressValueBufferSize:
        :type AddressValueBufferSize:
        """
        return self._dllwrap.GetAddressValue4(self._vi, Search, BusSource, AddressValueBufferSize)

    def SetAddressValue4(self, Search, BusSource, AddressValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param AddressValue:
        :type AddressValue:
        """
        return self._dllwrap.SetAddressValue4(self._vi, Search, BusSource, AddressValue)

    def GetAddressType3(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetAddressType3(self._vi, Search, BusSource)

    def SetAddressType3(self, Search, BusSource, AddressType):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param AddressType:
        :type AddressType:
        """
        return self._dllwrap.SetAddressType3(self._vi, Search, BusSource, AddressType)

    def GetAddressMode4(self, Search, BusSource, AddressModeBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param AddressModeBufferSize:
        :type AddressModeBufferSize:
        """
        return self._dllwrap.GetAddressMode4(self._vi, Search, BusSource, AddressModeBufferSize)

    def SetAddressMode4(self, Search, BusSource, AddressMode):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param AddressMode:
        :type AddressMode:
        """
        return self._dllwrap.SetAddressMode4(self._vi, Search, BusSource, AddressMode)

    def GetEndPointValue3(self, Search, BusSource, EndPointValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param EndPointValueBufferSize:
        :type EndPointValueBufferSize:
        """
        return self._dllwrap.GetEndPointValue3(self._vi, Search, BusSource, EndPointValueBufferSize)

    def SetEndPointValue3(self, Search, BusSource, EndPointValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param EndPointValue:
        :type EndPointValue:
        """
        return self._dllwrap.SetEndPointValue3(self._vi, Search, BusSource, EndPointValue)

    def GetErrorType4(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetErrorType4(self._vi, Search, BusSource)

    def SetErrorType4(self, Search, BusSource, ErrorType):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param ErrorType:
        :type ErrorType:
        """
        return self._dllwrap.SetErrorType4(self._vi, Search, BusSource, ErrorType)

    def GetHandshakeType2(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetHandshakeType2(self._vi, Search, BusSource)

    def SetHandshakeType2(self, Search, BusSource, HandshakeType):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param HandshakeType:
        :type HandshakeType:
        """
        return self._dllwrap.SetHandshakeType2(self._vi, Search, BusSource, HandshakeType)

    def GetSofFrameNumber2(self, Search, BusSource, SOFFrameNumberBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param SOFFrameNumberBufferSize:
        :type SOFFrameNumberBufferSize:
        """
        return self._dllwrap.GetSofFrameNumber2(self._vi, Search, BusSource, SOFFrameNumberBufferSize)

    def SetSofFrameNumber2(self, Search, BusSource, SOFFrameNumber):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param SOFFrameNumber:
        :type SOFFrameNumber:
        """
        return self._dllwrap.SetSofFrameNumber2(self._vi, Search, BusSource, SOFFrameNumber)

    def GetSpecialType2(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetSpecialType2(self._vi, Search, BusSource)

    def SetSpecialType2(self, Search, BusSource, SpecialType):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param SpecialType:
        :type SpecialType:
        """
        return self._dllwrap.SetSpecialType2(self._vi, Search, BusSource, SpecialType)

    def GetTokenType2(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetTokenType2(self._vi, Search, BusSource)

    def SetTokenType2(self, Search, BusSource, TokenType):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param TokenType:
        :type TokenType:
        """
        return self._dllwrap.SetTokenType2(self._vi, Search, BusSource, TokenType)

    def GetCondition11(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition11(self._vi, Search, BusSource)

    def SetCondition11(self, Search, BusSource, Condition):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition11(self._vi, Search, BusSource, Condition)

    def GetRxDataValue3(self, Search, BusSource, RXDataValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param RXDataValueBufferSize:
        :type RXDataValueBufferSize:
        """
        return self._dllwrap.GetRxDataValue3(self._vi, Search, BusSource, RXDataValueBufferSize)

    def SetRxDataValue3(self, Search, BusSource, RXDataValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param RXDataValue:
        :type RXDataValue:
        """
        return self._dllwrap.SetRxDataValue3(self._vi, Search, BusSource, RXDataValue)

    def GetTxDataSize3(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetTxDataSize3(self._vi, Search, BusSource)

    def SetTxDataSize3(self, Search, BusSource, TXDataSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param TXDataSize:
        :type TXDataSize:
        """
        return self._dllwrap.SetTxDataSize3(self._vi, Search, BusSource, TXDataSize)

    def GetTxDataValue3(self, Search, BusSource, TXDataValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param TXDataValueBufferSize:
        :type TXDataValueBufferSize:
        """
        return self._dllwrap.GetTxDataValue3(self._vi, Search, BusSource, TXDataValueBufferSize)

    def SetTxDataValue3(self, Search, BusSource, TXDataValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param TXDataValue:
        :type TXDataValue:
        """
        return self._dllwrap.SetTxDataValue3(self._vi, Search, BusSource, TXDataValue)

    def GetCondition12(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition12(self._vi, Search, BusSource)

    def SetCondition12(self, Search, BusSource, Condition):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition12(self._vi, Search, BusSource, Condition)

    def GetRxDataSize2(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetRxDataSize2(self._vi, Search, BusSource)

    def SetRxDataSize2(self, Search, BusSource, RXDataSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param RXDataSize:
        :type RXDataSize:
        """
        return self._dllwrap.SetRxDataSize2(self._vi, Search, BusSource, RXDataSize)

    def GetRxDataValue4(self, Search, BusSource, RXDataValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param RXDataValueBufferSize:
        :type RXDataValueBufferSize:
        """
        return self._dllwrap.GetRxDataValue4(self._vi, Search, BusSource, RXDataValueBufferSize)

    def SetRxDataValue4(self, Search, BusSource, RXDataValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param RXDataValue:
        :type RXDataValue:
        """
        return self._dllwrap.SetRxDataValue4(self._vi, Search, BusSource, RXDataValue)

    def GetTxDataSize4(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetTxDataSize4(self._vi, Search, BusSource)

    def SetTxDataSize4(self, Search, BusSource, TXDataSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param TXDataSize:
        :type TXDataSize:
        """
        return self._dllwrap.SetTxDataSize4(self._vi, Search, BusSource, TXDataSize)

    def GetTxDataValue4(self, Search, BusSource, TXDataValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param TXDataValueBufferSize:
        :type TXDataValueBufferSize:
        """
        return self._dllwrap.GetTxDataValue4(self._vi, Search, BusSource, TXDataValueBufferSize)

    def SetTxDataValue4(self, Search, BusSource, TXDataValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param TXDataValue:
        :type TXDataValue:
        """
        return self._dllwrap.SetTxDataValue4(self._vi, Search, BusSource, TXDataValue)

    def GetDataValue8(self, Search, BusSource, DataValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataValueBufferSize:
        :type DataValueBufferSize:
        """
        return self._dllwrap.GetDataValue8(self._vi, Search, BusSource, DataValueBufferSize)

    def SetDataValue8(self, Search, BusSource, DataValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataValue:
        :type DataValue:
        """
        return self._dllwrap.SetDataValue8(self._vi, Search, BusSource, DataValue)

    def GetDataQualifier7(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataQualifier7(self._vi, Search, BusSource)

    def SetDataQualifier7(self, Search, BusSource, DataQualifier):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataQualifier:
        :type DataQualifier:
        """
        return self._dllwrap.SetDataQualifier7(self._vi, Search, BusSource, DataQualifier)

    def GetDataHighValue6(self, Search, BusSource, DataHighValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataHighValueBufferSize:
        :type DataHighValueBufferSize:
        """
        return self._dllwrap.GetDataHighValue6(self._vi, Search, BusSource, DataHighValueBufferSize)

    def SetDataHighValue6(self, Search, BusSource, DataHighValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataHighValue:
        :type DataHighValue:
        """
        return self._dllwrap.SetDataHighValue6(self._vi, Search, BusSource, DataHighValue)

    def GetCondition13(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition13(self._vi, Search, BusSource)

    def SetCondition13(self, Search, BusSource, Condition):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition13(self._vi, Search, BusSource, Condition)

    def GetDataSize6(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataSize6(self._vi, Search, BusSource)

    def SetDataSize6(self, Search, BusSource, DataSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataSize:
        :type DataSize:
        """
        return self._dllwrap.SetDataSize6(self._vi, Search, BusSource, DataSize)

    def GetErrorType5(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetErrorType5(self._vi, Search, BusSource)

    def SetErrorType5(self, Search, BusSource, ErrorType):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param ErrorType:
        :type ErrorType:
        """
        return self._dllwrap.SetErrorType5(self._vi, Search, BusSource, ErrorType)

    def GetIdentifierValue2(self, Search, BusSource, IdentifierValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param IdentifierValueBufferSize:
        :type IdentifierValueBufferSize:
        """
        return self._dllwrap.GetIdentifierValue2(self._vi, Search, BusSource, IdentifierValueBufferSize)

    def SetIdentifierValue2(self, Search, BusSource, IdentifierValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param IdentifierValue:
        :type IdentifierValue:
        """
        return self._dllwrap.SetIdentifierValue2(self._vi, Search, BusSource, IdentifierValue)

    def GetDataSize7(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataSize7(self._vi, Search, BusSource)

    def SetDataSize7(self, Search, BusSource, DataSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataSize:
        :type DataSize:
        """
        return self._dllwrap.SetDataSize7(self._vi, Search, BusSource, DataSize)

    def GetDataValue9(self, Search, BusSource, DataValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataValueBufferSize:
        :type DataValueBufferSize:
        """
        return self._dllwrap.GetDataValue9(self._vi, Search, BusSource, DataValueBufferSize)

    def SetDataValue9(self, Search, BusSource, DataValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataValue:
        :type DataValue:
        """
        return self._dllwrap.SetDataValue9(self._vi, Search, BusSource, DataValue)

    def GetAddressValue5(self, Search, BusSource, AddressValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param AddressValueBufferSize:
        :type AddressValueBufferSize:
        """
        return self._dllwrap.GetAddressValue5(self._vi, Search, BusSource, AddressValueBufferSize)

    def SetAddressValue5(self, Search, BusSource, AddressValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param AddressValue:
        :type AddressValue:
        """
        return self._dllwrap.SetAddressValue5(self._vi, Search, BusSource, AddressValue)

    def GetDataDirection3(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataDirection3(self._vi, Search, BusSource)

    def SetDataDirection3(self, Search, BusSource, DataDirection):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataDirection:
        :type DataDirection:
        """
        return self._dllwrap.SetDataDirection3(self._vi, Search, BusSource, DataDirection)

    def GetCondition14(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition14(self._vi, Search, BusSource)

    def SetCondition14(self, Search, BusSource, Condition):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition14(self._vi, Search, BusSource, Condition)

    def GetAddressMode5(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetAddressMode5(self._vi, Search, BusSource)

    def SetAddressMode5(self, Search, BusSource, AddressMode):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param AddressMode:
        :type AddressMode:
        """
        return self._dllwrap.SetAddressMode5(self._vi, Search, BusSource, AddressMode)

    def GetCondition15(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition15(self._vi, Search, BusSource)

    def SetCondition15(self, Search, BusSource, Condition):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition15(self._vi, Search, BusSource, Condition)

    def GetEofType2(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetEofType2(self._vi, Search, BusSource)

    def SetEofType2(self, Search, BusSource, EOFType):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param EOFType:
        :type EOFType:
        """
        return self._dllwrap.SetEofType2(self._vi, Search, BusSource, EOFType)

    def GetErrorType6(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetErrorType6(self._vi, Search, BusSource)

    def SetErrorType6(self, Search, BusSource, ErrorType):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param ErrorType:
        :type ErrorType:
        """
        return self._dllwrap.SetErrorType6(self._vi, Search, BusSource, ErrorType)

    def GetFrameType3(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetFrameType3(self._vi, Search, BusSource)

    def SetFrameType3(self, Search, BusSource, FrameType):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param FrameType:
        :type FrameType:
        """
        return self._dllwrap.SetFrameType3(self._vi, Search, BusSource, FrameType)

    def ConfigureCycleCount2(self, Search, BusSource, HighValue, Qualifier, Value):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param HighValue:
        :type HighValue:
        :param Qualifier:
        :type Qualifier:
        :param Value:
        :type Value:
        """
        return self._dllwrap.ConfigureCycleCount2(self._vi, Search, BusSource, HighValue, Qualifier, Value)

    def ReadCycleCount2(self, Search, BusSource, HighValueBufferSize, ValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param HighValueBufferSize:
        :type HighValueBufferSize:
        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.ReadCycleCount2(self._vi, Search, BusSource, HighValueBufferSize, ValueBufferSize)

    def ConfigureData2(self, Search, BusSource, HighValue, Offset, Qualifier, Size, Value):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param HighValue:
        :type HighValue:
        :param Offset:
        :type Offset:
        :param Qualifier:
        :type Qualifier:
        :param Size:
        :type Size:
        :param Value:
        :type Value:
        """
        return self._dllwrap.ConfigureData2(self._vi, Search, BusSource, HighValue, Offset, Qualifier, Size, Value)

    def ReadData2(self, Search, BusSource, HighValueBufferSize, ValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param HighValueBufferSize:
        :type HighValueBufferSize:
        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.ReadData2(self._vi, Search, BusSource, HighValueBufferSize, ValueBufferSize)

    def ConfigureFrameID2(self, Search, BusSource, HighValue, Qualifier, Value):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param HighValue:
        :type HighValue:
        :param Qualifier:
        :type Qualifier:
        :param Value:
        :type Value:
        """
        return self._dllwrap.ConfigureFrameID2(self._vi, Search, BusSource, HighValue, Qualifier, Value)

    def ReadFrameID2(self, Search, BusSource, HighValueBufferSize, ValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param HighValueBufferSize:
        :type HighValueBufferSize:
        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.ReadFrameID2(self._vi, Search, BusSource, HighValueBufferSize, ValueBufferSize)

    def ConfigureHeader2(self, Search, BusSource, CRC, CycleCount, FrameID, IndicatorBits, PayloadLength):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param CRC:
        :type CRC:
        :param CycleCount:
        :type CycleCount:
        :param FrameID:
        :type FrameID:
        :param IndicatorBits:
        :type IndicatorBits:
        :param PayloadLength:
        :type PayloadLength:
        """
        return self._dllwrap.ConfigureHeader2(
            self._vi,
            Search,
            BusSource,
            CRC,
            CycleCount,
            FrameID,
            IndicatorBits,
            PayloadLength,
        )

    def ReadHeader2(
        self,
        Search,
        BusSource,
        CRCBufferSize,
        CycleCountBufferSize,
        FrameIDBufferSize,
        IndicatorBitsBufferSize,
        PayloadLengthBufferSize,
    ):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param CRCBufferSize:
        :type CRCBufferSize:
        :param CycleCountBufferSize:
        :type CycleCountBufferSize:
        :param FrameIDBufferSize:
        :type FrameIDBufferSize:
        :param IndicatorBitsBufferSize:
        :type IndicatorBitsBufferSize:
        :param PayloadLengthBufferSize:
        :type PayloadLengthBufferSize:
        """
        return self._dllwrap.ReadHeader2(
            self._vi,
            Search,
            BusSource,
            CRCBufferSize,
            CycleCountBufferSize,
            FrameIDBufferSize,
            IndicatorBitsBufferSize,
            PayloadLengthBufferSize,
        )

    def GetCondition16(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition16(self._vi, Search, BusSource)

    def SetCondition16(self, Search, BusSource, Condition):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition16(self._vi, Search, BusSource, Condition)

    def GetDataQualifier8(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataQualifier8(self._vi, Search, BusSource)

    def SetDataQualifier8(self, Search, BusSource, DataQualifier):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataQualifier:
        :type DataQualifier:
        """
        return self._dllwrap.SetDataQualifier8(self._vi, Search, BusSource, DataQualifier)

    def GetDataValue10(self, Search, BusSource, DataValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataValueBufferSize:
        :type DataValueBufferSize:
        """
        return self._dllwrap.GetDataValue10(self._vi, Search, BusSource, DataValueBufferSize)

    def SetDataValue10(self, Search, BusSource, DataValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataValue:
        :type DataValue:
        """
        return self._dllwrap.SetDataValue10(self._vi, Search, BusSource, DataValue)

    def GetDataDirection4(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataDirection4(self._vi, Search, BusSource)

    def SetDataDirection4(self, Search, BusSource, DataDirection):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataDirection:
        :type DataDirection:
        """
        return self._dllwrap.SetDataDirection4(self._vi, Search, BusSource, DataDirection)

    def GetDataSize8(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataSize8(self._vi, Search, BusSource)

    def SetDataSize8(self, Search, BusSource, DataSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param DataSize:
        :type DataSize:
        """
        return self._dllwrap.SetDataSize8(self._vi, Search, BusSource, DataSize)

    def GetFrameType4(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetFrameType4(self._vi, Search, BusSource)

    def SetFrameType4(self, Search, BusSource, FrameType):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param FrameType:
        :type FrameType:
        """
        return self._dllwrap.SetFrameType4(self._vi, Search, BusSource, FrameType)

    def GetAddressMode6(self, Search, BusSource):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetAddressMode6(self._vi, Search, BusSource)

    def SetAddressMode6(self, Search, BusSource, AddressMode):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param AddressMode:
        :type AddressMode:
        """
        return self._dllwrap.SetAddressMode6(self._vi, Search, BusSource, AddressMode)

    def GetAddressValue6(self, Search, BusSource, AddressValueBufferSize):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param AddressValueBufferSize:
        :type AddressValueBufferSize:
        """
        return self._dllwrap.GetAddressValue6(self._vi, Search, BusSource, AddressValueBufferSize)

    def SetAddressValue6(self, Search, BusSource, AddressValue):
        """

        :param Search:
        :type Search:
        :param BusSource:
        :type BusSource:
        :param AddressValue:
        :type AddressValue:
        """
        return self._dllwrap.SetAddressValue6(self._vi, Search, BusSource, AddressValue)

    def GetBLevel(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.GetBLevel(self._vi, Source)

    def SetBLevel(self, Source, BLevel):
        """

        :param Source:
        :type Source:
        :param BLevel:
        :type BLevel:
        """
        return self._dllwrap.SetBLevel(self._vi, Source, BLevel)

    def ConfigureBIndependentParameters(self, Source, Level, UpperThreshold, LowerThreshold):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param UpperThreshold:
        :type UpperThreshold:
        :param LowerThreshold:
        :type LowerThreshold:
        """
        return self._dllwrap.ConfigureBIndependentParameters(self._vi, Source, Level, UpperThreshold, LowerThreshold)

    def ReadBIndependentParameters(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ReadBIndependentParameters(self._vi, Source)

    def ConfigureAIndependentParameters2(self, Source, Level, UpperThreshold, LowerThreshold):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param UpperThreshold:
        :type UpperThreshold:
        :param LowerThreshold:
        :type LowerThreshold:
        """
        return self._dllwrap.ConfigureAIndependentParameters2(self._vi, Source, Level, UpperThreshold, LowerThreshold)

    def ReadAIndependentParameters2(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ReadAIndependentParameters2(self._vi, Source)

    def ConfigureAOnlyTrigger(self, HoldoffTime):
        """

        :param HoldoffTime:
        :type HoldoffTime:
        """
        return self._dllwrap.ConfigureAOnlyTrigger(self._vi, HoldoffTime)

    def ConfigureAThenBAfterEventsTrigger(self, HoldoffTime, Events):
        """

        :param HoldoffTime:
        :type HoldoffTime:
        :param Events:
        :type Events:
        """
        return self._dllwrap.ConfigureAThenBAfterEventsTrigger(self._vi, HoldoffTime, Events)

    def ConfigureAThenBAfterTimeTrigger(self, HoldoffTime, DelayTime):
        """

        :param HoldoffTime:
        :type HoldoffTime:
        :param DelayTime:
        :type DelayTime:
        """
        return self._dllwrap.ConfigureAThenBAfterTimeTrigger(self._vi, HoldoffTime, DelayTime)

    def ReadARFIndependentParameters2(self):
        """"""
        return self._dllwrap.ReadARFIndependentParameters2(self._vi)

    def ConfigureARFIndependentParameters2(self, UpperThreshold, LowerThreshold):
        """

        :param UpperThreshold:
        :type UpperThreshold:
        :param LowerThreshold:
        :type LowerThreshold:
        """
        return self._dllwrap.ConfigureARFIndependentParameters2(self._vi, UpperThreshold, LowerThreshold)

    def Configure4(self, BusSource, BusType):
        """

        :param BusSource:
        :type BusSource:
        :param BusType:
        :type BusType:
        """
        return self._dllwrap.Configure4(self._vi, BusSource, BusType)

    def GetParallelData(self, BusSource, ParallelDataBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param ParallelDataBufferSize:
        :type ParallelDataBufferSize:
        """
        return self._dllwrap.GetParallelData(self._vi, BusSource, ParallelDataBufferSize)

    def SetParallelData(self, BusSource, ParallelData):
        """

        :param BusSource:
        :type BusSource:
        :param ParallelData:
        :type ParallelData:
        """
        return self._dllwrap.SetParallelData(self._vi, BusSource, ParallelData)

    def GetCondition(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition(self._vi, BusSource)

    def SetCondition(self, BusSource, Condition):
        """

        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition(self._vi, BusSource, Condition)

    def GetDataHighValue(self, BusSource, DataHighValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param DataHighValueBufferSize:
        :type DataHighValueBufferSize:
        """
        return self._dllwrap.GetDataHighValue(self._vi, BusSource, DataHighValueBufferSize)

    def SetDataHighValue(self, BusSource, DataHighValue):
        """

        :param BusSource:
        :type BusSource:
        :param DataHighValue:
        :type DataHighValue:
        """
        return self._dllwrap.SetDataHighValue(self._vi, BusSource, DataHighValue)

    def GetDataOffset(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataOffset(self._vi, BusSource)

    def SetDataOffset(self, BusSource, DataOffset):
        """

        :param BusSource:
        :type BusSource:
        :param DataOffset:
        :type DataOffset:
        """
        return self._dllwrap.SetDataOffset(self._vi, BusSource, DataOffset)

    def GetDataQualifier(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataQualifier(self._vi, BusSource)

    def SetDataQualifier(self, BusSource, DataQualifier):
        """

        :param BusSource:
        :type BusSource:
        :param DataQualifier:
        :type DataQualifier:
        """
        return self._dllwrap.SetDataQualifier(self._vi, BusSource, DataQualifier)

    def GetDataValue(self, BusSource, DataValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param DataValueBufferSize:
        :type DataValueBufferSize:
        """
        return self._dllwrap.GetDataValue(self._vi, BusSource, DataValueBufferSize)

    def SetDataValue(self, BusSource, DataValue):
        """

        :param BusSource:
        :type BusSource:
        :param DataValue:
        :type DataValue:
        """
        return self._dllwrap.SetDataValue(self._vi, BusSource, DataValue)

    def GetDataWord(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataWord(self._vi, BusSource)

    def SetDataWord(self, BusSource, DataWord):
        """

        :param BusSource:
        :type BusSource:
        :param DataWord:
        :type DataWord:
        """
        return self._dllwrap.SetDataWord(self._vi, BusSource, DataWord)

    def GetDataSize(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataSize(self._vi, BusSource)

    def SetDataSize(self, BusSource, DataSize):
        """

        :param BusSource:
        :type BusSource:
        :param DataSize:
        :type DataSize:
        """
        return self._dllwrap.SetDataSize(self._vi, BusSource, DataSize)

    def GetCondition2(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition2(self._vi, BusSource)

    def SetCondition2(self, BusSource, Condition):
        """

        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition2(self._vi, BusSource, Condition)

    def GetDataQualifier2(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataQualifier2(self._vi, BusSource)

    def SetDataQualifier2(self, BusSource, DataQualifier):
        """

        :param BusSource:
        :type BusSource:
        :param DataQualifier:
        :type DataQualifier:
        """
        return self._dllwrap.SetDataQualifier2(self._vi, BusSource, DataQualifier)

    def GetDataValue2(self, BusSource, DataValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param DataValueBufferSize:
        :type DataValueBufferSize:
        """
        return self._dllwrap.GetDataValue2(self._vi, BusSource, DataValueBufferSize)

    def SetDataValue2(self, BusSource, DataValue):
        """

        :param BusSource:
        :type BusSource:
        :param DataValue:
        :type DataValue:
        """
        return self._dllwrap.SetDataValue2(self._vi, BusSource, DataValue)

    def GetDataDirection(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataDirection(self._vi, BusSource)

    def SetDataDirection(self, BusSource, DataDirection):
        """

        :param BusSource:
        :type BusSource:
        :param DataDirection:
        :type DataDirection:
        """
        return self._dllwrap.SetDataDirection(self._vi, BusSource, DataDirection)

    def GetFrameType(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetFrameType(self._vi, BusSource)

    def SetFrameType(self, BusSource, FrameType):
        """

        :param BusSource:
        :type BusSource:
        :param FrameType:
        :type FrameType:
        """
        return self._dllwrap.SetFrameType(self._vi, BusSource, FrameType)

    def GetAddressMode(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetAddressMode(self._vi, BusSource)

    def SetAddressMode(self, BusSource, AddressMode):
        """

        :param BusSource:
        :type BusSource:
        :param AddressMode:
        :type AddressMode:
        """
        return self._dllwrap.SetAddressMode(self._vi, BusSource, AddressMode)

    def GetAddressValue(self, BusSource, AddressValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param AddressValueBufferSize:
        :type AddressValueBufferSize:
        """
        return self._dllwrap.GetAddressValue(self._vi, BusSource, AddressValueBufferSize)

    def SetAddressValue(self, BusSource, AddressValue):
        """

        :param BusSource:
        :type BusSource:
        :param AddressValue:
        :type AddressValue:
        """
        return self._dllwrap.SetAddressValue(self._vi, BusSource, AddressValue)

    def GetCondition3(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition3(self._vi, BusSource)

    def SetCondition3(self, BusSource, Condition):
        """

        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition3(self._vi, BusSource, Condition)

    def ConfigureCycleCount(self, BusSource, HighValue, Qualifier, Value):
        """

        :param BusSource:
        :type BusSource:
        :param HighValue:
        :type HighValue:
        :param Qualifier:
        :type Qualifier:
        :param Value:
        :type Value:
        """
        return self._dllwrap.ConfigureCycleCount(self._vi, BusSource, HighValue, Qualifier, Value)

    def ReadCycleCount(self, BusSource, HighValueBufferSize, ValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param HighValueBufferSize:
        :type HighValueBufferSize:
        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.ReadCycleCount(self._vi, BusSource, HighValueBufferSize, ValueBufferSize)

    def ConfigureData(self, BusSource, HighValue, Offset, Qualifier, Size, Value):
        """

        :param BusSource:
        :type BusSource:
        :param HighValue:
        :type HighValue:
        :param Offset:
        :type Offset:
        :param Qualifier:
        :type Qualifier:
        :param Size:
        :type Size:
        :param Value:
        :type Value:
        """
        return self._dllwrap.ConfigureData(self._vi, BusSource, HighValue, Offset, Qualifier, Size, Value)

    def ReadData(self, BusSource, HighValueBufferSize, ValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param HighValueBufferSize:
        :type HighValueBufferSize:
        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.ReadData(self._vi, BusSource, HighValueBufferSize, ValueBufferSize)

    def ConfigureFrameID(self, BusSource, HighValue, Qualifier, Value):
        """

        :param BusSource:
        :type BusSource:
        :param HighValue:
        :type HighValue:
        :param Qualifier:
        :type Qualifier:
        :param Value:
        :type Value:
        """
        return self._dllwrap.ConfigureFrameID(self._vi, BusSource, HighValue, Qualifier, Value)

    def ReadFrameID(self, BusSource, HighValueBufferSize, ValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param HighValueBufferSize:
        :type HighValueBufferSize:
        :param ValueBufferSize:
        :type ValueBufferSize:
        """
        return self._dllwrap.ReadFrameID(self._vi, BusSource, HighValueBufferSize, ValueBufferSize)

    def ConfigureHeader(self, BusSource, CRC, CycleCount, FrameID, IndicatorBits, PayloadLength):
        """

        :param BusSource:
        :type BusSource:
        :param CRC:
        :type CRC:
        :param CycleCount:
        :type CycleCount:
        :param FrameID:
        :type FrameID:
        :param IndicatorBits:
        :type IndicatorBits:
        :param PayloadLength:
        :type PayloadLength:
        """
        return self._dllwrap.ConfigureHeader(
            self._vi, BusSource, CRC, CycleCount, FrameID, IndicatorBits, PayloadLength
        )

    def ReadHeader(
        self,
        BusSource,
        CRCBufferSize,
        CycleCountBufferSize,
        FrameIDBufferSize,
        IndicatorBitsBufferSize,
        PayloadLengthBufferSize,
    ):
        """

        :param BusSource:
        :type BusSource:
        :param CRCBufferSize:
        :type CRCBufferSize:
        :param CycleCountBufferSize:
        :type CycleCountBufferSize:
        :param FrameIDBufferSize:
        :type FrameIDBufferSize:
        :param IndicatorBitsBufferSize:
        :type IndicatorBitsBufferSize:
        :param PayloadLengthBufferSize:
        :type PayloadLengthBufferSize:
        """
        return self._dllwrap.ReadHeader(
            self._vi,
            BusSource,
            CRCBufferSize,
            CycleCountBufferSize,
            FrameIDBufferSize,
            IndicatorBitsBufferSize,
            PayloadLengthBufferSize,
        )

    def GetEofType(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetEofType(self._vi, BusSource)

    def SetEofType(self, BusSource, EOFType):
        """

        :param BusSource:
        :type BusSource:
        :param EOFType:
        :type EOFType:
        """
        return self._dllwrap.SetEofType(self._vi, BusSource, EOFType)

    def GetErrorType(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetErrorType(self._vi, BusSource)

    def SetErrorType(self, BusSource, ErrorType):
        """

        :param BusSource:
        :type BusSource:
        :param ErrorType:
        :type ErrorType:
        """
        return self._dllwrap.SetErrorType(self._vi, BusSource, ErrorType)

    def GetFrameType2(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetFrameType2(self._vi, BusSource)

    def SetFrameType2(self, BusSource, FrameType):
        """

        :param BusSource:
        :type BusSource:
        :param FrameType:
        :type FrameType:
        """
        return self._dllwrap.SetFrameType2(self._vi, BusSource, FrameType)

    def GetDataSize2(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataSize2(self._vi, BusSource)

    def SetDataSize2(self, BusSource, DataSize):
        """

        :param BusSource:
        :type BusSource:
        :param DataSize:
        :type DataSize:
        """
        return self._dllwrap.SetDataSize2(self._vi, BusSource, DataSize)

    def GetDataValue3(self, BusSource, DataValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param DataValueBufferSize:
        :type DataValueBufferSize:
        """
        return self._dllwrap.GetDataValue3(self._vi, BusSource, DataValueBufferSize)

    def SetDataValue3(self, BusSource, DataValue):
        """

        :param BusSource:
        :type BusSource:
        :param DataValue:
        :type DataValue:
        """
        return self._dllwrap.SetDataValue3(self._vi, BusSource, DataValue)

    def GetAddressValue2(self, BusSource, AddressValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param AddressValueBufferSize:
        :type AddressValueBufferSize:
        """
        return self._dllwrap.GetAddressValue2(self._vi, BusSource, AddressValueBufferSize)

    def SetAddressValue2(self, BusSource, AddressValue):
        """

        :param BusSource:
        :type BusSource:
        :param AddressValue:
        :type AddressValue:
        """
        return self._dllwrap.SetAddressValue2(self._vi, BusSource, AddressValue)

    def GetDataDirection2(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataDirection2(self._vi, BusSource)

    def SetDataDirection2(self, BusSource, DataDirection):
        """

        :param BusSource:
        :type BusSource:
        :param DataDirection:
        :type DataDirection:
        """
        return self._dllwrap.SetDataDirection2(self._vi, BusSource, DataDirection)

    def GetCondition4(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition4(self._vi, BusSource)

    def SetCondition4(self, BusSource, Condition):
        """

        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition4(self._vi, BusSource, Condition)

    def GetAddressMode2(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetAddressMode2(self._vi, BusSource)

    def SetAddressMode2(self, BusSource, AddressMode):
        """

        :param BusSource:
        :type BusSource:
        :param AddressMode:
        :type AddressMode:
        """
        return self._dllwrap.SetAddressMode2(self._vi, BusSource, AddressMode)

    def GetDataValue4(self, BusSource, DataValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param DataValueBufferSize:
        :type DataValueBufferSize:
        """
        return self._dllwrap.GetDataValue4(self._vi, BusSource, DataValueBufferSize)

    def SetDataValue4(self, BusSource, DataValue):
        """

        :param BusSource:
        :type BusSource:
        :param DataValue:
        :type DataValue:
        """
        return self._dllwrap.SetDataValue4(self._vi, BusSource, DataValue)

    def GetDataQualifier3(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataQualifier3(self._vi, BusSource)

    def SetDataQualifier3(self, BusSource, DataQualifier):
        """

        :param BusSource:
        :type BusSource:
        :param DataQualifier:
        :type DataQualifier:
        """
        return self._dllwrap.SetDataQualifier3(self._vi, BusSource, DataQualifier)

    def GetDataHighValue2(self, BusSource, DataHighValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param DataHighValueBufferSize:
        :type DataHighValueBufferSize:
        """
        return self._dllwrap.GetDataHighValue2(self._vi, BusSource, DataHighValueBufferSize)

    def SetDataHighValue2(self, BusSource, DataHighValue):
        """

        :param BusSource:
        :type BusSource:
        :param DataHighValue:
        :type DataHighValue:
        """
        return self._dllwrap.SetDataHighValue2(self._vi, BusSource, DataHighValue)

    def GetCondition5(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition5(self._vi, BusSource)

    def SetCondition5(self, BusSource, Condition):
        """

        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition5(self._vi, BusSource, Condition)

    def GetDataSize3(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataSize3(self._vi, BusSource)

    def SetDataSize3(self, BusSource, DataSize):
        """

        :param BusSource:
        :type BusSource:
        :param DataSize:
        :type DataSize:
        """
        return self._dllwrap.SetDataSize3(self._vi, BusSource, DataSize)

    def GetErrorType2(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetErrorType2(self._vi, BusSource)

    def SetErrorType2(self, BusSource, ErrorType):
        """

        :param BusSource:
        :type BusSource:
        :param ErrorType:
        :type ErrorType:
        """
        return self._dllwrap.SetErrorType2(self._vi, BusSource, ErrorType)

    def GetIdentifierValue(self, BusSource, IdentifierValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param IdentifierValueBufferSize:
        :type IdentifierValueBufferSize:
        """
        return self._dllwrap.GetIdentifierValue(self._vi, BusSource, IdentifierValueBufferSize)

    def SetIdentifierValue(self, BusSource, IdentifierValue):
        """

        :param BusSource:
        :type BusSource:
        :param IdentifierValue:
        :type IdentifierValue:
        """
        return self._dllwrap.SetIdentifierValue(self._vi, BusSource, IdentifierValue)

    def GetCondition6(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition6(self._vi, BusSource)

    def SetCondition6(self, BusSource, Condition):
        """

        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition6(self._vi, BusSource, Condition)

    def GetRxDataSize(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetRxDataSize(self._vi, BusSource)

    def SetRxDataSize(self, BusSource, RXDataSize):
        """

        :param BusSource:
        :type BusSource:
        :param RXDataSize:
        :type RXDataSize:
        """
        return self._dllwrap.SetRxDataSize(self._vi, BusSource, RXDataSize)

    def GetRxDataValue(self, BusSource, RXDataValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param RXDataValueBufferSize:
        :type RXDataValueBufferSize:
        """
        return self._dllwrap.GetRxDataValue(self._vi, BusSource, RXDataValueBufferSize)

    def SetRxDataValue(self, BusSource, RXDataValue):
        """

        :param BusSource:
        :type BusSource:
        :param RXDataValue:
        :type RXDataValue:
        """
        return self._dllwrap.SetRxDataValue(self._vi, BusSource, RXDataValue)

    def GetTxDataSize(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetTxDataSize(self._vi, BusSource)

    def SetTxDataSize(self, BusSource, TXDataSize):
        """

        :param BusSource:
        :type BusSource:
        :param TXDataSize:
        :type TXDataSize:
        """
        return self._dllwrap.SetTxDataSize(self._vi, BusSource, TXDataSize)

    def GetTxDataValue(self, BusSource, TXDataValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param TXDataValueBufferSize:
        :type TXDataValueBufferSize:
        """
        return self._dllwrap.GetTxDataValue(self._vi, BusSource, TXDataValueBufferSize)

    def SetTxDataValue(self, BusSource, TXDataValue):
        """

        :param BusSource:
        :type BusSource:
        :param TXDataValue:
        :type TXDataValue:
        """
        return self._dllwrap.SetTxDataValue(self._vi, BusSource, TXDataValue)

    def GetCondition7(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition7(self._vi, BusSource)

    def SetCondition7(self, BusSource, Condition):
        """

        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition7(self._vi, BusSource, Condition)

    def GetRxDataValue2(self, BusSource, RXDataValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param RXDataValueBufferSize:
        :type RXDataValueBufferSize:
        """
        return self._dllwrap.GetRxDataValue2(self._vi, BusSource, RXDataValueBufferSize)

    def SetRxDataValue2(self, BusSource, RXDataValue):
        """

        :param BusSource:
        :type BusSource:
        :param RXDataValue:
        :type RXDataValue:
        """
        return self._dllwrap.SetRxDataValue2(self._vi, BusSource, RXDataValue)

    def GetTxDataSize2(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetTxDataSize2(self._vi, BusSource)

    def SetTxDataSize2(self, BusSource, TXDataSize):
        """

        :param BusSource:
        :type BusSource:
        :param TXDataSize:
        :type TXDataSize:
        """
        return self._dllwrap.SetTxDataSize2(self._vi, BusSource, TXDataSize)

    def GetTxDataValue2(self, BusSource, TXDataValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param TXDataValueBufferSize:
        :type TXDataValueBufferSize:
        """
        return self._dllwrap.GetTxDataValue2(self._vi, BusSource, TXDataValueBufferSize)

    def SetTxDataValue2(self, BusSource, TXDataValue):
        """

        :param BusSource:
        :type BusSource:
        :param TXDataValue:
        :type TXDataValue:
        """
        return self._dllwrap.SetTxDataValue2(self._vi, BusSource, TXDataValue)

    def GetCondition8(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetCondition8(self._vi, BusSource)

    def SetCondition8(self, BusSource, Condition):
        """

        :param BusSource:
        :type BusSource:
        :param Condition:
        :type Condition:
        """
        return self._dllwrap.SetCondition8(self._vi, BusSource, Condition)

    def GetDataHighValue3(self, BusSource, DataHighValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param DataHighValueBufferSize:
        :type DataHighValueBufferSize:
        """
        return self._dllwrap.GetDataHighValue3(self._vi, BusSource, DataHighValueBufferSize)

    def SetDataHighValue3(self, BusSource, DataHighValue):
        """

        :param BusSource:
        :type BusSource:
        :param DataHighValue:
        :type DataHighValue:
        """
        return self._dllwrap.SetDataHighValue3(self._vi, BusSource, DataHighValue)

    def GetDataOffset2(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataOffset2(self._vi, BusSource)

    def SetDataOffset2(self, BusSource, DataOffset):
        """

        :param BusSource:
        :type BusSource:
        :param DataOffset:
        :type DataOffset:
        """
        return self._dllwrap.SetDataOffset2(self._vi, BusSource, DataOffset)

    def GetDataQualifier4(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataQualifier4(self._vi, BusSource)

    def SetDataQualifier4(self, BusSource, DataQualifier):
        """

        :param BusSource:
        :type BusSource:
        :param DataQualifier:
        :type DataQualifier:
        """
        return self._dllwrap.SetDataQualifier4(self._vi, BusSource, DataQualifier)

    def GetDataValue5(self, BusSource, DataValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param DataValueBufferSize:
        :type DataValueBufferSize:
        """
        return self._dllwrap.GetDataValue5(self._vi, BusSource, DataValueBufferSize)

    def SetDataValue5(self, BusSource, DataValue):
        """

        :param BusSource:
        :type BusSource:
        :param DataValue:
        :type DataValue:
        """
        return self._dllwrap.SetDataValue5(self._vi, BusSource, DataValue)

    def GetDataSize4(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetDataSize4(self._vi, BusSource)

    def SetDataSize4(self, BusSource, DataSize):
        """

        :param BusSource:
        :type BusSource:
        :param DataSize:
        :type DataSize:
        """
        return self._dllwrap.SetDataSize4(self._vi, BusSource, DataSize)

    def GetAddressValue3(self, BusSource, AddressValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param AddressValueBufferSize:
        :type AddressValueBufferSize:
        """
        return self._dllwrap.GetAddressValue3(self._vi, BusSource, AddressValueBufferSize)

    def SetAddressValue3(self, BusSource, AddressValue):
        """

        :param BusSource:
        :type BusSource:
        :param AddressValue:
        :type AddressValue:
        """
        return self._dllwrap.SetAddressValue3(self._vi, BusSource, AddressValue)

    def GetAddressType2(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetAddressType2(self._vi, BusSource)

    def SetAddressType2(self, BusSource, AddressType):
        """

        :param BusSource:
        :type BusSource:
        :param AddressType:
        :type AddressType:
        """
        return self._dllwrap.SetAddressType2(self._vi, BusSource, AddressType)

    def GetAddressMode3(self, BusSource, AddressModeBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param AddressModeBufferSize:
        :type AddressModeBufferSize:
        """
        return self._dllwrap.GetAddressMode3(self._vi, BusSource, AddressModeBufferSize)

    def SetAddressMode3(self, BusSource, AddressMode):
        """

        :param BusSource:
        :type BusSource:
        :param AddressMode:
        :type AddressMode:
        """
        return self._dllwrap.SetAddressMode3(self._vi, BusSource, AddressMode)

    def GetEndPointValue2(self, BusSource, EndPointValueBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param EndPointValueBufferSize:
        :type EndPointValueBufferSize:
        """
        return self._dllwrap.GetEndPointValue2(self._vi, BusSource, EndPointValueBufferSize)

    def SetEndPointValue2(self, BusSource, EndPointValue):
        """

        :param BusSource:
        :type BusSource:
        :param EndPointValue:
        :type EndPointValue:
        """
        return self._dllwrap.SetEndPointValue2(self._vi, BusSource, EndPointValue)

    def GetErrorType3(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetErrorType3(self._vi, BusSource)

    def SetErrorType3(self, BusSource, ErrorType):
        """

        :param BusSource:
        :type BusSource:
        :param ErrorType:
        :type ErrorType:
        """
        return self._dllwrap.SetErrorType3(self._vi, BusSource, ErrorType)

    def GetHandshakeType(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetHandshakeType(self._vi, BusSource)

    def SetHandshakeType(self, BusSource, HandshakeType):
        """

        :param BusSource:
        :type BusSource:
        :param HandshakeType:
        :type HandshakeType:
        """
        return self._dllwrap.SetHandshakeType(self._vi, BusSource, HandshakeType)

    def GetSofFrameNumber(self, BusSource, SOFFrameNumberBufferSize):
        """

        :param BusSource:
        :type BusSource:
        :param SOFFrameNumberBufferSize:
        :type SOFFrameNumberBufferSize:
        """
        return self._dllwrap.GetSofFrameNumber(self._vi, BusSource, SOFFrameNumberBufferSize)

    def SetSofFrameNumber(self, BusSource, SOFFrameNumber):
        """

        :param BusSource:
        :type BusSource:
        :param SOFFrameNumber:
        :type SOFFrameNumber:
        """
        return self._dllwrap.SetSofFrameNumber(self._vi, BusSource, SOFFrameNumber)

    def GetSpecialType(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetSpecialType(self._vi, BusSource)

    def SetSpecialType(self, BusSource, SpecialType):
        """

        :param BusSource:
        :type BusSource:
        :param SpecialType:
        :type SpecialType:
        """
        return self._dllwrap.SetSpecialType(self._vi, BusSource, SpecialType)

    def GetTokenType(self, BusSource):
        """

        :param BusSource:
        :type BusSource:
        """
        return self._dllwrap.GetTokenType(self._vi, BusSource)

    def SetTokenType(self, BusSource, TokenType):
        """

        :param BusSource:
        :type BusSource:
        :param TokenType:
        :type TokenType:
        """
        return self._dllwrap.SetTokenType(self._vi, BusSource, TokenType)

    def Read4(self):
        """"""
        return self._dllwrap.Read4(self._vi)

    def Configure16(self, Source, Level, Slope, Coupling):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param Slope:
        :type Slope:
        :param Coupling:
        :type Coupling:
        """
        return self._dllwrap.Configure16(self._vi, Source, Level, Slope, Coupling)

    def ConfigureLevelTo50Percent(self):
        """"""
        return self._dllwrap.ConfigureLevelTo50Percent(self._vi)

    def Configure5(self):
        """"""
        return self._dllwrap.Configure5(self._vi)

    def ConfigureSource(self, Source, Input, Threshold):
        """

        :param Source:
        :type Source:
        :param Input:
        :type Input:
        :param Threshold:
        :type Threshold:
        """
        return self._dllwrap.ConfigureSource(self._vi, Source, Input, Threshold)

    def ReadSource(self, Source):
        """

        :param Source:
        :type Source:
        """
        return self._dllwrap.ReadSource(self._vi, Source)

    def ConfigurePattern(self, Condition, LessLimit, MoreLimit, LogicOperatorType):
        """

        :param Condition:
        :type Condition:
        :param LessLimit:
        :type LessLimit:
        :param MoreLimit:
        :type MoreLimit:
        :param LogicOperatorType:
        :type LogicOperatorType:
        """
        return self._dllwrap.ConfigurePattern(self._vi, Condition, LessLimit, MoreLimit, LogicOperatorType)

    def ReadPattern(self):
        """"""
        return self._dllwrap.ReadPattern(self._vi)

    def ConfigureClock(self, Source, EdgeType):
        """

        :param Source:
        :type Source:
        :param EdgeType:
        :type EdgeType:
        """
        return self._dllwrap.ConfigureClock(self._vi, Source, EdgeType)

    def ReadClock(self):
        """"""
        return self._dllwrap.ReadClock(self._vi)

    def ConfigureRF(self, Input, Threshold):
        """

        :param Input:
        :type Input:
        :param Threshold:
        :type Threshold:
        """
        return self._dllwrap.ConfigureRF(self._vi, Input, Threshold)

    def ReadRF(self):
        """"""
        return self._dllwrap.ReadRF(self._vi)

    def Configure6(self):
        """"""
        return self._dllwrap.Configure6(self._vi)

    def Configure7(self):
        """"""
        return self._dllwrap.Configure7(self._vi)

    def Configure8(self):
        """"""
        return self._dllwrap.Configure8(self._vi)

    def Configure9(self):
        """"""
        return self._dllwrap.Configure9(self._vi)

    def Configure10(self, Source, Level, Slope, Coupling):
        """

        :param Source:
        :type Source:
        :param Level:
        :type Level:
        :param Slope:
        :type Slope:
        :param Coupling:
        :type Coupling:
        """
        return self._dllwrap.Configure10(self._vi, Source, Level, Slope, Coupling)

    def Read5(self):
        """"""
        return self._dllwrap.Read5(self._vi)

    def SetAUXInTekVPIProbeAutoZero(self):
        """"""
        return self._dllwrap.SetAUXInTekVPIProbeAutoZero(self._vi)

    def SetAUXInTekVPIProbeCommand(self, Command, State):
        """

        :param Command:
        :type Command:
        :param State:
        :type State:
        """
        return self._dllwrap.SetAUXInTekVPIProbeCommand(self._vi, Command, State)

    def SetAUXInTekVPIProbeDegauss(self):
        """"""
        return self._dllwrap.SetAUXInTekVPIProbeDegauss(self._vi)

    def SetAllDeskewsToRecommendedValues(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SetAllDeskewsToRecommendedValues(self._vi, Channel)

    def InvertWaveform(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.InvertWaveform(self._vi, Channel)

    def SetTekVPIProbeAutoZero(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SetTekVPIProbeAutoZero(self._vi, Channel)

    def SetTekVPIProbeCommand(self, Channel, Command, State):
        """

        :param Channel:
        :type Channel:
        :param Command:
        :type Command:
        :param State:
        :type State:
        """
        return self._dllwrap.SetTekVPIProbeCommand(self._vi, Channel, Command, State)

    def SetTekVPIProbeDegauss(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.SetTekVPIProbeDegauss(self._vi, Channel)

    def Configure13(
        self,
        Channel,
        Position,
        Scale,
        Offset,
        Deskew,
        Coupling,
        Termination,
        Bandwidth,
        DisplayState,
    ):
        """

        :param Channel:
        :type Channel:
        :param Position:
        :type Position:
        :param Scale:
        :type Scale:
        :param Offset:
        :type Offset:
        :param Deskew:
        :type Deskew:
        :param Coupling:
        :type Coupling:
        :param Termination:
        :type Termination:
        :param Bandwidth:
        :type Bandwidth:
        :param DisplayState:
        :type DisplayState:
        """
        return self._dllwrap.Configure13(
            self._vi,
            Channel,
            Position,
            Scale,
            Offset,
            Deskew,
            Coupling,
            Termination,
            Bandwidth,
            DisplayState,
        )

    def Read7(self, Channel):
        """

        :param Channel:
        :type Channel:
        """
        return self._dllwrap.Read7(self._vi, Channel)

    def ReadProbeDetails(self, Channel, TypeBufferSize, SerialNumberBufferSize, UnitBufferSize):
        """

        :param Channel:
        :type Channel:
        :param TypeBufferSize:
        :type TypeBufferSize:
        :param SerialNumberBufferSize:
        :type SerialNumberBufferSize:
        :param UnitBufferSize:
        :type UnitBufferSize:
        """
        return self._dllwrap.ReadProbeDetails(self._vi, Channel, TypeBufferSize, SerialNumberBufferSize, UnitBufferSize)

    def GetReferenceName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetReferenceName(self._vi, Index, NameBufferSize)

    def Configure12(
        self,
        Reference,
        Position,
        VerticalScale,
        HorizontalScale,
        DisplayState,
        HorizontalDelayTime,
    ):
        """

        :param Reference:
        :type Reference:
        :param Position:
        :type Position:
        :param VerticalScale:
        :type VerticalScale:
        :param HorizontalScale:
        :type HorizontalScale:
        :param DisplayState:
        :type DisplayState:
        :param HorizontalDelayTime:
        :type HorizontalDelayTime:
        """
        return self._dllwrap.Configure12(
            self._vi,
            Reference,
            Position,
            VerticalScale,
            HorizontalScale,
            DisplayState,
            HorizontalDelayTime,
        )

    def Read6(self, Reference):
        """

        :param Reference:
        :type Reference:
        """
        return self._dllwrap.Read6(self._vi, Reference)

    def GetDateTime(self, Reference, DateBufferSize, TimeBufferSize):
        """

        :param Reference:
        :type Reference:
        :param DateBufferSize:
        :type DateBufferSize:
        :param TimeBufferSize:
        :type TimeBufferSize:
        """
        return self._dllwrap.GetDateTime(self._vi, Reference, DateBufferSize, TimeBufferSize)

    def GetDigitalChannelName(self, Index, NameBufferSize):
        """

        :param Index:
        :type Index:
        :param NameBufferSize:
        :type NameBufferSize:
        """
        return self._dllwrap.GetDigitalChannelName(self._vi, Index, NameBufferSize)

    def CopyWaveformToClipboard(self, WaveformSource, Start, Stop):
        """

        :param WaveformSource:
        :type WaveformSource:
        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        """
        return self._dllwrap.CopyWaveformToClipboard(self._vi, WaveformSource, Start, Stop)

    def FetchWaveform2(self, WaveformSource, WaveformArrayBufferSize):
        """

        :param WaveformSource:
        :type WaveformSource:
        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        """
        return self._dllwrap.FetchWaveform2(self._vi, WaveformSource, WaveformArrayBufferSize)

    def FetchWaveformDigitizedLevel(self, WaveformSource, WaveformArrayBufferSize):
        """

        :param WaveformSource:
        :type WaveformSource:
        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        """
        return self._dllwrap.FetchWaveformDigitizedLevel(self._vi, WaveformSource, WaveformArrayBufferSize)

    def FetchWaveformHighResolution(self, WaveformSource, WaveformArrayBufferSize):
        """

        :param WaveformSource:
        :type WaveformSource:
        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        """
        return self._dllwrap.FetchWaveformHighResolution(self._vi, WaveformSource, WaveformArrayBufferSize)

    def FetchWaveformMinMax(self, WaveformSource, MinWaveformBufferSize, MaxWaveformBufferSize):
        """

        :param WaveformSource:
        :type WaveformSource:
        :param MinWaveformBufferSize:
        :type MinWaveformBufferSize:
        :param MaxWaveformBufferSize:
        :type MaxWaveformBufferSize:
        """
        return self._dllwrap.FetchWaveformMinMax(self._vi, WaveformSource, MinWaveformBufferSize, MaxWaveformBufferSize)

    def FetchWaveformStartStop(self, WaveformSource, Start, Stop, WaveformArrayBufferSize):
        """

        :param WaveformSource:
        :type WaveformSource:
        :param Start:
        :type Start:
        :param Stop:
        :type Stop:
        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        """
        return self._dllwrap.FetchWaveformStartStop(self._vi, WaveformSource, Start, Stop, WaveformArrayBufferSize)

    def FetchWaveformWithinCursor(self, WaveformSource, WaveformArrayBufferSize):
        """

        :param WaveformSource:
        :type WaveformSource:
        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        """
        return self._dllwrap.FetchWaveformWithinCursor(self._vi, WaveformSource, WaveformArrayBufferSize)

    def FetchWaveformWithinZoom(self, WaveformSource, WaveformArrayBufferSize):
        """

        :param WaveformSource:
        :type WaveformSource:
        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        """
        return self._dllwrap.FetchWaveformWithinZoom(self._vi, WaveformSource, WaveformArrayBufferSize)

    def InitiateAcquisition2(self):
        """"""
        return self._dllwrap.InitiateAcquisition2(self._vi)

    def IsWaveformElementInvalid(self, Element):
        """

        :param Element:
        :type Element:
        """
        return self._dllwrap.IsWaveformElementInvalid(self._vi, Element)

    def ReadWaveform2(self, WaveformSource, MaxTimeMiliseconds, WaveformArrayBufferSize):
        """

        :param WaveformSource:
        :type WaveformSource:
        :param MaxTimeMiliseconds:
        :type MaxTimeMiliseconds:
        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        """
        return self._dllwrap.ReadWaveform2(self._vi, WaveformSource, MaxTimeMiliseconds, WaveformArrayBufferSize)

    def ReadWaveformMinMax(
        self,
        WaveformSource,
        MaxTimeMiliseconds,
        MinWaveformBufferSize,
        MaxWaveformBufferSize,
    ):
        """

        :param WaveformSource:
        :type WaveformSource:
        :param MaxTimeMiliseconds:
        :type MaxTimeMiliseconds:
        :param MinWaveformBufferSize:
        :type MinWaveformBufferSize:
        :param MaxWaveformBufferSize:
        :type MaxWaveformBufferSize:
        """
        return self._dllwrap.ReadWaveformMinMax(
            self._vi,
            WaveformSource,
            MaxTimeMiliseconds,
            MinWaveformBufferSize,
            MaxWaveformBufferSize,
        )

    def SaveWaveformToFile2(self, WaveformSource, FileName, FileFormat):
        """

        :param WaveformSource:
        :type WaveformSource:
        :param FileName:
        :type FileName:
        :param FileFormat:
        :type FileFormat:
        """
        return self._dllwrap.SaveWaveformToFile2(self._vi, WaveformSource, FileName, FileFormat)

    def WriteWaveformToReference(self, WaveformReference, WaveformArrayBufferSize, InitialX, XIncrement):
        """

        :param WaveformReference:
        :type WaveformReference:
        :param WaveformArrayBufferSize:
        :type WaveformArrayBufferSize:
        :param InitialX:
        :type InitialX:
        :param XIncrement:
        :type XIncrement:
        """
        return self._dllwrap.WriteWaveformToReference(
            self._vi, WaveformReference, WaveformArrayBufferSize, InitialX, XIncrement
        )

    def GetAvailableDataCompositions(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.GetAvailableDataCompositions(self._vi, ValBufferSize)

    def GetAvailableFilterVuFrequencies(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.GetAvailableFilterVuFrequencies(self._vi, ValBufferSize)

    def GetOPC(self):
        """"""
        return self._dllwrap.GetOPC(self._vi)

    def Query(self, Command, ValBufferSize):
        """

        :param Command:
        :type Command:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.Query(self._vi, Command, ValBufferSize)

    def ReadPartialString(self, Length, ValBufferSize):
        """

        :param Length:
        :type Length:
        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadPartialString(self._vi, Length, ValBufferSize)

    def ReadString(self, ValBufferSize):
        """

        :param ValBufferSize:
        :type ValBufferSize:
        """
        return self._dllwrap.ReadString(self._vi, ValBufferSize)

    def WriteString(self, Command):
        """

        :param Command:
        :type Command:
        """
        return self._dllwrap.WriteString(self._vi, Command)

    def CreateMark(self, Mark):
        """

        :param Mark:
        :type Mark:
        """
        return self._dllwrap.CreateMark(self._vi, Mark)

    def DeleteMark(self, Mark):
        """

        :param Mark:
        :type Mark:
        """
        return self._dllwrap.DeleteMark(self._vi, Mark)

    def MoveZoomToMark(self, Mark):
        """

        :param Mark:
        :type Mark:
        """
        return self._dllwrap.MoveZoomToMark(self._vi, Mark)

    def Configure14(self, Source, Type):
        """

        :param Source:
        :type Source:
        :param Type:
        :type Type:
        """
        return self._dllwrap.Configure14(self._vi, Source, Type)

    def ConfigureDelay2(self, Source1, Source2, Direction, Edge1, Edge2):
        """

        :param Source1:
        :type Source1:
        :param Source2:
        :type Source2:
        :param Direction:
        :type Direction:
        :param Edge1:
        :type Edge1:
        :param Edge2:
        :type Edge2:
        """
        return self._dllwrap.ConfigureDelay2(self._vi, Source1, Source2, Direction, Edge1, Edge2)

    def ConfigurePhase(self, Source1, Source2):
        """

        :param Source1:
        :type Source1:
        :param Source2:
        :type Source2:
        """
        return self._dllwrap.ConfigurePhase(self._vi, Source1, Source2)

    def ConfigureReferenceLevel(self, Method, Unit, High, Low, Mid, Mid2):
        """

        :param Method:
        :type Method:
        :param Unit:
        :type Unit:
        :param High:
        :type High:
        :param Low:
        :type Low:
        :param Mid:
        :type Mid:
        :param Mid2:
        :type Mid2:
        """
        return self._dllwrap.ConfigureReferenceLevel(self._vi, Method, Unit, High, Low, Mid, Mid2)

    def Read8(self):
        """"""
        return self._dllwrap.Read8(self._vi)

    def ReadReferenceLevel(self):
        """"""
        return self._dllwrap.ReadReferenceLevel(self._vi)

    def ReadValue(self, Source1, Source2, Direction, Edge1, Edge2, Type, UnitBufferSize):
        """

        :param Source1:
        :type Source1:
        :param Source2:
        :type Source2:
        :param Direction:
        :type Direction:
        :param Edge1:
        :type Edge1:
        :param Edge2:
        :type Edge2:
        :param Type:
        :type Type:
        :param UnitBufferSize:
        :type UnitBufferSize:
        """
        return self._dllwrap.ReadValue(self._vi, Source1, Source2, Direction, Edge1, Edge2, Type, UnitBufferSize)

    def Calibrate(self):
        """"""
        return self._dllwrap.Calibrate(self._vi)

    def SelfTest(self, TestMessageBufferSize):
        """

        :param TestMessageBufferSize:
        :type TestMessageBufferSize:
        """
        return self._dllwrap.SelfTest(self._vi, TestMessageBufferSize)

    def ConfigureRefLevel(self, ReferenceLevelType, ReferenceLevelHysteresis, Mid):
        """

        :param ReferenceLevelType:
        :type ReferenceLevelType:
        :param ReferenceLevelHysteresis:
        :type ReferenceLevelHysteresis:
        :param Mid:
        :type Mid:
        """
        return self._dllwrap.ConfigureRefLevel(self._vi, ReferenceLevelType, ReferenceLevelHysteresis, Mid)

    def ReadRefLevel(self):
        """"""
        return self._dllwrap.ReadRefLevel(self._vi)

    def SetDefaultRefLevel(self, ReferenceLevelType):
        """

        :param ReferenceLevelType:
        :type ReferenceLevelType:
        """
        return self._dllwrap.SetDefaultRefLevel(self._vi, ReferenceLevelType)

    def GetRefLevelHigh(self, ReferenceLevelType):
        """

        :param ReferenceLevelType:
        :type ReferenceLevelType:
        """
        return self._dllwrap.GetRefLevelHigh(self._vi, ReferenceLevelType)

    def SetRefLevelHigh(self, ReferenceLevelType, ReferenceLevelHigh):
        """

        :param ReferenceLevelType:
        :type ReferenceLevelType:
        :param ReferenceLevelHigh:
        :type ReferenceLevelHigh:
        """
        return self._dllwrap.SetRefLevelHigh(self._vi, ReferenceLevelType, ReferenceLevelHigh)

    def GetRefLevelLow(self, ReferenceLevelType):
        """

        :param ReferenceLevelType:
        :type ReferenceLevelType:
        """
        return self._dllwrap.GetRefLevelLow(self._vi, ReferenceLevelType)

    def SetRefLevelLow(self, ReferenceLevelType, RefLevelLow):
        """

        :param ReferenceLevelType:
        :type ReferenceLevelType:
        :param RefLevelLow:
        :type RefLevelLow:
        """
        return self._dllwrap.SetRefLevelLow(self._vi, ReferenceLevelType, RefLevelLow)

    def GetRefLevelMid(self, ReferenceLevelType, Number):
        """

        :param ReferenceLevelType:
        :type ReferenceLevelType:
        :param Number:
        :type Number:
        """
        return self._dllwrap.GetRefLevelMid(self._vi, ReferenceLevelType, Number)

    def SetRefLevelMid(self, ReferenceLevelType, Number, RefLevelMid):
        """

        :param ReferenceLevelType:
        :type ReferenceLevelType:
        :param Number:
        :type Number:
        :param RefLevelMid:
        :type RefLevelMid:
        """
        return self._dllwrap.SetRefLevelMid(self._vi, ReferenceLevelType, Number, RefLevelMid)

    def ResetStatistics(self):
        """"""
        return self._dllwrap.ResetStatistics(self._vi)

    def GetMeasDisplayState(self, DisplayMeasurement):
        """

        :param DisplayMeasurement:
        :type DisplayMeasurement:
        """
        return self._dllwrap.GetMeasDisplayState(self._vi, DisplayMeasurement)

    def SetMeasDisplayState(self, DisplayMeasurement, MeasDisplayState):
        """

        :param DisplayMeasurement:
        :type DisplayMeasurement:
        :param MeasDisplayState:
        :type MeasDisplayState:
        """
        return self._dllwrap.SetMeasDisplayState(self._vi, DisplayMeasurement, MeasDisplayState)

    def GetRefLevelLowVoltage(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.GetRefLevelLowVoltage(self._vi, Type)

    def SetRefLevelLowVoltage(self, Type, RefLevelLowVoltage):
        """

        :param Type:
        :type Type:
        :param RefLevelLowVoltage:
        :type RefLevelLowVoltage:
        """
        return self._dllwrap.SetRefLevelLowVoltage(self._vi, Type, RefLevelLowVoltage)

    def GetRefLevelLowCurrent(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.GetRefLevelLowCurrent(self._vi, Type)

    def SetRefLevelLowCurrent(self, Type, RefLevelLowCurrent):
        """

        :param Type:
        :type Type:
        :param RefLevelLowCurrent:
        :type RefLevelLowCurrent:
        """
        return self._dllwrap.SetRefLevelLowCurrent(self._vi, Type, RefLevelLowCurrent)

    def ConfigureGating(self, Polarity, TurnOn):
        """

        :param Polarity:
        :type Polarity:
        :param TurnOn:
        :type TurnOn:
        """
        return self._dllwrap.ConfigureGating(self._vi, Polarity, TurnOn)

    def ReadGating(self):
        """"""
        return self._dllwrap.ReadGating(self._vi)

    def ReadTOffLosses(self, Type, Mean, Min, Max):
        """

        :param Type:
        :type Type:
        :param Mean:
        :type Mean:
        :param Min:
        :type Min:
        :param Max:
        :type Max:
        """
        return self._dllwrap.ReadTOffLosses(self._vi, Type, Mean, Min, Max)

    def ReadTOnLosses(self, Type, Mean, Min, Max):
        """

        :param Type:
        :type Type:
        :param Mean:
        :type Mean:
        :param Min:
        :type Min:
        :param Max:
        :type Max:
        """
        return self._dllwrap.ReadTOnLosses(self._vi, Type, Mean, Min, Max)

    def ReadTotalLosses(self, Type, Mean, Min, Max):
        """

        :param Type:
        :type Type:
        :param Mean:
        :type Mean:
        :param Min:
        :type Min:
        :param Max:
        :type Max:
        """
        return self._dllwrap.ReadTotalLosses(self._vi, Type, Mean, Min, Max)

    def ReadConductionLosses(self, Type, Mean, Min, Max):
        """

        :param Type:
        :type Type:
        :param Mean:
        :type Mean:
        :param Min:
        :type Min:
        :param Max:
        :type Max:
        """
        return self._dllwrap.ReadConductionLosses(self._vi, Type, Mean, Min, Max)

    def SetParameters(self, FrequencyReference, FixedReference, NumberOfHarmonics, HarmonicsSource):
        """

        :param FrequencyReference:
        :type FrequencyReference:
        :param FixedReference:
        :type FixedReference:
        :param NumberOfHarmonics:
        :type NumberOfHarmonics:
        :param HarmonicsSource:
        :type HarmonicsSource:
        """
        return self._dllwrap.SetParameters(
            self._vi,
            FrequencyReference,
            FixedReference,
            NumberOfHarmonics,
            HarmonicsSource,
        )

    def GetParameters(self):
        """"""
        return self._dllwrap.GetParameters(self._vi)

    def ConfigureIEC(
        self,
        Class,
        Filter,
        FundamentalCurrent,
        Grouping,
        InputPower,
        LineFrequency,
        ObservationPeriod,
        PowerFactor,
    ):
        """

        :param Class:
        :type Class:
        :param Filter:
        :type Filter:
        :param FundamentalCurrent:
        :type FundamentalCurrent:
        :param Grouping:
        :type Grouping:
        :param InputPower:
        :type InputPower:
        :param LineFrequency:
        :type LineFrequency:
        :param ObservationPeriod:
        :type ObservationPeriod:
        :param PowerFactor:
        :type PowerFactor:
        """
        return self._dllwrap.ConfigureIEC(
            self._vi,
            Class,
            Filter,
            FundamentalCurrent,
            Grouping,
            InputPower,
            LineFrequency,
            ObservationPeriod,
            PowerFactor,
        )

    def ReadIEC(self):
        """"""
        return self._dllwrap.ReadIEC(self._vi)

    def ConfigureMIL(self, FundamentalCurrentCalculating, UserCurrent, LineFrequency, PowerLevel):
        """

        :param FundamentalCurrentCalculating:
        :type FundamentalCurrentCalculating:
        :param UserCurrent:
        :type UserCurrent:
        :param LineFrequency:
        :type LineFrequency:
        :param PowerLevel:
        :type PowerLevel:
        """
        return self._dllwrap.ConfigureMIL(
            self._vi,
            FundamentalCurrentCalculating,
            UserCurrent,
            LineFrequency,
            PowerLevel,
        )

    def ReadMIL(self):
        """"""
        return self._dllwrap.ReadMIL(self._vi)

    def SaveResultsToFile(self, Filename):
        """

        :param Filename:
        :type Filename:
        """
        return self._dllwrap.SaveResultsToFile(self._vi, Filename)

    def GetHamroniciecMaxResult(self, Harmonic):
        """

        :param Harmonic:
        :type Harmonic:
        """
        return self._dllwrap.GetHamroniciecMaxResult(self._vi, Harmonic)

    def GetHarmonicPercentageMagnitudeResult(self, Harmonic):
        """

        :param Harmonic:
        :type Harmonic:
        """
        return self._dllwrap.GetHarmonicPercentageMagnitudeResult(self._vi, Harmonic)

    def GetHarmonicAbsoluteMagnitudeResult(self, Harmonic):
        """

        :param Harmonic:
        :type Harmonic:
        """
        return self._dllwrap.GetHarmonicAbsoluteMagnitudeResult(self._vi, Harmonic)

    def GetHarmonicPhaseResult(self, Harmonic):
        """

        :param Harmonic:
        :type Harmonic:
        """
        return self._dllwrap.GetHarmonicPhaseResult(self._vi, Harmonic)

    def GetHarmonicFrequencyResult(self, Harmonic):
        """

        :param Harmonic:
        :type Harmonic:
        """
        return self._dllwrap.GetHarmonicFrequencyResult(self._vi, Harmonic)

    def GetHarmonicLimitResult(self, Harmonic):
        """

        :param Harmonic:
        :type Harmonic:
        """
        return self._dllwrap.GetHarmonicLimitResult(self._vi, Harmonic)

    def GetHarmoniciecClassaLimitResult(self, Harmonic):
        """

        :param Harmonic:
        :type Harmonic:
        """
        return self._dllwrap.GetHarmoniciecClassaLimitResult(self._vi, Harmonic)

    def GetHarmoniciecHigherLimitResult(self, Harmonic):
        """

        :param Harmonic:
        :type Harmonic:
        """
        return self._dllwrap.GetHarmoniciecHigherLimitResult(self._vi, Harmonic)

    def GetHarmoniciecNormalLimitResult(self, Harmonic):
        """

        :param Harmonic:
        :type Harmonic:
        """
        return self._dllwrap.GetHarmoniciecNormalLimitResult(self._vi, Harmonic)

    def GetHarmonicmilNormalLimitResult(self, Harmonic):
        """

        :param Harmonic:
        :type Harmonic:
        """
        return self._dllwrap.GetHarmonicmilNormalLimitResult(self._vi, Harmonic)

    def DoVerticalAutoSet(self):
        """"""
        return self._dllwrap.DoVerticalAutoSet(self._vi)

    def SetOffsetToZero(self):
        """"""
        return self._dllwrap.SetOffsetToZero(self._vi)

    def ConfigureAxes(self, Type, YaxesMax, YaxesMin, XaxesMax, XaxesMin):
        """

        :param Type:
        :type Type:
        :param YaxesMax:
        :type YaxesMax:
        :param YaxesMin:
        :type YaxesMin:
        :param XaxesMax:
        :type XaxesMax:
        :param XaxesMin:
        :type XaxesMin:
        """
        return self._dllwrap.ConfigureAxes(self._vi, Type, YaxesMax, YaxesMin, XaxesMax, XaxesMin)

    def ReadAxes(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.ReadAxes(self._vi, Type)

    def ConfigureMaskLimits(self, MaxVoltage, MaxCurrent, MaxPower):
        """

        :param MaxVoltage:
        :type MaxVoltage:
        :param MaxCurrent:
        :type MaxCurrent:
        :param MaxPower:
        :type MaxPower:
        """
        return self._dllwrap.ConfigureMaskLimits(self._vi, MaxVoltage, MaxCurrent, MaxPower)

    def ReadMaskLimits(self):
        """"""
        return self._dllwrap.ReadMaskLimits(self._vi)

    def SetMaskPoints(self, VoltsBufferSize, Volts, AmpsBufferSize, Amps):
        """

        :param VoltsBufferSize:
        :type VoltsBufferSize:
        :param Volts:
        :type Volts:
        :param AmpsBufferSize:
        :type AmpsBufferSize:
        :param Amps:
        :type Amps:
        """
        return self._dllwrap.SetMaskPoints(self._vi, VoltsBufferSize, Volts, AmpsBufferSize, Amps)

    def GetMaskPoints(self, VoltsBufferSize, AmpsBufferSize):
        """

        :param VoltsBufferSize:
        :type VoltsBufferSize:
        :param AmpsBufferSize:
        :type AmpsBufferSize:
        """
        return self._dllwrap.GetMaskPoints(self._vi, VoltsBufferSize, AmpsBufferSize)

    def GetSpectrumTraceDisplayState(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.GetSpectrumTraceDisplayState(self._vi, Type)

    def SetSpectrumTraceDisplayState(self, Type, SpectrumTraceDisplayState):
        """

        :param Type:
        :type Type:
        :param SpectrumTraceDisplayState:
        :type SpectrumTraceDisplayState:
        """
        return self._dllwrap.SetSpectrumTraceDisplayState(self._vi, Type, SpectrumTraceDisplayState)

    def GetRfVsTimeTraceDisplayState(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.GetRfVsTimeTraceDisplayState(self._vi, Type)

    def SetRfVsTimeTraceDisplayState(self, Type, RFVsTimeTraceDisplayState):
        """

        :param Type:
        :type Type:
        :param RFVsTimeTraceDisplayState:
        :type RFVsTimeTraceDisplayState:
        """
        return self._dllwrap.SetRfVsTimeTraceDisplayState(self._vi, Type, RFVsTimeTraceDisplayState)

    def ConfigureVerticalParameters(self, RFTraceType, Scale, Position):
        """

        :param RFTraceType:
        :type RFTraceType:
        :param Scale:
        :type Scale:
        :param Position:
        :type Position:
        """
        return self._dllwrap.ConfigureVerticalParameters(self._vi, RFTraceType, Scale, Position)

    def ReadVerticalParameters(self, RFTraceType):
        """

        :param RFTraceType:
        :type RFTraceType:
        """
        return self._dllwrap.ReadVerticalParameters(self._vi, RFTraceType)

    def ConfigureManualDetectionMethod(self, Type, Method):
        """

        :param Type:
        :type Type:
        :param Method:
        :type Method:
        """
        return self._dllwrap.ConfigureManualDetectionMethod(self._vi, Type, Method)

    def ReadManualDetectionMethod(self, Type):
        """

        :param Type:
        :type Type:
        """
        return self._dllwrap.ReadManualDetectionMethod(self._vi, Type)

    def SetAutoRefLevel(self):
        """"""
        return self._dllwrap.SetAutoRefLevel(self._vi)

    def MoveRefToCentre(self):
        """"""
        return self._dllwrap.MoveRefToCentre(self._vi)

    def ReadReference(self):
        """"""
        return self._dllwrap.ReadReference(self._vi)

    def ReadManual(self, Marker):
        """

        :param Marker:
        :type Marker:
        """
        return self._dllwrap.ReadManual(self._vi, Marker)

    def ConfigureManual(self, Marker, HorizontalValue):
        """

        :param Marker:
        :type Marker:
        :param HorizontalValue:
        :type HorizontalValue:
        """
        return self._dllwrap.ConfigureManual(self._vi, Marker, HorizontalValue)

    def ConfigurePeak(self, MaximumMarkers, Threshold, Excursion):
        """

        :param MaximumMarkers:
        :type MaximumMarkers:
        :param Threshold:
        :type Threshold:
        :param Excursion:
        :type Excursion:
        """
        return self._dllwrap.ConfigurePeak(self._vi, MaximumMarkers, Threshold, Excursion)

    def ReadPeak(self):
        """"""
        return self._dllwrap.ReadPeak(self._vi)

    def FetchY(self, Source, TraceArrayBufferSize):
        """

        :param Source:
        :type Source:
        :param TraceArrayBufferSize:
        :type TraceArrayBufferSize:
        """
        return self._dllwrap.FetchY(self._vi, Source, TraceArrayBufferSize)

    def ReadY(self, Source, TraceArrayBufferSize):
        """

        :param Source:
        :type Source:
        :param TraceArrayBufferSize:
        :type TraceArrayBufferSize:
        """
        return self._dllwrap.ReadY(self._vi, Source, TraceArrayBufferSize)
