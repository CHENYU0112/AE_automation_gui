from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import AgInfiniium_const as const
from .AgInfiniium_const import *


class AgInfiniium_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("AgInfiniium.dll", "AgInfiniium_64.dll")
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "AgInfiniium"

    @property
    def const(self):
        return const

    def init(self, ResourceName, IdQuery, Reset):
        Vi = ViSession()
        status = self.dll.AgInfiniium_init(ViRsrc(ResourceName), ViBoolean(IdQuery), ViBoolean(Reset), byref(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def close(self, Vi):
        status = self.dll.AgInfiniium_close(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitWithOptions(self, ResourceName, IdQuery, Reset, OptionsString):
        Vi = ViSession()
        status = self.dll.AgInfiniium_InitWithOptions(
            ViRsrc(ResourceName),
            ViBoolean(IdQuery),
            ViBoolean(Reset),
            ViConstString(OptionsString),
            byref(Vi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Vi.value)

    def revision_query(self, Vi):
        DriverRev = ARRAY_ViChar(1024)
        InstrRev = ARRAY_ViChar(1024)
        status = self.dll.AgInfiniium_revision_query(ViSession(Vi), DriverRev, InstrRev)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        DriverRev = decode(DriverRev)
        InstrRev = decode(InstrRev)
        return DriverRev, InstrRev

    def error_message(self, Vi, ErrorCode):
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.AgInfiniium_error_message(ViSession(Vi), ViStatus(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(ErrorMessage)

    def GetError(self, Vi, ErrorDescriptionBufferSize):
        ErrorCode = ViStatus()
        ErrorDescription = ARRAY_ViChar(ErrorDescriptionBufferSize)
        status = self.dll.AgInfiniium_GetError(
            ViSession(Vi),
            byref(ErrorCode),
            ViInt32(ErrorDescriptionBufferSize),
            ErrorDescription,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorDescription = decode(ErrorDescription)
        return ErrorCode, ErrorDescription

    def ClearError(self, Vi):
        status = self.dll.AgInfiniium_ClearError(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, Vi, CoercionRecordBufferSize):
        CoercionRecord = ARRAY_ViChar(CoercionRecordBufferSize)
        status = self.dll.AgInfiniium_GetNextCoercionRecord(
            ViSession(Vi), ViInt32(CoercionRecordBufferSize), CoercionRecord
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(CoercionRecord)

    def InvalidateAllAttributes(self, Vi):
        status = self.dll.AgInfiniium_InvalidateAllAttributes(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disable(self, Vi):
        status = self.dll.AgInfiniium_Disable(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_query(self, Vi):
        ErrorCode = ViInt32()
        ErrorMessage = ARRAY_ViChar(1024)
        status = self.dll.AgInfiniium_error_query(ViSession(Vi), byref(ErrorCode), ErrorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ErrorCode = int(ErrorCode.value)
        ErrorMessage = decode(ErrorMessage)
        return ErrorCode, ErrorMessage

    def LockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.AgInfiniium_LockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def reset(self, Vi):
        status = self.dll.AgInfiniium_reset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, Vi):
        status = self.dll.AgInfiniium_ResetWithDefaults(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, Vi):
        TestResult = ViInt16()
        TestMessage = ARRAY_ViChar(1024)
        status = self.dll.AgInfiniium_self_test(ViSession(Vi), byref(TestResult), TestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        TestResult = int(TestResult.value)
        TestMessage = decode(TestMessage)
        return TestResult, TestMessage

    def UnlockSession(self, Vi):
        CallerHasLock = ViBoolean()
        status = self.dll.AgInfiniium_UnlockSession(ViSession(Vi), byref(CallerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(CallerHasLock.value)

    def IsInvalidWfmElement(self, Vi, ElementValue):
        IsInvalid = ViBoolean()
        status = self.dll.AgInfiniium_IsInvalidWfmElement(ViSession(Vi), ViReal64(ElementValue), byref(IsInvalid))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(IsInvalid.value)

    def GetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViInt32()
        status = self.dll.AgInfiniium_GetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViReal64()
        status = self.dll.AgInfiniium_GetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AttributeValue.value)

    def GetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViBoolean()
        status = self.dll.AgInfiniium_GetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(AttributeValue.value)

    def GetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID):
        AttributeValue = ViSession()
        status = self.dll.AgInfiniium_GetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            byref(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(AttributeValue.value)

    def GetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValueBufferSize):
        AttributeValue = ARRAY_ViChar(AttributeValueBufferSize)
        status = self.dll.AgInfiniium_GetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValueBufferSize),
            AttributeValue,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(AttributeValue)

    def SetAttributeViInt32(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgInfiniium_SetAttributeViInt32(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViInt32(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgInfiniium_SetAttributeViReal64(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViReal64(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgInfiniium_SetAttributeViBoolean(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViBoolean(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgInfiniium_SetAttributeViSession(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViSession(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, Vi, RepCapIdentifier, AttributeID, AttributeValue):
        status = self.dll.AgInfiniium_SetAttributeViString(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViAttr(AttributeID),
            ViConstString(AttributeValue),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ActualRecordLength(self, Vi):
        ActualRecordLength = ViInt32()
        status = self.dll.AgInfiniium_ActualRecordLength(ViSession(Vi), byref(ActualRecordLength))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ActualRecordLength.value)

    def SampleRate(self, Vi):
        SampleRate = ViReal64()
        status = self.dll.AgInfiniium_SampleRate(ViSession(Vi), byref(SampleRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(SampleRate.value)

    def AutoProbeSenseValue(self, Vi, ChannelName):
        AutoProbeSenseValue = ViReal64()
        status = self.dll.AgInfiniium_AutoProbeSenseValue(
            ViSession(Vi), ViConstString(ChannelName), byref(AutoProbeSenseValue)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(AutoProbeSenseValue.value)

    def AutoSetup(self, Vi):
        status = self.dll.AgInfiniium_AutoSetup(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionType(self, Vi, AcquisitionType):
        status = self.dll.AgInfiniium_ConfigureAcquisitionType(ViSession(Vi), ViInt32(AcquisitionType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInterpolation(self, Vi, Interpolation):
        status = self.dll.AgInfiniium_ConfigureInterpolation(ViSession(Vi), ViInt32(Interpolation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureInitiateContinuous(self, Vi, ContinuousAcquisition):
        status = self.dll.AgInfiniium_ConfigureInitiateContinuous(ViSession(Vi), ViBoolean(ContinuousAcquisition))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNumAverages(self, Vi, NumberOfAverages):
        status = self.dll.AgInfiniium_ConfigureNumAverages(ViSession(Vi), ViInt32(NumberOfAverages))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNumEnvelopes(self, Vi, NumEnvelopes):
        status = self.dll.AgInfiniium_ConfigureNumEnvelopes(ViSession(Vi), ViInt32(NumEnvelopes))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionRecord(self, Vi, TimePerRecord, MinNumPts, AcquisitionStartTime):
        status = self.dll.AgInfiniium_ConfigureAcquisitionRecord(
            ViSession(Vi),
            ViReal64(TimePerRecord),
            ViInt32(MinNumPts),
            ViReal64(AcquisitionStartTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerCoupling(self, Vi, Coupling):
        status = self.dll.AgInfiniium_ConfigureTriggerCoupling(ViSession(Vi), ViInt32(Coupling))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerLineNumber(self, Vi, TVLineNumber):
        status = self.dll.AgInfiniium_ConfigureTVTriggerLineNumber(ViSession(Vi), ViInt32(TVLineNumber))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcLineTriggerSlope(self, Vi, ACLineSlope):
        status = self.dll.AgInfiniium_ConfigureAcLineTriggerSlope(ViSession(Vi), ViInt32(ACLineSlope))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerModifier(self, Vi, TriggerModifier):
        status = self.dll.AgInfiniium_ConfigureTriggerModifier(ViSession(Vi), ViInt32(TriggerModifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, Vi, TriggerType, Holdoff):
        status = self.dll.AgInfiniium_ConfigureTrigger(ViSession(Vi), ViInt32(TriggerType), ViReal64(Holdoff))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEdgeTriggerSource(self, Vi, Source, Level, Slope):
        status = self.dll.AgInfiniium_ConfigureEdgeTriggerSource(
            ViSession(Vi), ViConstString(Source), ViReal64(Level), ViInt32(Slope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGlitchTriggerSource(self, Vi, Source, Level, GlitchWidth, GlitchPolarity, GlitchCondition):
        status = self.dll.AgInfiniium_ConfigureGlitchTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViReal64(Level),
            ViReal64(GlitchWidth),
            ViInt32(GlitchPolarity),
            ViInt32(GlitchCondition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRuntTriggerSource(self, Vi, Source, RuntThresholdLow, RuntThresholdHigh, RuntPolarity):
        status = self.dll.AgInfiniium_ConfigureRuntTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViReal64(RuntThresholdLow),
            ViReal64(RuntThresholdHigh),
            ViInt32(RuntPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerSource(self, Vi, Source, TVSignalFormat, TVEvent, TVPolarity):
        status = self.dll.AgInfiniium_ConfigureTVTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViInt32(TVSignalFormat),
            ViInt32(TVEvent),
            ViInt32(TVPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureWidthTriggerSource(
        self,
        Vi,
        Source,
        Level,
        WidthLowThreshold,
        WidthHighThreshold,
        WidthPolarity,
        WidthCondition,
    ):
        status = self.dll.AgInfiniium_ConfigureWidthTriggerSource(
            ViSession(Vi),
            ViConstString(Source),
            ViReal64(Level),
            ViReal64(WidthLowThreshold),
            ViReal64(WidthHighThreshold),
            ViInt32(WidthPolarity),
            ViInt32(WidthCondition),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgInfiniium_GetChannelName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def ConfigureChannel(self, Vi, Channel, Range, Offset, Coupling, ProbeAttenuation, Enabled):
        status = self.dll.AgInfiniium_ConfigureChannel(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(Range),
            ViReal64(Offset),
            ViInt32(Coupling),
            ViReal64(ProbeAttenuation),
            ViBoolean(Enabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChanCharacteristics(self, Vi, Channel, InputImpedance, MaxInputFrequency):
        status = self.dll.AgInfiniium_ConfigureChanCharacteristics(
            ViSession(Vi),
            ViConstString(Channel),
            ViReal64(InputImpedance),
            ViReal64(MaxInputFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefLevels(self, Vi, Low, Mid, High):
        status = self.dll.AgInfiniium_ConfigureRefLevels(ViSession(Vi), ViReal64(Low), ViReal64(Mid), ViReal64(High))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadWaveform(self, Vi, Channel, WaveformSize, MaxTimeMilliseconds):
        WaveformArray = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniium_ReadWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            ViInt32(MaxTimeMilliseconds),
            WaveformArray,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArray = list(WaveformArray)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, ActualPoints, InitialX, XIncrement

    def ReadWaveformMeasurement(self, Vi, Channel, MeasFunction, MaxTimeMilliseconds):
        Measurement = ViReal64()
        status = self.dll.AgInfiniium_ReadWaveformMeasurement(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(MeasFunction),
            ViInt32(MaxTimeMilliseconds),
            byref(Measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Measurement.value)

    def ReadMinMaxWaveform(self, Vi, Channel, WaveformSize, MaxTimeMilliseconds):
        MinWaveform = ARRAY_ViReal64(WaveformSize)
        MaxWaveform = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniium_ReadMinMaxWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            ViInt32(MaxTimeMilliseconds),
            MinWaveform,
            MaxWaveform,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MinWaveform = list(MinWaveform)
        MaxWaveform = list(MaxWaveform)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement

    def FetchWaveform(self, Vi, Channel, WaveformSize):
        WaveformArray = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniium_FetchWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            WaveformArray,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        WaveformArray = list(WaveformArray)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return WaveformArray, ActualPoints, InitialX, XIncrement

    def FetchWaveformMeasurement(self, Vi, Channel, MeasFunction):
        Measurement = ViReal64()
        status = self.dll.AgInfiniium_FetchWaveformMeasurement(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(MeasFunction),
            byref(Measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(Measurement.value)

    def FetchMinMaxWaveform(self, Vi, Channel, WaveformSize):
        MinWaveform = ARRAY_ViReal64(WaveformSize)
        MaxWaveform = ARRAY_ViReal64(WaveformSize)
        ActualPoints = ViInt32()
        InitialX = ViReal64()
        XIncrement = ViReal64()
        status = self.dll.AgInfiniium_FetchMinMaxWaveform(
            ViSession(Vi),
            ViConstString(Channel),
            ViInt32(WaveformSize),
            MinWaveform,
            MaxWaveform,
            byref(ActualPoints),
            byref(InitialX),
            byref(XIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        MinWaveform = list(MinWaveform)
        MaxWaveform = list(MaxWaveform)
        ActualPoints = int(ActualPoints.value)
        InitialX = float(InitialX.value)
        XIncrement = float(XIncrement.value)
        return MinWaveform, MaxWaveform, ActualPoints, InitialX, XIncrement

    def Abort(self, Vi):
        status = self.dll.AgInfiniium_Abort(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InitiateAcquisition(self, Vi):
        status = self.dll.AgInfiniium_InitiateAcquisition(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AcquisitionStatus(self, Vi):
        Status = ViInt32()
        retcode = self.dll.AgInfiniium_AcquisitionStatus(ViSession(Vi), byref(Status))
        if int(retcode) < 0:
            raise InstrumentError(retcode)
        elif int(retcode) > 0:
            raise InstrumentWarning(retcode)
        return int(Status.value)

    def ChannelClearProtection(self, Vi, RepCapIdentifier):
        status = self.dll.AgInfiniium_ChannelClearProtection(ViSession(Vi), ViConstString(RepCapIdentifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def viRead(self, Vi, BufferSize):
        Buffer = ARRAY_ViByte(BufferSize)
        ReturnCount = ViInt64()
        status = self.dll.AgInfiniium_viRead(ViSession(Vi), ViInt64(BufferSize), Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ReturnCount = int(ReturnCount.value)
        return Buffer, ReturnCount

    def viWrite(self, Vi, Count, Buffer):
        _Buffer = (ViByte * len(Buffer))(*Buffer)
        ReturnCount = ViInt64()
        status = self.dll.AgInfiniium_viWrite(ViSession(Vi), ViInt64(Count), _Buffer, byref(ReturnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(ReturnCount.value)

    def PeriodicDriftConnectionEnabled(self, Vi, DriftCorrection):
        status = self.dll.AgInfiniium_PeriodicDriftConnectionEnabled(ViSession(Vi), ViInt32(DriftCorrection))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsPeriodicDriftConnectionEnabled(self, Vi):
        Val = ViInt32()
        status = self.dll.AgInfiniium_IsPeriodicDriftConnectionEnabled(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def Calibrate(self, Vi):
        status = self.dll.AgInfiniium_Calibrate(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetChannelSource(self, Vi, Source):
        status = self.dll.AgInfiniium_SetChannelSource(ViSession(Vi), ViInt32(Source))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetChannelSource(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniium_GetChannelSource(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def DeskewChannels(self, Vi):
        status = self.dll.AgInfiniium_DeskewChannels(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DeskewFrames(self, Vi):
        status = self.dll.AgInfiniium_DeskewFrames(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DeskewSignals(self, Vi):
        status = self.dll.AgInfiniium_DeskewSignals(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Reset2(self, Vi):
        status = self.dll.AgInfiniium_Reset2(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsChannelsDeskewed(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniium_IsChannelsDeskewed(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def IsFramesDeskewed(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniium_IsFramesDeskewed(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def IsSignalsDeskewed(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniium_IsSignalsDeskewed(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def IsCalibrated(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniium_IsCalibrated(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def ReferenceClock(self, Vi):
        status = self.dll.AgInfiniium_ReferenceClock(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Configure2(self, Vi, ResourceName):
        status = self.dll.AgInfiniium_Configure2(ViSession(Vi), ViConstString(ResourceName))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Connect(self, Vi):
        status = self.dll.AgInfiniium_Connect(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disconnect(self, Vi):
        status = self.dll.AgInfiniium_Disconnect(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ChannelCount(self, Vi):
        Val = ViInt32()
        status = self.dll.AgInfiniium_ChannelCount(ViSession(Vi), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def ChannelCount2(self, Vi, FollowerIndex):
        Val = ViInt32()
        status = self.dll.AgInfiniium_ChannelCount2(ViSession(Vi), ViInt32(FollowerIndex), byref(Val))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(Val.value)

    def Configure(self, Vi, FollowersIndex, ResourceNameBufferSize, ResourceName):
        status = self.dll.AgInfiniium_Configure(
            ViSession(Vi),
            ViInt32(FollowersIndex),
            ViInt32(ResourceNameBufferSize),
            ViConstString(ResourceName),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Connect2(self, Vi, FollowerIndex):
        status = self.dll.AgInfiniium_Connect2(ViSession(Vi), ViInt32(FollowerIndex))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def Disconnect2(self, Vi, FollowerIndex):
        status = self.dll.AgInfiniium_Disconnect2(ViSession(Vi), ViInt32(FollowerIndex))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerStateConfigure(
        self,
        Vi,
        ClockSource,
        ClockLevel,
        ClockSlope,
        AnalogPattern,
        AnalogMask,
        DigitalPattern,
        DigitalMask,
    ):
        status = self.dll.AgInfiniium_TriggerStateConfigure(
            ViSession(Vi),
            ViConstString(ClockSource),
            ViReal64(ClockLevel),
            ViInt32(ClockSlope),
            ViInt32(AnalogPattern),
            ViInt32(AnalogMask),
            ViInt32(DigitalPattern),
            ViInt32(DigitalMask),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def TriggerPatternConfigure(self, Vi, AnalogPattern, AnalogMask, DigitalPattern, DigitalMask, MatchingMode):
        status = self.dll.AgInfiniium_TriggerPatternConfigure(
            ViSession(Vi),
            ViInt32(AnalogPattern),
            ViInt32(AnalogMask),
            ViInt32(DigitalPattern),
            ViInt32(DigitalMask),
            ViInt32(MatchingMode),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MeasurementFunctionName(self, Vi, RepCapIdentifier, MeasFunction, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgInfiniium_MeasurementFunctionName(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MeasFunction),
            ViInt32(NameBufferSize),
            Name,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def GetMeasurementName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgInfiniium_GetMeasurementName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def DigitalChannelReadDigitalWaveform(self, Vi, RepCapIdentifier, MaxTime, pWaveformArrayBufferSize):
        pWaveformArray = ARRAY_ViByte(pWaveformArrayBufferSize)
        pWaveformArrayActualSize = ViInt32()
        pInitialX = ViReal64()
        pXIncrement = ViReal64()
        status = self.dll.AgInfiniium_DigitalChannelReadDigitalWaveform(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(MaxTime),
            ViInt32(pWaveformArrayBufferSize),
            pWaveformArray,
            byref(pWaveformArrayActualSize),
            byref(pInitialX),
            byref(pXIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pWaveformArrayActualSize = int(pWaveformArrayActualSize.value)
        pInitialX = float(pInitialX.value)
        pXIncrement = float(pXIncrement.value)
        return pWaveformArray, pWaveformArrayActualSize, pInitialX, pXIncrement

    def DigitalChannelFetchDigitalWaveform(self, Vi, RepCapIdentifier, pWaveformArrayBufferSize):
        pWaveformArray = ARRAY_ViByte(pWaveformArrayBufferSize)
        pWaveformArrayActualSize = ViInt32()
        pInitialX = ViReal64()
        pXIncrement = ViReal64()
        status = self.dll.AgInfiniium_DigitalChannelFetchDigitalWaveform(
            ViSession(Vi),
            ViConstString(RepCapIdentifier),
            ViInt32(pWaveformArrayBufferSize),
            pWaveformArray,
            byref(pWaveformArrayActualSize),
            byref(pInitialX),
            byref(pXIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pWaveformArrayActualSize = int(pWaveformArrayActualSize.value)
        pInitialX = float(pInitialX.value)
        pXIncrement = float(pXIncrement.value)
        return pWaveformArray, pWaveformArrayActualSize, pInitialX, pXIncrement

    def GetDigitalChannelName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgInfiniium_GetDigitalChannelName(
            ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def DisplayErase(self, Vi):
        status = self.dll.AgInfiniium_DisplayErase(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DisplayConfigure(self, Vi, PersistTime):
        status = self.dll.AgInfiniium_DisplayConfigure(ViSession(Vi), ViReal64(PersistTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MultiWaveformMeasurementResetActivity(self, Vi):
        status = self.dll.AgInfiniium_MultiWaveformMeasurementResetActivity(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def MultiWaveformMeasurementReadActivity(self, Vi):
        pEdges = ViInt32()
        pLevels = ViInt32()
        status = self.dll.AgInfiniium_MultiWaveformMeasurementReadActivity(ViSession(Vi), byref(pEdges), byref(pLevels))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pEdges = int(pEdges.value)
        pLevels = int(pLevels.value)
        return pEdges, pLevels

    def MultiWaveformMeasurementConfigureDelay(self, Vi, Source2, Slope1, Slope2, DelayOccurence1, DelayOccurence2):
        status = self.dll.AgInfiniium_MultiWaveformMeasurementConfigureDelay(
            ViSession(Vi),
            ViConstString(Source2),
            ViInt32(Slope1),
            ViInt32(Slope2),
            ViInt32(DelayOccurence1),
            ViInt32(DelayOccurence2),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusPreset(self, Vi):
        status = self.dll.AgInfiniium_StatusPreset(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusConfigureServiceRequest(self, Vi, Reason):
        status = self.dll.AgInfiniium_StatusConfigureServiceRequest(ViSession(Vi), ViInt32(Reason))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusClear(self, Vi):
        status = self.dll.AgInfiniium_StatusClear(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def StatusGetRegister(self, Vi, Register, SubRegister):
        RetVal = ViInt32()
        status = self.dll.AgInfiniium_StatusGetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), byref(RetVal)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(RetVal.value)

    def StatusSetRegister(self, Vi, Register, SubRegister, Val):
        status = self.dll.AgInfiniium_StatusSetRegister(
            ViSession(Vi), ViInt32(Register), ViInt32(SubRegister), ViInt32(Val)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWaitForOperationComplete(self, Vi, MaxTimeMilliseconds):
        status = self.dll.AgInfiniium_SystemWaitForOperationComplete(ViSession(Vi), ViInt32(MaxTimeMilliseconds))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemSaveState(self, Vi, Identifier):
        status = self.dll.AgInfiniium_SystemSaveState(ViSession(Vi), ViConstString(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRecallState(self, Vi, Identifier):
        status = self.dll.AgInfiniium_SystemRecallState(ViSession(Vi), ViConstString(Identifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemPutState(self, Vi, DataBufferSize, Data):
        _Data = (ViByte * len(Data))(*Data)
        status = self.dll.AgInfiniium_SystemPutState(ViSession(Vi), ViInt32(DataBufferSize), _Data)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemGetState(self, Vi, pDataBufferSize):
        pData = ARRAY_ViByte(pDataBufferSize)
        pDataActualSize = ViInt32()
        status = self.dll.AgInfiniium_SystemGetState(
            ViSession(Vi), ViInt32(pDataBufferSize), pData, byref(pDataActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pDataActualSize = int(pDataActualSize.value)
        return pData, pDataActualSize

    def SystemGetScreenBitmap(self, Vi, pBitmapBufferSize):
        pBitmap = ARRAY_ViByte(pBitmapBufferSize)
        pBitmapActualSize = ViInt32()
        status = self.dll.AgInfiniium_SystemGetScreenBitmap(
            ViSession(Vi), ViInt32(pBitmapBufferSize), pBitmap, byref(pBitmapActualSize)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        pBitmapActualSize = int(pBitmapActualSize.value)
        return pBitmap, pBitmapActualSize

    def SystemEnableLocalControls(self, Vi):
        status = self.dll.AgInfiniium_SystemEnableLocalControls(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemRead(self, Vi, Size):
        Value = ARRAY_ViChar(Size)
        ActualSize = ViInt32()
        status = self.dll.AgInfiniium_SystemRead(ViSession(Vi), ViInt32(Size), Value, byref(ActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        Value = decode(Value)
        ActualSize = int(ActualSize.value)
        return Value, ActualSize

    def SystemWrite(self, Vi, CommandString):
        status = self.dll.AgInfiniium_SystemWrite(ViSession(Vi), ViConstString(CommandString))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemClearIO(self, Vi):
        status = self.dll.AgInfiniium_SystemClearIO(ViSession(Vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemReadBytes(self, Vi, ValBufferSize):
        Val = ARRAY_ViByte(ValBufferSize)
        ValActualSize = ViInt32()
        status = self.dll.AgInfiniium_SystemReadBytes(ViSession(Vi), ViInt32(ValBufferSize), Val, byref(ValActualSize))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        ValActualSize = int(ValActualSize.value)
        return Val, ValActualSize

    def SystemReadString(self, Vi, ValBufferSize):
        Val = ARRAY_ViChar(ValBufferSize)
        status = self.dll.AgInfiniium_SystemReadString(ViSession(Vi), ViInt32(ValBufferSize), Val)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Val)

    def SystemWriteBytes(self, Vi, BufferBufferSize, Buffer):
        _Buffer = (ViByte * len(Buffer))(*Buffer)
        status = self.dll.AgInfiniium_SystemWriteBytes(ViSession(Vi), ViInt32(BufferBufferSize), _Buffer)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SystemWriteString(self, Vi, Data):
        status = self.dll.AgInfiniium_SystemWriteString(ViSession(Vi), ViConstString(Data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetMathFunctionName(self, Vi, Index, NameBufferSize):
        Name = ARRAY_ViChar(NameBufferSize)
        status = self.dll.AgInfiniium_GetMathFunctionName(ViSession(Vi), ViInt32(Index), ViInt32(NameBufferSize), Name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(Name)

    def MathFunctionDisplayEnvelope(self, Vi, MathFunction, Source):
        status = self.dll.AgInfiniium_MathFunctionDisplayEnvelope(
            ViSession(Vi), ViConstString(MathFunction), ViConstString(Source)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
