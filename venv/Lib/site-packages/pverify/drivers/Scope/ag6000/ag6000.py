from __future__ import annotations

from pverify.core.lab.driver_identity import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from .ag6000_dllwrap import *


class ag6000(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dllwrap = ag6000_dllwrap()
        self._vi = None
        """:type : int"""
        self.__Initialized = False
        self.__Identity = Identity_IviC(self)

    @property
    def Identity(self):
        return self.__Identity

    @property
    def Initialized(self):
        return self.__Initialized

    @property
    def dll(self):
        return self._dllwrap.dll

    @property
    def drivername(self):
        return self._dllwrap.drivername

    @property
    def const(self):
        return self._dllwrap.const

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        """
        self._vi = self._dllwrap.InitWithOptions(ResourceName, IdQuery, Reset, OptionString)
        self.__Initialized = True

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self._dllwrap.close(self._vi)
        self.__Initialized = False

    def init(self, resourceName, IDQuery, resetDevice):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param resetDevice:
        :type resetDevice:
        """
        return self._dllwrap.init(resourceName, IDQuery, resetDevice)

    def DeviceClear(self):
        """"""
        return self._dllwrap.DeviceClear(self._vi)

    def GetNextCoercionRecord(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextCoercionRecord(self._vi, bufferSize)

    def LockSession(self):
        """"""
        return self._dllwrap.LockSession(self._vi)

    def UnlockSession(self):
        """"""
        return self._dllwrap.UnlockSession(self._vi)

    def GetChannelName(self, index, bufferSize):
        """

        :param index:
        :type index:
        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetChannelName(self._vi, index, bufferSize)

    def ConfigureAcquisitionType(self, acquisitionType):
        """

        :param acquisitionType:
        :type acquisitionType:
        """
        return self._dllwrap.ConfigureAcquisitionType(self._vi, acquisitionType)

    def ConfigureAcquisitionMode(self, acquisitionMode):
        """

        :param acquisitionMode:
        :type acquisitionMode:
        """
        return self._dllwrap.ConfigureAcquisitionMode(self._vi, acquisitionMode)

    def ConfigureAcquisitionRecord(self, timePerRecord, minimumRecordLength, acqStartTime):
        """

        :param timePerRecord:
        :type timePerRecord:
        :param minimumRecordLength:
        :type minimumRecordLength:
        :param acqStartTime:
        :type acqStartTime:
        """
        return self._dllwrap.ConfigureAcquisitionRecord(self._vi, timePerRecord, minimumRecordLength, acqStartTime)

    def ConfigureRecordMode(self, horizontalRecordMode):
        """

        :param horizontalRecordMode:
        :type horizontalRecordMode:
        """
        return self._dllwrap.ConfigureRecordMode(self._vi, horizontalRecordMode)

    def ConfigureNumAverages(self, numberOfAverages):
        """

        :param numberOfAverages:
        :type numberOfAverages:
        """
        return self._dllwrap.ConfigureNumAverages(self._vi, numberOfAverages)

    def SampleMode(self):
        """"""
        return self._dllwrap.SampleMode(self._vi)

    def SampleRate(self):
        """"""
        return self._dllwrap.SampleRate(self._vi)

    def ConfigureMathChannelEnabled(self, channelEnabled):
        """

        :param channelEnabled:
        :type channelEnabled:
        """
        return self._dllwrap.ConfigureMathChannelEnabled(self._vi, channelEnabled)

    def ConfigureMathChannel(self, source, operation):
        """

        :param source:
        :type source:
        :param operation:
        :type operation:
        """
        return self._dllwrap.ConfigureMathChannel(self._vi, source, operation)

    def ConfigureMathFunction(self, source1, source2, operation):
        """

        :param source1:
        :type source1:
        :param source2:
        :type source2:
        :param operation:
        :type operation:
        """
        return self._dllwrap.ConfigureMathFunction(self._vi, source1, source2, operation)

    def ConfigureMathSettings(self, scale, offset):
        """

        :param scale:
        :type scale:
        :param offset:
        :type offset:
        """
        return self._dllwrap.ConfigureMathSettings(self._vi, scale, offset)

    def ConfigureMathFFT(self, span, center, window):
        """

        :param span:
        :type span:
        :param center:
        :type center:
        :param window:
        :type window:
        """
        return self._dllwrap.ConfigureMathFFT(self._vi, span, center, window)

    def ActualRecordLength(self):
        """"""
        return self._dllwrap.ActualRecordLength(self._vi)

    def ConfigureInitiateContinuous(self, continuous):
        """

        :param continuous:
        :type continuous:
        """
        return self._dllwrap.ConfigureInitiateContinuous(self._vi, continuous)

    def ConfigureChannel(self, channel, range, offset, coupling, probeAttenuation, enabled):
        """

        :param channel:
        :type channel:
        :param range:
        :type range:
        :param offset:
        :type offset:
        :param coupling:
        :type coupling:
        :param probeAttenuation:
        :type probeAttenuation:
        :param enabled:
        :type enabled:
        """
        return self._dllwrap.ConfigureChannel(self._vi, channel, range, offset, coupling, probeAttenuation, enabled)

    def ConfigureDigitalChannel(self, channelName, size, threshold, thresholdValue, channelEnabled):
        """

        :param channelName:
        :type channelName:
        :param size:
        :type size:
        :param threshold:
        :type threshold:
        :param thresholdValue:
        :type thresholdValue:
        :param channelEnabled:
        :type channelEnabled:
        """
        return self._dllwrap.ConfigureDigitalChannel(
            self._vi, channelName, size, threshold, thresholdValue, channelEnabled
        )

    def ConfigureChanCharacteristics(self, channel, inputImpedance, maxInputFrequency):
        """

        :param channel:
        :type channel:
        :param inputImpedance:
        :type inputImpedance:
        :param maxInputFrequency:
        :type maxInputFrequency:
        """
        return self._dllwrap.ConfigureChanCharacteristics(self._vi, channel, inputImpedance, maxInputFrequency)

    def AutoProbeSenseValue(self, channel):
        """

        :param channel:
        :type channel:
        """
        return self._dllwrap.AutoProbeSenseValue(self._vi, channel)

    def ConfigureChannelInvert(self, channel, invert):
        """

        :param channel:
        :type channel:
        :param invert:
        :type invert:
        """
        return self._dllwrap.ConfigureChannelInvert(self._vi, channel, invert)

    def ConfigureChannelVernier(self, channel, vernier):
        """

        :param channel:
        :type channel:
        :param vernier:
        :type vernier:
        """
        return self._dllwrap.ConfigureChannelVernier(self._vi, channel, vernier)

    def ConfigureChannelProbe(self, channel, skew, units):
        """

        :param channel:
        :type channel:
        :param skew:
        :type skew:
        :param units:
        :type units:
        """
        return self._dllwrap.ConfigureChannelProbe(self._vi, channel, skew, units)

    def ConfigureChannelLabel(self, channel, label):
        """

        :param channel:
        :type channel:
        :param label:
        :type label:
        """
        return self._dllwrap.ConfigureChannelLabel(self._vi, channel, label)

    def ConfigureDigitalPosition(self, channelName, position):
        """

        :param channelName:
        :type channelName:
        :param position:
        :type position:
        """
        return self._dllwrap.ConfigureDigitalPosition(self._vi, channelName, position)

    def ConfigureTimebaseMode(self, timebaseMode):
        """

        :param timebaseMode:
        :type timebaseMode:
        """
        return self._dllwrap.ConfigureTimebaseMode(self._vi, timebaseMode)

    def ConfigureTimebase(self, reference, vernier):
        """

        :param reference:
        :type reference:
        :param vernier:
        :type vernier:
        """
        return self._dllwrap.ConfigureTimebase(self._vi, reference, vernier)

    def ConfigureWindowTimebase(self, position, range):
        """

        :param position:
        :type position:
        :param range:
        :type range:
        """
        return self._dllwrap.ConfigureWindowTimebase(self._vi, position, range)

    def ConfigureTrigger(self, triggerType, holdoff):
        """

        :param triggerType:
        :type triggerType:
        :param holdoff:
        :type holdoff:
        """
        return self._dllwrap.ConfigureTrigger(self._vi, triggerType, holdoff)

    def ConfigureTriggerCoupling(self, coupling):
        """

        :param coupling:
        :type coupling:
        """
        return self._dllwrap.ConfigureTriggerCoupling(self._vi, coupling)

    def ConfigureTriggerModifier(self, modifier):
        """

        :param modifier:
        :type modifier:
        """
        return self._dllwrap.ConfigureTriggerModifier(self._vi, modifier)

    def ConfigureTriggerReject(self, noiseReject, HFReject):
        """

        :param noiseReject:
        :type noiseReject:
        :param HFReject:
        :type HFReject:
        """
        return self._dllwrap.ConfigureTriggerReject(self._vi, noiseReject, HFReject)

    def ConfigureEdgeTriggerSource(self, source, level, slope):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureEdgeTriggerSource(self._vi, source, level, slope)

    def ConfigureTVTriggerSource(self, source, TVSignalFormat, TVEvent, TVPolarity):
        """

        :param source:
        :type source:
        :param TVSignalFormat:
        :type TVSignalFormat:
        :param TVEvent:
        :type TVEvent:
        :param TVPolarity:
        :type TVPolarity:
        """
        return self._dllwrap.ConfigureTVTriggerSource(self._vi, source, TVSignalFormat, TVEvent, TVPolarity)

    def ConfigureTVTriggerLineNumber(self, lineNumber):
        """

        :param lineNumber:
        :type lineNumber:
        """
        return self._dllwrap.ConfigureTVTriggerLineNumber(self._vi, lineNumber)

    def ConfigureIICTriggerSource(self, serialClockSource, serialDataSource, type):
        """

        :param serialClockSource:
        :type serialClockSource:
        :param serialDataSource:
        :type serialDataSource:
        :param type:
        :type type:
        """
        return self._dllwrap.ConfigureIICTriggerSource(self._vi, serialClockSource, serialDataSource, type)

    def ConfigureIICEEPROMQualifier(self, qualifier):
        """

        :param qualifier:
        :type qualifier:
        """
        return self._dllwrap.ConfigureIICEEPROMQualifier(self._vi, qualifier)

    def ConfigureIICData(self, address, data):
        """

        :param address:
        :type address:
        :param data:
        :type data:
        """
        return self._dllwrap.ConfigureIICData(self._vi, address, data)

    def ConfigureLINTriggerSource(self, triggerSource, baudRate, signal, trigger):
        """

        :param triggerSource:
        :type triggerSource:
        :param baudRate:
        :type baudRate:
        :param signal:
        :type signal:
        :param trigger:
        :type trigger:
        """
        return self._dllwrap.ConfigureLINTriggerSource(self._vi, triggerSource, baudRate, signal, trigger)

    def ConfigureSequenceTriggerFind(self, find):
        """

        :param find:
        :type find:
        """
        return self._dllwrap.ConfigureSequenceTriggerFind(self._vi, find)

    def ConfigureSequenceTrigger(self, trigger, count):
        """

        :param trigger:
        :type trigger:
        :param count:
        :type count:
        """
        return self._dllwrap.ConfigureSequenceTrigger(self._vi, trigger, count)

    def ConfigureSequenceReset(self, reset, timeout):
        """

        :param reset:
        :type reset:
        :param timeout:
        :type timeout:
        """
        return self._dllwrap.ConfigureSequenceReset(self._vi, reset, timeout)

    def ConfigureSequenceEdge(self, edge, triggerSource, slope):
        """

        :param edge:
        :type edge:
        :param triggerSource:
        :type triggerSource:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigureSequenceEdge(self._vi, edge, triggerSource, slope)

    def ConfigureSequencePattern(self, pattern, dataValue, dataMask):
        """

        :param pattern:
        :type pattern:
        :param dataValue:
        :type dataValue:
        :param dataMask:
        :type dataMask:
        """
        return self._dllwrap.ConfigureSequencePattern(self._vi, pattern, dataValue, dataMask)

    def ConfigureSPITriggerSource(self, SPIDataWidth, dataValue, dataMask):
        """

        :param SPIDataWidth:
        :type SPIDataWidth:
        :param dataValue:
        :type dataValue:
        :param dataMask:
        :type dataMask:
        """
        return self._dllwrap.ConfigureSPITriggerSource(self._vi, SPIDataWidth, dataValue, dataMask)

    def ConfigureSPITriggerSignals(self, clockSource, slope, dataSource, frame_by, frameSource):
        """

        :param clockSource:
        :type clockSource:
        :param slope:
        :type slope:
        :param dataSource:
        :type dataSource:
        :param frame_by:
        :type frame_by:
        :param frameSource:
        :type frameSource:
        """
        return self._dllwrap.ConfigureSPITriggerSignals(self._vi, clockSource, slope, dataSource, frame_by, frameSource)

    def ConfigureSPITriggerTimeout(self, timeout):
        """

        :param timeout:
        :type timeout:
        """
        return self._dllwrap.ConfigureSPITriggerTimeout(self._vi, timeout)

    def ConfigureGlitchTriggerSource(self, source, level, glitchCondition, glitchPolarity):
        """

        :param source:
        :type source:
        :param level:
        :type level:
        :param glitchCondition:
        :type glitchCondition:
        :param glitchPolarity:
        :type glitchPolarity:
        """
        return self._dllwrap.ConfigureGlitchTriggerSource(self._vi, source, level, glitchCondition, glitchPolarity)

    def ConfigureGlitchWidth(self, minWidth, maxWidth):
        """

        :param minWidth:
        :type minWidth:
        :param maxWidth:
        :type maxWidth:
        """
        return self._dllwrap.ConfigureGlitchWidth(self._vi, minWidth, maxWidth)

    def ConfigureGlitchRange(self, greaterThanTime, lessThanTime):
        """

        :param greaterThanTime:
        :type greaterThanTime:
        :param lessThanTime:
        :type lessThanTime:
        """
        return self._dllwrap.ConfigureGlitchRange(self._vi, greaterThanTime, lessThanTime)

    def ConfigurePatternTrigger(self, dataValue, dataMask, triggerSource, slope):
        """

        :param dataValue:
        :type dataValue:
        :param dataMask:
        :type dataMask:
        :param triggerSource:
        :type triggerSource:
        :param slope:
        :type slope:
        """
        return self._dllwrap.ConfigurePatternTrigger(self._vi, dataValue, dataMask, triggerSource, slope)

    def ConfigureCANTriggerSource(self, source, baudRate, signal, trigger):
        """

        :param source:
        :type source:
        :param baudRate:
        :type baudRate:
        :param signal:
        :type signal:
        :param trigger:
        :type trigger:
        """
        return self._dllwrap.ConfigureCANTriggerSource(self._vi, source, baudRate, signal, trigger)

    def ConfigureDurationTriggerSource(self, qualifier, patternValue, patternMask):
        """

        :param qualifier:
        :type qualifier:
        :param patternValue:
        :type patternValue:
        :param patternMask:
        :type patternMask:
        """
        return self._dllwrap.ConfigureDurationTriggerSource(self._vi, qualifier, patternValue, patternMask)

    def ConfigureDurationWidth(self, maximumDuration_sec, minimumDuration_sec):
        """

        :param maximumDuration_sec:
        :type maximumDuration_sec:
        :param minimumDuration_sec:
        :type minimumDuration_sec:
        """
        return self._dllwrap.ConfigureDurationWidth(self._vi, maximumDuration_sec, minimumDuration_sec)

    def ConfigureDurationRange(self, greaterThanTime, lessThanTime):
        """

        :param greaterThanTime:
        :type greaterThanTime:
        :param lessThanTime:
        :type lessThanTime:
        """
        return self._dllwrap.ConfigureDurationRange(self._vi, greaterThanTime, lessThanTime)

    def ReadWaveform(self, channel, waveformSize, maxTime):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadWaveform(self._vi, channel, waveformSize, maxTime)

    def InitiateAcquisition(self):
        """"""
        return self._dllwrap.InitiateAcquisition(self._vi)

    def AcquisitionStatus(self):
        """"""
        return self._dllwrap.AcquisitionStatus(self._vi)

    def Abort(self):
        """"""
        return self._dllwrap.Abort(self._vi)

    def FetchWaveform(self, channel, waveformSize):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchWaveform(self._vi, channel, waveformSize)

    def ReadMinMaxWaveform(self, channel, waveformSize, maxTime):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadMinMaxWaveform(self._vi, channel, waveformSize, maxTime)

    def FetchMinMaxWaveform(self, channel, waveformSize):
        """

        :param channel:
        :type channel:
        :param waveformSize:
        :type waveformSize:
        """
        return self._dllwrap.FetchMinMaxWaveform(self._vi, channel, waveformSize)

    def ConfigureUSBTriggerSource(self, trigger, speed, dPlus, dMinus):
        """

        :param trigger:
        :type trigger:
        :param speed:
        :type speed:
        :param dPlus:
        :type dPlus:
        :param dMinus:
        :type dMinus:
        """
        return self._dllwrap.ConfigureUSBTriggerSource(self._vi, trigger, speed, dPlus, dMinus)

    def ConfigureMeasSource(self, source1, source2):
        """

        :param source1:
        :type source1:
        :param source2:
        :type source2:
        """
        return self._dllwrap.ConfigureMeasSource(self._vi, source1, source2)

    def ConfigureMeasurementDelay(self, edgeSpec1, edgeSpec2):
        """

        :param edgeSpec1:
        :type edgeSpec1:
        :param edgeSpec2:
        :type edgeSpec2:
        """
        return self._dllwrap.ConfigureMeasurementDelay(self._vi, edgeSpec1, edgeSpec2)

    def ConfigureRefLevels(self, lowRef, midRef, highRef):
        """

        :param lowRef:
        :type lowRef:
        :param midRef:
        :type midRef:
        :param highRef:
        :type highRef:
        """
        return self._dllwrap.ConfigureRefLevels(self._vi, lowRef, midRef, highRef)

    def ReadWaveformMeasurement(self, channel, measurementFunction, maxTime):
        """

        :param channel:
        :type channel:
        :param measurementFunction:
        :type measurementFunction:
        :param maxTime:
        :type maxTime:
        """
        return self._dllwrap.ReadWaveformMeasurement(self._vi, channel, measurementFunction, maxTime)

    def FetchWaveformMeasurement(self, channel, measurementFunction):
        """

        :param channel:
        :type channel:
        :param measurementFunction:
        :type measurementFunction:
        """
        return self._dllwrap.FetchWaveformMeasurement(self._vi, channel, measurementFunction)

    def AutoSetup(self):
        """"""
        return self._dllwrap.AutoSetup(self._vi)

    def IsInvalidWfmElement(self, elementValue):
        """

        :param elementValue:
        :type elementValue:
        """
        return self._dllwrap.IsInvalidWfmElement(self._vi, elementValue)

    def error_query(self):
        """"""
        return self._dllwrap.error_query(self._vi)

    def GetError(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetError(self._vi, bufferSize)

    def ClearError(self):
        """"""
        return self._dllwrap.ClearError(self._vi)

    def error_message(self, errorCode):
        """

        :param errorCode:
        :type errorCode:
        """
        return self._dllwrap.error_message(self._vi, errorCode)

    def GetNextInterchangeWarning(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.GetNextInterchangeWarning(self._vi, bufferSize)

    def ResetInterchangeCheck(self):
        """"""
        return self._dllwrap.ResetInterchangeCheck(self._vi)

    def ClearInterchangeWarnings(self):
        """"""
        return self._dllwrap.ClearInterchangeWarnings(self._vi)

    def InvalidateAllAttributes(self):
        """"""
        return self._dllwrap.InvalidateAllAttributes(self._vi)

    def reset(self):
        """"""
        return self._dllwrap.reset(self._vi)

    def ResetWithDefaults(self):
        """"""
        return self._dllwrap.ResetWithDefaults(self._vi)

    def self_test(self):
        """"""
        return self._dllwrap.self_test(self._vi)

    def revision_query(self):
        """"""
        return self._dllwrap.revision_query(self._vi)

    def Disable(self):
        """"""
        return self._dllwrap.Disable(self._vi)

    def viWrite(self, buffer, count):
        """

        :param buffer:
        :type buffer:
        :param count:
        :type count:
        """
        return self._dllwrap.viWrite(self._vi, buffer, count)

    def viRead(self, bufferSize):
        """

        :param bufferSize:
        :type bufferSize:
        """
        return self._dllwrap.viRead(self._vi, bufferSize)

    def WriteInstrData(self, writeBuffer):
        """

        :param writeBuffer:
        :type writeBuffer:
        """
        return self._dllwrap.WriteInstrData(self._vi, writeBuffer)

    def ReadInstrData(self, numBytes):
        """

        :param numBytes:
        :type numBytes:
        """
        return self._dllwrap.ReadInstrData(self._vi, numBytes)

    def GetAttributeViInt32(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViInt32(self._vi, channelName, attribute)

    def GetAttributeViReal64(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViReal64(self._vi, channelName, attribute)

    def GetAttributeViString(self, channelName, attribute, bufSize):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param bufSize:
        :type bufSize:
        """
        return self._dllwrap.GetAttributeViString(self._vi, channelName, attribute, bufSize)

    def GetAttributeViSession(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViSession(self._vi, channelName, attribute)

    def GetAttributeViBoolean(self, channelName, attribute):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        """
        return self._dllwrap.GetAttributeViBoolean(self._vi, channelName, attribute)

    def SetAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViInt32(self._vi, channelName, attribute, value)

    def SetAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViReal64(self._vi, channelName, attribute, value)

    def SetAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViString(self._vi, channelName, attribute, value)

    def SetAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViSession(self._vi, channelName, attribute, value)

    def SetAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.SetAttributeViBoolean(self._vi, channelName, attribute, value)

    def CheckAttributeViInt32(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViInt32(self._vi, channelName, attribute, value)

    def CheckAttributeViReal64(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViReal64(self._vi, channelName, attribute, value)

    def CheckAttributeViString(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViString(self._vi, channelName, attribute, value)

    def CheckAttributeViSession(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViSession(self._vi, channelName, attribute, value)

    def CheckAttributeViBoolean(self, channelName, attribute, value):
        """

        :param channelName:
        :type channelName:
        :param attribute:
        :type attribute:
        :param value:
        :type value:
        """
        return self._dllwrap.CheckAttributeViBoolean(self._vi, channelName, attribute, value)

    def IviInit(self, resourceName, IDQuery, reset):
        """

        :param resourceName:
        :type resourceName:
        :param IDQuery:
        :type IDQuery:
        :param reset:
        :type reset:
        """
        return self._dllwrap.IviInit(resourceName, IDQuery, reset, self._vi)

    def IviClose(self):
        """"""
        return self._dllwrap.IviClose(self._vi)
