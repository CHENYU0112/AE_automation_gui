from __future__ import annotations

from ctypes import byref

from pverify.core.lab.ivi.headers.ivi import *
from pverify.core.lab.ivi.helper import *
from pverify.core.lab.ivi.ivi_base_classes import IVICDriverWrapper

from . import ag6000_const as const
from .ag6000_const import *


class ag6000_dllwrap(IVICDriverWrapper):
    def __init__(self):
        super().__init__()
        self._dll = load_dll("ag6000_32.dll", "ag6000_64.dll", __file__)
        """:type : ctypes.WinDLL"""

    @property
    def dll(self):
        return self._dll

    @property
    def drivername(self):
        return "ag6000"

    @property
    def const(self):
        return const

    def init(self, resourceName, IDQuery, resetDevice):
        vi = ViSession()
        status = self.dll.ag6000_init(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(resetDevice), byref(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(vi.value)

    def InitWithOptions(self, resourceName, IDQuery, resetDevice, optionString):
        newVi = ViSession()
        status = self.dll.ag6000_InitWithOptions(
            ViRsrc(resourceName),
            ViBoolean(IDQuery),
            ViBoolean(resetDevice),
            ViConstString(optionString),
            byref(newVi),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(newVi.value)

    def close(self, vi):
        status = self.dll.ag6000_close(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def DeviceClear(self, instrumentHandle):
        status = self.dll.ag6000_DeviceClear(ViSession(instrumentHandle))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def GetNextCoercionRecord(self, vi, bufferSize):
        record = ARRAY_ViChar(bufferSize)
        status = self.dll.ag6000_GetNextCoercionRecord(ViSession(vi), ViInt32(bufferSize), record)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(record)

    def LockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.ag6000_LockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def UnlockSession(self, vi):
        callerHasLock = ViBoolean()
        status = self.dll.ag6000_UnlockSession(ViSession(vi), byref(callerHasLock))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(callerHasLock.value)

    def GetChannelName(self, vi, index, bufferSize):
        name = ARRAY_ViChar(bufferSize)
        status = self.dll.ag6000_GetChannelName(ViSession(vi), ViInt32(index), ViInt32(bufferSize), name)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(name)

    def ConfigureAcquisitionType(self, vi, acquisitionType):
        status = self.dll.ag6000_ConfigureAcquisitionType(ViSession(vi), ViInt32(acquisitionType))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionMode(self, vi, acquisitionMode):
        status = self.dll.ag6000_ConfigureAcquisitionMode(ViSession(vi), ViInt32(acquisitionMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureAcquisitionRecord(self, vi, timePerRecord, minimumRecordLength, acqStartTime):
        status = self.dll.ag6000_ConfigureAcquisitionRecord(
            ViSession(vi),
            ViReal64(timePerRecord),
            ViInt32(minimumRecordLength),
            ViReal64(acqStartTime),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRecordMode(self, vi, horizontalRecordMode):
        status = self.dll.ag6000_ConfigureRecordMode(ViSession(vi), ViInt32(horizontalRecordMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureNumAverages(self, vi, numberOfAverages):
        status = self.dll.ag6000_ConfigureNumAverages(ViSession(vi), ViInt32(numberOfAverages))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SampleMode(self, vi):
        sampleMode = ViInt32()
        status = self.dll.ag6000_SampleMode(ViSession(vi), byref(sampleMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(sampleMode.value)

    def SampleRate(self, vi):
        sampleRate = ViReal64()
        status = self.dll.ag6000_SampleRate(ViSession(vi), byref(sampleRate))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(sampleRate.value)

    def ConfigureMathChannelEnabled(self, vi, channelEnabled):
        status = self.dll.ag6000_ConfigureMathChannelEnabled(ViSession(vi), ViBoolean(channelEnabled))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathChannel(self, vi, source, operation):
        status = self.dll.ag6000_ConfigureMathChannel(ViSession(vi), ViConstString(source), ViInt32(operation))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathFunction(self, vi, source1, source2, operation):
        status = self.dll.ag6000_ConfigureMathFunction(
            ViSession(vi),
            ViConstString(source1),
            ViConstString(source2),
            ViInt32(operation),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathSettings(self, vi, scale, offset):
        status = self.dll.ag6000_ConfigureMathSettings(ViSession(vi), ViReal64(scale), ViReal64(offset))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMathFFT(self, vi, span, center, window):
        status = self.dll.ag6000_ConfigureMathFFT(ViSession(vi), ViReal64(span), ViReal64(center), ViInt32(window))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ActualRecordLength(self, vi):
        actualRecordLength = ViInt32()
        status = self.dll.ag6000_ActualRecordLength(ViSession(vi), byref(actualRecordLength))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(actualRecordLength.value)

    def ConfigureInitiateContinuous(self, vi, continuous):
        status = self.dll.ag6000_ConfigureInitiateContinuous(ViSession(vi), ViBoolean(continuous))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannel(self, vi, channel, range, offset, coupling, probeAttenuation, enabled):
        status = self.dll.ag6000_ConfigureChannel(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(range),
            ViReal64(offset),
            ViInt32(coupling),
            ViReal64(probeAttenuation),
            ViBoolean(enabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalChannel(self, vi, channelName, size, threshold, thresholdValue, channelEnabled):
        status = self.dll.ag6000_ConfigureDigitalChannel(
            ViSession(vi),
            ViConstString(channelName),
            ViInt32(size),
            ViInt32(threshold),
            ViReal64(thresholdValue),
            ViBoolean(channelEnabled),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChanCharacteristics(self, vi, channel, inputImpedance, maxInputFrequency):
        status = self.dll.ag6000_ConfigureChanCharacteristics(
            ViSession(vi),
            ViConstString(channel),
            ViReal64(inputImpedance),
            ViReal64(maxInputFrequency),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AutoProbeSenseValue(self, vi, channel):
        autoProbeSenseValue = ViReal64()
        status = self.dll.ag6000_AutoProbeSenseValue(ViSession(vi), ViConstString(channel), byref(autoProbeSenseValue))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(autoProbeSenseValue.value)

    def ConfigureChannelInvert(self, vi, channel, invert):
        status = self.dll.ag6000_ConfigureChannelInvert(ViSession(vi), ViConstString(channel), ViBoolean(invert))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannelVernier(self, vi, channel, vernier):
        status = self.dll.ag6000_ConfigureChannelVernier(ViSession(vi), ViConstString(channel), ViBoolean(vernier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannelProbe(self, vi, channel, skew, units):
        status = self.dll.ag6000_ConfigureChannelProbe(
            ViSession(vi), ViConstString(channel), ViReal64(skew), ViInt32(units)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureChannelLabel(self, vi, channel, label):
        status = self.dll.ag6000_ConfigureChannelLabel(ViSession(vi), ViConstString(channel), ViConstString(label))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDigitalPosition(self, vi, channelName, position):
        status = self.dll.ag6000_ConfigureDigitalPosition(ViSession(vi), ViConstString(channelName), ViInt32(position))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTimebaseMode(self, vi, timebaseMode):
        status = self.dll.ag6000_ConfigureTimebaseMode(ViSession(vi), ViInt32(timebaseMode))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTimebase(self, vi, reference, vernier):
        status = self.dll.ag6000_ConfigureTimebase(ViSession(vi), ViInt32(reference), ViBoolean(vernier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureWindowTimebase(self, vi, position, range):
        status = self.dll.ag6000_ConfigureWindowTimebase(ViSession(vi), ViReal64(position), ViReal64(range))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTrigger(self, vi, triggerType, holdoff):
        status = self.dll.ag6000_ConfigureTrigger(ViSession(vi), ViInt32(triggerType), ViReal64(holdoff))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerCoupling(self, vi, coupling):
        status = self.dll.ag6000_ConfigureTriggerCoupling(ViSession(vi), ViInt32(coupling))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerModifier(self, vi, modifier):
        status = self.dll.ag6000_ConfigureTriggerModifier(ViSession(vi), ViInt32(modifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTriggerReject(self, vi, noiseReject, HFReject):
        status = self.dll.ag6000_ConfigureTriggerReject(ViSession(vi), ViBoolean(noiseReject), ViBoolean(HFReject))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureEdgeTriggerSource(self, vi, source, level, slope):
        status = self.dll.ag6000_ConfigureEdgeTriggerSource(
            ViSession(vi), ViConstString(source), ViReal64(level), ViInt32(slope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerSource(self, vi, source, TVSignalFormat, TVEvent, TVPolarity):
        status = self.dll.ag6000_ConfigureTVTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViInt32(TVSignalFormat),
            ViInt32(TVEvent),
            ViInt32(TVPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureTVTriggerLineNumber(self, vi, lineNumber):
        status = self.dll.ag6000_ConfigureTVTriggerLineNumber(ViSession(vi), ViInt32(lineNumber))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureIICTriggerSource(self, instrumentHandle, serialClockSource, serialDataSource, type):
        status = self.dll.ag6000_ConfigureIICTriggerSource(
            ViSession(instrumentHandle),
            ViConstString(serialClockSource),
            ViConstString(serialDataSource),
            ViInt32(type),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureIICEEPROMQualifier(self, vi, qualifier):
        status = self.dll.ag6000_ConfigureIICEEPROMQualifier(ViSession(vi), ViInt32(qualifier))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureIICData(self, vi, address, data):
        status = self.dll.ag6000_ConfigureIICData(ViSession(vi), ViInt32(address), ViInt32(data))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureLINTriggerSource(self, vi, triggerSource, baudRate, signal, trigger):
        status = self.dll.ag6000_ConfigureLINTriggerSource(
            ViSession(vi),
            ViConstString(triggerSource),
            ViInt32(baudRate),
            ViInt32(signal),
            ViInt32(trigger),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSequenceTriggerFind(self, vi, find):
        status = self.dll.ag6000_ConfigureSequenceTriggerFind(ViSession(vi), ViInt32(find))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSequenceTrigger(self, instrumentHandle, trigger, count):
        status = self.dll.ag6000_ConfigureSequenceTrigger(ViSession(instrumentHandle), ViInt32(trigger), ViInt32(count))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSequenceReset(self, vi, reset, timeout):
        status = self.dll.ag6000_ConfigureSequenceReset(ViSession(vi), ViInt32(reset), ViReal64(timeout))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSequenceEdge(self, vi, edge, triggerSource, slope):
        status = self.dll.ag6000_ConfigureSequenceEdge(
            ViSession(vi), ViInt32(edge), ViConstString(triggerSource), ViInt32(slope)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSequencePattern(self, vi, pattern, dataValue, dataMask):
        status = self.dll.ag6000_ConfigureSequencePattern(
            ViSession(vi), ViInt32(pattern), ViInt32(dataValue), ViInt32(dataMask)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSPITriggerSource(self, vi, SPIDataWidth, dataValue, dataMask):
        status = self.dll.ag6000_ConfigureSPITriggerSource(
            ViSession(vi), ViInt32(SPIDataWidth), ViInt32(dataValue), ViInt32(dataMask)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSPITriggerSignals(self, vi, clockSource, slope, dataSource, frame_by, frameSource):
        status = self.dll.ag6000_ConfigureSPITriggerSignals(
            ViSession(vi),
            ViConstString(clockSource),
            ViInt32(slope),
            ViConstString(dataSource),
            ViInt32(frame_by),
            ViConstString(frameSource),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureSPITriggerTimeout(self, vi, timeout):
        status = self.dll.ag6000_ConfigureSPITriggerTimeout(ViSession(vi), ViReal64(timeout))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGlitchTriggerSource(self, vi, source, level, glitchCondition, glitchPolarity):
        status = self.dll.ag6000_ConfigureGlitchTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViReal64(level),
            ViInt32(glitchCondition),
            ViInt32(glitchPolarity),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGlitchWidth(self, vi, minWidth, maxWidth):
        status = self.dll.ag6000_ConfigureGlitchWidth(ViSession(vi), ViReal64(minWidth), ViReal64(maxWidth))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureGlitchRange(self, vi, greaterThanTime, lessThanTime):
        status = self.dll.ag6000_ConfigureGlitchRange(ViSession(vi), ViReal64(greaterThanTime), ViReal64(lessThanTime))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigurePatternTrigger(self, vi, dataValue, dataMask, triggerSource, slope):
        status = self.dll.ag6000_ConfigurePatternTrigger(
            ViSession(vi),
            ViInt32(dataValue),
            ViInt32(dataMask),
            ViConstString(triggerSource),
            ViInt32(slope),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureCANTriggerSource(self, vi, source, baudRate, signal, trigger):
        status = self.dll.ag6000_ConfigureCANTriggerSource(
            ViSession(vi),
            ViConstString(source),
            ViInt32(baudRate),
            ViInt32(signal),
            ViInt32(trigger),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDurationTriggerSource(self, vi, qualifier, patternValue, patternMask):
        status = self.dll.ag6000_ConfigureDurationTriggerSource(
            ViSession(vi), ViInt32(qualifier), ViInt32(patternValue), ViInt32(patternMask)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDurationWidth(self, vi, maximumDuration_sec, minimumDuration_sec):
        status = self.dll.ag6000_ConfigureDurationWidth(
            ViSession(vi), ViReal64(maximumDuration_sec), ViReal64(minimumDuration_sec)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureDurationRange(self, vi, greaterThanTime, lessThanTime):
        status = self.dll.ag6000_ConfigureDurationRange(
            ViSession(vi), ViReal64(greaterThanTime), ViReal64(lessThanTime)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadWaveform(self, vi, channel, waveformSize, maxTime):
        waveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.ag6000_ReadWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            ViInt32(maxTime),
            waveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        waveform = list(waveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveform, actualPoints, initialX, xIncrement

    def InitiateAcquisition(self, vi):
        status = self.dll.ag6000_InitiateAcquisition(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def AcquisitionStatus(self, vi):
        status = ViInt32()
        _status = self.dll.ag6000_AcquisitionStatus(ViSession(vi), byref(status))
        if int(_status) < 0:
            raise InstrumentError(_status)
        elif int(_status) > 0:
            raise InstrumentWarning(_status)
        return int(status.value)

    def Abort(self, vi):
        status = self.dll.ag6000_Abort(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def FetchWaveform(self, vi, channel, waveformSize):
        waveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.ag6000_FetchWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            waveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        waveform = list(waveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return waveform, actualPoints, initialX, xIncrement

    def ReadMinMaxWaveform(self, vi, channel, waveformSize, maxTime):
        minWaveform = ARRAY_ViReal64(waveformSize)
        maxWaveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.ag6000_ReadMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            ViInt32(maxTime),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def FetchMinMaxWaveform(self, vi, channel, waveformSize):
        minWaveform = ARRAY_ViReal64(waveformSize)
        maxWaveform = ARRAY_ViReal64(waveformSize)
        actualPoints = ViInt32()
        initialX = ViReal64()
        xIncrement = ViReal64()
        status = self.dll.ag6000_FetchMinMaxWaveform(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(waveformSize),
            minWaveform,
            maxWaveform,
            byref(actualPoints),
            byref(initialX),
            byref(xIncrement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        minWaveform = list(minWaveform)
        maxWaveform = list(maxWaveform)
        actualPoints = int(actualPoints.value)
        initialX = float(initialX.value)
        xIncrement = float(xIncrement.value)
        return minWaveform, maxWaveform, actualPoints, initialX, xIncrement

    def ConfigureUSBTriggerSource(self, vi, trigger, speed, dPlus, dMinus):
        status = self.dll.ag6000_ConfigureUSBTriggerSource(
            ViSession(vi),
            ViInt32(trigger),
            ViInt32(speed),
            ViConstString(dPlus),
            ViConstString(dMinus),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasSource(self, vi, source1, source2):
        status = self.dll.ag6000_ConfigureMeasSource(ViSession(vi), ViConstString(source1), ViConstString(source2))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureMeasurementDelay(self, vi, edgeSpec1, edgeSpec2):
        status = self.dll.ag6000_ConfigureMeasurementDelay(ViSession(vi), ViInt32(edgeSpec1), ViInt32(edgeSpec2))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ConfigureRefLevels(self, vi, lowRef, midRef, highRef):
        status = self.dll.ag6000_ConfigureRefLevels(
            ViSession(vi), ViReal64(lowRef), ViReal64(midRef), ViReal64(highRef)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadWaveformMeasurement(self, vi, channel, measurementFunction, maxTime):
        measurement = ViReal64()
        status = self.dll.ag6000_ReadWaveformMeasurement(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(measurementFunction),
            ViInt32(maxTime),
            byref(measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def FetchWaveformMeasurement(self, vi, channel, measurementFunction):
        measurement = ViReal64()
        status = self.dll.ag6000_FetchWaveformMeasurement(
            ViSession(vi),
            ViConstString(channel),
            ViInt32(measurementFunction),
            byref(measurement),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(measurement.value)

    def AutoSetup(self, vi):
        status = self.dll.ag6000_AutoSetup(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IsInvalidWfmElement(self, vi, elementValue):
        isInvalid = ViBoolean()
        status = self.dll.ag6000_IsInvalidWfmElement(ViSession(vi), ViReal64(elementValue), byref(isInvalid))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(isInvalid.value)

    def error_query(self, vi):
        errorCode = ViInt32()
        errorMessage = ARRAY_ViChar(1024)
        status = self.dll.ag6000_error_query(ViSession(vi), byref(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        errorCode = int(errorCode.value)
        errorMessage = decode(errorMessage)
        return errorCode, errorMessage

    def GetError(self, vi, bufferSize):
        code = ViStatus()
        description = ARRAY_ViChar(bufferSize)
        status = self.dll.ag6000_GetError(ViSession(vi), byref(code), ViInt32(bufferSize), description)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        description = decode(description)
        return code, description

    def ClearError(self, vi):
        status = self.dll.ag6000_ClearError(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def error_message(self, vi, errorCode):
        errorMessage = ARRAY_ViChar(256)
        status = self.dll.ag6000_error_message(ViSession(vi), ViStatus(errorCode), errorMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(errorMessage)

    def GetNextInterchangeWarning(self, vi, bufferSize):
        warnString = ARRAY_ViChar(bufferSize)
        status = self.dll.ag6000_GetNextInterchangeWarning(ViSession(vi), ViInt32(bufferSize), warnString)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(warnString)

    def ResetInterchangeCheck(self, vi):
        status = self.dll.ag6000_ResetInterchangeCheck(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ClearInterchangeWarnings(self, vi):
        status = self.dll.ag6000_ClearInterchangeWarnings(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def InvalidateAllAttributes(self, vi):
        status = self.dll.ag6000_InvalidateAllAttributes(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def reset(self, vi):
        status = self.dll.ag6000_reset(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ResetWithDefaults(self, vi):
        status = self.dll.ag6000_ResetWithDefaults(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def self_test(self, vi):
        selfTestResult = ViInt16()
        selfTestMessage = ARRAY_ViChar(1024)
        status = self.dll.ag6000_self_test(ViSession(vi), byref(selfTestResult), selfTestMessage)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        selfTestResult = int(selfTestResult.value)
        selfTestMessage = decode(selfTestMessage)
        return selfTestResult, selfTestMessage

    def revision_query(self, vi):
        instrumentDriverRevision = ARRAY_ViChar(1024)
        firmwareRevision = ARRAY_ViChar(1024)
        status = self.dll.ag6000_revision_query(ViSession(vi), instrumentDriverRevision, firmwareRevision)
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        instrumentDriverRevision = decode(instrumentDriverRevision)
        firmwareRevision = decode(firmwareRevision)
        return instrumentDriverRevision, firmwareRevision

    def Disable(self, vi):
        status = self.dll.ag6000_Disable(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def viWrite(self, vi, buffer, count):
        _buffer = (ViByte * len(buffer))(*buffer)
        returnCount = ViInt64()
        status = self.dll.ag6000_viWrite(ViSession(vi), _buffer, ViInt64(count), byref(returnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(returnCount.value)

    def viRead(self, vi, bufferSize):
        buffer = ARRAY_ViByte(bufferSize)
        returnCount = ViInt64()
        status = self.dll.ag6000_viRead(ViSession(vi), ViInt64(bufferSize), buffer, byref(returnCount))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        returnCount = int(returnCount.value)
        return buffer, returnCount

    def WriteInstrData(self, vi, writeBuffer):
        status = self.dll.ag6000_WriteInstrData(ViSession(vi), ViConstString(writeBuffer))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def ReadInstrData(self, vi, numBytes):
        rdBuf = ARRAY_ViChar(numBytes)
        bytesRead = ViInt32()
        status = self.dll.ag6000_ReadInstrData(ViSession(vi), ViInt32(numBytes), rdBuf, byref(bytesRead))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        rdBuf = decode(rdBuf)
        bytesRead = int(bytesRead.value)
        return rdBuf, bytesRead

    def GetAttributeViInt32(self, vi, channelName, attribute):
        value = ViInt32()
        status = self.dll.ag6000_GetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViReal64(self, vi, channelName, attribute):
        value = ViReal64()
        status = self.dll.ag6000_GetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return float(value.value)

    def GetAttributeViString(self, vi, channelName, attribute, bufSize):
        value = ARRAY_ViChar(bufSize)
        status = self.dll.ag6000_GetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViInt32(bufSize),
            value,
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return decode(value)

    def GetAttributeViSession(self, vi, channelName, attribute):
        value = ViSession()
        status = self.dll.ag6000_GetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return int(value.value)

    def GetAttributeViBoolean(self, vi, channelName, attribute):
        value = ViBoolean()
        status = self.dll.ag6000_GetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), byref(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)
        return bool(value.value)

    def SetAttributeViInt32(self, vi, channelName, attribute, value):
        status = self.dll.ag6000_SetAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViReal64(self, vi, channelName, attribute, value):
        status = self.dll.ag6000_SetAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViString(self, vi, channelName, attribute, value):
        status = self.dll.ag6000_SetAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViSession(self, vi, channelName, attribute, value):
        status = self.dll.ag6000_SetAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def SetAttributeViBoolean(self, vi, channelName, attribute, value):
        status = self.dll.ag6000_SetAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViInt32(self, vi, channelName, attribute, value):
        status = self.dll.ag6000_CheckAttributeViInt32(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViInt32(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViReal64(self, vi, channelName, attribute, value):
        status = self.dll.ag6000_CheckAttributeViReal64(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViReal64(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViString(self, vi, channelName, attribute, value):
        status = self.dll.ag6000_CheckAttributeViString(
            ViSession(vi),
            ViConstString(channelName),
            ViAttr(attribute),
            ViConstString(value),
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViSession(self, vi, channelName, attribute, value):
        status = self.dll.ag6000_CheckAttributeViSession(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViSession(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def CheckAttributeViBoolean(self, vi, channelName, attribute, value):
        status = self.dll.ag6000_CheckAttributeViBoolean(
            ViSession(vi), ViConstString(channelName), ViAttr(attribute), ViBoolean(value)
        )
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviInit(self, resourceName, IDQuery, reset, vi):
        status = self.dll.ag6000_IviInit(ViRsrc(resourceName), ViBoolean(IDQuery), ViBoolean(reset), ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return

    def IviClose(self, vi):
        status = self.dll.ag6000_IviClose(ViSession(vi))
        if int(status) < 0:
            raise InstrumentError(status)
        elif int(status) > 0:
            raise InstrumentWarning(status)

        return
