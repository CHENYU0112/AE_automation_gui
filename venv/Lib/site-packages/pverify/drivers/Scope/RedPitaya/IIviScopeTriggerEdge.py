# -------------------------------------------------------------------------------
# Name           :
# Description    :
#
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
from __future__ import annotations

from pverify.drivers.Scope.RedPitaya import IIviScopeBase


class IIviScopeTriggerEdge(IIviScopeBase.IIviScopeBase):
    """IVI Scope class-compliant edge trigger interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        Slope [String] [rw]
            The slope, a rising or a falling edge, that triggers the oscilloscope.
            Values:
                "IviScopeTriggerSlopeNegative"
                "IviScopeTriggerSlopePositive"

        *Hysteresis [Value] [rw]
            Noise rejection setting for the edge trigger source trigger level.
            The value is in Volt.

    Methods:
        Configure(Source, Level, Slope)
            Configures the conditions for edge trigger. An edge trigger occurs
            when the trigger source signal passes through the trigger level with
            the specified slope.

    """

    def __init__(self, parent, interface):
        IIviScopeBase.IIviScopeBase.__init__(self, interface)
        self.parent = parent

    # Read-write dependent properties
    @property
    def Slope(self):
        """
        The slope, a rising or a falling edge, that triggers the oscilloscope.

        :rtype:IviScopeTriggerSlopeEnum
        """
        return self.parent.parent.trig_slope

    @Slope.setter
    def Slope(self, value):
        """
        The slope, a rising or a falling edge, that triggers the oscilloscope.

        :type value: IviScopeTriggerSlopeEnum
        """
        self.parent.parent.trig_slope = value.value

    @property
    def Source(self):
        """
        The signal the oscilloscope monitors for a trigger. It can be channel
        or one of many other values.
        """
        return self.parent.parent.trig_source

    @Source.setter
    def Source(self, value):
        """
        The signal the oscilloscope monitors for a trigger. It can be channel
        or one of many other values.
        """
        if (value >= 1) and (value <= 2):
            # RedPitaya: Aquisition of waveform works only if TRIG is set after(!) START
            #            Class IIviScope is storing the values.
            #            Class IIviScopeTriggerEdge is setting the values
            #            Class IIviScopeMeasurements ais using the values
            self.parent.parent.trig_source = value
        else:
            raise IndexError("Channel '%d' does not exist." % value)

    @property
    def Level(self):
        """
        The voltage threshold for the trigger subsystem. The units are volts.
        """
        pa = self.parent.TriggerPA()
        ret = self.interface.vi_query(":ACQ:TRIG:LEV?", rformat="%f\n")
        self.GetError()
        return ret * pa

    @Level.setter
    def Level(self, value):
        """
        The voltage threshold for the trigger subsystem. The units are volts.
        """
        val = value / self.parent.TriggerPA()
        val = min(1, max(-1, val))  # FIXME HV,LV setting
        self.interface.vi_write(f":ACQ:TRIG:LEV {val:f}")
        self.GetError()

    @property
    def HysteresisVolt(self):
        """
        Noise rejection setting for the edge trigger source trigger level.

        :rtype: float
        """
        pa = self.parent.TriggerPA()
        ret = self.interface.vi_query(":ACQ:TRIG:HYST?", rformat="%f\n")
        self.GetError()
        return ret * pa

    @HysteresisVolt.setter
    def HysteresisVolt(self, value):
        """
        Noise rejection setting for the edge trigger source trigger level.

        :type value: float
        """
        val = value / self.parent.TriggerPA()
        val = min(1, max(-1, val))  # FIXME HV,LV setting
        self.interface.vi_write(f":ACQ:TRIG:HYST {val:f}")
        self.GetError()

    @property
    def Hysteresis(self):
        """
        Noise rejection setting for the edge trigger source trigger level.

        :rtype: IviScopeTriggerHysteresisEnum
        """
        val = self.HysteresisVolt
        if (
            val
            < (
                self.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisHigh.value
                - self.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow.value
            )
            / 2
        ):
            return self.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow
        else:
            return self.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisHigh

    @Hysteresis.setter
    def Hysteresis(self, value):
        """
        Noise rejection setting for the edge trigger source trigger level.

        :type value: IviScopeTriggerHysteresisEnum
        """
        self.HysteresisVolt = value.value

    @property
    def HFRejection(self):
        """
        Status of the trigger source low-pass filter (HF rejection) for edge triggering.

        :rtype: IviScopeTriggerHFRejectionEnum
        """
        return self.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejectionOff

    @HFRejection.setter
    def HFRejection(self, value):
        """
        Status of the trigger source low-pass filter (HF rejection) for edge triggering.
        :type value: IviScopeTriggerHFRejectionEnum
        """
        if value != self.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejectionOff:
            msg = "Redpitaya: Only IviScopeTriggerModifierNone is supported!"
            raise ValueError(msg)

    # Methods
    def Configure(self, Source, Level, Slope):
        """
        Configures the conditions for edge trigger. An edge trigger occurs
        when the trigger source signal passes through the trigger level with
        the specified slope.

        :param Source: Specifies the trigger source. This value sets the Trigger Sourceproperty.
        :type Source: int
        :param Level: Specifies the trigger level. This value sets the Trigger Level property.
        :type Level: float
        :param Slope: Specifies the trigger slope. This value sets the Trigger Slope property.
        :type Slope: IviScopeTriggerSlopeEnum
        """
        # Set source
        self.Source = Source
        # Set level
        self.Level = Level
        # Set slope
        self.Slope = Slope
