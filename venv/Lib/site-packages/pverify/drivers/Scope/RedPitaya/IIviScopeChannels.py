# -------------------------------------------------------------------------------
# Name           :
# Description    :
#
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
from __future__ import annotations

from pverify.drivers.Scope.RedPitaya import IIviScopeBase
from pverify.drivers.Scope.RedPitaya.IIviScopeChannel import IIviScopeChannel


class IIviScopeChannels(IIviScopeBase.IIviScopeBase):
    """IVI Scope class-compliant channel collection interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Methods:
        Item
            An interface reference pointer to one of the IviScopeChannel
            interfaces which is selected by the channel name.

        Count
            The number of channels.

        Name
            The channel name for a given index.

    """

    def __init__(self, parent):
        self.parent = parent
        if False:
            from .IIviScope import IIviScope

            self.parent = IIviScope()
        IIviScopeBase.IIviScopeBase.__init__(self, self.parent.interface)
        self.__channels = {
            "C1": IIviScopeChannel(self.interface, "1"),
            "C2": IIviScopeChannel(self.interface, "2"),
        }

    # Read only dependent properties
    @property
    def Count(self):
        """
        The number of channels.

        :return: int
        """
        return 2

    # Methods
    def Item(self, Name):
        """
        Returns a pointer to a channel object.

        :param Name: Channel name: "C1", "C2"
        :type Name: int
        :rtype: IIviScopeChannel
        """
        return self.__channels[str(Name)]

    def Name(self, Index):
        """
        Returns the name of a channel.

        :param Index:
            Valid values are between one and the value of the Channel Count property.
            If the user passes an invalid value for the Index parameter, the value of this property is an empty string
        :type Index: int
        """
        if isinstance(Index, int) and 1 <= Index <= 2:
            return ["C1", "C2"][Index - 1]
        else:
            msg = "RedPitaya: Channel index exceeds the limits 1-2"
            raise IndexError(msg)
