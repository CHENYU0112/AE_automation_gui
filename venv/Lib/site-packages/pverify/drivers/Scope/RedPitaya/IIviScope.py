from __future__ import annotations

import contextlib
from time import sleep

from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper

from . import (
    IIviDriverIdentity,
    IIviDriverOperation,
    IIviDriverUtility,
    IIviScopeAcquisition,
    IIviScopeBase,
    IIviScopeChannels,
    IIviScopeMeasurements,
    IIviScopeReferenceLevel,
    IIviScopeTrigger,
)


class IIviScope(IVICOMDriverWrapper, IIviScopeBase.IIviScopeBase):
    """IVI Scope class-compliant root interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        Acquisition
            Pointer to the class-compliant IIviScopeAcquisition interface
        Channels
            Pointer to the class-compliant IIviScopeChannels interface
        measurements
            Pointer to the class-compliant IIviScopeMeasurements interface
        ReferenceLevel
            Pointer to the class-compliant IIviScopeReferenceLevel interface
        Trigger
            Pointer to the class-compliant IIviScopeTrigger interface

        interface
            Specific for instrument connection via VISA.
            Provides interface for wrapped VISA library.

    Methods:
        Initialize(self, ResourceName, IdQuery=1, Reset=1, OptionString="Calibrate=True"):
            Opens the I/O session to the instrument. Driver methods and properties
            that access the instrument are only accessible after Initialize is called.
            Initialize optionally performs a Reset and queries the instrument to
            validate the instrument model.

        Close(self)
            Closes the I/O session to the instrument.
            Driver methods and properties that access the
            instrument are not accessible after Close is called.
    """

    def __init__(self):
        IVICOMDriverWrapper.__init__(self)
        self._delimiter = "\r\n"
        self.IDN = ""
        # RedPitaya: Aquisition of waveform works only if TRIG is set after(!) START
        #            Class IIviScope is storing the values.
        #            Class IIviScopeTriggerEdge is setting the values
        #            Class IIviScopeMeasurements is using the values
        self._trig_source = None
        self._trig_slope = None
        from pverify.drivers.BaseInstrument import BaseVisaInstrument

        self.interface = BaseVisaInstrument()
        self.__Initialized = False
        IIviScopeBase.IIviScopeBase.__init__(self, self.interface)
        self.Acquisition = IIviScopeAcquisition.IIviScopeAcquisition(self)

        self.Channels = IIviScopeChannels.IIviScopeChannels(self)

        self.Measurements = IIviScopeMeasurements.IIviScopeMeasurements(self)

        self.ReferenceLevel = IIviScopeReferenceLevel.IIviScopeReferenceLevel(self)

        self.Trigger = IIviScopeTrigger.IIviScopeTrigger(self)

        self.DriverOperation = IIviDriverOperation.IIviDriverOperation(self)

        self.Identity = IIviDriverIdentity.IIviDriverIdentity(self)

        self.Utility = IIviDriverUtility.IIviDriverUtility(self)

    # Read only dependent properties
    @property
    def Initialized(self):
        """
        Initialized is True between a successful call to the Initialize method
        and a successful call to the Close method, and False at all other
        times.
        """
        return self.__Initialized

    @property
    def drivername(self):
        return "RedPitaya"

    @property
    def trig_slope(self):
        """
        NON STANDRAD FEATURE!
        Returns stored trigger slope.
        :return: string
        """
        return self._trig_slope

    @trig_slope.setter
    def trig_slope(self, value):
        """
        NON STANDRAD FEATURE!
        Stores trigger slope.
        :type value: string
        """
        self._trig_slope = value

    @property
    def trig_source(self):
        """
        NON STANDRAD FEATURE!
        Returns stored trigger source.
        :return: int
        """
        return self._trig_source

    @trig_source.setter
    def trig_source(self, value):
        """
        NON STANDRAD FEATURE!
        Stores trigger source.
        :type value: int
        """
        self._trig_source = value

    # Methods
    def Initialize(self, ResourceName, IdQuery=1, Reset=1, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties
        that access the instrument are only accessible after Initialize is
        called. Initialize optionally performs a Reset and queries the
        instrument to validate the instrument model.

        :param ResourceName:
            An IVI logical name or an instrument specific string that identifies
            the address of the instrument, such as a VISA resource descriptor
            string.
        :type ResourceName: str

        :param IdQuery:
            Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool

        :param Reset:
            Specifies whether to reset the instrument.
            :type Reset: bool

        :param OptionString:
            Provides additional functionality for the initialization process.
            - "Calibrate=[True|False]"
                Performs a calibration of the scope after initialization.
        :type OptionString: str
        """
        self.interface.ResourceName = ResourceName
        self.interface.vi_open(rw_termination=self._delimiter)
        self.__Initialized = True

        with contextlib.suppress(Exception):
            self.GetError()

        if IdQuery:
            ret = self.interface.vi_query("*IDN?")
            ret = ret.strip()
            self.IDN = ret
            if ret.find("REDPITAYA,INSTR2014") == -1:
                self.__Initialized = False
                self.interface.vi_close()
                msg = "RedPitaya: Cant't find '{}' in the returned IDN string '{}'".format(ret, "REDPITAYA,INSTR")
                raise ValueError(msg)
            with contextlib.suppress(Exception):
                self.GetError()
        if Reset:
            self.interface.vi_write("*RST")
            sleep(1)
            self.GetError()

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and
        properties that access the instrument are not accessible after Close
        is called.
        """
        if self.__Initialized:
            self.__Initialized = False
            self.interface.vi_close()
