# ===========================================================================
# Copyright (C) 2012-2016 Infineon Technologies AG
# All rights reserved.
# ===========================================================================
#
# ===========================================================================
# This document contains proprietary information of Infineon Technologies AG.
# Passing on and copying of this document, and communication of its contents
# is not permitted without Infineon's prior written authorisation.
# ===========================================================================
#
# -------------------------------------------------------------------------------
# Revision       : $Rev$
# Date           : $Date$
# Last change by : $Author$
# -------------------------------------------------------------------------------
"""
Module docstring
"""

from __future__ import annotations

from pverify.drivers.BaseInstrument import InstrumentError
from pverify.drivers.Scope.RedPitaya import IIviScopeBase


class IIviScopeChannel(IIviScopeBase.IIviScopeBase):
    """IVI Scope class-compliant channel interface.

    NOTE:
        Attributes/Methods marked with '#' do not exist for this instrument.
        Attributes/Methods marked with '*' are specific for this instrument.
        !Please consider when trying to program instrument independent.

    Attributes:
        Coupling [String] [rw]
            Describes how the oscilloscope couples the input signal.
            Use with enumeration value:
                "IviScopeVerticalCouplingDC"

        Enabled [Boolean] [rw]
            If True, the oscilloscope acquires a waveform for this channel when
            the Initiate Acquisition, Read Waveform, Read Min Max Waveform, or
            Read Waveform Measurement methods are called.
            Use with boolean value.

            RedPitaya: Ignores value and returns always True

        !GainSetting [Float/String] [rw]
            RedPitaya: This function is used to address the gain referring to jumper settings
            on Red Pitaya fast analog inputs.  LV -> 1, HV -> 20

            String values:
                LV|HV

        InputFrequencyMax [Int] [rw]
            The maximum input bandwidth of this channel. The units are hertz.
            Use with float value.

            RedPitaya: Ignores value and returns always 0

        #InputImpedance [] [rw]
            The input impedance of this channel. The units are ohms.

        Offset [Float] [rw]
            The location of the center of the range that you specify with the
            Range property. The units are volts, with respect to ground.
            For example, to acquire a sine wave spanning 0.0 to 10.0 volts,
            set Offset to 5.0 volts.
            Use with float value.

            RedPitaya: Ignores value and returns always 0

        ProbeAttenuation [Float/String] [rw]
            The scaling factor by which the probe attenuates the input signal.
            For example, with a 10:1 probe, the value is 10.0.
            Use with float value for voltage probe or

        #ProbeSense [] [rw]
            The probe attenuation value the oscilloscope automatically senses. If
            the automatic probe sense is disabled, its value is the manual probe
            attenuation setting.

        Range [Float] [rw]
            The absolute value of the input range the oscilloscope can acquire
            for the channel. The units are volts. For example, to acquire a
            sine wave spanning -5.0 to 5.0 volts, set Range to 10.0 volts.
            Use with float value.

            RedPitaya: Ignores value and returns always twice the full swing


    Methods:
        Configure(Range, Offset, Coupling, ProbeAttenuation, Enabled):
            Configures the most commonly used properties of the oscilloscope
            channel sub-system. They are the range, offset, coupling, probe
            attenuation, and whether the channel is enabled.

        #ConfigureCharacteristics(InputImpedance=0, InputFrequencyMax=0):
            Configures the properties that control the electrical characteristics
            of the channel. They are the input impedance and the maximum frequency
            of the input signal.

    """

    def __init__(self, interface, Channel):
        self._Channel = str(Channel).strip()
        self._probe_attenuation = 1.0
        IIviScopeBase.IIviScopeBase.__init__(self, interface)

        # Read only dependent properties

    @property
    def ProbeSense(self):
        """
        The probe attenuation value the oscilloscope automatically senses. If
        the automatic probe sense is disabled, its value is the manual probe
        attenuation setting.
        """
        raise NotImplementedError

    # Read-write dependent properties
    @property
    def Coupling(self):
        """
        Describes how the oscilloscope couples the input signal.

        :rtype: IviScopeVerticalCouplingEnum
        """
        return self.Enums.IviScopeVerticalCouplingEnum.IviScopeVerticalCouplingDC

    @Coupling.setter
    def Coupling(self, value):
        """
        How the oscilloscope couples the input signal.

        :type value: IviScopeVerticalCouplingEnum
        """
        if value != self.Enums.IviScopeVerticalCouplingEnum.IviScopeVerticalCouplingDC:
            errMsg = "ErrCode:xx, ErrMsg:'Only DC coupling is supported!'"
            self.interface._Log.error(errMsg)
            raise InstrumentError(errMsg)

    @property
    def Enabled(self):
        """
        If True, the oscilloscope acquires a waveform for this channel when
        the Initiate Acquisition, Read Waveform, Read Min Max Waveform, or
        Read Waveform Measurement methods are called.

        :rtype: bool
        """
        # Nothing to do
        return True

    @Enabled.setter
    def Enabled(self, value):
        """
        If True, the oscilloscope acquires a waveform for this channel when
        the Initiate Acquisition, Read Waveform, Read Min Max Waveform, or
        Read Waveform Measurement methods are called.

        :type value: bool
        """
        # nothing to do

    @property
    def GainSetting(self):
        """
        RedPitaya: This function is used to address the gain referring to jumper settings
        on Red Pitaya fast analog inputs.  LV -> 1, HV -> 20

        :rtype: float
        """
        ret = self.interface.vi_query(f":ACQ:SOUR{self._Channel}:GAIN?", rformat="%s\n")
        self.GetError()
        if ret == "HV":
            return 20.0
        else:
            return 1.0

    @GainSetting.setter
    def GainSetting(self, value):
        """
        RedPitaya: This function is used to address the gain referring to jumper settings
        on Red Pitaya fast analog inputs.  LV -> 1, HV -> 20

        :param value:
          float or string: LV, HV
        """
        if value == 20:
            val = "HV"
        elif value == 1:
            val = "LV"
        else:
            val = value
        self.interface.vi_write(f":ACQ:SOUR{self._Channel}:GAIN {val}")
        self.GetError()

    @property
    def InputFrequencyMax(self):
        """
        The maximum input frequency of this channel. It the frequency at which
        the input circuitry attenuates the input signal by 3 dB. The units are
        hertz.

        :rtype: float
        """
        # Nothing to do
        return 0

    @InputFrequencyMax.setter
    def InputFrequencyMax(self, value):
        """
        The maximum input frequency of this channel. It the frequency at which
        the input circuitry attenuates the input signal by 3 dB. The units are
        hertz.
        Use with Integer values.
        For FULL bandwidth set to 0.

        :type value: float
        """
        # Nothing to do

    @property
    def InputImpedance(self):
        """
        The input impedance of this channel. The units are ohms.
        """
        raise NotImplementedError

    @InputImpedance.setter
    def InputImpedance(self, value):
        """
        The input impedance of this channel. The units are ohms.
        """
        raise NotImplementedError

    @property
    def Offset(self):
        """
        The location of the center of the range that you specify with the
        Range property. The units are volts, with respect to ground. For
        example, to acquire a sine wave spanning 0.0 to 10.0 volts, set Offset
        to 5.0 volts.

        :rtype: float
        """
        # Nothing to do
        return 0

    @Offset.setter
    def Offset(self, value):
        """
        The location of the center of the range that you specify with the
        Range property. The units are volts, with respect to ground. For
        example, to acquire a sine wave spanning 0.0 to 10.0 volts, set Offset
        to 5.0 volts.

        :type value: float
        """
        # Nothing to do

    @property
    def ProbeAttenuation(self):
        """
        The scaling factor by which the probe attenuates the input signal. For
        example, with a 10:1 probe, the value is 10.0.

        :rtype: float
        """
        return self._probe_attenuation

    @ProbeAttenuation.setter
    def ProbeAttenuation(self, value):
        """
        The scaling factor by which the probe attenuates the input signal. For
        example, with a 10:1 probe, the value is 10.0.

        :type value: float
        """
        self._probe_attenuation = value

    @property
    def Range(self):
        """
        The absolute value of the input range the oscilloscope can acquire for
        the channel. The units are volts. For example, to acquire a sine wave
        spanning -5.0 to 5.0 volts, set Range to 10.0 volts.

        :rtype: float
        """
        return self.ProbeAttenuation * 2.0

    @Range.setter
    def Range(self, value):
        """
        The absolute value of the input range the oscilloscope can acquire for
        the channel. The units are volts. For example, to acquire a sine wave
        spanning -5.0 to 5.0 volts, set Range to 10.0 volts.

        :type value: float
        """
        # self.ProbeAttenuation = value/2.0

    # Methods
    def Configure(self, Range, Offset, Coupling, ProbeAttenuation, Enabled):
        """
        Configures the most commonly used properties of the oscilloscope
        channel sub-system. They are the range, offset, coupling, probe
        attenuation, and whether the channel is enabled.

        :param Range: Specifies the vertical range.
        :type Range: float

        :param Offset: Specifies the vertical offset.
        :type Offset: flaot

        :param Coupling: Specifies how to couple the input signal.
        :type Coupling: IviScopeVerticalCouplingEnum

        :param ProbeAttenuation: Specifies the probe attenuation.
        :type ProbeAttenuation: float or string (C0_001|C0_002|C0_005|C0_01|C0_02|C0_05|C0_1|C0_2|C0_5|
                                                 C1|C2|C5|C10|C20|C50|C100|C200|C500|C1000|C2000)

        :param Enabled: Specifies if the channel is enabled for acquisition.
        :type Enabled: bool
        """
        self.Range = Range
        self.Offset = Offset
        self.Coupling = Coupling
        self.ProbeAttenuation = ProbeAttenuation
        self.Enabled = Enabled

    def ConfigureCharacteristics(self, InputImpedance=0, InputFrequencyMax=0):
        """
        Configures the properties that control the electrical characteristics
        of the channel. They are the input impedance and the maximum frequency
        of the input signal.

        :param InputImpedance:
            NOT IMPLEMENTED!
            The input impedance for the channel. The driver sets the Input
            Impedance to this value.

        :param InputFrequencyMax:
            The maximum input frequency for the channel. The driver sets the Max
            Input Frequency to this value.
        :type InputFrequencyMax: int
        """
        # self.InputFrequencyMax = InputFrequencyMax
        raise NotImplementedError
