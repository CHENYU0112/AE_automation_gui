from __future__ import annotations

from ctypes import c_char, c_float, c_ushort

from numpy import clip

from pverify.core.lab.driver_identity import IdentityBasic
from pverify.core.lab.ivi.helper import WinDLL


class USB3101FSError(Exception):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)


class USB3101FS:
    def __init__(
        self,
        boardnumber=0,
        dllpath=r"C:\Program Files (x86)\Measurement Computing\DAQ\cbw32.dll",
    ):
        self.cdll = WinDLL(dllpath)
        self.boardnumber = int(boardnumber)

        self.__Identity = IdentityBasic(
            fct_idn=lambda: "Measurement Computing DAQ USB3101FS",
            fct_drv_rev=lambda: "unknown",
            fct_fw_rev=lambda: "unknown",
        )

    @property
    def Identity(self):
        return self.__Identity

    def outputOff(self, channel):
        """
        Sets the channel to 0 volt.
        """
        self.checkError(self.cdll.cbVOut(self.boardnumber, int(channel), 10, c_float(0), 0))

    def outputAllOff(self):
        """
        Sets all channels (0-3) to 0 volt.
        """
        for channel in range(4):
            self.checkError(self.cdll.cbVOut(self.boardnumber, int(channel), 10, c_float(0), 0))

    def setVoltage(self, channel, voltage):
        """
        Sets a voltage between -10.7 and +10.7 volt on a specific channel.

        :param channel: The channel number 0-3
        :param voltage: The voltage to set.
        """
        voltage = clip(voltage, -10.7, 10.7)
        data = int(((2**16 - 1) / 21.4) * (10.7 + voltage))

        self.checkError(self.cdll.cbAOut(self.boardnumber, int(channel), 10, c_ushort(data)))

    def checkError(self, errCode):
        if errCode == 0:
            return 0
        else:
            msg = (c_char * 200)()
            self.cdll.cbGetErrMsg(errCode, msg)
            msg = "ErrCode %d: " % errCode + str(msg.value)
            raise USB3101FSError(msg)


if __name__ == "__main__":
    a = USB3101FS()
    a.setVoltage(0, 0.0)
