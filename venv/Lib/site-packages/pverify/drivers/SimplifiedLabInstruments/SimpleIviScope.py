from __future__ import annotations

import contextlib
from time import perf_counter, sleep

import numpy as np

from pverify.drivers.SimplifiedLabInstruments._simple_instr.simple_scope import (
    SimpleIviScope_ABC,
    SimpleIviScopeChannel_ABC,
)
from pverify.postproc.waveform import Waveform


class SimpleIviScope(SimpleIviScope_ABC):
    def __init__(self, driver, alias=None):
        super().__init__(driver, alias)
        self.__has_triggered = False

    @property
    def Initialized(self):
        return self.lld.Initialized

    @property
    def drivername(self):
        return self.lld.drivername

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool|int
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool|int
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        :type OptionString: str
        """
        self.lld._check_ivi_compliance()

        self.lld.Initialize(ResourceName, IdQuery, Reset, OptionString)

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        self.lld.Close()

    def ScopeSetup(self, TimePerRecord: float = 100e-3, RecordLength: float = 10e3):
        """
        Sets the most commonly used parameters for the scope acquisition.

        :param TimePerRecord: Time in seconds of the acquired waveform. Recordlength/TimePerRecord=SampleRate
        :type TimePerRecord: float
        :param RecordLength: The record length of the acquired waveform. Recordlength/TimePerRecord=SampleRate
        :type RecordLength: int | float
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        self.lld.Acquisition.TimePerRecord = TimePerRecord
        self.lld.Acquisition.NumberOfPointsMin = int(RecordLength)
        self.lld.Acquisition.Type = self.lld.Enums.IviScopeAcquisitionTypeEnum.IviScopeAcquisitionTypeNormal

    def Arm(self, Continuous=False):
        """
        Arms the acquisition of the probe.

        :param Continuous: If True, the oscilloscope waits trigger holdoff seconds after a waveform acquisition is
                           complete and then immediatley enters the wait for trigger state without passing through
                           the idle state.
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        if self.lld.drivername in ["YK_DLM4058", "YK_DLM6054"]:
            self.lld.Trigger.Continuous = Continuous
            self.lld.Measurements.Initiate()
        elif self.lld.drivername == "lcscope":
            # Proved to be much more reliable/stable within CSS department.
            # The new implementation is doing the same thing as just pushing on the Normal/Single button on the Scope.
            if Continuous:
                self.lld.dllwrap.WriteString("""VBS 'app.Acquisition.TriggerMode = "Normal"' """)
            else:
                self.lld.dllwrap.WriteString("""VBS 'app.Acquisition.TriggerMode = "Single"' """)
        else:
            if Continuous:
                self.lld.Trigger.Continuous = Continuous
            else:
                self.lld.Trigger.Continuous = False
                self.lld.Measurements.Initiate()
            self.__has_triggered = False

    def Trigger_Edge(
        self,
        Level: float = 1.0,
        Slope: str = "RISE",
        Position: float = 50,
        Coupling: str = "DC",
        ChannelIndex: int = 1,
        **kwargs,
    ):
        """
        Specifies the parameters of an edge trigger.

        :param Level: The trigger level.
        :param Slope: Defines the slope the probe triggers on (RISE, FALL)
        :param Position: The horizontal trigger position in %.
        :param Coupling: The coupling of the trigger.

            - "AC"
            - "DC"
            - "LFR" (Low Frequency Rejection)
            - "HFR" (High Frequency Rejection)
            - "NR" (Noise Rejection"

        :param ChannelIndex: The channel index to use as trigger source
        :param kwargs: Optional driver specific parameters
        :keyword ykdlm_hfrej: For ykdlm4000/ykdlm6000: Specifies high freq rej cutoff frequency (float):
                              15e3 | 20e6(default)
        :keyword ykdlm_nrej: For ykdlm4000/ykdlm6000: Specifies noise rej level (str): "low"(default) or "high"
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        if self.lld.drivername in ["YK_DLM4058", "YK_DLM6054", "RedPitaya"]:
            self.lld.Trigger.Source = ChannelIndex
            self.lld.Trigger.Type = self.lld.Enums.IviScopeTriggerTypeEnum.IviScopeTriggerEdge
            self.lld.Trigger.Modifier = self.lld.Enums.IviScopeTriggerModifierEnum.IviScopeTriggerModifierNone
            self.lld.Trigger.Position = Position

            if Coupling.upper() == "AC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingAC
                self.lld.Trigger.Edge.HFRejection = (
                    self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejectionOff
                )
                self.lld.Trigger.Edge.Hysteresis = (
                    self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow
                )
            elif Coupling.upper() == "DC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingDC
                self.lld.Trigger.Edge.HFRejection = (
                    self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejectionOff
                )
                self.lld.Trigger.Edge.Hysteresis = (
                    self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow
                )
            elif Coupling.upper() == "HFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingDC
                if "ykdlm_hfrej" in kwargs:
                    self.lld.Trigger.Edge.HFRejection = [
                        self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejection15kHz,
                        self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejection20MHz,
                    ][kwargs["ykdlm_hfrej"] > 15e3]
                else:
                    self.lld.Trigger.Edge.HFRejection = (
                        self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejection20MHz
                    )
            elif Coupling.upper() == "LFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingAC
                self._log.warning("Low frequency rejection ('LFR') not supported. Using normal AC coupling instead.")
            elif Coupling.upper() == "NR":
                if "ykdlm_nrej" in kwargs:
                    self.lld.Trigger.Edge.Hysteresis = [
                        self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow,
                        self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisHigh,
                    ][kwargs["ykdlm_nrej"].lower() == "high"]
                else:
                    self.lld.Trigger.Edge.Hysteresis = (
                        self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow
                    )

            if Slope.upper() == "RISE":
                self.lld.Trigger.Edge.Configure(
                    ChannelIndex,
                    Level,
                    self.lld.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopePositive,
                )
            elif Slope.upper() == "FALL":
                self.lld.Trigger.Edge.Configure(
                    ChannelIndex,
                    Level,
                    self.lld.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopeNegative,
                )
            else:
                self._log.warning("Wrong edge slope configured. Using positive slope and trigger modifier 'AUTO'")
                self.lld.Trigger.Edge.Configure(
                    ChannelIndex,
                    Level,
                    self.lld.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopePositive,
                )
                self.lld.Trigger.Modifier = self.lld.Enums.IviScopeTriggerModifierEnum.IviScopeTriggerModifierAuto

        else:
            channelname = self.lld.Channels.Name(ChannelIndex)
            self.lld.Trigger.Source = channelname
            self.lld.Trigger.Type = self.lld.Enums.IviScopeTriggerTypeEnum.IviScopeTriggerEdge
            self.lld.Trigger.Modifier = self.lld.Enums.IviScopeTriggerModifierEnum.IviScopeTriggerModifierNone
            self.lld.Acquisition.StartTime = self.lld.Acquisition.TimePerRecord * (-Position / 100.0)

            if Coupling.upper() == "AC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingAC
            elif Coupling.upper() == "DC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingDC
            elif Coupling.upper() == "HFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingHFReject
            elif Coupling.upper() == "LFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingLFReject
            elif Coupling.upper() == "NR":
                self.lld.Trigger.Coupling = (
                    self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingNoiseReject
                )
            else:
                pass

            if Slope.upper() == "RISE":
                self.lld.Trigger.Edge.Configure(
                    channelname,
                    Level,
                    self.lld.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopePositive,
                )
            elif Slope.upper() == "FALL":
                self.lld.Trigger.Edge.Configure(
                    channelname,
                    Level,
                    self.lld.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopeNegative,
                )
            else:
                self._log.warning("Wrong edge slope configured. Using positive slope and trigger modifier 'AUTO'")
                self.lld.Trigger.Edge.Configure(
                    channelname,
                    Level,
                    self.lld.Enums.IviScopeTriggerSlopeEnum.IviScopeTriggerSlopePositive,
                )
                self.lld.Trigger.Modifier = self.lld.Enums.IviScopeTriggerModifierEnum.IviScopeTriggerModifierAuto

            self.lld.Acquisition.StartTime = self.lld.Acquisition.TimePerRecord * (-Position / 100.0)

    def Trigger_Width(
        self,
        Level: float = 1.0,
        Polarity: str = "POSITIVE",
        Condition: str = "WITHIN",
        ThresholdLow: float = 100e-3,
        ThresholdHigh: float = 500e-3,
        Position: float = 50,
        Coupling: str = "DC",
        ChannelIndex: int = 1,
        **kwargs,
    ):
        """
        Configures the width trigger Source, Level, ThresholdLow,
        ThresholdHigh, Polarity, and Condition. A width trigger occurs when a
        pulse, that passes through Level, with a width between or outside, the
        width thresholds is detected.

        :param Level: The trigger level.
        :param Polarity: The polarity of the pulse that triggers the oscilloscope.
                         Either "POSITIVE", or "NEGATIVE", or short "POS", "NEG"
        :param Condition: The condition of a pulse that triggers the oscilloscope.
                          The condition is either "WITHIN", "OUTSIDE" or "TIMEOUT" of the high and low thresholds.
                          If "TIMEOUT" the high threshold will be ignored.
        :param ThresholdLow: The low width threshold time. The units are seconds.
        :param ThresholdHigh: The high width threshold time. The units are seconds.
        :param Position: The horizontal trigger position in %.
        :param Coupling: The coupling of the trigger.

            - "AC"
            - "DC"
            - "LFR" (Low Frequency Rejection)
            - "HFR" (High Frequency Rejection)
            - "NR" (Noise Rejection"

        :param ChannelIndex: The channel index to use as trigger source
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        if self.lld.drivername in ["YK_DLM4058", "YK_DLM6054"]:
            channelname = self.lld.Channels.Name(ChannelIndex)
            self.lld.Trigger.Source = ChannelIndex
            self.lld.Trigger.Type = self.lld.Enums.IviScopeTriggerTypeEnum.IviScopeTriggerWidth
            self.lld.Trigger.Modifier = self.lld.Enums.IviScopeTriggerModifierEnum.IviScopeTriggerModifierNone
            self.lld.Trigger.Position = Position

            if Coupling.upper() == "AC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingAC
                self.lld.Trigger.Edge.HFRejection = (
                    self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejectionOff
                )
                self.lld.Trigger.Edge.Hysteresis = (
                    self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow
                )
            elif Coupling.upper() == "DC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingDC
                self.lld.Trigger.Edge.HFRejection = (
                    self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejectionOff
                )
                self.lld.Trigger.Edge.Hysteresis = (
                    self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow
                )
            elif Coupling.upper() == "HFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingDC
                if "ykdlm_hfrej" in kwargs:
                    self.lld.Trigger.Edge.HFRejection = [
                        self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejection15kHz,
                        self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejection20MHz,
                    ][kwargs["ykdlm_hfrej"] > 15e3]
                else:
                    self.lld.Trigger.Edge.HFRejection = (
                        self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejection20MHz
                    )
            elif Coupling.upper() == "LFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingAC
                self._log.warning("Low frequency rejection ('LFR') not supported. Using normal AC coupling instead.")
            elif Coupling.upper() == "NR":
                if "ykdlm_hfrej" in kwargs:
                    self.lld.Trigger.Edge.Hysteresis = [
                        self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow,
                        self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisHigh,
                    ][kwargs["ykdlm_nrej"].lower() == "high"]
                else:
                    self.lld.Trigger.Edge.Hysteresis = (
                        self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow
                    )

            if "POS" in Polarity.upper():
                tmpPolarity = self.lld.Enums.IviScopeWidthPolarityEnum.IviScopeWidthPolarityPositive
            elif "NEG" in Polarity.upper():
                tmpPolarity = self.lld.Enums.IviScopeWidthPolarityEnum.IviScopeWidthPolarityNegative
            else:
                msg = f"Polarity '{Polarity}' is not supported."
                raise Exception(msg)

            if "IN" in Condition.upper():
                tmpCondition = self.lld.Enums.IviScopeWidthConditionEnum.IviScopeWidthConditionWithin
            elif "OUT" in Condition.upper() and "TIM" not in Condition.upper():
                tmpCondition = self.lld.Enums.IviScopeWidthConditionEnum.IviScopeWidthConditionOutside
            elif "TIM" in Condition.upper():
                tmpCondition = self.lld.Enums.IviScopeWidthConditionEnum.IviScopeWidthConditionTimeout
            else:
                msg = f"Condition '{Condition}' is not supported."
                raise Exception(msg)
            self.lld.Trigger.Width.Configure(
                ChannelIndex,
                Level,
                ThresholdLow,
                ThresholdHigh,
                tmpPolarity,
                tmpCondition,
            )

        else:  # IVI-COM
            if self.lld.drivername == "ag6000":
                msg = "Width trigger is not available for Agilent 6000 Series driver"
                raise NotImplementedError(msg)

            channelname = self.lld.Channels.Name(ChannelIndex)
            self.lld.Trigger.Source = channelname
            self.lld.Trigger.Type = self.lld.Enums.IviScopeTriggerTypeEnum.IviScopeTriggerWidth
            self.lld.Trigger.Modifier = self.lld.Enums.IviScopeTriggerModifierEnum.IviScopeTriggerModifierNone
            self.lld.Acquisition.StartTime = self.lld.Acquisition.TimePerRecord * (-Position / 100.0)

            if Coupling.upper() == "AC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingAC
            elif Coupling.upper() == "DC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingDC
            elif Coupling.upper() == "HFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingHFReject
            elif Coupling.upper() == "LFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingLFReject
            elif Coupling.upper() == "NR":
                self.lld.Trigger.Coupling = (
                    self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingNoiseReject
                )

            if "POS" in Polarity.upper():
                tmpPolarity = self.lld.Enums.IviScopeWidthPolarityEnum.IviScopeWidthPolarityPositive
            elif "NEG" in Polarity.upper():
                tmpPolarity = self.lld.Enums.IviScopeWidthPolarityEnum.IviScopeWidthPolarityNegative
            else:
                msg = f"Polarity '{Polarity}' is not supported."
                raise Exception(msg)

            if "IN" in Condition.upper():
                tmpCondition = self.lld.Enums.IviScopeWidthConditionEnum.IviScopeWidthConditionWithin
            elif "OUT" in Condition.upper() and "TIM" not in Condition.upper():
                tmpCondition = self.lld.Enums.IviScopeWidthConditionEnum.IviScopeWidthConditionOutside
            elif "TIM" in Condition.upper():
                if self.lld.drivername == "lcscope":
                    coup = {"DC": 0, "AC": 1, "HFR": 3, "LFR": 2, "NR": 0}
                    pol = {"POSITIVE": 0, "NEGATIVE": 1}
                    self.lld.dllwrap.WriteString('VBS "app.Acquisition.Trigger.Type = 8"')
                    self.lld.dllwrap.WriteString(
                        'VBS "app.Acquisition.Trigger.Dropout.Coupling = %d"' % coup[Coupling.upper()]
                    )
                    self.lld.dllwrap.WriteString(
                        'VBS "app.Acquisition.Trigger.Dropout.Slope = %d"' % pol[Polarity.upper()]
                    )
                    self.lld.dllwrap.WriteString(f'''VBS "app.Acquisition.Trigger.Dropout.Source = '{channelname}'"''')
                    self.lld.dllwrap.WriteString(f'VBS "app.Acquisition.Trigger.Dropout.Level = {Level:f}"')
                    self.lld.dllwrap.WriteString(
                        f'VBS "app.Acquisition.Trigger.Dropout.DropoutTime = {ThresholdLow:f}"'
                    )

                return
            else:
                msg = f"Condition '{Condition}' is not supported."
                raise Exception(msg)
            self.lld.Trigger.Width.Configure(channelname, Level, ThresholdLow, ThresholdHigh, tmpPolarity, tmpCondition)

    def Trigger_Glitch(
        self,
        Level: float = 1.0,
        Polarity: str = "POSITIVE",
        Condition: str = "LESS",
        Width: float = 10e-3,
        Position: float = 50,
        Coupling: str = "DC",
        ChannelIndex: int = 1,
        **kwargs,
    ):
        """
        Configure the glitch trigger Source, Level, Width, Polarity, and Condition. A
        glitch trigger occurs when the edge of a pulse that matches the Width and
        Polarity crosses the specified Level.

        :param Level: The trigger level.
        :param Polarity: The polarity of the pulse that triggers the oscilloscope.
                         Either "POSITIVE", or "NEGATIVE", or short "POS", "NEG"
        :param Condition: The glitch condition detemermines whether the oscilloscope triggers on a
                          pulse with a width "LESS" then or "MORE" than the glitch width value.
        :param Width: The glitch width. The units are seconds.
        :param Position: The horizontal trigger position in %.
        :param Coupling: The coupling of the trigger.

            - "AC"
            - "DC"
            - "LFR" (Low Frequency Rejection)
            - "HFR" (High Frequency Rejection)
            - "NR" (Noise Rejection"

        :param ChannelIndex: The channel index to use as trigger source
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        if self.lld.drivername == "lcscope":
            channelname = self.lld.Channels.Name(ChannelIndex)
            self.lld.Trigger.Source = channelname
            self.lld.Trigger.Type = self.lld.Enums.IviScopeTriggerTypeEnum.IviScopeTriggerWidth
            self.lld.Trigger.Modifier = self.lld.Enums.IviScopeTriggerModifierEnum.IviScopeTriggerModifierNone
            self.lld.Acquisition.StartTime = self.lld.Acquisition.TimePerRecord * (-Position / 100.0)

            if Coupling.upper() == "AC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingAC
            elif Coupling.upper() == "DC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingDC
            elif Coupling.upper() == "HFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingHFReject
            elif Coupling.upper() == "LFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingLFReject
            elif Coupling.upper() == "NR":
                self.lld.Trigger.Coupling = (
                    self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingNoiseReject
                )

            if "POS" in Polarity.upper():
                tmpPolarity = self.lld.Enums.IviScopeWidthPolarityEnum.IviScopeWidthPolarityPositive
            elif "NEG" in Polarity.upper():
                tmpPolarity = self.lld.Enums.IviScopeWidthPolarityEnum.IviScopeWidthPolarityNegative
            else:
                msg = f"Polarity '{Polarity}' is not supported."
                raise Exception(msg)

            self.lld.Trigger.Width.Configure(
                channelname,
                Level,
                Width,
                Width,
                tmpPolarity,
                self.lld.Enums.IviScopeWidthConditionEnum.IviScopeWidthConditionOutside,
            )
            if "LESS" in Condition.upper():
                self.lld.dllwrap.WriteString('VBS "app.Acquisition.Trigger.Width.Condition = 0"')
            elif "MORE" in Condition.upper():
                self.lld.dllwrap.WriteString('VBS "app.Acquisition.Trigger.Width.Condition = 1"')
                return
            else:
                msg = f"Condition '{Condition}' is not supported."
                raise Exception(msg)

        elif self.lld.drivername in ["YK_DLM4058", "YK_DLM6054"]:
            self.lld.Trigger.Source = ChannelIndex
            self.lld.Trigger.Type = self.lld.Enums.IviScopeTriggerTypeEnum.IviScopeTriggerWidth
            self.lld.Trigger.Modifier = self.lld.Enums.IviScopeTriggerModifierEnum.IviScopeTriggerModifierNone
            self.lld.Trigger.Position = Position

            if Coupling.upper() == "AC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingAC
                self.lld.Trigger.Edge.HFRejection = (
                    self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejectionOff
                )
                self.lld.Trigger.Edge.Hysteresis = (
                    self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow
                )
            elif Coupling.upper() == "DC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingDC
                self.lld.Trigger.Edge.HFRejection = (
                    self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejectionOff
                )
                self.lld.Trigger.Edge.Hysteresis = (
                    self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow
                )
            elif Coupling.upper() == "HFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingDC
                if "ykdlm_hfrej" in kwargs:
                    self.lld.Trigger.Edge.HFRejection = [
                        self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejection15kHz,
                        self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejection20MHz,
                    ][kwargs["ykdlm_hfrej"] > 15e3]
                else:
                    self.lld.Trigger.Edge.HFRejection = (
                        self.lld.Enums.IviScopeTriggerHFRejectionEnum.IviScopeTriggerHFRejection20MHz
                    )
            elif Coupling.upper() == "LFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingAC
                self._log.warning("Low frequency rejection ('LFR') not supported. Using normal AC coupling instead.")
            elif Coupling.upper() == "NR":
                if "ykdlm_hfrej" in kwargs:
                    self.lld.Trigger.Edge.Hysteresis = [
                        self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow,
                        self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisHigh,
                    ][kwargs["ykdlm_nrej"].lower() == "high"]
                else:
                    self.lld.Trigger.Edge.Hysteresis = (
                        self.lld.Enums.IviScopeTriggerHysteresisEnum.IviScopeTriggerHysteresisLow
                    )

            if "POS" in Polarity.upper():
                tmpPolarity = self.lld.Enums.IviScopeGlitchPolarityEnum.IviScopeGlitchPolarityPositive
            elif "NEG" in Polarity.upper():
                tmpPolarity = self.lld.Enums.IviScopeGlitchPolarityEnum.IviScopeGlitchPolarityNegative
            else:
                msg = f"Polarity '{Polarity}' is not supported."
                raise Exception(msg)

            if "LESS" in Condition.upper():
                tmpCondition = self.lld.Enums.IviScopeGlitchConditionEnum.IviScopeGlitchConditionLessThan
            elif "MORE" in Condition.upper():
                tmpCondition = self.lld.Enums.IviScopeGlitchConditionEnum.IviScopeGlitchConditionGreaterThan
            else:
                msg = f"Condition '{Condition}' is not supported."
                raise Exception(msg)
            self.lld.Trigger.Glitch.Configure(ChannelIndex, Level, Width, tmpPolarity, tmpCondition)

        else:  # IVI-COM
            channelname = self.lld.Channels.Name(ChannelIndex)
            self.lld.Trigger.Source = channelname
            self.lld.Trigger.Type = self.lld.Enums.IviScopeTriggerTypeEnum.IviScopeTriggerGlitch
            self.lld.Trigger.Modifier = self.lld.Enums.IviScopeTriggerModifierEnum.IviScopeTriggerModifierNone
            self.lld.Acquisition.StartTime = self.lld.Acquisition.TimePerRecord * (-Position / 100.0)

            if Coupling.upper() == "AC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingAC
            elif Coupling.upper() == "DC":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingDC
            elif Coupling.upper() == "HFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingHFReject
            elif Coupling.upper() == "LFR":
                self.lld.Trigger.Coupling = self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingLFReject
            elif Coupling.upper() == "NR":
                self.lld.Trigger.Coupling = (
                    self.lld.Enums.IviScopeTriggerCouplingEnum.IviScopeTriggerCouplingNoiseReject
                )

            if "POS" in Polarity.upper():
                tmpPolarity = self.lld.Enums.IviScopeGlitchPolarityEnum.IviScopeGlitchPolarityPositive
            elif "NEG" in Polarity.upper():
                tmpPolarity = self.lld.Enums.IviScopeGlitchPolarityEnum.IviScopeGlitchPolarityNegative
            else:
                msg = f"Polarity '{Polarity}' is not supported."
                raise Exception(msg)

            if "LESS" in Condition.upper():
                tmpCondition = self.lld.Enums.IviScopeGlitchConditionEnum.IviScopeGlitchConditionLessThan
            elif "MORE" in Condition.upper():
                tmpCondition = self.lld.Enums.IviScopeGlitchConditionEnum.IviScopeGlitchConditionGreaterThan
            else:
                msg = f"Condition '{Condition}' is not supported."
                raise Exception(msg)
            self.lld.Trigger.Glitch.Configure(channelname, Level, Width, tmpPolarity, tmpCondition)

    @property
    def HasTriggered(self):
        """
        Returns True if the acquisition status is complete.
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        self.__has_triggered = (
            self.lld.Measurements.Status() == self.lld.Enums.IviScopeAcquisitionStatusEnum.IviScopeAcqComplete
        )
        return self.__has_triggered

    def ForceTrigger(self):
        """
        Forces a trigger (if available in lowlevel driver)
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        if self.lld.drivername == "lcscope":
            self.lld.dllwrap.WriteString("FRTR")
            self.__has_triggered = True
        elif self.lld.drivername == "AgInfiniiVision":
            self.lld.dllwrap.ForceTrigger()
            self.__has_triggered = True
        elif self.lld.drivername in ["YK_DLM4058", "YK_DLM6054", "RedPitaya"]:
            self.lld.Trigger.ForceTrigger()
            self.__has_triggered = True
        else:
            self._log.warning("Force trigger is not implemented for this instrument!")

    def GetChannel(self, Index):
        """
        Returns a channel object for the probe. The different probe channels can be set up indepentently from each other

        :param Index: The index of the channel
        :type Index: int
        :return: _SimpleScopeChannel instance
        :rtype: _SimpleScopeChannel
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        ccount = self.lld.Channels.Count
        if Index > ccount:
            raise Exception("Only %d channels available on this instrument!" % ccount)
        return SimpleIviScopeChannel(parent=self, channel_index=Index)


# Common again
class SimpleIviScopeChannel(SimpleIviScopeChannel_ABC):
    """
    A Class providing all functionality of a scope channel
    """

    def __init__(self, parent, channel_index):
        super().__init__(parent, channel_index)
        self._ch_name = self.lld.Channels.Name(self._ch_index)
        self._lld_ch = self.lld.Channels.Item(self._ch_name)

    @property
    def lld_ch(self):
        return self._lld_ch

    def Enable(self, enabled=True):
        """
        Enables/Disables the channel

        :param enabled: If True, enable the channel
        """

        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        self.lld_ch.Enabled = bool(enabled)

    def ProbeSetup(
        self,
        Coupling=None,
        Bandwidth=None,
        Vrange=None,
        Offset=None,
        Position=0,
        Probe_Attn=-1,
        Probe_Type="voltage",
        Impedance=None,
    ):
        """
        Sets the most commonly used parameters for a channel

        :param Coupling: Defines how the probe is coupled (AC, DC, GND).
        :type Coupling: str
        :param Bandwidth: The maximum bandwidth of the probe.
        :type Bandwidth: float
        :param Vrange: Vertical range of the used scope channel.
        :type Vrange: float
        :param Offset: The location of the center of the range that you specify with the Vrange keyword.
        :type Offset: float
        :param Position: The vertical division number (-4 to 4) to shift the signal to.
                         This property is only valid for Yokogawa DLM4000 and DLM6000 scopes.
        :type Position: float
        :param Impedance: The input impedance. Typically 1MOhm or 50 Ohm.
        :type Impedance: float
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        _Coupling = str(Coupling).upper()
        if self.lld.drivername in ["YK_DLM4058", "YK_DLM6054", "RedPitaya"]:
            self.lld_ch.Enabled = True
            if _Coupling == "AC":
                self.lld_ch.Coupling = self.lld.Enums.IviScopeVerticalCouplingEnum.IviScopeVerticalCouplingAC
            elif _Coupling == "DC":
                self.lld_ch.Coupling = self.lld.Enums.IviScopeVerticalCouplingEnum.IviScopeVerticalCouplingDC
                if Impedance is not None:
                    self.lld_ch.InputImpedance = float(Impedance)
            elif _Coupling == "GND":
                self.lld_ch.Coupling = self.lld.Enums.IviScopeVerticalCouplingEnum.IviScopeVerticalCouplingGnd
            if Bandwidth is not None:
                self.lld_ch.InputFrequencyMax = Bandwidth

            tmpTriggerLevel = self.lld.Trigger.Level
            probeAttn = Probe_Attn
            probeType = Probe_Type
            if probeType.lower() == "voltage" and probeAttn in [
                0.001,
                0.002,
                0.005,
                0.01,
                0.02,
                0.05,
                0.1,
                0.2,
                0.5,
                1,
                2,
                5,
                10,
                20,
                50,
                100,
                200,
                500,
                1000,
                2000,
            ]:
                self.lld_ch.ProbeAttenuation = float(probeAttn)
            elif probeType.lower() == "current" and probeAttn in [
                0.001,
                0.002,
                0.005,
                0.01,
                0.02,
                0.05,
                0.1,
                0.2,
                0.5,
                1,
                2,
                5,
                10,
                20,
                50,
                100,
                200,
                500,
                1000,
                2000,
            ]:
                probeAttn = int(probeAttn) if probeAttn >= 1 else probeAttn
                probeAttn = "C" + str(probeAttn).replace(".", "_")
                self.lld_ch.ProbeAttenuation = probeAttn
                try:
                    if hasattr(self.lld_ch, "DZCalibrate"):
                        self.lld_ch.DZCalibrate()
                    elif hasattr(self.lld_ch, "PZCalibrate"):
                        self.lld_ch.PZCalibrate()
                except Exception:
                    pass
            self.lld.Trigger.Level = tmpTriggerLevel

            if Vrange is not None:
                self.lld_ch.Range = Vrange
            if Offset is not None:
                self.lld_ch.Offset = Offset
            if Position is not None:
                self.lld_ch.Position = Position

        else:  # IVI-COM
            self.lld_ch.Enabled = True

            if _Coupling == "AC":
                self.lld_ch.Coupling = self.lld.Enums.IviScopeVerticalCouplingEnum.IviScopeVerticalCouplingAC
            elif _Coupling == "DC":
                self.lld_ch.Coupling = self.lld.Enums.IviScopeVerticalCouplingEnum.IviScopeVerticalCouplingDC
                if Impedance is not None:
                    self.lld_ch.InputImpedance = float(Impedance)
            elif _Coupling == "GND":
                self.lld_ch.Coupling = self.lld.Enums.IviScopeVerticalCouplingEnum.IviScopeVerticalCouplingGnd

            if Bandwidth is not None:
                self.lld_ch.InputFrequencyMax = Bandwidth

            tmpTriggerLevel = self.lld.Trigger.Level
            probeAttn = Probe_Attn
            if probeAttn > 0:
                with contextlib.suppress(Exception):
                    self.lld_ch.ProbeAttenuation = float(probeAttn)
            else:
                try:
                    self._log.info("Trying to perfom automatic probe sense.")
                    self.lld_ch.ProbeAttenuation = -1
                except Exception:
                    self._log.error("Auto sense failed!", exc_info=1)
            self.lld.Trigger.Level = tmpTriggerLevel

            if Vrange is not None:
                if self.lld.drivername == "lcscope":
                    self.lld.dllwrap.WriteString(
                        "VBS 'app.Acquisition.C%d.InputB.VerScaleVariable = true'" % self._ch_index
                    )
                self.lld_ch.Range = Vrange
            if Offset is not None:
                self.lld_ch.Offset = Offset

    def GetProbeWaveform(self, Timeout=5, DecimationFactor=1, ForceTriggerOnTimeout=True):
        """
        Returns a dictionary representing the time- and data-vector of an acquired waveform.

        :param Timeout: The maximum time in seconds to wait for the acquisition to complete.
        :param DecimationFactor: If greater than 1, the function will return a waveform decimated by 'DecimationFactor'.
                                 E.g. calling the function with DecimationFactor=10 will return 10 times less points.
        :return: Waveform object
        :rtype: pverify.Waveform
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        if self.lld.drivername in ["YK_DLM4058", "YK_DLM6054", "RedPitaya"]:
            channelname = self.lld.Channels.Name(self._ch_index)
            meas = self.lld.Measurements.Item(channelname)

            (AcqStatus, ElapsedTime) = (False, 0)
            StartTime = perf_counter()
            AcqStatus = self.lld.Measurements.Status()
            while (ElapsedTime <= Timeout) and (
                AcqStatus == self.lld.Enums.IviScopeAcquisitionStatusEnum.IviScopeAcqInProgress
            ):
                sleep(0.2)
                ElapsedTime = perf_counter() - StartTime
                AcqStatus = self.lld.Measurements.Status()

            if (
                ElapsedTime > Timeout
            ) and AcqStatus == self.lld.Enums.IviScopeAcquisitionStatusEnum.IviScopeAcqInProgress:
                # Force trigger
                if ForceTriggerOnTimeout:
                    self._log.warning("Trigger not occurred during specified timeout time. Forcing trigger!")
                    self._parent.ForceTrigger()
                    sleep(1.0)
                else:
                    raise Exception("Probe failed to acquire a waveform from scope channel %d." % self._ch_index)

            sleep(0.2)
            data, initial, incr = meas.FetchWaveform()
            w = Waveform(
                time=np.arange(0, incr * len(data), incr)[: len(data)] + initial,
                data=data,
            )
            if w.length:
                # Return data
                if int(DecimationFactor) >= 2:
                    w.decimate(factor=DecimationFactor)
                return w.copy()
            else:
                raise Exception("Probe failed to acquire a waveform from scope channel %d." % self._ch_index)

        else:
            channelname = self.lld.Channels.Name(self._ch_index)
            meas = self.lld.Measurements.Item(channelname)

            (AcqStatus, ElapsedTime) = (False, 0)
            StartTime = perf_counter()
            AcqStatus = self.lld.Measurements.Status()
            if AcqStatus != self.lld.Enums.IviScopeAcquisitionStatusEnum.IviScopeAcqInProgress:
                self._parent._SimpleIviScope__has_triggered = True
            while (
                (ElapsedTime <= Timeout)
                and (AcqStatus == self.lld.Enums.IviScopeAcquisitionStatusEnum.IviScopeAcqInProgress)
                and not self._parent.HasTriggered
            ):
                sleep(0.2)
                ElapsedTime = perf_counter() - StartTime
                AcqStatus = self.lld.Measurements.Status()
                if AcqStatus != self.lld.Enums.IviScopeAcquisitionStatusEnum.IviScopeAcqInProgress:
                    self._parent._SimpleIviScope__has_triggered = True

                if (
                    (ElapsedTime > Timeout)
                    and AcqStatus == self.lld.Enums.IviScopeAcquisitionStatusEnum.IviScopeAcqInProgress
                    and not self._parent.HasTriggered
                ):
                    if ForceTriggerOnTimeout:
                        # Force trigger
                        self._parent.ForceTrigger()
                    else:
                        raise Exception("Probe failed to acquire a waveform from scope channel %d." % self._ch_index)

            sleep(0.2)
            data, initial, incr = meas.FetchWaveform()
            # If incr is 0 set it to 1. This normally happens if the driver is siumlated
            if incr == 0:
                incr = 1
            data = np.array(data)
            w = Waveform(
                time=np.arange(0, incr * len(data), incr)[: len(data)] + initial,
                data=data,
            )
            if w.length:
                # Return data
                if int(DecimationFactor) >= 2:
                    w.decimate(factor=DecimationFactor)
                return w.copy()
            else:
                raise Exception("Probe failed to acquire a waveform from scope channel %d." % self._ch_index)

    def GetProbeMeasurement(self, MeasurementItem):
        """
        :param MeasurementItem: The measurement that is returned.
                                Items:
                                Amplitude, Average, RMS, PeakToPeak, Dutycycle,
                                Risetime, Falltime, Frequency, Period,
                                High, Low, Maximum, Minimum, Overshoot,
                                Preshoot,WidthPos, WidthNeg,
                                BurstWidth (YK only), DeltaT (YK only), EdgeCount (YK only),
                                PulseCount (YK only), AvgFreq (YK only), AvgPeriod (YK only),
        :type MeasurementItem: str
        :return: Measured value
        :rtype: float
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        _MeasurementItem = str(MeasurementItem).upper()
        item = None

        if _MeasurementItem == "AMPLITUDE":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementAmplitude
        elif _MeasurementItem == "AVERAGE":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementVoltageAverage
        elif _MeasurementItem == "RMS":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementVoltageRMS
        elif _MeasurementItem == "PEAKTOPEAK":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementVoltagePeakToPeak
        elif _MeasurementItem == "DUTYCYCLE":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementDutyCyclePos
        elif _MeasurementItem == "RISETIME":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementRiseTime
        elif _MeasurementItem == "FALLTIME":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementFallTime
        elif _MeasurementItem == "FREQUENCY":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementFrequency
        elif _MeasurementItem == "PERIOD":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementPeriod
        elif _MeasurementItem == "HIGH":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementVoltageHigh
        elif _MeasurementItem == "LOW":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementVoltageLow
        elif _MeasurementItem == "MAXIMUM":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementVoltageMax
        elif _MeasurementItem == "MINIMUM":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementVoltageMin
        elif _MeasurementItem == "PRESHOOT":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementPreshoot
        elif _MeasurementItem == "OVERSHOOT":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementOverShoot
        elif _MeasurementItem == "WIDTHPOS":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementWidthPos
        elif _MeasurementItem == "WIDTHNEG":
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementWidthNeg
        elif _MeasurementItem == "AVGFREQ" and self.lld.drivername in [
            "YK_DLM4058",
            "YK_DLM6054",
        ]:
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementAverageFrequency
        elif _MeasurementItem == "AVGPERIOD" and self.lld.drivername in [
            "YK_DLM4058",
            "YK_DLM6054",
        ]:
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementAveragePeriod
        elif _MeasurementItem == "EDGECOUNT" and self.lld.drivername in [
            "YK_DLM4058",
            "YK_DLM6054",
        ]:
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementEdgeCount
        elif _MeasurementItem == "PULSECOUNT" and self.lld.drivername in [
            "YK_DLM4058",
            "YK_DLM6054",
        ]:
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementPulseCount
        elif _MeasurementItem == "BURSTWIDTH" and self.lld.drivername in [
            "YK_DLM4058",
            "YK_DLM6054",
        ]:
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementBurstWidth
        elif _MeasurementItem == "DELTAT" and self.lld.drivername in [
            "YK_DLM4058",
            "YK_DLM6054",
        ]:
            item = self.lld.Enums.IviScopeMeasurementEnum.IviScopeMeasurementDeltaT
        else:
            msg = f"Function '{MeasurementItem!s}' not available for this scope device."
            raise TypeError(msg)

        channelname = self.lld.Channels.Name(self._ch_index)
        meas = self.lld.Measurements.Item(channelname)

        if (
            self.lld.Measurements.Status() == self.lld.Enums.IviScopeAcquisitionStatusEnum.IviScopeAcqInProgress
            and not self.lld.Trigger.Continuous
        ):
            # Force trigger
            self._log.warning("Acquisition still in progress. Forcing trigger!")
            self._parent.ForceTrigger()
            sleep(1.0)

        return meas.FetchWaveformMeasurement(item)


if __name__ == "__main__":
    pass
