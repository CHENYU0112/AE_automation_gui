from __future__ import annotations

import contextlib

from pverify.drivers.SimplifiedLabInstruments._simple_instr.simple_dcpwr import (
    SimpleIviDcPwr_ABC,
    SimpleIviDcPwrChannel_ABC,
)


class SimpleIviDcPwr(SimpleIviDcPwr_ABC):
    @property
    def Initialized(self):
        return self.lld.Initialized

    @property
    def drivername(self):
        return self.lld.drivername

    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool|int
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool|int
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        :type OptionString: str
        """
        self.lld._check_ivi_compliance()

        self.lld.Initialize(ResourceName, IdQuery, Reset, OptionString)

    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        self.lld.Close()

    def GetChannel(self, Index):
        """
        Returns a channel object for the probe. The different probe channels can be set up independently from each other

        :param Index: The index of the channel
        :type Index: int
        :return: SimpleDCSourceChannel instance
        :rtype: SimpleIviDcPwrChannel
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        ccount = self.lld.Outputs.Count
        if Index > ccount:
            raise Exception("Only %d channels available on this instrument!" % ccount)
        return SimpleIviDcPwrChannel(self, Index)


class SimpleIviDcPwrChannel(SimpleIviDcPwrChannel_ABC):
    """
    A Class providing all functionality of a DC source channel
    """

    def __init__(self, parent, channelindex):
        super().__init__(parent, channelindex)
        self._ch_name = self.lld.Outputs.Name(self._ch_index)
        self._lld_ch = self.lld.Outputs.Item(self._ch_name)

    @property
    def lld_ch(self):
        return self._lld_ch

    def Configure_Range(self, RangeType, Range):
        """
        Specifies the output's range, either current or voltage.

        :param RangeType: The kind of range to be configured, either Current or Voltage.
        :type RangeType: choice(Current,Voltage)
        :param Range: The range in which the power supply operates. This value is coerced to the
                      closest value the instrument supports that is greater than or equal to the value specified.
        :type Range: float
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        ccount = self.lld.Outputs.Count
        if self._ch_index > ccount:
            raise Exception("Only %d channels available on this instrument!" % ccount)
        if "c" in RangeType.lower():
            self.lld_ch.ConfigureRange(self.lld.Enums.IviDCPwrRangeTypeEnum.IviDCPwrRangeCurrent, Range)
        elif "v" in RangeType.lower():
            self.lld_ch.ConfigureRange(self.lld.Enums.IviDCPwrRangeTypeEnum.IviDCPwrRangeVoltage, Range)

    def Configure_VoltageLevel(self, Level, CurrentLimit=None, VoltageLimit=None):
        """
        Applies a voltage at a channel.

        :param Level: The voltage level to set.
        :type Level: float
        :param CurrentLimit: The current limit where the PS stops outputting.
        :type CurrentLimit: float
        :param VoltageLimit: The voltage limit where the PS stops outputting.
        :type VoltageLimit: float
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        if CurrentLimit is not None:
            self.lld_ch.CurrentLimit = CurrentLimit
        if VoltageLimit is not None:
            with contextlib.suppress(Exception):
                self.lld_ch.OVPLimit = VoltageLimit
        self.lld_ch.VoltageLevel = Level

    def Configure_CurrentLimit(self, Limit: float, Behavior: str = "regulate"):
        """
        Specifies the output current limit value and the behavior of the power supply when the output
        current is greater than or equal to that value.

        :param Behavior: Specifies the behavior of the power supply when the output current is greater
                         than or equal to the value of the Limit parameter. The driver uses this value to
                         set the Current Limit Behavior attribute. Either 'trip' or 'regulate' (default)
        :param Limit: Specifies the power supply's output current limit. The driver uses this value to
                      set the Current Limit attribute.
        """
        if isinstance(Behavior, str) and Behavior.lower().startswith("trip"):
            behavior = self.lld.Enums.IviDCPwrCurrentLimitBehaviorEnum.IviDCPwrCurrentLimitTrip
        elif isinstance(Behavior, str) and Behavior.lower().startswith("reg"):
            behavior = self.lld.Enums.IviDCPwrCurrentLimitBehaviorEnum.IviDCPwrCurrentLimitRegulate
        else:
            msg = "Behavior must be either 'trip' or 'regulate'!"
            raise ValueError(msg)
        self.lld_ch.ConfigureCurrentLimit(behavior, Limit)

    def Configure_OVP(self, Limit: float, Enabled: bool = True):
        """
        Specifies the over-voltage limit and the behavior of the
        power supply when the output voltage is greater than or equal to the limit.

        :param Enabled: Specifies the behavior of the power supply when the output voltage is greater
                        than or equal to the value of the Limit parameter.
        :param Limit: Specifies the power supply's over-voltage protection limit.
        """
        self.lld_ch.ConfigureOVP(Enabled, Limit)

    def Measure_Voltage(self):
        """
        Reads the voltage at the specified channel.

        :rtype: float
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        return self.lld_ch.Measure(self.lld.Enums.IviDCPwrMeasurementTypeEnum.IviDCPwrMeasurementVoltage)

    def Measure_Current(self):
        """
        Reads the current at the specified channel.

        :rtype: float
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        return self.lld_ch.Measure(self.lld.Enums.IviDCPwrMeasurementTypeEnum.IviDCPwrMeasurementCurrent)

    def Enable(self, Enabled: bool = True):
        """

        Switches the supply on or off for this channel.

        :param Enabled: If true the channel will be enabled.
        """
        self.lld._check_ivi_compliance()
        self.lld._check_initialized()

        self.lld_ch.Enabled = bool(Enabled)


if __name__ == "__main__":
    from pverify.drivers.DCPwr.hpe363xa.IIviDCPwr import IIviDCPwr

    a = SimpleIviDcPwr(IIviDCPwr())
    a.Initialize(ResourceName="COM1", IdQuery=1, Reset=1, OptionString="simulate=true")
    c = a.GetChannel(1)
    a.Close()
