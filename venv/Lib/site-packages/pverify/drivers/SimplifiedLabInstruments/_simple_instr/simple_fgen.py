from __future__ import annotations

from abc import abstractmethod
from typing import TYPE_CHECKING

from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper

from .simple_instrument import SimpleInstrument, SimpleInstrumentChannel

if TYPE_CHECKING:
    from pverify.core.lab.ivi.type_hinting.IviFgen import IIviFgen


class SimpleFgen_ABC(SimpleInstrument):
    @abstractmethod
    def FgenSetup(self, InternalTriggerRate=None, ReferenceClockSource=None):
        """
        Common Fgen setup.

        :param InternalTriggerRate: The rate at which the function generator's internal trigger source produces a trigger, in triggers per second.
        :type InternalTriggerRate: float
        :param ReferenceClockSource: The source of the reference clock. The function generator derives frequencies
                                     and sample rates that it uses to generate waveforms from the reference clock.
        :type ReferenceClockSource: choice(Internal,External)
        """

    @abstractmethod
    def InitiateGeneration(self):
        """
        If the function generator is in the Configuration State, this function moves the
        function generator to the Output Generation State. If the function generator is
        already in the Output Generation State, this function does nothing.
        """

    @abstractmethod
    def SendSoftwareTrigger(self):
        """
        Sends a software trigger, which will cause the function generator to generate output
        if the operation mode is Burst and the trigger source is "Software".
        """

    @abstractmethod
    def AbortGeneration(self):
        """
        If the function generator is in the Output Generation State, this function moves
        the function generator to the Configuration State. If the function generator is
        already in the Configuration State, the function does nothing and returns
        Success.
        """

    @abstractmethod
    def GetChannel(self, Index) -> SimpleFgenChannel_ABC:
        pass


class SimpleFgenChannel_ABC(SimpleInstrumentChannel):
    @abstractmethod
    def ChannelSetup(self, Impedance=None, OperationMode=None, BurstCount=None, TriggerSource=None):
        """
        Common setup for the Fgen channel

        :param Impedance: The impedance of the output channel. The units are Ohms. 0 means INFINITE.
        :type Impedance: float
        :param OperationMode: The mode that determines how the function generator produces output on a channel.

            - Continuous: When in the Output Generation State, the function generator produces output continuously.
            - Burst: When in the Output Generation State, the function generator produces a burst of waveform cycles
                     based on a trigger condition. A burst consists of a discrete number of waveform cycles.

        :type OperationMode: choice(Continuous,Burst)
        :param BurstCount: The number of waveform cycles that the function generator produces after it receives a trigger.
        :type BurstCount: int
        :param TriggerSource: The trigger source.
        :type TriggerSource: choice(Internal,External,SW,TTL0,TTL1,TTL2,TTL3,TTL4,TTL5,TTL6,TTL7,ECL0,ECL1)
        """

    @abstractmethod
    def Enable(self):
        """
        Enables the channel.
        """

    @abstractmethod
    def Disable(self):
        """
        Disables the channel.
        """

    @abstractmethod
    def Configure_Sine(self, Amplitude, Frequency, StartPhase, DCOffset):
        """
        Configures a sine wave output.

        :param Amplitude: The amplitude of the standard waveform output by the function generator. The units are volts.
        :type Amplitude: float
        :param Frequency: The frequency of the standard waveform output by the function generator. The units are Hertz.
        :type Frequency: float
        :param StartPhase: The frequency of the standard waveform output by the function generator. The units are Hertz.
        :type StartPhase: float
        :param DCOffset: The DC offset of the standard waveform output by the function generator. The units are volts.
        :type DCOffset: float
        """

    @abstractmethod
    def Configure_Square(self, DutyCycleHigh, Amplitude, Frequency, DCOffset):
        """
        Configures a square wave output.

        :param DutyCycleHigh: The duty cycle for a square waveform. The value is expressed as a percentage.
        :type DutyCycleHigh: float
        :param Amplitude: The amplitude of the standard waveform output by the function generator. The units are volts.
        :type Amplitude: float
        :param Frequency: The frequency of the standard waveform output by the function generator. The units are Hertz.
        :type Frequency: float
        :param DCOffset: The DC offset of the standard waveform output by the function generator. The units are volts.
        :type DCOffset: float
        """

    @abstractmethod
    def Configure_DC(self, DCOffset):
        """
        Configures a DC wave output.

        :param DCOffset: The DC offset of the standard waveform output by the function generator. The units are volts.
        :type DCOffset: float
        """

    @abstractmethod
    def Configure_Triangle(self, Amplitude, Frequency, DCOffset):
        """
        Configures a triangle wave output.

        :param Amplitude: The amplitude of the standard waveform output by the function generator. The units are volts.
        :type Amplitude: float
        :param Frequency: The frequency of the standard waveform output by the function generator. The units are Hertz.
        :type Frequency: float
        :param DCOffset: The DC offset of the standard waveform output by the function generator. The units are volts.
        :type DCOffset: float
        """

    @abstractmethod
    def Configure_RampUp(self, Amplitude, Frequency, DCOffset):
        """
        Configures a positive ramp waveform output.

        :param Amplitude: The amplitude of the standard waveform output by the function generator. The units are volts.
        :type Amplitude: float
        :param Frequency: The frequency of the standard waveform output by the function generator. The units are Hertz.
        :type Frequency: float
        :param DCOffset: The DC offset of the standard waveform output by the function generator. The units are volts.
        :type DCOffset: float
        """

    @abstractmethod
    def Configure_RampDown(self, Amplitude, Frequency, DCOffset):
        """
        Configures a positive ramp waveform output.

        :param Amplitude: The amplitude of the standard waveform output by the function generator. The units are volts.
        :type Amplitude: float
        :param Frequency: The frequency of the standard waveform output by the function generator. The units are Hertz.
        :type Frequency: float
        :param DCOffset: The DC offset of the standard waveform output by the function generator. The units are volts.
        :type DCOffset: float
        """

    @abstractmethod
    def Configure_Arbitrary(self, Data, Gain, Offset, SampleRate):
        """
        Configures an arbitrary waveform output.

        :param Data: Specifies the array of data to use for the new arbitrary waveform.
                     The array's elements must be normalized between -1.00 and +1.00.
        :type Data: list|np.ndarray
        :param Gain: The gain of the arbitrary waveform the function generator produces. This value is unitless.
        :type Gain: float
        :param Offset: The offset of the arbitrary waveform the function generator produces. The units are volts.
        :type Offset: float
        :param SampleRate: The sample rate of the arbitrary waveforms the function generator produces. The units are samples per second.
        :type SampleRate: float
        """

    @abstractmethod
    def Configure_ArbitraryFromWaveform(self, WaveformObj, SampleRate=None):
        """
        Configures an arbitrary waveform output.

        :param WaveformObj: The waveform to be configured as output
        :type WaveformObj: Waveform
        :param SampleRate: The sample rate of the arbitrary waveforms the function generator produces. The units are samples per second.
                           If specified the waveform object is sampled to the specified rate
        :type SampleRate: float
        """

    @abstractmethod
    def Enable_AM(self, Depth, Frequency, ModulationWaveform):
        """
        Enables amplitude modulation on the configured output waveform.

        :param Depth: The extent of modulation the function generator applies to the carrier waveform. The unit is percentage.
        :param Depth: float
        :param Frequency: The frequency of the internal modulating waveform source. The units are Hertz.
        :param Frequency: float
        :param ModulationWaveform: The waveform of the internal modulating waveform source.
        :param ModulationWaveform: choice(Sine,Square,Triangle,RampUp,RampDown)
        :return:
        """

    @abstractmethod
    def Disable_AM(self):
        pass

    @abstractmethod
    def Enable_FM(self, Deviation, Frequency, ModulationWaveform):
        """
        Enables frequency modulation on the configured output waveform.

        :param Deviation: The maximum frequency deviation the function generator applies to the carrier waveform.
        :param Deviation: float
        :param Frequency: The frequency of the internal modulating waveform source. The units are Hertz.
        :param Frequency: float
        :param ModulationWaveform: The waveform of the internal modulating waveform source.
        :param ModulationWaveform: choice(Sine,Square,Triangle,RampUp,RampDown)
        :return:
        """

    @abstractmethod
    def Disable_FM(self):
        pass


class SimpleIviFgen_ABC(SimpleFgen_ABC):
    def __init__(self, driver, alias=None):
        super().__init__(driver, alias)

        if not isinstance(driver, IVICOMDriverWrapper):
            msg = "Only drivers that implement the IVICOMDriverWrapper interface are supported!"
            raise TypeError(msg)

    @property
    def lld(self) -> IIviFgen.IIviFgen:
        return super().lld

    @abstractmethod
    def GetChannel(self, Index) -> SimpleIviFgenChannel_ABC:
        pass


class SimpleIviFgenChannel_ABC(SimpleFgenChannel_ABC):
    @property
    def lld(self) -> IIviFgen.IIviFgen:
        return super().lld
