from __future__ import annotations

from abc import abstractmethod
from typing import TYPE_CHECKING

from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper

from .simple_instrument import SimpleInstrument, SimpleInstrumentChannel

if TYPE_CHECKING:
    from pverify.core.lab.ivi.type_hinting.IviDCPwr import IIviDCPwr, IIviDCPwrOutput


class SimpleDcPwr_ABC(SimpleInstrument):
    @abstractmethod
    def GetChannel(self, Index) -> SimpleDcPwrChannel_ABC:
        pass


class SimpleDcPwrChannel_ABC(SimpleInstrumentChannel):
    @abstractmethod
    def Configure_Range(self, RangeType: str, Range: float):
        """
        Specifies the output's range, either current or voltage.

        :param RangeType: The kind of range to be configured, either Current or Voltage.
        :param Range: The range in which the power supply operates. This value is coerced to the
                      closest value the instrument supports that is greater than or equal to the value specified.
        """

    @abstractmethod
    def Configure_VoltageLevel(
        self, Level: float, CurrentLimit: float | None = None, VoltageLimit: float | None = None
    ):
        """
        Applies a voltage at a channel.

        :param Level: The voltage level to set.
        :param CurrentLimit: The current limit where the PS stops outputting.
        :param VoltageLimit: The voltage limit where the PS stops outputting.
        """

    @abstractmethod
    def Measure_Voltage(self):
        """
        Reads the voltage at the specified channel.

        :rtype: float
        """

    @abstractmethod
    def Measure_Current(self):
        """
        Reads the current at the specified channel.

        :rtype: float
        """

    @abstractmethod
    def Enable(self, Enabled: bool | int):
        """
        Switches the supply on or off for this channel.

        :param Enabled: If true the channel will be enabled.
        """


class SimpleIviDcPwr_ABC(SimpleDcPwr_ABC):
    def __init__(self, driver, alias=None):
        super().__init__(driver, alias)

        if not isinstance(driver, IVICOMDriverWrapper):
            msg = "Only drivers that implement the IVICOMDriverWrapper interface are supported!"
            raise TypeError(msg)

    @property
    def lld(self) -> IIviDCPwr.IIviDCPwr:
        return super().lld

    @abstractmethod
    def GetChannel(self, Index) -> SimpleIviDcPwrChannel_ABC:
        pass


class SimpleIviDcPwrChannel_ABC(SimpleDcPwrChannel_ABC):
    @property
    def lld(self) -> IIviDCPwr.IIviDCPwr:
        return super().lld

    @property
    @abstractmethod
    def lld_ch(self) -> IIviDCPwrOutput.IIviDCPwrOutput:
        raise NotImplementedError
