from __future__ import annotations

from abc import abstractmethod
from typing import TYPE_CHECKING

from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper

from .simple_instrument import SimpleInstrument

if TYPE_CHECKING:
    from pverify.core.lab.ivi.type_hinting.IviDmm import IIviDmm


class SimpleDmm_ABC(SimpleInstrument):
    @abstractmethod
    def DmmSetup(self, Function=None, Range=None, Resolution=None, AutoZero=None):
        """
        Common setup function for the DMM.

        :param Function: The measurement function. This property determines the units for Range and Resolution and
                         the values returned by the Read, Read Multiple Point, Fetch, and Fetch Multiple Point methods.
        :type Function: choice(DCVolts,ACVolts,DCCurrent,ACCurrent,2WireRes,4WireRes,Freq,Period)
        :param Range: The measurement range, coerced by the driver to the appropriate range for the instrument.
                      Positive values set the absolute value of the maximum measurement expected.
                      Negative values set Auto Range mode. Units are determined by Function.
        :type Range: float
        :param Resolution: The measurement resolution in absolute units. Units are determined by Function.
        :type Resolution: float
        :param AutoZero: The auto-zero mode. When the auto-zero mode is enabled, the DMM internally disconnects the
                         input signal and takes a Zero Reading. The DMM then subtracts the Zero Reading from the measurement.
        :type AutoZero: choice(On,Off,Once)
        """

    @abstractmethod
    def Configure_AC_Measurement(self, FrequencyMin=None, FrequencyMax=None):
        """
        Setup function for AC measurements.

        :param FrequencyMin: The minimum frequency component of the input signal for AC measurements.
                             The value of this property affects instrument behavior only when the Function
                             property is set to an AC voltage or AC current measurement.
        :type FrequencyMin: float
        :param FrequencyMax: The maximum frequency component of the input signal for AC measurements.
                             The value of this property affects instrument behavior only when the Function
                             property is set to an AC voltage or AC current measurement.
        :type FrequencyMax: float
        """

    @abstractmethod
    def Configure_Freq_Measurement(self, VoltageRange=None):
        """
        Setup function for Frequency measurements.

        :param VoltageRange: The expected maximum voltage level of the input signal for frequency and period measurements.
                             Positive values set the manual range. Negative values set Auto Range mode.
                             The units are specified in Volts RMS.
        :type VoltageRange: float
        """

    @abstractmethod
    def Configure_Trigger(self, Source=None, Slope=None, Delay=None):
        """
        Setup function for DMM trigger.

        :param Source: The trigger source.
        :type Source: choice(Immediate,External,SW,TTL0,TTL1,TTL2,TTL3,TTL4,TTL5,TTL6,TTL7,ECL0,ECL1)
        :param Slope: The polarity of the external trigger slope, which determines whether the DMM triggers on
                      either the rising or the falling edge of the external trigger source.
        :type Slope: choice(Positive,Negative)
        :param Delay: The interval between the time when the DMM receives the trigger and the time when it takes a
                      measurement. Positive values set the trigger delay in seconds. Negative values set auto delay mode.
        :type Delay: float
        """

    @abstractmethod
    def Configure_Multipoint(self, Count=None, SampleCount=None, SampleInterval=None, SampleTrigger=None):
        """
        Setup function for multipoint measurement.

        :param Count: The number of triggers the DMM accepts before it returns to the idle state.
        :type Count: int
        :param SampleCount: The number of measurements the DMM takes each time it receives a trigger.
        :type SampleCount: int
        :param SampleInterval: The interval between samples in seconds. Applies only when Sample Count is greater than 1 and Sample Trigger is Interval.
        :type SampleInterval: float
        :param SampleTrigger: The sample trigger source. If the value of the Sample Count is greater than 1,
                              the DMM enters the Wait-For-Sample-Trigger state after taking a single measurement.
                              When a sample trigger occurs, the DMM takes the next measurement.
        :type SampleTrigger: choice(Immediate,External,Interval,SW,TTL0,TTL1,TTL2,TTL3,TTL4,TTL5,TTL6,TTL7,ECL0,ECL1)
        """

    @abstractmethod
    def Initiate(self):
        """
        Initiates the DMM acquisition.
        """

    @abstractmethod
    def Abort(self):
        """
        Aborts the DMM acquisition.
        """

    @abstractmethod
    def Send_Software_Trigger(self):
        """
        Sends a software trigger, which causes the DMM to take a measurement.
        """

    @abstractmethod
    def Fetch_Multi(self, TimeoutMs):
        """
        Fetches multiple data points (count depends on multipoint setup).
        The Initiate method has to be called before fetching data points.

        :param TimeoutMs: The maximum time allowed for the measurement to complete in milliseconds.
        :type TimeoutMs: int
        :rtype: list[float]
        """

    @abstractmethod
    def Fetch_Single(self, TimeoutMs):
        """
        Fetches a single data point.
        The Initiate method has to be called before fetching the data point.

        :param TimeoutMs: The maximum time allowed for the measurement to complete in milliseconds.
        :type TimeoutMs: int
        :rtype: float
        """

    @abstractmethod
    def Read_Multi(self, TimeoutMs):
        """
        Initiates a measurement and fetches multiple data points (count depends on multipoint setup).

        :param TimeoutMs: The maximum time allowed for the measurement to complete in milliseconds.
        :type TimeoutMs: int
        :rtype: list[float]
        """

    @abstractmethod
    def Read_Single(self, TimeoutMs):
        """
        Initiates a measurement and fetches a single data point.

        :param TimeoutMs: The maximum time allowed for the measurement to complete in milliseconds.
        :type TimeoutMs: int
        :rtype: float
        """


class SimpleIviDmm_ABC(SimpleDmm_ABC):
    def __init__(self, driver, alias=None):
        super().__init__(driver, alias)

        if not isinstance(driver, IVICOMDriverWrapper):
            msg = "Only drivers that implement the IVICOMDriverWrapper interface are supported!"
            raise TypeError(msg)

    @property
    def lld(self) -> IIviDmm.IIviDmm:
        return super().lld
