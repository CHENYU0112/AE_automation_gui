from __future__ import annotations

import logging
from abc import ABC, abstractmethod


class LoggingAdapter(logging.LoggerAdapter):
    def process(self, msg, kwargs):
        return f"{self.extra.get('prefix', '')}{msg}", kwargs


class SimpleInstrument(ABC):
    def __init__(self, driver, alias: str | None = None):
        self._IsSimpleInstrument = True  # for legacy
        self._log = LoggingAdapter(
            logging.getLogger("PyVerify_TestLogger"),
            {"prefix": f"{alias if alias else self.__class__.__name__}: "},
        )
        if isinstance(driver, SimpleInstrument):
            self._lowlevel_driver = self._lld = driver._lowlevel_driver
        else:
            self._lowlevel_driver = self._lld = driver

    def __str__(self):
        return f"'{self.__class__.__name__}' wrapping driver '{self.lld}'"

    @property
    @abstractmethod
    def Initialized(self):
        pass

    @property
    @abstractmethod
    def drivername(self) -> str:
        pass

    @abstractmethod
    def Initialize(self, ResourceName, IdQuery, Reset, OptionString=""):
        """
        Opens the I/O session to the instrument. Driver methods and properties that
        access the instrument are only accessible after Initialize is called. Initialize
        optionally performs a Reset and queries the instrument to validate the
        instrument model.

        :param ResourceName: An IVI logical name or an instrument specific string that identifies the address
            of the instrument, such as a VISA resource descriptor string.
        :type ResourceName: str
        :param IdQuery: Specifies whether to verify the ID of the instrument.
        :type IdQuery: bool|int
        :param Reset: Specifies whether to reset the instrument.
        :type Reset: bool|int
        :param OptionString: The user can use the OptionsString parameter to specify the initial values of
            certain IVI inherent attributes for the session. The format of an assignment in
            the OptionsString parameter is "Name=Value", where Name is one of: RangeCheck,
            QuerytInstrStatus, Cache, Simulate, RecordCoercions, InterchangeCheck, or
            DriverSetup. Value is either true or false except for DriverSetup. If the
            Options String parameter contains an assignment for the Driver Setup attribute,
            the Initialize function assumes that everything following "DriverSetup=" is part
            of the assignment.
        :type OptionString: str
        """

    @abstractmethod
    def Close(self):
        """
        Closes the I/O session to the instrument. Driver methods and properties that
        access the instrument are not accessible after Close is called.
        """

    @property
    def lld(self):
        if self._lld is None:
            msg = "This simple instrument has no low level driver!"
            raise AttributeError(msg)
        return self._lld


class SimpleInstrumentChannel:
    def __init__(self, parent: SimpleInstrument, channel_index: int):
        self._parent = parent
        self._log = self._parent._log
        self._ch_index = channel_index
        self._lowlevel_driver = self._parent._lowlevel_driver  # Legacy

    @property
    def lld(self):
        return self._parent.lld

    @property
    def lld_ch(self):
        msg = "This simple instrument has no low level driver channel!"
        raise AttributeError(msg)
