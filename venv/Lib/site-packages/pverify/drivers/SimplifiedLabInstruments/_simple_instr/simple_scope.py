from __future__ import annotations

from abc import abstractmethod
from typing import TYPE_CHECKING

from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper

from .simple_instrument import SimpleInstrument, SimpleInstrumentChannel

if TYPE_CHECKING:
    from pverify.core.lab.ivi.type_hinting.IviScope import IIviScope, IIviScopeChannel


class SimpleScope_ABC(SimpleInstrument):
    @abstractmethod
    def ScopeSetup(self, TimePerRecord, RecordLength):
        """
        Sets the most commonly used parameters for the scope acquisition.

        :param TimePerRecord: Time in seconds of the acquired waveform. Recordlength/TimePerRecord=SampleRate
        :type TimePerRecord: float
        :param RecordLength: The record length of the acquired waveform. Recordlength/TimePerRecord=SampleRate
        :type RecordLength: int | float
        """

    @abstractmethod
    def Arm(self, Continuous=False):
        """
        Arms the acquisition of the probe.

        :param Continuous: If True, the oscilloscope waits trigger holdoff seconds after a waveform acquisition is
                           complete and then immediatley enters the wait for trigger state without passing through the idle state.
        """

    @abstractmethod
    def Trigger_Edge(self, Level, Slope, Position, Coupling, ChannelIndex, **kwargs):
        """
        Specifies the parameters of an edge trigger.

        :param Level: The trigger level.
        :type Level: float
        :param Slope: Defines the slope the probe triggers on (RISE, FALL)
        :type Slope: str
        :param Position: The horizontal trigger position in %.
        :type Position: float
        :param Coupling: The coupling of the trigger.

            - "AC"
            - "DC"
            - "LFR" (Low Frequency Rejection)
            - "HFR" (High Frequency Rejection)
            - "NR" (Noise Rejection"

        :type Coupling: str
        :param ChannelIndex: The channel index to use as trigger source
        :type ChannelIndex: int
        :param kwargs: Optional driver specific parameters
        :keyword ykdlm_hfrej: For ykdlm4000/ykdlm6000: Specifies high freq rej cutoff frequency (float): 15e3 | 20e6(default)
        :keyword ykdlm_nrej: For ykdlm4000/ykdlm6000: Specifies noise rej level (str): "low"(default) or "high"
        """

    @abstractmethod
    def Trigger_Width(
        self, Level, Polarity, Condition, ThresholdLow, ThresholdHigh, Position, Coupling, ChannelIndex, **kwargs
    ):
        """
        Configures the width trigger Source, Level, ThresholdLow,
        ThresholdHigh, Polarity, and Condition. A width trigger occurs when a
        pulse, that passes through Level, with a width between or outside, the
        width thresholds is detected.

        :param Level: The trigger level.
        :type Level: float
        :param Polarity: The polarity of the pulse that triggers the oscilloscope.
                         Either "POSITIVE", or "NEGATIVE", or short "POS", "NEG"
        :type Polarity: str
        :param Condition: The condition of a pulse that triggers the oscilloscope.
                          The condition is either "WITHIN", "OUTSIDE" or "TIMEOUT" of the high and low thresholds.
                          If "TIMEOUT" the high threshold will be ignored.
        :type Condition: str
        :param ThresholdLow: The low width threshold time. The units are seconds.
        :type ThresholdLow: float
        :param ThresholdHigh: The high width threshold time. The units are seconds.
        :type ThresholdHigh: float
        :param Position: The horizontal trigger position in %.
        :type Position: float
        :param Coupling: The coupling of the trigger.

            - "AC"
            - "DC"
            - "LFR" (Low Frequency Rejection)
            - "HFR" (High Frequency Rejection)
            - "NR" (Noise Rejection"

        :type Coupling: str
        :param ChannelIndex: The channel index to use as trigger source
        :type ChannelIndex: int
        :param Coupling: The coupling of the trigger.

            - "AC"
            - "DC"
            - "LFR" (Low Frequency Rejection)
            - "HFR" (High Frequency Rejection)
            - "NR" (Noise Rejection"

        :type Coupling: str
        """

    @abstractmethod
    def Trigger_Glitch(self, Level, Polarity, Condition, Width, Position, Coupling, ChannelIndex, **kwargs):
        """
        Configure the glitch trigger Source, Level, Width, Polarity, and Condition. A
        glitch trigger occurs when the edge of a pulse that matches the Width and
        Polarity crosses the specified Level.

        :param Level: The trigger level.
        :type Level: float
        :param Polarity: The polarity of the pulse that triggers the oscilloscope.
                         Either "POSITIVE", or "NEGATIVE", or short "POS", "NEG"
        :type Polarity: str
        :param Condition: The glitch condition detemermines whether the oscilloscope triggers on a a
                          pulse with a width "LESS" then or "MORE" than the glitch width value.
        :type Condition: str
        :param Width: The glitch width. The units are seconds.
        :type Width: float
        :param Position: The horizontal trigger position in %.
        :type Position: float
        :param Coupling: The coupling of the trigger.

            - "AC"
            - "DC"
            - "LFR" (Low Frequency Rejection)
            - "HFR" (High Frequency Rejection)
            - "NR" (Noise Rejection"

        :type Coupling: str
        :param ChannelIndex: The channel index to use as trigger source
        :type ChannelIndex: int
        :param Coupling: The coupling of the trigger. "AC" or "DC"
        :type Coupling: str
        """

    @property
    @abstractmethod
    def HasTriggered(self):
        """
        Returns True if the acquisition status is complete.
        """

    @abstractmethod
    def ForceTrigger(self):
        """
        Forces a trigger (if available in lowlevel driver)
        """

    @abstractmethod
    def GetChannel(self, Index) -> SimpleScopeChannel_ABC:
        pass


class SimpleScopeChannel_ABC(SimpleInstrumentChannel):
    def Enable(self, enabled=True):
        """
        Enables/Disables the channel

        :param enabled: If True, enable the channel
        """

    def ProbeSetup(
        self,
        Coupling,
        Bandwidth,
        Vrange=None,
        Offset=None,
        Position=0,
        Probe_Attn=-1,
        Probe_Type="voltage",
        Impedance=None,
    ):
        """
        Sets the most commonly used parameters for a channel

        :param Coupling: Defines how the probe is coupled (AC, DC, GND).
        :type Coupling: str
        :param Bandwidth: The maximum bandwidth of the probe.
        :type Bandwidth: float
        :param Vrange: Vertical range of the used scope channel.
        :type Vrange: float
        :param Offset: The location of the center of the range that you specify with the Vrange keyword.
        :type Offset: float
        :param Position: The vertical division number (-4 to 4) to shift the signal to.
        :type Position: float
        :param Impedance: The input impedance. Typically 1MOhm or 50 Ohm.
        :type Impedance: float
        """

    def GetProbeWaveform(self, Timeout=5, DecimationFactor=1, ForceTriggerOnTimeout=True):
        """
        Returns a dictionary representing the time- and data-vector of an acquired waveform.

        :param Timeout: The maximum time in seconds to wait for the acquisition to complete.
        :param DecimationFactor: If greater than 1, the function will return a waveform decimated by 'DecimationFactor'.
                                 E.g. calling the function with DecimationFactor=10 will return 10 times less points.
        :return: Waveform object
        :rtype: pverify.Waveform
        """

    def GetProbeMeasurement(self, MeasurementItem):
        """
        Returns a dictionary representing the time- and data-vector of an acquired waveform.

        :param MeasurementItem: The measurement that is returned.
                                Items:
                                Amplitude, Average, RMS, PeakToPeak, Dutycycle,
                                Risetime, Falltime, Frequency, Period,
                                High, Low, Maximum, Minimum, Overshoot,
                                Preshoot,WidthPos, WidthNeg,
                                BurstWidth (YK only), DeltaT (YK only), EdgeCount (YK only),
                                PulseCount (YK only), AvgFreq (YK only), AvgPeriod (YK only),
        :type MeasurementItem: str
        :return: Measured value
        :rtype: float
        """


class SimpleIviScope_ABC(SimpleScope_ABC):
    def __init__(self, driver, alias=None):
        super().__init__(driver, alias)

        if not isinstance(driver, IVICOMDriverWrapper):
            msg = "Only drivers that implement the IVICOMDriverWrapper interface are supported!"
            raise TypeError(msg)

    @property
    def lld(self) -> IIviScope.IIviScope:
        return super().lld

    @abstractmethod
    def GetChannel(self, Index) -> SimpleIviScopeChannel_ABC:
        pass


class SimpleIviScopeChannel_ABC(SimpleScopeChannel_ABC):
    @property
    def lld(self) -> IIviScope.IIviScope:
        return super().lld

    @property
    @abstractmethod
    def lld_ch(self) -> IIviScopeChannel.IIviScopeChannel:
        raise NotImplementedError
