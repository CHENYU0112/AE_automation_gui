from __future__ import annotations

from typing import Union

from pverify.core.lab.ivi.ivi_base_classes import IVICOMDriverWrapper as _IVICOMDriverWrapper

from ._simple_instr.simple_dcpwr import SimpleDcPwr_ABC as _SimpleDcPwr_ABC
from ._simple_instr.simple_dcpwr import SimpleIviDcPwr_ABC as _SimpleIviDcPwr_ABC
from ._simple_instr.simple_dmm import SimpleDmm_ABC as _SimpleDmm_ABC
from ._simple_instr.simple_dmm import SimpleIviDmm_ABC as _SimpleIviDmm_ABC
from ._simple_instr.simple_fgen import SimpleFgen_ABC as _SimpleFgen_ABC
from ._simple_instr.simple_fgen import SimpleIviFgen_ABC as _SimpleIviFgen_ABC
from ._simple_instr.simple_instrument import SimpleInstrument as _SimpleInstrument
from ._simple_instr.simple_scope import SimpleIviScope_ABC as _SimpleIviScope_ABC
from ._simple_instr.simple_scope import SimpleScope_ABC as _SimpleScope_ABC
from .SimpleIviDcPwr import SimpleIviDcPwr as _SimpleIviDcPwr
from .SimpleIviDmm import SimpleIviDmm as _SimpleIviDmm
from .SimpleIviFgen import SimpleIviFgen as _SimpleIviFgen
from .SimpleIviScope import SimpleIviScope as _SimpleIviScope

__all__ = [
    "SimpleDcPwr",
    "SimpleDCSource",
    "SimpleScope",
    "SimpleFgen",
    "SimpleDmm",
    "SimplePowerAnalyzer",
    "SimpleACSource",
    "SimpleProgLoad",
]


def SimpleDcPwr(drv):
    if isinstance(drv, _SimpleDcPwr_ABC):
        return drv
    elif isinstance(drv, _IVICOMDriverWrapper) and drv._ivi_compliant:
        return _SimpleIviDcPwr(drv)
    else:
        msg = f"Unsupported type of driver {drv}!"
        raise TypeError(msg)


SimpleDCSource = SimpleDcPwr


def SimpleScope(drv):
    if isinstance(drv, _SimpleScope_ABC):
        return drv
    elif isinstance(drv, _IVICOMDriverWrapper):
        return _SimpleIviScope(drv)
    else:
        msg = f"Unsupported type of driver {drv}!"
        raise TypeError(msg)


def SimpleFgen(drv):
    if isinstance(drv, _SimpleFgen_ABC):
        return drv
    elif isinstance(drv, _IVICOMDriverWrapper):
        return _SimpleIviFgen(drv)
    else:
        msg = f"Unsupported type of driver {drv}!"
        raise TypeError(msg)


def SimpleDmm(drv):
    if isinstance(drv, _SimpleDmm_ABC):
        return drv
    elif isinstance(drv, _IVICOMDriverWrapper):
        return _SimpleIviDmm(drv)
    else:
        msg = f"Unsupported type of driver {drv}!"
        raise TypeError(msg)


def SimplePowerAnalyzer(drv):
    from pverify.drivers.PowerAnalyzer.simple_ykwt import SimpleYKWT as _SimpleYKWT

    if isinstance(drv, _SimpleYKWT):
        return drv
    elif isinstance(drv, _IVICOMDriverWrapper) and drv.drivername in (
        "YK_WT500",
        "YK_WT1800",
        "YK_WT3000",
    ):
        return _SimpleYKWT(drv)
    else:
        msg = f"Unsupported type of driver {drv}!"
        raise TypeError(msg)


def SimpleACSource(drv):
    from pverify.drivers.ACPwr.chr615xx.chr615xx_simple import chr615xxSimple as _chr615xxSimple

    if isinstance(drv, _chr615xxSimple):
        return drv
    elif isinstance(drv, _IVICOMDriverWrapper) and drv.drivername == "CHR_615XX":
        return _chr615xxSimple(drv)
    else:
        msg = f"Unsupported type of driver {drv}!"
        raise TypeError(msg)


def SimpleProgLoad(drv):
    from pverify.drivers.ProgrammableLoad.chr6310.chr6310_simple import chr6310Simple as _chr6310Simple

    if isinstance(drv, _chr6310Simple):
        return drv
    elif isinstance(drv, _IVICOMDriverWrapper) and drv.drivername == "CHR_6310A":
        return _chr6310Simple(drv)
    else:
        msg = f"Unsupported type of driver {drv}!"
        raise TypeError(msg)
