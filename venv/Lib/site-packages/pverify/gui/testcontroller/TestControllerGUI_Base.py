# Form implementation generated from reading ui file
# 'C:/git/pyverify/src/pverify/gui\testcontroller\TestControllerGUI_Base.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from __future__ import annotations

from qtpy import QtCore, QtGui, QtWidgets


class Ui_MainWindow:
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setWindowModality(QtCore.Qt.NonModal)
        MainWindow.setEnabled(True)
        MainWindow.resize(1018, 780)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(456, 352))
        MainWindow.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/resources/PyVerify_Icon.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet(
            "QWidget\n"
            "{\n"
            "background-color: rgb(255, 255, 255);\n"
            "}\n"
            "QMenu::item:selected {\n"
            "    background-color:rgb(144, 200, 246);\n"
            "   color: black;\n"
            "}\n"
            "QToolbar::item:hover {\n"
            "    background-color:rgb(144, 200, 246);\n"
            "   color: black;\n"
            "}"
        )
        MainWindow.setIconSize(QtCore.QSize(64, 64))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QtCore.QSize(405, 115))
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setContentsMargins(5, 0, 5, 0)
        self.gridLayout.setSpacing(0)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setContentsMargins(-1, 0, -1, -1)
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/icons/resources/PyVerifyLogo.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.gridLayout.addLayout(self.horizontalLayout, 0, 0, 1, 1)
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Vertical)
        self.splitter.setHandleWidth(10)
        self.splitter.setObjectName("splitter")
        self.parameter_table = QtWidgets.QTableWidget(self.splitter)
        self.parameter_table.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.parameter_table.sizePolicy().hasHeightForWidth())
        self.parameter_table.setSizePolicy(sizePolicy)
        self.parameter_table.setMinimumSize(QtCore.QSize(387, 109))
        self.parameter_table.setStyleSheet("background-color: rgb(241, 241, 241);")
        self.parameter_table.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.parameter_table.setFrameShadow(QtWidgets.QFrame.Plain)
        self.parameter_table.setMidLineWidth(0)
        self.parameter_table.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.parameter_table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.parameter_table.setTabKeyNavigation(False)
        self.parameter_table.setProperty("showDropIndicator", False)
        self.parameter_table.setDragDropOverwriteMode(False)
        self.parameter_table.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.parameter_table.setShowGrid(True)
        self.parameter_table.setGridStyle(QtCore.Qt.DotLine)
        self.parameter_table.setCornerButtonEnabled(True)
        self.parameter_table.setColumnCount(2)
        self.parameter_table.setObjectName("parameter_table")
        self.parameter_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.parameter_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.parameter_table.setHorizontalHeaderItem(1, item)
        self.parameter_table.horizontalHeader().setVisible(True)
        self.parameter_table.horizontalHeader().setCascadingSectionResizes(True)
        self.parameter_table.horizontalHeader().setHighlightSections(True)
        self.parameter_table.horizontalHeader().setMinimumSectionSize(80)
        self.parameter_table.horizontalHeader().setStretchLastSection(True)
        self.parameter_table.verticalHeader().setVisible(False)
        self.parameter_table.verticalHeader().setCascadingSectionResizes(True)
        self.parameter_table.verticalHeader().setDefaultSectionSize(20)
        self.parameter_table.verticalHeader().setHighlightSections(False)
        self.parameter_table.verticalHeader().setMinimumSectionSize(20)
        self.parameter_table.verticalHeader().setSortIndicatorShown(False)
        self.parameter_table.verticalHeader().setStretchLastSection(False)
        self.logScreen = QtWidgets.QTextEdit(self.splitter)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.logScreen.sizePolicy().hasHeightForWidth())
        self.logScreen.setSizePolicy(sizePolicy)
        self.logScreen.setMinimumSize(QtCore.QSize(387, 51))
        self.logScreen.setAutoFillBackground(False)
        self.logScreen.setStyleSheet("background-color: rgb(241, 241, 241);\n")
        self.logScreen.setFrameShadow(QtWidgets.QFrame.Plain)
        self.logScreen.setLineWidth(0)
        self.logScreen.setUndoRedoEnabled(True)
        self.logScreen.setLineWrapMode(QtWidgets.QTextEdit.NoWrap)
        self.logScreen.setReadOnly(False)
        self.logScreen.setTextInteractionFlags(
            QtCore.Qt.LinksAccessibleByKeyboard
            | QtCore.Qt.LinksAccessibleByMouse
            | QtCore.Qt.TextBrowserInteraction
            | QtCore.Qt.TextEditable
            | QtCore.Qt.TextEditorInteraction
            | QtCore.Qt.TextSelectableByKeyboard
            | QtCore.Qt.TextSelectableByMouse
        )
        self.logScreen.setObjectName("logScreen")
        self.gridLayout.addWidget(self.splitter, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        font = QtGui.QFont()
        font.setItalic(False)
        font.setKerning(True)
        self.toolBar.setFont(font)
        self.toolBar.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.toolBar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.toolBar.setMovable(False)
        self.toolBar.setAllowedAreas(QtCore.Qt.AllToolBarAreas)
        self.toolBar.setOrientation(QtCore.Qt.Vertical)
        self.toolBar.setIconSize(QtCore.QSize(39, 40))
        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.toolBar.setFloatable(False)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.LeftToolBarArea, self.toolBar)
        self.actionStop = QtWidgets.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/icons/resources/player_stop.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionStop.setIcon(icon1)
        self.actionStop.setObjectName("actionStop")
        self.actionContinue = QtWidgets.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/resources/player_play.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionContinue.setIcon(icon2)
        self.actionContinue.setObjectName("actionContinue")
        self.actionPause = QtWidgets.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/resources/player_pause.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPause.setIcon(icon3)
        self.actionPause.setObjectName("actionPause")
        self.actionNext_BP = QtWidgets.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/resources/player_end.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionNext_BP.setIcon(icon4)
        self.actionNext_BP.setObjectName("actionNext_BP")
        self.action_Tools_OpenTwinCAT = QtWidgets.QAction(MainWindow)
        self.action_Tools_OpenTwinCAT.setObjectName("action_Tools_OpenTwinCAT")
        self.action_Tools_ResultBrowser = QtWidgets.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/resources/result_icon.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Tools_ResultBrowser.setIcon(icon5)
        self.action_Tools_ResultBrowser.setObjectName("action_Tools_ResultBrowser")
        self.action_Tools_ExportToIPython = QtWidgets.QAction(MainWindow)
        self.action_Tools_ExportToIPython.setObjectName("action_Tools_ExportToIPython")
        self.action_Tools_ImportFromIPython = QtWidgets.QAction(MainWindow)
        self.action_Tools_ImportFromIPython.setObjectName("action_Tools_ImportFromIPython")
        self.toolBar.addAction(self.actionStop)
        self.toolBar.addAction(self.actionPause)
        self.toolBar.addAction(self.actionContinue)
        self.toolBar.addAction(self.actionNext_BP)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "PyVerify Test Control"))
        item = self.parameter_table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Parameters"))
        item = self.parameter_table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Values [Unit]"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "Toolbar"))
        self.actionStop.setText(_translate("MainWindow", "Stop"))
        self.actionStop.setToolTip(_translate("MainWindow", "Stop current test (F1)"))
        self.actionStop.setShortcut(_translate("MainWindow", "F1"))
        self.actionContinue.setText(_translate("MainWindow", "Continue"))
        self.actionContinue.setToolTip(_translate("MainWindow", "Continue paused test (F3)"))
        self.actionContinue.setShortcut(_translate("MainWindow", "F3"))
        self.actionPause.setText(_translate("MainWindow", "Pause"))
        self.actionPause.setToolTip(_translate("MainWindow", "Pause running test (F2)"))
        self.actionPause.setShortcut(_translate("MainWindow", "F2"))
        self.actionNext_BP.setText(_translate("MainWindow", "Next BP"))
        self.actionNext_BP.setToolTip(_translate("MainWindow", "Continue to next breakpoint and pause (F4)"))
        self.actionNext_BP.setShortcut(_translate("MainWindow", "F4"))
        self.action_Tools_OpenTwinCAT.setText(_translate("MainWindow", "TwinCAT Rack Safety"))
        self.action_Tools_OpenTwinCAT.setToolTip(
            _translate("MainWindow", "Open a control panel for TwinCAT Rack Safety System")
        )
        self.action_Tools_ResultBrowser.setText(_translate("MainWindow", "Result Browser"))
        self.action_Tools_ResultBrowser.setToolTip(_translate("MainWindow", "Opens a result browser for the test (F5)"))
        self.action_Tools_ResultBrowser.setShortcut(_translate("MainWindow", "F5"))
        self.action_Tools_ExportToIPython.setText(_translate("MainWindow", "Export to Jupyter Notebook"))
        self.action_Tools_ImportFromIPython.setText(_translate("MainWindow", "Import from Jupyter Notebook"))


from . import resource_rc  # noqa: F401, E402
