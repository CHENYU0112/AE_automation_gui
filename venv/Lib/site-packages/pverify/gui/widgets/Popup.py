# Form implementation generated from reading ui file 'ErrorPopup_Base.ui'
#
# Created: Mon Aug 17 12:51:53 2015
#      by: pyside-uic 0.2.15 running on PySide 1.2.2
#
# WARNING! All changes made in this file will be lost!
from __future__ import annotations

import traceback

from qtpy import QtCore, QtGui, QtWidgets

from pverify.core.util.string_util import pretty_print_traceback
from pverify.gui.widgets.Popup_Base import Ui_Popup


class Popup(QtWidgets.QDialog, Ui_Popup):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.open = False

    def obj_attributes2text(self, obj):
        """"""
        text = f"\n\nAttributes of object '{obj}'"
        try:
            for key, value in obj.__dict__.items():
                text += "\n\t%20s = %s" % (key, value)
        except Exception:
            text += "\n<Error while iterating __dict__>"
        return text

    def show_message(self, text):
        font = self.message.font()  # or another font if you change it
        fontMetrics = QtGui.QFontMetrics(font)  # a QFontMetrics based on our font
        textSize = fontMetrics.size(0, text)

        screen_resolution = QtCore.QCoreApplication.instance().desktop().screenGeometry()
        screenwidth, screenheight = screen_resolution.width(), screen_resolution.height()

        textWidth = textSize.width() + 30  # constant may need to be tweaked
        if textWidth > screenwidth:
            textWidth = screenwidth
        textHeight = textSize.height() + 30  # constant may need to be tweaked
        if textHeight > screenheight:
            textHeight = screenheight

        self.message.resize(textWidth, textHeight)  # good if you want this to be standalone
        self.message.setText(text)
        self.resize(textWidth + 12, textHeight + 60)
        self.show()
        self.open = True

    def get_error_traceback(self, objs=None):
        if objs is None:
            objs = []
        traceback.print_exc()
        tb = pretty_print_traceback()
        for obj in objs:
            tb += self.obj_attributes2text(obj)
        return tb

    def show_error_traceback(self, objs=None):
        if objs is None:
            objs = []
        tb = self.get_error_traceback(objs=objs)
        self.setModal(True)
        self.show_message(tb)

    def configure(self, windowtitle="", font=None, modal=False):
        if windowtitle != "":
            self.setWindowTitle(windowtitle)
        if font is not None and isinstance(font, QtGui.QFont):
            self.message.setFont(font)
        else:
            self.message.setFont(QtGui.QFont("Courier", 9))
        self.setModal(modal)

    def closeEvent(self, event):
        self.open = False
        event.accept()


if __name__ == "__main__":
    app = QtWidgets.QApplication([])
    try:
        msg = "bla"
        raise Exception(msg)
    except Exception:
        e = Popup()
        e.show_message(traceback.format_exc())
        app.exec_()
