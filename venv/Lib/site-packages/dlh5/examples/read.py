from __future__ import annotations

import pprint
from pathlib import Path

from dlh5 import DLH5

with DLH5(Path("examplefile.dlh5"), "r") as f:
    # Reading metadata
    # ################
    all_file_metadata = f.file_get_metadata(key=None)
    print(f"All file level metadata:\n {pprint.pformat(all_file_metadata, indent=2)}")
    print(f"The creation date: {f.file_get_metadata('creation_date')}")

    all_group_0_metadata = f.group_get_metadata(gid=0, key=None)
    print(f"All group 0 metadata:\n {pprint.pformat(all_group_0_metadata, indent=2)}")

    all_channel_metadata = f.group_get_channel_metadata(gid=0, cname="waveform1", key=None)
    print(f"All group 0/channel 'waveform' metadata:\n {pprint.pformat(all_channel_metadata, indent=2)}")

    # Inspecting groups and channels
    # ##############################
    print(f"A list of group ids contained in the file: {f.file_list_groups()}")
    print(f"A list of channels contained in group 0: {f.list_channels(gid=0)}")

    print(f"A list of string channels in group 0:   {f.list_string_channels(gid=0)}")
    print(f"A list of numeric channels in group 0:  {f.list_numeric_channels(gid=0)}")
    print(f"A list of array channels in group 0:    {f.list_array_channels(gid=0)}")
    group_id_0 = f.file_get_group(0)
    print(f"A list of waveform channels in group 0: {f.list_waveform_channels(gid=group_id_0)}")
    print(f"A list of files channels in group 0: {f.list_file_channels(gid=group_id_0)}")

    # Reading operating conditions
    # ############################
    op_group_0 = f.group_get_operating_conditions(gid=0, key=None)
    print(f"All group 0 operating conditions:\n {pprint.pformat(op_group_0, indent=2)}")

    # Reading raw data
    # ################
    string_data, metadata = f.group_get_channel(gid=0, cname="mystring")
    waveform_data, _ = f.group_get_channel(gid=0, cname="waveform1")

    # Reading file data
    # #################
    bytedata, metadata = f.group_get_channel(gid=0, cname="mylogs")
    f.save_file_channel(bytedata, metadata, "somepath.txt")

    # Reading raw data via index
    # ##########################
    print(f"Scalar results as dataframe:\n{f.get_index_results().as_dataframe()}")
    print(f"Operating conditions as dataframe:\n{f.get_index_operating_conditions().as_dataframe()}")
    print(f"Group metadata as dataframe:\n{f.get_index_metadata().as_dataframe()}")
    print(f"Channel metadata as dataframe:\n{f.get_index_results_metadata().as_dataframe()}")

    print(f"Operating conditions as dict:\n{f.get_index_operating_conditions().as_dataframe().to_dict()}")

    # Searching for data
    # ##################

    # Filtering the index
    filtered_index_op = f.get_index_operating_conditions().select(where="paramA > 5 and paramB <10")
    # Using filtered index to read desired waveforms
    waveforms = []
    for gid in filtered_index_op.get_group_ids():
        waveforms.append(f.group_get_channel(gid=gid, cname="waveform1")[0])

    # Searching multiple indices at once
    oc = f.get_index_operating_conditions()
    r = f.get_index_results()
    result = oc.select(where=[1, 2, 3]).intersect(r.select(where=[2, 3, 4]), on_merge_conflict="use_left")
    print(f"Result:\n{result.as_dataframe()}")
